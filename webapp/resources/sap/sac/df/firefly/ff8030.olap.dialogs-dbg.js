/*!
 * SAPUI5
    (c) Copyright 2009-2021 SAP SE. All rights reserved
  
 */
/*global sap*/
sap.ui.define(
[
"sap/sac/df/firefly/ff3400.contextmenu.engine","sap/sac/df/firefly/ff8010.olap.ui"
],
function(oFF)
{
"use strict";
oFF.FF8030_OLAP_DIALOGS_RESOURCES = function() {};
oFF.FF8030_OLAP_DIALOGS_RESOURCES.prototype = {};
oFF.FF8030_OLAP_DIALOGS_RESOURCES.prototype._ff_c = "FF8030_OLAP_DIALOGS_RESOURCES";

oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_actions_olapui_OpenVariableDialog_json = "manifests/actions/olapui/OpenVariableDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_CalculationsDialog_json = "manifests/programs/CalculationsDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_CurrencyConversionDialog_json = "manifests/programs/CurrencyConversionDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_DimensionDialog2_json = "manifests/programs/DimensionDialog2.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_FilterDialogDimension_json = "manifests/programs/FilterDialogDimension.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_FilterDialogHierarchyCatalog_json = "manifests/programs/FilterDialogHierarchyCatalog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_FilterDialogMeasureBasedFilter_json = "manifests/programs/FilterDialogMeasureBasedFilter.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_FilterDialogUserTeam_json = "manifests/programs/FilterDialogUserTeam.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_FilterDialogVariable_json = "manifests/programs/FilterDialogVariable.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_Inventory_json = "manifests/programs/Inventory.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_MeasureDimensionConfigDialog_json = "manifests/programs/MeasureDimensionConfigDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_QueryInformationDialog_json = "manifests/programs/QueryInformationDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_SelectHierarchyDialog_json = "manifests/programs/SelectHierarchyDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_ShareDialog_json = "manifests/programs/ShareDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_TopNDialog_json = "manifests/programs/TopNDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.PATH_manifests_programs_VariableDialog_json = "manifests/programs/VariableDialog.json";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_actions_olapui_OpenVariableDialog_json = "ewogICJOYW1lIjogIm9wZW5WYXJpYWJsZURpYWxvZyIsCiAgIkRpc3BsYXlOYW1lIjogIk9wZW4gVmFyaWFibGVEaWFsb2ciLAogICJEZXNjcmlwdGlvbiI6ICJPcGVuIHRoZSB2YXJpYWJsZSBkaWFsb2ciLAogICJDYXRlZ29yeSI6ICJPbGFwVWlBY3Rpb25zIiwKICAiUGFyYW1ldGVycyI6IFsKICAgIHsKICAgICAgIk5hbWUiOiAiVGl0bGUiLAogICAgICAiRGlzcGxheU5hbWUiOiAiVGlsZSIsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgdGl0bGUgb2YgdGhlIHZhcmlhYmxlIGRpYWxvZyIsCiAgICAgICJUeXBlIjogIlN0cmluZyIKICAgIH0sCiAgICB7CiAgICAgICJOYW1lIjogIk90aGVyQXJndW1lbnRzIiwKICAgICAgIkRpc3BsYXlOYW1lIjogIk90aGVyIGFyZ3VtZW50cyIsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJNb3JlIGFyZ3VtZW50cyByb3V0ZWQgdG8gdGhlIHZhcmlhYmxlIGRpYWxvZyBpbiBKU09OIGZvcm1hdCIsCiAgICAgICJUeXBlIjogIk9iamVjdCIKICAgIH0KICBdCn0K";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_CalculationsDialog_json = "ewogICJOYW1lIjogIkNhbGN1bGF0aW9uc0RpYWxvZyIsCiAgIkRpc3BsYXlOYW1lIjogIkNhbGN1bGF0aW9uc0RpYWxvZyIsCiAgIkRlc2NyaXB0aW9uIjogIkRpYWxvZyBmb3IgZGVmaW5pbmcgb3IgZWRpdGluZyBhIGNhbGN1bGF0aW9uIiwKICAiQXV0aG9yIjogIk3DoWlydMOtbiBLZWFuZSIsCiAgIkljb25QYXRoIjogIiIsCiAgIkFwcFN0b3JlIjogZmFsc2UsCiAgIkluaXRpYWxseU9uTGF1bmNocGFkIjogZmFsc2UsCiAgIkNhdGVnb3J5IjogIk9sYXAiLAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3MuY2FsY3VsYXRpb25zZGlhbG9nLk91Q2FsY0NhbGN1bGF0aW9uc0RpYWxvZyIsCiAgIlN1YlN5c3RlbXMiOiBbCiAgICAiR3VpIgogIF0sCiAgIk1vZHVsZXMiOiBbCiAgICAiZmYzNjEwLmhvcml6b24udWkiLAogICAgImZmNDM0MC5vbGFwLnJlZmVyZW5jZSIsCiAgICAiZmY0NDAwLm9sYXAucHJvdmlkZXJzIiwKICAgICJmZjQ0MTAub2xhcC5pcC5wcm92aWRlcnMiLAogICAgImZmNTQwMC5mb3JtdWxhLmVkaXRvciIsCiAgICAiZmY1NDEwLmZvcm11bGEuZWRpdG9yLm5hdGl2ZSIsCiAgICAiZmY4MDMwLm9sYXAuZGlhbG9ncyIKICBdCn0=";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_CurrencyConversionDialog_json = "ewogICJOYW1lIjogIkN1cnJlbmN5Q29udmVyc2lvbkRpYWxvZyIsCiAgIkRpc3BsYXlOYW1lIjogIkN1cnJlbmN5IENvbnZlcnNpb24gRGlhbG9nIiwKICAiRGVzY3JpcHRpb24iOiAiRGlhbG9nIHRvIHNlbGVjdCB0aGUgY3VycmVuY3kgY29udmVyc2lvbiBhcHBsaWVkIHRvIHRoZSBxdWVyeSIsCiAgIkF1dGhvciI6ICJTaGFuZSBDb25yb3kiLAogICJQcm9maWxlcyI6IFsKICAgICJza3lsaWdodHMiLAogICAgInNhYyIsCiAgICAib2xhcHVpIgogIF0sCiAgIkNhdGVnb3J5IjogIk9sYXAiLAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3MuY3VycmVuY3ljb252ZXJzaW9uZGlhbG9nLk91Q3VycmVuY3lDb252ZXJzaW9uRGlhbG9nIiwKICAiU3ViU3lzdGVtcyI6IFsKICAgICJHdWkiCiAgXSwKICAiTW9kdWxlcyI6IFsKICAgICJmZjgwMzAub2xhcC5kaWFsb2dzIgogIF0KfQo=";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_DimensionDialog2_json = "ewogICJOYW1lIjogIkRpbWVuc2lvbkRpYWxvZzIiLAogICJEaXNwbGF5TmFtZSI6ICJEaW1lc2lvbiBEaWFsb2cgMiIsCiAgIkRlc2NyaXB0aW9uIjogIkRpYWxvZyB0byBjb25maWd1cmUgZGltZW5zaW9uIHByb3BlcnRpZXMiLAogICJQcm9maWxlcyI6IFsKICAgICJza3lsaWdodHMiLAogICAgInNhYyIsCiAgICAib2xhcHVpIgogIF0sCiAgIkF1dGhvciI6ICJBbGV4YW5kZXIgRGF1bSIsCiAgIkNhdGVnb3J5IjogIk9sYXAiLAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3MuZGltZW5zaW9uZGlhbG9nMi5PdURpbWVuc2lvbkRpYWxvZzIiLAogICJTdWJTeXN0ZW1zIjogWwogICAgIkd1aSIKICBdLAogICJNb2R1bGVzIjogWwogICAgImZmODAzMC5vbGFwLmRpYWxvZ3MiCiAgXQp9Cg==";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_FilterDialogDimension_json = "";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_FilterDialogHierarchyCatalog_json = "";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_FilterDialogMeasureBasedFilter_json = "ewogICJOYW1lIjogIkZpbHRlckRpYWxvZ01lYXN1cmVCYXNlZEZpbHRlciIsCiAgIkRpc3BsYXlOYW1lIjogIk1lYXN1cmUgQmFzZWQgRmlsdGVyIERpYWxvZyIsCiAgIkRlc2NyaXB0aW9uIjogIkRpYWxvZyBmb3IgZmlsdGVyaW5nIG9uIG1lYXN1cmVzIiwKICAiQXV0aG9yIjogIk1hcmt1cyBXZWJlciIsCiAgIlByb2ZpbGVzIjogWwogICAgInNreWxpZ2h0cyIsCiAgICAic2FjIiwKICAgICJvbGFwdWkiCiAgXSwKICAiSWNvbiI6ICIke2ZmX21pbWVzfS9pbWFnZXMvcHJvZ3JhbWljb25zL2ZpbHRlckRpYWxvZy5wbmciLAogICJBcHBTdG9yZSI6IGZhbHNlLAogICJJbml0aWFsbHlPbkxhdW5jaHBhZCI6IGZhbHNlLAogICJDYXRlZ29yeSI6ICJPbGFwIiwKICAiSW5pdGlhbENvbnRhaW5lckZyYW1lIjogewogICAgIldpZHRoIjogbnVsbCwKICAgICJIZWlnaHQiOiBudWxsLAogICAgIlgiOiBudWxsLAogICAgIlkiOiBudWxsLAogICAgIk1heGltaXplZCI6IGZhbHNlCiAgfSwKICAiQ29udGFpbmVyIjogIkRpYWxvZyIsCiAgIkNsYXNzIjogImNvbS5zYXAuZmlyZWZseS5kaWFsb2dzLmZpbHRlcmRpYWxvZy5pbXBsLkZpbHRlckRpYWxvZ01lYXN1cmVCYXNlZEZpbHRlclJlZmVyZW5jZUltcGwiLAogICJTdWJTeXN0ZW1zIjogWwogICAgIkd1aSIKICBdLAogICJNb2R1bGVzIjogWwogICAgImZmODAzMC5vbGFwLmRpYWxvZ3MiCiAgXSwKICAiQXJndW1lbnRzIjogewogICAgInF1ZXJ5TWFuYWdlck5hbWUiOiB7CiAgICAgICJUeXBlIjogInN0cmluZyIsCiAgICAgICJSZXF1aXJlZCI6IHRydWUsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgcXVlcnkgbWFuYWdlciIsCiAgICAgICJEZWZhdWx0IjogbnVsbAogICAgfSwKICAgICJtZWFzdXJlQmFzZWRGaWx0ZXJNZW1iZXJOYW1lIjogewogICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAiUmVxdWlyZWQiOiB0cnVlLAogICAgICAiRGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIHN0cnVjdHVyZS9kaW1lbnNpb24gbWVtYmVyIHRvIG9wZW4gdGhlIG1lYXN1cmUgYmFzZWQgZmlsdGVyIGRpYWxvZyBmb3IiLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0sCiAgICAidGl0bGUiOiB7CiAgICAgICJUeXBlIjogInN0cmluZyIsCiAgICAgICJSZXF1aXJlZCI6IHRydWUsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgZGlhbG9nIHRpdGxlIiwKICAgICAgIkRlZmF1bHQiOiBudWxsCiAgICB9LAogICAgImxheWVyZWRGaWx0ZXJOYW1lIjogewogICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIGEgc3BlY2lmaWMgbGF5ZXJlZCBmaWx0ZXIgd2hpY2ggc2hvdWxkIGJlIHBhcnNlZCBhbmQgdXBkYXRlZCBieSB0aGUgZGlhbG9nIiwKICAgICAgIkRlZmF1bHQiOiBudWxsCiAgICB9LAogICAgInVzYWdlVHJhY2tpbmdDb25zdW1lciI6IHsKICAgICAgIlR5cGUiOiAic3RyaW5nIiwKICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgY29uc3VtZXIgbmFtZSBmb3IgdXNhZ2UgdHJhY2tpbmciLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0KICB9LAogICJvYmplY3RBcmd1bWVudHMiOiB7CiAgICAibWVhc3VyZUJhc2VkRmlsdGVyIjogewogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBtZWFzdXJlIGJhc2VkIGZpbHRlciB0byBvcGVuIHRoZSBmaWx0ZXIgZGlhbG9nIGZvci4gVGhlIE1CRiBtZW1iZXIgbmFtZSBhbmQgZWl0aGVyIHRoaXMgb3IgYSBsYXllcmVkIGZpbHRlciBuYW1lIG11c3QgYmUgc2V0LiIsCiAgICAgICJEZWZhdWx0IjogbnVsbAogICAgfSwKICAgICJkZWZhdWx0U2VsZWN0aW9uIjogewogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlc2NyaXB0aW9uIjogIkEgbGlzdCBvZiB2YWx1ZXMgc2VsZWN0ZWQgYnkgZGVmYXVsdCIsCiAgICAgICJEZWZhdWx0IjogbnVsbAogICAgfQogIH0sCiAgImxpc3RlbmVycyI6IHsKICAgICJjbG9zZUxpc3RlbmVyIjogewogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlc2NyaXB0aW9uIjogIkEgY2xvc2UgbGlzdGVuZXIgb2YgdHlwZSBJRmlsdGVyRGlhbG9nQ2xvc2VMaXN0ZW5lciIsCiAgICAgICJEZWZhdWx0IjogbnVsbAogICAgfSwKICAgICJiZWZvcmVGaWx0ZXJDaGFuZ2VMaXN0ZW5lciI6IHsKICAgICAgIlR5cGUiOiAib2JqZWN0IiwKICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJBIGxpc3RlbmVyIHRyaWdnZXJlZCBqdXN0IGJlZm9yZSB0aGUgZmlsdGVyIGlzIHVwZGF0ZWQiLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0sCiAgICAibGlzdGVuZXJTZWxlY3Rpb25DaGFuZ2UiOiB7CiAgICAgICJUeXBlIjogIm9iamVjdCIsCiAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAiRGVzY3JpcHRpb24iOiAiQSBsaXN0ZW5lciBmb3Igc2VsZWN0aW9uIGNoYW5nZXMiLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0KICB9LAogICJDb25maWd1cmF0aW9uIjogewogICAgIlByb3BlcnRpZXMiOiB7CiAgICAgICJ0aXRsZSI6IHsKICAgICAgICAiRGlzcGxheU5hbWUiOiAiRGlhbG9nIFRpdGxlIiwKICAgICAgICAiRGVzY3JpcHRpb24iOiAiVGhlIHRpdGxlIHNob3duIGluIHRoZSBkaWFsb2cgaGVhZGVyIiwKICAgICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAgICJSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgIkRlZmF1bHQiOiAiIgogICAgICB9LAogICAgICAic2VsZWN0aW9uTW9kZSI6IHsKICAgICAgICAiRGlzcGxheU5hbWUiOiAiU2VsZWN0aW9uIE1vZGUiLAogICAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgZGlhbG9nIFVJIHRhYmxlIHNlbGVjdGlvbiBtb2RlIiwKICAgICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogIlNpbmdsZSIsCiAgICAgICAgIkNob2ljZXMiOiBbCiAgICAgICAgICAiU2luZ2xlIiwKICAgICAgICAgICJNdWx0aVRvZ2dsZSIKICAgICAgICBdCiAgICAgIH0sCiAgICAgICJzZWxlY3Rpb25SZXF1aXJlZCI6IHsKICAgICAgICAiRGlzcGxheU5hbWUiOiAiU2VsZWN0aW9uIFJlcXVpcmVkIiwKICAgICAgICAiRGVzY3JpcHRpb24iOiAiV2hldGhlciBhIHNlbGVjdGlvbiBpcyByZXF1aXJlZCIsCiAgICAgICAgIlR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgIkRlZmF1bHQiOiBmYWxzZQogICAgICB9LAogICAgICAicmVzaXplYWJsZSI6IHsKICAgICAgICAiRGlzcGxheU5hbWUiOiAiUmVzaXplYWJsZSIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIldoZXRoZXIgdGhlIGRpYWxvZyBzaG91bGQgYmUgcmVzaXplYWJsZSIsCiAgICAgICAgIlR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgIkRlZmF1bHQiOiB0cnVlCiAgICAgIH0sCiAgICAgICJhbHdheXNTaG93U2VsZWN0aW9uQ29udGFpbmVyIjogewogICAgICAgICJEaXNwbGF5TmFtZSI6ICJBbHdheXMgU2hvdyBTZWxlY3Rpb24gQ29udGFpbmVyIiwKICAgICAgICAiRGVzY3JpcHRpb24iOiAiV2hldGhlciB0aGUgc2VsZWN0aW9uIGxpc3Qgc2hvdWxkIGFsd2F5cyBiZSB2aXNpYmxlIGluIHRoZSBkaWFsb2ciLAogICAgICAgICJUeXBlIjogImJvb2xlYW4iLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogZmFsc2UKICAgICAgfSwKICAgICAgIm9mZmVyRXF1YWxJblJhbmdlRmlsdGVyIjogewogICAgICAgICJEaXNwbGF5TmFtZSI6ICJPZmZlciBFcXVhbCBJbiBSYW5nZSBGaWx0ZXIiLAogICAgICAgICJEZXNjcmlwdGlvbiI6ICJXaGV0aGVyIGNvbXBhcmlzb24gb3BlcmF0b3IgRVFVQUwgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiByYW5nZSB2aWV3IiwKICAgICAgICAiVHlwZSI6ICJib29sZWFuIiwKICAgICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiRGVmYXVsdCI6IGZhbHNlCiAgICAgIH0KICAgIH0KICB9Cn0K";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_FilterDialogUserTeam_json = "ewogICJOYW1lIjogIkZpbHRlckRpYWxvZ1VzZXJUZWFtIiwKICAiRGlzcGxheU5hbWUiOiAiVXNlcnMgYW5kIFRlYW1zIEZpbHRlciBEaWFsb2ciLAogICJEZXNjcmlwdGlvbiI6ICJEaWFsb2cgZm9yIHNlbGVjdGluZyB1c2VycyBhbmQgdGVhbXMiLAogICJBdXRob3IiOiAiTWFya3VzIFdlYmVyIiwKICAiUHJvZmlsZXMiOiBbCiAgICAic2t5bGlnaHRzIiwKICAgICJzYWMiLAogICAgIm9sYXB1aSIKICBdLAogICJJY29uIjogIiR7ZmZfbWltZXN9L2ltYWdlcy9wcm9ncmFtaWNvbnMvZmlsdGVyRGlhbG9nLnBuZyIsCiAgIkFwcFN0b3JlIjogZmFsc2UsCiAgIkluaXRpYWxseU9uTGF1bmNocGFkIjogZmFsc2UsCiAgIkNhdGVnb3J5IjogIk9sYXAiLAogICJJbml0aWFsQ29udGFpbmVyRnJhbWUiOiB7CiAgICAiV2lkdGgiOiBudWxsLAogICAgIkhlaWdodCI6IG51bGwsCiAgICAiWCI6IG51bGwsCiAgICAiWSI6IG51bGwsCiAgICAiTWF4aW1pemVkIjogZmFsc2UKICB9LAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3MuZmlsdGVyZGlhbG9nLmltcGwuRmlsdGVyRGlhbG9nVXNlclRlYW1SZWZlcmVuY2VJbXBsIiwKICAiU3ViU3lzdGVtcyI6IFsKICAgICJHdWkiCiAgXSwKICAiTW9kdWxlcyI6IFsKICAgICJmZjgwMzAub2xhcC5kaWFsb2dzIgogIF0sCiAgIkFyZ3VtZW50cyI6IHsKICAgICJ0aXRsZSI6IHsKICAgICAgIlR5cGUiOiAic3RyaW5nIiwKICAgICAgIlJlcXVpcmVkIjogdHJ1ZSwKICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBkaWFsb2cgdGl0bGUiLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0sCiAgICAid29ya3NwYWNlIjogewogICAgICAiRGlzcGxheU5hbWUiOiAiV29ya3NwYWNlIElkIiwKICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSB3b3Jrc3BhY2UgSWQiLAogICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlZmF1bHQiOiBudWxsCiAgICB9LAogICAgImhpZGRlblZhbHVlcyI6IHsKICAgICAgIkRpc3BsYXlOYW1lIjogIkhpZGRlbiB0ZWFtcyBhbmQgdXNlcnMiLAogICAgICAiRGVzY3JpcHRpb24iOiAiQSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiB0ZWFtcyBvciB1c2VycyBiZWluZyBoaWRkZW4gaW4gdGhlIGZpbHRlciBkaWFsb2ciLAogICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlZmF1bHQiOiBudWxsCiAgICB9LAogICAgInVzYWdlVHJhY2tpbmdDb25zdW1lciI6IHsKICAgICAgIlR5cGUiOiAic3RyaW5nIiwKICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgY29uc3VtZXIgbmFtZSBmb3IgdXNhZ2UgdHJhY2tpbmciLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0KICB9LAogICJvYmplY3RBcmd1bWVudHMiOiB7CiAgICAiZGVmYXVsdFNlbGVjdGlvbiI6IHsKICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJBIGxpc3Qgb2YgdmFsdWVzIHNlbGVjdGVkIGJ5IGRlZmF1bHQiLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0KICB9LAogICJsaXN0ZW5lcnMiOiB7CiAgICAiY2xvc2VMaXN0ZW5lciI6IHsKICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICJEZXNjcmlwdGlvbiI6ICJBIGNsb3NlIGxpc3RlbmVyIG9mIHR5cGUgSUZpbHRlckRpYWxvZ0Nsb3NlTGlzdGVuZXIiLAogICAgICAiRGVmYXVsdCI6IG51bGwKICAgIH0sCiAgICAiYmVmb3JlRmlsdGVyQ2hhbmdlTGlzdGVuZXIiOiB7CiAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAiRGVzY3JpcHRpb24iOiAiQSBsaXN0ZW5lciB0cmlnZ2VyZWQganVzdCBiZWZvcmUgdGhlIGZpbHRlciBpcyB1cGRhdGVkIiwKICAgICAgIkRlZmF1bHQiOiBudWxsCiAgICB9LAogICAgImxpc3RlbmVyU2VsZWN0aW9uQ2hhbmdlIjogewogICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgIkRlc2NyaXB0aW9uIjogIkEgbGlzdGVuZXIgZm9yIHNlbGVjdGlvbiBjaGFuZ2VzIiwKICAgICAgIkRlZmF1bHQiOiBudWxsCiAgICB9CiAgfSwKICAiQ29uZmlndXJhdGlvbiI6IHsKICAgICJQcm9wZXJ0aWVzIjogewogICAgICAidGl0bGUiOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIkRpYWxvZyBUaXRsZSIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSB0aXRsZSBzaG93biBpbiB0aGUgZGlhbG9nIGhlYWRlciIsCiAgICAgICAgIlR5cGUiOiAic3RyaW5nIiwKICAgICAgICAiUmVxdWlyZWQiOiB0cnVlLAogICAgICAgICJEZWZhdWx0IjogIiIKICAgICAgfSwKICAgICAgInNlbGVjdGlvbk1vZGUiOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIlNlbGVjdGlvbiBNb2RlIiwKICAgICAgICAiRGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIGRpYWxvZyBVSSB0YWJsZSBzZWxlY3Rpb24gbW9kZSIsCiAgICAgICAgIlR5cGUiOiAic3RyaW5nIiwKICAgICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiRGVmYXVsdCI6ICJTaW5nbGUiLAogICAgICAgICJDaG9pY2VzIjogWwogICAgICAgICAgIlNpbmdsZSIsCiAgICAgICAgICAiTXVsdGlUb2dnbGUiCiAgICAgICAgXQogICAgICB9LAogICAgICAic2VsZWN0aW9uUmVxdWlyZWQiOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIlNlbGVjdGlvbiBSZXF1aXJlZCIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIldoZXRoZXIgYSBzZWxlY3Rpb24gaXMgcmVxdWlyZWQiLAogICAgICAgICJUeXBlIjogImJvb2xlYW4iLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogZmFsc2UKICAgICAgfSwKICAgICAgInJlc2l6ZWFibGUiOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIlJlc2l6ZWFibGUiLAogICAgICAgICJEZXNjcmlwdGlvbiI6ICJXaGV0aGVyIHRoZSBkaWFsb2cgc2hvdWxkIGJlIHJlc2l6ZWFibGUiLAogICAgICAgICJUeXBlIjogImJvb2xlYW4iLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogdHJ1ZQogICAgICB9LAogICAgICAiYWx3YXlzU2hvd1NlbGVjdGlvbkNvbnRhaW5lciI6IHsKICAgICAgICAiRGlzcGxheU5hbWUiOiAiQWx3YXlzIFNob3cgU2VsZWN0aW9uIENvbnRhaW5lciIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIldoZXRoZXIgdGhlIHNlbGVjdGlvbiBsaXN0IHNob3VsZCBhbHdheXMgYmUgdmlzaWJsZSBpbiB0aGUgZGlhbG9nIiwKICAgICAgICAiVHlwZSI6ICJib29sZWFuIiwKICAgICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiRGVmYXVsdCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJkaXNwbGF5UGF0dGVyblZhbHVlIjogewogICAgICAgICJEaXNwbGF5TmFtZSI6ICJQYXR0ZXJuIGZvciB2YWx1ZSBkaXNwbGF5IiwKICAgICAgICAiRGVzY3JpcHRpb24iOiAiQSBwYXR0ZXJuIHRvIGZvcm1hdCBJRCBhbmQgRGVzY3JpcHRpb24gb2YgYSB2YWx1ZS4gUmVxdWlyZXMgMiBwbGFjZWhvbGRlcnM6ICQxIGFuZCAkMiIsCiAgICAgICAgIlR5cGUiOiAiU3RyaW5nIiwKICAgICAgICAiUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiRGVmYXVsdCI6ICIkMSAoJDIpIgogICAgICB9LAogICAgICAiZGlzcGxheVBhdHRlcm5SYW5nZSI6IHsKICAgICAgICAiRGlzcGxheU5hbWUiOiAiUGF0dGVybiBmb3IgcmFuZ2UgZGlzcGxheSIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIkEgcGF0dGVybiB0byBmb3JtYXQgYSByYW5nZSB3aXRoIDIgdmFsdWVzLiBSZXF1aXJlcyAyIHBsYWNlaG9sZGVyczogJDEgYW5kICQyIiwKICAgICAgICAiVHlwZSI6ICJTdHJpbmciLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogIlsgXSAkMSAtICQyIgogICAgICB9LAogICAgICAibGlzdFBhZ2VTaXplIjogewogICAgICAgICJEaXNwbGF5TmFtZSI6ICJMaXN0IFBhZ2UgU2l6ZSIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBwYWdlIHNpemUgaW4gYSBsaXN0IHZpZXciLAogICAgICAgICJUeXBlIjogImludGVnZXIiLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogMTUKICAgICAgfSwKICAgICAgImxpc3RQcmVsb2FkUGFnZUNvdW50IjogewogICAgICAgICJEaXNwbGF5TmFtZSI6ICJMaXN0IFByZWxvYWQgUGFnZSBDb3VudCIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBwYWdlcyBwcmVsb2FkZWQgaW4gYSBsaXN0IHZpZXciLAogICAgICAgICJUeXBlIjogImludGVnZXIiLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogOAogICAgICB9LAogICAgICAiZGlzcGxheUluZm8iOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIkRpc3BsYXkgSW5mbyIsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBkaXNwbGF5IGluZm8gaW4gYSBsaXN0LCBlLmcuIGlkIG9yIGRlc2NyaXB0aW9uIiwKICAgICAgICAiVHlwZSI6ICJzdHJpbmciLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogbnVsbCwKICAgICAgICAiQ2hvaWNlcyI6IFsKICAgICAgICAgICJpZCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iLAogICAgICAgICAgImlkQW5kRGVzY3JpcHRpb24iLAogICAgICAgICAgIkRlc2NyaXB0aW9uQW5kSWQiCiAgICAgICAgXQogICAgICB9LAogICAgICAib2ZmZXJEaXNwbGF5SW5mb0V4dGVuZGVkU2V0dGluZ3MiOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIkRpbWVuc2lvbiBEaXNwbGF5IEluZm8gRXh0ZW5kZWQgU2V0dGluZ3MiLAogICAgICAgICJEZXNjcmlwdGlvbiI6ICJXaGV0aGVyIGFsbCBhdmFpbGFibGUgZGlzcGxheSBpbmZvIHBvc3NpYmlsaXRpZXMgc2hvdWxkIGJlIHNob3duLCBlLmcuICdEZWNyaXB0aW9uIGFuZCBJRCciLAogICAgICAgICJUeXBlIjogImJvb2xlYW4iLAogICAgICAgICJSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJEZWZhdWx0IjogZmFsc2UKICAgICAgfSwKICAgICAgInNlYXJjaFNpemUiOiB7CiAgICAgICAgIkRpc3BsYXlOYW1lIjogIkxpc3QgU2VhcmNoIFNpemUiLAogICAgICAgICJEZXNjcmlwdGlvbiI6ICJUaGUgYW1vdW50IG9mIHZhbHVlcyBzZWFyY2hlZCBpbiBhIGxpc3QgdmlldyIsCiAgICAgICAgIlR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgIkRlZmF1bHQiOiAxMDAKICAgICAgfSwKICAgICAgInNlYXJjaFZhbHVlIjogewogICAgICAgICJUeXBlIjogInN0cmluZyIsCiAgICAgICAgIlJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgIkRlc2NyaXB0aW9uIjogIlRoZSBkZWZhdWx0IHZhbHVlIGZvciBhIHNlYXJjaCwgZXhlY3V0ZWQgYXQgZGlhbG9nIHN0YXJ0dXAiLAogICAgICAgICJEZWZhdWx0IjogbnVsbAogICAgICB9CiAgICB9CiAgfQp9Cg==";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_FilterDialogVariable_json = "";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_Inventory_json = "ewogICJOYW1lIjogIkludmVudG9yeSIsCiAgIkRpc3BsYXlOYW1lIjogIkludmVudG9yeSIsCiAgIkRlc2NyaXB0aW9uIjogIlNob3dzIGFsbCBhdmFpbGFibGUgbWVtYmVycyBhbmQgZGltZW5zaW9ucyIsCiAgIlByb2ZpbGVzIjogWwogICAgInNreWxpZ2h0cyIsCiAgICAic2FjIiwKICAgICJvbGFwdWkiCiAgXSwKICAiQXV0aG9yIjogIkFsZXhhbmRlciBCZXJnIiwKICAiQ2F0ZWdvcnkiOiAiT2xhcCIsCiAgIkNvbnRhaW5lciI6ICJXaW5kb3ciLAogICJJbml0aWFsQ29udGFpbmVyRnJhbWUiOiB7CiAgICAiTWF4aW1pemVkIjogdHJ1ZQogIH0sCiAgIkNsYXNzIjogImNvbS5zYXAuZmlyZWZseS5wcm9ncmFtcy5kZXNpZ25lci5pbnZlbnRvcnkuT3VJbnZlbnRvcnlQcm9ncmFtIiwKICAiU3ViU3lzdGVtcyI6IFsKICAgICJHdWkiCiAgXSwKICAiTW9kdWxlcyI6IFsKICAgICJmZjIxNjYuc3BhY2UuaW1wbCIsCiAgICAiZmY4MDMwLm9sYXAuZGlhbG9ncyIKICBdLAogICJJbml0aWFsUHJvY2Vzc0VudGl0aWVzIjogWwogICAgInJ0LkRhdGFBcHBsaWNhdGlvbiIKICBdCn0K";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_MeasureDimensionConfigDialog_json = "ewogICJOYW1lIjogIk1lYXN1cmVEaW1lbnNpb25Db25maWdEaWFsb2ciLAogICJEaXNwbGF5TmFtZSI6ICJNZWFzdXJlIGFuZCBEaW1lbnNpb24gQ29uZmlndXJhdGlvbiIsCiAgIkRlc2NyaXB0aW9uIjogIkRpYWxvZyBmb3IgY29uZmlndXJpbmcgbWVhc3VyZXMgYW5kIGRpbWVuc2lvbnMiLAogICJBdXRob3IiOiAiVG9tbXkgQWRla3VubGUiLAogICJJY29uIjogIiIsCiAgIlByb2ZpbGVzIjogWwogICAgInNreWxpZ2h0cyIKICBdLAogICJBcHBTdG9yZSI6IGZhbHNlLAogICJJbml0aWFsbHlPbkxhdW5jaHBhZCI6IGZhbHNlLAogICJDYXRlZ29yeSI6ICJPbGFwIiwKICAiQ29udGFpbmVyIjogIkRpYWxvZyIsCiAgIkNsYXNzIjogImNvbS5zYXAuZmlyZWZseS5kaWFsb2dzLm1lYXN1cmVkaW1lbnNpb25jb25maWdkaWFsb2cuT3VNZWFzdXJlRGltZW5zaW9uQ29uZmlnRGlhbG9nIiwKICAiU3ViU3lzdGVtcyI6IFsKICAgICJHdWkiCiAgXSwKICAiTW9kdWxlcyI6IFsKICAgICJmZjgwMzAub2xhcC5kaWFsb2dzIgogIF0KfQ==";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_QueryInformationDialog_json = "ewogICJOYW1lIjogIlF1ZXJ5SW5mb3JtYXRpb25EaWFsb2ciLAogICJEaXNwbGF5TmFtZSI6ICJRdWVyeUluZm9ybWF0aW9uIiwKICAiRGVzY3JpcHRpb24iOiAiRGlhbG9nIGZvciBzaG93aW5nIHF1ZXJ5IG1vZGVsIGluZm9ybWF0aW9uIiwKICAiQXV0aG9yIjogIkNvbm9yIFdoaXRlIiwKICAiSWNvbiI6ICIiLAogICJQcm9maWxlcyI6IFsKICAgICJza3lsaWdodHMiLAogICAgInNhYyIsCiAgICAib2xhcHVpIgogIF0sCiAgIkFwcFN0b3JlIjogZmFsc2UsCiAgIkluaXRpYWxseU9uTGF1bmNocGFkIjogZmFsc2UsCiAgIkNhdGVnb3J5IjogIk9sYXAiLAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3MucXVlcnlpbmZvcm1hdGlvbmRpYWxvZy5PdVF1ZXJ5SW5mb3JtYXRpb25EaWFsb2ciLAogICJTdWJTeXN0ZW1zIjogWwogICAgIkd1aSIsCiAgICAiVXNlclByb2ZpbGUiCiAgXSwKICAiTW9kdWxlcyI6IFsKICAgICJmZjgwMzAub2xhcC5kaWFsb2dzIgogIF0KfQ==";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_SelectHierarchyDialog_json = "ewogICJOYW1lIjogIlNlbGVjdEhpZXJhcmNoeURpYWxvZyIsCiAgIkRpc3BsYXlOYW1lIjogIlNlbGVjdCBIaWVyYXJjaHkgRGlhbG9nIiwKICAiRGVzY3JpcHRpb24iOiAiRGlhbG9nIGZvciBzZWxlY3RpbmcgaGllcmFyY2hpZXMiLAogICJBdXRob3IiOiAiTWljaGFlbCBaYWtoYXJlbmtvdiIsCiAgIlByb2ZpbGVzIjogWwogICAgInNreWxpZ2h0cyIsCiAgICAic2FjIiwKICAgICJvbGFwdWkiCiAgXSwKICAiQ2F0ZWdvcnkiOiAiT2xhcCIsCiAgIkNvbnRhaW5lciI6ICJEaWFsb2ciLAogICJDbGFzcyI6ICJjb20uc2FwLmZpcmVmbHkuZGlhbG9ncy5oaWVyYXJjaHlkaWFsb2cuT3VTZWxlY3RIaWVyYXJjaHlEaWFsb2ciLAogICJTdWJTeXN0ZW1zIjogWwogICAgIkd1aSIKICBdLAogICJNb2R1bGVzIjogWwogICAgImZmODAzMC5vbGFwLmRpYWxvZ3MiCiAgXQp9Cg==";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_ShareDialog_json = "ewogICJOYW1lIjogIlNoYXJlRGlhbG9nIiwKICAiRGlzcGxheU5hbWUiOiAiU2hhcmUiLAogICJEZXNjcmlwdGlvbiI6ICJEaWFsb2cgZm9yIHNoYXJpbmcgaW5zaWdodCIsCiAgIkF1dGhvciI6ICJNaWNoYWVsIERvbm9ob2UiLAogICJJY29uIjogIiIsCiAgIlByb2ZpbGVzIjogWwogICAgInNreWxpZ2h0cyIKICBdLAogICJBcHBTdG9yZSI6IGZhbHNlLAogICJJbml0aWFsbHlPbkxhdW5jaHBhZCI6IGZhbHNlLAogICJDYXRlZ29yeSI6ICJTeXN0ZW0iLAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3Muc2hhcmVkaWFsb2cuaW1wbC5PdVNoYXJlRGlhbG9nIiwKICAiU3ViU3lzdGVtcyI6IFsKICAgICJHdWkiCiAgXSwKICAiTW9kdWxlcyI6IFsKICAgICJmZjgwMzAub2xhcC5kaWFsb2dzIgogIF0KfQ==";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_TopNDialog_json = "ewogICJOYW1lIjogIlRvcE5EaWFsb2ciLAogICJEaXNwbGF5TmFtZSI6ICJUb3AgTiBEaWFsb2ciLAogICJEZXNjcmlwdGlvbiI6ICJEaWFsb2cgZm9yIFRvcCBOIiwKICAiQXV0aG9yIjogIk1haXJ0aW4gS2VhbmUiLAogICJQcm9maWxlcyI6IFsKICAgICJza3lsaWdodHMiLAogICAgInNhYyIsCiAgICAib2xhcHVpIgogIF0sCiAgIkNhdGVnb3J5IjogIk9sYXAiLAogICJDb250YWluZXIiOiAiRGlhbG9nIiwKICAiQ2xhc3MiOiAiY29tLnNhcC5maXJlZmx5LmRpYWxvZ3MudG9wbmRpYWxvZy5PdVRvcE5EaWFsb2ciLAogICJTdWJTeXN0ZW1zIjogWwogICAgIkd1aSIKICBdLAogICJNb2R1bGVzIjogWwogICAgImZmODAzMC5vbGFwLmRpYWxvZ3MiCiAgXQp9";
oFF.FF8030_OLAP_DIALOGS_RESOURCES.manifests_programs_VariableDialog_json = "ewogICJOYW1lIjogIlZhcmlhYmxlRGlhbG9nIiwKICAiRGlzcGxheU5hbWUiOiAiVmFyaWFibGUgRGlhbG9nIiwKICAiRGVzY3JpcHRpb24iOiAiRGlhbG9nIHRvIHNldCB0aGUgdmFyaWFibGUgdmFsdWVzIiwKICAiQXV0aG9yIjogIkFsZXhhbmRlciBCZXJnIiwKICAiUHJvZmlsZXMiOiBbCgkic2t5bGlnaHRzIiwKCSJzYWMiLAoJIm9sYXB1aSIKICBdLAogICJJY29uIjogIiR7ZmZfbWltZXN9L2ltYWdlcy9wcm9ncmFtaWNvbnMvdmFyaWFibGVkaWFsb2cucG5nIiwKICAiQXBwU3RvcmUiOiBmYWxzZSwKICAiSW5pdGlhbGx5T25MYXVuY2hwYWQiOiBmYWxzZSwKICAiQ2F0ZWdvcnkiOiAiT2xhcCIsCiAgIkluaXRpYWxDb250YWluZXJGcmFtZSI6IHsKCSJXaWR0aCI6IG51bGwsCgkiSGVpZ2h0IjogbnVsbCwKCSJYIjogbnVsbCwKCSJZIjogbnVsbCwKCSJNYXhpbWl6ZWQiOiBmYWxzZQogIH0sCiAgIkNvbnRhaW5lciI6ICJEaWFsb2ciLAogICJDbGFzcyI6ICJjb20uc2FwLmZpcmVmbHkucHJvZ3JhbXMudmFyaWFibGVkaWFsb2cuVmRQcm9ncmFtIiwKICAiU3ViU3lzdGVtcyI6IFsKCSJHdWkiLAoJIkRhdGFQcm92aWRlclBvb2wiCiAgXSwKICAiTW9kdWxlcyI6IFsKCSJmZjgwMzAub2xhcC5kaWFsb2dzIgogIF0sCiAgIkFyZ3VtZW50cyI6IHsKCSJ0aXRsZSI6IHsKCSAgIlR5cGUiOiAiU3RyaW5nIiwKCSAgIlJlcXVpcmVkIjogdHJ1ZSwKCSAgIkRlc2NyaXB0aW9uIjogIlRoZSBkaWFsb2cgdGl0bGUiLAoJICAiRGVmYXVsdCI6IG51bGwKCX0sCgkiaW1wbGljaXRTdWJtaXQiOiB7CgkgICJUeXBlIjogIkJvb2xlYW4iLAoJICAiUmVxdWlyZWQiOiBmYWxzZSwKCSAgIkRlc2NyaXB0aW9uIjogIldoZXRoZXIgdGhlIGRpYWxvZyBzaG91bGQgZG8gdGhlIHZhcmlhYmxlIHN1Ym1pdCIsCgkgICJEZWZhdWx0IjogZmFsc2UKCX0sCgkiZGF0YVByb3ZpZGVyTmFtZSI6IHsKCSAgIlR5cGUiOiAiU3RyaW5nIiwKCSAgIlJlcXVpcmVkIjogZmFsc2UsCgkgICJEZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgZGF0YSBwcm92aWRlciB0byB3b3JrIHdpdGgiLAoJICAiRGVmYXVsdCI6IG51bGwKCX0KICB9LAogICJDb25maWd1cmF0aW9uIjogewoJIlByb3BlcnRpZXMiOiB7CgkgICJzZXR0aW5nc1BvcG92ZXIiOiB7CgkJIkRpc3BsYXlOYW1lIjogIlNldHRpbmdzIHBvcG92ZXIiLAoJCSJEZXNjcmlwdGlvbiI6ICJTaG91bGQgdGhlIGRpYWxvZyBzaG93IGl0cyBzZXR0aW5ncyBpbiBhIHBvcG92ZXIgbWVudSIsCgkJIlR5cGUiOiAiQm9vbGVhbiIsCgkJIlJlcXVpcmVkIjogZmFsc2UsCgkJIkRlZmF1bHQiOiB0cnVlCgkgIH0sCgkgICJncmlkTGF5b3V0IjogewoJCSJEaXNwbGF5TmFtZSI6ICJHcmlkIGxheW91dCIsCgkJIkRlc2NyaXB0aW9uIjogIlNob3VsZCB0aGUgbmV3IGRpYWxvZyB1aSBiZSB1c2VkIiwKCQkiVHlwZSI6ICJCb29sZWFuIiwKCQkiUmVxdWlyZWQiOiBmYWxzZSwKCQkiRGVmYXVsdCI6IHRydWUKCSAgfSwKCSAgIm11bHRpSW5wdXRDb21wb25lbnQiOiB7CgkJIkRpc3BsYXlOYW1lIjogIk11bHRpIGlucHV0IGNvbXBvbmVudCIsCgkJIkRlc2NyaXB0aW9uIjogIlNob3VsZCBhIHNwZWNpYWwgdWkgY29udHJvbCBiZSB1c2VkIHRvIHNob3cgbXVsdGlwbGUgdmFsdWVzIiwKCQkiVHlwZSI6ICJCb29sZWFuIiwKCQkiUmVxdWlyZWQiOiBmYWxzZSwKCQkiRGVmYXVsdCI6IHRydWUKCSAgfQoJfQogIH0KfQo=";

oFF.XResources.registerResourceClass("ff8030.olap.dialogs", oFF.FF8030_OLAP_DIALOGS_RESOURCES);

oFF.OuCalculationActivityTracking = function() {};
oFF.OuCalculationActivityTracking.prototype = new oFF.XObject();
oFF.OuCalculationActivityTracking.prototype._ff_c = "OuCalculationActivityTracking";

oFF.OuCalculationActivityTracking.create = function(process, preferences)
{
	let instance = new oFF.OuCalculationActivityTracking();
	instance.m_usageTracking = oFF.CalculationDialogUsageTracking.create(process);
	instance.m_state = oFF.OuCalcActivityTrackingState.create();
	instance.m_preferences = preferences;
	return instance;
};
oFF.OuCalculationActivityTracking.prototype.m_preferences = null;
oFF.OuCalculationActivityTracking.prototype.m_state = null;
oFF.OuCalculationActivityTracking.prototype.m_usageTracking = null;
oFF.OuCalculationActivityTracking.prototype.recordAddAiGenerateFormulaToEditor = function(formulaText, originalFunctionsUsedInFormula)
{
	this.m_state.setLastFormulaAddedToEditor(formulaText);
	this.m_usageTracking.recordCalculationDialogGenAiEvent(oFF.CalculationDialogUsageTracking.GEN_AI_ADD_FORMULA_TO_EDITOR_ACTION, originalFunctionsUsedInFormula, oFF.XOptional.empty());
};
oFF.OuCalculationActivityTracking.prototype.recordAiAssistantToggle = function(isOpen, source)
{
	this.m_usageTracking.recordCalculationAiAssistantToggle(isOpen, source);
};
oFF.OuCalculationActivityTracking.prototype.recordAiExplainFormula = function(originalFunctionsUsedInFormula, error)
{
	this.m_usageTracking.recordCalculationDialogGenAiEvent(oFF.CalculationDialogUsageTracking.GEN_AI_EXPLAIN_FORMULA_ACTION, originalFunctionsUsedInFormula, error);
};
oFF.OuCalculationActivityTracking.prototype.recordAiGenerateFormula = function(originalFunctionsUsedInFormula, error)
{
	this.m_usageTracking.recordCalculationDialogGenAiEvent(oFF.CalculationDialogUsageTracking.GEN_AI_GENERATE_FORMULA_ACTION, originalFunctionsUsedInFormula, error);
};
oFF.OuCalculationActivityTracking.prototype.recordCalculationCreation = function(originalFunctionsUsedInFormula)
{
	this.m_state.setOriginalFunctionsUsedInFormula(originalFunctionsUsedInFormula);
};
oFF.OuCalculationActivityTracking.prototype.recordDialogClose = function(eventType, dataSourceType, structureType, formulaText)
{
	let lastGeneratedFormulaAdded = this.m_state.getLastFormulaAddedToEditor();
	let genAiUsage = null;
	if (this.m_preferences.isGenAiEnabled())
	{
		if (oFF.notNull(lastGeneratedFormulaAdded))
		{
			genAiUsage = oFF.XString.isEqual(lastGeneratedFormulaAdded, formulaText) ? oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_YES_VALUE : oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_MODIFIED_VALUE;
		}
		else
		{
			genAiUsage = oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_NO_VALUE;
		}
	}
	this.m_usageTracking.recordCalculationDialogEvent(eventType, dataSourceType, structureType, this.m_state.getOriginalFunctionsUsedInFormula(), genAiUsage);
};
oFF.OuCalculationActivityTracking.prototype.releaseObject = function()
{
	this.m_state = oFF.XObjectExt.release(this.m_state);
	this.m_usageTracking = oFF.XObjectExt.release(this.m_usageTracking);
	this.m_preferences = null;
};

oFF.OuCalcCalculations = function() {};
oFF.OuCalcCalculations.prototype = new oFF.XObject();
oFF.OuCalcCalculations.prototype._ff_c = "OuCalcCalculations";

oFF.OuCalcCalculations.ACTIVITY_TRACKING = "activity.tracking";
oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME = "com.sap.ff.calculations.configuration";
oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY = "datasource.provider";
oFF.OuCalcCalculations.FEMODE = "femode";
oFF.OuCalcCalculations.FE_CONFIGURATION = "formula.configuration";
oFF.OuCalcCalculations.FE_MODE_NAME = "formula.editor.mode.name";
oFF.OuCalcCalculations.FE_NOTIFICATION_CONTROL_FOCUS = "com.sap.ff.calculations.notification.control.focus";
oFF.OuCalcCalculations.FE_NOTIFICATION_SET_INITIAL_DATA = "com.sap.ff.calculations.notification.set.initialData";
oFF.OuCalcCalculations.FE_NOTIFICATION_SET_VALIDATION_MESSAGES = "com.sap.ff.calculations.notification.set.validationMessage";
oFF.OuCalcCalculations.FORMULA_INITIAL_DATA = "formula.initial.data";
oFF.OuCalcCalculations.FORMULA_ITEMS_PROVIDER_NOTIFICATION_KEY = "formula.items.provider";
oFF.OuCalcCalculations.FORMULA_PREFERENCES = "formula.preferences";
oFF.OuCalcCalculations.MEMBER_SELECTOR_HANDLER_KEY = "member.selector.handler";
oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY = "data";
oFF.OuCalcCalculations.UI_CONFIGURATION_PROVIDER_NOTIFICATION_KEY = "ui.configuration.provider";
oFF.OuCalcCalculations.VARIABLE_MANAGER = "variable.manager";
oFF.OuCalcCalculations.create = function(datasource, formulas, enableValidation, enableModelPrefix, enableDetails, enableGenAi, uiConfiguration, initialData, memberSelectorHandler, process)
{
	let instance = new oFF.OuCalcCalculations();
	oFF.XObjectExt.assertNotNull(datasource);
	return oFF.FeFeatureToggle.load(process).onThenExt((result) => {
		let preferences = oFF.FePreferences.createWithUserProfile(process.getUserProfile(), enableValidation, enableModelPrefix, enableDetails, enableGenAi, false);
		let formulaItems = oFF.FeFormulaItemsFactory.create(datasource.getDatasourceType(), datasource.getStructureType()).getRequestedSupportedFormulaItems(formulas);
		let formulaItemsBuilder = oFF.FeFormulaItemsProviderBuilder.create();
		formulaItemsBuilder.addAll(formulaItems);
		instance.setupInstance(datasource, formulaItemsBuilder.build(), uiConfiguration, initialData, preferences, memberSelectorHandler, process, null, null);
		return instance;
	});
};
oFF.OuCalcCalculations.createExt = function(datasource, formulaItems, uiConfiguration, initialData, preferences, memberSelectorHandler, process, activityTracking, variableManager)
{
	let instance = new oFF.OuCalcCalculations();
	oFF.XObjectExt.assertNotNull(datasource);
	return oFF.FeFeatureToggle.load(process).onThenExt((result) => {
		instance.setupInstance(datasource, formulaItems, uiConfiguration, initialData, preferences, memberSelectorHandler, process, activityTracking, variableManager);
		return instance;
	});
};
oFF.OuCalcCalculations.prototype.m_activityTracking = null;
oFF.OuCalcCalculations.prototype.m_codeEditorPanelHorizon = null;
oFF.OuCalcCalculations.prototype.m_datasource = null;
oFF.OuCalcCalculations.prototype.m_detailsPanelHorizon = null;
oFF.OuCalcCalculations.prototype.m_eventManager = null;
oFF.OuCalcCalculations.prototype.m_feConfiguration = null;
oFF.OuCalcCalculations.prototype.m_feModeName = null;
oFF.OuCalcCalculations.prototype.m_formulaChangeEventConsumers = null;
oFF.OuCalcCalculations.prototype.m_formulaItems = null;
oFF.OuCalcCalculations.prototype.m_initialData = null;
oFF.OuCalcCalculations.prototype.m_memberSelectorHandler = null;
oFF.OuCalcCalculations.prototype.m_preferences = null;
oFF.OuCalcCalculations.prototype.m_process = null;
oFF.OuCalcCalculations.prototype.m_singlePanelHorizon = null;
oFF.OuCalcCalculations.prototype.m_uiConfiguration = null;
oFF.OuCalcCalculations.prototype.m_uiEventConsumers = null;
oFF.OuCalcCalculations.prototype.m_validationStateChangeEventConsumers = null;
oFF.OuCalcCalculations.prototype.m_variableManager = null;
oFF.OuCalcCalculations.prototype.calculationIsValid = function()
{
	if (!this.m_preferences.isValidationEnabled())
	{
		return oFF.XBooleanValue.create(true);
	}
	let dataSpace = this.getSharedDataSpace();
	let isDetailsValid = !this.m_preferences.isDetailsEnabled() || dataSpace.getBooleanByKey(oFF.OuCalcDetailsAreaPlugin.VALIDATION_STATE);
	let formula = dataSpace.getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
	let messages = dataSpace.getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA_ERRORS);
	let isValid = isDetailsValid && oFF.notNull(formula) && !formula.isEmpty() && (oFF.isNull(messages) || !messages.hasErrors());
	return oFF.XBooleanValue.create(isValid);
};
oFF.OuCalcCalculations.prototype.checkFormulaExists = function(formula)
{
	if (!formula.isPresent())
	{
		throw oFF.XException.createRuntimeException("No value returned from code editor");
	}
	return formula.get();
};
oFF.OuCalcCalculations.prototype.cloneFormula = function(formula)
{
	let details = oFF.FeFormulaDetails.create(this.m_initialData.getName(), this.m_initialData.getDescription());
	return formula.cloneWithDetails(details);
};
oFF.OuCalcCalculations.prototype.createCalculation = function()
{
	return this.retrieveFormula().onThenExt(this.checkFormulaExists.bind(this)).onThenExt(this.cloneFormula.bind(this)).onThenExt(this.parseFormula.bind(this)).onThenPromise(this.updateHierarchiesAndReparse.bind(this)).onThenExt(this.validate.bind(this)).onThenPromise(this.updateDimensionFilters.bind(this)).onThenExt((parser) => {
		this.m_activityTracking.recordCalculationCreation(parser.getOriginalFormulaItems());
		return oFF.FeCalcCreateCalculationResponse.create(parser.getParseFormulaItemExtended().get());
	});
};
oFF.OuCalcCalculations.prototype.focusComponent = function(component)
{
	let notifyData = oFF.XNotificationData.create();
	notifyData.putXObject(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY, component);
	this.getSharedNotificationCenter().postNotificationWithName(oFF.OuCalcCalculations.FE_NOTIFICATION_CONTROL_FOCUS, notifyData);
};
oFF.OuCalcCalculations.prototype.getHorizon = function(horizon)
{
	return oFF.notNull(horizon) ? horizon : this.m_singlePanelHorizon;
};
oFF.OuCalcCalculations.prototype.getId = function()
{
	let horizon = this.getHorizon(this.m_detailsPanelHorizon);
	if (oFF.isNull(horizon))
	{
		let id = oFF.XOptional.of(this.m_initialData.getName());
		return oFF.XPromise.resolve(id);
	}
	return horizon.executeActionById(oFF.OuCalcDetailsAreaValueRetriever.getCalculationIDCommand(), null).onThenExt((name) => {
		return oFF.XOptional.ofNullable(name.getString());
	});
};
oFF.OuCalcCalculations.prototype.getName = function()
{
	let horizon = this.getHorizon(this.m_detailsPanelHorizon);
	if (oFF.isNull(horizon))
	{
		return oFF.XPromise.resolve(oFF.XOptional.empty());
	}
	return horizon.executeActionById(oFF.OuCalcDetailsAreaValueRetriever.getCalculationNameCommand(), null).onThenExt((name) => {
		let value = name;
		if (oFF.XStringUtils.isNullOrEmpty(value.getString()))
		{
			return oFF.XOptional.empty();
		}
		return oFF.XOptional.of(value.getString());
	});
};
oFF.OuCalcCalculations.prototype.getPluginPromiseWrapper = function(panelRenderConfig, pluginName, configuration, pluginUpdater)
{
	let pluginRunner = oFF.OuCalcPluginRunner.create(this.m_process);
	return pluginRunner.runPlugin(panelRenderConfig, oFF.OuCalcHorizonConfigGenerator.generateHorizonConfig(pluginName)).onThenExt((commandExecutor) => {
		let plugin = commandExecutor;
		plugin.setStartupCompleteProcedure(() => {
			plugin.postNotificationWithName(oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME, configuration);
		});
		if (oFF.notNull(pluginUpdater))
		{
			pluginUpdater(commandExecutor);
		}
		return commandExecutor;
	});
};
oFF.OuCalcCalculations.prototype.getSharedDataSpace = function()
{
	return oFF.OuCalcSharedDataSpaceManager.create(this.m_process).get();
};
oFF.OuCalcCalculations.prototype.getSharedNotificationCenter = function()
{
	return this.m_process.getSharedNotificationCenter();
};
oFF.OuCalcCalculations.prototype.initUiEventConsumer = function()
{
	let sharedNotificationCenter = this.getSharedNotificationCenter();
	oFF.XObjectExt.assertNotNullExt(sharedNotificationCenter, "SharedNotificationCenter null!");
	this.m_eventManager = oFF.OuCalcEventManager.create(sharedNotificationCenter);
	this.getSharedDataSpace().addChangeConsumer((key) => {
		if (oFF.XString.isEqual(key, oFF.OuCalcCodeEditorPlugin.FE_FORMULA))
		{
			let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
			this.m_formulaChangeEventConsumers.accept(formula);
		}
		if (oFF.XString.isEqual(key, oFF.OuCalcDetailsAreaPlugin.VALIDATION_STATE) || oFF.XString.isEqual(key, oFF.OuCalcCodeEditorPlugin.FE_FORMULA) || oFF.XString.isEqual(key, oFF.OuCalcCodeEditorPlugin.FE_FORMULA_ERRORS))
		{
			this.m_validationStateChangeEventConsumers.accept(this.calculationIsValid());
		}
	});
	this.m_eventManager.getListener().onListItemPanelCollapsed((collapsed) => {
		let eventData = oFF.XNameGenericPair.create(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED, collapsed);
		this.m_uiEventConsumers.accept(eventData);
	});
	this.m_eventManager.getListener().onAssistancePanelCollapsed((collapsed) => {
		let eventData = oFF.XNameGenericPair.create(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED, collapsed);
		this.m_uiEventConsumers.accept(eventData);
	});
};
oFF.OuCalcCalculations.prototype.parseFormula = function(formula)
{
	let parser = oFF.FeParserInternal.create(this.m_datasource, this.m_formulaItems.getFunctions(), this.m_formulaItems.getOperators(), this.m_feConfiguration, this.m_preferences, this.m_variableManager);
	parser.parse(formula);
	return parser;
};
oFF.OuCalcCalculations.prototype.registerCustomFeMode = function(modeName, modeJson)
{
	oFF.FeCustomHighlighter.create().register(modeName, modeJson);
};
oFF.OuCalcCalculations.prototype.registerOnFormulaChange = function(consumer)
{
	return this.m_formulaChangeEventConsumers.addConsumer(consumer);
};
oFF.OuCalcCalculations.prototype.registerOnUiEvent = function(consumer)
{
	return this.m_uiEventConsumers.addConsumer(consumer);
};
oFF.OuCalcCalculations.prototype.registerOnValidationStateChange = function(consumer)
{
	this.m_validationStateChangeEventConsumers.addConsumer(consumer);
};
oFF.OuCalcCalculations.prototype.retrieveFormula = function()
{
	let horizon = this.getHorizon(this.m_codeEditorPanelHorizon);
	if (oFF.isNull(horizon))
	{
		return oFF.XPromise.resolve(oFF.XOptional.empty());
	}
	return horizon.executeActionById(oFF.OuCalcCodeEditorValueRetriever.getContentsCommand(), null).onThenExt((retrievedFormula) => {
		let formula = retrievedFormula;
		if (formula.isEmpty())
		{
			return oFF.XOptional.empty();
		}
		return oFF.XOptional.of(formula);
	});
};
oFF.OuCalcCalculations.prototype.retrieveFormulaString = function()
{
	return this.retrieveFormula().then((formula) => {
		if (formula.isPresent())
		{
			return oFF.XOptional.ofNullable(formula.get().getText());
		}
		return oFF.XOptional.empty();
	}, null);
};
oFF.OuCalcCalculations.prototype.setInitialData = function(initialData)
{
	let notifyData = oFF.XNotificationData.create();
	notifyData.putXObject(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY, initialData);
	this.getSharedNotificationCenter().postNotificationWithName(oFF.OuCalcCalculations.FE_NOTIFICATION_SET_INITIAL_DATA, notifyData);
};
oFF.OuCalcCalculations.prototype.setInitialDataByName = function(name)
{
	let initialDataBuilder = oFF.OuCalcInitialDataBuilder.create(this.m_datasource, oFF.FeFormulaPresentation.create(this.m_preferences.isCommaDecimalSeparator()));
	initialDataBuilder.setCalculationName(name);
	this.setInitialData(initialDataBuilder.build());
};
oFF.OuCalcCalculations.prototype.setValidationMessages = function(messageCollection)
{
	this.m_eventManager.getEmitter().fireValidationMessageSet(messageCollection);
};
oFF.OuCalcCalculations.prototype.setupInstance = function(datasource, formulaItems, uiConfiguration, initialData, preferences, memberSelectorHandler, process, activityTracking, variableManager)
{
	this.m_datasource = initialData.isEdit() ? oFF.FeDatasourceMetadataProviderInternalImpl.createExt(datasource, initialData.getName()) : oFF.FeDatasourceMetadataProviderInternalImpl.create(datasource);
	this.m_formulaItems = oFF.XObjectExt.assertNotNull(formulaItems);
	this.m_uiConfiguration = oFF.XObjectExt.assertNotNull(uiConfiguration);
	this.m_initialData = oFF.XObjectExt.assertNotNull(initialData);
	this.m_preferences = oFF.XObjectExt.assertNotNull(preferences);
	this.m_memberSelectorHandler = oFF.XObjectExt.assertNotNull(memberSelectorHandler);
	this.m_feConfiguration = oFF.FeConfigurationFactory.create(this.m_datasource);
	this.m_uiEventConsumers = oFF.XConsumerCollection.create();
	this.m_formulaChangeEventConsumers = oFF.XConsumerCollection.create();
	this.m_validationStateChangeEventConsumers = oFF.XConsumerCollection.create();
	this.m_process = oFF.XObjectExt.assertNotNull(process).newChildProcess(oFF.ProcessType.SERVICE);
	this.m_process.createSharedNotificationCenterIfNeeded();
	this.m_activityTracking = activityTracking;
	if (oFF.isNull(this.m_activityTracking))
	{
		this.m_activityTracking = oFF.OuCalculationActivityTracking.create(this.m_process, this.m_preferences);
	}
	this.m_variableManager = variableManager;
	let systemType = this.m_datasource.getDatasourceType().getName();
	this.m_feModeName = oFF.XStringUtils.concatenate2(oFF.OuCalcCalculations.FEMODE, systemType);
	this.registerCustomFeMode(this.m_feModeName, oFF.OuCalcCustomModeRulesFactory.create(this.m_preferences.isModelPrefixEnabled()).buildRules(this.m_formulaItems, this.m_feConfiguration));
};
oFF.OuCalcCalculations.prototype.shouldUpdateDimensionFilters = function(parser)
{
	return oFF.FeFeatureToggle.isActive(oFF.FeFeatureToggle.RESTRICT) && this.m_feConfiguration.shouldLookupKeysForRestrict() && this.m_datasource.getDimensionMemberLookupProviderInternal().isPresent() && oFF.XStream.of(parser.getOriginalFormulaItems()).anyMatch((formulaItem) => {
		return formulaItem.getMetadata().hasName(oFF.FeRestrict.NAME);
	});
};
oFF.OuCalcCalculations.prototype.shutdown = function()
{
	oFF.OuCalcSharedDataSpaceManager.create(this.m_process).destroy();
	this.m_uiEventConsumers.clear();
	this.m_uiEventConsumers = oFF.XObjectExt.release(this.m_uiEventConsumers);
	this.m_formulaChangeEventConsumers.clear();
	this.m_formulaChangeEventConsumers = oFF.XObjectExt.release(this.m_formulaChangeEventConsumers);
	this.m_validationStateChangeEventConsumers.clear();
	this.m_validationStateChangeEventConsumers = oFF.XObjectExt.release(this.m_validationStateChangeEventConsumers);
	this.m_formulaItems = null;
	this.m_uiConfiguration = null;
	this.m_initialData = null;
	this.m_preferences = null;
	this.m_memberSelectorHandler = null;
	this.m_process = null;
	this.m_activityTracking = null;
	this.m_codeEditorPanelHorizon = oFF.XObjectExt.release(this.m_codeEditorPanelHorizon);
	this.m_detailsPanelHorizon = oFF.XObjectExt.release(this.m_detailsPanelHorizon);
	this.m_singlePanelHorizon = oFF.XObjectExt.release(this.m_singlePanelHorizon);
	this.m_datasource = oFF.XObjectExt.release(this.m_datasource);
};
oFF.OuCalcCalculations.prototype.startup = function()
{
	oFF.OuCalcSharedDataSpaceManager.create(this.m_process).initialize();
	let configuration = oFF.XNotificationData.create();
	configuration.putXObject(oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY, this.m_datasource);
	configuration.putXObject(oFF.OuCalcCalculations.FORMULA_ITEMS_PROVIDER_NOTIFICATION_KEY, this.m_formulaItems);
	configuration.putXObject(oFF.OuCalcCalculations.UI_CONFIGURATION_PROVIDER_NOTIFICATION_KEY, this.m_uiConfiguration);
	configuration.putXObject(oFF.OuCalcCalculations.FORMULA_INITIAL_DATA, this.m_initialData);
	configuration.putXObject(oFF.OuCalcCalculations.FORMULA_PREFERENCES, this.m_preferences);
	configuration.putXObject(oFF.OuCalcCalculations.MEMBER_SELECTOR_HANDLER_KEY, this.m_memberSelectorHandler);
	configuration.putXObject(oFF.OuCalcCalculations.FE_CONFIGURATION, this.m_feConfiguration);
	configuration.putString(oFF.OuCalcCalculations.FE_MODE_NAME, this.m_feModeName);
	configuration.putXObject(oFF.OuCalcCalculations.ACTIVITY_TRACKING, this.m_activityTracking);
	configuration.putXObject(oFF.OuCalcCalculations.VARIABLE_MANAGER, this.m_variableManager);
	oFF.OuCalcUiConfiguration.assertConfig(this.m_uiConfiguration);
	let singleRenderConfiguration = this.m_uiConfiguration.getSinglePluginConfig();
	let codeEditorRenderConfiguration = this.m_uiConfiguration.getCodeEditorPanelRenderConfig();
	let detailsRenderConfiguration = this.m_preferences.isDetailsEnabled() ? this.m_uiConfiguration.getDetailsPanelRenderConfig() : oFF.OuCalcPanelRenderConfig.createEmpty();
	let assistanceRenderConfiguration = this.m_uiConfiguration.getAssistancePanelRenderConfig();
	let formulaListRenderConfiguration = this.m_uiConfiguration.getFormulaItemsListPanelRenderConfig();
	let promises = oFF.XPromiseList.create();
	if (singleRenderConfiguration.isSet())
	{
		promises.add(this.getPluginPromiseWrapper(singleRenderConfiguration.getRenderConfig(), oFF.OuCalculationPlugin.PLUGIN_NAME, configuration, (singlePanelProgram) => {
			this.m_singlePanelHorizon = singlePanelProgram;
		}));
	}
	else
	{
		if (codeEditorRenderConfiguration.isSet())
		{
			promises.add(this.getPluginPromiseWrapper(codeEditorRenderConfiguration, oFF.OuCalcCodeEditorPlugin.PLUGIN_NAME, configuration, (codeEditorPanelProgram) => {
				this.m_codeEditorPanelHorizon = codeEditorPanelProgram;
			}));
		}
		if (detailsRenderConfiguration.isSet())
		{
			promises.add(this.getPluginPromiseWrapper(detailsRenderConfiguration, oFF.OuCalcDetailsAreaPlugin.PLUGIN_NAME, configuration, (detailsPanelProgram) => {
				this.m_detailsPanelHorizon = detailsPanelProgram;
			}));
		}
		if (assistanceRenderConfiguration.isSet())
		{
			promises.add(this.getPluginPromiseWrapper(assistanceRenderConfiguration, oFF.OuCalcAssistancePluginV2.PLUGIN_NAME, configuration, null));
		}
		if (formulaListRenderConfiguration.isSet())
		{
			promises.add(this.getPluginPromiseWrapper(formulaListRenderConfiguration, oFF.OuCalcFormulaElementListPlugin.PLUGIN_NAME, configuration, null));
		}
	}
	let promisesResult = oFF.XPromise.all(promises);
	promisesResult.onThen((plugins) => {
		this.initUiEventConsumer();
	});
	return promisesResult;
};
oFF.OuCalcCalculations.prototype.updateDimensionFilters = function(parser)
{
	let formulaItemCalculation = parser.getParseFormulaItemExtended().get();
	let dimensionFilterUpdatePromise = null;
	if (this.shouldUpdateDimensionFilters(parser))
	{
		let updater = oFF.FeDimensionFilterUpdater.create(this.m_datasource.getDimensionMemberLookupProviderInternal().get(), this.m_feConfiguration);
		dimensionFilterUpdatePromise = updater.updateDimensionFilters(formulaItemCalculation);
	}
	else
	{
		dimensionFilterUpdatePromise = oFF.XPromise.resolve(formulaItemCalculation);
	}
	return dimensionFilterUpdatePromise.onThenExt((updatedCalc) => {
		parser.updateParsedFormulaItemExtended(updatedCalc);
		return parser;
	});
};
oFF.OuCalcCalculations.prototype.updateHierarchiesAndReparse = function(parser)
{
	if (this.m_preferences.isValidationEnabled() && this.m_feConfiguration.isHierarchyLoadEnabled())
	{
		return parser.updateHierarchiesAndReparse();
	}
	return oFF.XPromise.resolve(parser);
};
oFF.OuCalcCalculations.prototype.validate = function(parser)
{
	if (this.m_preferences.isValidationEnabled() && parser.getMessages().hasErrors())
	{
		throw oFF.XException.createRuntimeException(parser.getMessages().toString());
	}
	return parser;
};

oFF.OuCalcEventManager = function() {};
oFF.OuCalcEventManager.prototype = new oFF.XObject();
oFF.OuCalcEventManager.prototype._ff_c = "OuCalcEventManager";

oFF.OuCalcEventManager.create = function(notificationCenter)
{
	let instance = new oFF.OuCalcEventManager();
	instance.m_eventEmitter = oFF.OuCalcEventEmitterManager.create(notificationCenter);
	instance.m_eventListener = oFF.OuCalcEventListenerManager.create(notificationCenter);
	return instance;
};
oFF.OuCalcEventManager.prototype.m_eventEmitter = null;
oFF.OuCalcEventManager.prototype.m_eventListener = null;
oFF.OuCalcEventManager.prototype.getEmitter = function()
{
	return this.m_eventEmitter;
};
oFF.OuCalcEventManager.prototype.getListener = function()
{
	return this.m_eventListener;
};
oFF.OuCalcEventManager.prototype.releaseObject = function()
{
	this.m_eventEmitter = oFF.XObjectExt.release(this.m_eventEmitter);
	this.m_eventListener = oFF.XObjectExt.release(this.m_eventListener);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.OuDataProviderVariableDialogActionResult = function() {};
oFF.OuDataProviderVariableDialogActionResult.prototype = new oFF.XObject();
oFF.OuDataProviderVariableDialogActionResult.prototype._ff_c = "OuDataProviderVariableDialogActionResult";

oFF.OuDataProviderVariableDialogActionResult.create = function()
{
	return new oFF.OuDataProviderVariableDialogActionResult();
};
oFF.OuDataProviderVariableDialogActionResult.prototype.m_isSubmitted = false;
oFF.OuDataProviderVariableDialogActionResult.prototype.isDialogCancelled = function()
{
	return !this.m_isSubmitted;
};
oFF.OuDataProviderVariableDialogActionResult.prototype.isDialogSubmitted = function()
{
	return this.m_isSubmitted;
};
oFF.OuDataProviderVariableDialogActionResult.prototype.setDialogSubmitted = function(submitted)
{
	this.m_isSubmitted = submitted;
};

oFF.OuCalcCalculationsDialogLambdaCloseListener = function() {};
oFF.OuCalcCalculationsDialogLambdaCloseListener.prototype = new oFF.XObject();
oFF.OuCalcCalculationsDialogLambdaCloseListener.prototype._ff_c = "OuCalcCalculationsDialogLambdaCloseListener";

oFF.OuCalcCalculationsDialogLambdaCloseListener.create = function(onOK)
{
	let result = new oFF.OuCalcCalculationsDialogLambdaCloseListener();
	result.m_okProcedure = onOK;
	return result;
};
oFF.OuCalcCalculationsDialogLambdaCloseListener.prototype.m_okProcedure = null;
oFF.OuCalcCalculationsDialogLambdaCloseListener.prototype.onOkButton = function(newMember)
{
	if (oFF.notNull(this.m_okProcedure))
	{
		this.m_okProcedure(newMember);
	}
};
oFF.OuCalcCalculationsDialogLambdaCloseListener.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_okProcedure = null;
};

oFF.OuCalcVariableCreatorDialogLambdaCloseListener = function() {};
oFF.OuCalcVariableCreatorDialogLambdaCloseListener.prototype = new oFF.XObject();
oFF.OuCalcVariableCreatorDialogLambdaCloseListener.prototype._ff_c = "OuCalcVariableCreatorDialogLambdaCloseListener";

oFF.OuCalcVariableCreatorDialogLambdaCloseListener.create = function(onOK)
{
	let result = new oFF.OuCalcVariableCreatorDialogLambdaCloseListener();
	result.m_okConsumer = onOK;
	return result;
};
oFF.OuCalcVariableCreatorDialogLambdaCloseListener.prototype.m_okConsumer = null;
oFF.OuCalcVariableCreatorDialogLambdaCloseListener.prototype.onOkButton = function(newMember)
{
	if (oFF.notNull(this.m_okConsumer))
	{
		this.m_okConsumer(newMember);
	}
};
oFF.OuCalcVariableCreatorDialogLambdaCloseListener.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_okConsumer = null;
};

oFF.OuCalcDatasourceHandlerFactory = {

	_create:function(queryModel, calcStructure)
	{
			let datasourceType = oFF.FeDatasourceTypeHelper.getType(queryModel, calcStructure);
		if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.BW))
		{
			return oFF.OuCalcDatasourceHandlerBW._create(queryModel, calcStructure);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.HANA))
		{
			return oFF.OuCalcDatasourceHandlerHANA._create(queryModel, calcStructure);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.UAM_MEASURE))
		{
			return oFF.OuCalcDatasourceHandlerUAMMeasure._createUAM(queryModel, calcStructure);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.UAM_ACCOUNT))
		{
			return oFF.OuCalcDatasourceHandlerUAMAccount._createUAM(queryModel, calcStructure);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.MODEL_MEASURE))
		{
			return oFF.OuCalcDatasourceHandlerModelMeasure._create(queryModel, calcStructure);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.MODEL_ACCOUNT))
		{
			return oFF.OuCalcDatasourceHandlerModelAccount._create(queryModel, calcStructure);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.OTHER))
		{
			return oFF.OuCalcDatasourceHandler._create(queryModel, calcStructure);
		}
		throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate2("Unknown datasource type: ", datasourceType));
	},
	createPromise:function(queryModel, calcStructure, useClientQueryObjectsStorage)
	{
			let datasourceType = oFF.FeDatasourceTypeHelper.getType(queryModel, calcStructure);
		if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.BW))
		{
			return oFF.OuCalcDatasourceHandlerBW.createPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.HANA))
		{
			return oFF.OuCalcDatasourceHandlerHANA.createPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.UAM_MEASURE))
		{
			return oFF.OuCalcDatasourceHandlerUAMMeasure.createUAMPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.UAM_ACCOUNT))
		{
			return oFF.OuCalcDatasourceHandlerUAMAccount.createUAMPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.MODEL_MEASURE))
		{
			return oFF.OuCalcDatasourceHandlerModelMeasure.createPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.MODEL_ACCOUNT))
		{
			return oFF.OuCalcDatasourceHandlerModelAccount.createPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		else if (oFF.XString.isEqual(datasourceType, oFF.FeDatasourceTypeHelper.OTHER))
		{
			return oFF.OuCalcDatasourceHandler.createPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
		}
		throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate2("Unknown datasource type: ", datasourceType));
	}
};

oFF.OuCalcNumberFormatting = function() {};
oFF.OuCalcNumberFormatting.prototype = new oFF.XObject();
oFF.OuCalcNumberFormatting.prototype._ff_c = "OuCalcNumberFormatting";

oFF.OuCalcNumberFormatting.create = function(numericShift, isNumericShiftPercent, numericScale, scaleFormat, signPresentation)
{
	let instance = new oFF.OuCalcNumberFormatting();
	instance.m_numericShift = numericShift;
	instance.m_isNumericShiftPercent = isNumericShiftPercent;
	instance.m_numericScale = numericScale;
	instance.m_scaleFormat = scaleFormat;
	instance.m_signPresentation = signPresentation;
	return instance;
};
oFF.OuCalcNumberFormatting.createFromMember = function(structureMember, excludePercentDataCells)
{
	return oFF.OuCalcNumberFormatting.create(structureMember.getNumericShiftExt(excludePercentDataCells), structureMember.isNumericShiftPercent(), structureMember.getNumericScale(), structureMember.getScaleFormat(), structureMember.getSignPresentation());
};
oFF.OuCalcNumberFormatting.prototype.m_isNumericShiftPercent = false;
oFF.OuCalcNumberFormatting.prototype.m_numericScale = null;
oFF.OuCalcNumberFormatting.prototype.m_numericShift = null;
oFF.OuCalcNumberFormatting.prototype.m_scaleFormat = null;
oFF.OuCalcNumberFormatting.prototype.m_signPresentation = null;
oFF.OuCalcNumberFormatting.prototype.applyToMember = function(structureMember)
{
	if (oFF.notNull(this.m_numericShift))
	{
		structureMember.setNumericShiftExt(this.m_numericShift.getInteger(), true);
		if (structureMember.getModelCapabilities().supportsNumericShiftPercent())
		{
			structureMember.setNumericShiftPercent(this.m_isNumericShiftPercent);
		}
	}
	if (oFF.notNull(this.m_numericScale))
	{
		structureMember.setNumericScale(this.m_numericScale.getInteger());
	}
	if (oFF.notNull(this.m_scaleFormat))
	{
		structureMember.setScaleFormat(this.m_scaleFormat);
	}
	if (oFF.notNull(this.m_signPresentation))
	{
		structureMember.setSignPresentation(this.m_signPresentation);
	}
};
oFF.OuCalcNumberFormatting.prototype.getNumericScale = function()
{
	return this.m_numericScale;
};
oFF.OuCalcNumberFormatting.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.OuCalcNumberFormatting.prototype.getScaleFormat = function()
{
	return this.m_scaleFormat;
};
oFF.OuCalcNumberFormatting.prototype.getSignPresentation = function()
{
	return this.m_signPresentation;
};
oFF.OuCalcNumberFormatting.prototype.isNumericShiftPercent = function()
{
	return this.m_isNumericShiftPercent;
};

oFF.CalculationDialogUsageTracking = function() {};
oFF.CalculationDialogUsageTracking.prototype = new oFF.XObject();
oFF.CalculationDialogUsageTracking.prototype._ff_c = "CalculationDialogUsageTracking";

oFF.CalculationDialogUsageTracking.AI_ASSISTANT_TOGGLE_ACTION = "FE_AI_ASSISTANT_TOGGLE";
oFF.CalculationDialogUsageTracking.AI_ASSISTANT_TOGGLE_OPEN_PARAM_KEY = "open";
oFF.CalculationDialogUsageTracking.AI_ASSISTANT_TOGGLE_SOURCE_PARAM_KEY = "source";
oFF.CalculationDialogUsageTracking.CALCULATION_DIALOG_ACTION = "DATA_ANALYZER_2_CALCULATION";
oFF.CalculationDialogUsageTracking.CALCULATION_DIALOG_FEATURE = "DataAnalyser";
oFF.CalculationDialogUsageTracking.CALCULATION_TYPE = "calculationType";
oFF.CalculationDialogUsageTracking.CLOSE_EVENT_KEY = "closeEvent";
oFF.CalculationDialogUsageTracking.CREATE_EVENT = "Create";
oFF.CalculationDialogUsageTracking.DATASOURCE = "dataSource";
oFF.CalculationDialogUsageTracking.DATASOURCE_TYPE_PREFIX = "DataSource.";
oFF.CalculationDialogUsageTracking.ERROR = "error";
oFF.CalculationDialogUsageTracking.FUNCTION_USED = "functionUsed";
oFF.CalculationDialogUsageTracking.GEN_AI_ADD_FORMULA_TO_EDITOR_ACTION = "FE_GEN_AI_ADD_FORMULA_TO_EDITOR";
oFF.CalculationDialogUsageTracking.GEN_AI_ENABLED_PARAM_KEY = "genAiEnabled";
oFF.CalculationDialogUsageTracking.GEN_AI_EXPLAIN_FORMULA_ACTION = "FE_GEN_AI_EXPLAIN_FORMULA";
oFF.CalculationDialogUsageTracking.GEN_AI_GENERATE_FORMULA_ACTION = "FE_GEN_AI_GENERATE_FORMULA";
oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_MODIFIED_VALUE = "Modified";
oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_NO_VALUE = "No";
oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_PARAM_KEY = "genAiUsage";
oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_YES_VALUE = "Yes";
oFF.CalculationDialogUsageTracking.UPDATE_EVENT = "Update";
oFF.CalculationDialogUsageTracking.create = function(process)
{
	let instance = new oFF.CalculationDialogUsageTracking();
	instance.m_process = process;
	return instance;
};
oFF.CalculationDialogUsageTracking.prototype.m_process = null;
oFF.CalculationDialogUsageTracking.prototype.extractFunctionNames = function(originalFormulaItems)
{
	let functionNameList = oFF.XStream.of(originalFormulaItems).map((fItem) => {
		return oFF.XStringValue.create(fItem.getDisplayName());
	}).collect(oFF.XStreamCollector.toList());
	let functionNameMap = oFF.XHashMapByString.create();
	oFF.XStream.of(functionNameList).forEach((_function) => {
		let count = oFF.XIntegerValue.create(0);
		if (functionNameMap.containsKey(_function.getString()))
		{
			count = functionNameMap.getByKey(_function.getString());
		}
		count.setInteger(count.getInteger() + 1);
		functionNameMap.put(_function.getString(), count);
	});
	let functionNameSet = oFF.XHashSetOfString.create();
	let funcNameIterator = functionNameMap.getKeysAsIterator();
	while (funcNameIterator.hasNext())
	{
		let functionName = funcNameIterator.next();
		functionNameSet.add(oFF.XStringUtils.concatenate3(functionName, "=", functionNameMap.getByKey(functionName).toString()));
	}
	return functionNameSet;
};
oFF.CalculationDialogUsageTracking.prototype.getCsvRepresentation = function(functions)
{
	return oFF.XCollectionUtils.join(functions.getValuesAsReadOnlyList(), ",");
};
oFF.CalculationDialogUsageTracking.prototype.recordCalculationAiAssistantToggle = function(isOpen, source)
{
	let parameters = oFF.PrFactory.createStructure();
	parameters.putBoolean(oFF.CalculationDialogUsageTracking.AI_ASSISTANT_TOGGLE_OPEN_PARAM_KEY, isOpen);
	parameters.putString(oFF.CalculationDialogUsageTracking.AI_ASSISTANT_TOGGLE_SOURCE_PARAM_KEY, source);
	this.m_process.interceptUserActivity(null, oFF.CalculationDialogUsageTracking.AI_ASSISTANT_TOGGLE_ACTION, oFF.CalculationDialogUsageTracking.CALCULATION_DIALOG_FEATURE, parameters, null);
};
oFF.CalculationDialogUsageTracking.prototype.recordCalculationDialogEvent = function(closeEvent, dataSourceType, structureType, originalFormulaItems, genAiUsage)
{
	let parameters = oFF.PrFactory.createStructure();
	parameters.putString(oFF.CalculationDialogUsageTracking.CLOSE_EVENT_KEY, closeEvent);
	parameters.putString(oFF.CalculationDialogUsageTracking.DATASOURCE, oFF.XStringUtils.concatenate2(oFF.CalculationDialogUsageTracking.DATASOURCE_TYPE_PREFIX, dataSourceType));
	parameters.putString(oFF.CalculationDialogUsageTracking.CALCULATION_TYPE, structureType.getName());
	parameters.putString(oFF.CalculationDialogUsageTracking.FUNCTION_USED, this.getCsvRepresentation(this.extractFunctionNames(originalFormulaItems)));
	if (oFF.FeFeatureToggle.isActive(oFF.FeFeatureToggle.GEN_AI) && oFF.FeFeatureToggle.isActive(oFF.FeFeatureToggle.GEN_AI_PHASE1))
	{
		parameters.putBoolean(oFF.CalculationDialogUsageTracking.GEN_AI_ENABLED_PARAM_KEY, oFF.notNull(genAiUsage));
		if (oFF.notNull(genAiUsage))
		{
			parameters.putString(oFF.CalculationDialogUsageTracking.GEN_AI_USAGE_PARAM_KEY, genAiUsage);
		}
	}
	this.m_process.interceptUserActivity(null, oFF.CalculationDialogUsageTracking.CALCULATION_DIALOG_ACTION, oFF.CalculationDialogUsageTracking.CALCULATION_DIALOG_FEATURE, parameters, null);
};
oFF.CalculationDialogUsageTracking.prototype.recordCalculationDialogGenAiEvent = function(actionKey, originalFunctionsUsedInFormula, error)
{
	let parameters = oFF.PrFactory.createStructure();
	parameters.putString(oFF.CalculationDialogUsageTracking.FUNCTION_USED, this.getCsvRepresentation(this.extractFunctionNames(originalFunctionsUsedInFormula)));
	if (oFF.notNull(error) && error.isPresent())
	{
		parameters.putString(oFF.CalculationDialogUsageTracking.ERROR, error.get());
	}
	this.m_process.interceptUserActivity(null, actionKey, oFF.CalculationDialogUsageTracking.CALCULATION_DIALOG_FEATURE, parameters, null);
};
oFF.CalculationDialogUsageTracking.prototype.releaseObject = function()
{
	this.m_process = null;
};

oFF.OuCalcCalculationsDialogViewConstants = {

	ASSISTANCE_PANEL_AREA_CSS_CLASS:"ffCalculationsAssistancePanelArea",
	CALCULATION_DIALOG_V1_CSS_CLASS:"ffCalculationsDialogV1",
	CALCULATION_DIALOG_V2_CSS_CLASS:"ffCalculationsDialogV2",
	CODE_EDITOR_AREA_CSS_CLASS:"ffCalculationsDialogCodeEditorArea",
	COLLAPSED_CSS_CLASS:"ffOuPanelCollapsed",
	DETAILS_AREA_CSS_CLASS:"ffCalculationsDialogDetailsArea",
	FORMULA_ITEM_LIST_AREA_CSS_CLASS:"ffCalculationsFormulaItemListArea",
	FULLSPACE_CSS_CLASS:"ffOuPanelFullSpace",
	LAYOUT_BOTTOM_CSS_CLASS:"ffCalculationsDialog-FormulaEditor-BottomLayout",
	LAYOUT_BOTTOM_RIGHT_CSS_CLASS:"ffCalculationsDialog-FormulaEditor-BottomRightLayout",
	LAYOUT_TOP_CSS_CLASS:"ffCalculationsDialog-FormulaEditor-TopLayout",
	MAIN_LAYOUT_CSS_CLASS:"ffCalculationsDialog-FormulaEditor-MainLayout",
	PANEL_ITEM_ASSISTANCE_CSS_CLASS:"ffCalculationDialog-FormulaEditor-AssistanceItem",
	PANEL_ITEM_ASSISTANCE_MIN_HEIGHT:"4.6875rem",
	PANEL_ITEM_CENTRAL_CSS_CLASS:"ffCalculationDialog-FormulaEditor-CentralPanelItem",
	PANEL_ITEM_EDITOR_CSS_CLASS:"ffCalculationDialog-FormulaEditor-EditorPanelItem",
	PANEL_ITEM_LEFT_CSS_CLASS:"ffCalculationDialog-FormulaEditor-LeftPanelItem",
	PANEL_ITEM_RIGHT_CSS_CLASS:"ffCalculationDialog-FormulaEditor-RightPanelItem",
	V1_PANEL_ITEM_LEFT_MAX_WIDTH:"60%",
	V1_PANEL_ITEM_LEFT_MIN_WIDTH:"9.375rem",
	V2_PANEL_ITEM_LEFT_WIDTH_BIG_VIEWPORT:"23rem",
	V2_PANEL_ITEM_LEFT_WIDTH_SMALL_VIEWPORT:"23rem",
	V2_PANEL_ITEM_RIGHT_WIDTH_BIG_VIEWPORT:"27rem",
	V2_PANEL_ITEM_RIGHT_WIDTH_SMALL_VIEWPORT:"23rem"
};

oFF.ClipboardHelperForFdItem = function() {};
oFF.ClipboardHelperForFdItem.prototype = new oFF.XObject();
oFF.ClipboardHelperForFdItem.prototype._ff_c = "ClipboardHelperForFdItem";

oFF.ClipboardHelperForFdItem.createHelper = function()
{
	return new oFF.ClipboardHelperForFdItem();
};
oFF.ClipboardHelperForFdItem.prototype.getValueGrid = function(values)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let rows = oFF.XList.create();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		let firstDisplayKey = value.getDisplayKey();
		if (oFF.isNull(firstDisplayKey))
		{
			continue;
		}
		let columns = oFF.XList.create();
		if (oFF.XString.isEqual(firstDisplayKey, ""))
		{
			columns.add(this.mapToCbValue(localization.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE)));
		}
		else
		{
			columns.add(firstDisplayKey);
		}
		rows.add(columns);
	}
	return rows;
};
oFF.ClipboardHelperForFdItem.prototype.mapToCbValue = function(value)
{
	if (!oFF.XString.startsWith(value, "(") && !oFF.XString.endsWith(value, ")"))
	{
		return oFF.XStringUtils.concatenate3("(", value, ")");
	}
	return value;
};
oFF.ClipboardHelperForFdItem.prototype.parseFromClipboard = function(text, useKey)
{
	let items = oFF.XLinkedHashMapByString.create();
	if (oFF.XStringUtils.isNullOrEmpty(text))
	{
		return oFF.XList.create();
	}
	let rows = oFF.DialogGridParser.deserializeWithDefault(text);
	let size = rows.size();
	for (let i = 0; i < size; i++)
	{
		let row = rows.get(i);
		if (row.hasElements())
		{
			let key = row.get(0);
			let value = oFF.FilterDialogValueFactory.createValue(useKey ? key : null, useKey ? null : key, null);
			items.put(oFF.XString.toLowerCase(key), value);
		}
	}
	return oFF.XCollectionUtils.createListCopy(items.getValuesAsReadOnlyList());
};

oFF.ClipboardHelperForVdValue = function() {};
oFF.ClipboardHelperForVdValue.prototype = new oFF.XObject();
oFF.ClipboardHelperForVdValue.prototype._ff_c = "ClipboardHelperForVdValue";

oFF.ClipboardHelperForVdValue.createHelper = function()
{
	let obj = new oFF.ClipboardHelperForVdValue();
	obj.m_i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	return obj;
};
oFF.ClipboardHelperForVdValue.prototype.m_i18n = null;
oFF.ClipboardHelperForVdValue.prototype.createUniqueValueKey = function(value)
{
	let firstOperand = value.getFirstOperand();
	let secondOperand = value.getSecondOperand();
	let displayKey1 = firstOperand.getDisplayKey();
	let displayKey2 = oFF.notNull(secondOperand) ? secondOperand.getDisplayKey() : null;
	return oFF.XStringUtils.concatenate3(value.getOperator().getName(), oFF.XString.toLowerCase(displayKey1), oFF.XString.toLowerCase(displayKey2));
};
oFF.ClipboardHelperForVdValue.prototype.getValueGrid = function(values)
{
	let rows = oFF.XList.create();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		let operator = value.getOperator();
		let firstDisplayKey = value.getFirstOperand().getDisplayKey();
		let secondDisplayKey = value.getSecondOperand().getDisplayKey();
		if (oFF.isNull(operator) || oFF.isNull(firstDisplayKey))
		{
			continue;
		}
		let columns = oFF.XList.create();
		if (operator.isNullOperator())
		{
			columns.add(this.mapToCbValue(operator.getShortText()));
		}
		else if (oFF.XString.isEqual(firstDisplayKey, ""))
		{
			columns.add(this.mapToCbValue(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE)));
		}
		else
		{
			columns.add(firstDisplayKey);
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(secondDisplayKey))
		{
			columns.add(secondDisplayKey);
		}
		rows.add(columns);
	}
	return rows;
};
oFF.ClipboardHelperForVdValue.prototype.mapToCbValue = function(value)
{
	if (!oFF.XString.startsWith(value, "(") && !oFF.XString.endsWith(value, ")"))
	{
		return oFF.XStringUtils.concatenate3("(", value, ")");
	}
	return value;
};
oFF.ClipboardHelperForVdValue.prototype.parseFromClipboard = function(text, supportsNotNull, supportsBetween)
{
	let values = oFF.XLinkedHashMapByString.create();
	if (oFF.XStringUtils.isNullOrEmpty(text))
	{
		return oFF.XList.create();
	}
	let cbNullValue = this.mapToCbValue(oFF.VdComparisonOperator.IS_NULL.getShortText());
	let cbNotNullValue = this.mapToCbValue(oFF.VdComparisonOperator.IS_NOT_NULL.getShortText());
	let cbNoValue = this.mapToCbValue(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE));
	let rows = oFF.DialogGridParser.deserializeWithDefault(text);
	let size = rows.size();
	for (let i = 0; i < size; i++)
	{
		let row = rows.get(i);
		if (row.hasElements())
		{
			let value = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, null, null);
			let displayKey1 = row.get(0);
			if (oFF.XString.isEqual(displayKey1, cbNullValue))
			{
				value.setOperator(oFF.VdComparisonOperator.IS_NULL);
			}
			else if (oFF.XString.isEqual(displayKey1, cbNotNullValue))
			{
				if (!supportsNotNull)
				{
					continue;
				}
				value.setOperator(oFF.VdComparisonOperator.IS_NOT_NULL);
			}
			else if (oFF.XString.isEqual(displayKey1, cbNoValue))
			{
				value.setFirstOperand(oFF.FilterDialogValueFactory.createValue(null, "", null));
			}
			else
			{
				value.setFirstOperand(oFF.FilterDialogValueFactory.createValue(null, displayKey1, null));
				if (row.size() > 1 && supportsBetween)
				{
					value.setSecondOperand(oFF.FilterDialogValueFactory.createValue(null, row.get(1), null));
					value.setOperator(oFF.VdComparisonOperator.BETWEEN);
					value.updateOperandOrder();
				}
			}
			values.put(this.createUniqueValueKey(value), value);
		}
	}
	return oFF.XCollectionUtils.createListCopy(values.getValuesAsReadOnlyList());
};
oFF.ClipboardHelperForVdValue.prototype.releaseObject = function()
{
	this.m_i18n = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.CbLayout = function() {};
oFF.CbLayout.prototype = new oFF.XObject();
oFF.CbLayout.prototype._ff_c = "CbLayout";

oFF.CbLayout.create = function()
{
	return new oFF.CbLayout();
};
oFF.CbLayout.prototype.m_infoLabel = null;
oFF.CbLayout.prototype.m_infoSection = null;
oFF.CbLayout.prototype.m_layout = null;
oFF.CbLayout.prototype.m_textArea = null;
oFF.CbLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let root = this.buildTree(genesis);
	genesis.setRoot(root);
};
oFF.CbLayout.prototype.buildTree = function(genesis)
{
	this.m_layout = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_layout.setName("ClipboardWrapper");
	this.m_infoSection = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_infoSection.setDirection(oFF.UiFlexDirection.ROW);
	let infoIco = genesis.newControl(oFF.UiType.ICON);
	infoIco.setIcon("message-information");
	infoIco.setEnabled(false);
	this.m_infoSection.addItem(infoIco);
	let spacer = genesis.newControl(oFF.UiType.SPACER);
	spacer.setWidth(oFF.UiCssLength.createExt(5, oFF.UiCssSizeUnit.PIXEL));
	this.m_infoSection.addItem(spacer);
	this.m_infoLabel = genesis.newControl(oFF.UiType.LABEL);
	this.m_infoLabel.setName("ClipboardInfoLbl");
	this.m_infoLabel.setTextAlign(oFF.UiTextAlign.CENTER);
	this.m_infoLabel.setFontStyle(oFF.UiFontStyle.ITALIC);
	this.m_infoSection.addItem(this.m_infoLabel);
	this.m_layout.addItem(this.m_infoSection);
	let spacer2 = genesis.newControl(oFF.UiType.SPACER);
	spacer2.setHeight(oFF.UiCssLength.createExt(10, oFF.UiCssSizeUnit.PIXEL));
	this.m_layout.addItem(spacer2);
	this.m_textArea = genesis.newControl(oFF.UiType.TEXT_AREA);
	this.m_textArea.setName("ClipboardDialogTextArea");
	this.m_textArea.setWidth(oFF.UiCssLength.create("100%"));
	this.m_textArea.setHeight(oFF.UiCssLength.createExt(550, oFF.UiCssSizeUnit.PIXEL));
	this.m_layout.addItem(this.m_textArea);
	return this.m_layout;
};
oFF.CbLayout.prototype.getInfoLabel = function()
{
	return this.m_infoLabel;
};
oFF.CbLayout.prototype.getInfoSection = function()
{
	return this.m_infoSection;
};
oFF.CbLayout.prototype.getTextArea = function()
{
	return this.m_textArea;
};

oFF.CmtFactory = function() {};
oFF.CmtFactory.prototype = new oFF.XObject();
oFF.CmtFactory.prototype._ff_c = "CmtFactory";

oFF.CmtFactory.createFactory = function(context)
{
	let obj = new oFF.CmtFactory();
	obj.m_context = context;
	return obj;
};
oFF.CmtFactory.prototype.m_context = null;
oFF.CmtFactory.prototype.newCommentingDialogInstance = function()
{
	return oFF.CmtController.create(this.m_context);
};

oFF.CmtLayout = function() {};
oFF.CmtLayout.prototype = new oFF.XObject();
oFF.CmtLayout.prototype._ff_c = "CmtLayout";

oFF.CmtLayout.create = function()
{
	return new oFF.CmtLayout();
};
oFF.CmtLayout.prototype.m_infoLabel = null;
oFF.CmtLayout.prototype.m_infoSection = null;
oFF.CmtLayout.prototype.m_layout = null;
oFF.CmtLayout.prototype.m_textArea = null;
oFF.CmtLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let root = this.buildTree(genesis);
	genesis.setRoot(root);
};
oFF.CmtLayout.prototype.buildTree = function(genesis)
{
	this.m_layout = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_layout.setName("CmtDialogWrapper");
	this.m_infoSection = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_infoSection.setDirection(oFF.UiFlexDirection.ROW);
	this.m_infoLabel = genesis.newControl(oFF.UiType.LABEL);
	this.m_infoLabel.setName("CommentingInfoLbl");
	this.m_infoLabel.setTextAlign(oFF.UiTextAlign.CENTER);
	this.m_infoSection.addItem(this.m_infoLabel);
	this.m_layout.addItem(this.m_infoSection);
	this.m_textArea = genesis.newControl(oFF.UiType.TEXT_AREA);
	this.m_textArea.setName("CommentingTextArea");
	this.m_textArea.setWidth(oFF.UiCssLength.create("100%"));
	this.m_textArea.setHeight(oFF.UiCssLength.createExt(550, oFF.UiCssSizeUnit.PIXEL));
	this.m_layout.addItem(this.m_textArea);
	return this.m_layout;
};
oFF.CmtLayout.prototype.getInfoLabel = function()
{
	return this.m_infoLabel;
};
oFF.CmtLayout.prototype.getInfoSection = function()
{
	return this.m_infoSection;
};
oFF.CmtLayout.prototype.getTextArea = function()
{
	return this.m_textArea;
};

oFF.OuCurrencyConversionDialogHelper = function() {};
oFF.OuCurrencyConversionDialogHelper.prototype = new oFF.XObject();
oFF.OuCurrencyConversionDialogHelper.prototype._ff_c = "OuCurrencyConversionDialogHelper";

oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME = "CurrencyConversionDialog_EmptyItem";
oFF.OuCurrencyConversionDialogHelper.EXCEPTION_NO_TRANSLATION_MANAGER = "A Currency Translation Manager must be provided!";
oFF.OuCurrencyConversionDialogHelper.create = function(currencyTranslationManager)
{
	if (oFF.isNull(currencyTranslationManager))
	{
		throw oFF.XException.createRuntimeException(oFF.OuCurrencyConversionDialogHelper.EXCEPTION_NO_TRANSLATION_MANAGER);
	}
	let ccDialogHelper = new oFF.OuCurrencyConversionDialogHelper();
	ccDialogHelper.m_currencyTranslationManager = currencyTranslationManager;
	ccDialogHelper.setupCurrencyTranslations();
	return ccDialogHelper;
};
oFF.OuCurrencyConversionDialogHelper.prototype.m_availableCurrencies = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_availableCurrencyTranslations = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_currencyMap = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_currencyToTranslationMap = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_currencyTranslationManager = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_translationMap = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_translationToCurrencyMap = null;
oFF.OuCurrencyConversionDialogHelper.prototype.m_translationsApplicableToAllCurrencies = null;
oFF.OuCurrencyConversionDialogHelper.prototype.getAvailableCurrencies = function()
{
	return this.m_availableCurrencies;
};
oFF.OuCurrencyConversionDialogHelper.prototype.getAvailableCurrencyTranslations = function()
{
	return this.m_availableCurrencyTranslations;
};
oFF.OuCurrencyConversionDialogHelper.prototype.getCurrenciesOfTranslation = function(translationName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(translationName) && !oFF.XString.isEqual(translationName, oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME))
	{
		let currencyList = this.m_translationToCurrencyMap.getByKey(translationName);
		if (oFF.notNull(currencyList))
		{
			return this.m_translationToCurrencyMap.getByKey(translationName);
		}
	}
	return this.getAvailableCurrencies();
};
oFF.OuCurrencyConversionDialogHelper.prototype.getCurrencyByName = function(currencyName)
{
	return this.m_currencyMap.getByKey(currencyName);
};
oFF.OuCurrencyConversionDialogHelper.prototype.getCurrencyTranslationByName = function(translationName)
{
	return this.m_translationMap.getByKey(translationName);
};
oFF.OuCurrencyConversionDialogHelper.prototype.getTranslationsOfCurrency = function(currencyName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(currencyName) && !oFF.XString.isEqual(currencyName, oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME))
	{
		let translationList = this.m_currencyToTranslationMap.getByKey(currencyName);
		let currencyList = oFF.notNull(translationList) ? this.m_currencyToTranslationMap.getByKey(currencyName).createListCopy() : oFF.XList.create();
		currencyList.addAll(this.m_translationsApplicableToAllCurrencies);
		return currencyList;
	}
	else
	{
		return this.getAvailableCurrencyTranslations();
	}
};
oFF.OuCurrencyConversionDialogHelper.prototype.initInstanceVariables = function()
{
	this.m_availableCurrencies = oFF.XList.create();
	this.m_availableCurrencyTranslations = oFF.XList.create();
	this.m_translationsApplicableToAllCurrencies = oFF.XList.create();
	this.m_currencyMap = oFF.XHashMapByString.create();
	this.m_translationMap = oFF.XHashMapByString.create();
	this.m_currencyToTranslationMap = oFF.XHashMapByString.create();
	this.m_translationToCurrencyMap = oFF.XHashMapByString.create();
};
oFF.OuCurrencyConversionDialogHelper.prototype.isEmptyItemValue = function(value)
{
	return oFF.XStringUtils.isNullOrEmpty(value) || oFF.XString.isEqual(value, oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME);
};
oFF.OuCurrencyConversionDialogHelper.prototype.releaseObject = function()
{
	this.m_availableCurrencies = null;
	this.m_availableCurrencyTranslations = null;
	this.m_translationsApplicableToAllCurrencies = oFF.XObjectExt.release(this.m_translationsApplicableToAllCurrencies);
	this.m_currencyMap = oFF.XObjectExt.release(this.m_currencyMap);
	this.m_translationMap = oFF.XObjectExt.release(this.m_translationMap);
	this.m_currencyToTranslationMap = oFF.XObjectExt.release(this.m_currencyToTranslationMap);
	this.m_translationToCurrencyMap = oFF.XObjectExt.release(this.m_translationToCurrencyMap);
	this.m_currencyTranslationManager = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OuCurrencyConversionDialogHelper.prototype.setupCrossLookups = function()
{
	oFF.XStream.of(this.m_availableCurrencyTranslations).forEach((currencyTranslation) => {
		let currencyName = currencyTranslation.getFixedTargetCurrency();
		if (oFF.XStringUtils.isNullOrEmpty(currencyName))
		{
			this.m_translationsApplicableToAllCurrencies.add(currencyTranslation);
		}
		else
		{
			if (this.m_currencyToTranslationMap.containsKey(currencyName))
			{
				this.m_currencyToTranslationMap.getByKey(currencyName).add(currencyTranslation);
			}
			else
			{
				let translationList = oFF.XList.create();
				translationList.add(currencyTranslation);
				this.m_currencyToTranslationMap.put(currencyName, translationList);
			}
			let currencyTranslationName = currencyTranslation.getName();
			let currency = this.m_currencyMap.getByKey(currencyName);
			if (this.m_translationToCurrencyMap.containsKey(currencyTranslationName))
			{
				this.m_translationToCurrencyMap.getByKey(currencyTranslationName).add(currency);
			}
			else
			{
				let currencyList = oFF.XList.create();
				currencyList.add(currency);
				this.m_translationToCurrencyMap.put(currencyTranslationName, currencyList);
			}
		}
	});
};
oFF.OuCurrencyConversionDialogHelper.prototype.setupCurrencyTranslations = function()
{
	this.initInstanceVariables();
	this.m_availableCurrencies = this.m_currencyTranslationManager.getAvailableCurrencies();
	if (oFF.isNull(this.m_availableCurrencies))
	{
		this.m_availableCurrencies = oFF.XList.create();
	}
	this.m_availableCurrencyTranslations = this.m_currencyTranslationManager.getAvailableCurrencyTranslationObjects();
	if (oFF.isNull(this.m_availableCurrencyTranslations))
	{
		this.m_availableCurrencyTranslations = oFF.XList.create();
	}
	this.setupSimpleLookups();
	this.setupCrossLookups();
};
oFF.OuCurrencyConversionDialogHelper.prototype.setupSimpleLookups = function()
{
	if (oFF.notNull(this.m_availableCurrencies) && this.m_availableCurrencies.size() > 0)
	{
		let currencyStream = oFF.XStream.of(this.m_availableCurrencies);
		this.m_currencyMap = currencyStream.collect(oFF.XStreamCollector.toMap((i1) => {
			return i1.getName();
		}, (i2) => {
			return i2;
		}));
	}
	if (oFF.notNull(this.m_availableCurrencyTranslations) && this.m_availableCurrencyTranslations.size() > 0)
	{
		let translationStream = oFF.XStream.of(this.m_availableCurrencyTranslations);
		this.m_translationMap = translationStream.collect(oFF.XStreamCollector.toMap((i3) => {
			return i3.getName();
		}, (i4) => {
			return i4;
		}));
	}
};

oFF.DataCellModel = function() {};
oFF.DataCellModel.prototype = new oFF.XObject();
oFF.DataCellModel.prototype._ff_c = "DataCellModel";

oFF.DataCellModel.create = function()
{
	return new oFF.DataCellModel();
};
oFF.DataCellModel.prototype.m_decimal = null;
oFF.DataCellModel.prototype.m_decimalDefaultAsMetadata = false;
oFF.DataCellModel.prototype.m_decimalDefaultvalue = null;
oFF.DataCellModel.prototype.m_decimalSelections = null;
oFF.DataCellModel.prototype.m_disaggregationModeDefaultAsMetadata = false;
oFF.DataCellModel.prototype.m_disaggregationModeDefaultvalue = null;
oFF.DataCellModel.prototype.m_disaggregationModeOnModel = null;
oFF.DataCellModel.prototype.m_disaggregationModeSelections = null;
oFF.DataCellModel.prototype.m_resultCalculationOnModel = null;
oFF.DataCellModel.prototype.m_resultCalculationSelections = null;
oFF.DataCellModel.prototype.m_scaling = null;
oFF.DataCellModel.prototype.m_scalingDefaultAsMetadata = false;
oFF.DataCellModel.prototype.m_scalingDefaultvalue = null;
oFF.DataCellModel.prototype.m_scalingSelections = null;
oFF.DataCellModel.prototype.m_singleValueCalculationOnModel = null;
oFF.DataCellModel.prototype.m_singleValueCalculationSelections = null;
oFF.DataCellModel.prototype.m_valueType = null;
oFF.DataCellModel.prototype.getDecimal = function()
{
	return this.m_decimal;
};
oFF.DataCellModel.prototype.getDecimalDefaultAsMetadata = function()
{
	return this.m_decimalDefaultAsMetadata;
};
oFF.DataCellModel.prototype.getDecimalDefaultValue = function()
{
	return oFF.notNull(this.m_decimalDefaultvalue) ? this.m_decimalDefaultvalue.getStringRepresentation() : null;
};
oFF.DataCellModel.prototype.getDecimalSelections = function()
{
	return this.m_decimalSelections;
};
oFF.DataCellModel.prototype.getDisaggregationModeDefaultAsMetadata = function()
{
	return this.m_disaggregationModeDefaultAsMetadata;
};
oFF.DataCellModel.prototype.getDisaggregationModeDefaultvalue = function()
{
	return this.m_disaggregationModeDefaultvalue;
};
oFF.DataCellModel.prototype.getDisaggregationModeOnModel = function()
{
	return this.m_disaggregationModeOnModel;
};
oFF.DataCellModel.prototype.getDisaggregationModeSelections = function()
{
	return this.m_disaggregationModeSelections;
};
oFF.DataCellModel.prototype.getResultCalculationOnModel = function()
{
	return this.m_resultCalculationOnModel;
};
oFF.DataCellModel.prototype.getResultCalculationSelections = function()
{
	return this.m_resultCalculationSelections;
};
oFF.DataCellModel.prototype.getScaling = function()
{
	return this.m_scaling;
};
oFF.DataCellModel.prototype.getScalingDefaultAsMetadata = function()
{
	return this.m_scalingDefaultAsMetadata;
};
oFF.DataCellModel.prototype.getScalingDefaultValue = function()
{
	return oFF.notNull(this.m_scalingDefaultvalue) ? this.m_scalingDefaultvalue.getStringRepresentation() : null;
};
oFF.DataCellModel.prototype.getScalingSelections = function()
{
	return this.m_scalingSelections;
};
oFF.DataCellModel.prototype.getSingleValueCalculationOnModel = function()
{
	return this.m_singleValueCalculationOnModel;
};
oFF.DataCellModel.prototype.getSingleValueCalculationSelections = function()
{
	return this.m_singleValueCalculationSelections;
};
oFF.DataCellModel.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.DataCellModel.prototype.setDecimal = function(decimal)
{
	this.m_decimal = decimal;
};
oFF.DataCellModel.prototype.setDecimalDefaultAsMetadata = function(decimalDefaultAsMetadata)
{
	this.m_decimalDefaultAsMetadata = decimalDefaultAsMetadata;
};
oFF.DataCellModel.prototype.setDecimalDefaultValue = function(decimalDefaultvalue)
{
	this.m_decimalDefaultvalue = decimalDefaultvalue;
};
oFF.DataCellModel.prototype.setDisaggregationModeDefaultAsMetadata = function(disaggregationModeDefaultAsMetadata)
{
	this.m_disaggregationModeDefaultAsMetadata = disaggregationModeDefaultAsMetadata;
};
oFF.DataCellModel.prototype.setDisaggregationModeDefaultvalue = function(disaggregationModeDefaultvalue)
{
	this.m_disaggregationModeDefaultvalue = disaggregationModeDefaultvalue;
};
oFF.DataCellModel.prototype.setModelValues = function(decimalSelections, scalingSelections, resultCalculationSelections, singleValueCalculationSelections, decimal, scalingFactor, resultCalculationOnModel, singleValueCalculationOnModel, valueType, disaggregationModeSelections, disaggregationModeOnModel)
{
	this.m_decimalSelections = decimalSelections;
	this.m_scalingSelections = scalingSelections;
	this.m_resultCalculationSelections = resultCalculationSelections;
	this.m_singleValueCalculationSelections = singleValueCalculationSelections;
	this.m_decimal = decimal;
	this.m_scaling = scalingFactor;
	this.m_resultCalculationOnModel = resultCalculationOnModel;
	this.m_singleValueCalculationOnModel = singleValueCalculationOnModel;
	this.m_valueType = valueType;
	this.m_disaggregationModeSelections = disaggregationModeSelections;
	this.m_disaggregationModeOnModel = disaggregationModeOnModel;
};
oFF.DataCellModel.prototype.setScaling = function(scaling)
{
	this.m_scaling = scaling;
};
oFF.DataCellModel.prototype.setScalingDefaultAsMetadata = function(scalingDefaultAsMetadata)
{
	this.m_scalingDefaultAsMetadata = scalingDefaultAsMetadata;
};
oFF.DataCellModel.prototype.setScalingDefaultValue = function(scalingDefaultvalue)
{
	this.m_scalingDefaultvalue = scalingDefaultvalue;
};

oFF.OuDatasourcePickerLambdaListener = function() {};
oFF.OuDatasourcePickerLambdaListener.prototype = new oFF.XObject();
oFF.OuDatasourcePickerLambdaListener.prototype._ff_c = "OuDatasourcePickerLambdaListener";

oFF.OuDatasourcePickerLambdaListener.create = function(consumer)
{
	let obj = new oFF.OuDatasourcePickerLambdaListener();
	obj.m_consumer = consumer;
	return obj;
};
oFF.OuDatasourcePickerLambdaListener.prototype.m_consumer = null;
oFF.OuDatasourcePickerLambdaListener.prototype.onDatasourceSelected = function(dataSource)
{
	this.m_consumer(dataSource);
};
oFF.OuDatasourcePickerLambdaListener.prototype.releaseObject = function()
{
	this.m_consumer = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.OuDd2AbstractTab = function() {};
oFF.OuDd2AbstractTab.prototype = new oFF.XObject();
oFF.OuDd2AbstractTab.prototype._ff_c = "OuDd2AbstractTab";

oFF.OuDd2AbstractTab.prototype.m_dimension = null;
oFF.OuDd2AbstractTab.prototype.m_form = null;
oFF.OuDd2AbstractTab.prototype.m_i18n = null;
oFF.OuDd2AbstractTab.prototype.m_mainAttributeModel = null;
oFF.OuDd2AbstractTab.prototype.m_startValues = null;
oFF.OuDd2AbstractTab.prototype.focus = function()
{
	if (this.getTabBarItem() !== null)
	{
		this.getTabBarItem().focus();
	}
};
oFF.OuDd2AbstractTab.prototype.hasChanged = function(currentModel, propertyName)
{
	return !oFF.XObjectExt.areEqual(currentModel.getByKey(propertyName), this.m_startValues.getByKey(propertyName));
};
oFF.OuDd2AbstractTab.prototype.selectItem = function()
{
	let tabBarItem = this.getTabBarItem();
	if (oFF.notNull(tabBarItem))
	{
		tabBarItem.getParent().setSelectedItem(tabBarItem);
	}
};
oFF.OuDd2AbstractTab.prototype.setupTab = function(dimension, i18n)
{
	this.m_dimension = dimension;
	this.m_i18n = i18n;
	let mainAttribute = this.m_dimension.getMainAttribute();
	if (oFF.isNull(mainAttribute))
	{
		this.m_mainAttributeModel = oFF.FieldContainerPresentationHelper.createFromFieldContainer(this.m_dimension);
		this.m_mainAttributeModel.applyResultSetSettings(this.m_dimension);
	}
	else
	{
		this.m_mainAttributeModel = oFF.FieldContainerPresentationHelper.createFromFieldContainer(mainAttribute);
		let mainRsAttribute = oFF.XStream.of(this.m_dimension.getResultSetAttributes()).filter((a) => {
			return oFF.XString.isEqual(a.getName(), mainAttribute.getName());
		}).findAny();
		mainRsAttribute.ifPresent((att) => {
			this.m_mainAttributeModel.applyResultSetSettings(att);
		});
	}
};

oFF.FdSettings = function() {};
oFF.FdSettings.prototype = new oFF.XObject();
oFF.FdSettings.prototype._ff_c = "FdSettings";

oFF.FdSettings.create = function(model)
{
	let settings = new oFF.FdSettings();
	settings.setupSettings(model);
	return settings;
};
oFF.FdSettings.prototype.m_additionalAttributes = null;
oFF.FdSettings.prototype.m_displayInfo = null;
oFF.FdSettings.prototype.m_readMode = null;
oFF.FdSettings.prototype.getAdditionalAttributes = function()
{
	return this.m_additionalAttributes;
};
oFF.FdSettings.prototype.getDisplayInfo = function()
{
	return this.m_displayInfo;
};
oFF.FdSettings.prototype.getReadMode = function()
{
	return this.m_readMode;
};
oFF.FdSettings.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_displayInfo = null;
	this.m_additionalAttributes = oFF.XObjectExt.release(this.m_additionalAttributes);
	this.m_readMode = null;
};
oFF.FdSettings.prototype.setupSettings = function(model)
{
	let mainPresentation = model.getPresentationsModel().getSelectedMainPresentation();
	if (oFF.notNull(mainPresentation))
	{
		if (mainPresentation.hasKeyPresentation() && mainPresentation.hasTextPresentation())
		{
			this.m_displayInfo = mainPresentation.isKeyPrimary() ? oFF.FilterDisplayInfo.ID_AND_DESCRIPTION : oFF.FilterDisplayInfo.DESCRIPTION_AND_ID;
		}
		else
		{
			this.m_displayInfo = mainPresentation.hasKeyPresentation() ? oFF.FilterDisplayInfo.ID : oFF.FilterDisplayInfo.DESCRIPTION;
		}
	}
	this.m_additionalAttributes = oFF.XCollectionUtils.map(model.getPresentationsModel().getSelectedAdditionalPresentations(), (p) => {
		return p.getTechnicalName();
	});
	this.m_readMode = model.getReadMode();
};

oFF.FdItemFactory = function() {};
oFF.FdItemFactory.prototype = new oFF.XObject();
oFF.FdItemFactory.prototype._ff_c = "FdItemFactory";

oFF.FdItemFactory.asFdItem = function(value)
{
	if (oFF.isNull(value) || (value.getProperties() !== null && value.getProperties().getBooleanByKeyExt(oFF.FdItem.FD_ITEM_IDENTIFIER, false)))
	{
		return value;
	}
	if (value.isNull())
	{
		return oFF.FdItemFactory.createNullValue();
	}
	let item;
	let type = value.getType();
	if (type === oFF.FilterDialogValueType.VALUEHELP)
	{
		item = oFF.FdValueHelpItem.create(value.getValueHelpNode(), value.getHierarchyName(), null);
	}
	else if (type === oFF.FilterDialogValueType.HIERARCHY_CATALOG)
	{
		item = oFF.FdHierarchyCatalogItem.createHierarchyCatalogItem(value.getCatalogItem());
	}
	else if (type === oFF.FilterDialogValueType.RANGE)
	{
		let rangeValue = value;
		item = oFF.FdRangeItem.create(oFF.FdItemFactory.asFdItem(rangeValue.getLow()), oFF.FdItemFactory.asFdItem(rangeValue.getHigh()), value.isExcluded());
	}
	else if (type === oFF.FilterDialogValueType.DATE_RANGE_FIXED)
	{
		let fixedDateRangeValue = value;
		let dateRange = fixedDateRangeValue.getDateRange();
		item = oFF.FdFixedDateRangeItem.create(dateRange.getFixedFromDate(), dateRange.getFixedToDate(), dateRange.getGranularity(), dateRange.getDateTimeProvider());
	}
	else if (type === oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC)
	{
		let dynamicDateRangeValue = value;
		item = oFF.FdDynamicDateRangeItem.create(dynamicDateRangeValue.getDateRange());
	}
	else if (type === oFF.FilterDialogValueType.USER)
	{
		item = oFF.FdUserItem.create(value.getKey(), value.getText(), null);
	}
	else if (type === oFF.FilterDialogValueType.TEAM)
	{
		item = oFF.FdTeamItem.create(value.getKey(), value.getText(), null);
	}
	else
	{
		item = oFF.FdSimpleItem.createWithType(value.getKey(), value.hasDisplayKey() ? value.getDisplayKey() : null, value.getText(), value.getValueType());
	}
	item.addProperties(value.getProperties());
	item.setFdComparisonOperator(oFF.FdComparisonOperator.getByOriginalOperator(value.getComparisonOperator()));
	item.setHierarchyName(value.getHierarchyName());
	item.setExcluded(value.isExcluded());
	return null;
};
oFF.FdItemFactory.asFdItemList = function(values)
{
	let items = oFF.XList.create();
	oFF.XCollectionUtils.forEach(values, (value) => {
		items.add(oFF.FdItemFactory.asFdItem(value));
	});
	return items;
};
oFF.FdItemFactory.asFdValueList = function(items)
{
	let values = oFF.XList.create();
	oFF.XCollectionUtils.forEach(items, (value) => {
		values.add(value);
	});
	return values;
};
oFF.FdItemFactory.convertRangeToDateRangeItem = function(rangeItem, granularity, dateTimeProvider)
{
	if (oFF.notNull(rangeItem) && rangeItem.getType() === oFF.FilterDialogValueType.RANGE && rangeItem.getFdComparisonOperator() === oFF.FdComparisonOperator.BETWEEN)
	{
		let dateMin = oFF.XDate.createDateSafe(rangeItem.getLowItem().getKey());
		let dateMax = oFF.XDate.createDateSafe(rangeItem.getHighItem().getKey());
		if (oFF.notNull(dateMin) && oFF.notNull(dateMax))
		{
			return oFF.FdFixedDateRangeItem.create(dateMin, dateMax, granularity, dateTimeProvider);
		}
	}
	return null;
};
oFF.FdItemFactory.create = function()
{
	return new oFF.FdItemFactory();
};
oFF.FdItemFactory.createItemFromVariableValueBag = function(valueBag, memberFilter, filterElement)
{
	let key = oFF.XValueUtil.getString(valueBag.getValue());
	let displayKey = valueBag.getDisplayKeySupplement(memberFilter);
	let text = valueBag.getTextSupplement(memberFilter);
	return oFF.FdItemFactory.createSimpleItem(memberFilter, filterElement, valueBag, key, displayKey, text);
};
oFF.FdItemFactory.createNullValue = function()
{
	return oFF.FdSimpleItem.createNull(false);
};
oFF.FdItemFactory.createRangeItem = function(low, high, cartesianElement)
{
	low.setFdComparisonOperator(oFF.FdComparisonOperator.EQUAL);
	high.setFdComparisonOperator(oFF.FdComparisonOperator.EQUAL);
	let operator = cartesianElement.getComparisonOperator();
	return oFF.FdRangeItem.create(low, high, (operator === oFF.ComparisonOperator.NOT_BETWEEN && cartesianElement.getSetSign() === oFF.SetSign.INCLUDING) || (operator === oFF.ComparisonOperator.BETWEEN && cartesianElement.getSetSign() === oFF.SetSign.EXCLUDING));
};
oFF.FdItemFactory.createSimpleItem = function(filter, cartesianElement, valueBag, key, displayKey, text)
{
	if (oFF.notNull(key) || oFF.notNull(displayKey) || oFF.notNull(text))
	{
		let item = oFF.FdSimpleItem.createWithType(key, displayKey, text, valueBag.getValueType());
		item.setFdComparisonOperator(oFF.FdComparisonOperator.lookup(cartesianElement.getComparisonOperator().getName()));
		item.setExcluded(cartesianElement.getSetSign() === oFF.SetSign.EXCLUDING);
		item.setHierarchyName(oFF.XStringUtils.isNotNullAndNotEmpty(cartesianElement.getHierarchyName()) ? cartesianElement.getHierarchyName() : filter.getHierarchyName());
		return item;
	}
	return null;
};
oFF.FdItemFactory.prototype.createDateRangeItemFromDateRangeOperation = function(filter, filterDateRange)
{
	let item = null;
	let dateRange = filterDateRange.getDateRange();
	if (oFF.notNull(dateRange))
	{
		if (dateRange.isFixedRange())
		{
			item = oFF.FdFixedDateRangeItem.create(dateRange.getFixedFromDate(), dateRange.getFixedToDate(), dateRange.getGranularity(), dateRange.getDateTimeProvider());
		}
		else
		{
			item = oFF.FdDynamicDateRangeItem.create(filterDateRange.getDateRange());
		}
		this.updateDateRangeItem(item, filter, filterDateRange);
	}
	return item;
};
oFF.FdItemFactory.prototype.createDimensionFilterItem = function(filter, cartesianElement, valueBag, dimension)
{
	let filterField = filter.getField();
	let isFilterOnKey = filterField === dimension.getFlatKeyField() || filterField === dimension.getHierarchyKeyField() || filterField === dimension.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND);
	let isFilterOnDisplayKey = !isFilterOnKey && (filterField === dimension.getFlatDisplayKeyField() || filterField === dimension.getHierarchyDisplayKeyField() || filterField === dimension.getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND));
	let isFilterOnText = !isFilterOnKey && !isFilterOnDisplayKey && oFF.notNull(filterField) && filterField.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT);
	let filterValue = valueBag.getValue().getStringRepresentation();
	let key = filterValue;
	if (!isFilterOnKey)
	{
		key = valueBag.getSupplementValueString(dimension.getFlatKeyField().getName());
		if (oFF.isNull(key))
		{
			key = valueBag.getSupplementValueString(dimension.getHierarchyKeyField().getName());
		}
	}
	let displayKey = isFilterOnDisplayKey ? filterValue : valueBag.getFlatOrHierarchicalDisplayKeySupplement(filter);
	let text = isFilterOnText ? filterValue : this.getTextSupplement(filter, cartesianElement, valueBag);
	return oFF.FdItemFactory.createSimpleItem(filter, cartesianElement, valueBag, key, displayKey, text);
};
oFF.FdItemFactory.prototype.createFixedDateRangeItem = function(filter, filterElement, dimension, granularity)
{
	let operator = filterElement.getComparisonOperator();
	let low = filterElement.getLow();
	let high = filterElement.getHigh();
	let lowValue = low.getValue().getStringRepresentation();
	let highValue = oFF.notNull(high) && high.getValue() !== null ? high.getValue().getStringRepresentation() : null;
	let fromStart = false;
	let toEnd = false;
	if (operator === oFF.ComparisonOperator.GREATER_EQUAL && oFF.isNull(highValue))
	{
		fromStart = oFF.XString.startsWith(lowValue, "0002");
		toEnd = true;
	}
	else if ((operator === oFF.ComparisonOperator.LESS_EQUAL && oFF.isNull(highValue)) || (operator === oFF.ComparisonOperator.BETWEEN && oFF.XString.startsWith(lowValue, "0002")))
	{
		fromStart = true;
	}
	let dateRangeGranularity = granularity;
	if (dimension.getFlatKeyField().getValueType().isDateBased() && (oFF.notNull(lowValue) && oFF.XString.size(lowValue) === 4) && (oFF.isNull(highValue) || oFF.XString.size(highValue) === 4))
	{
		dateRangeGranularity = oFF.DateRangeGranularity.YEAR;
	}
	let dateMin = fromStart ? null : oFF.DateRangeGranularityMapper.mapToDate(lowValue, dateRangeGranularity, false);
	let dateMax = toEnd ? null : oFF.DateRangeGranularityMapper.mapToDate(fromStart && oFF.isNull(highValue) ? lowValue : highValue, dateRangeGranularity, true);
	if ((fromStart || oFF.notNull(dateMin)) && (toEnd || oFF.notNull(dateMax)))
	{
		let item = oFF.FdFixedDateRangeItem.create(dateMin, dateMax, dateRangeGranularity, dimension.getProcess().getDateTimeProvider());
		this.updateDateRangeItem(item, filter, filterElement);
		return item;
	}
	return null;
};
oFF.FdItemFactory.prototype.getTextSupplement = function(filter, cartesianElement, valueBag)
{
	let textFieldUsedInResultSet = oFF.QDimensionUtil.getTextFieldUsedInResultSet(filter.getDimension(), oFF.XStringUtils.isNotNullAndNotEmpty(filter.getHierarchyName()) || oFF.XStringUtils.isNotNullAndNotEmpty(cartesianElement.getHierarchyName()));
	if (oFF.notNull(textFieldUsedInResultSet))
	{
		let supplement = valueBag.getSupplementValueString(textFieldUsedInResultSet.getName());
		if (oFF.notNull(supplement))
		{
			return supplement;
		}
	}
	return valueBag.getFlatOrHierarchicalTextSupplement(filter);
};
oFF.FdItemFactory.prototype.newDateRangeDynamic = function(dateRange)
{
	return oFF.FdDynamicDateRangeItem.create(dateRange);
};
oFF.FdItemFactory.prototype.newDateRangeFixed = function(min, max, granularity, dateTimeProvider)
{
	return oFF.FdFixedDateRangeItem.create(min, max, granularity, dateTimeProvider);
};
oFF.FdItemFactory.prototype.newDateRangeItemFromCartesianElement = function(filter, filterElement, dimension)
{
	let operator = filterElement.getComparisonOperator();
	if (operator === oFF.ComparisonOperator.BETWEEN || operator === oFF.ComparisonOperator.LESS_EQUAL || operator === oFF.ComparisonOperator.GREATER_EQUAL)
	{
		if (dimension.getFlatKeyField().getValueType().isDateBased())
		{
			return this.createFixedDateRangeItem(filter, filterElement, dimension, oFF.DateRangeGranularity.DAY);
		}
		let field = filter.getField();
		let isKeyFieldFilter = field === dimension.getFlatKeyField();
		let filteredField = field.getName();
		return oFF.XStream.of(dimension.getLeveledHierarchies()).map((leveledHierarchy) => {
			return oFF.XCollectionUtils.findFirst(leveledHierarchy.getAllLevel(), (level) => {
				return oFF.XString.isEqual(filteredField, level.getLevelDimensionName()) || isKeyFieldFilter && oFF.XString.isEqual(dimension.getName(), level.getLevelDimensionName());
			});
		}).filterNullValues().findAny().map((hierarchyLevel) => {
			return hierarchyLevel.getLevelType() !== null ? hierarchyLevel.getLevelType().mapToDateRangeGranularity() : null;
		}).map((granularity) => {
			return this.createFixedDateRangeItem(filter, filterElement, dimension, granularity);
		}).orElse(null);
	}
	return null;
};
oFF.FdItemFactory.prototype.newEmptyValue = function()
{
	return oFF.FdSimpleItem.create(null, null, null);
};
oFF.FdItemFactory.prototype.newNullValue = function()
{
	return oFF.FdItemFactory.createNullValue();
};
oFF.FdItemFactory.prototype.newRangeValue = function(low, high, excludedRange)
{
	return oFF.FdRangeItem.create(oFF.FdItemFactory.asFdItem(low), oFF.FdItemFactory.asFdItem(high), excludedRange);
};
oFF.FdItemFactory.prototype.newSelectionFromFilter = function(dimension, filter)
{
	let selection = oFF.XList.create();
	if (oFF.notNull(dimension) && oFF.notNull(filter) && oFF.XString.isEqual(filter.getDimensionName(), dimension.getName()))
	{
		let supportsDateRangeFilter = dimension.getFlatKeyField().getValueType().isDateBased() || oFF.HierarchyLevelType.getHighestDateRangeGranularity(dimension) !== null;
		for (let i = 0; i < filter.size(); i++)
		{
			let cartesianElement = filter.getCartesianElement(i);
			let comparisonOperator = cartesianElement.getComparisonOperator();
			if (comparisonOperator === oFF.ComparisonOperator.IS_NULL)
			{
				let nullItem = oFF.FdItemFactory.createNullValue();
				nullItem.setExcluded(cartesianElement.getSetSign() === oFF.SetSign.EXCLUDING);
				selection.add(nullItem);
				continue;
			}
			let low = cartesianElement.getLow();
			if (low.getValue() === null)
			{
				continue;
			}
			let item = null;
			if (cartesianElement.getOlapComponentType() === oFF.FilterComponentType.DATE_RANGE_OPERATION)
			{
				item = this.createDateRangeItemFromDateRangeOperation(filter, cartesianElement);
			}
			else if (supportsDateRangeFilter)
			{
				item = this.newDateRangeItemFromCartesianElement(filter, cartesianElement, dimension);
			}
			if (oFF.isNull(item))
			{
				item = this.createDimensionFilterItem(filter, cartesianElement, low, dimension);
				if ((comparisonOperator === oFF.ComparisonOperator.BETWEEN || comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN) && cartesianElement.getHigh() !== null)
				{
					let highItem = this.createDimensionFilterItem(filter, cartesianElement, cartesianElement.getHigh(), dimension);
					if (oFF.notNull(item) && oFF.notNull(highItem))
					{
						item = oFF.FdItemFactory.createRangeItem(item, highItem, cartesianElement);
					}
				}
			}
			if (oFF.notNull(item))
			{
				selection.add(item);
			}
		}
	}
	return selection;
};
oFF.FdItemFactory.prototype.newSelectionFromVariable = function(variable)
{
	let selection = oFF.XList.create();
	if (variable.hasMemberFilter())
	{
		let memberFilter = variable.getMemberFilter();
		for (let i = 0; i < memberFilter.size(); i++)
		{
			let filterElement = memberFilter.getOp(i);
			let low = filterElement.getLow();
			let high = filterElement.getHigh();
			let operator = filterElement.getComparisonOperator();
			if (operator === oFF.ComparisonOperator.IS_NULL)
			{
				let nullItem = oFF.FdItemFactory.createNullValue();
				nullItem.setExcluded(filterElement.getSetSign() === oFF.SetSign.EXCLUDING);
				selection.add(nullItem);
			}
			else if (variable.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NAME_VARIABLE))
			{
				let hnvKey = oFF.XValueUtil.getString(low.getValue());
				let hnvText = low.getTextSupplement(memberFilter);
				oFF.XCollectionUtils.addIfNotNull(selection, oFF.FdItemFactory.createSimpleItem(memberFilter, filterElement, low, hnvKey, hnvKey, hnvText));
			}
			else
			{
				let item = oFF.FdItemFactory.createItemFromVariableValueBag(low, memberFilter, filterElement);
				if ((operator === oFF.ComparisonOperator.BETWEEN || operator === oFF.ComparisonOperator.NOT_BETWEEN) && oFF.notNull(high))
				{
					let highItem = oFF.FdItemFactory.createItemFromVariableValueBag(high, memberFilter, filterElement);
					if (oFF.notNull(item) && oFF.notNull(highItem))
					{
						item = oFF.FdItemFactory.createRangeItem(item, highItem, filterElement);
					}
				}
				oFF.XCollectionUtils.addIfNotNull(selection, item);
			}
		}
	}
	return selection;
};
oFF.FdItemFactory.prototype.newTeamValue = function(name, text, icon)
{
	return oFF.FdTeamItem.create(name, text, icon);
};
oFF.FdItemFactory.prototype.newTeamValueByFile = function(file)
{
	return oFF.FdTeamItem.createWithAttributes(file.getAttributes());
};
oFF.FdItemFactory.prototype.newUserValue = function(name, text, icon)
{
	return oFF.FdUserItem.create(name, text, icon);
};
oFF.FdItemFactory.prototype.newUserValueByFile = function(file)
{
	return oFF.FdUserItem.createWithAttributes(file.getAttributes());
};
oFF.FdItemFactory.prototype.newValue = function(key, displayKey, text)
{
	return oFF.FdSimpleItem.create(key, displayKey, text);
};
oFF.FdItemFactory.prototype.newValueExt = function(key, displayKey, text, hierarchyName, operator)
{
	let item = oFF.FdSimpleItem.create(key, displayKey, text);
	item.setHierarchyName(hierarchyName);
	item.setFdComparisonOperator(oFF.FdComparisonOperator.getByOriginalOperator(operator));
	return item;
};
oFF.FdItemFactory.prototype.newValueHelpValue = function(node)
{
	if (oFF.notNull(node))
	{
		let dim = node.getDimension();
		let hierarchyName = dim.isSelectorHierarchyActive() ? (oFF.XStringUtils.isNotNullAndNotEmpty(dim.getSelectorHierarchyName()) ? dim.getSelectorHierarchyName() : dim.getHierarchyName()) : null;
		return oFF.FdValueHelpItem.create(node, hierarchyName, null);
	}
	return null;
};
oFF.FdItemFactory.prototype.newValueHelpValueExt = function(node, hierarchyName, comparisonOperator)
{
	if (oFF.notNull(node))
	{
		let item = this.newValueHelpValue(node);
		item.setHierarchyName(hierarchyName);
		item.setFdComparisonOperator(oFF.FdComparisonOperator.getByOriginalOperator(comparisonOperator));
		return item;
	}
	return null;
};
oFF.FdItemFactory.prototype.newValueWithType = function(key, displayKey, text, valueType)
{
	return oFF.FdSimpleItem.createWithType(key, displayKey, text, valueType);
};
oFF.FdItemFactory.prototype.updateDateRangeItem = function(item, filter, filterElement)
{
	if (oFF.notNull(item))
	{
		item.setExcluded(filterElement.getSetSign() === oFF.SetSign.EXCLUDING);
		item.setHierarchyName(oFF.XStringUtils.isNotNullAndNotEmpty(filterElement.getHierarchyName()) ? filterElement.getHierarchyName() : filter.getHierarchyName());
	}
};

oFF.OuFilterDialogPerformance = {

	FILTER_DIALOG_PERF_GROUP_NAME:"FilterDialog",
	MARK_DIALOG_STARTUP_END:"mark_fd_dialog_startup_end",
	MARK_DIALOG_STARTUP_START:"mark_fd_dialog_startup_start",
	MEASURE_DIALOG_STARTUP:"measure_fd_dialog_startup",
	getMeasureResult:function(name)
	{
			let filterDialogPerfGroup = oFF.XPerformance.getGroup(oFF.OuFilterDialogPerformance.FILTER_DIALOG_PERF_GROUP_NAME);
		if (oFF.notNull(filterDialogPerfGroup))
		{
			let perfEntryList = filterDialogPerfGroup.getEntriesByName(oFF.OuFilterDialogPerformance.MEASURE_DIALOG_STARTUP);
			if (oFF.notNull(perfEntryList) && perfEntryList.hasElements())
			{
				let tmpPerfEntry = oFF.XCollectionUtils.last(perfEntryList);
				if (tmpPerfEntry.getType() === oFF.XPerformanceEntryType.MEASURE)
				{
					let perfMeasure = tmpPerfEntry;
					return perfMeasure.getDuration();
				}
			}
		}
		return 0;
	},
	mark:function(name, description)
	{
			let filterDialogPerfGroup = oFF.XPerformance.getGroup(oFF.OuFilterDialogPerformance.FILTER_DIALOG_PERF_GROUP_NAME);
		if (oFF.notNull(filterDialogPerfGroup))
		{
			filterDialogPerfGroup.mark(name, description);
		}
	},
	measure:function(name, startMarkName, endMarkName, description)
	{
			let filterDialogPerfGroup = oFF.XPerformance.getGroup(oFF.OuFilterDialogPerformance.FILTER_DIALOG_PERF_GROUP_NAME);
		if (oFF.notNull(filterDialogPerfGroup))
		{
			return filterDialogPerfGroup.measure(name, startMarkName, endMarkName, description);
		}
		return 0;
	}
};

oFF.FilterDialogI18nUtils = {

	getDateRangeFormattedLongText:function(dateRange, currentPeriodGranularity, formatter)
	{
			return oFF.FilterDialogI18nUtils.getDateRangeTextFormatted(dateRange, currentPeriodGranularity, (from, to) => {
			return formatter.formatRange(from, null, to, null, false);
		});
	},
	getDateRangeFormattedShortText:function(dateRange, currentPeriodGranularity, formatter)
	{
			return oFF.FilterDialogI18nUtils.getDateRangeTextFormatted(dateRange, currentPeriodGranularity, (from, to) => {
			return formatter.formatRangeSimplified(from, null, to, null);
		});
	},
	getDateRangeText:function(dateRange, currentPeriodGranularity)
	{
			return oFF.FilterDialogI18nUtils.getDateRangeTextFormatted(dateRange, currentPeriodGranularity, null);
	},
	getDateRangeTextForDimension:function(dateRange, dimension)
	{
			return oFF.FilterDialogI18nUtils.getDateRangeTextFormatted(dateRange, oFF.HierarchyLevelType.getHighestDateRangeGranularity(dimension), null);
	},
	getDateRangeTextFormatted:function(dateRange, currentPeriodGranularity, formatter)
	{
			if (oFF.isNull(dateRange) || dateRange.getGranularity() === null)
		{
			return "";
		}
		let localization = oFF.XLocalizationCenter.getCenter();
		let isFixedRange = dateRange.isFixedRange();
		let granularity = dateRange.getGranularity();
		if (granularity.isCurrentDateUnit() || dateRange.isUpToCurrentPeriod())
		{
			granularity = oFF.notNull(currentPeriodGranularity) ? currentPeriodGranularity : oFF.DateRangeGranularity.DAY;
		}
		try
		{
			let yearFrom = dateRange.getFromValue(oFF.DateRangeGranularity.YEAR);
			let yearTo = dateRange.getToValue(oFF.DateRangeGranularity.YEAR);
			let from = yearFrom === -1 && (!isFixedRange || !granularity.isDay() || dateRange.getFixedFromDate() === null) ? localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_FROM_START) : null;
			let to = yearTo === -1 && (!isFixedRange || !granularity.isDay() || dateRange.getFixedToDate() === null) ? localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TO_END) : null;
			if (oFF.isNull(from))
			{
				if (granularity.isQuarter())
				{
					from = oFF.FilterDialogI18nUtils.getDateText(yearFrom, 0, dateRange.getFromValue(oFF.DateRangeGranularity.QUARTER), 0, 0);
				}
				else if (granularity.isMonth())
				{
					from = oFF.FilterDialogI18nUtils.getDateText(yearFrom, 0, 0, dateRange.getFromValue(oFF.DateRangeGranularity.MONTH), 0);
				}
				else if (granularity.isDay())
				{
					if (isFixedRange)
					{
						from = oFF.UiNumberFormatterCenter.getCenter().formatTextForDateTimeKey(null, dateRange.getFixedFromDate().toIsoFormat(), oFF.XValueType.DATE);
					}
					else
					{
						from = oFF.FilterDialogI18nUtils.getDateText(yearFrom, 0, 0, dateRange.getFromValue(oFF.DateRangeGranularity.MONTH), dateRange.getFromValue(oFF.DateRangeGranularity.DAY));
					}
				}
				else if (granularity.isHalfYear())
				{
					from = oFF.FilterDialogI18nUtils.getDateText(yearFrom, dateRange.getFromValue(oFF.DateRangeGranularity.HALF_YEAR), 0, 0, 0);
				}
				else
				{
					from = oFF.FilterDialogI18nUtils.getDateText(yearFrom, 0, 0, 0, 0);
				}
			}
			if (oFF.isNull(to))
			{
				if (granularity.isQuarter())
				{
					to = oFF.FilterDialogI18nUtils.getDateText(yearTo, 0, dateRange.getToValue(oFF.DateRangeGranularity.QUARTER), 0, 0);
				}
				else if (granularity.isMonth())
				{
					to = oFF.FilterDialogI18nUtils.getDateText(yearTo, 0, 0, dateRange.getToValue(oFF.DateRangeGranularity.MONTH), 0);
				}
				else if (granularity.isDay())
				{
					if (isFixedRange)
					{
						to = oFF.UiNumberFormatterCenter.getCenter().formatTextForDateTimeKey(null, dateRange.getFixedToDate().toIsoFormat(), oFF.XValueType.DATE);
					}
					else
					{
						to = oFF.FilterDialogI18nUtils.getDateText(yearTo, 0, 0, dateRange.getToValue(oFF.DateRangeGranularity.MONTH), dateRange.getToValue(oFF.DateRangeGranularity.DAY));
					}
				}
				else if (granularity.isHalfYear())
				{
					to = oFF.FilterDialogI18nUtils.getDateText(yearTo, dateRange.getToValue(oFF.DateRangeGranularity.HALF_YEAR), 0, 0, 0);
				}
				else
				{
					to = oFF.FilterDialogI18nUtils.getDateText(yearTo, 0, 0, 0, 0);
				}
			}
			return oFF.notNull(formatter) ? formatter(from, to) : oFF.FilterDialogValueFormatter.formatDateRangeSimplified(from, to);
		}
		catch (t)
		{
			return "";
		}
	},
	getDateText:function(year, halfYear, quarter, month, day)
	{
			let text = oFF.XStringBuffer.create();
		if (halfYear === 1 || halfYear === 2)
		{
			text.append(oFF.FilterDialogI18nUtils.getHalfYearText(halfYear)).append(", ").appendInt(year);
		}
		else if (quarter >= 1 && quarter <= 4)
		{
			text.append(oFF.FilterDialogI18nUtils.getQuarterText(quarter)).append(", ").appendInt(year);
		}
		else if (month >= 1 && month <= 12)
		{
			text.append(oFF.FilterDialogI18nUtils.getMonthText(month));
			if (day >= 1 && day <= 31)
			{
				text.append(" ").appendInt(day);
			}
			text.append(", ").appendInt(year);
		}
		else
		{
			text.appendInt(year);
		}
		return text.toString();
	},
	getHalfYearText:function(halfYear)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		switch (halfYear)
		{
			case 1:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_HALFYEAR1);

			case 2:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_HALFYEAR2);

			default:
				return "";
		}
	},
	getMonthText:function(month)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		switch (month)
		{
			case 1:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH1);

			case 2:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH2);

			case 3:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH3);

			case 4:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH4);

			case 5:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH5);

			case 6:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH6);

			case 7:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH7);

			case 8:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH8);

			case 9:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH9);

			case 10:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH10);

			case 11:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH11);

			case 12:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH12);

			default:
				return "";
		}
	},
	getQuarterText:function(quarter)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		switch (quarter)
		{
			case 1:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER1);

			case 2:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER2);

			case 3:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER3);

			case 4:
				return localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER4);

			default:
				return "";
		}
	}
};

oFF.FdPresentationFactory = {

	createAdditionalPresentationsByDim:function(dimension, isHierarchicalValueHelp, useTextFieldFromResultSet, isFilterable, readMode)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		let textId = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID);
		let textDescription = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION);
		let presentations = oFF.XList.create();
		let systemType = oFF.FdPresentationFactory.getSystemType(dimension);
		if (!systemType.isTypeOf(oFF.SystemType.HANA) || !oFF.QDimensionUtil.isStructureLike(dimension) && !oFF.FdPresentationFactory.isVersionDimension(dimension))
		{
			let attributes = dimension.getAttributes();
			let mainAttribute = dimension.getMainAttribute();
			for (let i = 0; i < attributes.size(); i++)
			{
				let attribute = attributes.get(i);
				if (attribute !== mainAttribute && !attribute.isExcludedFromValueHelp())
				{
					let attributeText = oFF.XStringUtils.isNotNullAndNotEmpty(attribute.getText()) ? attribute.getText() : attribute.getName();
					let displayKeyField = isHierarchicalValueHelp ? attribute.getHierarchyDisplayKeyField() : attribute.getFlatDisplayKeyField();
					let textField = useTextFieldFromResultSet ? oFF.QDimensionUtil.getTextFieldUsedInResultSet(attribute, isHierarchicalValueHelp) : isHierarchicalValueHelp ? attribute.getHierarchyTextField() : attribute.getFlatTextField();
					if (oFF.notNull(displayKeyField) && !displayKeyField.getPresentationType().isTypeOf(oFF.PresentationType.HIERARCHY_PATH) && !displayKeyField.isExcludedFromValueHelp() || oFF.notNull(textField) && !textField.isExcludedFromValueHelp())
					{
						let presentation = oFF.FdPresentation.createExt(attributeText, attribute.getName());
						presentations.add(presentation);
						if (oFF.notNull(displayKeyField) && !displayKeyField.isExcludedFromValueHelp())
						{
							presentation.addKeyPresentation(oFF.XStringUtils.concatenate4(attributeText, " (", textId, ")"), displayKeyField, isFilterable && displayKeyField.isFilterableForValueHelpAndReadMode(readMode));
						}
						if (oFF.notNull(textField) && !textField.isExcludedFromValueHelp())
						{
							presentation.addTextPresentation(oFF.XStringUtils.concatenate4(attributeText, " (", textDescription, ")"), textField, isFilterable && textField.isFilterableForValueHelpAndReadMode(readMode));
						}
					}
				}
			}
		}
		return presentations;
	},
	createAdditionalPresentationsForHierarchyCatalog:function()
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		let textId = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID);
		let textDescription = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION);
		let presentations = oFF.XList.create();
		let versionIdentifier = oFF.XStringValue.create(oFF.FdContentProviderHierarchyCatalog.VERSION);
		let versionText = localization.getText(oFF.FilterDialogI18n.I18N_FD_HIER_VERSION);
		let versionPresentation = oFF.FdPresentation.create(versionText);
		versionPresentation.addKeyPresentation(oFF.XStringUtils.concatenate4(versionText, " (", textId, ")"), versionIdentifier, true);
		versionPresentation.addTextPresentation(oFF.XStringUtils.concatenate4(versionText, " (", textDescription, ")"), versionIdentifier, false);
		presentations.add(versionPresentation);
		let objectVersionIdentifier = oFF.XStringValue.create(oFF.FdContentProviderHierarchyCatalog.OBJECT_VERSION);
		let objectVersionText = localization.getText(oFF.FilterDialogI18n.I18N_FD_HIER_OBJECT_VERSION);
		let objectVersionPresentation = oFF.FdPresentation.create(objectVersionText);
		objectVersionPresentation.addKeyPresentation(oFF.XStringUtils.concatenate4(objectVersionText, " (", textId, ")"), objectVersionIdentifier, true);
		presentations.add(objectVersionPresentation);
		let dateFromIdentifier = oFF.XStringValue.create(oFF.FdContentProviderHierarchyCatalog.DATE_FROM);
		let dateFromText = localization.getText(oFF.FilterDialogI18n.I18N_FD_HIER_DATE_FROM);
		let dateFromPresentation = oFF.FdPresentation.create(dateFromText);
		dateFromPresentation.addKeyPresentation(dateFromText, dateFromIdentifier, false);
		presentations.add(dateFromPresentation);
		let dateToIdentifier = oFF.XStringValue.create(oFF.FdContentProviderHierarchyCatalog.DATE_FROM);
		let dateToText = localization.getText(oFF.FilterDialogI18n.I18N_FD_HIER_DATE_TO);
		let dateToPresentation = oFF.FdPresentation.create(dateToText);
		dateToPresentation.addKeyPresentation(dateToText, dateToIdentifier, false);
		presentations.add(dateToPresentation);
		return presentations;
	},
	createMainPresentationsByDim:function(displayKeyField, textField, readMode, showAllAvailablePresentations)
	{
			let tf = textField;
		if (oFF.isNull(tf))
		{
			tf = displayKeyField;
		}
		let isDisplayKeyFilterable = displayKeyField.isFilterableForValueHelpAndReadMode(readMode);
		let isTextFilterable = tf.isFilterableForValueHelpAndReadMode(readMode);
		let presentations = oFF.XList.create();
		let localization = oFF.XLocalizationCenter.getCenter();
		let descText = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION);
		let idText = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID);
		presentations.add(oFF.FdPresentation.createMainPresentation(descText).addTextPresentation(descText, tf, isTextFilterable));
		presentations.add(oFF.FdPresentation.createMainPresentation(localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_DESCRIPTION)).addKeyPresentation(idText, displayKeyField, isDisplayKeyFilterable).addTextPresentation(descText, tf, isTextFilterable).setKeyPrimary(true));
		if (showAllAvailablePresentations)
		{
			presentations.add(oFF.FdPresentation.createMainPresentation(localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION_AND_ID)).addKeyPresentation(idText, displayKeyField, isDisplayKeyFilterable).addTextPresentation(descText, tf, isTextFilterable).setKeyPrimary(false));
		}
		presentations.add(oFF.FdPresentation.createMainPresentation(idText).addKeyPresentation(idText, displayKeyField, isDisplayKeyFilterable));
		return presentations;
	},
	createMainPresentationsForHierarchyCatalog:function(showAllAvailablePresentations)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		let descText = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION);
		let idText = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID);
		let presentations = oFF.XList.create();
		presentations.add(oFF.FdPresentation.createMainPresentation(descText).addTextPresentation(descText, null, false));
		presentations.add(oFF.FdPresentation.createMainPresentation(localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_DESCRIPTION)).addKeyPresentation(idText, null, true).addTextPresentation(descText, null, false).setKeyPrimary(true));
		if (showAllAvailablePresentations)
		{
			presentations.add(oFF.FdPresentation.createMainPresentation(localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION_AND_ID)).addKeyPresentation(idText, null, true).addTextPresentation(descText, null, false).setKeyPrimary(false));
		}
		presentations.add(oFF.FdPresentation.createMainPresentation(idText).addKeyPresentation(idText, null, true));
		return presentations;
	},
	createMainPresentationsForUserAndText:function(showAllAvailablePresentations)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		let nameText = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME);
		let idText = localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID);
		let presentations = oFF.XList.create();
		presentations.add(oFF.FdPresentation.createMainPresentation(nameText).addTextPresentation(nameText, null, true));
		presentations.add(oFF.FdPresentation.createMainPresentation(localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_NAME)).addKeyPresentation(idText, null, true).addTextPresentation(nameText, null, true).setKeyPrimary(true));
		if (showAllAvailablePresentations)
		{
			presentations.add(oFF.FdPresentation.createMainPresentation(localization.getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME_AND_ID)).addKeyPresentation(idText, null, true).addTextPresentation(nameText, null, true).setKeyPrimary(false));
		}
		presentations.add(oFF.FdPresentation.createMainPresentation(idText).addKeyPresentation(idText, null, true));
		return presentations;
	},
	getSystemType:function(dimension)
	{
			let systemName = dimension.getDataSource().getSystemName();
		let systemDescription = dimension.getApplication().getSystemLandscape().getSystemDescription(systemName);
		return oFF.notNull(systemDescription) ? systemDescription.getSystemType() : oFF.SystemType.GENERIC;
	},
	isVersionDimension:function(dimension)
	{
			let queryModel = dimension.getQueryModel();
		return oFF.notNull(queryModel) && dimension === queryModel.getVersionDimension();
	},
	mapDimensionDisplayInfoToPresentation:function(displayInfo, dimension, mainPresentations)
	{
			let dfPresentation = displayInfo !== oFF.FilterDisplayInfo.QUERY_DEFAULT && oFF.notNull(displayInfo) ? oFF.FdPresentationFactory.mapDisplayInfo(displayInfo, mainPresentations) : null;
		if (oFF.isNull(dfPresentation))
		{
			let dfDisplayInfo = oFF.FilterDisplayInfo.getDimensionDisplayInfo(dimension);
			dfPresentation = oFF.FdPresentationFactory.mapDisplayInfo(dfDisplayInfo, mainPresentations);
			if (oFF.isNull(dfPresentation) && dfDisplayInfo.isEqualTo(oFF.FilterDisplayInfo.DESCRIPTION_AND_ID))
			{
				dfPresentation = oFF.FdPresentationFactory.mapDisplayInfo(oFF.FilterDisplayInfo.ID_AND_DESCRIPTION, mainPresentations);
			}
		}
		return oFF.notNull(dfPresentation) ? dfPresentation : mainPresentations.get(0);
	},
	mapDisplayInfo:function(displayInfo, presentations)
	{
			if (displayInfo === oFF.FilterDisplayInfo.DESCRIPTION)
		{
			return oFF.XCollectionUtils.findFirst(presentations, (p1) => {
				return !p1.hasKeyPresentation() && p1.hasTextPresentation();
			});
		}
		if (displayInfo === oFF.FilterDisplayInfo.ID)
		{
			return oFF.XCollectionUtils.findFirst(presentations, (p2) => {
				return p2.hasKeyPresentation() && !p2.hasTextPresentation();
			});
		}
		if (displayInfo === oFF.FilterDisplayInfo.ID_AND_DESCRIPTION)
		{
			return oFF.XCollectionUtils.findFirst(presentations, (p3) => {
				return p3.hasKeyPresentation() && p3.hasTextPresentation() && p3.isKeyPrimary();
			});
		}
		if (displayInfo === oFF.FilterDisplayInfo.DESCRIPTION_AND_ID)
		{
			return oFF.XCollectionUtils.findFirst(presentations, (p4) => {
				return p4.hasKeyPresentation() && p4.hasTextPresentation() && !p4.isKeyPrimary();
			});
		}
		return null;
	},
	mapDisplayInfoToPresentation:function(displayInfo, mainPresentations)
	{
			if (oFF.notNull(displayInfo))
		{
			let presentation = oFF.FdPresentationFactory.mapDisplayInfo(displayInfo, mainPresentations);
			if (oFF.notNull(presentation))
			{
				return presentation;
			}
		}
		return mainPresentations.get(0);
	}
};

oFF.FdPresentationsModel = function() {};
oFF.FdPresentationsModel.prototype = new oFF.XObject();
oFF.FdPresentationsModel.prototype._ff_c = "FdPresentationsModel";

oFF.FdPresentationsModel.create = function(model)
{
	let presentationsModel = new oFF.FdPresentationsModel();
	presentationsModel.m_model = model;
	presentationsModel.m_presentationsChangeListeners = oFF.XList.create();
	return presentationsModel;
};
oFF.FdPresentationsModel.prototype.m_additionalPresentations = null;
oFF.FdPresentationsModel.prototype.m_model = null;
oFF.FdPresentationsModel.prototype.m_presentations = null;
oFF.FdPresentationsModel.prototype.m_presentationsChangeListeners = null;
oFF.FdPresentationsModel.prototype.m_selectedAdditionalPresentations = null;
oFF.FdPresentationsModel.prototype.m_selectedPresentation = null;
oFF.FdPresentationsModel.prototype.getAdditionalPresentationValues = function(selectedOnly)
{
	let presentationValues = oFF.XList.create();
	oFF.XCollectionUtils.forEach(selectedOnly ? this.m_selectedAdditionalPresentations : this.m_additionalPresentations, (presentation) => {
		oFF.XCollectionUtils.addIfNotNull(presentationValues, presentation.getKeyPresentation());
		oFF.XCollectionUtils.addIfNotNull(presentationValues, presentation.getTextPresentation());
	});
	return presentationValues;
};
oFF.FdPresentationsModel.prototype.getAdditionalPresentations = function()
{
	return this.m_additionalPresentations;
};
oFF.FdPresentationsModel.prototype.getAdditionalPresentationsByName = function(presentationNames)
{
	if (oFF.XCollectionUtils.hasElements(presentationNames) && oFF.XCollectionUtils.hasElements(this.m_additionalPresentations))
	{
		return oFF.XStream.of(this.m_additionalPresentations).filter((p) => {
			return presentationNames.contains(p.getName()) || presentationNames.contains(p.getTechnicalName());
		}).collect(oFF.XStreamCollector.toList());
	}
	return oFF.XList.create();
};
oFF.FdPresentationsModel.prototype.getDefaultSearchPresentation = function()
{
	let filterablePresentations = this.getFilterablePresentations();
	if (filterablePresentations.contains(this.m_selectedPresentation))
	{
		return this.m_selectedPresentation;
	}
	return filterablePresentations.hasElements() ? filterablePresentations.get(0) : null;
};
oFF.FdPresentationsModel.prototype.getFilterablePresentations = function()
{
	let searchPresentations = oFF.XStream.of(this.m_presentations).filter((p) => {
		let keyPresentation = p.getKeyPresentation();
		let textPresentation = p.getTextPresentation();
		return (oFF.isNull(keyPresentation) || keyPresentation.isFilterable()) && (oFF.isNull(textPresentation) || textPresentation.isFilterable());
	}).collect(oFF.XStreamCollector.toList());
	oFF.XStream.of(this.m_additionalPresentations).filter((ap) => {
		return ap.isFilterable();
	}).forEach((filterableAP) => {
		searchPresentations.add(filterableAP);
	});
	return searchPresentations;
};
oFF.FdPresentationsModel.prototype.getMainPresentations = function()
{
	return this.m_presentations;
};
oFF.FdPresentationsModel.prototype.getSelectedAdditionalPresentations = function()
{
	return oFF.notNull(this.m_selectedAdditionalPresentations) ? this.m_selectedAdditionalPresentations : oFF.XList.create();
};
oFF.FdPresentationsModel.prototype.getSelectedMainPresentation = function()
{
	return this.m_selectedPresentation;
};
oFF.FdPresentationsModel.prototype.onPresentationsChanged = function()
{
	oFF.XCollectionUtils.forEach(this.m_presentationsChangeListeners, (listener) => {
		listener();
	});
};
oFF.FdPresentationsModel.prototype.registerOnPresentationsChange = function(listener)
{
	oFF.XCollectionUtils.addIfNotPresent(this.m_presentationsChangeListeners, listener);
};
oFF.FdPresentationsModel.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_model = null;
	this.m_presentations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_presentations);
	this.m_additionalPresentations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_additionalPresentations);
	this.m_selectedAdditionalPresentations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_selectedAdditionalPresentations);
	this.m_selectedPresentation = oFF.XObjectExt.release(this.m_selectedPresentation);
	this.m_presentationsChangeListeners = oFF.XObjectExt.release(this.m_presentationsChangeListeners);
};
oFF.FdPresentationsModel.prototype.setSelectedPresentations = function(mainPresentation, additionalPresentations)
{
	this.m_selectedPresentation = mainPresentation;
	this.m_selectedAdditionalPresentations = additionalPresentations;
	if (this.m_model.getSessionData() !== null)
	{
		this.m_model.getSessionData().setSelectedPresentations(mainPresentation, additionalPresentations);
	}
	this.m_model.updateSelection();
};
oFF.FdPresentationsModel.prototype.setupModel = function(mainPresentations, additionalPresentations, selectedMP, selectedAP)
{
	this.m_presentations = mainPresentations;
	this.m_additionalPresentations = additionalPresentations;
	if (oFF.notNull(selectedMP))
	{
		this.m_selectedPresentation = selectedMP;
	}
	else if (oFF.notNull(this.m_selectedPresentation))
	{
		this.m_selectedPresentation = oFF.XStream.of(mainPresentations).filter((mp) => {
			return oFF.XString.isEqual(mp.getName(), this.m_selectedPresentation.getName());
		}).findAny().orElse(mainPresentations.get(0));
	}
	if (oFF.notNull(selectedAP))
	{
		this.m_selectedAdditionalPresentations = this.getAdditionalPresentationsByName(selectedAP);
	}
	else if (oFF.XCollectionUtils.hasElements(this.m_selectedAdditionalPresentations))
	{
		this.m_selectedAdditionalPresentations = this.getAdditionalPresentationsByName(oFF.XCollectionUtils.map(this.m_selectedAdditionalPresentations, (p) => {
			return p.getName();
		}));
	}
	this.onPresentationsChanged();
};
oFF.FdPresentationsModel.prototype.updateFilterableState = function(filterableCheck, filterableCheckAdditionalPresentations)
{
	let hasChanges = false;
	for (let i = 0; i < this.m_presentations.size(); i++)
	{
		let presentation = this.m_presentations.get(i);
		hasChanges = this.updateFilterableStateForPresentation(presentation.getKeyPresentation(), filterableCheck, hasChanges);
		hasChanges = this.updateFilterableStateForPresentation(presentation.getTextPresentation(), filterableCheck, hasChanges);
	}
	for (let i = 0; i < this.m_additionalPresentations.size(); i++)
	{
		let additionalPresentation = this.m_additionalPresentations.get(i);
		hasChanges = this.updateFilterableStateForPresentation(additionalPresentation.getKeyPresentation(), filterableCheckAdditionalPresentations, hasChanges);
		hasChanges = this.updateFilterableStateForPresentation(additionalPresentation.getTextPresentation(), filterableCheckAdditionalPresentations, hasChanges);
	}
	if (hasChanges)
	{
		this.onPresentationsChanged();
	}
};
oFF.FdPresentationsModel.prototype.updateFilterableStateForPresentation = function(value, filterablePredicate, hasChangesState)
{
	if (oFF.notNull(value))
	{
		let isFilterable = filterablePredicate(value);
		if (value.isFilterable() !== isFilterable)
		{
			value.setIsFilterable(isFilterable);
			return true;
		}
	}
	return hasChangesState;
};

oFF.FdRangeModel = function() {};
oFF.FdRangeModel.prototype = new oFF.XObject();
oFF.FdRangeModel.prototype._ff_c = "FdRangeModel";

oFF.FdRangeModel.create = function()
{
	return new oFF.FdRangeModel();
};
oFF.FdRangeModel.prototype.m_availableDimContextValues = null;
oFF.FdRangeModel.prototype.m_availableMeasureContextValues = null;
oFF.FdRangeModel.prototype.m_dateRangeGranularities = null;
oFF.FdRangeModel.prototype.m_dateTimeProvider = null;
oFF.FdRangeModel.prototype.m_dimContext = null;
oFF.FdRangeModel.prototype.m_infoText = null;
oFF.FdRangeModel.prototype.m_inputValueType = null;
oFF.FdRangeModel.prototype.m_max = null;
oFF.FdRangeModel.prototype.m_measureContext = null;
oFF.FdRangeModel.prototype.m_min = null;
oFF.FdRangeModel.prototype.m_requiredDimContextValues = null;
oFF.FdRangeModel.prototype.m_supportedComparisonOperators = null;
oFF.FdRangeModel.prototype.m_supportsFixedAndDynamicDateRange = false;
oFF.FdRangeModel.prototype.getAvailableDimContextValues = function()
{
	if (oFF.notNull(this.m_availableDimContextValues))
	{
		return this.m_availableDimContextValues;
	}
	return oFF.XList.create();
};
oFF.FdRangeModel.prototype.getAvailableMeasureContextValues = function()
{
	if (oFF.notNull(this.m_availableMeasureContextValues))
	{
		return this.m_availableMeasureContextValues;
	}
	return oFF.XList.create();
};
oFF.FdRangeModel.prototype.getDateRangeGranularities = function()
{
	return this.m_dateRangeGranularities;
};
oFF.FdRangeModel.prototype.getDateTimeProvider = function()
{
	return this.m_dateTimeProvider;
};
oFF.FdRangeModel.prototype.getDimContext = function()
{
	if (oFF.isNull(this.m_dimContext))
	{
		this.m_dimContext = oFF.XList.create();
	}
	return this.m_dimContext;
};
oFF.FdRangeModel.prototype.getInfoText = function()
{
	return this.m_infoText;
};
oFF.FdRangeModel.prototype.getInputValueType = function()
{
	return this.m_inputValueType;
};
oFF.FdRangeModel.prototype.getLastDayInMonth = function(year, month)
{
	try
	{
		return oFF.XInteger.convertToString(oFF.XGregorianCalendar.create().getDaysInMonth(year, month));
	}
	catch (e)
	{
		return "01";
	}
};
oFF.FdRangeModel.prototype.getLastValidValue = function(items, valueType)
{
	for (let i = items.size() - 1; i >= 0; i--)
	{
		let value = this.getRangeValue(items.get(i), valueType, false);
		if (oFF.notNull(value))
		{
			return value;
		}
	}
	return null;
};
oFF.FdRangeModel.prototype.getMax = function()
{
	return this.m_max;
};
oFF.FdRangeModel.prototype.getMeasureContext = function()
{
	return this.m_measureContext;
};
oFF.FdRangeModel.prototype.getMin = function()
{
	return this.m_min;
};
oFF.FdRangeModel.prototype.getRangeValue = function(item, valueType, min)
{
	if (oFF.notNull(item) && !item.isNull() && item.getKey() !== null)
	{
		if (valueType.isDateBased() && (oFF.XString.isEqual(item.getKey(), "0000-00-00") || oFF.XString.isEqual(item.getKey(), "00000000")))
		{
			return null;
		}
		let valueAccess = oFF.XValueAccess.createWithType(valueType);
		let parseResult = valueAccess.parseString(item.getKey());
		if (parseResult.isValid())
		{
			return valueAccess.getValue();
		}
		if (valueType.isDateBased() && oFF.XCollectionUtils.hasElements(this.m_dateRangeGranularities))
		{
			let valueSize = oFF.XString.size(item.getKey());
			let granularity = this.m_dateRangeGranularities.get(this.m_dateRangeGranularities.size() - 1);
			if (granularity.isYear() && valueSize === 4)
			{
				if (oFF.XInteger.convertFromStringWithDefault(item.getKey(), -1) !== -1)
				{
					parseResult = valueAccess.parseString(oFF.XStringUtils.concatenate2(item.getKey(), min ? "0101" : "1231"));
				}
			}
			else if (granularity.isHalfYear() && valueSize === 5)
			{
				let yearHY = oFF.XString.substring(item.getKey(), 0, 4);
				let yearValueHY = oFF.XInteger.convertFromStringWithDefault(yearHY, -1);
				let halfYearValue = oFF.XInteger.convertFromStringWithDefault(oFF.XString.substring(item.getKey(), 4, 5), -1);
				if (yearValueHY !== -1 && (halfYearValue === 1 || halfYearValue === 2))
				{
					let monthValue = min ? oFF.DateRangeGranularityMapper.convertHalfYearToMonthLowerBound(halfYearValue) : oFF.DateRangeGranularityMapper.convertHalfYearToMonthUpperBound(halfYearValue);
					let month = oFF.XStringUtils.addNumberPadded(monthValue, 2);
					let day = min ? "01" : this.getLastDayInMonth(yearValueHY, monthValue);
					parseResult = valueAccess.parseString(oFF.XStringUtils.concatenate3(yearHY, month, day));
				}
			}
			else if (granularity.isQuarter() && valueSize === 5)
			{
				let year = oFF.XString.substring(item.getKey(), 0, 4);
				let yearValue = oFF.XInteger.convertFromStringWithDefault(year, -1);
				let quarterValue = oFF.XInteger.convertFromStringWithDefault(oFF.XString.substring(item.getKey(), 4, 5), -1);
				if (yearValue !== -1 && quarterValue >= 1 && quarterValue <= 4)
				{
					let monthValue = min ? oFF.DateRangeGranularityMapper.convertQuarterToMonthLowerBound(quarterValue) : oFF.DateRangeGranularityMapper.convertQuarterToMonthUpperBound(quarterValue);
					let month = oFF.XStringUtils.addNumberPadded(monthValue, 2);
					let day = min ? "01" : this.getLastDayInMonth(yearValue, monthValue);
					parseResult = valueAccess.parseString(oFF.XStringUtils.concatenate3(year, month, day));
				}
			}
			else if (granularity.isMonth() && valueSize === 6)
			{
				let yearVal = oFF.XInteger.convertFromStringWithDefault(oFF.XString.substring(item.getKey(), 0, 4), -1);
				let monthVal = oFF.XInteger.convertFromStringWithDefault(oFF.XString.substring(item.getKey(), 4, 6), -1);
				if (yearVal !== -1 && monthVal >= 1 && monthVal <= 12)
				{
					parseResult = valueAccess.parseString(oFF.XStringUtils.concatenate2(item.getKey(), min ? "01" : this.getLastDayInMonth(yearVal, monthVal)));
				}
			}
			if (parseResult.isValid())
			{
				return valueAccess.getValue();
			}
		}
	}
	return null;
};
oFF.FdRangeModel.prototype.getRequiredDimContextNames = function()
{
	if (oFF.notNull(this.m_requiredDimContextValues))
	{
		return this.m_requiredDimContextValues.getKeysAsReadOnlyList();
	}
	return oFF.XList.create();
};
oFF.FdRangeModel.prototype.getRequiredDimContextValues = function()
{
	if (oFF.notNull(this.m_requiredDimContextValues))
	{
		return this.m_requiredDimContextValues.getValuesAsReadOnlyList();
	}
	return oFF.XList.create();
};
oFF.FdRangeModel.prototype.getSupportedComparisonOperators = function()
{
	return this.m_supportedComparisonOperators;
};
oFF.FdRangeModel.prototype.isInputValueDateBased = function()
{
	return oFF.notNull(this.m_inputValueType) && this.m_inputValueType.isDateBased();
};
oFF.FdRangeModel.prototype.isInputValueTypeNumeric = function()
{
	return oFF.notNull(this.m_inputValueType) && this.m_inputValueType.isNumber();
};
oFF.FdRangeModel.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_supportedComparisonOperators = oFF.XObjectExt.release(this.m_supportedComparisonOperators);
	this.m_inputValueType = null;
	this.m_min = oFF.XObjectExt.release(this.m_min);
	this.m_max = oFF.XObjectExt.release(this.m_max);
	this.m_dateRangeGranularities = oFF.XObjectExt.release(this.m_dateRangeGranularities);
	this.m_dateTimeProvider = null;
	this.m_dimContext = oFF.XObjectExt.release(this.m_dimContext);
	this.m_requiredDimContextValues = oFF.XObjectExt.release(this.m_requiredDimContextValues);
	this.m_measureContext = null;
	this.m_availableDimContextValues = oFF.XObjectExt.release(this.m_availableDimContextValues);
	this.m_availableMeasureContextValues = oFF.XObjectExt.release(this.m_availableMeasureContextValues);
};
oFF.FdRangeModel.prototype.setAvailableDimContextValues = function(availableDimContextValues)
{
	this.m_availableDimContextValues = availableDimContextValues;
};
oFF.FdRangeModel.prototype.setAvailableMeasureContextValues = function(availableMeasureContextValues)
{
	this.m_availableMeasureContextValues = availableMeasureContextValues;
};
oFF.FdRangeModel.prototype.setDateRangeGranularities = function(dateRangeGranularities)
{
	this.m_dateRangeGranularities = dateRangeGranularities;
};
oFF.FdRangeModel.prototype.setDateTimeProvider = function(dateTimeProvider)
{
	this.m_dateTimeProvider = dateTimeProvider;
};
oFF.FdRangeModel.prototype.setDimContext = function(contextValues)
{
	this.m_dimContext = contextValues;
};
oFF.FdRangeModel.prototype.setInfoText = function(infoText)
{
	this.m_infoText = infoText;
};
oFF.FdRangeModel.prototype.setInputValueType = function(inputValueType)
{
	if (oFF.notNull(inputValueType))
	{
		this.m_inputValueType = inputValueType;
	}
};
oFF.FdRangeModel.prototype.setMeasureContext = function(measureContext)
{
	this.m_measureContext = measureContext;
};
oFF.FdRangeModel.prototype.setRange = function(items)
{
	this.m_min = null;
	this.m_max = null;
	if (oFF.XCollectionUtils.hasElements(items))
	{
		let valueType = this.m_inputValueType === oFF.XValueType.NUMC ? oFF.XValueType.STRING : this.m_inputValueType;
		if (oFF.notNull(valueType))
		{
			this.m_min = oFF.XStream.of(items).map((item) => {
				return this.getRangeValue(item, valueType, true);
			}).filterNullValues().findAny().orElse(null);
			this.m_max = this.getLastValidValue(items, valueType);
		}
	}
};
oFF.FdRangeModel.prototype.setRequiredDimContextValues = function(requiredDimContextValues)
{
	this.m_requiredDimContextValues = requiredDimContextValues;
};
oFF.FdRangeModel.prototype.setSupportedComparisonOperators = function(supportedComparisonOperators)
{
	this.m_supportedComparisonOperators = supportedComparisonOperators;
};
oFF.FdRangeModel.prototype.setSupportsFixedAndDynamicDateRange = function(supportsFixedAndDynamicDateRange)
{
	this.m_supportsFixedAndDynamicDateRange = supportsFixedAndDynamicDateRange;
};
oFF.FdRangeModel.prototype.supportsFixedAndDynamicDateRange = function()
{
	return this.m_supportsFixedAndDynamicDateRange;
};

oFF.FdSessionBasedSettings = function() {};
oFF.FdSessionBasedSettings.prototype = new oFF.XObject();
oFF.FdSessionBasedSettings.prototype._ff_c = "FdSessionBasedSettings";

oFF.FdSessionBasedSettings.s_additionalPresentations = null;
oFF.FdSessionBasedSettings.s_displayInfos = null;
oFF.FdSessionBasedSettings.s_hierarchies = null;
oFF.FdSessionBasedSettings.s_readModes = null;
oFF.FdSessionBasedSettings.createByContentType = function(contentType)
{
	let settings = new oFF.FdSessionBasedSettings();
	settings.setupSettings(contentType.getName());
	return settings;
};
oFF.FdSessionBasedSettings.createByQuery = function(queryManager, contentType, nameObject)
{
	let key = oFF.XStringBuffer.create();
	if (oFF.notNull(queryManager))
	{
		key.append(queryManager.getInstanceId()).append("-");
	}
	key.append(contentType.getName());
	if (oFF.notNull(nameObject))
	{
		key.append("-").append(nameObject.getName());
	}
	let settings = new oFF.FdSessionBasedSettings();
	settings.setupSettings(key.toString());
	return settings;
};
oFF.FdSessionBasedSettings.prototype.m_cacheKey = null;
oFF.FdSessionBasedSettings.prototype.getAdditionalPresentations = function()
{
	return oFF.FdSessionBasedSettings.s_additionalPresentations.getByKey(this.m_cacheKey);
};
oFF.FdSessionBasedSettings.prototype.getHierarchies = function()
{
	let hierarchies = oFF.FdSessionBasedSettings.s_hierarchies.getByKey(this.m_cacheKey);
	return oFF.notNull(hierarchies) ? hierarchies.getFirstObject().createMapByStringCopy() : null;
};
oFF.FdSessionBasedSettings.prototype.getHierarchiesDueDate = function()
{
	let hierarchies = oFF.FdSessionBasedSettings.s_hierarchies.getByKey(this.m_cacheKey);
	return oFF.notNull(hierarchies) ? hierarchies.getSecondObject() : null;
};
oFF.FdSessionBasedSettings.prototype.getMainPresentationDisplayInfo = function()
{
	return oFF.FdSessionBasedSettings.s_displayInfos.getByKey(this.m_cacheKey);
};
oFF.FdSessionBasedSettings.prototype.getReadMode = function()
{
	return oFF.FdSessionBasedSettings.s_readModes.getByKey(this.m_cacheKey);
};
oFF.FdSessionBasedSettings.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_cacheKey = null;
};
oFF.FdSessionBasedSettings.prototype.setHierarchies = function(hierarchies, dueDate)
{
	if (oFF.notNull(this.m_cacheKey))
	{
		if (oFF.isNull(hierarchies))
		{
			oFF.FdSessionBasedSettings.s_hierarchies.remove(this.m_cacheKey);
		}
		else
		{
			oFF.FdSessionBasedSettings.s_hierarchies.put(this.m_cacheKey, oFF.XPair.create(hierarchies.createMapByStringCopy(), dueDate));
		}
	}
};
oFF.FdSessionBasedSettings.prototype.setReadMode = function(readMode)
{
	if (oFF.notNull(this.m_cacheKey))
	{
		if (oFF.isNull(readMode))
		{
			oFF.FdSessionBasedSettings.s_readModes.remove(this.m_cacheKey);
		}
		else
		{
			oFF.FdSessionBasedSettings.s_readModes.put(this.m_cacheKey, readMode);
		}
	}
};
oFF.FdSessionBasedSettings.prototype.setSelectedPresentations = function(mainPresentation, additionalPresentations)
{
	if (oFF.notNull(this.m_cacheKey))
	{
		let displayInfo;
		if (mainPresentation.hasKeyPresentation() && mainPresentation.hasTextPresentation())
		{
			displayInfo = mainPresentation.isKeyPrimary() ? oFF.FilterDisplayInfo.ID_AND_DESCRIPTION : oFF.FilterDisplayInfo.DESCRIPTION_AND_ID;
		}
		else
		{
			displayInfo = mainPresentation.hasKeyPresentation() ? oFF.FilterDisplayInfo.ID : oFF.FilterDisplayInfo.DESCRIPTION;
		}
		oFF.FdSessionBasedSettings.s_displayInfos.put(this.m_cacheKey, displayInfo);
		oFF.FdSessionBasedSettings.s_additionalPresentations.remove(this.m_cacheKey);
		if (oFF.XCollectionUtils.hasElements(additionalPresentations))
		{
			oFF.FdSessionBasedSettings.s_additionalPresentations.put(this.m_cacheKey, oFF.XCollectionUtils.map(additionalPresentations, (p) => {
				return p.getName();
			}));
		}
	}
};
oFF.FdSessionBasedSettings.prototype.setupSettings = function(cacheKey)
{
	this.m_cacheKey = cacheKey;
	if (oFF.isNull(oFF.FdSessionBasedSettings.s_readModes))
	{
		oFF.FdSessionBasedSettings.s_readModes = oFF.XHashMapByString.create();
		oFF.FdSessionBasedSettings.s_displayInfos = oFF.XHashMapByString.create();
		oFF.FdSessionBasedSettings.s_additionalPresentations = oFF.XHashMapByString.create();
		oFF.FdSessionBasedSettings.s_hierarchies = oFF.XHashMapByString.create();
	}
};

oFF.FdContentProviderFactory = {

	createContentProvider:function(model, process)
	{
			let config = model.getConfig();
		if (config.getContentType() === oFF.FilterDialogContentType.DIMENSION)
		{
			let dimension = config.getDimension();
			oFF.XObjectExt.assertNotNullExt(dimension, "Dimension must be set");
			return oFF.FdContentProviderValueHelpDimension.create(model);
		}
		else if (config.getContentType() === oFF.FilterDialogContentType.VARIABLE)
		{
			let variable = config.getVariable();
			oFF.XObjectExt.assertNotNullExt(variable, "Variable must be set");
			return oFF.FdContentProviderValueHelpVariable.create(model);
		}
		else if (config.getContentType() === oFF.FilterDialogContentType.HIERARCHY_CATALOG)
		{
			oFF.XObjectExt.assertNotNullExt(config.getDimension(), "Dimension must be set");
			return oFF.FdContentProviderHierarchyCatalog.create(model);
		}
		else if (config.getContentType() === oFF.FilterDialogContentType.MEASURE_BASED_FILTER)
		{
			let mbf = config.getMeasureBasedFilter();
			oFF.XObjectExt.assertNotNullExt(mbf, "Measure based filter must be set");
			oFF.XObjectExt.assertTrue(mbf.getFormula() !== null || config.getMeasureBasedFilterMember() !== null);
			return oFF.FdContentProviderMeasureBasedFilter.create(mbf, config.getMeasureBasedFilterMember(), model);
		}
		else if (config.getContentType() === oFF.FilterDialogContentType.USER_TEAM)
		{
			return oFF.FdContentProviderUserTeam.create(model, process);
		}
		throw oFF.XException.createIllegalStateException("Invalid filter dialog configuration");
	}
};

oFF.FdContentProviderMeasureBasedFilter = function() {};
oFF.FdContentProviderMeasureBasedFilter.prototype = new oFF.XObject();
oFF.FdContentProviderMeasureBasedFilter.prototype._ff_c = "FdContentProviderMeasureBasedFilter";

oFF.FdContentProviderMeasureBasedFilter.create = function(measureBasedFilter, member, model)
{
	let contentProvider = new oFF.FdContentProviderMeasureBasedFilter();
	contentProvider.setupContentProvider(measureBasedFilter, member, model);
	return contentProvider;
};
oFF.FdContentProviderMeasureBasedFilter.prototype.m_measureBasedFilter = null;
oFF.FdContentProviderMeasureBasedFilter.prototype.m_memberName = null;
oFF.FdContentProviderMeasureBasedFilter.prototype.m_model = null;
oFF.FdContentProviderMeasureBasedFilter.prototype.getDimensionText = function(dimension)
{
	let text = dimension.getText();
	return oFF.XStringUtils.isNotNullAndNotEmpty(text) ? text : dimension.getName();
};
oFF.FdContentProviderMeasureBasedFilter.prototype.getRequiredDimensions = function()
{
	return oFF.XStream.of(this.m_measureBasedFilter.getQueryModel().getDimensions()).filter((dim) => {
		return !oFF.QDimensionUtil.isStructureLike(dim) && !dim.canBeAggregated() && !dim.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION);
	});
};
oFF.FdContentProviderMeasureBasedFilter.prototype.getSupportedComparisonOperators = function()
{
	return oFF.FdComparisonOperator.getAllOperators(false, this.m_model.isFeatureEnabled(oFF.FdFeature.EQUAL_IN_RANGE_VIEW), false, false);
};
oFF.FdContentProviderMeasureBasedFilter.prototype.isDimensionSelectable = function(dim, dimContext, requiredDimensions)
{
	if (dimContext.contains(dim.getName()) && !requiredDimensions.contains(dim.getName()))
	{
		return true;
	}
	return !oFF.QDimensionUtil.isStructureLike(dim) && dim.canBeAggregated() && oFF.QDimensionUtil.shouldDimensionBeShownForRowsOrColumns(dim, true) && dim.getFlatKeyField().isFilterable() && dim.getSupportedAxesTypes().contains(oFF.AxisType.ROWS);
};
oFF.FdContentProviderMeasureBasedFilter.prototype.loadSuggestions = function(text, listener) {};
oFF.FdContentProviderMeasureBasedFilter.prototype.needsMeasureSelection = function(queryModel)
{
	let measureDim = queryModel.getMeasureDimension();
	if (measureDim.getStructureMember(this.m_memberName) !== null)
	{
		return false;
	}
	let accountDim = queryModel.getAccountDimension();
	return queryModel.isUniversalAccountModel() || oFF.notNull(accountDim) && accountDim.getDimensionMember(this.m_memberName) !== null && measureDim.getAllStructureMembers().size() > 1;
};
oFF.FdContentProviderMeasureBasedFilter.prototype.processData = function(startPage, endPage, presentations, listener, customIdentifier) {};
oFF.FdContentProviderMeasureBasedFilter.prototype.processDataRange = function(listener, customIdentifier) {};
oFF.FdContentProviderMeasureBasedFilter.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_measureBasedFilter = null;
	this.m_memberName = null;
	this.m_model = null;
};
oFF.FdContentProviderMeasureBasedFilter.prototype.search = function(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier) {};
oFF.FdContentProviderMeasureBasedFilter.prototype.setupContentProvider = function(measureBasedFilter, member, model)
{
	this.m_measureBasedFilter = measureBasedFilter;
	this.m_memberName = oFF.XStringUtils.isNotNullAndNotEmpty(member) ? member : oFF.FilterDialogMBFUtils.getMemberName(measureBasedFilter);
	this.setupModel(model);
};
oFF.FdContentProviderMeasureBasedFilter.prototype.setupModel = function(model)
{
	this.m_model = model;
	let rangeModel = model.getRangeModel();
	let queryModel = this.m_measureBasedFilter.getQueryModel();
	model.changeSelection(oFF.FdItemFactory.asFdItemList(oFF.FilterDialogMBFUtils.getFilterRangesByMemberName(this.m_measureBasedFilter, this.m_memberName)), model.getSelectedItems());
	model.setViewTypes(oFF.XCollectionUtils.singletonList(oFF.FilterDialogViewType.MEASURE_BASED_FILTER));
	let dimensions = queryModel.getDimensions();
	let requiredDimensionsMap = this.getRequiredDimensions().collect(oFF.XStreamCollectorImpl.create(() => {
		return oFF.XLinkedHashMapByString.create();
	}, (map, dim) => {
		map.put(dim.getName(), this.getDimensionText(dim));
		return map;
	}));
	let requiredDimensions = requiredDimensionsMap.getKeysAsReadOnlyList();
	let dimContext = this.m_measureBasedFilter.getDimensionContext().createListCopy();
	let selectableDimensions = oFF.XStream.of(dimensions).filter((dim) => {
		return this.isDimensionSelectable(dim, dimContext, requiredDimensions);
	}).sorted(oFF.FdDimensionsByTextComparator.create()).collect(oFF.XStreamCollectorImpl.create(() => {
		return oFF.XList.create();
	}, (dimList, dim4) => {
		dimList.add(oFF.XNameValuePair.create(dim4.getName(), this.getDimensionText(dim4)));
		return dimList;
	}));
	if (dimContext.isEmpty() && selectableDimensions.hasElements())
	{
		let selectableDimensionNames = oFF.XCollectionUtils.map(selectableDimensions, (selectableDimension) => {
			return selectableDimension.getName();
		});
		dimContext.addAll(oFF.XCollectionUtils.filter(queryModel.getRowsAxis().getDimensionNames(), (dimName) => {
			return selectableDimensionNames.contains(dimName);
		}));
		if (dimContext.isEmpty() && !oFF.XCollectionUtils.hasElements(requiredDimensions))
		{
			dimContext.add(selectableDimensions.get(0).getName());
		}
	}
	rangeModel.setRequiredDimContextValues(requiredDimensionsMap);
	rangeModel.setAvailableDimContextValues(selectableDimensions);
	rangeModel.setDimContext(dimContext);
	if (this.needsMeasureSelection(queryModel))
	{
		let measureMembers = queryModel.getMeasureDimension().getAllStructureMembers();
		if (oFF.XCollectionUtils.hasElements(measureMembers))
		{
			rangeModel.setAvailableMeasureContextValues(oFF.XStream.of(measureMembers).collect(oFF.XStreamCollectorImpl.create(() => {
				return oFF.XList.create();
			}, (measureList, measureMember) => {
				measureList.add(oFF.XNameValuePair.create(measureMember.getName(), measureMember.getText()));
				return measureList;
			})));
			rangeModel.setMeasureContext(this.m_measureBasedFilter.getCrossCalculationMeasure() !== null ? this.m_measureBasedFilter.getCrossCalculationMeasure() : measureMembers.get(0).getName());
		}
	}
	rangeModel.setInputValueType(oFF.XValueType.DECIMAL_FLOAT);
	rangeModel.setSupportedComparisonOperators(this.getSupportedComparisonOperators());
};
oFF.FdContentProviderMeasureBasedFilter.prototype.syncSelectionListWithKnownItems = function(selectionList, knownItems, presentations, removeUnknownValues, populateErrors, listener, customIdentifier) {};

oFF.FdDimensionsByTextComparator = function() {};
oFF.FdDimensionsByTextComparator.prototype = new oFF.XObject();
oFF.FdDimensionsByTextComparator.prototype._ff_c = "FdDimensionsByTextComparator";

oFF.FdDimensionsByTextComparator.create = function()
{
	return new oFF.FdDimensionsByTextComparator();
};
oFF.FdDimensionsByTextComparator.prototype.compare = function(o1, o2)
{
	let text1 = o1.getText();
	if (oFF.XStringUtils.isNullOrEmpty(text1))
	{
		text1 = o1.getName();
	}
	let text2 = o2.getText();
	if (oFF.XStringUtils.isNullOrEmpty(text2))
	{
		text2 = o2.getName();
	}
	return oFF.XString.compare(text1, text2);
};

oFF.FdViewCustomIdentifier = function() {};
oFF.FdViewCustomIdentifier.prototype = new oFF.XObject();
oFF.FdViewCustomIdentifier.prototype._ff_c = "FdViewCustomIdentifier";

oFF.FdViewCustomIdentifier.creatForFetchChildrenByItem = function(parentItem)
{
	let identifier = new oFF.FdViewCustomIdentifier();
	identifier.m_isFetchChildrenIdentifier = true;
	identifier.m_parentItem = parentItem;
	return identifier;
};
oFF.FdViewCustomIdentifier.creatForFetchChildrenByRow = function(parentRow)
{
	let identifier = new oFF.FdViewCustomIdentifier();
	identifier.m_isFetchChildrenIdentifier = true;
	identifier.m_parentRow = parentRow;
	return identifier;
};
oFF.FdViewCustomIdentifier.creatForSearch = function(searchValue)
{
	let identifier = new oFF.FdViewCustomIdentifier();
	identifier.m_isSearchIdentifier = true;
	identifier.m_searchValue = searchValue;
	return identifier;
};
oFF.FdViewCustomIdentifier.prototype.m_isFetchChildrenIdentifier = false;
oFF.FdViewCustomIdentifier.prototype.m_isSearchIdentifier = false;
oFF.FdViewCustomIdentifier.prototype.m_parentItem = null;
oFF.FdViewCustomIdentifier.prototype.m_parentRow = null;
oFF.FdViewCustomIdentifier.prototype.m_searchValue = null;
oFF.FdViewCustomIdentifier.prototype.getParentItem = function()
{
	return this.m_parentItem;
};
oFF.FdViewCustomIdentifier.prototype.getParentRow = function()
{
	return this.m_parentRow;
};
oFF.FdViewCustomIdentifier.prototype.getSearchValue = function()
{
	return this.m_searchValue;
};
oFF.FdViewCustomIdentifier.prototype.isFetchChildrenIdentifier = function()
{
	return this.m_isFetchChildrenIdentifier;
};
oFF.FdViewCustomIdentifier.prototype.isSearchIdentifier = function()
{
	return this.m_isSearchIdentifier;
};
oFF.FdViewCustomIdentifier.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_searchValue = null;
	this.m_parentRow = null;
	this.m_parentItem = null;
};

oFF.FdUiTable = function() {};
oFF.FdUiTable.prototype = new oFF.XObject();
oFF.FdUiTable.prototype._ff_c = "FdUiTable";

oFF.FdUiTable.createFdTable = function(layout, type)
{
	let table = new oFF.FdUiTable();
	table.m_layout = layout;
	table.m_tableType = type;
	table.m_table = layout.getTable();
	return table;
};
oFF.FdUiTable.createResponsiveTable = function(layout)
{
	return oFF.FdUiTable.createFdTable(layout, oFF.UiType.RESPONSIVE_TABLE);
};
oFF.FdUiTable.createTreeTable = function(layout)
{
	return oFF.FdUiTable.createFdTable(layout, oFF.UiType.TREE_TABLE);
};
oFF.FdUiTable.prototype.m_layout = null;
oFF.FdUiTable.prototype.m_table = null;
oFF.FdUiTable.prototype.m_tableType = null;
oFF.FdUiTable.prototype.addAllCells = function(tableRow, cellList)
{
	if (this.isResponsiveTable())
	{
		tableRow.addAllResponsiveTableCells(oFF.XCollectionUtils.map(cellList, (cell1) => {
			return cell1.getResponsiveTableCell();
		}));
	}
	else
	{
		tableRow.addAllCells(oFF.XCollectionUtils.map(cellList, (cell2) => {
			return cell2.getTableCell();
		}));
	}
};
oFF.FdUiTable.prototype.addAllRows = function(rows)
{
	if (this.isResponsiveTable())
	{
		this.m_table.addAllResponsiveTableRows(oFF.XCollectionUtils.map(rows, (responsiveTableRow) => {
			return responsiveTableRow;
		}));
	}
	else
	{
		this.m_table.addAllTreeTableRows(oFF.XCollectionUtils.map(rows, (treeTableRow) => {
			return treeTableRow;
		}));
	}
};
oFF.FdUiTable.prototype.addNewColumn = function()
{
	if (this.isResponsiveTable())
	{
		return oFF.FdUiTableColumn.createResponsiveColumn(this.m_table.addNewResponsiveTableColumn());
	}
	return oFF.FdUiTableColumn.createColumn(this.m_table.addNewColumn());
};
oFF.FdUiTable.prototype.addNewRow = function()
{
	if (this.isResponsiveTable())
	{
		return this.m_table.addNewResponsiveTableRow();
	}
	return this.m_table.addNewTreeTableRow();
};
oFF.FdUiTable.prototype.clearCells = function(tableRow)
{
	if (this.isResponsiveTable())
	{
		tableRow.clearResponsiveTableCells();
	}
	else
	{
		tableRow.clearCells();
	}
};
oFF.FdUiTable.prototype.clearRows = function()
{
	if (this.isResponsiveTable())
	{
		this.m_table.clearResponsiveTableRows();
	}
	else
	{
		this.m_table.clearTreeTableRows();
	}
};
oFF.FdUiTable.prototype.clearSelectedItems = function()
{
	this.m_table.clearSelectedItems();
};
oFF.FdUiTable.prototype.getAllTreeTableRows = function(row, controlList, includeHiddenRows)
{
	let topLevelItems = row.getTreeTableRows();
	oFF.XCollectionUtils.addAll(controlList, topLevelItems);
	oFF.XCollectionUtils.forEach(topLevelItems, (topLevelItem) => {
		if (includeHiddenRows || topLevelItem.isExpanded())
		{
			this.getAllTreeTableRows(topLevelItem, controlList, includeHiddenRows);
		}
	});
	return controlList;
};
oFF.FdUiTable.prototype.getColumn = function(index)
{
	if (this.isResponsiveTable())
	{
		return oFF.FdUiTableColumn.createResponsiveColumn(this.m_table.getResponsiveTableColumn(index));
	}
	return oFF.FdUiTableColumn.createColumn(this.m_table.getColumn(index));
};
oFF.FdUiTable.prototype.getColumns = function()
{
	if (this.isResponsiveTable())
	{
		return oFF.XCollectionUtils.map(this.m_table.getResponsiveTableColumns(), (context) => {
			return oFF.FdUiTableColumn.createResponsiveColumn(context);
		});
	}
	return oFF.XCollectionUtils.map(this.m_table.getColumns(), (context) => {
		return oFF.FdUiTableColumn.createColumn(context);
	});
};
oFF.FdUiTable.prototype.getCustomObject = function()
{
	return this.m_table.getCustomObject();
};
oFF.FdUiTable.prototype.getFirstVisibleRow = function()
{
	return this.m_table.getFirstVisibleRow();
};
oFF.FdUiTable.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdUiTable.prototype.getNumberOfColumns = function()
{
	if (this.isResponsiveTable())
	{
		return this.m_table.getNumberOfResponsiveTableColumns();
	}
	return this.m_table.getNumberOfColumns();
};
oFF.FdUiTable.prototype.getRows = function()
{
	if (this.isResponsiveTable())
	{
		return oFF.XCollectionUtils.map(this.m_table.getResponsiveTableRows(), (context2) => {
			return context2;
		});
	}
	return this.getAllTreeTableRows(this.m_table, oFF.XList.create(), true);
};
oFF.FdUiTable.prototype.getSelectedItems = function()
{
	return oFF.XCollectionUtils.map(this.m_table.getSelectedItems(), (row) => {
		return row;
	});
};
oFF.FdUiTable.prototype.getTableControl = function()
{
	return this.m_table;
};
oFF.FdUiTable.prototype.getTableSelectionMode = function()
{
	if (this.isResponsiveTable())
	{
		return this.m_table.getSelectionMode().isSingleSelect() ? oFF.UiTableSelectionMode.SINGLE : oFF.UiTableSelectionMode.MULTI_TOGGLE;
	}
	return this.m_table.getTableSelectionMode();
};
oFF.FdUiTable.prototype.getVisibleRows = function()
{
	if (this.isTreeTable())
	{
		return this.getAllTreeTableRows(this.m_table, oFF.XList.create(), false);
	}
	return this.getRows();
};
oFF.FdUiTable.prototype.hasColumns = function()
{
	if (this.isResponsiveTable())
	{
		return this.m_table.hasResponsiveTableColumns();
	}
	return this.m_table.hasColumns();
};
oFF.FdUiTable.prototype.isBusy = function()
{
	return this.m_table.isBusy();
};
oFF.FdUiTable.prototype.isResponsiveTable = function()
{
	return this.m_tableType === oFF.UiType.RESPONSIVE_TABLE;
};
oFF.FdUiTable.prototype.isTreeTable = function()
{
	return this.m_tableType === oFF.UiType.TREE_TABLE;
};
oFF.FdUiTable.prototype.newCell = function(tableRow, type)
{
	if (this.isResponsiveTable())
	{
		return oFF.FdUiTableCell.createResponsiveCell(tableRow, oFF.notNull(type) ? type : oFF.UiType.LABEL);
	}
	return oFF.FdUiTableCell.createCell(tableRow);
};
oFF.FdUiTable.prototype.newRow = function()
{
	if (this.isResponsiveTable())
	{
		return this.m_table.newResponsiveTableRow();
	}
	return this.m_table.newTreeTableRow();
};
oFF.FdUiTable.prototype.registerOnCollapse = function(listener)
{
	this.m_table.registerOnCollapse(listener);
};
oFF.FdUiTable.prototype.registerOnExpand = function(listener)
{
	this.m_table.registerOnExpand(listener);
};
oFF.FdUiTable.prototype.registerOnScroll = function(listener)
{
	this.m_table.registerOnScroll(listener);
};
oFF.FdUiTable.prototype.registerOnScrollLoad = function(listener)
{
	if (this.isResponsiveTable())
	{
		this.m_table.registerOnScrollLoad(listener);
	}
};
oFF.FdUiTable.prototype.registerOnSelectionChange = function(listener)
{
	this.m_table.registerOnSelectionChange(listener);
};
oFF.FdUiTable.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
	this.m_table = null;
	this.m_tableType = null;
};
oFF.FdUiTable.prototype.removeColumn = function(column)
{
	let col = column.getUiColumn();
	if (this.isResponsiveTable())
	{
		this.m_table.removeResponsiveTableColumn(col);
	}
	else
	{
		this.m_table.removeColumn(col);
	}
};
oFF.FdUiTable.prototype.removeRow = function(row)
{
	if (this.isResponsiveTable())
	{
		this.m_table.removeResponsiveTableRow(row);
	}
	else
	{
		this.m_table.removeTreeTableRow(row);
	}
};
oFF.FdUiTable.prototype.setBusy = function(busy)
{
	return this.m_table.setBusy(busy);
};
oFF.FdUiTable.prototype.setCustomObject = function(customObject)
{
	return this.m_table.setCustomObject(customObject);
};
oFF.FdUiTable.prototype.setFirstVisibleRow = function(firstVisibleRow)
{
	return this.m_table.setFirstVisibleRow(firstVisibleRow);
};
oFF.FdUiTable.prototype.setListItemType = function(row, listItemType)
{
	if (this.isResponsiveTable())
	{
		row.setListItemType(listItemType);
	}
};
oFF.FdUiTable.prototype.setTableSelectionMode = function(tableSelectionMode, requiresSelectionControl)
{
	if (this.isResponsiveTable())
	{
		if (tableSelectionMode === oFF.UiTableSelectionMode.SINGLE)
		{
			if (requiresSelectionControl)
			{
				this.m_table.setSelectionMode(oFF.UiSelectionMode.SINGLE_SELECT_LEFT);
			}
			else
			{
				this.m_table.setSelectionMode(oFF.UiSelectionMode.SINGLE_SELECT_MASTER);
			}
		}
		else
		{
			this.m_table.setSelectionMode(oFF.UiSelectionMode.MULTI_SELECT);
		}
	}
	else
	{
		this.m_table.setTableSelectionMode(tableSelectionMode);
	}
};

oFF.FdUiTableCell = function() {};
oFF.FdUiTableCell.prototype = new oFF.XObject();
oFF.FdUiTableCell.prototype._ff_c = "FdUiTableCell";

oFF.FdUiTableCell.createCell = function(row)
{
	let newCell = new oFF.FdUiTableCell();
	newCell.setupCell(row);
	return newCell;
};
oFF.FdUiTableCell.createResponsiveCell = function(responsiveRow, type)
{
	let newResponsiveCell = new oFF.FdUiTableCell();
	newResponsiveCell.setupResponsiveCell(responsiveRow, type);
	return newResponsiveCell;
};
oFF.FdUiTableCell.prototype.m_cellControl = null;
oFF.FdUiTableCell.prototype.m_responsiveCellControl = null;
oFF.FdUiTableCell.prototype.getCustomObject = function()
{
	if (this.isResponsive())
	{
		return this.m_responsiveCellControl.getCustomObject();
	}
	return this.m_cellControl.getCustomObject();
};
oFF.FdUiTableCell.prototype.getResponsiveTableCell = function()
{
	return this.m_responsiveCellControl;
};
oFF.FdUiTableCell.prototype.getTableCell = function()
{
	return this.m_cellControl;
};
oFF.FdUiTableCell.prototype.getText = function()
{
	if (this.isResponsive())
	{
		return this.m_responsiveCellControl.getText();
	}
	return this.m_cellControl.getText();
};
oFF.FdUiTableCell.prototype.getTooltip = function()
{
	if (this.isResponsive())
	{
		return this.m_responsiveCellControl.getTooltip();
	}
	return this.m_cellControl.getTooltip();
};
oFF.FdUiTableCell.prototype.isResponsive = function()
{
	return oFF.notNull(this.m_responsiveCellControl);
};
oFF.FdUiTableCell.prototype.releaseObject = function()
{
	this.m_cellControl = oFF.XObjectExt.release(this.m_cellControl);
	this.m_responsiveCellControl = oFF.XObjectExt.release(this.m_responsiveCellControl);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdUiTableCell.prototype.setCustomObject = function(customObject)
{
	if (this.isResponsive())
	{
		this.m_responsiveCellControl.setCustomObject(customObject);
	}
	else
	{
		this.m_cellControl.setCustomObject(customObject);
	}
};
oFF.FdUiTableCell.prototype.setText = function(text)
{
	if (this.isResponsive())
	{
		this.m_responsiveCellControl.setText(text);
	}
	else
	{
		this.m_cellControl.setText(text);
	}
};
oFF.FdUiTableCell.prototype.setTooltip = function(tooltip)
{
	if (this.isResponsive())
	{
		this.m_responsiveCellControl.setTooltip(tooltip);
	}
	else
	{
		this.m_cellControl.setTooltip(tooltip);
	}
};
oFF.FdUiTableCell.prototype.setupCell = function(row)
{
	this.m_cellControl = row.newCell();
};
oFF.FdUiTableCell.prototype.setupResponsiveCell = function(responsiveRow, type)
{
	this.m_responsiveCellControl = responsiveRow.newResponsiveTableCellOfType(type);
};

oFF.FdUiTableColumn = function() {};
oFF.FdUiTableColumn.prototype = new oFF.XObject();
oFF.FdUiTableColumn.prototype._ff_c = "FdUiTableColumn";

oFF.FdUiTableColumn.createColumn = function(tableColumn)
{
	if (oFF.notNull(tableColumn))
	{
		let newColumn = new oFF.FdUiTableColumn();
		newColumn.m_tableColumn = tableColumn;
		return newColumn;
	}
	return null;
};
oFF.FdUiTableColumn.createResponsiveColumn = function(responsiveTableColumn)
{
	if (oFF.notNull(responsiveTableColumn))
	{
		let newResponsiveColumn = new oFF.FdUiTableColumn();
		newResponsiveColumn.m_responsiveTableColumn = responsiveTableColumn;
		return newResponsiveColumn;
	}
	return null;
};
oFF.FdUiTableColumn.prototype.m_responsiveTableColumn = null;
oFF.FdUiTableColumn.prototype.m_tableColumn = null;
oFF.FdUiTableColumn.prototype.getTitle = function()
{
	if (oFF.notNull(this.m_responsiveTableColumn))
	{
		let columnLabel = this.m_responsiveTableColumn.getHeader();
		return oFF.notNull(columnLabel) ? columnLabel.getText() : null;
	}
	else if (oFF.notNull(this.m_tableColumn))
	{
		return this.m_tableColumn.getTitle();
	}
	return null;
};
oFF.FdUiTableColumn.prototype.getUiColumn = function()
{
	if (oFF.notNull(this.m_responsiveTableColumn))
	{
		return this.m_responsiveTableColumn;
	}
	return this.m_tableColumn;
};
oFF.FdUiTableColumn.prototype.releaseObject = function()
{
	this.m_tableColumn = oFF.XObjectExt.release(this.m_tableColumn);
	this.m_responsiveTableColumn = oFF.XObjectExt.release(this.m_responsiveTableColumn);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdUiTableColumn.prototype.setTitle = function(title)
{
	if (oFF.notNull(this.m_responsiveTableColumn))
	{
		let columnLabel = this.m_responsiveTableColumn.getHeader();
		if (oFF.isNull(columnLabel))
		{
			columnLabel = this.m_responsiveTableColumn.setNewHeader(oFF.UiType.LABEL);
		}
		columnLabel.setText(title);
	}
	else if (oFF.notNull(this.m_tableColumn))
	{
		this.m_tableColumn.setTitle(title);
	}
};

oFF.FdLayoutUtils = {

	DROPDOWN_WIDTH:"180px",
	addClearSelectionButton:function(parent, name)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		let clearSelectionButton = parent.addNewItemOfType(oFF.UiType.BUTTON);
		clearSelectionButton.setName(name);
		clearSelectionButton.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_CLEAR_SELECTION));
		clearSelectionButton.setTooltip(localization.getText(oFF.FilterDialogI18n.I18N_FD_CLEAR_SELECTION));
		clearSelectionButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
		return clearSelectionButton;
	},
	addClipboardButton:function(genesis, parent, name)
	{
			let localization = oFF.XLocalizationCenter.getCenter();
		let clipboardBtn = parent.addNewItemOfType(oFF.UiType.BUTTON);
		clipboardBtn.setIcon("paste");
		clipboardBtn.setTooltip(localization.getText(oFF.ClipboardDialogI18n.I18N_CB_CLIPBOARD));
		clipboardBtn.setName(name);
		clipboardBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
		parent.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(clipboardBtn, genesis, localization.getText(oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS)));
		return clipboardBtn;
	},
	addDropdownItem:function(dropdown, name, text, customObject)
	{
			let dropdownItem = dropdown.addNewItem();
		dropdownItem.setName(name);
		dropdownItem.setText(text);
		dropdownItem.setCustomObject(customObject);
		return dropdownItem;
	},
	addInteractiveSplitterForSelectionContainer:function(parent, resizeListener, contentLeft, selectionContainerLayout)
	{
			let splitter = parent.addNewItemOfType(oFF.UiType.INTERACTIVE_SPLITTER);
		splitter.setName("FilterDialogViewSplitter");
		splitter.setEnableReordering(false);
		let splitterItemLeft = splitter.addNewItem();
		splitterItemLeft.setMinWidth(oFF.UiCssLength.create("320px"));
		splitterItemLeft.registerOnResize(oFF.UiLambdaResizeListener.create((event) => {
			resizeListener.onResize(event.getOffsetWidth(), -1);
		}));
		splitterItemLeft.setContent(contentLeft);
		let splitterItemRight = splitter.addNewItem();
		splitterItemRight.setWidth(oFF.UiCssLength.create("260px"));
		splitterItemRight.setMinWidth(oFF.UiCssLength.create("200px"));
		splitterItemRight.setContent(selectionContainerLayout.getRoot());
		return splitter;
	},
	addSelectedMembersToggleButton:function(parent, name)
	{
			let button = parent.addNewItemOfType(oFF.UiType.TOGGLE_BUTTON);
		button.setName(name);
		button.setIcon("multiselect-all");
		button.setButtonType(oFF.UiButtonType.TRANSPARENT);
		button.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_SHOW_ONLY_SELECTED_MEMBERS));
		return button;
	},
	announceErrorMessage:function(text)
	{
			oFF.UiFramework.currentFramework().announce(text, oFF.UiAriaLiveMode.ASSERTIVE);
	},
	announceSelectedMemberRemoved:function(memberText)
	{
			oFF.UiFramework.currentFramework().announce(oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS_REMOVE_ANNOUNCEMENT, memberText), oFF.UiAriaLiveMode.POLITE);
	},
	announceSelectionCleared:function()
	{
			oFF.UiFramework.currentFramework().announce(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS_CLEARED_ANNOUNCEMENT), oFF.UiAriaLiveMode.POLITE);
	},
	createErrorLabel:function(genesis, name)
	{
			let errorLabel = genesis.newControl(oFF.UiType.LABEL);
		errorLabel.setMinHeight(oFF.UiCssLength.create("1.475rem"));
		errorLabel.setName(name);
		return errorLabel;
	},
	createHiddenLabelFor:function(control, genesis, text)
	{
			let size = oFF.UiCssLength.create("0");
		return genesis.newControl(oFF.UiType.LABEL).setWidth(size).setHeight(size).setText(text).setLabelFor(control);
	},
	createHr:function(genesis)
	{
			let separator = genesis.newControl(oFF.UiType.SEPARATOR);
		separator.setWidth(oFF.UiCssLength.create("calc(100% + 2rem)"));
		separator.setMargin(oFF.UiCssBoxEdges.create("1rem 0 1rem -1rem"));
		separator.setHeight(oFF.UiCssLength.create("0.0625rem"));
		return separator;
	},
	isMultiView:function(model)
	{
			return model.getViewTypes().size() > 1;
	},
	isSelectionContainerVisible:function(dialogSize)
	{
			return !dialogSize.isMobile() && !dialogSize.isSmall();
	},
	isShowSelectionContainer:function(genesis, model)
	{
			return !genesis.getUiManager().getDeviceInfo().isMobile() && (model.getSelectionMode() === oFF.UiTableSelectionMode.MULTI_TOGGLE || model.getConfig().isAlwaysShowSelectionContainer());
	},
	updateErrorLabel:function(label, text, isError)
	{
			label.setText(text);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
		{
			label.addCssClass("sapMValueStateMessage");
			label.addCssClass(isError ? "sapMValueStateMessageError" : "sapMValueStateMessageWarning");
			label.removeCssClass(!isError ? "sapMValueStateMessageError" : "sapMValueStateMessageWarning");
		}
		else
		{
			label.removeCssClass("sapMValueStateMessage");
			label.removeCssClass("sapMValueStateMessageError");
			label.removeCssClass("sapMValueStateMessageWarning");
		}
	}
};

oFF.FdPresentation = function() {};
oFF.FdPresentation.prototype = new oFF.XObject();
oFF.FdPresentation.prototype._ff_c = "FdPresentation";

oFF.FdPresentation.create = function(name)
{
	return oFF.FdPresentation.createExt(name, name);
};
oFF.FdPresentation.createExt = function(name, technicalName)
{
	let fdPresentation = new oFF.FdPresentation();
	fdPresentation.m_name = name;
	fdPresentation.m_technicalName = technicalName;
	fdPresentation.m_isKeyPrimary = true;
	return fdPresentation;
};
oFF.FdPresentation.createMainPresentation = function(name)
{
	let fdPresentation = oFF.FdPresentation.createExt(name, name);
	fdPresentation.m_isMainPresentation = true;
	return fdPresentation;
};
oFF.FdPresentation.prototype.m_isKeyPrimary = false;
oFF.FdPresentation.prototype.m_isMainPresentation = false;
oFF.FdPresentation.prototype.m_keyPresentation = null;
oFF.FdPresentation.prototype.m_name = null;
oFF.FdPresentation.prototype.m_technicalName = null;
oFF.FdPresentation.prototype.m_textPresentation = null;
oFF.FdPresentation.prototype.addKeyPresentation = function(name, customObject, isFilterable)
{
	this.m_keyPresentation = oFF.FdPresentationValue.create(name, customObject, true, isFilterable, this);
	return this;
};
oFF.FdPresentation.prototype.addTextPresentation = function(name, customObject, isFilterable)
{
	this.m_textPresentation = oFF.FdPresentationValue.create(name, customObject, false, isFilterable, this);
	return this;
};
oFF.FdPresentation.prototype.getFilterableValues = function()
{
	let values = oFF.XList.create();
	if (oFF.notNull(this.m_keyPresentation) && this.m_keyPresentation.isFilterable())
	{
		values.add(this.m_keyPresentation);
	}
	if (oFF.notNull(this.m_textPresentation) && this.m_textPresentation.isFilterable())
	{
		values.add(this.m_textPresentation);
	}
	return values;
};
oFF.FdPresentation.prototype.getKeyPresentation = function()
{
	return this.m_keyPresentation;
};
oFF.FdPresentation.prototype.getName = function()
{
	return this.m_name;
};
oFF.FdPresentation.prototype.getPrimaryValue = function()
{
	return this.isKeyPrimary() ? this.m_keyPresentation : this.m_textPresentation;
};
oFF.FdPresentation.prototype.getSecondaryValue = function()
{
	return this.isKeyPrimary() ? this.m_textPresentation : this.m_keyPresentation;
};
oFF.FdPresentation.prototype.getTechnicalName = function()
{
	return this.m_technicalName;
};
oFF.FdPresentation.prototype.getTextPresentation = function()
{
	return this.m_textPresentation;
};
oFF.FdPresentation.prototype.hasKeyPresentation = function()
{
	return oFF.notNull(this.m_keyPresentation);
};
oFF.FdPresentation.prototype.hasTextPresentation = function()
{
	return oFF.notNull(this.m_textPresentation);
};
oFF.FdPresentation.prototype.isFilterable = function()
{
	return oFF.notNull(this.m_keyPresentation) && this.m_keyPresentation.isFilterable() || oFF.notNull(this.m_textPresentation) && this.m_textPresentation.isFilterable();
};
oFF.FdPresentation.prototype.isKeyPrimary = function()
{
	return this.m_isKeyPrimary && oFF.notNull(this.m_keyPresentation);
};
oFF.FdPresentation.prototype.isMainPresentation = function()
{
	return this.m_isMainPresentation;
};
oFF.FdPresentation.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_name = null;
	this.m_technicalName = null;
	this.m_keyPresentation = oFF.XObjectExt.release(this.m_keyPresentation);
	this.m_textPresentation = oFF.XObjectExt.release(this.m_textPresentation);
};
oFF.FdPresentation.prototype.setKeyPrimary = function(keyPrimary)
{
	this.m_isKeyPrimary = keyPrimary;
	return this;
};
oFF.FdPresentation.prototype.toString = function()
{
	return this.m_name;
};

oFF.FdPresentationValue = function() {};
oFF.FdPresentationValue.prototype = new oFF.XObject();
oFF.FdPresentationValue.prototype._ff_c = "FdPresentationValue";

oFF.FdPresentationValue.create = function(name, customObject, isKey, isFilterable, parent)
{
	let type = new oFF.FdPresentationValue();
	type.m_name = name;
	type.m_customObject = customObject;
	type.m_isKey = isKey;
	type.m_filterable = isFilterable;
	type.m_parent = parent;
	return type;
};
oFF.FdPresentationValue.prototype.m_customObject = null;
oFF.FdPresentationValue.prototype.m_filterable = false;
oFF.FdPresentationValue.prototype.m_isKey = false;
oFF.FdPresentationValue.prototype.m_name = null;
oFF.FdPresentationValue.prototype.m_parent = null;
oFF.FdPresentationValue.prototype.getCustomObject = function()
{
	return this.m_customObject;
};
oFF.FdPresentationValue.prototype.getName = function()
{
	return this.m_name;
};
oFF.FdPresentationValue.prototype.getParent = function()
{
	return this.m_parent;
};
oFF.FdPresentationValue.prototype.isFilterable = function()
{
	return this.m_filterable;
};
oFF.FdPresentationValue.prototype.isKey = function()
{
	return this.m_isKey;
};
oFF.FdPresentationValue.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_name = null;
	this.m_customObject = null;
	this.m_parent = null;
};
oFF.FdPresentationValue.prototype.setIsFilterable = function(isFilterable)
{
	this.m_filterable = isFilterable;
};
oFF.FdPresentationValue.prototype.toString = function()
{
	return this.m_name;
};

oFF.FdSize = function() {};
oFF.FdSize.prototype = new oFF.XObject();
oFF.FdSize.prototype._ff_c = "FdSize";

oFF.FdSize.create = function(contentSize, dialogSize)
{
	let fdSize = new oFF.FdSize();
	fdSize.m_contentSize = contentSize;
	fdSize.m_dialogSize = dialogSize;
	return fdSize;
};
oFF.FdSize.prototype.m_contentSize = null;
oFF.FdSize.prototype.m_dialogSize = null;
oFF.FdSize.prototype.getContentSize = function()
{
	return this.m_contentSize;
};
oFF.FdSize.prototype.getDialogSize = function()
{
	return this.m_dialogSize;
};
oFF.FdSize.prototype.isEqualTo = function(other)
{
	if (this === other)
	{
		return true;
	}
	if (oFF.isNull(other))
	{
		return false;
	}
	let otherSize = other;
	return this.m_contentSize === otherSize.m_contentSize && this.m_dialogSize === otherSize.m_dialogSize;
};
oFF.FdSize.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_contentSize = null;
	this.m_dialogSize = null;
};

oFF.OuSelectHierarchyDialogUtils = function() {};
oFF.OuSelectHierarchyDialogUtils.prototype = new oFF.XObject();
oFF.OuSelectHierarchyDialogUtils.prototype._ff_c = "OuSelectHierarchyDialogUtils";

oFF.OuSelectHierarchyDialogUtils.create = function(i18n, dimension)
{
	let utils = new oFF.OuSelectHierarchyDialogUtils();
	utils.m_i18n = i18n;
	utils.m_dimension = dimension;
	return utils;
};
oFF.OuSelectHierarchyDialogUtils.prototype.m_dimension = null;
oFF.OuSelectHierarchyDialogUtils.prototype.m_i18n = null;
oFF.OuSelectHierarchyDialogUtils.prototype.compare = function(s1, s2)
{
	return oFF.XIntegerValue.create(oFF.XString.compare(oFF.XString.toLowerCase(s1), oFF.XString.toLowerCase(s2)));
};
oFF.OuSelectHierarchyDialogUtils.prototype.getHierarchyDescription = function(hierarchy)
{
	let catItemDesc;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchy.getHierarchyMediumText()))
	{
		catItemDesc = hierarchy.getHierarchyMediumText();
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchy.getHierarchyShortText()))
	{
		catItemDesc = hierarchy.getHierarchyShortText();
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchy.getHierarchyLongText()))
	{
		catItemDesc = hierarchy.getHierarchyLongText();
	}
	else
	{
		if (this.m_dimension.isStructure())
		{
			catItemDesc = this.m_i18n.getText(oFF.OuHierarchyDialogI18n.HIERARCHY_LABEL);
		}
		else
		{
			catItemDesc = hierarchy.getHierarchyName();
		}
	}
	return catItemDesc;
};
oFF.OuSelectHierarchyDialogUtils.prototype.getSearchFunction = function()
{
	return (hierarchy, txtToSearch) => {
		let test = false;
		if (oFF.XStringUtils.isNullOrEmpty(txtToSearch))
		{
			test = true;
		}
		else if (oFF.XStringUtils.containsString(hierarchy.getHierarchyName(), txtToSearch, true))
		{
			test = true;
		}
		else if (oFF.XStringUtils.containsString(this.getHierarchyDescription(hierarchy), txtToSearch, true))
		{
			test = true;
		}
		return oFF.XBooleanValue.create(test);
	};
};
oFF.OuSelectHierarchyDialogUtils.prototype.getSortComparator = function()
{
	return oFF.XComparatorLambda.create((item1, item2) => {
		let item1Desc = this.getHierarchyDescription(item1);
		let item2Desc = this.getHierarchyDescription(item2);
		let descComparison = this.compare(item1Desc, item2Desc);
		if (descComparison.getInteger() !== 0)
		{
			return descComparison;
		}
		return this.compare(item1.getHierarchyName(), item2.getHierarchyName());
	});
};

oFF.OuQueryInformationDialogConstants = {

	DESCRIPTION:"Description",
	LABEL:"label",
	MODEL_DESCRIPTION_KEY:"description",
	MODEL_DISPLAY_NAME_KEY:"displayName",
	MODEL_SUBTYPE_KEY:"modelSubtype",
	MODEL_SUBTYPE_PLANNING:"PLANNING",
	SPACE_DESCRIPTION_KEY:"spaceDescription",
	SPACE_DISPLAY_NAME_KEY:"spaceDisplayName",
	TECH_ID:"TechID",
	VALUE:"value"
};

oFF.OuShareDialogConstants = {

	ARG_FILE:"file",
	ARG_LINK:"link",
	ARG_OWNER:"owner",
	ARG_WORKSPACE:"workspace",
	ASSIGN:1,
	COMMENT_ADD:256,
	COMMENT_ADD_STRING:"commentAdd",
	COMMENT_DELETE:512,
	COMMENT_DELETE_STRING:"commentDelete",
	COMMENT_VIEW:128,
	COMMENT_VIEW_STRING:"commentView",
	COPY:64,
	COPY_STRING:"copy",
	CREATE_DOC:16,
	CREATE_FILE_STRING:"createFile",
	CREATE_FOLDER:32,
	CREATE_FOLDER_STRING:"createFolder",
	DELETE:8,
	DELETE_STRING:"delete",
	DENY:0,
	DESCRIPTION:"Description",
	LABEL:"label",
	READ:2,
	READ_STRING:"read",
	SHARE_LOWER:"share",
	UPDATE:4,
	UPDATE_STRING:"update",
	VALUE:"value"
};

oFF.OuShareDialogAccess = function() {};
oFF.OuShareDialogAccess.prototype = new oFF.XObject();
oFF.OuShareDialogAccess.prototype._ff_c = "OuShareDialogAccess";

oFF.OuShareDialogAccess.create = function()
{
	let obj = new oFF.OuShareDialogAccess();
	return obj;
};
oFF.OuShareDialogAccess.prototype.createJsonFromAccessNum = function(iCustomAccessNum)
{
	let bIsRead = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.READ)) !== 0);
	let bIsCopy = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.COPY)) !== 0);
	let bIsCommentView = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.COMMENT_VIEW)) !== 0);
	let bIsCommentAdd = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.COMMENT_ADD)) !== 0);
	let bIsCommentDelete = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.COMMENT_DELETE)) !== 0);
	let bIsUpdate = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.UPDATE)) !== 0);
	let bIsShare = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.ASSIGN)) !== 0);
	let bIsDelete = ((oFF.XMath.binaryAnd(iCustomAccessNum, oFF.OuShareDialogConstants.DELETE)) !== 0);
	let jsonStruct = oFF.PrFactory.createStructure();
	let viewJson = this.getAccessValuesAsJson("view", "View", false);
	viewJson.put("0", this.getAccessValuesAsJson("read", "Read", bIsRead));
	viewJson.put("1", this.getAccessValuesAsJson("copy", "Copy", bIsCopy));
	viewJson.put("2", this.getAccessValuesAsJson("commentView", "View Comment", bIsCommentView));
	viewJson.put("3", this.getAccessValuesAsJson("commentAdd", "Add Comment", bIsCommentAdd));
	jsonStruct.put("0", viewJson);
	let editJson = this.getAccessValuesAsJson("edit", "Edit", false);
	editJson.put("0", this.getAccessValuesAsJson("update", "Update", bIsUpdate));
	jsonStruct.put("1", editJson);
	let fullJson = this.getAccessValuesAsJson("fullAccess", "Full Control", false);
	fullJson.put("0", this.getAccessValuesAsJson("delete", "Delete", bIsDelete));
	fullJson.put("1", this.getAccessValuesAsJson("commentDelete", "Delete Comment", bIsCommentDelete));
	fullJson.put("2", this.getAccessValuesAsJson("share", "Share", bIsShare));
	jsonStruct.put("2", fullJson);
	return jsonStruct;
};
oFF.OuShareDialogAccess.prototype.getAccessMap = function()
{
	let accessMap = oFF.XHashMapByString.create();
	let viewList = oFF.XList.create();
	viewList.add(oFF.XFileAccess.READ);
	viewList.add(oFF.XFileAccess.COPY);
	viewList.add(oFF.XFileAccess.VIEW_COMMENT);
	viewList.add(oFF.XFileAccess.ADD_COMMENT);
	accessMap.put("view", viewList);
	let editList = oFF.XList.create();
	editList.add(oFF.XFileAccess.UPDATE);
	accessMap.put("edit", editList);
	let fullList = oFF.XList.create();
	fullList.add(oFF.XFileAccess.DELETE);
	fullList.add(oFF.XFileAccess.DELETE_COMMENT);
	fullList.add(oFF.XFileAccess.SHARE);
	accessMap.put("full", fullList);
	return accessMap;
};
oFF.OuShareDialogAccess.prototype.getAccessValuesAsJson = function(id, text, selected)
{
	let innerJson = oFF.PrFactory.createStructure();
	innerJson.putString("id", id);
	innerJson.putString("text", text);
	innerJson.putBoolean("selected", selected);
	innerJson.putBoolean("visible", true);
	return innerJson;
};
oFF.OuShareDialogAccess.prototype.getCustomXFileAccess = function(customData)
{
	let accessList = oFF.XList.create();
	for (let i = 0; i < customData.size(); i++)
	{
		let groupProp = customData.getStructureByKey(oFF.XInteger.convertToString(i));
		for (let j = 0; j < groupProp.size(); j++)
		{
			let subGroup = groupProp.getStructureByKey(oFF.XInteger.convertToString(j));
			if (oFF.notNull(subGroup))
			{
				let sId = subGroup.getStringByKey("id");
				switch (sId)
				{
					case oFF.OuShareDialogConstants.READ_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.READ);
						}
						break;

					case oFF.OuShareDialogConstants.COPY_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.COPY);
						}
						break;

					case oFF.OuShareDialogConstants.COMMENT_VIEW_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.VIEW_COMMENT);
						}
						break;

					case oFF.OuShareDialogConstants.COMMENT_ADD_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.ADD_COMMENT);
						}
						break;

					case oFF.OuShareDialogConstants.UPDATE_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.UPDATE);
						}
						break;

					case oFF.OuShareDialogConstants.CREATE_FILE_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.CREATE);
						}
						break;

					case oFF.OuShareDialogConstants.SHARE_LOWER:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.SHARE);
						}
						break;

					case oFF.OuShareDialogConstants.DELETE_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.DELETE);
						}
						break;

					case oFF.OuShareDialogConstants.COMMENT_DELETE_STRING:
						if (subGroup.getBooleanByKey("selected"))
						{
							accessList.add(oFF.XFileAccess.DELETE_COMMENT);
						}
						break;

					default:
				}
			}
		}
	}
	return accessList;
};
oFF.OuShareDialogAccess.prototype.getXFileAccess = function(accessSet, customData)
{
	let accessMap = this.getAccessMap();
	if (oFF.XString.isEqual(accessSet, "custom"))
	{
		return this.getCustomXFileAccess(customData);
	}
	else
	{
		if (oFF.XString.isEqual(accessSet, "view"))
		{
			return accessMap.getByKey("view");
		}
		else if (oFF.XString.isEqual(accessSet, "edit"))
		{
			let access = oFF.XList.createWithList(accessMap.getByKey("view"));
			access.addAll(accessMap.getByKey("edit"));
			return access;
		}
		else
		{
			let access = oFF.XList.createWithList(accessMap.getByKey("view"));
			access.addAll(accessMap.getByKey("edit"));
			access.addAll(accessMap.getByKey("full"));
			return access;
		}
	}
};

oFF.OuShareUserTeamSearchPanel = function() {};
oFF.OuShareUserTeamSearchPanel.prototype = new oFF.XObject();
oFF.OuShareUserTeamSearchPanel.prototype._ff_c = "OuShareUserTeamSearchPanel";

oFF.OuShareUserTeamSearchPanel.create = function(shareUserTeamSelectorPopup, mainContainer)
{
	let obj = new oFF.OuShareUserTeamSearchPanel();
	obj.m_userTeamDialog = shareUserTeamSelectorPopup;
	obj.m_mainContainer = mainContainer;
	obj.buildPanel();
	return obj;
};
oFF.OuShareUserTeamSearchPanel.prototype.m_dropdownSearch = null;
oFF.OuShareUserTeamSearchPanel.prototype.m_mainContainer = null;
oFF.OuShareUserTeamSearchPanel.prototype.m_userTeamDialog = null;
oFF.OuShareUserTeamSearchPanel.prototype.buildPanel = function()
{
	let panelLayout = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.PANEL).setName("ShareUserTeamSearchPanel");
	panelLayout.setMargin(oFF.UiCssBoxEdges.create("0 1rem 0.5rem 0"));
	panelLayout.setExpandable(true);
	panelLayout.setExpanded(false);
	panelLayout.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	this.m_mainContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT).addItem(panelLayout);
	let headerToolbar = panelLayout.setNewHeaderToolbar();
	headerToolbar.setPadding(oFF.UiCssBoxEdges.create("0"));
	headerToolbar.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	let panelTitle = headerToolbar.addNewItemOfType(oFF.UiType.TITLE);
	panelTitle.setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.SETTINGS));
	let searchContainer = headerToolbar.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	searchContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0 auto"));
	searchContainer.setDirection(oFF.UiFlexDirection.ROW);
	searchContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	searchContainer.setName("ShareDialogSearchContainer");
	let searchField = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.SEARCH_FIELD);
	let searchFieldContainer = searchContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	searchFieldContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0 auto"));
	searchFieldContainer.setAlignSelf(oFF.UiFlexAlignSelf.END);
	searchField.setAlignSelf(oFF.UiFlexAlignSelf.END);
	searchField.setPadding(oFF.UiCssBoxEdges.create("0"));
	searchField.setName("ShareDialogSearchInput");
	searchField.setPlaceholder(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.SEARCH));
	searchField.registerOnSearch(oFF.UiLambdaSearchListener.create(this.m_userTeamDialog.handleSearch.bind(this.m_userTeamDialog)));
	searchField.registerOnLiveChange(oFF.UiLambdaLiveChangeWithDebounceListener.create(this.m_userTeamDialog.handleSearch.bind(this.m_userTeamDialog), 1000));
	searchFieldContainer.addItem(searchField);
	let outerContainer = panelLayout.setNewContent(oFF.UiType.VERTICAL_LAYOUT);
	let dropDownContainer = outerContainer.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	panelLayout.setMaxHeight(oFF.UiCssLength.create("7rem"));
	dropDownContainer.setDirection(oFF.UiFlexDirection.ROW);
	dropDownContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	dropDownContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0.5rem 2.7rem"));
	dropDownContainer.setPadding(oFF.UiCssBoxEdges.create("0"));
	outerContainer.setPadding(oFF.UiCssBoxEdges.create("0"));
	dropDownContainer.setName("ShareDialogSearchContainer");
	dropDownContainer.addNewItemOfType(oFF.UiType.LABEL).setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.DISPLAY)).setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
	this.m_dropdownSearch = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.DROPDOWN);
	this.m_dropdownSearch.setName("ShareDialogDropdownSearch");
	this.m_dropdownSearch.setWidth(oFF.UiCssLength.create("100%"));
	this.m_dropdownSearch.setTooltip(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.DISPLAY));
	this.m_dropdownSearch.addNewItem().setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.DISPLAY_NAME)).setName("DisplayName");
	this.m_dropdownSearch.addNewItem().setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.ID_AND_NAME)).setName("IdAndDisplay");
	this.m_dropdownSearch.addNewItem().setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.ID)).setName("Id");
	this.m_dropdownSearch.registerOnSelect(oFF.UiLambdaSelectListener.create((Event) => {
		let userView = this.m_dropdownSearch.getSelectedItem().getName();
		let rows = this.m_userTeamDialog.getTable().getResponsiveTableRows();
		this.m_userTeamDialog.changeUserDisplayNameOrId(rows, userView);
	}));
	dropDownContainer.addItem(this.m_dropdownSearch);
};
oFF.OuShareUserTeamSearchPanel.prototype.getDropdownSearch = function()
{
	return this.m_dropdownSearch;
};
oFF.OuShareUserTeamSearchPanel.prototype.releaseObject = function()
{
	this.m_userTeamDialog = oFF.XObjectExt.release(this.m_userTeamDialog);
	this.m_mainContainer = oFF.XObjectExt.release(this.m_mainContainer);
	this.m_dropdownSearch = oFF.XObjectExt.release(this.m_dropdownSearch);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.OuShareUserTeamSelectionList = function() {};
oFF.OuShareUserTeamSelectionList.prototype = new oFF.XObject();
oFF.OuShareUserTeamSelectionList.prototype._ff_c = "OuShareUserTeamSelectionList";

oFF.OuShareUserTeamSelectionList.create = function(shareUserTeamSelectorPopup)
{
	let obj = new oFF.OuShareUserTeamSelectionList();
	obj.m_userTeamDialog = shareUserTeamSelectorPopup;
	return obj;
};
oFF.OuShareUserTeamSelectionList.prototype.m_selectionContainer = null;
oFF.OuShareUserTeamSelectionList.prototype.m_selectionList = null;
oFF.OuShareUserTeamSelectionList.prototype.m_userTeamDialog = null;
oFF.OuShareUserTeamSelectionList.prototype.addAllUsersAlreadySelected = function(selectedItems)
{
	this.m_userTeamDialog.setSelectedUsers(this.m_selectionList.getItems());
	this.m_selectionList.clearItems();
	let listContent = oFF.XList.create();
	let size = selectedItems.size();
	for (let i = 0; i < size; i++)
	{
		let item = selectedItems.get(i);
		let cell = item.getResponsiveTableCell(0);
		let label = cell.getItems().get(1);
		let name = label.getName();
		listContent.add(this.m_userTeamDialog.createNewSelectionListItem(label.getText(), label.getTooltip(), name, item, this.m_userTeamDialog.getGenesis()));
	}
	this.m_selectionList.addAllItems(listContent);
	let listUsers = oFF.XList.create();
	let rows = this.m_userTeamDialog.getTable().getResponsiveTableRows();
	for (let i = 0; i < this.m_userTeamDialog.getSelectedUsers().size(); i++)
	{
		let user = this.m_userTeamDialog.getSelectedUsers().get(i);
		for (let j = 0; j < rows.size(); j++)
		{
			let cell = rows.get(j).getResponsiveTableCell(0);
			if (oFF.XString.isEqual(cell.getItem(1).getName(), user.getName()))
			{
				break;
			}
			if (j === rows.size() - 1)
			{
				listUsers.add(user);
			}
		}
	}
	this.m_selectionList.addAllItems(listUsers);
	this.m_userTeamDialog.changeUserDisplayNameOrId(this.m_userTeamDialog.getTable().getResponsiveTableRows(), this.m_userTeamDialog.getSearchPanel().getDropdownSearch().getSelectedItem().getName());
	this.m_selectionList.setBusy(false);
};
oFF.OuShareUserTeamSelectionList.prototype.addUsersToList = function(evt)
{
	if (evt.getParameters().getBooleanByKey("deselectAll"))
	{
		this.m_selectionList.clearItems();
	}
	else
	{
		let selectedItems = this.m_userTeamDialog.getTable().getSelectedItems();
		this.addAllUsersAlreadySelected(selectedItems);
	}
};
oFF.OuShareUserTeamSelectionList.prototype.buildList = function(root)
{
	this.m_selectionContainer = root.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	this.m_selectionContainer.setName("ShareDialogSelectionContainer");
	this.m_selectionContainer.setPadding(oFF.UiCssBoxEdges.create("0 1rem"));
	this.m_selectionContainer.useMaxSpace();
	let selectionListContainer = this.m_selectionContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	selectionListContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	selectionListContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	selectionListContainer.setAlignItems(oFF.UiFlexAlignItems.START);
	selectionListContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	selectionListContainer.setName("ShareDialogSelectionListContainer");
	selectionListContainer.useMaxSpace();
	this.m_selectionContainer.addItem(selectionListContainer);
	let titleContainer = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
	titleContainer.setDirection(oFF.UiFlexDirection.ROW);
	titleContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	titleContainer.setAlignItems(oFF.UiFlexAlignItems.START);
	titleContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	titleContainer.setFlex("0 0 auto");
	titleContainer.setWidth(oFF.UiCssLength.create("100%"));
	titleContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0.5rem 0"));
	this.m_selectionContainer.addItem(titleContainer);
	let selectedMembersLabel = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.TITLE);
	selectedMembersLabel.setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.SELECTED_USERS));
	selectedMembersLabel.setFontSize(oFF.UiCssLength.create("0.875rem"));
	selectedMembersLabel.setFontColor(oFF.UiColor.create("#666"));
	selectedMembersLabel.setFontWeight(oFF.UiFontWeight.BOLD);
	selectedMembersLabel.setFlex("0 0 auto");
	selectedMembersLabel.setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
	titleContainer.addItem(selectedMembersLabel);
	selectionListContainer.addItem(titleContainer);
	let listWrapper = selectionListContainer.addNewItemOfType(oFF.UiType.SCROLL_CONTAINER);
	listWrapper.setWidth(oFF.UiCssLength.create("100%"));
	listWrapper.setMargin(oFF.UiCssBoxEdges.create("1%"));
	listWrapper.setFlex("auto");
	this.m_selectionList = listWrapper.setNewContent(oFF.UiType.LIST);
	selectedMembersLabel.setLabelFor(this.m_selectionList);
	this.m_selectionList.setName("ShareDialogPreviewList");
	this.m_selectionList.useMaxSpace();
	this.m_selectionList.setSelectionMode(oFF.UiSelectionMode.DELETE);
	this.m_selectionList.setBorderWidth(oFF.UiCssBoxEdges.create("0px"));
	selectionListContainer.addItem(listWrapper);
	selectionListContainer.addItem(this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.create("0.5rem")).setFlex("0 0 auto"));
	for (let i = 0; i < this.m_userTeamDialog.getCurrentSelectedUsers().size(); i++)
	{
		let user = this.m_userTeamDialog.getCurrentSelectedUsers().get(i);
		let label = user.get(0);
		let idAndDisplay = oFF.XStringTokenizer.splitString(label, " (");
		let display = idAndDisplay.get(0);
		let id = oFF.XStringTokenizer.splitString(idAndDisplay.get(1), ")").get(0);
		if (oFF.XStringTokenizer.splitString(id, ":").size() > 2)
		{
			let idSplit = oFF.XStringTokenizer.splitString(id, ":");
			id = oFF.XStringUtils.concatenate3(idSplit.get(0), ": ", idSplit.get(2));
		}
		let idText = oFF.XStringUtils.concatenate3(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.ID), ": ", id);
		let displayText = oFF.XStringUtils.concatenate3(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.DISPLAY_NAME), ": ", display);
		let tooltip = oFF.XStringUtils.concatenate3(idText, " ", displayText);
		let name = user.get(1);
		this.m_selectionList.addItem(this.m_userTeamDialog.createNewSelectionListItem(display, tooltip, name, null, this.m_userTeamDialog.getGenesis()));
	}
	this.m_selectionList.registerOnDelete(oFF.UiLambdaDeleteListener.create((deleteEvnt) => {
		this.m_selectionList.removeItem(deleteEvnt.getAffectedItem());
		let allTableItems = this.m_userTeamDialog.getTable().getSelectedItems();
		for (let i = 0; i < allTableItems.size(); i++)
		{
			let item = allTableItems.get(i);
			let cell = item.getResponsiveTableCell(0);
			let label = cell.getItems().get(1);
			let cellName = label.getName();
			let itemName = deleteEvnt.getAffectedItem().getName();
			if (oFF.XString.isEqual(cellName, itemName))
			{
				item.setSelected(false);
			}
		}
		this.m_userTeamDialog.setSelectedUsers(this.m_selectionList.getItems());
	}));
	this.m_userTeamDialog.setSelectedUsers(this.m_selectionList.getItems());
	let clearButtonContainer = titleContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	clearButtonContainer.setDirection(oFF.UiFlexDirection.ROW);
	clearButtonContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	clearButtonContainer.setFlex("0 0 auto");
	clearButtonContainer.useMaxWidth();
	clearButtonContainer.setName("ShareDialogPreviewListClearBtnContainer");
	selectionListContainer.addItem(clearButtonContainer);
	let clearSelectionButton = clearButtonContainer.addNewItemOfType(oFF.UiType.BUTTON);
	clearSelectionButton.setName("ClearSelection");
	clearSelectionButton.setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.CLEAR_SELECTION_BUTTON));
	clearSelectionButton.setTooltip(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.CLEAR_SELECTION_BUTTON));
	clearSelectionButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	clearSelectionButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.m_userTeamDialog.getTable().clearSelectedItems();
		this.m_selectionList.clearItems();
		this.m_userTeamDialog.setSelectedUsers(this.m_selectionList.getItems());
	}));
	return this.m_selectionList;
};
oFF.OuShareUserTeamSelectionList.prototype.getSelectionContainer = function()
{
	return this.m_selectionContainer;
};
oFF.OuShareUserTeamSelectionList.prototype.releaseObject = function()
{
	this.m_selectionList = oFF.XObjectExt.release(this.m_selectionList);
	this.m_userTeamDialog = oFF.XObjectExt.release(this.m_userTeamDialog);
	this.m_selectionContainer = oFF.XObjectExt.release(this.m_selectionContainer);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.OuShareUserTeamTable = function() {};
oFF.OuShareUserTeamTable.prototype = new oFF.XObject();
oFF.OuShareUserTeamTable.prototype._ff_c = "OuShareUserTeamTable";

oFF.OuShareUserTeamTable.create = function(shareUserTeamSelectorPopup, mainContainer, owner, workspaceId)
{
	let obj = new oFF.OuShareUserTeamTable();
	obj.m_userTeamDialog = shareUserTeamSelectorPopup;
	obj.m_mainContainer = mainContainer;
	obj.m_fetchUsersTeams = oFF.OuFetchUsersTeams.create(obj.m_userTeamDialog.getLocalizationProvider());
	obj.m_owner = owner;
	obj.m_workspace = workspaceId;
	return obj;
};
oFF.OuShareUserTeamTable.prototype.m_currentPage = 0;
oFF.OuShareUserTeamTable.prototype.m_fetchUsersTeams = null;
oFF.OuShareUserTeamTable.prototype.m_mainContainer = null;
oFF.OuShareUserTeamTable.prototype.m_membersPerPage = 0;
oFF.OuShareUserTeamTable.prototype.m_owner = null;
oFF.OuShareUserTeamTable.prototype.m_pages = 0;
oFF.OuShareUserTeamTable.prototype.m_pagingBtnNext = null;
oFF.OuShareUserTeamTable.prototype.m_pagingBtnPrev = null;
oFF.OuShareUserTeamTable.prototype.m_pagingLabel = null;
oFF.OuShareUserTeamTable.prototype.m_popover = null;
oFF.OuShareUserTeamTable.prototype.m_popoverTable = null;
oFF.OuShareUserTeamTable.prototype.m_table = null;
oFF.OuShareUserTeamTable.prototype.m_tableFooter = null;
oFF.OuShareUserTeamTable.prototype.m_userSort = null;
oFF.OuShareUserTeamTable.prototype.m_userTeamDialog = null;
oFF.OuShareUserTeamTable.prototype.m_workspace = null;
oFF.OuShareUserTeamTable.prototype.addAllUsersToTable = function()
{
	this.m_userTeamDialog.setDialogBusy(true);
	this.m_membersPerPage = 9;
	this.getTeams(0, this.m_membersPerPage, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((result) => {
		this.m_userTeamDialog.setTotalTeams(result.getTotalItemCount());
		let teams = result.getChildFiles();
		if (oFF.notNull(teams))
		{
			this.addTeams(teams);
		}
		this.getUsers(0, 0, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((userResultset) => {
			let totalUsers = userResultset.getTotalItemCount() + this.m_userTeamDialog.getTotalTeams();
			if (this.m_userTeamDialog.getTotalMembers() === 0)
			{
				this.m_userTeamDialog.setTotalMembers(totalUsers);
			}
			this.m_currentPage = 1;
			if (this.m_userTeamDialog.getTotalTeams() < this.m_membersPerPage)
			{
				if (totalUsers > this.m_membersPerPage)
				{
					let usersToAdd = this.m_membersPerPage - this.m_userTeamDialog.getTotalTeams();
					this.m_mainContainer.addItem(this.m_tableFooter);
					this.m_pages = oFF.XDouble.convertToInt(oFF.XMath.ceil(totalUsers / this.m_membersPerPage));
					this.m_pagingLabel.setText(oFF.XStringUtils.concatenate5(oFF.XInteger.convertToString(this.m_currentPage), " ", this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.OF), " ", oFF.XInteger.convertToString(this.m_pages)));
					this.getUsers(0, usersToAdd, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((userResult) => {
						let users = userResult.getChildFiles();
						this.addUsers(users);
					}).onFinally(() => {
						this.m_userTeamDialog.setDialogBusy(false);
						this.setSelectedUsers();
					});
				}
				else
				{
					this.getUsers(0, this.m_membersPerPage, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((userResult) => {
						let users = userResult.getChildFiles();
						this.addUsers(users);
					}).onFinally(() => {
						this.m_userTeamDialog.setDialogBusy(false);
						this.setSelectedUsers();
					});
				}
			}
			else
			{
				this.m_mainContainer.addItem(this.m_tableFooter);
				this.m_pages = oFF.XDouble.convertToInt(oFF.XMath.ceil(totalUsers / this.m_membersPerPage));
				this.m_pagingLabel.setText(oFF.XStringUtils.concatenate5(oFF.XInteger.convertToString(this.m_currentPage), " ", this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.OF), " ", oFF.XInteger.convertToString(this.m_pages)));
				this.m_userTeamDialog.setDialogBusy(false);
				this.setSelectedUsers();
			}
			this.m_pagingBtnPrev.setEnabled(this.m_currentPage > 1);
			this.m_pagingBtnNext.setEnabled(this.m_currentPage < this.m_pages);
		});
	});
};
oFF.OuShareUserTeamTable.prototype.addTeams = function(users)
{
	oFF.XCollectionUtils.forEach(users, (user) => {
		let id_split = oFF.XStringTokenizer.splitString(user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME), ":");
		let id = oFF.XStringUtils.concatenate3(id_split.get(0), ": ", id_split.get(2));
		let idText = oFF.XStringUtils.concatenate3(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.ID), ": ", id);
		let displayText = oFF.XStringUtils.concatenate3(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.DISPLAY_NAME), ": ", user.getAttributes().getStringByKey(oFF.XFileAttribute.DISPLAY_NAME));
		let userIdAndDisplay = oFF.XStringUtils.concatenate3(idText, " ", displayText);
		let newRow = this.m_table.addNewResponsiveTableRow();
		let newCell = newRow.addNewResponsiveTableCellOfType(oFF.UiType.FLEX_LAYOUT);
		let icon = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.AVATAR);
		icon.setSize(oFF.UiSize.createByCss("1.5rem", "1.5rem"));
		icon.setAvatarColor(oFF.UiAvatarColor.ACCENT_6);
		icon.setMargin(oFF.UiCssBoxEdges.create("0 5% 0 0"));
		icon.setIcon(user.getAttributes().getStringByKey(oFF.XFileAttribute.ICON));
		icon.addCssClass("ffShareDialogUserIcon");
		icon.registerOnHover(oFF.UiLambdaHoverListener.create((evt) => {
			this.m_popover = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.POPOVER);
			this.m_popover.setPlacement(oFF.UiPlacementType.BOTTOM);
			this.m_popover.setWidth(oFF.UiCssLength.create("10%"));
			let popoverContent = this.m_popover.setNewContent(oFF.UiType.VERTICAL_LAYOUT);
			this.m_popoverTable = popoverContent.addNewItemOfType(oFF.UiType.RESPONSIVE_TABLE);
			let team = evt.getControl().getParent().getItems().get(1);
			this.m_popoverTable.addNewResponsiveTableColumn().setNewHeader(oFF.UiType.LABEL).setText(team.getText());
			this.m_fetchUsersTeams.getUsersInTeam(user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME), this.m_userTeamDialog.getGenesis().getUiManager().getProcess()).onThen((userResult) => {
				let rset = userResult.getData().getCachedChildrenResultset();
				let userset = rset.getChildFiles();
				if (oFF.notNull(userset))
				{
					oFF.XCollectionUtils.forEach(userset, (userInTeam) => {
						let username = userInTeam.getAttributes().getStringByKey(oFF.XFileAttribute.NAME);
						let table = this.m_popoverTable;
						let tableRow = table.addNewResponsiveTableRow();
						let tableCell = tableRow.addNewResponsiveTableCellOfType(oFF.UiType.FLEX_LAYOUT);
						let userIcon = tableCell.addNewItemOfType(oFF.UiType.AVATAR);
						userIcon.setAvatarColor(oFF.UiAvatarColor.ACCENT_7);
						userIcon.setMargin(oFF.UiCssBoxEdges.create("0 5% 0 0"));
						userIcon.addCssClass("ffShareDialogUserIcon");
						userIcon.setIcon(userInTeam.getAttributes().getStringByKey(oFF.XFileAttribute.ICON));
						userIcon.setSize(oFF.UiSize.createByCss("1.5rem", "1.5rem"));
						tableCell.addNewItemOfType(oFF.UiType.LABEL).setText(username).setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
					});
				}
			});
			this.m_popover.openAt(evt.getControl());
		}));
		icon.registerOnHoverEnd(oFF.UiLambdaHoverEndListener.create((evt) => {
			this.m_popover.close();
		}));
		let userLabel = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.LABEL).setText(user.getAttributes().getStringByKey(oFF.XFileAttribute.DISPLAY_NAME)).setTooltip(userIdAndDisplay).setName(oFF.XStringUtils.concatenate3(user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME), ",", user.getAttributes().getStringByKey(oFF.XFileAttribute.DISPLAY_NAME))).setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
		newCell.addItem(icon);
		newCell.addItem(userLabel);
	});
};
oFF.OuShareUserTeamTable.prototype.addUsers = function(users)
{
	if (oFF.notNull(users))
	{
		oFF.XCollectionUtils.forEach(users, (user) => {
			if (!oFF.XString.isEqual(user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME), this.m_owner))
			{
				let idText = oFF.XStringUtils.concatenate3(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.ID), ": ", user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME));
				let displayText = oFF.XStringUtils.concatenate3(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.DISPLAY_NAME), ": ", user.getAttributes().getStringByKey(oFF.XFileAttribute.DISPLAY_NAME));
				let userIdAndDisplay = oFF.XStringUtils.concatenate3(idText, " ", displayText);
				let newRow = this.m_table.addNewResponsiveTableRow();
				let newCell = newRow.addNewResponsiveTableCellOfType(oFF.UiType.FLEX_LAYOUT);
				let icon = newCell.addNewItemOfType(oFF.UiType.AVATAR);
				icon.addCssClass("ffShareDialogUserIcon");
				icon.setSize(oFF.UiSize.createByCss("1.5rem", "1.5rem"));
				icon.setAvatarColor(oFF.UiAvatarColor.ACCENT_7);
				icon.setMargin(oFF.UiCssBoxEdges.create("0 5% 0 0"));
				icon.setIcon(user.getAttributes().getStringByKey(oFF.XFileAttribute.ICON));
				let userLabel = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.LABEL).setText(user.getAttributes().getStringByKey(oFF.XFileAttribute.DISPLAY_NAME)).setTooltip(userIdAndDisplay).setName(oFF.XStringUtils.concatenate3(user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME), ",", user.getAttributes().getStringByKey(oFF.XFileAttribute.DISPLAY_NAME))).setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
				newCell.addItem(icon);
				newCell.addItem(userLabel);
			}
		});
	}
};
oFF.OuShareUserTeamTable.prototype.buildTable = function()
{
	let label = this.m_mainContainer.addNewItemOfType(oFF.UiType.LABEL).setText(this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.USERS)).setPadding(oFF.UiCssBoxEdges.create("0.5rem 0 0.3rem 0.6rem")).setBackgroundColor(oFF.UiColor.create("#f7f7f7"));
	label.setBorderStyle(oFF.UiBorderStyle.SOLID);
	label.setBorderColor(oFF.UiColor.create("#ddd"));
	label.setBorderWidth(oFF.UiCssBoxEdges.create(".0625rem .0625rem 0 .0625rem"));
	label.setWidth(oFF.UiCssLength.create("100%"));
	label.setHeight(oFF.UiCssLength.create("100%"));
	label.setFontColor(oFF.UiColor.create("#333"));
	label.setWidth(oFF.UiCssLength.create("calc(100% - 1rem)"));
	let scrollContainer = this.m_mainContainer.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	scrollContainer.setWidth(oFF.UiCssLength.create("calc(100% - 1rem)"));
	let tableContainer = scrollContainer.addNewItemOfType(oFF.UiType.SCROLL_CONTAINER);
	this.m_table = tableContainer.setNewContent(oFF.UiType.RESPONSIVE_TABLE);
	this.m_table.setName("ShareDialogTable");
	this.m_table.addCssClass("ffShareDialogReTable");
	this.m_table.setBorderStyle(oFF.UiBorderStyle.SOLID);
	this.m_table.setBorderColor(oFF.UiColor.create("#ddd"));
	this.m_table.setBorderWidth(oFF.UiCssBoxEdges.create("0 .0625rem 0 .0625rem"));
	this.m_table.setFlex("auto");
	this.m_table.setSelectionMode(oFF.UiSelectionMode.MULTI_SELECT);
	this.m_table.setMultiSelectMode(oFF.UiMultiSelectMode.CLEAR_ALL);
	let column = this.m_table.addNewResponsiveTableColumn();
	column.addCssClass("ffShareDialogReTableLastColumn");
	this.m_table.registerOnSelectionChange(oFF.UiLambdaSelectionChangeListener.create(this.m_userTeamDialog.getShareUserTeamSelectionList().addUsersToList.bind(this.m_userTeamDialog.getShareUserTeamSelectionList())));
	this.addAllUsersToTable();
	this.m_tableFooter = this.m_userTeamDialog.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_tableFooter.setDirection(oFF.UiFlexDirection.ROW);
	this.m_tableFooter.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_tableFooter.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_tableFooter.setWidth(oFF.UiCssLength.create("100%"));
	this.m_tableFooter.setJustifyContent(oFF.UiFlexJustifyContent.CENTER);
	this.m_tableFooter.setMargin(oFF.UiCssBoxEdges.create("auto 0 0 0"));
	this.m_tableFooter.setName("TableFooter");
	let paging = oFF.OuUserTeamSelectorPagination.create(this.m_userTeamDialog.getGenesis(), this.m_tableFooter, this.m_userTeamDialog.getLocalizationProvider());
	this.m_pagingBtnPrev = paging.getPagingBtnPrev();
	this.m_pagingLabel = paging.getPagingLabel();
	this.m_pagingBtnNext = paging.getPagingBtnNext();
	this.m_pagingBtnNext.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.pageChanged(this.m_pagingBtnNext);
	}));
	this.m_pagingBtnPrev.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.pageChanged(this.m_pagingBtnPrev);
	}));
	return this.m_table;
};
oFF.OuShareUserTeamTable.prototype.getTableFooter = function()
{
	return this.m_tableFooter;
};
oFF.OuShareUserTeamTable.prototype.getTeams = function(offset, maxUsers, searchValue, sort, workspace)
{
	let process = this.m_userTeamDialog.getGenesis().getUiManager().getProcess();
	return oFF.XPromise.create((resolve, reject) => {
		this.m_fetchUsersTeams.getTeams(process, offset, maxUsers, searchValue, sort, workspace).onThen((result) => {
			let resultset = result.getData().getCachedChildrenResultset();
			resolve(resultset);
		}).onCatch((error) => {
			this.m_userTeamDialog.getGenesis().showErrorToast(error.getText());
			this.m_userTeamDialog.setDialogBusy(false);
		});
	});
};
oFF.OuShareUserTeamTable.prototype.getUsers = function(offset, maxUsers, searchValue, sort, workspaceId)
{
	let process = this.m_userTeamDialog.getGenesis().getUiManager().getProcess();
	return oFF.XPromise.create((resolve, reject) => {
		this.m_fetchUsersTeams.getUsers(process, offset, maxUsers, searchValue, sort, workspaceId).onThen((result) => {
			let resultset = result.getData().getCachedChildrenResultset();
			resolve(resultset);
		}).onCatch((error) => {
			this.m_userTeamDialog.getGenesis().showErrorToast(error.getText());
			this.m_userTeamDialog.setDialogBusy(false);
		});
	});
};
oFF.OuShareUserTeamTable.prototype.pageChanged = function(pageButton)
{
	this.m_userTeamDialog.setSelectedUsers(this.m_userTeamDialog.getSelectionList().getItems());
	let lowerThreshold = 0;
	if (pageButton.isEqualTo(this.m_pagingBtnNext))
	{
		lowerThreshold = this.m_currentPage * this.m_membersPerPage;
		this.m_currentPage = this.m_currentPage + 1;
	}
	else
	{
		this.m_currentPage = this.m_currentPage - 1;
		lowerThreshold = (this.m_currentPage - 1) * this.m_membersPerPage;
	}
	this.m_pagingLabel.setText(oFF.XStringUtils.concatenate5(oFF.XInteger.convertToString(this.m_currentPage), " ", this.m_userTeamDialog.getLocalizationProvider().getText(oFF.OuShareDialogI18n.OF), " ", oFF.XInteger.convertToString(this.m_pages)));
	this.m_table.clearResponsiveTableRows();
	if (lowerThreshold <= this.m_userTeamDialog.getTotalTeams())
	{
		this.m_userTeamDialog.setDialogBusy(true);
		this.getTeams(lowerThreshold, this.m_membersPerPage, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((result) => {
			this.m_userTeamDialog.setTotalTeams(result.getTotalItemCount());
			let users = result.getChildFiles();
			if (oFF.notNull(users))
			{
				this.addTeams(users);
			}
			this.m_userTeamDialog.setDialogBusy(false);
			this.setSelectedUsers();
		});
		if ((this.m_userTeamDialog.getTotalTeams() - lowerThreshold) < this.m_membersPerPage)
		{
			let usersToAdd = (lowerThreshold + this.m_membersPerPage) - this.m_userTeamDialog.getTotalTeams();
			this.m_userTeamDialog.setDialogBusy(true);
			this.getUsers(0, usersToAdd, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((result) => {
				let users = result.getChildFiles();
				this.addUsers(users);
			}).onFinally(() => {
				this.m_userTeamDialog.setDialogBusy(false);
				this.setSelectedUsers();
			});
		}
	}
	else
	{
		this.m_userTeamDialog.setDialogBusy(true);
		this.getUsers(lowerThreshold - this.m_userTeamDialog.getTotalTeams(), this.m_membersPerPage, this.m_userTeamDialog.getSearchValue(), this.m_userSort, this.m_workspace).onThen((result) => {
			let users = result.getChildFiles();
			this.addUsers(users);
		}).onFinally(() => {
			this.m_userTeamDialog.setDialogBusy(false);
			this.setSelectedUsers();
		});
	}
	this.m_pagingBtnPrev.setEnabled(this.m_currentPage > 1);
	this.m_pagingBtnNext.setEnabled(this.m_currentPage < this.m_pages);
};
oFF.OuShareUserTeamTable.prototype.releaseObject = function()
{
	this.m_table = oFF.XObjectExt.release(this.m_table);
	this.m_tableFooter = oFF.XObjectExt.release(this.m_tableFooter);
	this.m_userTeamDialog = oFF.XObjectExt.release(this.m_userTeamDialog);
	this.m_mainContainer = oFF.XObjectExt.release(this.m_mainContainer);
	this.m_pagingBtnPrev = oFF.XObjectExt.release(this.m_pagingBtnPrev);
	this.m_pagingLabel = oFF.XObjectExt.release(this.m_pagingLabel);
	this.m_pagingBtnNext = oFF.XObjectExt.release(this.m_pagingBtnNext);
	this.m_popover = oFF.XObjectExt.release(this.m_popover);
	this.m_popoverTable = oFF.XObjectExt.release(this.m_popoverTable);
	this.m_fetchUsersTeams = oFF.XObjectExt.release(this.m_fetchUsersTeams);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OuShareUserTeamTable.prototype.setSelectedUsers = function()
{
	let userList = this.m_userTeamDialog.getSelectionList().getItems();
	for (let i = 0; i < this.m_table.getResponsiveTableRows().size(); i++)
	{
		let row = this.m_table.getResponsiveTableRows().get(i);
		let cell = row.getResponsiveTableCell(0);
		for (let j = 0; j < userList.size(); j++)
		{
			if (oFF.XString.isEqual(cell.getItems().get(1).getName(), userList.get(j).getName()))
			{
				row.setSelected(true);
			}
		}
	}
	let userView = this.m_userTeamDialog.getSearchPanel().getDropdownSearch().getSelectedItem().getName();
	let rows = this.m_table.getResponsiveTableRows();
	this.m_userTeamDialog.changeUserDisplayNameOrId(rows, userView);
};

oFF.OuUserTeamSelectorPagination = function() {};
oFF.OuUserTeamSelectorPagination.prototype = new oFF.XObject();
oFF.OuUserTeamSelectorPagination.prototype._ff_c = "OuUserTeamSelectorPagination";

oFF.OuUserTeamSelectorPagination.create = function(genesis, tableFooter, localization)
{
	let obj = new oFF.OuUserTeamSelectorPagination();
	obj.buildUi(genesis, tableFooter, localization);
	return obj;
};
oFF.OuUserTeamSelectorPagination.prototype.m_pagingBtnNext = null;
oFF.OuUserTeamSelectorPagination.prototype.m_pagingBtnPrev = null;
oFF.OuUserTeamSelectorPagination.prototype.m_pagingButtons = null;
oFF.OuUserTeamSelectorPagination.prototype.m_pagingLabel = null;
oFF.OuUserTeamSelectorPagination.prototype.buildUi = function(genesis, tableFooter, localization)
{
	this.m_pagingButtons = oFF.XList.create();
	this.m_pagingBtnPrev = genesis.newControl(oFF.UiType.BUTTON);
	this.m_pagingBtnPrev.setName("PagingBtnPrev");
	this.m_pagingBtnPrev.setIcon("navigation-left-arrow");
	this.m_pagingBtnPrev.setTooltip(localization.getText(oFF.OuShareDialogI18n.PREVIOUS_PAGE));
	this.m_pagingBtnPrev.setButtonType(oFF.UiButtonType.TRANSPARENT);
	tableFooter.addItem(this.createHiddenLabelFor(this.m_pagingBtnPrev, genesis, localization.getText(oFF.OuShareDialogI18n.PREVIOUS_PAGE)));
	tableFooter.addItem(this.m_pagingBtnPrev);
	this.m_pagingButtons.add(this.m_pagingBtnPrev);
	let marginLeft = oFF.UiCssBoxEdges.create("0 0 0 0.25rem");
	this.m_pagingLabel = genesis.newControl(oFF.UiType.LABEL);
	tableFooter.addItem(this.m_pagingLabel);
	this.m_pagingBtnNext = genesis.newControl(oFF.UiType.BUTTON);
	this.m_pagingBtnNext.setName("PagingBtnNext");
	this.m_pagingBtnNext.setIcon("navigation-right-arrow");
	this.m_pagingBtnNext.setTooltip(localization.getText(oFF.OuShareDialogI18n.NEXT_PAGE));
	this.m_pagingBtnNext.setMargin(marginLeft);
	this.m_pagingBtnNext.setButtonType(oFF.UiButtonType.TRANSPARENT);
	tableFooter.addItem(this.createHiddenLabelFor(this.m_pagingBtnNext, genesis, localization.getText(oFF.OuShareDialogI18n.NEXT_PAGE)));
	tableFooter.addItem(this.m_pagingBtnNext);
	this.m_pagingButtons.add(this.m_pagingBtnNext);
};
oFF.OuUserTeamSelectorPagination.prototype.createHiddenLabelFor = function(control, genesis, text)
{
	let size = oFF.UiCssLength.create("0");
	return genesis.newControl(oFF.UiType.LABEL).setWidth(size).setHeight(size).setText(text).setLabelFor(control);
};
oFF.OuUserTeamSelectorPagination.prototype.getPagingBtnNext = function()
{
	return this.m_pagingBtnNext;
};
oFF.OuUserTeamSelectorPagination.prototype.getPagingBtnPrev = function()
{
	return this.m_pagingBtnPrev;
};
oFF.OuUserTeamSelectorPagination.prototype.getPagingLabel = function()
{
	return this.m_pagingLabel;
};
oFF.OuUserTeamSelectorPagination.prototype.releaseObject = function()
{
	this.m_pagingBtnPrev = oFF.XObjectExt.release(this.m_pagingBtnPrev);
	this.m_pagingBtnNext = oFF.XObjectExt.release(this.m_pagingBtnNext);
	this.m_pagingButtons = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_pagingButtons);
	this.m_pagingLabel = oFF.XObjectExt.release(this.m_pagingLabel);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.OuLambdaFdSelectionChangeListener = function() {};
oFF.OuLambdaFdSelectionChangeListener.prototype = new oFF.XObject();
oFF.OuLambdaFdSelectionChangeListener.prototype._ff_c = "OuLambdaFdSelectionChangeListener";

oFF.OuLambdaFdSelectionChangeListener.create = function(onSelectionChange)
{
	let result = new oFF.OuLambdaFdSelectionChangeListener();
	result.m_onSelectionChangeProcedure = onSelectionChange;
	return result;
};
oFF.OuLambdaFdSelectionChangeListener.prototype.m_onSelectionChangeProcedure = null;
oFF.OuLambdaFdSelectionChangeListener.prototype.onSelectionChange = function(selection)
{
	if (oFF.notNull(this.m_onSelectionChangeProcedure))
	{
		this.m_onSelectionChangeProcedure(selection);
	}
};
oFF.OuLambdaFdSelectionChangeListener.prototype.releaseObject = function()
{
	this.m_onSelectionChangeProcedure = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.VdConstants = {

	BASIC_DIALOG_WIDTH:600,
	BW_NULL_DATE:"00000000",
	BW_NULL_OPERATOR:"#",
	DATE_DISPLAY_FORMAT:"yyyy-MM-dd",
	DATE_VALUE_FORMAT:"yyyy-MM-dd",
	EMPTY_OPTION:"empty"
};

oFF.VdConfiguration = function() {};
oFF.VdConfiguration.prototype = new oFF.XObject();
oFF.VdConfiguration.prototype._ff_c = "VdConfiguration";

oFF.VdConfiguration.createConfig = function(title, variableProcessor)
{
	let obj = new oFF.VdConfiguration();
	obj.setupConfig(title, variableProcessor);
	return obj;
};
oFF.VdConfiguration.prototype.m_autoSubmitOnStartup = false;
oFF.VdConfiguration.prototype.m_dateDisplayFormat = null;
oFF.VdConfiguration.prototype.m_dimensionDisplayInfo = null;
oFF.VdConfiguration.prototype.m_forceValueIdModification = false;
oFF.VdConfiguration.prototype.m_functionalValuesEnabled = false;
oFF.VdConfiguration.prototype.m_gridLayoutEnabled = false;
oFF.VdConfiguration.prototype.m_hideNotBetweenOperator = false;
oFF.VdConfiguration.prototype.m_implicitSubmit = false;
oFF.VdConfiguration.prototype.m_labelMode = null;
oFF.VdConfiguration.prototype.m_linkedVariableNames = null;
oFF.VdConfiguration.prototype.m_multiInputComponentEnabled = false;
oFF.VdConfiguration.prototype.m_newSettingsEnabled = false;
oFF.VdConfiguration.prototype.m_settingsPopoverEnabled = false;
oFF.VdConfiguration.prototype.m_startValues = null;
oFF.VdConfiguration.prototype.m_startValuesJson = null;
oFF.VdConfiguration.prototype.m_textVariablesEnabled = false;
oFF.VdConfiguration.prototype.m_title = null;
oFF.VdConfiguration.prototype.m_useDatePicker = false;
oFF.VdConfiguration.prototype.m_valueJsonFormat = null;
oFF.VdConfiguration.prototype.m_varProcessor = null;
oFF.VdConfiguration.prototype.m_variablesToDisplay = null;
oFF.VdConfiguration.prototype.m_variantManagement = false;
oFF.VdConfiguration.prototype.addDimensionDisplayInfo = function(dimensionName, displayInfo)
{
	if (oFF.XStringUtils.isNullOrEmpty(dimensionName))
	{
		return;
	}
	if (oFF.isNull(this.m_dimensionDisplayInfo))
	{
		this.m_dimensionDisplayInfo = oFF.XHashMapByString.create();
	}
	this.m_dimensionDisplayInfo.putIfNotNull(dimensionName, displayInfo);
};
oFF.VdConfiguration.prototype.getDateDisplayFormat = function()
{
	return this.m_dateDisplayFormat;
};
oFF.VdConfiguration.prototype.getDimensionDisplayInfo = function(dimensionName)
{
	return oFF.notNull(this.m_dimensionDisplayInfo) ? this.m_dimensionDisplayInfo.getByKey(dimensionName) : null;
};
oFF.VdConfiguration.prototype.getLabelMode = function()
{
	return this.m_labelMode;
};
oFF.VdConfiguration.prototype.getStartValueJson = function()
{
	return this.m_startValuesJson;
};
oFF.VdConfiguration.prototype.getStartValues = function()
{
	return this.m_startValues;
};
oFF.VdConfiguration.prototype.getTitle = function()
{
	return this.m_title;
};
oFF.VdConfiguration.prototype.getValueJsonFormat = function()
{
	return this.m_valueJsonFormat;
};
oFF.VdConfiguration.prototype.getVarProcessor = function()
{
	return this.m_varProcessor;
};
oFF.VdConfiguration.prototype.getVariablesToDisplay = function()
{
	return this.m_variablesToDisplay;
};
oFF.VdConfiguration.prototype.hideOperatorNotBetween = function(hide)
{
	this.m_hideNotBetweenOperator = hide;
};
oFF.VdConfiguration.prototype.isAutoSubmitOnStartup = function()
{
	return this.m_autoSubmitOnStartup;
};
oFF.VdConfiguration.prototype.isForceValueIdModification = function()
{
	return this.m_forceValueIdModification;
};
oFF.VdConfiguration.prototype.isFunctionalValuesEnabled = function()
{
	return this.m_functionalValuesEnabled;
};
oFF.VdConfiguration.prototype.isGridLayoutEnabled = function()
{
	return this.m_gridLayoutEnabled;
};
oFF.VdConfiguration.prototype.isHidingOperatorNotBetween = function()
{
	return this.m_hideNotBetweenOperator;
};
oFF.VdConfiguration.prototype.isLinkedVariable = function(varName)
{
	return oFF.notNull(this.m_linkedVariableNames) && this.m_linkedVariableNames.contains(varName);
};
oFF.VdConfiguration.prototype.isMultiInputComponentEnabled = function()
{
	return this.m_multiInputComponentEnabled;
};
oFF.VdConfiguration.prototype.isNewSettingsEnabled = function()
{
	return this.m_newSettingsEnabled;
};
oFF.VdConfiguration.prototype.isSettingsPopoverEnabled = function()
{
	return this.m_settingsPopoverEnabled;
};
oFF.VdConfiguration.prototype.isTextVariablesEnabled = function()
{
	return this.m_textVariablesEnabled;
};
oFF.VdConfiguration.prototype.isVariantManagementEnabled = function()
{
	return this.m_variantManagement;
};
oFF.VdConfiguration.prototype.releaseObject = function()
{
	this.m_title = null;
	this.m_varProcessor = null;
	this.m_labelMode = null;
	this.m_dateDisplayFormat = null;
	this.m_variablesToDisplay = null;
	this.m_startValues = null;
	this.m_linkedVariableNames = null;
	this.m_dimensionDisplayInfo = oFF.XObjectExt.release(this.m_dimensionDisplayInfo);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdConfiguration.prototype.setAutoSubmitOnStartup = function(autoSubmitOnStartup)
{
	this.m_autoSubmitOnStartup = autoSubmitOnStartup;
};
oFF.VdConfiguration.prototype.setDateDisplayFormat = function(dateDisplayFormat)
{
	if (oFF.XStringUtils.isNullOrEmpty(dateDisplayFormat))
	{
		this.m_dateDisplayFormat = oFF.VdConstants.DATE_DISPLAY_FORMAT;
	}
	else
	{
		this.m_dateDisplayFormat = dateDisplayFormat;
	}
};
oFF.VdConfiguration.prototype.setForceValueIdModification = function(forceValueIdModification)
{
	this.m_forceValueIdModification = forceValueIdModification;
};
oFF.VdConfiguration.prototype.setFunctionalValuesEnabled = function(functionalValuesEnabled)
{
	this.m_functionalValuesEnabled = functionalValuesEnabled;
};
oFF.VdConfiguration.prototype.setGridLayoutEnabled = function(gridLayoutEnabled)
{
	this.m_gridLayoutEnabled = gridLayoutEnabled;
};
oFF.VdConfiguration.prototype.setImplicitSubmit = function(implicitSubmit)
{
	this.m_implicitSubmit = implicitSubmit;
};
oFF.VdConfiguration.prototype.setLabelMode = function(labelMode)
{
	this.m_labelMode = labelMode;
};
oFF.VdConfiguration.prototype.setLinkedVariableNames = function(linkedVariableNames)
{
	this.m_linkedVariableNames = linkedVariableNames;
};
oFF.VdConfiguration.prototype.setMultiInputComponentEnabled = function(m_multiInputComponentEnabled)
{
	this.m_multiInputComponentEnabled = m_multiInputComponentEnabled;
};
oFF.VdConfiguration.prototype.setNewSettingsEnabled = function(newSettingsEnabled)
{
	this.m_newSettingsEnabled = newSettingsEnabled;
};
oFF.VdConfiguration.prototype.setSettingsPopoverEnabled = function(m_settingsPopoverEnabled)
{
	this.m_settingsPopoverEnabled = m_settingsPopoverEnabled;
};
oFF.VdConfiguration.prototype.setStartValues = function(startValues)
{
	this.m_startValues = startValues;
};
oFF.VdConfiguration.prototype.setStartValuesJson = function(format, startValuesJson)
{
	this.m_valueJsonFormat = format;
	this.m_startValuesJson = startValuesJson;
};
oFF.VdConfiguration.prototype.setTextVariablesEnabled = function(textVariablesEnabled)
{
	this.m_textVariablesEnabled = textVariablesEnabled;
};
oFF.VdConfiguration.prototype.setTitle = function(title)
{
	this.m_title = title;
};
oFF.VdConfiguration.prototype.setUseDatePicker = function(useDatePicker)
{
	this.m_useDatePicker = useDatePicker;
};
oFF.VdConfiguration.prototype.setVarProcessor = function(varProcessor)
{
	this.m_varProcessor = varProcessor;
};
oFF.VdConfiguration.prototype.setVariablesToDisplay = function(variablesToDisplay)
{
	this.m_variablesToDisplay = variablesToDisplay;
};
oFF.VdConfiguration.prototype.setVariantManagementEnabled = function(enabled)
{
	this.m_variantManagement = enabled;
};
oFF.VdConfiguration.prototype.setupConfig = function(title, variableProcessor)
{
	this.m_title = title;
	this.m_varProcessor = variableProcessor;
	this.m_dateDisplayFormat = oFF.VdConstants.DATE_DISPLAY_FORMAT;
	this.m_labelMode = oFF.DialogLabelMode.TEXT;
	this.m_useDatePicker = true;
	this.m_textVariablesEnabled = true;
	this.m_implicitSubmit = true;
	this.m_variantManagement = true;
	this.m_newSettingsEnabled = true;
	this.m_settingsPopoverEnabled = false;
	this.m_gridLayoutEnabled = false;
	this.m_multiInputComponentEnabled = false;
	this.m_forceValueIdModification = false;
};
oFF.VdConfiguration.prototype.useDatePicker = function()
{
	return this.m_useDatePicker;
};
oFF.VdConfiguration.prototype.useImplicitSubmit = function()
{
	return this.m_implicitSubmit;
};

oFF.VdImportExport = {

	addSupplementValues:function(dimension, valueBag, operand)
	{
			let displayKeyField = dimension.getDisplayKeyField();
		if (oFF.notNull(displayKeyField))
		{
			valueBag.addSupplementValue(displayKeyField.getName(), operand.getDisplayKey());
		}
		let textField = dimension.getTextField();
		if (oFF.notNull(textField))
		{
			valueBag.addSupplementValue(textField.getName(), operand.getText());
		}
	},
	createOperand:function(dimVar, memberFilter, valueBag)
	{
			let key = null;
		let value = valueBag.getValue();
		if (oFF.notNull(value))
		{
			key = value.getStringRepresentation();
		}
		let displayKey = valueBag.getDisplayKeySupplement(memberFilter);
		let text = valueBag.getTextSupplement(memberFilter);
		if (oFF.isNull(key) && oFF.isNull(displayKey) && oFF.isNull(text))
		{
			return null;
		}
		if (dimVar.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NAME_VARIABLE))
		{
			displayKey = key;
		}
		return oFF.FilterDialogValueFactory.createValueExt(key, displayKey, text, dimVar.getHierarchyName(), oFF.ComparisonOperator.EQUAL);
	},
	createXValue:function(type, key)
	{
			let firstAccess = oFF.XValueAccess.createWithType(type);
		firstAccess.parseString(key);
		return firstAccess.getValue();
	},
	getDimensionMemberValues:function(dimVar)
	{
			let values = oFF.XList.create();
		if (dimVar.hasMemberFilter())
		{
			values = oFF.VdImportExport.getDimensionMemberValuesFromFilter(dimVar, dimVar.getMemberFilter());
		}
		return values;
	},
	getDimensionMemberValuesFromFilter:function(dimVar, memberFilter)
	{
			let values = oFF.XList.create();
		for (let i = 0; i < memberFilter.size(); i++)
		{
			let filterOp = memberFilter.getOp(i);
			if (filterOp.getLow().getValueType() === oFF.XValueType.VARIABLE)
			{
				continue;
			}
			let vdOperator = oFF.VdComparisonOperator.lookupExt(filterOp.getComparisonOperator().getName(), filterOp.getSetSign() === oFF.SetSign.EXCLUDING);
			if (oFF.isNull(vdOperator))
			{
				continue;
			}
			if (vdOperator.isNullOperator())
			{
				values.add(oFF.VdValue.createValue(vdOperator, oFF.FilterDialogValueFactory.createNullValue(), null));
				continue;
			}
			let first = oFF.VdImportExport.createOperand(dimVar, memberFilter, filterOp.getLow());
			let second = oFF.VdImportExport.createOperand(dimVar, memberFilter, filterOp.getHigh());
			values.add(oFF.VdValue.createValue(vdOperator, first, second));
		}
		return values;
	},
	getDynamicFilterValues:function(dimVar)
	{
			if (!dimVar.isUsedInDynamicFilter() || dimVar.getDimension().getAxisType() === oFF.AxisType.REPOSITORY || !oFF.VdImportExport.useDynamicFilterForVariable(dimVar))
		{
			return null;
		}
		let values = oFF.XList.create();
		let dynamicFilter = dimVar.getQueryModel().getFilter().getDynamicFilter();
		let cartesianList;
		if (!dynamicFilter.isComplexFilter())
		{
			cartesianList = dynamicFilter.getCartesianProductWithDefault().getCartesianList(dimVar.getDimension());
			if (oFF.notNull(cartesianList))
			{
				values = oFF.VdImportExport.getDimensionMemberValuesFromFilter(dimVar, cartesianList);
			}
		}
		else
		{
			cartesianList = oFF.VdImportExport.searchChildrenForList(dimVar, dynamicFilter);
			if (oFF.notNull(cartesianList))
			{
				values = oFF.VdImportExport.getDimensionMemberValuesFromFilter(dimVar, cartesianList);
			}
		}
		return values;
	},
	getDynamicFilterValuesFromProcessor:function(variableProcessor)
	{
			let result = oFF.XHashMapByString.create();
		let variables = variableProcessor.getInputEnabledAndNonTechnicalVariables();
		for (let i = 0; i < variables.size(); i++)
		{
			let variable = variables.get(i);
			if (!variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
			{
				continue;
			}
			result.putIfNotNull(variable.getName(), oFF.VdImportExport.getDynamicFilterValues(variable));
		}
		return result;
	},
	getOptionListValues:function(optionVar)
	{
			let values = oFF.XList.create();
		let option = optionVar.getCurrentOption();
		if (oFF.notNull(option))
		{
			let item = oFF.FilterDialogValueFactory.createValue(option.getName(), null, option.getText());
			values.add(oFF.VdValue.createValue(oFF.VdComparisonOperator.UNDEFINED, item, null));
		}
		return values;
	},
	getSimpleTypeValue:function(variable, value)
	{
			let key = value.getFirstOperand().getKey();
		if (variable.getValueType().isTypeOf(oFF.XValueType.NUMBER) && oFF.XStringUtils.isNotNullAndNotEmpty(key) && oFF.XStringUtils.isNullOrEmpty(oFF.UiNumberFormatterCenter.getCenter().parseFormattedNumber(key)))
		{
			return null;
		}
		return key;
	},
	getSimpleTypeValues:function(simpleVar)
	{
			let values = oFF.XList.create();
		if (!simpleVar.supportsMultipleValues())
		{
			let simpleValue = simpleVar.getValue();
			if (oFF.notNull(simpleValue))
			{
				let item = oFF.FilterDialogValueFactory.createValue(simpleValue.getStringRepresentation(), null, null);
				values.add(oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, item, null));
			}
		}
		else
		{
			let simpleValues = simpleVar.getValues();
			for (let i = 0; i < simpleValues.size(); i++)
			{
				let fdItem = oFF.FilterDialogValueFactory.createValue(simpleValues.get(i).getStringRepresentation(), null, null);
				values.add(oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, fdItem, null));
			}
		}
		return values;
	},
	getValue:function(item, useDisplayKeys, keyNotCompoundField)
	{
			if (useDisplayKeys)
		{
			return item.getDisplayKey();
		}
		else if (oFF.notNull(keyNotCompoundField))
		{
			let keyNotCompound = item.getValueByField(keyNotCompoundField);
			if (oFF.notNull(keyNotCompound))
			{
				return keyNotCompound;
			}
		}
		return item.getKey();
	},
	getValuesFromProcessor:function(variableProcessor)
	{
			let result = oFF.XHashMapByString.create();
		let variables = variableProcessor.getInputEnabledAndNonTechnicalVariables();
		for (let i = 0; i < variables.size(); i++)
		{
			let variable = variables.get(i);
			result.put(variable.getName(), oFF.VdImportExport.getValuesFromVariable(variable));
		}
		return result;
	},
	getValuesFromVariable:function(variable)
	{
			let variableType = variable.getVariableType();
		if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			return oFF.VdImportExport.getDimensionMemberValues(variable);
		}
		else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
		{
			return oFF.VdImportExport.getOptionListValues(variable);
		}
		return oFF.VdImportExport.getSimpleTypeValues(variable);
	},
	searchChildrenForList:function(dimVar, element)
	{
			let childrenIterator = element.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let child = childrenIterator.next();
			if (child.getOlapComponentType().isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
			{
				let cartesianList = child;
				if (oFF.XString.isEqual(cartesianList.getDimensionName(), dimVar.getDimension().getName()))
				{
					return cartesianList;
				}
			}
			else
			{
				let children = oFF.VdImportExport.searchChildrenForList(dimVar, child);
				if (oFF.notNull(children))
				{
					return children;
				}
			}
		}
		return null;
	},
	setValuesToProcessor:function(processor, values)
	{
			let keys = values.getKeysAsIterator();
		while (keys.hasNext())
		{
			let varName = keys.next();
			let variable = processor.getVariable(varName);
			if (oFF.notNull(variable))
			{
				oFF.VdImportExport.setValuesToVariable(variable, values.getByKey(varName));
			}
		}
	},
	setValuesToVariable:function(variable, values)
	{
			variable.clear();
		if (!oFF.XCollectionUtils.hasElements(values))
		{
			return;
		}
		if (variable.hasExternalRepresentation())
		{
			variable.setExternalRepresentation(null);
		}
		let variableType = variable.getVariableType();
		if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let dimVar = variable;
			let dimension = dimVar.getDimension();
			let memberFilter = dimVar.getMemberFilter();
			memberFilter.addSupplementField(dimension.getDisplayKeyField());
			memberFilter.addSupplementField(dimension.getTextField());
			let useDisplayKeys = oFF.VdImportExport.submitOnDisplayKeys(values);
			let keyNotCompoundField = !useDisplayKeys && oFF.QVariableUtils.useKeyNotCompoundForVariableFilter(dimVar) ? dimension.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND) : null;
			if (useDisplayKeys)
			{
				memberFilter.setField(dimension.getDisplayKeyField());
			}
			else if (oFF.notNull(keyNotCompoundField))
			{
				memberFilter.setField(keyNotCompoundField);
			}
			let valueType = variable.getValueType();
			let memberField = memberFilter.getField();
			if (memberField === dimension.getHierarchyKeyField() && memberField.getValueType() !== dimension.getFlatKeyField().getValueType())
			{
				valueType = dimension.getFlatKeyField().getValueType();
			}
			for (let i = 0; i < values.size(); i++)
			{
				let vdValue = values.get(i);
				if (vdValue.isEmpty())
				{
					continue;
				}
				let operator = vdValue.getOperator();
				let setSign = oFF.SetSign.INCLUDING;
				if (operator === oFF.VdComparisonOperator.NOT_EQUAL)
				{
					operator = oFF.VdComparisonOperator.EQUAL;
					setSign = oFF.SetSign.EXCLUDING;
				}
				else if (operator === oFF.VdComparisonOperator.BETWEEN && oFF.VdImportExport.switchComparisonOperatorBetweenToEqual(vdValue, dimVar))
				{
					operator = oFF.VdComparisonOperator.EQUAL;
				}
				else if (operator === oFF.VdComparisonOperator.NOT_BETWEEN)
				{
					operator = oFF.VdImportExport.switchComparisonOperatorBetweenToEqual(vdValue, dimVar) ? oFF.VdComparisonOperator.EQUAL : oFF.VdComparisonOperator.BETWEEN;
					setSign = oFF.SetSign.EXCLUDING;
				}
				else if (operator === oFF.VdComparisonOperator.IS_NOT_NULL)
				{
					operator = oFF.VdComparisonOperator.IS_NULL;
					setSign = oFF.SetSign.EXCLUDING;
				}
				let filterElement = memberFilter.addNewCartesianElement();
				filterElement.setComparisonOperator(operator.getOriginOperator());
				filterElement.setSetSign(setSign);
				if (operator.getNumberOfParameters() < 1)
				{
					continue;
				}
				let firstValue = oFF.VdImportExport.getValue(vdValue.getFirstOperand(), useDisplayKeys, keyNotCompoundField);
				if (!oFF.VdImportExport.trySetValue(firstValue, dimension, filterElement.getLow(), vdValue.getFirstOperand(), valueType))
				{
					memberFilter.removeElement(filterElement);
					continue;
				}
				if (operator.getNumberOfParameters() < 2)
				{
					continue;
				}
				let secondValue = oFF.VdImportExport.getValue(vdValue.getSecondOperand(), useDisplayKeys, keyNotCompoundField);
				if (!oFF.VdImportExport.trySetValue(secondValue, dimension, filterElement.getHigh(), vdValue.getSecondOperand(), valueType))
				{
					memberFilter.removeElement(filterElement);
				}
			}
		}
		else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
		{
			let optionVar = variable;
			if (!optionVar.supportsMultipleValues())
			{
				optionVar.setOptionByName(values.get(0).getFirstOperand().getKey());
			}
			else
			{
				for (let j = 0; j < values.size(); j++)
				{
					optionVar.addOptionByName(values.get(j).getFirstOperand().getKey());
				}
			}
		}
		else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
		{
			let simpleVar = variable;
			if (!simpleVar.supportsMultipleValues())
			{
				simpleVar.setValueByString(oFF.VdImportExport.getSimpleTypeValue(variable, values.get(0)));
			}
			else
			{
				for (let k = 0; k < values.size(); k++)
				{
					simpleVar.addValueByString(oFF.VdImportExport.getSimpleTypeValue(variable, values.get(k)));
				}
			}
		}
	},
	submitOnDisplayKeys:function(values)
	{
			let keysAvailable = true;
		let displayKeysAvailable = true;
		for (let j = 0; j < values.size(); j++)
		{
			let vdValue = values.get(j);
			let operator = vdValue.getOperator();
			if (vdValue.isEmpty() || operator.getNumberOfParameters() <= 0)
			{
				continue;
			}
			let firstOperand = vdValue.getFirstOperand();
			let firstDisplayKey = firstOperand.getDisplayKey();
			if (!oFF.XString.isEqual(firstDisplayKey, oFF.VdConstants.BW_NULL_OPERATOR))
			{
				keysAvailable = keysAvailable && firstOperand.getKey() !== null;
				displayKeysAvailable = displayKeysAvailable && oFF.notNull(firstDisplayKey);
			}
			if (operator.getNumberOfParameters() < 2)
			{
				continue;
			}
			let secondOperand = vdValue.getSecondOperand();
			let secondDisplayKey = secondOperand.getDisplayKey();
			if (!oFF.XString.isEqual(secondDisplayKey, oFF.VdConstants.BW_NULL_OPERATOR))
			{
				keysAvailable = keysAvailable && secondOperand.getKey() !== null;
				displayKeysAvailable = displayKeysAvailable && oFF.notNull(secondDisplayKey);
			}
		}
		return !keysAvailable && displayKeysAvailable;
	},
	switchComparisonOperatorBetweenToEqual:function(value, dimVar)
	{
			if (value.isOperandFilled(oFF.VdValue.FIRST) && !value.isOperandFilled(oFF.VdValue.SECOND))
		{
			let supportedOperators = dimVar.getFilterCapability().getSupportedComparisonOperators(oFF.SetSign.INCLUDING);
			return oFF.notNull(supportedOperators) && supportedOperators.contains(value.getOperator() === oFF.VdComparisonOperator.BETWEEN ? oFF.ComparisonOperator.EQUAL : oFF.ComparisonOperator.NOT_EQUAL);
		}
		return false;
	},
	trySetValue:function(value, dimension, valueBag, item, valueType)
	{
			let highValue = oFF.VdImportExport.createXValue(valueType, value);
		if (oFF.isNull(highValue))
		{
			if (valueType.isDateBased())
			{
				highValue = oFF.VdImportExport.createXValue(oFF.XValueType.STRING, value);
			}
			if (oFF.isNull(highValue))
			{
				return false;
			}
		}
		valueBag.setValue(highValue);
		oFF.VdImportExport.addSupplementValues(dimension, valueBag, item);
		return true;
	},
	useDynamicFilterForVariable:function(dimVar)
	{
			return !oFF.QVariableUtils.useKeyNotCompoundForVariableFilter(dimVar);
	}
};

oFF.VdStartupAction = function() {};
oFF.VdStartupAction.prototype = new oFF.XObject();
oFF.VdStartupAction.prototype._ff_c = "VdStartupAction";

oFF.VdStartupAction.createAndRun = function(form, startValues, onSuccess, onFailure)
{
	let obj = new oFF.VdStartupAction();
	obj.setupAndRun(form, startValues, onSuccess, onFailure);
	return obj;
};
oFF.VdStartupAction.prototype.m_form = null;
oFF.VdStartupAction.prototype.m_onFailure = null;
oFF.VdStartupAction.prototype.m_onSuccess = null;
oFF.VdStartupAction.prototype.m_startValues = null;
oFF.VdStartupAction.prototype.releaseObject = function()
{
	this.m_form = null;
	this.m_onSuccess = null;
	this.m_onFailure = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdStartupAction.prototype.runAction = function()
{
	this.m_form.getStateHandler().reinitVariables(oFF.VariableProcessorCallbackLambda.createSingleUse((variableResult) => {
		if (variableResult.hasErrors())
		{
			this.m_onFailure(variableResult);
			return;
		}
		if (oFF.isNull(this.m_startValues))
		{
			this.m_startValues = oFF.VdImportExport.getValuesFromProcessor(this.m_form.getVariableProcessor());
		}
		oFF.VdValueHelp.updateDescriptions(this.m_form.getVariableProcessor(), this.m_startValues, () => {
			this.m_onSuccess(this.m_startValues);
		});
	}), null);
};
oFF.VdStartupAction.prototype.setupAndRun = function(form, startValues, onSuccess, onFailure)
{
	this.m_form = form;
	this.m_startValues = oFF.notNull(startValues) ? oFF.VdValue.cloneValueMap(startValues) : null;
	this.m_onSuccess = onSuccess;
	this.m_onFailure = onFailure;
	this.runAction();
};

oFF.VdValueRenderer = function() {};
oFF.VdValueRenderer.prototype = new oFF.XObject();
oFF.VdValueRenderer.prototype._ff_c = "VdValueRenderer";

oFF.VdValueRenderer.create = function(context, config, view, variable, value)
{
	let obj = new oFF.VdValueRenderer();
	obj.setupConfigurator(context, config, view, variable, value);
	return obj;
};
oFF.VdValueRenderer.prototype.m_config = null;
oFF.VdValueRenderer.prototype.m_context = null;
oFF.VdValueRenderer.prototype.m_value = null;
oFF.VdValueRenderer.prototype.m_variable = null;
oFF.VdValueRenderer.prototype.m_view = null;
oFF.VdValueRenderer.prototype.drawBooleanList = function(inputEnabled)
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let dropdown = this.m_view.getDropdown();
	dropdown.clearItems();
	if (!this.m_variable.isMandatory())
	{
		dropdown.addNewItem().setName(oFF.VdConstants.EMPTY_OPTION);
	}
	let itemTrue = dropdown.addNewItem();
	itemTrue.setName(oFF.XBoolean.convertToString(true));
	itemTrue.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_TRUE));
	let itemFalse = dropdown.addNewItem();
	itemFalse.setName(oFF.XBoolean.convertToString(false));
	itemFalse.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FALSE));
	let currentValue = this.m_value.getFirstOperand().getKey();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(currentValue))
	{
		dropdown.setSelectedName(currentValue);
	}
	this.dropdownOnly(inputEnabled);
};
oFF.VdValueRenderer.prototype.drawDimension = function(labelMode, inputEnabled)
{
	let comp = this.m_value.getOperator();
	let interval = this.m_variable.isInterval();
	let showTwoInputs = interval && comp.getNumberOfParameters() > 1;
	let dropdown = this.m_view.getDropdown();
	let input1 = this.m_view.getInput1();
	if (this.m_config.isMultiInputComponentEnabled())
	{
		let isEqualOrNotEqualOperator = comp.isEqualTo(oFF.VdComparisonOperator.EQUAL) || comp.isEqualTo(oFF.VdComparisonOperator.NOT_EQUAL);
		let isValueOperatorSameAsDropdownOperator = oFF.XString.isEqual(dropdown.getSelectedName(), comp.getName());
		let hasChips = isEqualOrNotEqualOperator && input1.hasChips();
		let isFirstMultiInputOperatorValue = isEqualOrNotEqualOperator && this.m_variable.getValuesWithOperator(comp).size() === 1;
		if (!isEqualOrNotEqualOperator || !isValueOperatorSameAsDropdownOperator || !hasChips || isFirstMultiInputOperatorValue)
		{
			this.setupComparisonDropdown(comp);
		}
		dropdown.setEditable(inputEnabled);
	}
	else
	{
		this.setupComparisonDropdown(comp);
		dropdown.setEnabled(inputEnabled);
	}
	let isFirst = this.m_variable.getValues().isEmpty() || this.m_variable.getValues().size() === 1 && this.m_variable.getValues().get(0) === this.m_variable.getInputValue();
	let isSingleValueAndEditableInput = this.m_config.isMultiInputComponentEnabled() && !this.m_variable.supportsMultipleValues();
	let hasOneOperandFilled = this.m_config.isMultiInputComponentEnabled() && this.m_value.getOperator().getNumberOfParameters() === 2 && !this.m_value.isEmpty();
	let isDeleteLineButtonVisible = hasOneOperandFilled || this.m_value !== this.m_variable.getInputValue() && (!isSingleValueAndEditableInput || this.m_value.isFilled());
	this.m_view.setDeleteLineButtonVisible(isDeleteLineButtonVisible, isFirst).setEnabled(inputEnabled);
	if (this.m_view.getDatePicker1() !== oFF.UiContextDummy.getSingleton())
	{
		this.m_view.setInput1Visible(false);
		this.m_view.setInput2Visible(false);
		this.hideEndButtons();
		let firstKey = this.m_value.getFirstOperand().getKey();
		if (oFF.XStringUtils.isNullOrEmpty(firstKey))
		{
			firstKey = this.m_value.getFirstOperand().getDisplayKey();
		}
		if (this.m_view.getDatePicker1().getCustomObject() !== oFF.VdControllerState.DIRTY)
		{
			let firstDate = this.getDateDisplayValue(firstKey);
			let datePicker1 = this.m_view.getDatePicker1();
			let shouldResetFirstDateText = this.m_config.isMultiInputComponentEnabled() && oFF.XStringUtils.isNullOrEmpty(firstDate) && oFF.XStringUtils.isNotNullAndNotEmpty(datePicker1.getValue());
			if (oFF.XStringUtils.isNotNullAndNotEmpty(firstDate) || shouldResetFirstDateText && datePicker1.getValueState() !== oFF.UiValueState.ERROR)
			{
				datePicker1.setValue(firstDate);
			}
		}
		let secondKey = this.m_value.getSecondOperand().getKey();
		if (oFF.XStringUtils.isNullOrEmpty(secondKey))
		{
			secondKey = this.m_value.getSecondOperand().getDisplayKey();
		}
		if (this.m_view.getDatePicker2().getCustomObject() !== oFF.VdControllerState.DIRTY)
		{
			let secondDate = this.getDateDisplayValue(secondKey);
			let datePicker2 = this.m_view.getDatePicker2();
			let shouldResetSecondDateText = this.m_config.isMultiInputComponentEnabled() && oFF.XStringUtils.isNullOrEmpty(secondDate) && oFF.XStringUtils.isNotNullAndNotEmpty(datePicker2.getValue());
			if (oFF.XStringUtils.isNotNullAndNotEmpty(secondDate) || shouldResetSecondDateText && datePicker2.getValueState() !== oFF.UiValueState.ERROR)
			{
				datePicker2.setValue(secondDate);
			}
		}
		if (this.m_config.isMultiInputComponentEnabled())
		{
			this.m_view.getDatePicker1().setEditable(inputEnabled);
			this.m_view.setDatePicker2Visible(showTwoInputs).setEditable(inputEnabled);
		}
		else
		{
			this.m_view.getDatePicker1().setEnabled(inputEnabled);
			this.m_view.setDatePicker2Visible(showTwoInputs).setEnabled(inputEnabled);
		}
	}
	else
	{
		let firstText = comp.isNullOperator() ? oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NULL) : this.getDisplayValue(labelMode, this.m_value, oFF.VdValue.FIRST);
		let secondText = this.getDisplayValue(labelMode, this.m_value, oFF.VdValue.SECOND);
		let hasFirstValue = oFF.XStringUtils.isNotNullAndNotEmpty(firstText);
		let hasSecondValue = oFF.XStringUtils.isNotNullAndNotEmpty(secondText);
		this.m_view.setDatePicker1Visible(false);
		this.m_view.setDatePicker2Visible(false);
		let isOperatorEqualOrNotEqual = comp === oFF.VdComparisonOperator.EQUAL || comp === oFF.VdComparisonOperator.NOT_EQUAL;
		if (this.m_config.isMultiInputComponentEnabled() && hasFirstValue && this.m_variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) && !this.isDatePickerSupported() && this.m_variable.supportsMultipleValues() && isOperatorEqualOrNotEqual)
		{
			let multiInput = input1;
			multiInput.setValue("");
			let chipName = this.generateChipName(this.m_value);
			if (multiInput.getChipByName(chipName) === null)
			{
				let chip = multiInput.addNewChip();
				chip.setEditable(true);
				chip.setText(firstText);
				chip.setTooltip(firstText);
				chip.setName(chipName);
			}
		}
		else
		{
			let shouldResetFirstInputText = this.m_config.isMultiInputComponentEnabled() && oFF.XStringUtils.isNullOrEmpty(firstText) && oFF.XStringUtils.isNotNullAndNotEmpty(input1.getValue()) && !hasSecondValue;
			if (!input1.isEditable() || !input1.isEnabled() || hasFirstValue || shouldResetFirstInputText)
			{
				if (!this.m_config.isMultiInputComponentEnabled() || input1.getValueState() !== oFF.UiValueState.ERROR)
				{
					input1.setValue(firstText);
				}
			}
			input1.setTooltip(comp.isNullOperator() || this.m_config.isMultiInputComponentEnabled() ? firstText : this.getDisplayValue(oFF.DialogLabelMode.KEY_AND_TEXT, this.m_value, oFF.VdValue.FIRST));
			if (this.m_config.isMultiInputComponentEnabled())
			{
				input1.setEditable(inputEnabled);
			}
			else
			{
				input1.setEnabled(inputEnabled);
				input1.setEditable(!hasFirstValue);
			}
		}
		let input2 = this.m_view.getInput2();
		let shouldResetSecondInputText = this.m_config.isMultiInputComponentEnabled() && (!showTwoInputs || oFF.XStringUtils.isNullOrEmpty(secondText) && oFF.XStringUtils.isNotNullAndNotEmpty(input2.getValue()) && !hasFirstValue);
		if (!input2.isEditable() || !input2.isEnabled() || hasSecondValue || shouldResetSecondInputText)
		{
			if (!this.m_config.isMultiInputComponentEnabled() || input2.getValueState() !== oFF.UiValueState.ERROR)
			{
				input2.setValue(secondText);
			}
		}
		if (this.m_config.isMultiInputComponentEnabled())
		{
			input2.setEditable(inputEnabled);
			input2.setTooltip(showTwoInputs ? secondText : null);
		}
		else
		{
			input2.setEnabled(inputEnabled);
			input2.setTooltip(showTwoInputs ? this.getDisplayValue(oFF.DialogLabelMode.KEY_AND_TEXT, this.m_value, oFF.VdValue.SECOND) : null);
			input2.setEditable(!hasSecondValue);
		}
		this.m_view.setInput2Visible(showTwoInputs);
		this.setValueHelpButton1Visibility(inputEnabled && (this.m_config.isMultiInputComponentEnabled() || !hasFirstValue) && this.m_variable.supportsValueHelp());
		this.setValueHelpButton2Visibility(inputEnabled && (this.m_config.isMultiInputComponentEnabled() || !hasSecondValue) && this.m_variable.supportsValueHelp() && showTwoInputs);
		if (this.m_config.isMultiInputComponentEnabled())
		{
			let isNullOperator = comp.isNullOperator();
			this.m_view.getInput1().setEditable(inputEnabled && !isNullOperator);
			this.m_view.getInput2().setEditable(inputEnabled && !isNullOperator);
		}
		else
		{
			this.m_view.getInput1().setEnabled(inputEnabled);
			this.m_view.getInput2().setEnabled(inputEnabled);
			this.m_view.getInput1().setShowClearIcon(inputEnabled && interval && hasFirstValue && !comp.isNullOperator());
			this.m_view.getInput2().setShowClearIcon(inputEnabled && interval && hasSecondValue && showTwoInputs);
		}
	}
};
oFF.VdValueRenderer.prototype.drawOptionList = function(inputEnabled)
{
	this.setupOptionDropdown();
	this.dropdownOnly(inputEnabled);
};
oFF.VdValueRenderer.prototype.drawSimple = function(inputEnabled)
{
	this.m_view.setDatePicker1Visible(false);
	let valueType = this.m_variable.getValueType();
	let firstKey = this.m_value.getFirstOperand().getDisplayKey();
	if (oFF.XStringUtils.isNullOrEmpty(firstKey))
	{
		firstKey = this.m_value.getFirstOperand().getKey();
	}
	if (valueType.isTypeOf(oFF.XValueType.STRING))
	{
		this.m_view.getInput1().setInputType(oFF.UiInputType.TEXT);
	}
	else if (valueType.isDateBased())
	{
		let datePicker1 = this.m_view.getDatePicker1();
		if (this.m_config.isMultiInputComponentEnabled())
		{
			datePicker1.setVisible(true).setEditable(inputEnabled);
		}
		else
		{
			datePicker1.setVisible(true).setEnabled(inputEnabled);
		}
		if (oFF.XStringUtils.isNullOrEmpty(firstKey))
		{
			datePicker1.setValue(null);
		}
		else
		{
			let dateValue = this.getDateDisplayValue(firstKey);
			datePicker1.setValue(oFF.notNull(dateValue) ? dateValue : firstKey);
		}
	}
	if (this.m_variable.getVariableType() === oFF.VariableType.TEXT_VARIABLE)
	{
		if (this.m_config.isMultiInputComponentEnabled())
		{
			this.m_view.getInput1().setEditable(inputEnabled && this.m_config.isTextVariablesEnabled());
		}
		else
		{
			this.m_view.getInput1().setEnabled(inputEnabled && this.m_config.isTextVariablesEnabled());
		}
	}
	else
	{
		if (this.m_config.isMultiInputComponentEnabled())
		{
			this.m_view.getInput1().setEditable(inputEnabled);
		}
		else
		{
			this.m_view.getInput1().setEnabled(inputEnabled);
		}
	}
	this.m_view.getInput1().setValue(firstKey);
	this.m_view.getInput1().setTooltip(firstKey);
	this.m_view.setDropdownVisible(false);
	this.m_view.setInput2Visible(false);
	this.hideEndButtons();
	let supportMultipleValues = this.m_variable.supportsMultipleValues();
	this.m_view.setDeleteLineButtonVisible(supportMultipleValues && this.m_value !== this.m_variable.getInputValue(), !supportMultipleValues || this.m_variable.getValues().isEmpty()).setEnabled(inputEnabled);
	this.m_view.setDatePicker2Visible(false);
};
oFF.VdValueRenderer.prototype.dropdownOnly = function(inputEnabled)
{
	if (this.m_config.isMultiInputComponentEnabled())
	{
		this.m_view.getDropdown().setEditable(inputEnabled);
	}
	else
	{
		this.m_view.getDropdown().setEnabled(inputEnabled);
	}
	this.m_view.getDropdown().setFlex("1 auto");
	this.m_view.setInput1Visible(false);
	this.m_view.setInput2Visible(false);
	this.hideEndButtons();
	this.m_view.setDeleteLineButtonVisible(false, this.m_variable.getValues().isEmpty());
	this.m_view.setDatePicker1Visible(false);
	this.m_view.setDatePicker2Visible(false);
};
oFF.VdValueRenderer.prototype.formatText = function(text, key, textField, keyField)
{
	if (oFF.notNull(keyField))
	{
		let shouldFormatAsDateTime = keyField.getValueType().isDateBased() ? oFF.VdVariableForm.isDatePickerSupported(this.m_variable.getVariable()) : keyField.getValueType().isDateTime();
		if (shouldFormatAsDateTime)
		{
			return oFF.UiNumberFormatterCenter.getCenter().formatTextForDateTimeKey(text, key, keyField.getValueType());
		}
	}
	if (oFF.notNull(textField) && textField.getValueType().isTypeOf(oFF.XValueType.NUMBER))
	{
		let formattedText = oFF.UiNumberFormatterCenter.getCenter().format(text);
		return oFF.XStringUtils.isNotNullAndNotEmpty(formattedText) ? formattedText : text;
	}
	return text;
};
oFF.VdValueRenderer.prototype.generateChipName = function(value)
{
	return this.m_variable.supportsValueHelp() && this.m_variable.hasCheckTable() && oFF.XStringUtils.isNotNullAndNotEmpty(value.getFirstOperand().getKey()) ? value.getFirstOperand().getKey() : value.getFirstOperand().getDisplayKey();
};
oFF.VdValueRenderer.prototype.getDateDisplayValue = function(key)
{
	if (oFF.XString.isEqual(key, oFF.VdConstants.BW_NULL_DATE))
	{
		return oFF.VdConstants.BW_NULL_OPERATOR;
	}
	if (oFF.XStringUtils.isNullOrEmpty(key))
	{
		return null;
	}
	let value = oFF.XValueAccess.createWithType(this.m_variable.getValueType());
	value.parseString(key);
	return value.getString();
};
oFF.VdValueRenderer.prototype.getDisplayValue = function(labelMode, value, operandIndex)
{
	let operand = value.getOperand(operandIndex);
	let key = operand.getDisplayKey();
	let hasKey = oFF.XStringUtils.isNotNullAndNotEmpty(key);
	if (!hasKey)
	{
		key = operand.getKey();
		hasKey = oFF.XStringUtils.isNotNullAndNotEmpty(key);
	}
	let text = operand.getText();
	let hasText = oFF.XStringUtils.isNotNullAndNotEmpty(text);
	let dimension = this.m_variable.getVariable().getDimension();
	let keyField = dimension.getKeyField();
	if (hasText)
	{
		text = this.formatText(text, key, dimension.getTextField(), keyField);
	}
	else if (hasKey)
	{
		key = this.formatText(key, key, keyField, keyField);
	}
	let result = key;
	if (labelMode === oFF.DialogLabelMode.KEY_AND_TEXT && hasText)
	{
		if (this.m_config.isSettingsPopoverEnabled())
		{
			result = hasKey ? oFF.XStringUtils.concatenate4(key, " (", text, ")") : text;
		}
		else
		{
			result = hasKey ? oFF.XStringUtils.concatenate4("[", key, "] ", text) : text;
		}
	}
	else if (labelMode === oFF.DialogLabelMode.TEXT && hasText)
	{
		result = text;
	}
	if (oFF.notNull(result) && oFF.XString.size(result) === 0)
	{
		return oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE);
	}
	return oFF.isNull(result) ? "" : result;
};
oFF.VdValueRenderer.prototype.getSupportedComparisonOperators = function(defaultSelection)
{
	let supportedComparisonOperators = this.m_variable.getSupportedComparisonOperators();
	if (defaultSelection === oFF.VdComparisonOperator.UNDEFINED || supportedComparisonOperators.contains(defaultSelection))
	{
		return supportedComparisonOperators;
	}
	let supportedOperators = oFF.XListOfNameObject.create();
	supportedOperators.addAll(supportedComparisonOperators);
	supportedOperators.add(defaultSelection);
	return supportedOperators;
};
oFF.VdValueRenderer.prototype.hideEndButtons = function()
{
	this.setValueHelpButton1Visibility(false);
	this.setValueHelpButton2Visibility(false);
	this.m_view.getInput1().setShowClearIcon(false);
	this.m_view.getInput2().setShowClearIcon(false);
};
oFF.VdValueRenderer.prototype.isDatePickerSupported = function()
{
	return oFF.VdVariableForm.isDatePickerSupported(this.m_variable.getVariable()) && this.m_config.useDatePicker();
};
oFF.VdValueRenderer.prototype.releaseObject = function()
{
	this.m_view = null;
	this.m_value = null;
	this.m_variable = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdValueRenderer.prototype.setValue = function(value)
{
	this.m_value = value;
};
oFF.VdValueRenderer.prototype.setValueHelpButton1Visibility = function(visible)
{
	this.m_view.getInput1().setShowValueHelp(visible);
};
oFF.VdValueRenderer.prototype.setValueHelpButton2Visibility = function(visible)
{
	this.m_view.getInput2().setShowValueHelp(visible);
};
oFF.VdValueRenderer.prototype.setupComparisonDropdown = function(defaultSelection)
{
	let isSmartphone = this.m_context.getDeviceInfo().isSmartphone();
	let supportedOperators = this.getSupportedComparisonOperators(defaultSelection);
	let dropdown = this.m_view.getDropdown();
	dropdown.clearItems();
	let size = supportedOperators.size();
	for (let i = 0; i < size; i++)
	{
		let op = supportedOperators.get(i);
		if (op === oFF.VdComparisonOperator.NOT_BETWEEN && op !== defaultSelection && this.m_config.isHidingOperatorNotBetween())
		{
			continue;
		}
		if (this.shouldFilterOperator(op))
		{
			continue;
		}
		let text = isSmartphone ? op.getLongText() : op.getShortText();
		dropdown.addNewItem().setCustomObject(op).setName(op.getName()).setText(text).setTooltip(text);
	}
	dropdown.setSelectedName(defaultSelection.getName()).setTooltip(isSmartphone ? defaultSelection.getLongText() : defaultSelection.getShortText());
	if (this.m_config.isMultiInputComponentEnabled())
	{
		this.m_view.setDropdownVisible(this.m_variable.getSupportedComparisonOperators().size() > 1);
	}
	else
	{
		this.m_view.setDropdownVisible(dropdown.getNumberOfItems() > 1);
	}
};
oFF.VdValueRenderer.prototype.setupConfigurator = function(context, config, view, variable, value)
{
	this.m_context = context;
	this.m_config = config;
	this.m_view = view;
	this.m_variable = variable;
	this.m_value = value;
	let valueName;
	let type = this.m_variable.getVariableType();
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	if (type === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
	{
		valueName = this.m_config.isMultiInputComponentEnabled() ? i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_MEMBER_ID) : i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_ID);
	}
	else if (type === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		valueName = this.m_config.isMultiInputComponentEnabled() ? i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NAME) : i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NAME);
	}
	else if (type === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		valueName = this.m_config.isMultiInputComponentEnabled() ? i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NODE) : i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NODE);
	}
	else
	{
		let valueType = this.m_variable.getValueType();
		if (valueType.isString())
		{
			valueName = this.m_config.isMultiInputComponentEnabled() ? i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_STRING) : i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_STRING);
		}
		else if (valueType.isNumber())
		{
			valueName = i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NUMBER);
		}
		else
		{
			valueName = i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE);
		}
	}
	let placeholder = i18n.getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_ENTER, valueName);
	this.m_view.getInput1().setPlaceholder(placeholder);
	this.m_view.getInput2().setPlaceholder(placeholder);
};
oFF.VdValueRenderer.prototype.setupOptionDropdown = function()
{
	let optionNames = oFF.XList.create();
	let options = this.m_variable.getOptions();
	let dropdown = this.m_view.getDropdown();
	dropdown.clearItems();
	let variable = this.m_variable.getVariable();
	let currencyVar = variable.getProcessingType() === oFF.ProcessingType.CURRENCY_CONVERSION;
	if (!this.m_variable.isMandatory() || currencyVar)
	{
		let emptyItem = dropdown.addNewItem();
		emptyItem.setName(oFF.VdConstants.EMPTY_OPTION);
		if (currencyVar)
		{
			emptyItem.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_EMPTY_CURRENCY_OPTION_TEXT));
		}
		optionNames.add(oFF.VdConstants.EMPTY_OPTION);
	}
	for (let j = 0; j < options.size(); j++)
	{
		let option = options.get(j);
		dropdown.addNewItem().setName(option.getName()).setText(option.getText());
		optionNames.add(option.getName());
	}
	let selectedOption = this.m_value.getFirstOperand().getKey();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(selectedOption))
	{
		if (!optionNames.contains(selectedOption))
		{
			dropdown.addNewItem().setName(selectedOption).setText(selectedOption);
		}
		dropdown.setSelectedName(selectedOption);
	}
};
oFF.VdValueRenderer.prototype.shouldFilterOperator = function(operator)
{
	let multiInputOperators = oFF.XList.create();
	multiInputOperators.add(oFF.VdComparisonOperator.EQUAL);
	multiInputOperators.add(oFF.VdComparisonOperator.NOT_EQUAL);
	return oFF.XStream.of(multiInputOperators).anyMatch((multiInputOperator) => {
		return this.m_config.isMultiInputComponentEnabled() && operator === multiInputOperator && this.m_value.getOperator() !== multiInputOperator && this.m_variable.isOperatorInUse(multiInputOperator) && !this.isDatePickerSupported();
	});
};
oFF.VdValueRenderer.prototype.update = function(labelMode, inputEnabled)
{
	let type = this.m_variable.getVariableType();
	if (this.m_variable.getValueType().isBoolean())
	{
		this.drawBooleanList(inputEnabled);
	}
	else if (type.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		this.drawDimension(labelMode, inputEnabled);
	}
	else if (type.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		this.drawOptionList(inputEnabled);
	}
	else
	{
		this.drawSimple(inputEnabled);
	}
};

oFF.VdVariableOrderComparator = function() {};
oFF.VdVariableOrderComparator.prototype = new oFF.XObject();
oFF.VdVariableOrderComparator.prototype._ff_c = "VdVariableOrderComparator";

oFF.VdVariableOrderComparator.INSTANCE = null;
oFF.VdVariableOrderComparator.getComparator = function()
{
	if (oFF.isNull(oFF.VdVariableOrderComparator.INSTANCE))
	{
		oFF.VdVariableOrderComparator.INSTANCE = new oFF.VdVariableOrderComparator();
	}
	return oFF.VdVariableOrderComparator.INSTANCE;
};
oFF.VdVariableOrderComparator.prototype.compare = function(o1, o2)
{
	let order1 = o1.getOrder();
	let order2 = o2.getOrder();
	if (order1 < order2)
	{
		return -1;
	}
	if (order1 > order2)
	{
		return 1;
	}
	return 0;
};

oFF.VdValue = function() {};
oFF.VdValue.prototype = new oFF.XObject();
oFF.VdValue.prototype._ff_c = "VdValue";

oFF.VdValue.EMPTY_OPERAND = null;
oFF.VdValue.FIRST = 0;
oFF.VdValue.NEXT_ID = 0;
oFF.VdValue.SECOND = 1;
oFF.VdValue.cloneValueMap = function(original)
{
	let clone = oFF.XHashMapByString.create();
	let keys = original.getKeysAsIterator();
	while (keys.hasNext())
	{
		let varName = keys.next();
		let values = original.getByKey(varName);
		clone.put(varName, oFF.XCollectionUtils.createListOfClones(values));
	}
	return clone;
};
oFF.VdValue.createValue = function(operator, first, second)
{
	let obj = new oFF.VdValue();
	obj.setupValue(operator, first, second);
	return obj;
};
oFF.VdValue.prototype.m_firstOperand = null;
oFF.VdValue.prototype.m_firstValueState = null;
oFF.VdValue.prototype.m_firstValueStateText = null;
oFF.VdValue.prototype.m_id = null;
oFF.VdValue.prototype.m_initialOperator = null;
oFF.VdValue.prototype.m_listeners = null;
oFF.VdValue.prototype.m_operator = null;
oFF.VdValue.prototype.m_secondOperand = null;
oFF.VdValue.prototype.m_secondValueState = null;
oFF.VdValue.prototype.m_secondValueStateText = null;
oFF.VdValue.prototype.m_valueStateListeners = null;
oFF.VdValue.prototype.addListener = function(listener)
{
	this.m_listeners.add(listener);
};
oFF.VdValue.prototype.addValueStateListener = function(listener)
{
	this.m_valueStateListeners.add(listener);
};
oFF.VdValue.prototype.callListener = function(index)
{
	for (let i = this.m_listeners.size() - 1; i >= 0; i--)
	{
		this.m_listeners.get(i).onValueChanged(this, index);
	}
};
oFF.VdValue.prototype.callOnInvalidValueState = function()
{
	for (let i = this.m_valueStateListeners.size() - 1; i >= 0; i--)
	{
		this.m_valueStateListeners.get(i).onInvalidValueState();
	}
};
oFF.VdValue.prototype.callValueStateListener = function()
{
	for (let i = this.m_valueStateListeners.size() - 1; i >= 0; i--)
	{
		this.m_valueStateListeners.get(i).onValueStateChanged();
	}
};
oFF.VdValue.prototype.clear = function()
{
	if (this.m_operator !== this.m_initialOperator || this.isOperandSet(0) || this.isOperandSet(1))
	{
		this.m_operator = this.m_initialOperator;
		this.m_firstOperand = oFF.VdValue.EMPTY_OPERAND;
		this.resetValueState(0);
		this.m_secondOperand = oFF.VdValue.EMPTY_OPERAND;
		this.resetValueState(1);
		this.callListener(-1);
	}
};
oFF.VdValue.prototype.cloneExt = function(flags)
{
	return oFF.VdValue.createValue(this.m_operator, this.m_firstOperand, this.m_secondOperand);
};
oFF.VdValue.prototype.createShallowCopy = function()
{
	let value = new oFF.VdValue();
	value.m_operator = this.m_operator;
	value.m_initialOperator = this.m_initialOperator;
	value.m_firstOperand = this.m_firstOperand;
	value.m_secondOperand = this.m_secondOperand;
	value.m_id = this.m_id;
	value.m_listeners = oFF.XList.create();
	value.m_valueStateListeners = oFF.XList.create();
	return value;
};
oFF.VdValue.prototype.getEmptyOperand = function()
{
	if (oFF.isNull(oFF.VdValue.EMPTY_OPERAND))
	{
		oFF.VdValue.EMPTY_OPERAND = oFF.FilterDialogValueFactory.createEmptyValue();
	}
	return oFF.VdValue.EMPTY_OPERAND;
};
oFF.VdValue.prototype.getFirstOperand = function()
{
	if (oFF.isNull(this.m_firstOperand))
	{
		return this.getEmptyOperand();
	}
	return this.m_firstOperand;
};
oFF.VdValue.prototype.getFirstValueState = function()
{
	return this.m_firstValueState;
};
oFF.VdValue.prototype.getFirstValueStateText = function()
{
	return this.m_firstValueStateText;
};
oFF.VdValue.prototype.getId = function()
{
	return this.m_id;
};
oFF.VdValue.prototype.getOperand = function(index)
{
	if (index < 0 || index > 1)
	{
		throw oFF.XException.createIllegalArgumentException("illegal index");
	}
	return index === 0 ? this.getFirstOperand() : this.getSecondOperand();
};
oFF.VdValue.prototype.getOperator = function()
{
	return this.m_operator;
};
oFF.VdValue.prototype.getSecondOperand = function()
{
	if (oFF.isNull(this.m_secondOperand))
	{
		return this.getEmptyOperand();
	}
	return this.m_secondOperand;
};
oFF.VdValue.prototype.getSecondValueState = function()
{
	return this.m_secondValueState;
};
oFF.VdValue.prototype.getSecondValueStateText = function()
{
	return this.m_secondValueStateText;
};
oFF.VdValue.prototype.getValueState = function(index)
{
	if (index < 0 || index > 1)
	{
		throw oFF.XException.createIllegalArgumentException("illegal index");
	}
	return index === 0 ? this.getFirstValueState() : this.getSecondValueState();
};
oFF.VdValue.prototype.hasErrors = function()
{
	if (this.m_operator.getNumberOfParameters() < 1)
	{
		return false;
	}
	return this.getFirstValueState() === oFF.UiValueState.ERROR || this.m_operator.getNumberOfParameters() > 1 && this.getSecondValueState() === oFF.UiValueState.ERROR;
};
oFF.VdValue.prototype.isEmpty = function()
{
	return !this.isOperandFilled(oFF.VdValue.FIRST) && (this.m_operator.getNumberOfParameters() < 2 || !this.isOperandFilled(oFF.VdValue.SECOND));
};
oFF.VdValue.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherValue = other;
	return oFF.XObjectExt.areEqual(this.getOperator(), otherValue.getOperator()) && this.operandsEqualTo(otherValue);
};
oFF.VdValue.prototype.isFilled = function()
{
	return this.isOperandFilled(oFF.VdValue.FIRST) && (this.m_operator.getNumberOfParameters() < 2 || this.isOperandFilled(oFF.VdValue.SECOND));
};
oFF.VdValue.prototype.isOperandFilled = function(index)
{
	let operand = this.getOperand(index);
	return operand.getKey() !== null || operand.getDisplayKey() !== null;
};
oFF.VdValue.prototype.isOperandSet = function(index)
{
	let operand = index === 0 ? this.m_firstOperand : this.m_secondOperand;
	return oFF.notNull(operand) && operand !== oFF.VdValue.EMPTY_OPERAND;
};
oFF.VdValue.prototype.isOperandSwitchRequired = function()
{
	return this.m_operator.getNumberOfParameters() === 2 && oFF.notNull(this.m_firstOperand) && oFF.notNull(this.m_secondOperand) && (this.m_firstOperand.getKey() !== null && this.m_secondOperand.getKey() !== null || this.m_firstOperand.hasDisplayKey() && this.m_secondOperand.hasDisplayKey()) && this.m_firstOperand.compareTo(this.m_secondOperand) > 0;
};
oFF.VdValue.prototype.operandsEqualTo = function(otherValue)
{
	if (oFF.isNull(otherValue) || this.getOperator().getNumberOfParameters() !== otherValue.getOperator().getNumberOfParameters())
	{
		return false;
	}
	let compareSecondOperand = this.getOperator().getNumberOfParameters() > 1;
	let firstOperand = this.getFirstOperand();
	let secondOperand = compareSecondOperand ? this.getSecondOperand() : null;
	let firstOperandOther = otherValue.getFirstOperand();
	let secondOperandOther = compareSecondOperand ? otherValue.getSecondOperand() : null;
	if (oFF.XObjectExt.areEqual(firstOperand, firstOperandOther) && oFF.XObjectExt.areEqual(secondOperand, secondOperandOther))
	{
		return true;
	}
	return this.isOperandSwitchRequired() && oFF.XObjectExt.areEqual(firstOperand, secondOperandOther) && oFF.XObjectExt.areEqual(secondOperand, firstOperandOther);
};
oFF.VdValue.prototype.releaseObject = function()
{
	this.m_id = null;
	this.m_operator = null;
	this.m_firstOperand = null;
	this.m_secondOperand = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdValue.prototype.removeFirstOperand = function()
{
	this.removeOperand(0);
};
oFF.VdValue.prototype.removeListener = function(listener)
{
	this.m_listeners.removeElement(listener);
};
oFF.VdValue.prototype.removeOperand = function(index)
{
	if (index < 0 || index > 1)
	{
		throw oFF.XException.createIllegalArgumentException("illegal index");
	}
	if (this.isOperandSet(index))
	{
		this.setOperand(index, oFF.VdValue.EMPTY_OPERAND);
	}
};
oFF.VdValue.prototype.removeSecondOperand = function()
{
	this.removeOperand(1);
};
oFF.VdValue.prototype.removeValueStateListener = function(listener)
{
	this.m_valueStateListeners.removeElement(listener);
};
oFF.VdValue.prototype.resetValueState = function(index)
{
	this.setValueState(index, "", oFF.UiValueState.NONE);
};
oFF.VdValue.prototype.setError = function(index, msg)
{
	this.setValueState(index, msg, oFF.UiValueState.ERROR);
};
oFF.VdValue.prototype.setFirstOperand = function(first)
{
	this.setOperand(0, first);
};
oFF.VdValue.prototype.setInfo = function(index, msg)
{
	this.setValueState(index, msg, oFF.UiValueState.INFORMATION);
};
oFF.VdValue.prototype.setOperand = function(index, operand)
{
	if (index < 0 || index > 1)
	{
		throw oFF.XException.createIllegalArgumentException("illegal index");
	}
	this.resetValueState(index);
	if (index === 0)
	{
		this.m_firstOperand = operand;
	}
	else
	{
		this.m_secondOperand = operand;
	}
	this.callListener(index);
};
oFF.VdValue.prototype.setOperator = function(operator)
{
	if (oFF.isNull(operator))
	{
		return;
	}
	if (operator.getNumberOfParameters() < 2)
	{
		this.m_secondOperand = oFF.VdValue.EMPTY_OPERAND;
	}
	if (operator.isNullOperator())
	{
		this.m_firstOperand = oFF.FilterDialogValueFactory.createNullValue();
	}
	else if (operator.getNumberOfParameters() < 1 || this.m_operator.isNullOperator())
	{
		this.m_firstOperand = oFF.VdValue.EMPTY_OPERAND;
	}
	this.m_operator = operator;
	this.callListener(-1);
};
oFF.VdValue.prototype.setSecondOperand = function(second)
{
	this.setOperand(1, second);
};
oFF.VdValue.prototype.setValueState = function(index, text, state)
{
	if (index <= 0)
	{
		this.m_firstValueStateText = text;
		this.m_firstValueState = state;
	}
	if (index < 0 || index === 1)
	{
		this.m_secondValueStateText = text;
		this.m_secondValueState = state;
	}
	this.callValueStateListener();
};
oFF.VdValue.prototype.setWarning = function(index, msg)
{
	this.setValueState(index, msg, oFF.UiValueState.WARNING);
};
oFF.VdValue.prototype.setupValue = function(operator, first, second)
{
	this.m_id = oFF.XInteger.convertToString(oFF.VdValue.NEXT_ID);
	oFF.VdValue.NEXT_ID = oFF.VdValue.NEXT_ID + 1;
	this.m_operator = oFF.notNull(operator) ? operator : oFF.VdComparisonOperator.UNDEFINED;
	this.m_initialOperator = this.m_operator;
	this.m_firstOperand = first;
	this.m_secondOperand = second;
	this.m_listeners = oFF.XList.create();
	this.m_valueStateListeners = oFF.XList.create();
	this.m_firstValueState = oFF.UiValueState.NONE;
	this.m_secondValueState = oFF.UiValueState.NONE;
};
oFF.VdValue.prototype.toString = function()
{
	let buffer = oFF.XStringBuffer.create();
	buffer.append("{");
	buffer.append(this.m_operator.getName());
	buffer.append(", ").append(this.getFirstOperand().toString());
	let secondOperand = this.getSecondOperand().toString();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(secondOperand))
	{
		buffer.append(", ").append(secondOperand);
	}
	buffer.append("}");
	return buffer.toString();
};
oFF.VdValue.prototype.updateOperandOrder = function()
{
	if (this.isOperandSwitchRequired())
	{
		let first = this.m_firstOperand;
		this.m_firstOperand = this.m_secondOperand;
		this.m_secondOperand = first;
		this.callListener(-1);
	}
};

oFF.VdResolveHelperHandle = function() {};
oFF.VdResolveHelperHandle.prototype = new oFF.XObject();
oFF.VdResolveHelperHandle.prototype._ff_c = "VdResolveHelperHandle";

oFF.VdResolveHelperHandle.createHandle = function(master, name)
{
	let obj = new oFF.VdResolveHelperHandle();
	obj.m_master = master;
	obj.m_name = name;
	return obj;
};
oFF.VdResolveHelperHandle.prototype.m_master = null;
oFF.VdResolveHelperHandle.prototype.m_name = null;
oFF.VdResolveHelperHandle.prototype.addResult = function(value)
{
	this.m_master.addResult(this.m_name, value);
};
oFF.VdResolveHelperHandle.prototype.getMaster = function()
{
	return this.m_master;
};
oFF.VdResolveHelperHandle.prototype.releaseObject = function()
{
	this.m_master = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.VdVariantManagerFactory = function() {};
oFF.VdVariantManagerFactory.prototype = new oFF.XObject();
oFF.VdVariantManagerFactory.prototype._ff_c = "VdVariantManagerFactory";

oFF.VdVariantManagerFactory.createFactory = function(context)
{
	let obj = new oFF.VdVariantManagerFactory();
	obj.m_context = context;
	return obj;
};
oFF.VdVariantManagerFactory.prototype.m_context = null;
oFF.VdVariantManagerFactory.prototype.newVariantPopupInstance = function()
{
	return oFF.VdVariantManager.createManager(this.m_context);
};
oFF.VdVariantManagerFactory.prototype.releaseObject = function()
{
	this.m_context = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.VdVariantComparator = function() {};
oFF.VdVariantComparator.prototype = new oFF.XObject();
oFF.VdVariantComparator.prototype._ff_c = "VdVariantComparator";

oFF.VdVariantComparator.s_instance = null;
oFF.VdVariantComparator.getInstance = function()
{
	if (oFF.isNull(oFF.VdVariantComparator.s_instance))
	{
		oFF.VdVariantComparator.s_instance = new oFF.VdVariantComparator();
	}
	return oFF.VdVariantComparator.s_instance;
};
oFF.VdVariantComparator.prototype.compare = function(o1, o2)
{
	let lcA = oFF.XString.toLowerCase(o1.getText());
	let lcB = oFF.XString.toLowerCase(o2.getText());
	return oFF.XString.compare(lcA, lcB);
};

oFF.VdHeaderButtons = function() {};
oFF.VdHeaderButtons.prototype = new oFF.XObject();
oFF.VdHeaderButtons.prototype._ff_c = "VdHeaderButtons";

oFF.VdHeaderButtons.createHeaderButtons = function(uiMgr, name)
{
	let obj = new oFF.VdHeaderButtons();
	obj.setupExt(uiMgr, name);
	return obj;
};
oFF.VdHeaderButtons.prototype.m_clearButton = null;
oFF.VdHeaderButtons.prototype.m_clipboardButton = null;
oFF.VdHeaderButtons.prototype.m_root = null;
oFF.VdHeaderButtons.prototype.getClearButton = function()
{
	return this.m_clearButton;
};
oFF.VdHeaderButtons.prototype.getClipboardButton = function()
{
	return this.m_clipboardButton;
};
oFF.VdHeaderButtons.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdHeaderButtons.prototype.releaseObject = function()
{
	this.m_clearButton = oFF.XObjectExt.release(this.m_clearButton);
	this.m_clipboardButton = oFF.XObjectExt.release(this.m_clipboardButton);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdHeaderButtons.prototype.setupExt = function(uiMgr, name)
{
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.addCssClass("ffVdVariableHeaderButtons");
	this.m_root.setName(oFF.XStringUtils.concatenate2("VariableHeaderButtons-", name));
	this.m_root.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setFlex("0 0 auto");
	this.m_root.setGap(oFF.UiCssGap.create("5px"));
	this.m_clearButton = this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_clearButton.addCssClass("ffVdVariableClearButton");
	this.m_clearButton.setName(oFF.XStringUtils.concatenate2("VariableClearButton-", name));
	this.m_clearButton.setIcon("delete");
	this.m_clearButton.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CLEAR));
	this.m_clearButton.setVisible(true);
	this.m_clearButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_clipboardButton = this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_clipboardButton.addCssClass("ffVdVariableClipboardButton");
	this.m_clipboardButton.setName(oFF.XStringUtils.concatenate2("VariableClipboardButton-", name));
	this.m_clipboardButton.setIcon("paste");
	this.m_clipboardButton.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.ClipboardDialogI18n.I18N_CB_CLIPBOARD));
	this.m_clipboardButton.setVisible(true);
	this.m_clipboardButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
};

oFF.VdVariableView = function() {};
oFF.VdVariableView.prototype = new oFF.XObject();
oFF.VdVariableView.prototype._ff_c = "VdVariableView";

oFF.VdVariableView.MOBILE_ICON_FONT_SIZE = "18px";
oFF.VdVariableView.create = function(uiMgr, name, headerButtons)
{
	let obj = new oFF.VdVariableView();
	obj.setupVariableView(uiMgr, name, headerButtons);
	return obj;
};
oFF.VdVariableView.prototype.m_body = null;
oFF.VdVariableView.prototype.m_dynamicFilterInfoIcon = null;
oFF.VdVariableView.prototype.m_dynamicFilterInfoPopover = null;
oFF.VdVariableView.prototype.m_header = null;
oFF.VdVariableView.prototype.m_headerButtons = null;
oFF.VdVariableView.prototype.m_icons = null;
oFF.VdVariableView.prototype.m_invisibleVariableTitleText = null;
oFF.VdVariableView.prototype.m_moreValuesBtn = null;
oFF.VdVariableView.prototype.m_name = null;
oFF.VdVariableView.prototype.m_root = null;
oFF.VdVariableView.prototype.m_techName = null;
oFF.VdVariableView.prototype.m_title = null;
oFF.VdVariableView.prototype.m_titleWrapper = null;
oFF.VdVariableView.prototype.m_uiMgr = null;
oFF.VdVariableView.prototype.m_valueViews = null;
oFF.VdVariableView.prototype.addNewHeaderIcon = function()
{
	let icon = this.m_icons.addNewItemOfType(oFF.UiType.ICON);
	icon.setMargin(oFF.UiCssBoxEdges.create("5px"));
	if (this.m_uiMgr.getDeviceInfo().isMobile())
	{
		icon.setIconSize(oFF.UiCssLength.create(oFF.VdVariableView.MOBILE_ICON_FONT_SIZE));
		icon.setMargin(oFF.UiCssBoxEdges.create("10px"));
	}
	return icon;
};
oFF.VdVariableView.prototype.addValue = function(view)
{
	this.m_valueViews.add(view);
	this.m_body.addItem(view.getRoot());
};
oFF.VdVariableView.prototype.buildUi = function()
{
	this.m_root = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.addCssClass("ffVdVariable");
	this.m_root.setName(oFF.XStringUtils.concatenate2("Variable-", this.m_name));
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 1rem 1.5rem 1rem"));
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_header = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_header.addCssClass("ffVdVariableHeader");
	this.m_header.setName(oFF.XStringUtils.concatenate2("VariableHeader-", this.m_name));
	this.m_header.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_header.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_header.setWidth(oFF.UiCssLength.create("100%"));
	this.m_header.setHeight(oFF.UiCssLength.create("auto"));
	this.m_header.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_titleWrapper = this.m_header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_titleWrapper.addCssClass("ffVdVariableTitleWrapper");
	this.m_titleWrapper.setName(oFF.XStringUtils.concatenate2("VariableTitleWrapper-", this.m_name));
	this.m_titleWrapper.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_titleWrapper.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_titleWrapper.setWrap(oFF.UiFlexWrap.WRAP);
	this.m_techName = this.m_titleWrapper.addNewItemOfType(oFF.UiType.LABEL);
	this.m_techName.addCssClass("ffVdVariableTechName");
	this.m_techName.setName(oFF.XStringUtils.concatenate2("VariableTechName-", this.m_name));
	this.m_techName.setWrapping(true);
	this.m_techName.setMargin(oFF.UiCssBoxEdges.create("0 0.3rem 0 0"));
	this.m_techName.setVisible(false);
	this.m_title = this.m_titleWrapper.addNewItemOfType(oFF.UiType.LABEL);
	this.m_title.addCssClass("ffVdVariableTitle");
	this.m_title.setName(oFF.XStringUtils.concatenate2("VariableTitle-", this.m_name));
	this.m_title.setWrapping(true);
	this.m_title.setFontWeight(oFF.UiFontWeight.BOLD);
	this.m_icons = this.m_titleWrapper.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_icons.addCssClass("ffVdVariableHeaderIcons");
	this.m_icons.setName(oFF.XStringUtils.concatenate2("VariableIcons-", this.m_name));
	this.m_icons.setFlex("0 0 auto");
	this.m_body = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_body.addCssClass("ffVdVariableBody");
	this.m_body.setName(oFF.XStringUtils.concatenate2("VariableBody-", this.m_name));
	this.m_body.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_invisibleVariableTitleText = this.m_root.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
};
oFF.VdVariableView.prototype.clearValues = function()
{
	this.m_moreValuesBtn = null;
	this.m_body.clearItems();
	this.m_valueViews.clear();
};
oFF.VdVariableView.prototype.getClearButton = function()
{
	if (oFF.notNull(this.m_headerButtons))
	{
		return this.m_headerButtons.getClearButton();
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableView.prototype.getClipboardButton = function()
{
	if (oFF.notNull(this.m_headerButtons))
	{
		return this.m_headerButtons.getClipboardButton();
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableView.prototype.getInvisibleVariableTitleText = function()
{
	if (oFF.isNull(this.m_invisibleVariableTitleText))
	{
		return oFF.UiContextDummy.getSingleton();
	}
	return this.m_invisibleVariableTitleText;
};
oFF.VdVariableView.prototype.getMoreButton = function()
{
	if (oFF.notNull(this.m_moreValuesBtn))
	{
		return this.m_moreValuesBtn;
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableView.prototype.getMoreButtonIndex = function()
{
	if (oFF.isNull(this.m_moreValuesBtn))
	{
		return -1;
	}
	return this.m_body.getIndexOfItem(this.m_moreValuesBtn);
};
oFF.VdVariableView.prototype.getNameLabel = function()
{
	return this.m_title;
};
oFF.VdVariableView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdVariableView.prototype.getTechnicalNameLabel = function()
{
	return this.m_techName;
};
oFF.VdVariableView.prototype.getValueViews = function()
{
	return this.m_valueViews;
};
oFF.VdVariableView.prototype.getVisibleProperty = function()
{
	return this.m_root;
};
oFF.VdVariableView.prototype.hideMoreButton = function()
{
	if (this.m_body.getItems().contains(this.m_moreValuesBtn))
	{
		this.m_body.removeItem(this.m_moreValuesBtn);
	}
};
oFF.VdVariableView.prototype.insertValue = function(index, view)
{
	this.m_valueViews.insert(index, view);
	this.m_body.insertItem(view.getRoot(), index);
};
oFF.VdVariableView.prototype.releaseObject = function()
{
	this.m_uiMgr = null;
	this.m_dynamicFilterInfoIcon = oFF.XObjectExt.release(this.m_dynamicFilterInfoIcon);
	this.m_dynamicFilterInfoPopover = oFF.XObjectExt.release(this.m_dynamicFilterInfoPopover);
	this.m_headerButtons = oFF.XObjectExt.release(this.m_headerButtons);
	this.m_valueViews = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_valueViews);
	this.m_invisibleVariableTitleText = oFF.XObjectExt.release(this.m_invisibleVariableTitleText);
	this.m_header = oFF.XObjectExt.release(this.m_header);
	this.m_techName = oFF.XObjectExt.release(this.m_techName);
	this.m_title = oFF.XObjectExt.release(this.m_title);
	this.m_body = oFF.XObjectExt.release(this.m_body);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableView.prototype.removeValue = function(view)
{
	this.m_body.removeItem(view.getRoot());
	this.m_valueViews.removeElement(view);
};
oFF.VdVariableView.prototype.setInfoText = function(infoText)
{
	let layout = this.m_root;
	let infoSection = layout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	infoSection.setDirection(oFF.UiFlexDirection.COLUMN);
	infoSection.addNewItemOfType(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.createExt(5, oFF.UiCssSizeUnit.PIXEL));
	let horizontal = infoSection.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	let infoIcon = horizontal.addNewItemOfType(oFF.UiType.ICON);
	infoIcon.setIcon("message-information");
	infoIcon.setEnabled(false);
	horizontal.addNewItemOfType(oFF.UiType.SPACER).setWidth(oFF.UiCssLength.createExt(5, oFF.UiCssSizeUnit.PIXEL));
	let infoLabel = horizontal.addNewItemOfType(oFF.UiType.LABEL);
	infoLabel.setName("VariableDialogTextVariableDisabledLbl");
	infoLabel.setText(infoText);
	infoLabel.setTextAlign(oFF.UiTextAlign.CENTER);
	infoLabel.setFontStyle(oFF.UiFontStyle.ITALIC);
	infoLabel.setWrapping(true);
	infoLabel.setEnabled(false);
	return infoSection;
};
oFF.VdVariableView.prototype.setupVariableView = function(uiMgr, name, headerButtons)
{
	this.m_uiMgr = uiMgr;
	this.m_name = name;
	this.m_valueViews = oFF.XList.create();
	this.buildUi();
	this.m_headerButtons = headerButtons;
	if (oFF.notNull(this.m_headerButtons))
	{
		this.m_header.addItem(this.m_headerButtons.getRoot());
	}
};
oFF.VdVariableView.prototype.showDynamicFilterInfoIcon = function()
{
	if (oFF.isNull(this.m_dynamicFilterInfoIcon))
	{
		this.m_dynamicFilterInfoIcon = this.addNewHeaderIcon();
		this.m_dynamicFilterInfoIcon.setName("DynamicFilterInfoIco");
		this.m_dynamicFilterInfoIcon.setIcon("message-information");
		let text = oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_FILTER_INFO);
		this.m_dynamicFilterInfoPopover = oFF.OlapUiIconPopover.createPopoverWithText(this.m_uiMgr, "DynamicFilterInfoPop", this.m_dynamicFilterInfoIcon, text);
	}
};
oFF.VdVariableView.prototype.showMoreButton = function()
{
	if (oFF.isNull(this.m_moreValuesBtn))
	{
		this.m_moreValuesBtn = this.m_body.addNewItemOfType(oFF.UiType.BUTTON);
		this.m_moreValuesBtn.setName("ffVdVariableMoreValueBtn");
		this.m_moreValuesBtn.setIcon("overflow");
		this.m_moreValuesBtn.setWidth(oFF.UiCssLength.create("100%"));
		this.m_moreValuesBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	}
	return this.m_moreValuesBtn;
};

oFF.VdVariableViewResponsiveTableRow = function() {};
oFF.VdVariableViewResponsiveTableRow.prototype = new oFF.XObject();
oFF.VdVariableViewResponsiveTableRow.prototype._ff_c = "VdVariableViewResponsiveTableRow";

oFF.VdVariableViewResponsiveTableRow.createVdVariableViewResponsiveTableRow = function(uiMgr, name, headerButtons, variableResTable)
{
	let obj = new oFF.VdVariableViewResponsiveTableRow();
	obj.setupVariableViewResponsiveTable(uiMgr, name, headerButtons, variableResTable);
	return obj;
};
oFF.VdVariableViewResponsiveTableRow.prototype.m_bodyWrapper = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_header = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_headerButtons = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_i18n = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_invisibleVariableTitleText = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_moreValuesBtn = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_name = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_nameLabel = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_popovers = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_resTableRow = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_technicalNameLabel = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_titleWrapper = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_uiMgr = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_valueViews = null;
oFF.VdVariableViewResponsiveTableRow.prototype.m_variableResTable = null;
oFF.VdVariableViewResponsiveTableRow.prototype.addNewHeaderIcon = function()
{
	let icon = this.m_titleWrapper.addNewItemOfType(oFF.UiType.ICON);
	let invisibleText = this.m_titleWrapper.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	invisibleText.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ICON_INVISIBLE_TEXT));
	icon.addLabelledBy(invisibleText);
	icon.addCssClass("ff-variable-title-icon");
	return icon;
};
oFF.VdVariableViewResponsiveTableRow.prototype.addValue = function(view)
{
	this.m_valueViews.add(view);
	this.m_bodyWrapper.addItem(view.getRoot());
};
oFF.VdVariableViewResponsiveTableRow.prototype.buildUi = function()
{
	this.m_resTableRow = this.m_variableResTable.addNewResponsiveTableRow();
	this.m_resTableRow.setName(oFF.XStringUtils.concatenate2("VariableRow-", this.m_name));
	let variableSection = this.m_variableResTable.getParent();
	this.m_invisibleVariableTitleText = variableSection.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	let variableTableCellWrapperClass = "ff-variable-cell-wrapper";
	this.m_titleWrapper = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_titleWrapper.setName(oFF.XStringUtils.concatenate2("VariableTitleWrapper-", this.m_name));
	this.m_titleWrapper.addCssClass(variableTableCellWrapperClass);
	this.m_titleWrapper.setJustifyContent(oFF.UiFlexJustifyContent.END);
	this.m_technicalNameLabel = this.m_titleWrapper.addNewItemOfType(oFF.UiType.LABEL);
	this.m_technicalNameLabel.setName(oFF.XStringUtils.concatenate2("VariableTechName-", this.m_name));
	this.m_technicalNameLabel.addCssClass("ff-with-space-after");
	this.m_technicalNameLabel.setVisible(false);
	this.m_nameLabel = this.m_titleWrapper.addNewItemOfType(oFF.UiType.LABEL);
	this.m_resTableRow.addResponsiveTableCell(this.m_titleWrapper);
	let valueCell = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	valueCell.addCssClass("ff-variable-value-wrapper");
	this.m_bodyWrapper = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_bodyWrapper.addCssClass("ff-variable-value");
	this.m_bodyWrapper.addCssClass(variableTableCellWrapperClass);
	valueCell.addItem(this.m_bodyWrapper);
	let variableActions = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_header = variableActions;
	this.m_header.addCssClass("ff-variable-value-icons");
	valueCell.addItem(this.m_header);
	this.m_resTableRow.addResponsiveTableCell(valueCell);
};
oFF.VdVariableViewResponsiveTableRow.prototype.clearValues = function()
{
	this.m_bodyWrapper.clearItems();
	this.m_valueViews.clear();
};
oFF.VdVariableViewResponsiveTableRow.prototype.getClearButton = function()
{
	if (oFF.notNull(this.m_headerButtons))
	{
		return this.m_headerButtons.getClearButton();
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewResponsiveTableRow.prototype.getClipboardButton = function()
{
	if (oFF.notNull(this.m_headerButtons))
	{
		return this.m_headerButtons.getClipboardButton();
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewResponsiveTableRow.prototype.getInvisibleVariableTitleText = function()
{
	if (oFF.isNull(this.m_invisibleVariableTitleText))
	{
		return oFF.UiContextDummy.getSingleton();
	}
	return this.m_invisibleVariableTitleText;
};
oFF.VdVariableViewResponsiveTableRow.prototype.getMoreButton = function()
{
	if (oFF.notNull(this.m_moreValuesBtn))
	{
		return this.m_moreValuesBtn;
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewResponsiveTableRow.prototype.getMoreButtonIndex = function()
{
	if (oFF.isNull(this.m_moreValuesBtn))
	{
		return -1;
	}
	return this.m_bodyWrapper.getIndexOfItem(this.m_moreValuesBtn);
};
oFF.VdVariableViewResponsiveTableRow.prototype.getNameLabel = function()
{
	return this.m_nameLabel;
};
oFF.VdVariableViewResponsiveTableRow.prototype.getRoot = function()
{
	return null;
};
oFF.VdVariableViewResponsiveTableRow.prototype.getTechnicalNameLabel = function()
{
	return this.m_technicalNameLabel;
};
oFF.VdVariableViewResponsiveTableRow.prototype.getValueViews = function()
{
	return this.m_valueViews;
};
oFF.VdVariableViewResponsiveTableRow.prototype.getVisibleProperty = function()
{
	return this.m_resTableRow;
};
oFF.VdVariableViewResponsiveTableRow.prototype.hideMoreButton = function()
{
	if (this.m_bodyWrapper.getItems().contains(this.m_moreValuesBtn))
	{
		this.m_bodyWrapper.removeItem(this.m_moreValuesBtn);
	}
};
oFF.VdVariableViewResponsiveTableRow.prototype.insertValue = function(index, view)
{
	this.m_valueViews.insert(index, view);
	this.m_bodyWrapper.insertItem(view.getRoot(), index);
};
oFF.VdVariableViewResponsiveTableRow.prototype.releaseObject = function()
{
	this.m_uiMgr = null;
	this.m_i18n = null;
	this.m_variableResTable = null;
	this.m_name = null;
	this.m_invisibleVariableTitleText = oFF.XObjectExt.release(this.m_invisibleVariableTitleText);
	this.m_valueViews = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_valueViews);
	this.m_header = oFF.XObjectExt.release(this.m_header);
	this.m_bodyWrapper = oFF.XObjectExt.release(this.m_bodyWrapper);
	this.m_nameLabel = oFF.XObjectExt.release(this.m_nameLabel);
	this.m_technicalNameLabel = oFF.XObjectExt.release(this.m_technicalNameLabel);
	this.m_resTableRow = oFF.XObjectExt.release(this.m_resTableRow);
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_popovers);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableViewResponsiveTableRow.prototype.removeValue = function(view)
{
	this.m_valueViews.removeElement(view);
	this.m_bodyWrapper.removeItem(view.getRoot());
};
oFF.VdVariableViewResponsiveTableRow.prototype.setInfoText = function(infoText)
{
	let infoIcon = this.addNewHeaderIcon();
	infoIcon.setIcon("message-information");
	infoIcon.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INFORMATION_ICON_TOOLTIP));
	infoIcon.setEnabled(false);
	let popoverInner = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	popoverInner.setDirection(oFF.UiFlexDirection.COLUMN);
	popoverInner.setAlignContent(oFF.UiFlexAlignContent.START);
	popoverInner.addNewItemOfType(oFF.UiType.LABEL).setText(infoText).setWrapping(true);
	let popover = oFF.OlapUiIconPopover.createPopoverWithContent(this.m_uiMgr, "VariableLinkPop", infoIcon, popoverInner);
	this.m_popovers.add(popover);
	return infoIcon;
};
oFF.VdVariableViewResponsiveTableRow.prototype.setupVariableViewResponsiveTable = function(uiMgr, name, headerButtons, variableResTable)
{
	this.m_uiMgr = uiMgr;
	this.m_i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_variableResTable = variableResTable;
	this.m_valueViews = oFF.XList.create();
	this.m_name = name;
	this.m_popovers = oFF.XList.create();
	this.buildUi();
	this.m_headerButtons = headerButtons;
	if (oFF.notNull(this.m_headerButtons))
	{
		this.m_header.addItem(this.m_headerButtons.getRoot());
	}
};
oFF.VdVariableViewResponsiveTableRow.prototype.showDynamicFilterInfoIcon = function() {};
oFF.VdVariableViewResponsiveTableRow.prototype.showMoreButton = function()
{
	if (oFF.isNull(this.m_moreValuesBtn))
	{
		this.m_moreValuesBtn = this.m_bodyWrapper.addNewItemOfType(oFF.UiType.BUTTON);
		this.m_moreValuesBtn.setName("ffVdVariableMoreValueBtn");
		this.m_moreValuesBtn.setIcon("overflow");
		this.m_moreValuesBtn.setWidth(oFF.UiCssLength.create("100%"));
		this.m_moreValuesBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	}
	return this.m_moreValuesBtn;
};

oFF.VdVariableViewValueWrapper = function() {};
oFF.VdVariableViewValueWrapper.prototype = new oFF.XObject();
oFF.VdVariableViewValueWrapper.prototype._ff_c = "VdVariableViewValueWrapper";

oFF.VdVariableViewValueWrapper.createVdVariableViewValueWrapper = function(uiMgr, name, headerButtons, variableValueLayout)
{
	let obj = new oFF.VdVariableViewValueWrapper();
	obj.setupVariableViewValueWrapper(uiMgr, name, headerButtons, variableValueLayout);
	return obj;
};
oFF.VdVariableViewValueWrapper.prototype.m_bodyWrapper = null;
oFF.VdVariableViewValueWrapper.prototype.m_header = null;
oFF.VdVariableViewValueWrapper.prototype.m_headerButtons = null;
oFF.VdVariableViewValueWrapper.prototype.m_invisibleVariableTitleText = null;
oFF.VdVariableViewValueWrapper.prototype.m_moreValuesBtn = null;
oFF.VdVariableViewValueWrapper.prototype.m_name = null;
oFF.VdVariableViewValueWrapper.prototype.m_uiMgr = null;
oFF.VdVariableViewValueWrapper.prototype.m_valueViews = null;
oFF.VdVariableViewValueWrapper.prototype.m_variableValueLayout = null;
oFF.VdVariableViewValueWrapper.prototype.addNewHeaderIcon = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.addValue = function(view)
{
	this.m_valueViews.add(view);
	this.m_bodyWrapper.addItem(view.getRoot());
};
oFF.VdVariableViewValueWrapper.prototype.buildUi = function()
{
	let valueWrapper = this.m_variableValueLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	valueWrapper.setName(oFF.XStringUtils.concatenate2("VariableValueWrapper-", this.m_name));
	valueWrapper.addCssClass("ff-variable-value-wrapper");
	this.m_bodyWrapper = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_bodyWrapper.addCssClass("ff-variable-value");
	this.m_bodyWrapper.addCssClass("ff-variable-cell-wrapper");
	valueWrapper.addItem(this.m_bodyWrapper);
	this.m_header = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_header.addCssClass("ff-variable-value-icons");
	valueWrapper.addItem(this.m_header);
	this.m_invisibleVariableTitleText = valueWrapper.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
};
oFF.VdVariableViewValueWrapper.prototype.clearValues = function()
{
	this.m_bodyWrapper.clearItems();
	this.m_valueViews.clear();
};
oFF.VdVariableViewValueWrapper.prototype.getClearButton = function()
{
	if (oFF.notNull(this.m_headerButtons))
	{
		return this.m_headerButtons.getClearButton();
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.getClipboardButton = function()
{
	if (oFF.notNull(this.m_headerButtons))
	{
		return this.m_headerButtons.getClipboardButton();
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.getInvisibleVariableTitleText = function()
{
	if (oFF.isNull(this.m_invisibleVariableTitleText))
	{
		oFF.UiContextDummy.getSingleton();
	}
	return this.m_invisibleVariableTitleText;
};
oFF.VdVariableViewValueWrapper.prototype.getMoreButton = function()
{
	if (oFF.notNull(this.m_moreValuesBtn))
	{
		return this.m_moreValuesBtn;
	}
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.getMoreButtonIndex = function()
{
	if (oFF.isNull(this.m_moreValuesBtn))
	{
		return -1;
	}
	return this.m_bodyWrapper.getIndexOfItem(this.m_moreValuesBtn);
};
oFF.VdVariableViewValueWrapper.prototype.getNameLabel = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.getRoot = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.getTechnicalNameLabel = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.getValueViews = function()
{
	return this.m_valueViews;
};
oFF.VdVariableViewValueWrapper.prototype.getVisibleProperty = function()
{
	return this.m_bodyWrapper;
};
oFF.VdVariableViewValueWrapper.prototype.hideMoreButton = function()
{
	if (this.m_bodyWrapper.getItems().contains(this.m_moreValuesBtn))
	{
		this.m_bodyWrapper.removeItem(this.m_moreValuesBtn);
	}
};
oFF.VdVariableViewValueWrapper.prototype.insertValue = function(index, view)
{
	this.m_valueViews.insert(index, view);
	this.m_bodyWrapper.insertItem(view.getRoot(), index);
};
oFF.VdVariableViewValueWrapper.prototype.releaseObject = function()
{
	this.m_uiMgr = null;
	this.m_variableValueLayout = null;
	this.m_name = null;
	this.m_invisibleVariableTitleText = oFF.XObjectExt.release(this.m_invisibleVariableTitleText);
	this.m_valueViews = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_valueViews);
	this.m_header = oFF.XObjectExt.release(this.m_header);
	this.m_bodyWrapper = oFF.XObjectExt.release(this.m_bodyWrapper);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableViewValueWrapper.prototype.removeValue = function(view)
{
	this.m_valueViews.removeElement(view);
	this.m_bodyWrapper.removeItem(view.getRoot());
};
oFF.VdVariableViewValueWrapper.prototype.setInfoText = function(infoText)
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdVariableViewValueWrapper.prototype.setupVariableViewValueWrapper = function(uiMgr, name, headerButtons, variableValueLayout)
{
	this.m_uiMgr = uiMgr;
	this.m_variableValueLayout = variableValueLayout;
	this.m_valueViews = oFF.XList.create();
	this.m_name = name;
	this.buildUi();
	this.m_headerButtons = headerButtons;
	if (oFF.notNull(this.m_headerButtons))
	{
		this.m_header.addItem(this.m_headerButtons.getRoot());
	}
};
oFF.VdVariableViewValueWrapper.prototype.showDynamicFilterInfoIcon = function() {};
oFF.VdVariableViewValueWrapper.prototype.showMoreButton = function()
{
	if (oFF.isNull(this.m_moreValuesBtn))
	{
		this.m_moreValuesBtn = this.m_bodyWrapper.addNewItemOfType(oFF.UiType.BUTTON);
		this.m_moreValuesBtn.setName("ffVdVariableMoreValueBtn");
		this.m_moreValuesBtn.setIcon("overflow");
		this.m_moreValuesBtn.setWidth(oFF.UiCssLength.create("100%"));
		this.m_moreValuesBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	}
	return this.m_moreValuesBtn;
};

oFF.VdView = function() {};
oFF.VdView.prototype = new oFF.XObject();
oFF.VdView.prototype._ff_c = "VdView";

oFF.VdView.create = function(uiManager, embedded, configuration)
{
	let obj = new oFF.VdView();
	obj.setupExt(uiManager, embedded, configuration);
	return obj;
};
oFF.VdView.prototype.m_config = null;
oFF.VdView.prototype.m_customSection = null;
oFF.VdView.prototype.m_customSectionPopover = null;
oFF.VdView.prototype.m_defaultValuesSection = null;
oFF.VdView.prototype.m_embedded = false;
oFF.VdView.prototype.m_i18n = null;
oFF.VdView.prototype.m_invisibleDropdownText = null;
oFF.VdView.prototype.m_invisibleFromText = null;
oFF.VdView.prototype.m_invisibleToText = null;
oFF.VdView.prototype.m_mandatoryVarsOnlyCb = null;
oFF.VdView.prototype.m_newSettingsSection = null;
oFF.VdView.prototype.m_root = null;
oFF.VdView.prototype.m_settingsButton = null;
oFF.VdView.prototype.m_settingsPopover = null;
oFF.VdView.prototype.m_showVarTechNamesCb = null;
oFF.VdView.prototype.m_uiMgr = null;
oFF.VdView.prototype.m_valuesDisplayDd = null;
oFF.VdView.prototype.m_variableLayouts = null;
oFF.VdView.prototype.m_variantLabel = null;
oFF.VdView.prototype.m_variantMenu = null;
oFF.VdView.prototype.m_variantMenuBtn = null;
oFF.VdView.prototype.m_variantSection = null;
oFF.VdView.prototype.addVariable = function(varName, withHeaderButtons)
{
	let headerButtons = null;
	if (withHeaderButtons)
	{
		headerButtons = oFF.VdHeaderButtons.createHeaderButtons(this.m_uiMgr, varName);
	}
	let variableView = oFF.VdVariableView.create(this.m_uiMgr, varName, headerButtons);
	this.m_variableLayouts.put(varName, variableView);
	this.m_root.addItem(variableView.getRoot());
	return variableView;
};
oFF.VdView.prototype.buildUi = function()
{
	this.m_root = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.addCssClass("ffVdDialogContent");
	this.m_root.setName("VariableDialogContent");
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	if (this.m_embedded)
	{
		this.m_root.addCssClass("ffVdEmbedded");
	}
	if (this.m_config.isSettingsPopoverEnabled())
	{
		let subHeaderSection;
		if (this.m_config.isGridLayoutEnabled())
		{
			subHeaderSection = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		}
		else
		{
			subHeaderSection = this.m_root.addNewItemOfType(oFF.UiType.TOOLBAR);
			subHeaderSection.setPadding(oFF.UiCssBoxEdges.create("1rem"));
			subHeaderSection.setMargin(oFF.UiCssBoxEdges.create("0 0 1rem 0"));
		}
		subHeaderSection.addCssClass("ffVdSubHeaderSection");
		subHeaderSection.setName("VariableDialogSubHeader");
		this.m_mandatoryVarsOnlyCb = subHeaderSection.addNewItemOfType(oFF.UiType.CHECKBOX);
		this.m_mandatoryVarsOnlyCb.setName("ShowMandatoryVariableOnlyCheckbox");
		this.m_mandatoryVarsOnlyCb.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_MANDATORY_VARS_ONLY));
		if (this.m_config.isGridLayoutEnabled())
		{
			let applyVariantSection = subHeaderSection.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
			applyVariantSection.addCssClass("ffVdVariantSection");
			applyVariantSection.setName("VariableDialogVariant");
			this.m_variantLabel = applyVariantSection.addNewItemOfType(oFF.UiType.LABEL);
			this.m_variantLabel.setText(oFF.XStringUtils.concatenate2(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_APPLY_VARIANT), ":"));
			this.m_variantMenuBtn = applyVariantSection.addNewItemOfType(oFF.UiType.MENU_BUTTON);
			this.m_variantMenuBtn.setName("VariableDialogVariantMenuBtn");
			this.m_variantLabel.setLabelFor(this.m_variantMenuBtn);
			this.setVariantDropdown();
		}
		else
		{
			subHeaderSection.addNewItemOfType(oFF.UiType.SPACER);
			this.m_variantLabel = subHeaderSection.addNewItemOfType(oFF.UiType.LABEL);
			this.m_variantLabel.setText(oFF.XStringUtils.concatenate2(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_APPLY_VARIANT), ":"));
			this.m_variantMenuBtn = subHeaderSection.addNewItemOfType(oFF.UiType.MENU_BUTTON);
			this.m_variantMenuBtn.setName("VariableDialogVariantMenuBtn");
			this.m_variantLabel.setLabelFor(this.m_variantMenuBtn);
			this.setVariantDropdown();
			subHeaderSection.addNewItemOfType(oFF.UiType.SPACER);
		}
		this.m_settingsButton = subHeaderSection.addNewItemOfType(oFF.UiType.BUTTON);
		this.m_settingsButton.setName("VariableDialogSettingsButton").setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_BTN));
		this.m_settingsButton.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_BTN));
		this.m_settingsButton.setIcon("slim-arrow-down");
		this.m_customSection = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		this.m_customSection.addCssClass("ffVdCustomSection");
		this.m_customSection.setPadding(oFF.UiCssBoxEdges.create("0 1rem 0 1rem"));
		this.setCustomSectionPopover();
		this.setDefaultValuesSection();
		this.m_newSettingsSection = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		this.m_newSettingsSection.addCssClass("ffVdCustomSection");
		this.setNewSettingsSection();
		this.setSettingsPopover();
	}
	else
	{
		this.m_customSection = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		this.m_customSection.addCssClass("ffVdCustomSection");
		this.m_customSection.setPadding(oFF.UiCssBoxEdges.create("0 1rem 0 1rem"));
		this.m_newSettingsSection = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		this.m_newSettingsSection.addCssClass("ffVdCustomSection");
		this.setNewSettingsSection();
		this.m_variantSection = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		this.m_variantSection.addCssClass("ffVdVariantSection");
		this.m_variantSection.setName("VariableDialogVariant");
		this.m_variantSection.setPadding(oFF.UiCssBoxEdges.create("0 1rem 1.5rem 1rem"));
		this.m_variantSection.setDirection(oFF.UiFlexDirection.COLUMN);
		this.m_variantLabel = this.m_variantSection.addNewItemOfType(oFF.UiType.LABEL);
		this.m_variantLabel.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_APPLY_VARIANT));
		this.m_variantMenuBtn = this.m_variantSection.addNewItemOfType(oFF.UiType.MENU_BUTTON);
		this.m_variantMenuBtn.setName("VariableDialogVariantMenuBtn");
		this.m_variantLabel.setLabelFor(this.m_variantMenuBtn);
		this.setVariantDropdown();
		this.m_root.addItem(this.m_variantSection);
	}
	this.m_invisibleDropdownText = this.m_root.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisibleDropdownText.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_OPERATOR_DROPDOWN_INVISIBLE_TEXT));
	this.m_invisibleFromText = this.m_root.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisibleFromText.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_1_INVISIBLE_TEXT));
	this.m_invisibleToText = this.m_root.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisibleToText.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_2_INVISIBLE_TEXT));
};
oFF.VdView.prototype.clearVariables = function()
{
	let varNames = this.m_variableLayouts.getKeysAsReadOnlyList();
	for (let i = 0; i < varNames.size(); i++)
	{
		let varName = varNames.get(i);
		let variableLayout = this.m_variableLayouts.remove(varName);
		this.m_root.removeItem(variableLayout.getRoot());
	}
};
oFF.VdView.prototype.getCustomSection = function()
{
	return this.m_customSection;
};
oFF.VdView.prototype.getCustomSectionPopover = function()
{
	return this.m_customSectionPopover;
};
oFF.VdView.prototype.getDefaultValuesSection = function()
{
	return this.m_defaultValuesSection;
};
oFF.VdView.prototype.getInvisibleDropdownText = function()
{
	if (oFF.isNull(this.m_invisibleDropdownText))
	{
		oFF.UiContextDummy.getSingleton();
	}
	return this.m_invisibleDropdownText;
};
oFF.VdView.prototype.getInvisibleFromText = function()
{
	if (oFF.isNull(this.m_invisibleFromText))
	{
		oFF.UiContextDummy.getSingleton();
	}
	return this.m_invisibleFromText;
};
oFF.VdView.prototype.getInvisibleToText = function()
{
	if (oFF.isNull(this.m_invisibleToText))
	{
		oFF.UiContextDummy.getSingleton();
	}
	return this.m_invisibleToText;
};
oFF.VdView.prototype.getMandatoryVarsOnlyCb = function()
{
	return this.m_mandatoryVarsOnlyCb;
};
oFF.VdView.prototype.getNewSettingsSection = function()
{
	return this.m_newSettingsSection;
};
oFF.VdView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdView.prototype.getRootNativeControl = function()
{
	let tmpRoot = this.getRoot();
	return tmpRoot.getNativeControl();
};
oFF.VdView.prototype.getSettingsButton = function()
{
	return this.m_settingsButton;
};
oFF.VdView.prototype.getSettingsPopover = function()
{
	return this.m_settingsPopover;
};
oFF.VdView.prototype.getShowVarTechNamesCb = function()
{
	return this.m_showVarTechNamesCb;
};
oFF.VdView.prototype.getValuesDisplayDd = function()
{
	if (oFF.isNull(this.m_valuesDisplayDd))
	{
		this.setValuesDisplayDd();
	}
	return this.m_valuesDisplayDd;
};
oFF.VdView.prototype.getVariantLabel = function()
{
	return this.m_variantLabel;
};
oFF.VdView.prototype.getVariantMenu = function()
{
	return this.m_variantMenu;
};
oFF.VdView.prototype.getVariantMenuBtn = function()
{
	return this.m_variantMenuBtn;
};
oFF.VdView.prototype.getVariantSection = function()
{
	return this.m_variantSection;
};
oFF.VdView.prototype.isMultiInputComponentEnabled = function()
{
	return this.m_config.isMultiInputComponentEnabled();
};
oFF.VdView.prototype.isSettingsPopoverEnabled = function()
{
	return this.m_config.isSettingsPopoverEnabled();
};
oFF.VdView.prototype.releaseObject = function()
{
	this.m_uiMgr = null;
	this.m_i18n = null;
	this.m_variableLayouts = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variableLayouts);
	this.m_variantLabel = oFF.XObjectExt.release(this.m_variantLabel);
	this.m_variantMenuBtn = oFF.XObjectExt.release(this.m_variantMenuBtn);
	this.m_variantSection = oFF.XObjectExt.release(this.m_variantSection);
	this.m_customSection = oFF.XObjectExt.release(this.m_customSection);
	this.m_newSettingsSection = oFF.XObjectExt.release(this.m_newSettingsSection);
	this.m_mandatoryVarsOnlyCb = oFF.XObjectExt.release(this.m_mandatoryVarsOnlyCb);
	this.m_showVarTechNamesCb = oFF.XObjectExt.release(this.m_showVarTechNamesCb);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_settingsPopover = oFF.XObjectExt.release(this.m_settingsPopover);
	this.m_customSectionPopover = oFF.XObjectExt.release(this.m_customSectionPopover);
	this.m_settingsPopover = oFF.XObjectExt.release(this.m_settingsPopover);
	this.m_defaultValuesSection = oFF.XObjectExt.release(this.m_defaultValuesSection);
	this.m_variantMenu = oFF.XObjectExt.release(this.m_variantMenu);
	this.m_invisibleDropdownText = oFF.XObjectExt.release(this.m_invisibleDropdownText);
	this.m_invisibleFromText = oFF.XObjectExt.release(this.m_invisibleFromText);
	this.m_invisibleToText = oFF.XObjectExt.release(this.m_invisibleToText);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdView.prototype.setCustomSectionPopover = function()
{
	this.m_customSectionPopover = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_customSectionPopover.addCssClass("ffVdCustomSection");
	this.m_customSectionPopover.setDirection(oFF.UiFlexDirection.COLUMN);
};
oFF.VdView.prototype.setDefaultValuesSection = function()
{
	this.m_defaultValuesSection = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_defaultValuesSection.setName("VdDefaultValuesSection");
	this.m_defaultValuesSection.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_defaultValuesSection.setVisible(false);
	let headerTitle = this.m_defaultValuesSection.addNewItemOfType(oFF.UiType.TEXT);
	headerTitle.setFontWeight(oFF.UiFontWeight.BOLD);
	headerTitle.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DEFAULT_VALUES_SECTION));
	headerTitle.setMargin(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
};
oFF.VdView.prototype.setNewSettingsSection = function()
{
	this.m_newSettingsSection.setName("VariableDialogNewSettingsLayout");
	this.m_newSettingsSection.useMaxWidth();
	this.m_newSettingsSection.setPadding(oFF.UiCssBoxEdges.create("0 1rem 0.75rem 1rem"));
	this.m_newSettingsSection.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_newSettingsSection.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_showVarTechNamesCb = this.m_uiMgr.newControl(oFF.UiType.CHECKBOX);
	this.m_showVarTechNamesCb.setName("ShowVariableTechnicalNamesCheckbox");
	this.m_showVarTechNamesCb.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_VARIABLE_TECHNICAL_NAMES));
	this.m_showVarTechNamesCb.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_VARIABLE_TECHNICAL_NAMES));
	if (!this.m_config.isSettingsPopoverEnabled())
	{
		this.m_mandatoryVarsOnlyCb = this.m_newSettingsSection.addNewItemOfType(oFF.UiType.CHECKBOX);
		this.m_mandatoryVarsOnlyCb.setName("ShowMandatoryVariableOnlyCheckbox");
		this.m_mandatoryVarsOnlyCb.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_MANDATORY_VARS_ONLY));
		this.m_mandatoryVarsOnlyCb.setMargin(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
		this.m_showVarTechNamesCb.setMargin(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
		this.m_newSettingsSection.addItem(this.m_showVarTechNamesCb);
	}
};
oFF.VdView.prototype.setSettingsPopover = function()
{
	this.m_settingsPopover = this.m_uiMgr.newControl(oFF.UiType.RESPONSIVE_POPOVER);
	this.m_settingsPopover.setName("SettingsPopover");
	this.m_settingsPopover.setPlacement(oFF.UiPlacementType.BOTTOM);
	this.m_settingsPopover.setShowHeader(false);
	let displaySectionHeader = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	displaySectionHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	displaySectionHeader.setName("SettingsPopoverDisplaySectionHeader");
	let headerTitle = displaySectionHeader.addNewItemOfType(oFF.UiType.TEXT);
	headerTitle.setFontWeight(oFF.UiFontWeight.BOLD);
	headerTitle.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DISPLAY_SECTION));
	headerTitle.setMargin(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
	let m_valuesDisplayDdLabel = this.m_uiMgr.newControl(oFF.UiType.LABEL);
	m_valuesDisplayDdLabel.setText(oFF.XStringUtils.concatenate2(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD), ":"));
	if (oFF.isNull(this.m_valuesDisplayDd))
	{
		this.setValuesDisplayDd();
	}
	let settingsPopoverLayout = this.m_settingsPopover.setNewContent(oFF.UiType.FLEX_LAYOUT);
	settingsPopoverLayout.setName("SettingsPopoverContentSection");
	settingsPopoverLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	settingsPopoverLayout.setJustifyContent(oFF.UiFlexJustifyContent.START);
	let wrapperLayout = settingsPopoverLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	wrapperLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	wrapperLayout.setPadding(oFF.UiCssBoxEdges.create("1rem 1rem 0 1rem"));
	wrapperLayout.addItem(this.m_defaultValuesSection);
	wrapperLayout.addItem(displaySectionHeader);
	wrapperLayout.addItem(this.m_customSectionPopover);
	wrapperLayout.addItem(this.m_showVarTechNamesCb);
	let valuesDisplayWrapperLayout = settingsPopoverLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	valuesDisplayWrapperLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	valuesDisplayWrapperLayout.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	valuesDisplayWrapperLayout.addItem(m_valuesDisplayDdLabel);
	valuesDisplayWrapperLayout.addItem(this.m_valuesDisplayDd);
	let footerLayout = settingsPopoverLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	footerLayout.setName("SettingsPopoverFooterSection");
	footerLayout.setDirection(oFF.UiFlexDirection.ROW_REVERSE);
	footerLayout.setPadding(oFF.UiCssBoxEdges.create("0.25rem 1rem"));
	footerLayout.setMargin(oFF.UiCssBoxEdges.create("0 0 auto 0"));
	let closeBtn = footerLayout.addNewItemOfType(oFF.UiType.DIALOG_BUTTON);
	closeBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	closeBtn.setName("SettingsPopoverCloseButton");
	closeBtn.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_CLOSE));
	closeBtn.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_CLOSE));
	closeBtn.registerOnPress(oFF.UiLambdaPressListener.create((_event) => {
		this.m_settingsPopover.close();
	}));
};
oFF.VdView.prototype.setValuesDisplayDd = function()
{
	this.m_valuesDisplayDd = this.m_uiMgr.newControl(oFF.UiType.DROPDOWN);
	this.m_valuesDisplayDd.setName("VdSettingsValuesDisplayDd");
	this.m_valuesDisplayDd.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD));
	this.m_valuesDisplayDd.addNewItem().setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_DESC_ITEM)).setName("Description").setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_DESC_ITEM));
	this.m_valuesDisplayDd.addNewItem().setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_ITEM)).setName("ID").setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_ITEM));
	this.m_valuesDisplayDd.addNewItem().setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_DESC_ITEM)).setName("ID and Description").setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_DESC_ITEM));
};
oFF.VdView.prototype.setVariantDropdown = function()
{
	this.m_variantMenu = this.m_uiMgr.newControl(oFF.UiType.MENU);
	if (!this.m_config.isSettingsPopoverEnabled())
	{
		this.m_variantMenuBtn.setWidth(oFF.UiCssLength.create("25%"));
	}
	let noneItem = this.m_variantMenu.addNewItem();
	noneItem.setName("VariableDialogVariantMenuNoneItem");
	noneItem.setText("None");
	this.m_variantMenuBtn.setMenu(this.m_variantMenu);
	this.m_variantMenuBtn.setText(noneItem.getText());
};
oFF.VdView.prototype.setupExt = function(uiManager, embedded, configuration)
{
	this.m_uiMgr = uiManager;
	this.m_i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_variableLayouts = oFF.XHashMapByString.create();
	this.m_embedded = embedded;
	this.m_config = configuration;
	this.buildUi();
};

oFF.VdAbstractValueView = function() {};
oFF.VdAbstractValueView.prototype = new oFF.XObject();
oFF.VdAbstractValueView.prototype._ff_c = "VdAbstractValueView";

oFF.VdAbstractValueView.prototype.getDatePicker1 = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.getDatePicker2 = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.getDeleteLineButton = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.getDropdown = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.getInput1 = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.getInput2 = function()
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.setDateDisplayFormat = function(displayFormat) {};
oFF.VdAbstractValueView.prototype.setDatePicker1Visible = function(visible)
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.setDatePicker2Visible = function(visible)
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.setDateValueFormat = function(valueFormat) {};
oFF.VdAbstractValueView.prototype.setDeleteLineButtonVisible = function(visible, isFirst)
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.setDropdownVisible = function(visible)
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.setInput1Visible = function(visible)
{
	return oFF.UiContextDummy.getSingleton();
};
oFF.VdAbstractValueView.prototype.setInput2Visible = function(visible)
{
	return oFF.UiContextDummy.getSingleton();
};

oFF.VdAbstractValueParser = function() {};
oFF.VdAbstractValueParser.prototype = new oFF.XObject();
oFF.VdAbstractValueParser.prototype._ff_c = "VdAbstractValueParser";

oFF.VdAbstractValueParser.getSAPFormat = function(valueType, stringValue)
{
	let value = oFF.XValueAccess.createWithType(valueType);
	value.parseString(stringValue);
	if (valueType === oFF.XValueType.TIME)
	{
		return value.getTime().toSAPFormat();
	}
	if (valueType === oFF.XValueType.DATE)
	{
		return value.getDate().toSAPFormat();
	}
	if (valueType === oFF.XValueType.DATE_TIME)
	{
		return value.getDateTime().toSAPFormat();
	}
	return value.getString();
};
oFF.VdAbstractValueParser.getTextOrDisplayKey = function(item)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(item.getText()))
	{
		return item.getText();
	}
	else if (item.hasDisplayKey())
	{
		return item.getDisplayKey();
	}
	return null;
};
oFF.VdAbstractValueParser.isBw = function(variable)
{
	let systemName = variable.getDataSource().getSystemName();
	let systemDescription = variable.getApplication().getSystemLandscape().getSystemDescription(systemName);
	return systemDescription.getSystemType().isTypeOf(oFF.SystemType.ABAP);
};
oFF.VdAbstractValueParser.useKeysAsDisplayKeys = function(variable, isLinked)
{
	if (!oFF.VdAbstractValueParser.isBw(variable) || !variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return false;
	}
	let dimVar = variable;
	if (dimVar.isEnforcedDynamicValue())
	{
		return false;
	}
	let dimension = dimVar.getDimension();
	if (!dimVar.supportsValueHelp())
	{
		return true;
	}
	return !isLinked && !dimension.isStructure() && !dimension.isHierarchyActive() && !dimVar.getValueType().isDateBased() && !dimension.getHasCheckTable();
};

oFF.VdDragonflyEntryPoint = {

	createEntryPoint:function(title, variableProcessor, listener)
	{
			let uiMgr = variableProcessor.getApplication().getUiManager();
		let displayFactory = oFF.OlapUiDisplayFactory.createFactoryForDialog(uiMgr);
		let context = oFF.OlapUiContext.createContext(uiMgr, displayFactory);
		let config = oFF.VdConfiguration.createConfig(title, variableProcessor);
		config.setFunctionalValuesEnabled(true);
		return oFF.VdVariableDialog.createAsDisplay(context, config, listener);
	}
};

oFF.DialogEntryPoint = function() {};
oFF.DialogEntryPoint.prototype = new oFF.XObject();
oFF.DialogEntryPoint.prototype._ff_c = "DialogEntryPoint";

oFF.DialogEntryPoint.prototype.m_uiContext = null;
oFF.DialogEntryPoint.prototype.getUiContext = function()
{
	return this.m_uiContext;
};
oFF.DialogEntryPoint.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_uiContext = null;
};
oFF.DialogEntryPoint.prototype.setupEntryPoint = function(application)
{
	let uiMgr = application.getProcess().getSubSystem(oFF.SubSystemType.GUI);
	if (oFF.isNull(uiMgr))
	{
		uiMgr = application.getUiManager();
	}
	let displayFactory = oFF.OlapUiDisplayFactory.createFactoryForDialog(uiMgr);
	let uiContext = oFF.OlapUiContext.createContext(uiMgr, displayFactory);
	this.setupEntryPointWithContext(uiContext);
};
oFF.DialogEntryPoint.prototype.setupEntryPointWithContext = function(uiContext)
{
	this.m_uiContext = uiContext;
};

oFF.VdOrcaPlanningSequenceHandler = function() {};
oFF.VdOrcaPlanningSequenceHandler.prototype = new oFF.XObject();
oFF.VdOrcaPlanningSequenceHandler.prototype._ff_c = "VdOrcaPlanningSequenceHandler";

oFF.VdOrcaPlanningSequenceHandler.create = function(originalHandler, analyticProcessor, startValues)
{
	let obj = new oFF.VdOrcaPlanningSequenceHandler();
	obj.setupExt(originalHandler, analyticProcessor, startValues);
	return obj;
};
oFF.VdOrcaPlanningSequenceHandler.prototype.m_analyticProcessor = null;
oFF.VdOrcaPlanningSequenceHandler.prototype.m_originalHandler = null;
oFF.VdOrcaPlanningSequenceHandler.prototype.m_startValues = null;
oFF.VdOrcaPlanningSequenceHandler.prototype.activateVariant = function(variant, listener, customIdentifier)
{
	this.m_originalHandler.activateVariant(variant, listener, customIdentifier);
};
oFF.VdOrcaPlanningSequenceHandler.prototype.cancelReinitVariables = function(startValues, listener, customIdentifier)
{
	if (oFF.isNull(this.m_analyticProcessor))
	{
		listener.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, customIdentifier);
	}
	else
	{
		this.m_analyticProcessor.cancelReinitVariables(startValues, listener, customIdentifier);
	}
};
oFF.VdOrcaPlanningSequenceHandler.prototype.getSubmitProcessor = function()
{
	if (oFF.isNull(this.m_analyticProcessor))
	{
		return null;
	}
	return this.m_analyticProcessor.getSubmitProcessor();
};
oFF.VdOrcaPlanningSequenceHandler.prototype.reinitVariables = function(listener, customIdentifier)
{
	this.m_originalHandler.reinitVariables(listener, customIdentifier);
};
oFF.VdOrcaPlanningSequenceHandler.prototype.releaseObject = function()
{
	this.m_originalHandler = null;
	this.m_analyticProcessor = null;
	this.m_startValues = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdOrcaPlanningSequenceHandler.prototype.saveVariant = function(values, variant, listener, customIdentifier)
{
	this.m_originalHandler.saveVariant(values, variant, listener, customIdentifier);
};
oFF.VdOrcaPlanningSequenceHandler.prototype.setVariableValues = function(cleanedValues)
{
	this.m_originalHandler.setVariableValues(cleanedValues);
	this.m_analyticProcessor.setVariableValues(cleanedValues);
};
oFF.VdOrcaPlanningSequenceHandler.prototype.setupExt = function(originalHandler, analyticProcessor, startValues)
{
	this.m_originalHandler = originalHandler;
	this.m_startValues = oFF.notNull(startValues) ? startValues : oFF.XHashMapByString.create();
	if (oFF.notNull(analyticProcessor))
	{
		this.m_analyticProcessor = oFF.VdBackendStateHandler.createHandler(analyticProcessor);
	}
};
oFF.VdOrcaPlanningSequenceHandler.prototype.submitVariables = function(values, listener, customIdentifier)
{
	if (oFF.isNull(this.m_analyticProcessor))
	{
		listener.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, customIdentifier);
	}
	else
	{
		let mergedValues = oFF.XLinkedHashMapByString.create();
		let variables = this.m_analyticProcessor.getSubmitProcessor().getInputEnabledAndNonTechnicalVariables();
		for (let i = 0; i < variables.size(); i++)
		{
			let varName = variables.get(i).getName();
			if (!values.containsKey(varName))
			{
				mergedValues.put(varName, this.m_startValues.getByKey(varName));
			}
			else
			{
				mergedValues.put(varName, values.getByKey(varName));
			}
		}
		this.m_analyticProcessor.submitVariables(mergedValues, listener, customIdentifier);
	}
};
oFF.VdOrcaPlanningSequenceHandler.prototype.transferVariables = function(values, variable, listener, customIdentifier)
{
	this.m_originalHandler.transferVariables(values, variable, listener, customIdentifier);
};

oFF.VdOrcaUiHelperConfig = function() {};
oFF.VdOrcaUiHelperConfig.prototype = new oFF.XObject();
oFF.VdOrcaUiHelperConfig.prototype._ff_c = "VdOrcaUiHelperConfig";

oFF.VdOrcaUiHelperConfig.createConfig = function(scenario, level)
{
	let obj = new oFF.VdOrcaUiHelperConfig();
	obj.m_scenario = scenario;
	obj.m_level = level;
	obj.m_linkTooltips = oFF.XHashMapByString.create();
	return obj;
};
oFF.VdOrcaUiHelperConfig.prototype.m_alignBwHanaDynamicVariables = false;
oFF.VdOrcaUiHelperConfig.prototype.m_boardRoomChildLevelText = null;
oFF.VdOrcaUiHelperConfig.prototype.m_boardRoomParentLevelText = null;
oFF.VdOrcaUiHelperConfig.prototype.m_bottomLevelUsingDynamicVariables = false;
oFF.VdOrcaUiHelperConfig.prototype.m_bottomLevelValues = null;
oFF.VdOrcaUiHelperConfig.prototype.m_customStoryButtonText = null;
oFF.VdOrcaUiHelperConfig.prototype.m_disableExit = false;
oFF.VdOrcaUiHelperConfig.prototype.m_disableVariablePersistenceOptions = false;
oFF.VdOrcaUiHelperConfig.prototype.m_forcePrompt = false;
oFF.VdOrcaUiHelperConfig.prototype.m_hideForceSection = false;
oFF.VdOrcaUiHelperConfig.prototype.m_hideLevelSection = false;
oFF.VdOrcaUiHelperConfig.prototype.m_infoText = null;
oFF.VdOrcaUiHelperConfig.prototype.m_level = null;
oFF.VdOrcaUiHelperConfig.prototype.m_linkTooltips = null;
oFF.VdOrcaUiHelperConfig.prototype.m_linkedModelsText = null;
oFF.VdOrcaUiHelperConfig.prototype.m_readOnly = false;
oFF.VdOrcaUiHelperConfig.prototype.m_scenario = null;
oFF.VdOrcaUiHelperConfig.prototype.m_showDynamicVariableSection = false;
oFF.VdOrcaUiHelperConfig.prototype.m_showExitVariableSection = false;
oFF.VdOrcaUiHelperConfig.prototype.m_showVariants = false;
oFF.VdOrcaUiHelperConfig.prototype.m_storyEditable = false;
oFF.VdOrcaUiHelperConfig.prototype.m_topLevelUsingDynamicVariables = false;
oFF.VdOrcaUiHelperConfig.prototype.m_topLevelValues = null;
oFF.VdOrcaUiHelperConfig.prototype.m_useBottomLevelVariables = false;
oFF.VdOrcaUiHelperConfig.prototype.m_widgetLevelWarnings = null;
oFF.VdOrcaUiHelperConfig.prototype.getBoardRoomChildLevelText = function()
{
	return this.m_boardRoomChildLevelText;
};
oFF.VdOrcaUiHelperConfig.prototype.getBoardRoomParentLevelText = function()
{
	return this.m_boardRoomParentLevelText;
};
oFF.VdOrcaUiHelperConfig.prototype.getBottomLevelValues = function()
{
	return this.m_bottomLevelValues;
};
oFF.VdOrcaUiHelperConfig.prototype.getCustomStoryButtonText = function()
{
	return this.m_customStoryButtonText;
};
oFF.VdOrcaUiHelperConfig.prototype.getInfoText = function()
{
	return this.m_infoText;
};
oFF.VdOrcaUiHelperConfig.prototype.getLevel = function()
{
	return this.m_level;
};
oFF.VdOrcaUiHelperConfig.prototype.getLinkTooltips = function()
{
	return this.m_linkTooltips;
};
oFF.VdOrcaUiHelperConfig.prototype.getLinkedModelsText = function()
{
	return this.m_linkedModelsText;
};
oFF.VdOrcaUiHelperConfig.prototype.getScenario = function()
{
	return this.m_scenario;
};
oFF.VdOrcaUiHelperConfig.prototype.getTopLevelValues = function()
{
	return this.m_topLevelValues;
};
oFF.VdOrcaUiHelperConfig.prototype.getWidgetLevelWarnings = function()
{
	return this.m_widgetLevelWarnings;
};
oFF.VdOrcaUiHelperConfig.prototype.hideForceSection = function()
{
	return this.m_hideForceSection;
};
oFF.VdOrcaUiHelperConfig.prototype.hideLevelSection = function()
{
	return this.m_hideLevelSection;
};
oFF.VdOrcaUiHelperConfig.prototype.isAlignBwHanaDynamicVariables = function()
{
	return this.m_alignBwHanaDynamicVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.isBottomLevelUsingDynamicVariables = function()
{
	return this.m_bottomLevelUsingDynamicVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.isDisableExit = function()
{
	return this.m_disableExit;
};
oFF.VdOrcaUiHelperConfig.prototype.isDisableVariablePersistenceOptions = function()
{
	return this.m_disableVariablePersistenceOptions;
};
oFF.VdOrcaUiHelperConfig.prototype.isForcePrompt = function()
{
	return this.m_forcePrompt;
};
oFF.VdOrcaUiHelperConfig.prototype.isReadOnly = function()
{
	return this.m_readOnly;
};
oFF.VdOrcaUiHelperConfig.prototype.isStoryEditable = function()
{
	return this.m_storyEditable;
};
oFF.VdOrcaUiHelperConfig.prototype.isTopLevelUsingDynamicVariables = function()
{
	return this.m_topLevelUsingDynamicVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.releaseObject = function()
{
	this.m_scenario = null;
	this.m_level = null;
	this.m_linkTooltips = null;
	this.m_topLevelValues = null;
	this.m_bottomLevelValues = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdOrcaUiHelperConfig.prototype.setAlignBwHanaDynamicVariables = function(alignBwHanaDynamicVariables)
{
	this.m_alignBwHanaDynamicVariables = alignBwHanaDynamicVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.setBoardRoomChildLevelText = function(boardRoomChildLevelText)
{
	this.m_boardRoomChildLevelText = boardRoomChildLevelText;
};
oFF.VdOrcaUiHelperConfig.prototype.setBoardRoomParentLevelText = function(boardRoomParentLevelText)
{
	this.m_boardRoomParentLevelText = boardRoomParentLevelText;
};
oFF.VdOrcaUiHelperConfig.prototype.setBottomLevelUsingDynamicVariables = function(bottomLevelUsingDynamicVariables)
{
	this.m_bottomLevelUsingDynamicVariables = bottomLevelUsingDynamicVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.setBottomLevelValues = function(bottomLevelValues)
{
	this.m_bottomLevelValues = bottomLevelValues;
};
oFF.VdOrcaUiHelperConfig.prototype.setCustomStoryButtonText = function(storyButtonText)
{
	this.m_customStoryButtonText = storyButtonText;
};
oFF.VdOrcaUiHelperConfig.prototype.setDisableExit = function(disableExit)
{
	this.m_disableExit = disableExit;
};
oFF.VdOrcaUiHelperConfig.prototype.setDisableVariablePersistenceOptions = function(disableVariablePersistenceOptions)
{
	this.m_disableVariablePersistenceOptions = disableVariablePersistenceOptions;
};
oFF.VdOrcaUiHelperConfig.prototype.setForcePrompt = function(forcePrompt)
{
	this.m_forcePrompt = forcePrompt;
};
oFF.VdOrcaUiHelperConfig.prototype.setHideForceSection = function(hideForceSection)
{
	this.m_hideForceSection = hideForceSection;
};
oFF.VdOrcaUiHelperConfig.prototype.setHideLevelSection = function(hideLevelSection)
{
	this.m_hideLevelSection = hideLevelSection;
};
oFF.VdOrcaUiHelperConfig.prototype.setInfoText = function(infoText)
{
	this.m_infoText = infoText;
};
oFF.VdOrcaUiHelperConfig.prototype.setLinkTooltips = function(linkTooltips)
{
	this.m_linkTooltips = linkTooltips;
};
oFF.VdOrcaUiHelperConfig.prototype.setLinkedModelsText = function(linkedModelsText)
{
	this.m_linkedModelsText = linkedModelsText;
};
oFF.VdOrcaUiHelperConfig.prototype.setReadOnly = function(readOnly)
{
	this.m_readOnly = readOnly;
};
oFF.VdOrcaUiHelperConfig.prototype.setShowDynamicVariableSection = function(showDynamicVariableSection)
{
	this.m_showDynamicVariableSection = showDynamicVariableSection;
};
oFF.VdOrcaUiHelperConfig.prototype.setShowExitVariableSection = function(showExitVariableSection)
{
	this.m_showExitVariableSection = showExitVariableSection;
};
oFF.VdOrcaUiHelperConfig.prototype.setShowVariantSection = function(showVariantSection)
{
	this.m_showVariants = showVariantSection;
};
oFF.VdOrcaUiHelperConfig.prototype.setStoryEditable = function(storyEditable)
{
	this.m_storyEditable = storyEditable;
};
oFF.VdOrcaUiHelperConfig.prototype.setTopLevelUsingDynamicVariables = function(storyUsingDynamicVariables)
{
	this.m_topLevelUsingDynamicVariables = storyUsingDynamicVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.setTopLevelValues = function(topLevelValues)
{
	this.m_topLevelValues = topLevelValues;
};
oFF.VdOrcaUiHelperConfig.prototype.setUseBottomLevelVariables = function(useBottomLevelVariables)
{
	this.m_useBottomLevelVariables = useBottomLevelVariables;
};
oFF.VdOrcaUiHelperConfig.prototype.setWidgetLevelWarnings = function(widgetLevelWarnings)
{
	this.m_widgetLevelWarnings = widgetLevelWarnings;
};
oFF.VdOrcaUiHelperConfig.prototype.showDynamicVariableSection = function()
{
	return this.m_showDynamicVariableSection;
};
oFF.VdOrcaUiHelperConfig.prototype.showExitVariableSection = function()
{
	return this.m_showExitVariableSection;
};
oFF.VdOrcaUiHelperConfig.prototype.showVariantSection = function()
{
	return this.m_showVariants;
};
oFF.VdOrcaUiHelperConfig.prototype.useBottomLevelVariables = function()
{
	return this.m_useBottomLevelVariables;
};

oFF.VdStandalone = function() {};
oFF.VdStandalone.prototype = new oFF.XObject();
oFF.VdStandalone.prototype._ff_c = "VdStandalone";

oFF.VdStandalone.BOTTOM_LEVEL_DYNAMIC_VARIABLES = "bottomLevelDynamicVars";
oFF.VdStandalone.BOTTOM_LEVEL_VALUES = "bottomLevelValues";
oFF.VdStandalone.BW_PARALLEL_LINK_DATASET_ID_TAG = "bwParallelLinkDataSetIdTag";
oFF.VdStandalone.BW_PARALLEL_LINK_REMOVE_AFTER_SUBMIT_TAG = "bwParallelLinkRemoveAfterSubmitTag";
oFF.VdStandalone.BW_PARALLEL_LINK_SHOULD_BE_SUBMITTED_TAG = "bwParallelLinkShouldBeSubmittedTag";
oFF.VdStandalone.DATE_DISPLAY_FORMAT = "dateDisplayFormat";
oFF.VdStandalone.DISABLE_EXIT = "disableExit";
oFF.VdStandalone.DISABLE_TEXT_VARIABLE_INPUT = "disableTextVariableInput";
oFF.VdStandalone.DISABLE_VARIABLE_PERSISTENCE_OPTIONS = "disableVariablePersistenceOptions";
oFF.VdStandalone.FORCE_PROMPT = "forcePrompt";
oFF.VdStandalone.HIDE_FORCE_SECTION = "hideForceSection";
oFF.VdStandalone.HIDE_LEVEL_SECTION = "hideLevelSection";
oFF.VdStandalone.HIDE_OPERATOR_NOT_BEWEEN = "hideOperatorNotBetween";
oFF.VdStandalone.IMPLICIT_SUBMIT = "implicitSubmit";
oFF.VdStandalone.INFO_TEXT = "infoText";
oFF.VdStandalone.JOIN_MODE = "joinMode";
oFF.VdStandalone.LEVEL = "level";
oFF.VdStandalone.LINKAGE = "linkage";
oFF.VdStandalone.LINKED_MODELS_TEXT = "linkedModelsText";
oFF.VdStandalone.LINKED_VAR_NAMES = "linkedVariableNames";
oFF.VdStandalone.LINKED_VAR_PROCESSOR_ID = "linkedProcessorIds";
oFF.VdStandalone.LINK_VAR_SUBMIT_HANDLING = "linkVarSubmitHandling";
oFF.VdStandalone.LOCALIZATION = "localization";
oFF.VdStandalone.READ_ONLY = "readOnly";
oFF.VdStandalone.SCENARIO = "scenario";
oFF.VdStandalone.SHOW_DYNAMIC_VARIABLE_SECTION = "showDynamicVariableSection";
oFF.VdStandalone.SHOW_EXIT_VARIABLE_SECTION = "showExitVariableSection";
oFF.VdStandalone.SHOW_VARIANT_SECTION = "showVariantSection";
oFF.VdStandalone.START_VALUES = "startValues";
oFF.VdStandalone.START_VALUES_FORMAT = "startValuesFormat";
oFF.VdStandalone.STORY_EDITABLE = "storyEditable";
oFF.VdStandalone.SUPPRESS_LOCALIZATION_DEFAULTS = "suppressLocalizationDefaults";
oFF.VdStandalone.TITLE = "title";
oFF.VdStandalone.TOOLTIP_DATASET = "tooltipDataset";
oFF.VdStandalone.TOOLTIP_VARIABLE = "tooltipVariable";
oFF.VdStandalone.TOP_LEVEL_DYNAMIC_VARIABLES = "topLevelDynamicVars";
oFF.VdStandalone.TOP_LEVEL_TEXT = "topLevelText";
oFF.VdStandalone.TOP_LEVEL_VALUES = "topLevelValues";
oFF.VdStandalone.UPDATE_DYNAMIC_VARIABLES_ON_START = "updateDynamicVariablesOnStart";
oFF.VdStandalone.USE_BOTTOM_LEVEL_VARIABLES = "useBottomLevelVariables";
oFF.VdStandalone.USE_DATEPICKER = "useDatePicker";
oFF.VdStandalone.VARIABLE_NAME = "variableName";
oFF.VdStandalone.VARIABLE_NAMES = "variableNames";
oFF.VdStandalone.VARIABLE_PROCESSOR_ID = "variableProcessId";
oFF.VdStandalone.WIDGET_LEVEL_WARNINGS = "widgetLevelWarnings";
oFF.VdStandalone.addLinkSymbols = function(vdController, parameters)
{
	if (oFF.isNull(vdController) || oFF.isNull(parameters))
	{
		return;
	}
	let structure = oFF.VdStandalone.parseNativeJsonParams(parameters);
	let linkTooltips = oFF.VdStandalone.extractLinkTooltips(structure);
	if (oFF.isNull(linkTooltips))
	{
		return;
	}
	let controllers = vdController.getControllers();
	if (oFF.notNull(controllers))
	{
		for (let i = 0; i < controllers.size(); i++)
		{
			let controller = controllers.get(i);
			let varName = controller.getName();
			if (!linkTooltips.containsKey(varName))
			{
				continue;
			}
			oFF.VdOrcaUiHelper.showLinkIconForVariable(controller, linkTooltips.getByKey(varName), vdController.getContext());
		}
	}
};
oFF.VdStandalone.createDisplayWithJson = function(application, _unusedParam, parameters, listener)
{
	let parser = oFF.JsonParserFactory.newInstance();
	let structure = parser.convertFromNative(parameters).asStructure();
	oFF.XObjectExt.release(parser);
	return oFF.VdStandalone.createDisplayWithParameters(application, _unusedParam, structure, listener);
};
oFF.VdStandalone.createDisplayWithParameters = function(application, _unusedParam, parameters, listener)
{
	let instance = oFF.VdStandalone.createInstance(application, parameters);
	let controller = oFF.VdVariableDialog.createAsDisplay(instance.m_uiContext, instance.m_vdConfig, listener);
	instance.setupController(controller);
	let facade = oFF.VdOrcaFacade.createFacadeDisplay(controller, instance.m_uiHelper, instance.m_linkedVariableNames);
	oFF.XObjectExt.release(instance);
	return facade;
};
oFF.VdStandalone.createInstance = function(application, parameters)
{
	let standalone = new oFF.VdStandalone();
	standalone.setupContext(application, parameters);
	return standalone;
};
oFF.VdStandalone.createLinkManager = function(controller, parameters)
{
	let linkage = parameters.getListByKey(oFF.VdStandalone.LINKAGE);
	if (!oFF.XCollectionUtils.hasElements(linkage))
	{
		return null;
	}
	let handling = oFF.OrcaLinkVarSubmitHandling.lookupWithDefault(parameters.getStringByKey(oFF.VdStandalone.LINK_VAR_SUBMIT_HANDLING));
	let processor = controller.getVariableProcessor();
	let olapEnv = processor.getOlapEnv();
	let linkVarManager = oFF.OrcaLinkVarManager.createWithController(controller);
	if (handling === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_DIRECT)
	{
		linkVarManager.activateSubmitLinked();
	}
	else if (handling === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_RECURSIVE)
	{
		let datasetIdTag = parameters.getStringByKey(oFF.VdStandalone.BW_PARALLEL_LINK_DATASET_ID_TAG);
		let shouldBeSubmittedTag = parameters.getStringByKey(oFF.VdStandalone.BW_PARALLEL_LINK_SHOULD_BE_SUBMITTED_TAG);
		let removeAfterSubmitTag = parameters.getStringByKey(oFF.VdStandalone.BW_PARALLEL_LINK_REMOVE_AFTER_SUBMIT_TAG);
		linkVarManager.activateSubmitAll(oFF.VdStandaloneLinkVarHelper.createHelper(datasetIdTag, shouldBeSubmittedTag, removeAfterSubmitTag));
	}
	for (let i = 0; i < linkage.size(); i++)
	{
		let linkStruct = linkage.getStructureAt(i);
		let varName = linkStruct.getStringByKey(oFF.VdStandalone.VARIABLE_NAME);
		let mainVariable = processor.getVariable(varName);
		if (oFF.isNull(mainVariable))
		{
			continue;
		}
		let linkedProcessorIds = linkStruct.getListByKey(oFF.VdStandalone.LINKED_VAR_PROCESSOR_ID);
		let linkedVarNames = linkStruct.getListByKey(oFF.VdStandalone.LINKED_VAR_NAMES);
		let joinMode = oFF.OrcaLinkVarJoinMode.lookup(linkStruct.getStringByKey(oFF.VdStandalone.JOIN_MODE));
		if (!oFF.XCollectionUtils.hasElements(linkedVarNames) || !oFF.XCollectionUtils.hasElements(linkedProcessorIds) || linkedProcessorIds.size() !== linkedVarNames.size() || oFF.isNull(joinMode))
		{
			linkVarManager.setHasMissingLink(mainVariable);
			continue;
		}
		let variables = oFF.XList.create();
		for (let j = 0; j < linkedProcessorIds.size(); j++)
		{
			let linkedProcessor = oFF.VdStandalone.findVariableProcessorById(olapEnv, linkedProcessorIds.getStringAt(j));
			if (oFF.isNull(linkedProcessor))
			{
				linkVarManager.setHasMissingLink(mainVariable);
				continue;
			}
			let linkedVariable = linkedProcessor.getVariable(linkedVarNames.getStringAt(j));
			if (oFF.isNull(linkedVariable))
			{
				linkVarManager.setHasMissingLink(mainVariable);
				continue;
			}
			variables.add(linkedVariable);
		}
		linkVarManager.addLinks(mainVariable, variables, joinMode);
	}
	controller.setExternalStateHandler(linkVarManager);
	controller.setValueHelpProcessorProvider(linkVarManager);
	return linkVarManager;
};
oFF.VdStandalone.createTokenWithJson = function(application, _unusedParam, parameters)
{
	return oFF.VdStandalone.createTokenWithParameters(application, _unusedParam, oFF.VdStandalone.parseNativeJsonParams(parameters));
};
oFF.VdStandalone.createTokenWithParameters = function(application, _unusedParam, parameters)
{
	let instance = oFF.VdStandalone.createInstance(application, parameters);
	let controller = oFF.VdVariableForm.createAsToken(instance.m_uiContext, instance.m_vdConfig);
	instance.setupController(controller);
	let facade = oFF.VdOrcaFacade.createFacadeToken(controller, instance.m_uiHelper, instance.m_linkedVariableNames);
	oFF.XObjectExt.release(instance);
	return facade;
};
oFF.VdStandalone.createUiConfig = function(variableProcessor, scenario, level, parameters)
{
	let valueFormat = oFF.VdValueFormat.lookup(parameters.getStringByKey(oFF.VdStandalone.START_VALUES_FORMAT));
	let uiConfig = oFF.VdOrcaUiHelperConfig.createConfig(scenario, level);
	uiConfig.setUseBottomLevelVariables(parameters.getBooleanByKey(oFF.VdStandalone.USE_BOTTOM_LEVEL_VARIABLES));
	uiConfig.setStoryEditable(parameters.getBooleanByKey(oFF.VdStandalone.STORY_EDITABLE));
	uiConfig.setReadOnly(parameters.getBooleanByKey(oFF.VdStandalone.READ_ONLY));
	uiConfig.setForcePrompt(parameters.getBooleanByKey(oFF.VdStandalone.FORCE_PROMPT));
	uiConfig.setShowVariantSection(parameters.getBooleanByKey(oFF.VdStandalone.SHOW_VARIANT_SECTION));
	uiConfig.setHideLevelSection(parameters.getBooleanByKey(oFF.VdStandalone.HIDE_LEVEL_SECTION));
	uiConfig.setHideForceSection(parameters.getBooleanByKey(oFF.VdStandalone.HIDE_FORCE_SECTION));
	uiConfig.setTopLevelUsingDynamicVariables(parameters.getBooleanByKey(oFF.VdStandalone.TOP_LEVEL_DYNAMIC_VARIABLES));
	uiConfig.setBottomLevelUsingDynamicVariables(parameters.getBooleanByKey(oFF.VdStandalone.BOTTOM_LEVEL_DYNAMIC_VARIABLES));
	uiConfig.setCustomStoryButtonText(parameters.getStringByKey(oFF.VdStandalone.TOP_LEVEL_TEXT));
	uiConfig.setDisableExit(parameters.getBooleanByKey(oFF.VdStandalone.DISABLE_EXIT));
	uiConfig.setDisableVariablePersistenceOptions(parameters.getBooleanByKey(oFF.VdStandalone.DISABLE_VARIABLE_PERSISTENCE_OPTIONS));
	uiConfig.setInfoText(parameters.getStringByKey(oFF.VdStandalone.INFO_TEXT));
	uiConfig.setLinkedModelsText(parameters.getStringByKey(oFF.VdStandalone.LINKED_MODELS_TEXT));
	uiConfig.setLinkTooltips(oFF.VdStandalone.extractLinkTooltips(parameters));
	let isVdV2AlignBwHanaDynamicVariablesToggleEnabled = variableProcessor.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_ALIGN_BW_HANA_DYNAMIC_VARIABLES);
	let isVdV2ToggleEnabled = variableProcessor.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_PHASE2);
	uiConfig.setAlignBwHanaDynamicVariables(isVdV2ToggleEnabled && isVdV2AlignBwHanaDynamicVariablesToggleEnabled);
	uiConfig.setShowDynamicVariableSection(parameters.getBooleanByKey(oFF.VdStandalone.SHOW_DYNAMIC_VARIABLE_SECTION));
	uiConfig.setShowExitVariableSection(parameters.getBooleanByKey(oFF.VdStandalone.SHOW_EXIT_VARIABLE_SECTION));
	uiConfig.setWidgetLevelWarnings(oFF.VdStandalone.extractWidgetLevelWarnings(parameters));
	let topLevelValues = parameters.getByKey(oFF.VdStandalone.TOP_LEVEL_VALUES);
	if (oFF.notNull(topLevelValues))
	{
		uiConfig.setTopLevelValues(valueFormat.getParser().deserialize(variableProcessor, topLevelValues));
	}
	let bottomLevelValues = parameters.getByKey(oFF.VdStandalone.BOTTOM_LEVEL_VALUES);
	if (oFF.notNull(bottomLevelValues))
	{
		uiConfig.setBottomLevelValues(valueFormat.getParser().deserialize(variableProcessor, bottomLevelValues));
	}
	return uiConfig;
};
oFF.VdStandalone.createUiContext = function(uiManager)
{
	return oFF.OlapUiContext.createContext(uiManager, oFF.OlapUiDisplayFactory.createFactoryForDialog(uiManager));
};
oFF.VdStandalone.createVdConfig = function(application, parameters, level)
{
	let olapEnv = application.getOlapEnvironment();
	let title = oFF.VdStandalone.determineTitle(parameters);
	let variableProcessor = oFF.VdStandalone.determineVariableProcessor(parameters, olapEnv);
	let variablesToDisplay = oFF.VdStandalone.determineVariablesToDisplay(parameters);
	let vdConfig = oFF.VdConfiguration.createConfig(title, variableProcessor);
	let implicitSubmit = parameters.getBooleanByKeyExt(oFF.VdStandalone.IMPLICIT_SUBMIT, vdConfig.useImplicitSubmit());
	let useDatepicker = parameters.getBooleanByKeyExt(oFF.VdStandalone.USE_DATEPICKER, vdConfig.useDatePicker());
	let hideOperatorNotBetween = parameters.getBooleanByKeyExt(oFF.VdStandalone.HIDE_OPERATOR_NOT_BEWEEN, vdConfig.isHidingOperatorNotBetween());
	let disableTextVariables = parameters.getBooleanByKeyExt(oFF.VdStandalone.DISABLE_TEXT_VARIABLE_INPUT, !vdConfig.isTextVariablesEnabled());
	let dateDisplayFormat = parameters.getStringByKey(oFF.VdStandalone.DATE_DISPLAY_FORMAT);
	let valueFormat = oFF.VdValueFormat.lookup(parameters.getStringByKey(oFF.VdStandalone.START_VALUES_FORMAT));
	let jsonValues = parameters.getByKey(oFF.VdStandalone.START_VALUES);
	vdConfig.setVariablesToDisplay(variablesToDisplay);
	vdConfig.setDateDisplayFormat(dateDisplayFormat);
	vdConfig.setImplicitSubmit(implicitSubmit);
	vdConfig.setStartValuesJson(valueFormat, jsonValues);
	vdConfig.setUseDatePicker(useDatepicker);
	vdConfig.hideOperatorNotBetween(hideOperatorNotBetween);
	vdConfig.setTextVariablesEnabled(oFF.isNull(level) ? !disableTextVariables : !level.isTypeOf(oFF.VdOrcaLevel.WIDGET));
	vdConfig.setNewSettingsEnabled((oFF.isNull(level) || !level.isTypeOf(oFF.VdOrcaLevel.FILTER)) && application.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_MORE_SETTINGS));
	let isFilterLevel = oFF.notNull(level) && level.isTypeOf(oFF.VdOrcaLevel.FILTER);
	let isVdV2ToggleEnabled = application.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_PHASE2);
	let isVdV2EmbeddedToggleEnabled = application.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_PHASE2_EMBEDDED);
	vdConfig.setSettingsPopoverEnabled(!isFilterLevel && (vdConfig.isSettingsPopoverEnabled() || isVdV2ToggleEnabled));
	if (isFilterLevel)
	{
		vdConfig.setGridLayoutEnabled(isVdV2EmbeddedToggleEnabled);
		vdConfig.setMultiInputComponentEnabled(isVdV2EmbeddedToggleEnabled);
	}
	else
	{
		vdConfig.setGridLayoutEnabled(vdConfig.isGridLayoutEnabled() || isVdV2ToggleEnabled);
		vdConfig.setMultiInputComponentEnabled(vdConfig.isMultiInputComponentEnabled() || isVdV2ToggleEnabled);
	}
	oFF.VdOrcaFacade.configureVariantManagement(variableProcessor, vdConfig);
	return vdConfig;
};
oFF.VdStandalone.determineTitle = function(parameters)
{
	let title = parameters.getStringByKey(oFF.VdStandalone.TITLE);
	if (oFF.XStringUtils.isNullOrEmpty(title))
	{
		return "Variables";
	}
	return title;
};
oFF.VdStandalone.determineVariableProcessor = function(parameters, olapEnv)
{
	let variableProcessorId = parameters.getStringByKey(oFF.VdStandalone.VARIABLE_PROCESSOR_ID);
	let processor = oFF.VdStandalone.findVariableProcessorById(olapEnv, variableProcessorId);
	if (oFF.notNull(processor))
	{
		return processor;
	}
	return olapEnv.getVariableProcessor();
};
oFF.VdStandalone.determineVariablesToDisplay = function(parameters)
{
	let varNames = parameters.getListByKey(oFF.VdStandalone.VARIABLE_NAMES);
	if (!oFF.XCollectionUtils.hasElements(varNames))
	{
		return null;
	}
	let result = oFF.XHashSetOfString.create();
	for (let i = 0; i < varNames.size(); i++)
	{
		result.add(varNames.getStringAt(i));
	}
	return result;
};
oFF.VdStandalone.extractLinkTooltips = function(parameters)
{
	let linkTooltips = oFF.XHashMapByString.create();
	let linkage = parameters.getListByKey(oFF.VdStandalone.LINKAGE);
	if (!oFF.XCollectionUtils.hasElements(linkage))
	{
		return linkTooltips;
	}
	for (let i = 0; i < linkage.size(); i++)
	{
		let linkStruct = linkage.getStructureAt(i);
		let varName = linkStruct.getStringByKey(oFF.VdStandalone.VARIABLE_NAME);
		let tooltipList = linkStruct.getListByKey(oFF.VdStandalone.TOOLTIP_VARIABLE);
		let tooltipDataset = linkStruct.getListByKey(oFF.VdStandalone.TOOLTIP_DATASET);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(varName) && oFF.XCollectionUtils.hasElements(tooltipList) && oFF.XCollectionUtils.hasElements(tooltipDataset) && tooltipList.size() === tooltipDataset.size())
		{
			let tmpTooltips = oFF.XList.create();
			for (let a = 0; a < tooltipList.size(); a++)
			{
				tmpTooltips.add(oFF.XPairOfString.create(tooltipList.getStringAt(a), tooltipDataset.getStringAt(a)));
			}
			linkTooltips.put(varName, tmpTooltips);
		}
	}
	return linkTooltips;
};
oFF.VdStandalone.extractWidgetLevelWarnings = function(parameters)
{
	let warnings = parameters.getListByKey(oFF.VdStandalone.WIDGET_LEVEL_WARNINGS);
	if (!oFF.XCollectionUtils.hasElements(warnings))
	{
		return null;
	}
	let result = oFF.XList.create();
	for (let i = 0; i < warnings.size(); i++)
	{
		result.add(warnings.getStringAt(i));
	}
	return result;
};
oFF.VdStandalone.findVariableProcessorById = function(olapEnv, variableProcessorId)
{
	if (oFF.notNull(variableProcessorId))
	{
		let allQueryManagers = olapEnv.getAllAreaQueryManagerActive();
		for (let i = 0; i < allQueryManagers.size(); i++)
		{
			let queryManager = allQueryManagers.get(i);
			let tagging = queryManager.getTagging();
			let value = tagging.getByKey(oFF.VdStandalone.VARIABLE_PROCESSOR_ID);
			if (oFF.XString.isEqual(value, variableProcessorId))
			{
				return queryManager.getVariableProcessor();
			}
		}
	}
	return null;
};
oFF.VdStandalone.parseNativeJsonParams = function(parameters)
{
	let parser = oFF.JsonParserFactory.newInstance();
	let structure = parser.convertFromNative(parameters).asStructure();
	oFF.XObjectExt.release(parser);
	return structure;
};
oFF.VdStandalone.prototype.m_level = null;
oFF.VdStandalone.prototype.m_linkedVariableNames = null;
oFF.VdStandalone.prototype.m_params = null;
oFF.VdStandalone.prototype.m_scenario = null;
oFF.VdStandalone.prototype.m_uiContext = null;
oFF.VdStandalone.prototype.m_uiHelper = null;
oFF.VdStandalone.prototype.m_vdConfig = null;
oFF.VdStandalone.prototype.releaseObject = function()
{
	this.m_uiContext = null;
	this.m_vdConfig = null;
	this.m_scenario = null;
	this.m_level = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdStandalone.prototype.setupContext = function(application, parameters)
{
	this.m_params = parameters;
	let uiManager = application.getUiManager();
	this.m_uiContext = oFF.VdStandalone.createUiContext(uiManager);
	this.m_scenario = oFF.VdOrcaScenario.lookup(parameters.getStringByKey(oFF.VdStandalone.SCENARIO));
	this.m_level = oFF.VdOrcaLevel.lookup(parameters.getStringByKey(oFF.VdStandalone.LEVEL));
	this.m_vdConfig = oFF.VdStandalone.createVdConfig(application, parameters, this.m_level);
};
oFF.VdStandalone.prototype.setupController = function(controller)
{
	let linkManager = oFF.VdStandalone.createLinkManager(controller, this.m_params);
	if (oFF.notNull(linkManager))
	{
		this.m_linkedVariableNames = linkManager.getLinkedVariableNames();
	}
	else
	{
		this.m_linkedVariableNames = oFF.XList.create();
	}
	let uiConfig = oFF.VdStandalone.createUiConfig(this.m_vdConfig.getVarProcessor(), this.m_scenario, this.m_level, this.m_params);
	this.m_uiHelper = oFF.VdOrcaUiHelper.createUiHelper(controller, uiConfig);
};

oFF.VdStandaloneLinkVarHelper = function() {};
oFF.VdStandaloneLinkVarHelper.prototype = new oFF.XObject();
oFF.VdStandaloneLinkVarHelper.prototype._ff_c = "VdStandaloneLinkVarHelper";

oFF.VdStandaloneLinkVarHelper.createHelper = function(datasetIdTag, shouldBeSubmittedTag, removeAfterSubmitTag)
{
	let obj = new oFF.VdStandaloneLinkVarHelper();
	obj.m_datasetIdTag = datasetIdTag;
	obj.m_shouldBeSubmittedTag = shouldBeSubmittedTag;
	obj.m_removeAfterSubmitTag = removeAfterSubmitTag;
	return obj;
};
oFF.VdStandaloneLinkVarHelper.prototype.m_datasetIdTag = null;
oFF.VdStandaloneLinkVarHelper.prototype.m_removeAfterSubmitTag = null;
oFF.VdStandaloneLinkVarHelper.prototype.m_shouldBeSubmittedTag = null;
oFF.VdStandaloneLinkVarHelper.prototype.applySavedValues = function(queryManager) {};
oFF.VdStandaloneLinkVarHelper.prototype.getLinkGroupId = function(queryManager)
{
	return queryManager.getTagging().getByKey(this.m_datasetIdTag);
};
oFF.VdStandaloneLinkVarHelper.prototype.onAfterVariableSubmit = function(queryManager)
{
	queryManager.getTagging().remove(this.m_removeAfterSubmitTag);
};
oFF.VdStandaloneLinkVarHelper.prototype.shouldBeSubmitted = function(queryManager)
{
	let tagging = queryManager.getTagging();
	if (!tagging.containsKey(this.m_shouldBeSubmittedTag))
	{
		return true;
	}
	return oFF.XBoolean.convertFromString(tagging.getByKey(this.m_shouldBeSubmittedTag));
};

oFF.VdUqmConstants = {

	DESCRIPTION:"description",
	EMPTY_OPTION_VALUE:"empty",
	FORMULA_VALUE:"formulaValue",
	HIERARCHY_DESCRIPTION:"hierarchyDescription",
	HIERARCHY_DUE_DATE:"dueDate",
	HIERARCHY_NAME:"hierarchyName",
	HIERARCHY_NAME_DIMENSION:"hierarchyNameDimension",
	ID:"id",
	IS_MANDATORY:"isMandatory",
	LOCAL_ID:"localId",
	MEMBERS:"members",
	MEMBER_ID:"memberId",
	MEMBER_IDS:"memberIds",
	NAME:"name",
	OPERATOR:"operator",
	OPERATOR_CONTAINS:"CONTAINS",
	OPERATOR_GREATER:"GREATER",
	OPERATOR_IN:"IN",
	OPERATOR_LESS:"LESS",
	OPERATOR_NOT_IN:"NOT_IN",
	OPTION_NAME:"optionName",
	SIMPLE_TYPE_VALUES:"simpleTypeValues",
	TEXT_VALUE:"textValue",
	TYPE:"type",
	TYPE_DIMENSION_MEMBER:"DimensionMemberVariable",
	TYPE_FORMULA:"FormulaVariable",
	TYPE_HIERARCHY_NAME:"HierarchyNameVariable",
	TYPE_HIERARCHY_NODE:"HierarchyNodeVariable",
	TYPE_OPTION_LIST:"OptionListVariable",
	TYPE_SIMPLE:"SimpleTypeVariable",
	TYPE_TEXT:"TextVariable",
	VALUE_TYPE:"valueType",
	VALUE_TYPE_DATE:"Date",
	VALUE_TYPE_DATETIME:"DateTime",
	VALUE_TYPE_STRING:"String",
	VALUE_TYPE_TIME:"Time",
	VALUE_TYPE_UNKNOWN:"",
	VARIABLE_ID:"variableId"
};

oFF.OuQueryControllerContants = {

	AUTHENTICATION_FAILED:"authenticationFailed",
	BW_RESOURCE_CONSTRAINTS:"bwResourceConstraints",
	COULD_NOT_OPEN_QUERY:"couldNotOpenQuery",
	INITIAL_VARIABLES_NOT_SET:"initialVariablesNotSet",
	VARIABLE_SUBMIT_FAILED:"variablesSubmitFailed"
};

oFF.OlapUiContext = function() {};
oFF.OlapUiContext.prototype = new oFF.XObject();
oFF.OlapUiContext.prototype._ff_c = "OlapUiContext";

oFF.OlapUiContext.createContext = function(uiManager, displayFactory)
{
	let obj = new oFF.OlapUiContext();
	obj.setupContext(uiManager, displayFactory);
	return obj;
};
oFF.OlapUiContext.createWithOtherContext = function(otherContext, displayFactory)
{
	let obj = new oFF.OlapUiContext();
	obj.setupWithOtherContext(otherContext, displayFactory);
	return obj;
};
oFF.OlapUiContext.prototype.m_cbController = null;
oFF.OlapUiContext.prototype.m_cmtController = null;
oFF.OlapUiContext.prototype.m_cmtFactory = null;
oFF.OlapUiContext.prototype.m_displayFactory = null;
oFF.OlapUiContext.prototype.m_messagePoster = null;
oFF.OlapUiContext.prototype.m_uiManager = null;
oFF.OlapUiContext.prototype.m_vpController = null;
oFF.OlapUiContext.prototype.m_vpFactory = null;
oFF.OlapUiContext.prototype.getClipboardController = function()
{
	if (oFF.isNull(this.m_cbController))
	{
		this.m_cbController = oFF.CbController.create(this.m_uiManager);
	}
	return this.m_cbController;
};
oFF.OlapUiContext.prototype.getCommentingController = function()
{
	if (oFF.isNull(this.m_cmtController))
	{
		this.m_cmtController = this.m_cmtFactory.newCommentingDialogInstance();
	}
	return this.m_cmtController;
};
oFF.OlapUiContext.prototype.getCommentingDialogFactory = function()
{
	return this.m_cmtFactory;
};
oFF.OlapUiContext.prototype.getDeviceInfo = function()
{
	return this.m_uiManager.getDeviceInfo();
};
oFF.OlapUiContext.prototype.getDisplayFactory = function()
{
	return this.m_displayFactory;
};
oFF.OlapUiContext.prototype.getMessageCenter = function()
{
	return this.m_messagePoster;
};
oFF.OlapUiContext.prototype.getUiManager = function()
{
	return this.m_uiManager;
};
oFF.OlapUiContext.prototype.getVariantController = function()
{
	if (oFF.isNull(this.m_vpController))
	{
		this.m_vpController = this.m_vpFactory.newVariantPopupInstance();
	}
	return this.m_vpController;
};
oFF.OlapUiContext.prototype.releaseObject = function()
{
	this.m_uiManager = null;
	this.m_displayFactory = null;
	this.m_cmtFactory = oFF.XObjectExt.release(this.m_cmtFactory);
	this.m_vpFactory = oFF.XObjectExt.release(this.m_vpFactory);
	this.m_cbController = oFF.XObjectExt.release(this.m_cbController);
	this.m_vpController = oFF.XObjectExt.release(this.m_vpController);
	this.m_messagePoster = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OlapUiContext.prototype.setCommentingDialogFactory = function(factory)
{
	this.m_cmtFactory = factory;
};
oFF.OlapUiContext.prototype.setVariantPopupFactory = function(factory)
{
	this.m_vpFactory = factory;
};
oFF.OlapUiContext.prototype.setupContext = function(uiManager, displayFactory)
{
	this.m_uiManager = uiManager;
	this.m_displayFactory = displayFactory;
	this.m_messagePoster = oFF.UiMessageCenter.createMessageCenter(uiManager.getFreeGenesis());
	this.setupFactories();
};
oFF.OlapUiContext.prototype.setupFactories = function()
{
	this.m_cmtFactory = oFF.CmtFactory.createFactory(this);
	this.m_vpFactory = oFF.VdVariantManagerFactory.createFactory(this);
};
oFF.OlapUiContext.prototype.setupWithOtherContext = function(otherContext, displayFactory)
{
	this.m_uiManager = otherContext.getUiManager();
	this.m_displayFactory = displayFactory;
	this.m_messagePoster = oFF.UiMessageCenter.createMessageCenter(otherContext.getUiManager().getFreeGenesis());
	this.setupFactories();
};

oFF.OuCalcEventEmitterManager = function() {};
oFF.OuCalcEventEmitterManager.prototype = new oFF.OuAbstractCalcEventManager();
oFF.OuCalcEventEmitterManager.prototype._ff_c = "OuCalcEventEmitterManager";

oFF.OuCalcEventEmitterManager.create = function(notificationCenter)
{
	let instance = new oFF.OuCalcEventEmitterManager();
	instance.m_notificationCenter = notificationCenter;
	return instance;
};
oFF.OuCalcEventEmitterManager.prototype.fireAssistancePanelCollapsed = function(collapsed)
{
	let notificationData = oFF.XNotificationData.create();
	notificationData.putBoolean(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED_DATA, collapsed);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireExplainFormula = function(formulaText)
{
	let notificationData = oFF.XNotificationData.create();
	notificationData.putString(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY, formulaText);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_EXPLAIN, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireExplainFormulaRunning = function(running)
{
	let notificationData = oFF.XNotificationData.create();
	notificationData.putBoolean(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY, running);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_GEN_AI_EXPLAIN_RUNNING, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireFormulaItemChosen = function(formulaItem)
{
	let notificationData = oFF.XNotificationData.create();
	notificationData.putString(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_CHOSEN_FORMULA_ITEM_DATA, formulaItem);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_CHOSEN_FORMULA_ITEM, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireFormulaRevalidation = function()
{
	let notificationData = oFF.XNotificationData.create();
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_FORMULA_REVALIDATE, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireListItemPanelCollapsed = function(collapsed)
{
	let notificationData = oFF.XNotificationData.create();
	notificationData.putBoolean(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED_DATA, collapsed);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireSetFormula = function(formulaText)
{
	let notificationData = oFF.XNotificationData.create();
	notificationData.putString(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY, formulaText);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_CODE_EDITOR_VALUE_SET, notificationData);
};
oFF.OuCalcEventEmitterManager.prototype.fireValidationMessageSet = function(messageCollection)
{
	let notifyData = oFF.XNotificationData.create();
	notifyData.putXObject(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY, messageCollection);
	this.m_notificationCenter.postNotificationWithName(oFF.OuCalcCalculations.FE_NOTIFICATION_SET_VALIDATION_MESSAGES, notifyData);
};

oFF.OuCalcEventListenerManager = function() {};
oFF.OuCalcEventListenerManager.prototype = new oFF.OuAbstractCalcEventManager();
oFF.OuCalcEventListenerManager.prototype._ff_c = "OuCalcEventListenerManager";

oFF.OuCalcEventListenerManager.create = function(notificationCenter)
{
	let instance = new oFF.OuCalcEventListenerManager();
	instance.setupInternal(notificationCenter);
	instance.m_observersUUIds = oFF.XList.create();
	return instance;
};
oFF.OuCalcEventListenerManager.prototype.m_observersUUIds = null;
oFF.OuCalcEventListenerManager.prototype.addObserverForName = function(name, consumer)
{
	let uuid = this.m_notificationCenter.addObserverForName(name, consumer);
	this.m_observersUUIds.add(oFF.XStringValue.create(uuid));
	return uuid;
};
oFF.OuCalcEventListenerManager.prototype.onAssistancePanelCollapsed = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED, (notificationData) => {
		consumer(oFF.XBooleanValue.create(notificationData.getBooleanByKey(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED_DATA)));
	});
};
oFF.OuCalcEventListenerManager.prototype.onControlFocused = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcCalculations.FE_NOTIFICATION_CONTROL_FOCUS, (notificationData) => {
		let component = notificationData.getXObjectByKey(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY);
		consumer(component);
	});
};
oFF.OuCalcEventListenerManager.prototype.onExplainFormulaRunning = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_GEN_AI_EXPLAIN_RUNNING, (notificationData) => {
		let running = notificationData.getBooleanByKey(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY);
		consumer(oFF.XBooleanValue.create(running));
	});
};
oFF.OuCalcEventListenerManager.prototype.onFormulaExplain = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_EXPLAIN, (notificationData) => {
		let formulaText = notificationData.getStringByKey(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY);
		consumer(formulaText);
	});
};
oFF.OuCalcEventListenerManager.prototype.onFormulaItemChosen = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_CHOSEN_FORMULA_ITEM, (notificationData) => {
		consumer(notificationData.getStringByKey(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_CHOSEN_FORMULA_ITEM_DATA));
	});
};
oFF.OuCalcEventListenerManager.prototype.onFormulaRevalidation = function(procedure)
{
	return this.addObserverForName(oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_FORMULA_REVALIDATE, (notificationData) => {
		procedure();
	});
};
oFF.OuCalcEventListenerManager.prototype.onFormulaSet = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_CODE_EDITOR_VALUE_SET, (notificationData) => {
		let formulaText = notificationData.getStringByKey(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY);
		consumer(formulaText);
	});
};
oFF.OuCalcEventListenerManager.prototype.onInitialDataSet = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcCalculations.FE_NOTIFICATION_SET_INITIAL_DATA, (notificationData) => {
		let initialData = notificationData.getXObjectByKey(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY);
		consumer(initialData);
	});
};
oFF.OuCalcEventListenerManager.prototype.onListItemPanelCollapsed = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED, (notificationData) => {
		consumer(oFF.XBooleanValue.create(notificationData.getBooleanByKey(oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED_DATA)));
	});
};
oFF.OuCalcEventListenerManager.prototype.onValidationMessageSet = function(consumer)
{
	return this.addObserverForName(oFF.OuCalcCalculations.FE_NOTIFICATION_SET_VALIDATION_MESSAGES, (notificationData) => {
		let messageCollection = notificationData.getXObjectByKey(oFF.OuCalcCalculations.NOTIFICATION_DATA_KEY);
		consumer(messageCollection);
	});
};
oFF.OuCalcEventListenerManager.prototype.releaseObject = function()
{
	oFF.XStream.of(this.m_observersUUIds).forEach((uuid) => {
		this.m_notificationCenter.removeObserverByUuid(uuid.getString());
	});
	this.m_observersUUIds.clear();
	this.m_observersUUIds = oFF.XObjectExt.release(this.m_observersUUIds);
	oFF.OuAbstractCalcEventManager.prototype.releaseObject.call( this );
};

oFF.DataCellDialogDragonflyEntryPoint = function() {};
oFF.DataCellDialogDragonflyEntryPoint.prototype = new oFF.DialogEntryPoint();
oFF.DataCellDialogDragonflyEntryPoint.prototype._ff_c = "DataCellDialogDragonflyEntryPoint";

oFF.DataCellDialogDragonflyEntryPoint.createEntryPoint = function(queryManager)
{
	let entryPoint = new oFF.DataCellDialogDragonflyEntryPoint();
	entryPoint.setupEntryPoint(queryManager.getApplication());
	entryPoint.m_dcController = oFF.DataCellController.create(entryPoint.getUiContext());
	return entryPoint;
};
oFF.DataCellDialogDragonflyEntryPoint.prototype.m_dcController = null;
oFF.DataCellDialogDragonflyEntryPoint.prototype.close = function()
{
	this.m_dcController.close();
};
oFF.DataCellDialogDragonflyEntryPoint.prototype.openDataCellPropertiesDialog = function(listener, queryManager, measure1, measure2, propsForSecondStructure)
{
	this.m_dcController.openDataCellPropertiesDialog(listener, queryManager, measure1, measure2, propsForSecondStructure);
};
oFF.DataCellDialogDragonflyEntryPoint.prototype.releaseObject = function()
{
	oFF.DialogEntryPoint.prototype.releaseObject.call( this );
	this.m_dcController = oFF.XObjectExt.release(this.m_dcController);
};

oFF.OuDd2DisplayTab = function() {};
oFF.OuDd2DisplayTab.prototype = new oFF.OuDd2AbstractTab();
oFF.OuDd2DisplayTab.prototype._ff_c = "OuDd2DisplayTab";

oFF.OuDd2DisplayTab.createTab = function(dimension, i18n)
{
	let obj = new oFF.OuDd2DisplayTab();
	obj.setupTab(dimension, i18n);
	return obj;
};
oFF.OuDd2DisplayTab.prototype.m_displayTab = null;
oFF.OuDd2DisplayTab.prototype.buildUi = function(genesis, parent)
{
	this.m_displayTab = parent.addNewItem();
	this.m_displayTab.setText(this.m_i18n.getText(oFF.OuDimensionDialog2I18n.DISPLAY));
	this.m_form = oFF.UiForm.create(genesis);
	let presentationItems = this.getSupportedPresentations();
	let presentationDd = this.m_form.addDropdown(oFF.OuDimensionDialog2I18n.CONTENT, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.CONTENT), presentationItems, false);
	presentationDd.setVisible(presentationItems.size() > 1);
	let typeItems = this.getSupportedTextTypes();
	let typeBtn = this.m_form.addSegmentedButton(oFF.OuDimensionDialog2I18n.TEXT_TYPE, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT_TYPE), typeItems);
	typeBtn.setVisible(typeItems.size() > 1);
	let totalsItems = oFF.XLinkedHashMapByString.create();
	totalsItems.put(oFF.ResultVisibility.ALWAYS.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS_VISIBLE));
	totalsItems.put(oFF.ResultVisibility.HIDDEN.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS_HIDDEN));
	totalsItems.put(oFF.ResultVisibility.CONDITIONAL.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS_MORE_THAN_ONE));
	let totalsDd = this.m_form.addDropdown(oFF.OuDimensionDialog2I18n.TOTALS, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS), totalsItems, false);
	totalsDd.setVisible(this.m_dimension.supportsTotals() && this.m_dimension.supportsResultVisibility());
	let totalsPositionItems = oFF.XList.create();
	totalsPositionItems.add(oFF.UiFormItemOption.createWithText(oFF.ResultAlignment.BOTTOM.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS_POSITION_BOT)));
	totalsPositionItems.add(oFF.UiFormItemOption.createWithText(oFF.ResultAlignment.TOP.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS_POSITION_TOP)));
	let totalsPosDd = this.m_form.addSegmentedButton(oFF.OuDimensionDialog2I18n.TOTALS_POSITION, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TOTALS_POSITION), totalsPositionItems);
	totalsPosDd.setVisible(this.m_dimension.supportsTotals() && this.m_dimension.supportsResultAlignment());
	let masterCb = this.m_form.addCheckbox(oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED, false, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED));
	masterCb.setVisible(this.supportsMasterReadmode());
	let view = this.m_form.getView();
	view.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	this.m_displayTab.setContent(view);
};
oFF.OuDd2DisplayTab.prototype.getNameValueOrNull = function(nameObject)
{
	if (oFF.isNull(nameObject))
	{
		return null;
	}
	return oFF.XStringValue.create(nameObject.getName());
};
oFF.OuDd2DisplayTab.prototype.getSupportedPresentations = function()
{
	let contentItems = oFF.XLinkedHashMapByString.create();
	if (this.m_mainAttributeModel.isMayDisplayText())
	{
		contentItems.put(oFF.FieldContainerDisplay.TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT));
	}
	contentItems.put(oFF.FieldContainerDisplay.KEY.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.KEY));
	if (this.m_mainAttributeModel.isMayDisplayText())
	{
		contentItems.put(oFF.FieldContainerDisplay.TEXT_AND_KEY.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT_AND_KEY));
		contentItems.put(oFF.FieldContainerDisplay.KEY_AND_TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.KEY_AND_TEXT));
	}
	return contentItems;
};
oFF.OuDd2DisplayTab.prototype.getSupportedTextTypes = function()
{
	let typeItems = oFF.XList.create();
	if (!this.m_mainAttributeModel.isMayDisplayText())
	{
		return typeItems;
	}
	if (this.m_dimension.getFieldByPresentationType(oFF.PresentationType.SHORT_TEXT) !== null)
	{
		typeItems.add(oFF.UiFormItemOption.createWithText(oFF.PresentationType.SHORT_TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_SHORT)));
	}
	if (this.m_dimension.getFieldByPresentationType(oFF.PresentationType.MEDIUM_TEXT) !== null)
	{
		typeItems.add(oFF.UiFormItemOption.createWithText(oFF.PresentationType.MEDIUM_TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_MEDIUM)));
	}
	if (this.m_dimension.getFieldByPresentationType(oFF.PresentationType.LONG_TEXT) !== null)
	{
		typeItems.add(oFF.UiFormItemOption.createWithText(oFF.PresentationType.LONG_TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_LONG)));
	}
	if (this.m_dimension.getFieldByPresentationType(oFF.PresentationType.XL_LONG_TEXT) !== null)
	{
		typeItems.add(oFF.UiFormItemOption.createWithText(oFF.PresentationType.XL_LONG_TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_XXL)));
	}
	return typeItems;
};
oFF.OuDd2DisplayTab.prototype.getTabBarItem = function()
{
	return this.m_displayTab;
};
oFF.OuDd2DisplayTab.prototype.loadState = function()
{
	let currentDisplayAs = this.m_mainAttributeModel.getDisplayAs();
	let currentTextType = this.m_mainAttributeModel.getTextView();
	let resultVisibility = this.m_dimension.getResultVisibility();
	if (resultVisibility === oFF.ResultVisibility.VISIBLE)
	{
		resultVisibility = oFF.ResultVisibility.ALWAYS;
	}
	let resultAlignment = this.m_dimension.getResultAlignment();
	let readMode = this.m_dimension.getReadMode(oFF.QContextType.RESULT_SET);
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.CONTENT).setValue(this.getNameValueOrNull(currentDisplayAs));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.TEXT_TYPE).setValue(this.getNameValueOrNull(currentTextType));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.TOTALS).setValue(this.getNameValueOrNull(resultVisibility));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.TOTALS_POSITION).setValue(this.getNameValueOrNull(resultAlignment));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED).setValue(oFF.XBooleanValue.create(readMode.isTypeOf(oFF.QMemberReadMode.MASTER)));
	this.m_startValues = oFF.PrUtils.createDeepCopy(this.m_form.getJsonModel()).asStructure();
};
oFF.OuDd2DisplayTab.prototype.releaseObject = function()
{
	this.m_displayTab = null;
	oFF.OuDd2AbstractTab.prototype.releaseObject.call( this );
};
oFF.OuDd2DisplayTab.prototype.saveState = function()
{
	let jsonModel = this.m_form.getJsonModel();
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.TEXT_TYPE))
	{
		let typeSelection = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.TEXT_TYPE);
		let textPresentation = oFF.PresentationType.lookup(typeSelection);
		if (oFF.notNull(textPresentation))
		{
			this.m_mainAttributeModel.setTextView(textPresentation);
			this.m_mainAttributeModel.applyToQueryModel(this.m_dimension.getQueryModel(), this.m_dimension.getName());
		}
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.CONTENT))
	{
		let contentSelection = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.CONTENT);
		let containerDisplay = oFF.FieldContainerDisplay.lookup(contentSelection);
		this.m_mainAttributeModel.setDisplayAs(containerDisplay);
		this.m_dimension.getQueryModel().getConvenienceCommands().clearAllAttributeFields(this.m_dimension.getName(), this.m_mainAttributeModel.getComponentName(), oFF.QContextType.RESULT_SET);
		this.m_mainAttributeModel.applyToQueryModel(this.m_dimension.getQueryModel(), this.m_dimension.getName());
		if (this.m_dimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED)
		{
			this.m_mainAttributeModel.applyMainAttributeForFieldLayout(this.m_dimension);
		}
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.TOTALS))
	{
		let totalsSelection = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.TOTALS);
		let totalsVisibility = oFF.ResultVisibility.lookup(totalsSelection);
		this.m_dimension.setResultVisibility(totalsVisibility);
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.TOTALS_POSITION))
	{
		let totalsPosSelection = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.TOTALS_POSITION);
		let totalsPosition = oFF.ResultAlignment.lookup(totalsPosSelection);
		this.m_dimension.setResultAlignment(totalsPosition);
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED))
	{
		let masterReadMode = jsonModel.getBooleanByKey(oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED);
		this.m_dimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, masterReadMode ? oFF.QMemberReadMode.MASTER : oFF.QMemberReadMode.BOOKED);
	}
};
oFF.OuDd2DisplayTab.prototype.supportsMasterReadmode = function()
{
	let supportedReadModes = this.m_dimension.getSupportedReadModes(oFF.QContextType.RESULT_SET);
	if (oFF.isNull(supportedReadModes) || this.m_dimension.isMeasureStructure())
	{
		return false;
	}
	let readModes = supportedReadModes.getValuesAsReadOnlyList();
	for (let i = 0; i < readModes.size(); i++)
	{
		if (readModes.get(i).isTypeOf(oFF.QMemberReadMode.MASTER))
		{
			return true;
		}
	}
	return false;
};

oFF.OuDd2HierarchyTab = function() {};
oFF.OuDd2HierarchyTab.prototype = new oFF.OuDd2AbstractTab();
oFF.OuDd2HierarchyTab.prototype._ff_c = "OuDd2HierarchyTab";

oFF.OuDd2HierarchyTab.createTab = function(dimension, i18n)
{
	let obj = new oFF.OuDd2HierarchyTab();
	obj.setupTab(dimension, i18n);
	return obj;
};
oFF.OuDd2HierarchyTab.prototype.m_hierarchyTab = null;
oFF.OuDd2HierarchyTab.prototype.buildUi = function(genesis, parent)
{
	if (!this.m_dimension.supportsHierarchy())
	{
		return;
	}
	this.m_hierarchyTab = parent.addNewItem();
	this.m_hierarchyTab.setText(this.m_i18n.getText(oFF.OuDimensionDialog2I18n.HIERARCHIES));
	this.m_form = oFF.UiForm.create(genesis);
	let displayHierarchically = this.m_form.addCheckbox(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY, false, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY));
	displayHierarchically.setEditable(true);
	let isStructureDim = this.m_dimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE || this.m_dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE;
	let hierarchyInput = this.m_form.addInput(oFF.OuDimensionDialog2I18n.HIERARCHY, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.HIERARCHY));
	hierarchyInput.setEditable(!isStructureDim && !this.m_dimension.isDisplayHierarchyFixInFilter());
	hierarchyInput.setPlaceholder(this.m_i18n.getText(oFF.OuDimensionDialog2I18n.ENTER_HIERARCHY_NAME));
	hierarchyInput.setValueHelpProcedure(this.launchFilterDialogForHierarchy.bind(this));
	hierarchyInput.setValueChangedConsumer((key, newValue) => {
		this.validateHierarchy(newValue);
	});
	if (isStructureDim)
	{
		hierarchyInput.setTooltip(this.m_i18n.getText(oFF.OuDimensionDialog2I18n.INFO_HIERARCHY_ON_STRUCTURE));
	}
	else if (this.m_dimension.isDisplayHierarchyFixInFilter())
	{
		hierarchyInput.setTooltip(this.m_i18n.getText(oFF.OuDimensionDialog2I18n.INFO_HIERARCHY_FIXED));
	}
	let nodeItems = oFF.XLinkedHashMapByString.create();
	nodeItems.put(oFF.XInteger.convertToString(-1), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.ALL_NODES));
	nodeItems.put(oFF.XInteger.convertToString(0), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.ONLY_ROOT_NODES));
	for (let i = 1; i < 10; i++)
	{
		let indexString = oFF.XInteger.convertToString(i);
		nodeItems.put(indexString, this.m_i18n.getTextWithPlaceholder(oFF.OuDimensionDialog2I18n.ROOT_AND_X_CHILD_LEVEL, indexString));
	}
	this.m_form.addDropdown(oFF.OuDimensionDialog2I18n.NODES_TO_SHOW, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.NODES_TO_SHOW), nodeItems, false);
	let positionItems = oFF.XList.create();
	positionItems.add(oFF.UiFormItemOption.createWithText(oFF.Alignment.CHILDREN_ABOVE_PARENT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.NODE_POSITION_ABOVE)));
	positionItems.add(oFF.UiFormItemOption.createWithText(oFF.Alignment.CHILDREN_BELOW_PARENT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.NODE_POSITION_BELOW)));
	this.m_form.addSegmentedButton(oFF.OuDimensionDialog2I18n.NODE_POSITION, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.NODE_POSITION), positionItems);
	this.m_form.addCheckbox(oFF.OuDimensionDialog2I18n.CONDENSE_NODES, false, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.CONDENSE_NODES));
	let view = this.m_form.getView();
	view.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	this.m_hierarchyTab.setContent(view);
};
oFF.OuDd2HierarchyTab.prototype.getTabBarItem = function()
{
	return this.m_hierarchyTab;
};
oFF.OuDd2HierarchyTab.prototype.launchFilterDialogForHierarchy = function()
{
	let runner = oFF.FilterDialogProgramRunnerFactory.createForHierarchyCatalog(this.m_dimension.getProcess(), this.m_dimension.getQueryManager(), this.m_dimension.getName(), this.m_i18n.getText(oFF.OuHierarchyDialogI18n.TITLE));
	let currentValue = this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.HIERARCHY).getValue();
	if (oFF.notNull(currentValue))
	{
		let currentValueString = currentValue.getStringRepresentation();
		let valueList = oFF.XCollectionUtils.singletonList(oFF.FilterDialogValueFactory.createValue(currentValueString, null, null));
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_DEFAULT_SELECTION, valueList);
	}
	runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_CLOSE, this);
	runner.setConfigStructure(oFF.PrFactory.createStructure());
	runner.runProgram();
};
oFF.OuDd2HierarchyTab.prototype.loadState = function()
{
	if (oFF.isNull(this.m_form))
	{
		return;
	}
	let hierarchyActive = this.m_dimension.isHierarchyActive();
	let hierarchyName = this.m_dimension.getHierarchyName();
	let initialDrillLevel = this.m_dimension.getInitialDrillLevel();
	let lowerLevelNodeAlignment = this.m_dimension.getLowerLevelNodeAlignment() === oFF.Alignment.DEFAULT_VALUE ? oFF.Alignment.CHILDREN_BELOW_PARENT : this.m_dimension.getHierarchyManager().getLowerLevelNodeAlignment();
	let nodeCondensation = this.m_dimension.getHierarchyManager().hasNodeCondensation();
	let hierarchically = this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY);
	hierarchically.setValue(oFF.XBooleanValue.create(hierarchyActive));
	hierarchically.setEditable(oFF.notNull(hierarchyName));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.HIERARCHY).setValue(oFF.XStringValue.create(hierarchyName));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.NODES_TO_SHOW).setValue(oFF.XStringValue.create(oFF.XInteger.convertToString(initialDrillLevel)));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.NODE_POSITION).setValue(oFF.XStringValue.create(lowerLevelNodeAlignment.getName()));
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.CONDENSE_NODES).setValue(oFF.XBooleanValue.create(nodeCondensation));
	this.m_startValues = oFF.PrUtils.createDeepCopy(this.m_form.getJsonModel()).asStructure();
};
oFF.OuDd2HierarchyTab.prototype.onFilterDialogCancel = function() {};
oFF.OuDd2HierarchyTab.prototype.onFilterDialogOk = function(selection, settings)
{
	let newValue = null;
	if (oFF.XCollectionUtils.hasElements(selection))
	{
		let hierarchy = selection.get(0);
		newValue = oFF.XStringValue.create(hierarchy.getName());
	}
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.HIERARCHY).setValue(newValue);
	this.validateHierarchy(newValue);
};
oFF.OuDd2HierarchyTab.prototype.releaseObject = function()
{
	this.m_hierarchyTab = null;
	oFF.OuDd2AbstractTab.prototype.releaseObject.call( this );
};
oFF.OuDd2HierarchyTab.prototype.saveState = function()
{
	if (oFF.isNull(this.m_form))
	{
		return;
	}
	let jsonModel = this.m_form.getJsonModel();
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.HIERARCHY) || this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY))
	{
		let hierarchyActive = jsonModel.getBooleanByKey(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY);
		let hierarchyName = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.HIERARCHY);
		if (this.m_dimension.isHierarchyActive())
		{
			if (!hierarchyActive || oFF.isNull(hierarchyName))
			{
				this.m_dimension.setHierarchyActive(false);
			}
			this.m_dimension.setHierarchyName(hierarchyName);
		}
		else
		{
			this.m_dimension.setHierarchyName(hierarchyName);
			this.m_dimension.setHierarchyActive(hierarchyActive && oFF.notNull(hierarchyName));
		}
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.NODES_TO_SHOW))
	{
		let drillLevel = oFF.XInteger.convertFromString(jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.NODES_TO_SHOW));
		this.m_dimension.getConvenienceCommands().removeDrillOperationsByDimensionName(this.m_dimension.getName());
		this.m_dimension.setInitialDrillLevel(drillLevel);
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.NODE_POSITION))
	{
		let childPosition = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.NODE_POSITION);
		let alignment = oFF.Alignment.lookup(childPosition);
		this.m_dimension.getHierarchyManager().setLowerLevelNodeAlignment(alignment);
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.CONDENSE_NODES))
	{
		let nodeCondensation = jsonModel.getBooleanByKey(oFF.OuDimensionDialog2I18n.CONDENSE_NODES);
		this.m_dimension.getHierarchyManager().setHasNodeCondensation(nodeCondensation);
	}
};
oFF.OuDd2HierarchyTab.prototype.validateHierarchy = function(newValue)
{
	let value = oFF.notNull(newValue) ? newValue.getStringRepresentation() : null;
	let checkbox = this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY);
	if (oFF.isNull(value))
	{
		checkbox.setValue(oFF.XBooleanValue.create(false));
	}
	checkbox.setEditable(!this.m_dimension.isDisplayHierarchyFixInFilter() && oFF.notNull(value));
};

oFF.OuDd2SortingTab = function() {};
oFF.OuDd2SortingTab.prototype = new oFF.OuDd2AbstractTab();
oFF.OuDd2SortingTab.prototype._ff_c = "OuDd2SortingTab";

oFF.OuDd2SortingTab.createTab = function(dimension, i18n)
{
	let obj = new oFF.OuDd2SortingTab();
	obj.setupTab(dimension, i18n);
	return obj;
};
oFF.OuDd2SortingTab.lookupDirection = function(name)
{
	if (oFF.XString.isEqual(name, oFF.XSortDirection.NONE.getName()))
	{
		return oFF.XSortDirection.NONE;
	}
	if (oFF.XString.isEqual(name, oFF.XSortDirection.ASCENDING.getName()))
	{
		return oFF.XSortDirection.ASCENDING;
	}
	if (oFF.XString.isEqual(name, oFF.XSortDirection.DESCENDING.getName()))
	{
		return oFF.XSortDirection.DESCENDING;
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Unknown sort direction ", name));
};
oFF.OuDd2SortingTab.prototype.m_sortingTab = null;
oFF.OuDd2SortingTab.prototype.buildUi = function(genesis, parent)
{
	let sortTypes = this.getSupportedSortTypes();
	if (sortTypes.isEmpty())
	{
		return;
	}
	this.m_sortingTab = parent.addNewItem();
	this.m_sortingTab.setText(this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORTING));
	this.m_form = oFF.UiForm.create(genesis);
	let directionItems = oFF.XLinkedHashMapByString.create();
	directionItems.put(oFF.XSortDirection.NONE.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_NONE));
	directionItems.put(oFF.XSortDirection.ASCENDING.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_ASCENDING));
	directionItems.put(oFF.XSortDirection.DESCENDING.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_DESCENDING));
	this.m_form.addDropdown(oFF.OuDimensionDialog2I18n.SORT_DIRECTION, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION), directionItems, false);
	this.m_form.addDropdown(oFF.OuDimensionDialog2I18n.SORT_BY, null, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_BY), sortTypes, false);
	let breakCb = this.m_form.addCheckbox(oFF.OuDimensionDialog2I18n.BREAK_GROUPING, false, this.m_i18n.getText(oFF.OuDimensionDialog2I18n.BREAK_GROUPING));
	breakCb.setVisible(this.m_dimension.getResultSetSorting().supportsBreakGrouping() && this.m_dimension.getResultSetSorting().supportsPreserveGrouping());
	let view = this.m_form.getView();
	view.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	this.m_sortingTab.setContent(view);
};
oFF.OuDd2SortingTab.prototype.getSupportedSortTypes = function()
{
	let sortItems = oFF.XLinkedHashMapByString.create();
	if (this.m_dimension.supportsSorting(oFF.SortType.MEMBER_TEXT) && this.m_mainAttributeModel.isMayDisplayText())
	{
		sortItems.put(oFF.SortType.MEMBER_TEXT.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.TEXT));
	}
	if (this.m_dimension.supportsSorting(oFF.SortType.MEMBER_KEY))
	{
		sortItems.put(oFF.SortType.MEMBER_KEY.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.KEY));
	}
	if (this.m_dimension.supportsSorting(oFF.SortType.HIERARCHY))
	{
		sortItems.put(oFF.SortType.HIERARCHY.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_BY_HIERARCHY));
	}
	if (this.m_dimension.supportsSorting(oFF.SortType.FILTER))
	{
		sortItems.put(oFF.SortType.FILTER.getName(), this.m_i18n.getText(oFF.OuDimensionDialog2I18n.SORT_BY_FILTER));
	}
	return sortItems;
};
oFF.OuDd2SortingTab.prototype.getTabBarItem = function()
{
	return this.m_sortingTab;
};
oFF.OuDd2SortingTab.prototype.loadState = function()
{
	if (oFF.isNull(this.m_form))
	{
		return;
	}
	let sorting = this.m_dimension.getResultSetSorting();
	let sortingType = sorting.getSortingType();
	let memberSort = sortingType === oFF.SortType.MEMBER_KEY || sortingType === oFF.SortType.MEMBER_TEXT;
	let direction = memberSort ? sorting.getDirection() : oFF.XSortDirection.NONE;
	let breakGroupingEnabled = sorting.isBreakGroupingEnabled();
	let sortDirectionItem = this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.SORT_DIRECTION);
	sortDirectionItem.setValue(oFF.XStringValue.create(direction.getName()));
	sortDirectionItem.setVisible(memberSort);
	let sortByItem = this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.SORT_BY);
	sortByItem.setValue(oFF.XStringValue.create(sortingType.getName()));
	sortByItem.setValueChangedConsumer((text, value) => {
		let changedSortType = oFF.SortType.lookup(value.getStringRepresentation());
		let changedMemberSort = changedSortType === oFF.SortType.MEMBER_KEY || changedSortType === oFF.SortType.MEMBER_TEXT;
		sortDirectionItem.setVisible(changedMemberSort);
	});
	this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.BREAK_GROUPING).setValue(oFF.XBooleanValue.create(breakGroupingEnabled));
	this.m_startValues = oFF.PrUtils.createDeepCopy(this.m_form.getJsonModel()).asStructure();
};
oFF.OuDd2SortingTab.prototype.releaseObject = function()
{
	this.m_sortingTab = null;
	oFF.OuDd2AbstractTab.prototype.releaseObject.call( this );
};
oFF.OuDd2SortingTab.prototype.saveState = function()
{
	if (oFF.isNull(this.m_form))
	{
		return;
	}
	let jsonModel = this.m_form.getJsonModel();
	let sorting = this.m_dimension.getResultSetSorting();
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.SORT_DIRECTION))
	{
		if (!this.m_form.getFormItemByKey(oFF.OuDimensionDialog2I18n.SORT_DIRECTION).isVisible())
		{
			sorting.setDirection(oFF.XSortDirection.NONE);
		}
		else
		{
			let directionSelection = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.SORT_DIRECTION);
			let sortDirection = oFF.OuDd2SortingTab.lookupDirection(directionSelection);
			sorting.setDirection(sortDirection);
		}
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.SORT_BY))
	{
		let sortBySelection = jsonModel.getStringByKey(oFF.OuDimensionDialog2I18n.SORT_BY);
		let sortType = oFF.SortType.lookup(sortBySelection);
		sorting.setSortType(sortType);
	}
	if (this.hasChanged(jsonModel, oFF.OuDimensionDialog2I18n.BREAK_GROUPING))
	{
		let breakGrouping = jsonModel.getBooleanByKey(oFF.OuDimensionDialog2I18n.BREAK_GROUPING);
		sorting.setBreakGrouping(breakGrouping);
	}
};

oFF.FdDataLoadedLambdaListener = function() {};
oFF.FdDataLoadedLambdaListener.prototype = new oFF.XObject();
oFF.FdDataLoadedLambdaListener.prototype._ff_c = "FdDataLoadedLambdaListener";

oFF.FdDataLoadedLambdaListener.create = function(onOk, onError)
{
	let listener = new oFF.FdDataLoadedLambdaListener();
	listener.m_onOkListener = onOk;
	listener.m_onErrorListener = onError;
	return listener;
};
oFF.FdDataLoadedLambdaListener.prototype.m_onErrorListener = null;
oFF.FdDataLoadedLambdaListener.prototype.m_onOkListener = null;
oFF.FdDataLoadedLambdaListener.prototype.onError = function(messages, customIdentifier)
{
	if (oFF.notNull(this.m_onErrorListener))
	{
		this.m_onErrorListener(messages);
	}
};
oFF.FdDataLoadedLambdaListener.prototype.onProcessFinished = function(items, messages, customIdentifier)
{
	if (oFF.notNull(this.m_onOkListener))
	{
		this.m_onOkListener(items, messages);
	}
};
oFF.FdDataLoadedLambdaListener.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_onOkListener = null;
	this.m_onErrorListener = null;
};

oFF.FdHierarchyModel = function() {};
oFF.FdHierarchyModel.prototype = new oFF.XObject();
oFF.FdHierarchyModel.prototype._ff_c = "FdHierarchyModel";

oFF.FdHierarchyModel.create = function()
{
	let hierarchyModel = new oFF.FdHierarchyModel();
	hierarchyModel.m_hierarchies = oFF.XLinkedHashMapByString.create();
	hierarchyModel.m_hierarchyChangeListeners = oFF.XList.create();
	hierarchyModel.m_availableHierarchiesChangeListeners = oFF.XList.create();
	return hierarchyModel;
};
oFF.FdHierarchyModel.prototype.m_activeHierarchyChanged = false;
oFF.FdHierarchyModel.prototype.m_availableHierarchiesChangeListeners = null;
oFF.FdHierarchyModel.prototype.m_hasRootNodesOnly = false;
oFF.FdHierarchyModel.prototype.m_hierarchies = null;
oFF.FdHierarchyModel.prototype.m_hierarchyChangeListeners = null;
oFF.FdHierarchyModel.prototype.m_hierarchyContentProvider = null;
oFF.FdHierarchyModel.prototype.changeHierarchy = function(hierarchyName)
{
	let currentHierarchy = this.getHierarchyName();
	if (!oFF.XString.isEqual(currentHierarchy, hierarchyName) && oFF.notNull(this.m_hierarchyContentProvider))
	{
		this.m_hierarchyContentProvider.changeHierarchy(hierarchyName);
		this.m_activeHierarchyChanged = true;
		this.ensureActiveHierarchyExistsInHierarchyList();
		oFF.XCollectionUtils.forEach(this.m_hierarchyChangeListeners, (listener) => {
			listener.onHierarchyChanged(hierarchyName);
		});
	}
};
oFF.FdHierarchyModel.prototype.ensureActiveHierarchyExistsInHierarchyList = function()
{
	if (oFF.isNull(this.m_hierarchies))
	{
		this.m_hierarchies = oFF.XHashMapByString.create();
	}
	let hierarchyName = this.getHierarchyName();
	if (this.isHierarchical() && !this.m_hierarchies.containsKey(hierarchyName))
	{
		this.m_hierarchies.put(hierarchyName, hierarchyName);
	}
};
oFF.FdHierarchyModel.prototype.fetchChildren = function(node, offset, amount, presentations, listener, customIdentifier)
{
	if (oFF.notNull(this.m_hierarchyContentProvider))
	{
		this.m_hierarchyContentProvider.fetchChildren(node, offset, amount, presentations, listener, customIdentifier);
	}
};
oFF.FdHierarchyModel.prototype.getHierarchies = function()
{
	return this.m_hierarchies;
};
oFF.FdHierarchyModel.prototype.getHierarchyName = function()
{
	return oFF.notNull(this.m_hierarchyContentProvider) ? this.m_hierarchyContentProvider.getHierarchyName() : null;
};
oFF.FdHierarchyModel.prototype.hasRootNodesOnly = function()
{
	return this.m_hasRootNodesOnly;
};
oFF.FdHierarchyModel.prototype.isActiveHierarchyChanged = function()
{
	return this.m_activeHierarchyChanged;
};
oFF.FdHierarchyModel.prototype.isHierarchical = function()
{
	return oFF.notNull(this.m_hierarchyContentProvider) && this.m_hierarchyContentProvider.isHierarchical();
};
oFF.FdHierarchyModel.prototype.processHierarchies = function()
{
	if (oFF.notNull(this.m_hierarchyContentProvider))
	{
		this.m_hierarchyContentProvider.processHierarchies();
	}
};
oFF.FdHierarchyModel.prototype.registerOnActiveHierarchyChange = function(listener)
{
	oFF.XCollectionUtils.addIfNotPresent(this.m_hierarchyChangeListeners, listener);
};
oFF.FdHierarchyModel.prototype.registerOnAvailableHierarchiesChange = function(listener)
{
	oFF.XCollectionUtils.addIfNotPresent(this.m_availableHierarchiesChangeListeners, listener);
};
oFF.FdHierarchyModel.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_hierarchyContentProvider = null;
	this.m_hierarchies = oFF.XObjectExt.release(this.m_hierarchies);
	this.m_hierarchyChangeListeners = oFF.XObjectExt.release(this.m_hierarchyChangeListeners);
	this.m_availableHierarchiesChangeListeners = oFF.XObjectExt.release(this.m_availableHierarchiesChangeListeners);
};
oFF.FdHierarchyModel.prototype.resetHierarchyChangedState = function()
{
	this.m_activeHierarchyChanged = false;
};
oFF.FdHierarchyModel.prototype.setHasRootNodesOnly = function(hasRootNodesOnly)
{
	this.m_hasRootNodesOnly = hasRootNodesOnly;
};
oFF.FdHierarchyModel.prototype.setHierarchies = function(hierarchies)
{
	this.m_hierarchies = hierarchies;
	this.ensureActiveHierarchyExistsInHierarchyList();
	if (oFF.notNull(this.m_availableHierarchiesChangeListeners))
	{
		oFF.XCollectionUtils.forEach(this.m_availableHierarchiesChangeListeners, (listener) => {
			listener.onAvailableHierarchiesChanged(this.m_hierarchies, this.getHierarchyName());
		});
	}
};
oFF.FdHierarchyModel.prototype.setHierarchyContentProvider = function(hierarchyContentProvider)
{
	this.m_hierarchyContentProvider = hierarchyContentProvider;
	this.ensureActiveHierarchyExistsInHierarchyList();
};
oFF.FdHierarchyModel.prototype.unregisterOnActiveHierarchyChange = function(listener)
{
	this.m_hierarchyChangeListeners.removeElement(listener);
};
oFF.FdHierarchyModel.prototype.unregisterOnAvailableHierarchiesChange = function(listener)
{
	this.m_availableHierarchiesChangeListeners.removeElement(listener);
};

oFF.FdContentProviderHierarchyCatalog = function() {};
oFF.FdContentProviderHierarchyCatalog.prototype = new oFF.XObject();
oFF.FdContentProviderHierarchyCatalog.prototype._ff_c = "FdContentProviderHierarchyCatalog";

oFF.FdContentProviderHierarchyCatalog.DATE_FROM = "dateFrom";
oFF.FdContentProviderHierarchyCatalog.DATE_TO = "dateTo";
oFF.FdContentProviderHierarchyCatalog.OBJECT_VERSION = "objectVersion";
oFF.FdContentProviderHierarchyCatalog.VERSION = "version";
oFF.FdContentProviderHierarchyCatalog.create = function(model)
{
	let obj = new oFF.FdContentProviderHierarchyCatalog();
	obj.setupExt(model.getConfig().getDimension(), model);
	return obj;
};
oFF.FdContentProviderHierarchyCatalog.createWithoutModelReference = function(dimension)
{
	let obj = new oFF.FdContentProviderHierarchyCatalog();
	obj.setupExt(dimension, null);
	return obj;
};
oFF.FdContentProviderHierarchyCatalog.getHierarchyTextFromCatalogItem = function(item)
{
	let mediumText = item.getHierarchyMediumText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(mediumText))
	{
		return mediumText;
	}
	let shortText = item.getHierarchyShortText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(shortText))
	{
		return shortText;
	}
	let longText = item.getHierarchyLongText();
	return oFF.XStringUtils.isNotNullAndNotEmpty(longText) ? longText : item.getHierarchyName();
};
oFF.FdContentProviderHierarchyCatalog.prototype.m_allItems = null;
oFF.FdContentProviderHierarchyCatalog.prototype.m_catalogManager = null;
oFF.FdContentProviderHierarchyCatalog.prototype.m_dimension = null;
oFF.FdContentProviderHierarchyCatalog.prototype.m_model = null;
oFF.FdContentProviderHierarchyCatalog.prototype.m_searchPattern = null;
oFF.FdContentProviderHierarchyCatalog.prototype.m_searchPresentations = null;
oFF.FdContentProviderHierarchyCatalog.prototype.configureSearch = function()
{
	let wildcard = oFF.XStringUtils.concatenate3("*", this.m_searchPattern, "*");
	for (let i = 0; i < this.m_searchPresentations.size(); i++)
	{
		let presentation = this.m_searchPresentations.get(i);
		if (presentation.getCustomObject() !== null)
		{
			let additional = presentation.getCustomObject().toString();
			switch (additional)
			{
				case oFF.FdContentProviderHierarchyCatalog.VERSION:
					this.m_catalogManager.setFilterVersionNameWithOperator(wildcard, oFF.ComparisonOperator.MATCH);
					break;

				case oFF.FdContentProviderHierarchyCatalog.OBJECT_VERSION:
					this.m_catalogManager.setFilterHierarchyObjectVersionWithOperator(wildcard, oFF.ComparisonOperator.MATCH);
					break;
			}
		}
		else if (presentation.isKey())
		{
			this.m_catalogManager.setFilterHierarchyNameWithOperator(wildcard, oFF.ComparisonOperator.MATCH);
		}
	}
};
oFF.FdContentProviderHierarchyCatalog.prototype.getCatalogResult = function(syncType, callback, onError)
{
	if (!oFF.HierarchyCatalogUtil.supportsHierarchyCatalog2(this.m_dimension.getApplication(), this.m_dimension.getQueryModel().getSystemDescription()))
	{
		callback(oFF.ExtResult.create(this.m_dimension.getHierarchies(), null));
		return;
	}
	if (oFF.isNull(this.m_catalogManager))
	{
		let serviceConfig = oFF.OlapApiModule.SERVICE_TYPE_HIERARCHY_CATALOG.createServiceConfig(this.m_dimension.getApplication());
		serviceConfig.setSystemName(this.m_dimension.getQueryModel().getSystemName());
		let dataSource = this.m_dimension.getQueryModel().getDataSource().getFullQualifiedName();
		serviceConfig.setDataSourceName(dataSource);
		serviceConfig.setDimension(this.m_dimension);
		serviceConfig.processHierarchyCatalogManagerCreation(syncType, oFF.HierarchyCatalogCallbackLambda.createForCreation((createResult) => {
			if (createResult.hasErrors() || createResult.getData() === null)
			{
				onError(createResult);
				return;
			}
			this.m_catalogManager = createResult.getData();
			this.getCatalogResult(syncType, callback, onError);
		}), null);
	}
	else
	{
		this.resetManager();
		this.configureSearch();
		let hierarchyDate = this.getHierarchyDate();
		this.m_catalogManager.setFilterHierarchyDate(hierarchyDate, oFF.notNull(hierarchyDate));
		this.m_catalogManager.processGetResult(syncType, oFF.HierarchyCatalogCallbackLambda.createForResult((result) => {
			if (result.hasErrors())
			{
				onError(result);
			}
			callback(result);
		}), null);
	}
};
oFF.FdContentProviderHierarchyCatalog.prototype.getHierarchyDate = function()
{
	let hierarchy = this.m_dimension.getHierarchy();
	let hierarchyDate = oFF.notNull(hierarchy) ? hierarchy.getHierarchyDueDate() : null;
	if (oFF.isNull(hierarchyDate))
	{
		let dateTime = this.m_dimension.getQueryModel().getCubeInfo().getDueDate();
		hierarchyDate = oFF.notNull(dateTime) ? dateTime.getDate() : null;
	}
	return hierarchyDate;
};
oFF.FdContentProviderHierarchyCatalog.prototype.getMissingPresentations = function(items, presentations)
{
	return null;
};
oFF.FdContentProviderHierarchyCatalog.prototype.loadMissingPresentations = function(items, missingPresentations, listener, customIdentifier)
{
	listener.onProcessFinished(items, null, customIdentifier);
};
oFF.FdContentProviderHierarchyCatalog.prototype.loadSuggestions = function(text, listener) {};
oFF.FdContentProviderHierarchyCatalog.prototype.mapValueHelpResult = function(items)
{
	let result = oFF.XList.create();
	for (let i = 0; i < items.size(); i++)
	{
		let item = items.get(i);
		result.add(oFF.FdHierarchyCatalogItem.createHierarchyCatalogItem(item));
	}
	return result;
};
oFF.FdContentProviderHierarchyCatalog.prototype.mapValueHelpResultToHierarchyNames = function(result)
{
	return oFF.XStream.of(result.getObjects()).filter((catalogItem1) => {
		return oFF.notNull(catalogItem1) && oFF.XStringUtils.isNotNullAndNotEmpty(catalogItem1.getHierarchyName());
	}).collect(oFF.XStreamCollectorImpl.create(() => {
		return oFF.XLinkedHashMapByString.create();
	}, (map, hierarchyItem) => {
		map.put(hierarchyItem.getHierarchyName(), oFF.FdContentProviderHierarchyCatalog.getHierarchyTextFromCatalogItem(hierarchyItem));
		return map;
	}));
};
oFF.FdContentProviderHierarchyCatalog.prototype.processData = function(startPage, endPage, presentations, listener, customIdentifier)
{
	this.m_searchPattern = null;
	this.m_searchPresentations.clear();
	this.getCatalogResult(oFF.OlapUiValueHelpAbstract.s_syncType, (result) => {
		this.m_allItems = oFF.notNull(result) ? this.mapValueHelpResult(result.getData().getObjects()) : oFF.XList.create();
		if (oFF.notNull(this.m_model))
		{
			this.m_model.setTotalItemCount(this.m_allItems.size());
		}
		listener.onProcessFinished(this.m_allItems, result, customIdentifier);
	}, (errorResult) => {
		listener.onError(errorResult, customIdentifier);
	});
};
oFF.FdContentProviderHierarchyCatalog.prototype.processDataRange = function(listener, customIdentifier)
{
	listener.onProcessFinished(oFF.XList.create(), null, customIdentifier);
};
oFF.FdContentProviderHierarchyCatalog.prototype.processFetchHierarchyNames = function(listener, sessionData, contentType)
{
	if (contentType === oFF.FilterDialogContentType.DIMENSION && this.m_dimension.getHierarchyKeyField() !== null && !this.m_dimension.getHierarchyKeyField().isFilterable() || !this.m_dimension.supportsHierarchy())
	{
		listener(oFF.XHashMapByString.create());
		return;
	}
	let hierarchiesInSession = sessionData.getHierarchies();
	if (oFF.notNull(hierarchiesInSession) && oFF.XObjectExt.areEqual(sessionData.getHierarchiesDueDate(), this.getHierarchyDate()))
	{
		listener(hierarchiesInSession);
		return;
	}
	this.m_searchPattern = null;
	this.m_searchPresentations.clear();
	this.getCatalogResult(oFF.OlapUiValueHelpAbstract.s_syncType, (result) => {
		let hierarchies = null;
		if (oFF.notNull(result) && result.getData() !== null)
		{
			hierarchies = this.mapValueHelpResultToHierarchyNames(result.getData());
			sessionData.setHierarchies(hierarchies, oFF.notNull(this.m_catalogManager) ? this.m_catalogManager.getFilterHierarchyDate() : null);
		}
		listener(hierarchies);
	}, (errorResult) => {
		listener(oFF.XHashMapByString.create());
	});
};
oFF.FdContentProviderHierarchyCatalog.prototype.releaseObject = function()
{
	this.m_dimension = null;
	this.m_allItems = null;
	this.m_searchPattern = null;
	this.m_searchPresentations = oFF.XObjectExt.release(this.m_searchPresentations);
	this.m_catalogManager = oFF.XObjectExt.release(this.m_catalogManager);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdContentProviderHierarchyCatalog.prototype.resetManager = function()
{
	this.m_catalogManager.setFilterHierarchyName(null, false);
	this.m_catalogManager.setFilterHierarchyObjectVersion(null, false);
	this.m_catalogManager.setFilterVersionName(null, false);
};
oFF.FdContentProviderHierarchyCatalog.prototype.search = function(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier)
{
	this.m_searchPattern = searchPattern;
	this.m_searchPresentations.clear();
	this.m_searchPresentations.addAll(searchPresentations);
	if (this.m_searchPresentations.isEmpty())
	{
		this.m_searchPresentations.add(oFF.FdPresentationValue.create("", null, true, true, null));
	}
	this.getCatalogResult(oFF.OlapUiValueHelpAbstract.s_syncType, (result) => {
		let found = oFF.notNull(result) ? this.mapValueHelpResult(result.getData().getObjects()) : null;
		listener.onProcessFinished(found, result, customIdentifier);
	}, (errorResult) => {
		listener.onError(errorResult, customIdentifier);
	});
};
oFF.FdContentProviderHierarchyCatalog.prototype.setupExt = function(dimension, model)
{
	this.m_dimension = dimension;
	this.m_searchPresentations = oFF.XList.create();
	this.setupModel(model);
};
oFF.FdContentProviderHierarchyCatalog.prototype.setupModel = function(model)
{
	if (oFF.notNull(model))
	{
		this.m_model = model;
		model.setSessionData(oFF.FdSessionBasedSettings.createByContentType(oFF.FilterDialogContentType.HIERARCHY_CATALOG));
		model.setViewTypes(oFF.XCollectionUtils.singletonList(oFF.FilterDialogViewType.LIST));
		let mainPresentations = oFF.FdPresentationFactory.createMainPresentationsForHierarchyCatalog(model.getConfig().isOfferDisplayInfoExtendedSettings());
		let additionalPresentations = oFF.FdPresentationFactory.createAdditionalPresentationsForHierarchyCatalog();
		let displayInfoInSession = model.getSessionData().getMainPresentationDisplayInfo();
		let displayInfo = oFF.notNull(displayInfoInSession) ? displayInfoInSession : model.getConfig().getDisplayInfo();
		let presentationsInSession = this.m_model.getSessionData().getAdditionalPresentations();
		let selectedPresentations = oFF.notNull(presentationsInSession) ? presentationsInSession : model.getConfig().getDefaultAttributeSelection();
		let selectedMainPresentation = oFF.FdPresentationFactory.mapDimensionDisplayInfoToPresentation(displayInfo, this.m_dimension, mainPresentations);
		model.getPresentationsModel().setupModel(mainPresentations, additionalPresentations, selectedMainPresentation, selectedPresentations);
	}
};
oFF.FdContentProviderHierarchyCatalog.prototype.syncSelectionListWithKnownItems = function(selectionList, knownItems, presentations, removeUnknownValues, populateErrors, listener, customIdentifier)
{
	if (oFF.isNull(selectionList))
	{
		listener.onProcessFinished(null, null, customIdentifier);
		return;
	}
	for (let i = 0; i < selectionList.size(); i++)
	{
		let selected = selectionList.get(i);
		let optional = oFF.XStream.of(this.m_allItems).find((known) => {
			return oFF.XString.isEqual(known.getKey(), selected.getKey());
		});
		if (optional.isPresent())
		{
			selectionList.set(i, optional.get());
		}
	}
	listener.onProcessFinished(selectionList, null, customIdentifier);
};

oFF.FdContentProviderUserTeam = function() {};
oFF.FdContentProviderUserTeam.prototype = new oFF.XObject();
oFF.FdContentProviderUserTeam.prototype._ff_c = "FdContentProviderUserTeam";

oFF.FdContentProviderUserTeam.create = function(model, process)
{
	let contentProvider = new oFF.FdContentProviderUserTeam();
	contentProvider.setupContentProvider(model, process);
	return contentProvider;
};
oFF.FdContentProviderUserTeam.prototype.m_fetchUsersTeams = null;
oFF.FdContentProviderUserTeam.prototype.m_model = null;
oFF.FdContentProviderUserTeam.prototype.m_process = null;
oFF.FdContentProviderUserTeam.prototype.m_teamCount = 0;
oFF.FdContentProviderUserTeam.prototype.m_userCount = 0;
oFF.FdContentProviderUserTeam.prototype._setUsersTeamsFetcher = function(fetchUsersTeams)
{
	this.m_fetchUsersTeams = fetchUsersTeams;
};
oFF.FdContentProviderUserTeam.prototype.callListener = function(teams, users, listener, customIdentifier)
{
	let config = this.m_model.getConfig();
	let hiddenValues = oFF.XCollectionUtils.map(config.getHiddenValues(), (value) => {
		return oFF.XString.toLowerCase(value);
	});
	let items = oFF.XList.create();
	oFF.XStream.of(teams).map((team) => {
		return oFF.FdTeamItem.createWithAttributes(team.getAttributes());
	}).filter((teamItem) => {
		return !hiddenValues.contains(oFF.XString.toLowerCase(teamItem.getKey())) && !hiddenValues.contains(oFF.XString.toLowerCase(teamItem.getDisplayKey()));
	}).forEach((validTeamItem) => {
		items.add(validTeamItem);
	});
	oFF.XStream.of(users).map((user) => {
		return oFF.FdUserItem.createWithAttributes(user.getAttributes());
	}).filter((userItem) => {
		return !hiddenValues.contains(oFF.XString.toLowerCase(userItem.getKey())) && !hiddenValues.contains(oFF.XString.toLowerCase(userItem.getDisplayKey()));
	}).forEach((validUserItem) => {
		items.add(validUserItem);
	});
	listener.onProcessFinished(items, null, customIdentifier);
};
oFF.FdContentProviderUserTeam.prototype.loadSuggestions = function(text, listener) {};
oFF.FdContentProviderUserTeam.prototype.loadTeamsAndUsers = function(offsetTeams, maxItems, searchPattern, listener, customIdentifier)
{
	this.m_fetchUsersTeams.getTeams(this.m_process, offsetTeams, maxItems, searchPattern, null, this.m_model.getConfig().getWorkspace()).onThen((resultTeams) => {
		let resultset = resultTeams.getData().getCachedChildrenResultset();
		let isInitialFetch = offsetTeams === 0 && oFF.isNull(searchPattern);
		if (isInitialFetch)
		{
			this.m_teamCount = resultset.getTotalItemCount();
		}
		let teams = resultset.getChildFiles();
		let remainingItems = maxItems - teams.size();
		if (isInitialFetch || remainingItems > 0)
		{
			this.loadUsers(0, remainingItems, searchPattern, teams, listener, customIdentifier);
		}
		else
		{
			this.callListener(teams, null, listener, customIdentifier);
		}
	}).onCatch((errorUsers) => {
		listener.onError(oFF.ExtResult.createWithErrorMessage(errorUsers.getText()), customIdentifier);
	});
};
oFF.FdContentProviderUserTeam.prototype.loadUsers = function(offset, maxItems, searchPattern, teams, listener, customIdentifier)
{
	this.m_fetchUsersTeams.getUsers(this.m_process, offset, maxItems, searchPattern, null, this.m_model.getConfig().getWorkspace()).onThen((resultUsers) => {
		let resultset = resultUsers.getData().getCachedChildrenResultset();
		if (offset === 0 && oFF.isNull(searchPattern))
		{
			this.m_userCount = resultset.getTotalItemCount();
			this.m_model.setTotalItemCount(this.m_teamCount + this.m_userCount);
		}
		this.callListener(teams, resultset.getChildFiles(), listener, customIdentifier);
	}).onCatch((errorUsers) => {
		listener.onError(oFF.ExtResult.createWithErrorMessage(errorUsers.getText()), customIdentifier);
	});
};
oFF.FdContentProviderUserTeam.prototype.preloadNextPages = function(startPage, presentations, listener, customIdentifier)
{
	if (this.m_teamCount !== -1 && this.m_userCount !== -1 && startPage * this.m_model.getConfig().getListPageSize() >= this.m_teamCount + this.m_userCount)
	{
		listener.onProcessFinished(oFF.XList.create(), null, customIdentifier);
		return;
	}
	this.processData(startPage, startPage + this.m_model.getConfig().getListPreloadPageCount(), presentations, listener, customIdentifier);
};
oFF.FdContentProviderUserTeam.prototype.processData = function(startPage, endPage, presentations, listener, customIdentifier)
{
	let pageSize = this.m_model.getConfig().getListPageSize();
	let maxItems = endPage === -1 ? endPage : (endPage - startPage + 1) * pageSize;
	if (startPage > 0 && this.m_teamCount !== -1 && startPage * pageSize >= this.m_teamCount)
	{
		let offsetUsers = (startPage * pageSize) - this.m_teamCount;
		this.loadUsers(offsetUsers, maxItems, null, null, listener, customIdentifier);
		return;
	}
	this.loadTeamsAndUsers(startPage * pageSize, maxItems, null, listener, customIdentifier);
};
oFF.FdContentProviderUserTeam.prototype.processDataRange = function(listener, customIdentifier) {};
oFF.FdContentProviderUserTeam.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_model = null;
	this.m_process = null;
	this.m_fetchUsersTeams = oFF.XObjectExt.release(this.m_fetchUsersTeams);
};
oFF.FdContentProviderUserTeam.prototype.search = function(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier)
{
	this.loadTeamsAndUsers(0, this.m_model.getConfig().getSearchSize(), searchPattern, listener, customIdentifier);
};
oFF.FdContentProviderUserTeam.prototype.setupContentProvider = function(model, process)
{
	this.m_teamCount = -1;
	this.m_userCount = -1;
	this.m_model = model;
	this.m_process = process;
	this.m_fetchUsersTeams = oFF.OuFetchUsersTeams.create(oFF.XLocalizationCenter.getCenter());
	model.setSessionData(oFF.FdSessionBasedSettings.createByContentType(oFF.FilterDialogContentType.USER_TEAM));
	model.setViewTypes(oFF.XCollectionUtils.singletonList(oFF.FilterDialogViewType.LIST));
	let mainPresentations = oFF.FdPresentationFactory.createMainPresentationsForUserAndText(model.getConfig().isOfferDisplayInfoExtendedSettings());
	let displayInfoInSession = model.getSessionData().getMainPresentationDisplayInfo();
	let displayInfo = oFF.notNull(displayInfoInSession) ? displayInfoInSession : model.getConfig().getDisplayInfo();
	let selectedMainPresentation = oFF.FdPresentationFactory.mapDisplayInfoToPresentation(displayInfo, mainPresentations);
	model.getPresentationsModel().setupModel(mainPresentations, null, selectedMainPresentation, null);
};
oFF.FdContentProviderUserTeam.prototype.syncSelectionListWithKnownItems = function(selectionList, knownItems, presentations, removeUnknownValues, populateErrors, listener, customIdentifier)
{
	if (oFF.isNull(selectionList))
	{
		listener.onProcessFinished(oFF.XList.create(), null, customIdentifier);
		return;
	}
	let unknownItems = oFF.XList.create();
	for (let i = 0; i < selectionList.size(); i++)
	{
		let item = selectionList.get(i);
		let userTeamItem = oFF.XCollectionUtils.findFirst(knownItems, (known) => {
			return known.isEqualTo(item);
		});
		if (oFF.notNull(userTeamItem))
		{
			selectionList.set(i, userTeamItem);
		}
		else if (oFF.XStringUtils.isNotNullAndNotEmpty(item.getKey()) || oFF.XStringUtils.isNotNullAndNotEmpty(item.getDisplayKey()))
		{
			unknownItems.add(item);
		}
	}
	if (unknownItems.isEmpty())
	{
		listener.onProcessFinished(selectionList, null, customIdentifier);
	}
	else
	{
		oFF.XCollectionUtils.forEach(unknownItems.createListCopy(), (unknownItem) => {
			let searchValue = oFF.XStringUtils.isNotNullAndNotEmpty(unknownItem.getKey()) ? unknownItem.getKey() : unknownItem.getDisplayKey();
			this.loadTeamsAndUsers(0, 1, searchValue, oFF.FdDataLoadedLambdaListener.create((userTeamItems, messages) => {
				if (userTeamItems.hasElements() && selectionList.contains(unknownItem))
				{
					selectionList.set(selectionList.getIndex(unknownItem), userTeamItems.get(0));
				}
				unknownItems.removeElement(unknownItem);
				if (unknownItems.isEmpty())
				{
					listener.onProcessFinished(selectionList, null, customIdentifier);
				}
			}, null), null);
		});
	}
};

oFF.FdValueHelpListenerProxy = function() {};
oFF.FdValueHelpListenerProxy.prototype = new oFF.XObject();
oFF.FdValueHelpListenerProxy.prototype._ff_c = "FdValueHelpListenerProxy";

oFF.FdValueHelpListenerProxy.create = function(listener, customIdentifier, valueHelpType)
{
	let fdValueHelpListenerProxy = new oFF.FdValueHelpListenerProxy();
	fdValueHelpListenerProxy.m_listener = listener;
	fdValueHelpListenerProxy.m_customIdentifier = customIdentifier;
	fdValueHelpListenerProxy.m_valueHelpType = valueHelpType;
	fdValueHelpListenerProxy.m_properties = oFF.XProperties.create();
	return fdValueHelpListenerProxy;
};
oFF.FdValueHelpListenerProxy.prototype.m_customIdentifier = null;
oFF.FdValueHelpListenerProxy.prototype.m_items = null;
oFF.FdValueHelpListenerProxy.prototype.m_listener = null;
oFF.FdValueHelpListenerProxy.prototype.m_properties = null;
oFF.FdValueHelpListenerProxy.prototype.m_valueHelpType = null;
oFF.FdValueHelpListenerProxy.prototype.callErrorListener = function(messages)
{
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onError(messages, this.m_customIdentifier);
	}
};
oFF.FdValueHelpListenerProxy.prototype.callListener = function(items, messages)
{
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onProcessFinished(items, messages, this.m_customIdentifier);
	}
};
oFF.FdValueHelpListenerProxy.prototype.getCustomIdentifier = function()
{
	return this.m_customIdentifier;
};
oFF.FdValueHelpListenerProxy.prototype.getItems = function()
{
	return this.m_items;
};
oFF.FdValueHelpListenerProxy.prototype.getListener = function()
{
	return this.m_listener;
};
oFF.FdValueHelpListenerProxy.prototype.getProperties = function()
{
	return this.m_properties;
};
oFF.FdValueHelpListenerProxy.prototype.getValueHelpType = function()
{
	return this.m_valueHelpType;
};
oFF.FdValueHelpListenerProxy.prototype.onError = function(messages, customIdentifier)
{
	this.callErrorListener(messages);
};
oFF.FdValueHelpListenerProxy.prototype.onProcessFinished = function(items, messages, customIdentifier)
{
	this.callListener(items, messages);
};
oFF.FdValueHelpListenerProxy.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_listener = null;
	this.m_customIdentifier = null;
	this.m_valueHelpType = null;
	this.m_items = null;
};
oFF.FdValueHelpListenerProxy.prototype.setItems = function(items)
{
	this.m_items = items;
};

oFF.FdAbstractView = function() {};
oFF.FdAbstractView.prototype = new oFF.XObject();
oFF.FdAbstractView.prototype._ff_c = "FdAbstractView";

oFF.FdAbstractView.prototype.m_controller = null;
oFF.FdAbstractView.prototype.m_model = null;
oFF.FdAbstractView.prototype.onError = function(messages, customIdentifier)
{
	this.m_controller.postMessages(messages);
};
oFF.FdAbstractView.prototype.onNewClipboardSelection = function(items, includedItems, excludedItems)
{
	this.m_model.onNewClipboardSelection(items, includedItems, excludedItems);
};
oFF.FdAbstractView.prototype.registerOnSelectionChange = function()
{
	this.m_model.registerOnSelectionChange(this);
};
oFF.FdAbstractView.prototype.releaseObject = function()
{
	this.m_model.unregisterOnSelectionChange(this);
	this.m_controller = null;
	this.m_model = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdAbstractView.prototype.setupView = function(controller, model)
{
	this.m_controller = controller;
	this.m_model = model;
	this.registerOnSelectionChange();
};
oFF.FdAbstractView.prototype.validate = function(selectionRequired)
{
	return true;
};

oFF.FdAbstractComponent = function() {};
oFF.FdAbstractComponent.prototype = new oFF.XObject();
oFF.FdAbstractComponent.prototype._ff_c = "FdAbstractComponent";

oFF.FdAbstractComponent.prototype.m_layout = null;
oFF.FdAbstractComponent.prototype.m_model = null;
oFF.FdAbstractComponent.prototype.addDropdownItems = function(dropdown, presentations)
{
	let items = oFF.XList.create();
	oFF.XCollectionUtils.forEach(presentations, (presentation) => {
		let name = presentation.getName();
		items.add(oFF.FdLayoutUtils.addDropdownItem(dropdown, name, name, presentation));
	});
	return items;
};
oFF.FdAbstractComponent.prototype.focus = function()
{
	let focusControl = this.getFocusControl();
	if (oFF.notNull(focusControl))
	{
		focusControl.focus();
	}
};
oFF.FdAbstractComponent.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdAbstractComponent.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_model = null;
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
};
oFF.FdAbstractComponent.prototype.setupComponent = function(model, layout)
{
	this.m_model = model;
	this.m_layout = layout;
};

oFF.OuSelectHierarchyDialogFactory = function() {};
oFF.OuSelectHierarchyDialogFactory.prototype = new oFF.XObject();
oFF.OuSelectHierarchyDialogFactory.prototype._ff_c = "OuSelectHierarchyDialogFactory";

oFF.OuSelectHierarchyDialogFactory.COMPLEX_SELECT_HIERARCHY_THRESHOLD = 500;
oFF.OuSelectHierarchyDialogFactory.create = function(process, startData)
{
	let factory = new oFF.OuSelectHierarchyDialogFactory();
	factory.m_process = process;
	factory.m_startData = startData;
	return factory;
};
oFF.OuSelectHierarchyDialogFactory.prototype.m_process = null;
oFF.OuSelectHierarchyDialogFactory.prototype.m_startData = null;
oFF.OuSelectHierarchyDialogFactory.prototype.createHierarchyDialog = function()
{
	let dimension = this.getDimension();
	dimension.getHierarchyManager().fetchHierarchyCatalog(oFF.SyncType.NON_BLOCKING, this, null);
};
oFF.OuSelectHierarchyDialogFactory.prototype.createHierarchyDialogSimple = function(result)
{
	let selectHierarchyDlg = oFF.ProgramRunner.createRunner(this.m_process, oFF.OuSelectHierarchyDialog.DEFAULT_PROGRAM_NAME);
	this.m_startData.putXObject(oFF.OuSelectHierarchyDialog.PRG_DATA_HIERARCHY_RESULT, result);
	selectHierarchyDlg.setProgramStartData(this.m_startData);
	selectHierarchyDlg.runProgram();
};
oFF.OuSelectHierarchyDialogFactory.prototype.createHierarchyListDialog = function(result)
{
	let selectHierarchyDlg = oFF.ProgramRunner.createRunner(this.m_process, oFF.OuSelectHierarchyListDialog.DEFAULT_PROGRAM_NAME);
	this.m_startData.putXObject(oFF.OuSelectHierarchyListDialog.PRG_DATA_HIERARCHY_RESULT, result);
	selectHierarchyDlg.setProgramStartData(this.m_startData);
	selectHierarchyDlg.runProgram();
};
oFF.OuSelectHierarchyDialogFactory.prototype.getDimension = function()
{
	let dimension = this.m_startData.getXObjectByKey(oFF.OuSelectHierarchyDialog.PRG_DATA_DIMENSION);
	return dimension;
};
oFF.OuSelectHierarchyDialogFactory.prototype.onHierarchyCatalogResult = function(extResult, result, customIdentifier)
{
	if (!extResult.hasErrors() && oFF.notNull(result))
	{
		let numberOfHierarchies = result.getObjects().size();
		if (numberOfHierarchies > oFF.OuSelectHierarchyDialogFactory.COMPLEX_SELECT_HIERARCHY_THRESHOLD)
		{
			this.createHierarchyListDialog(result);
		}
		else
		{
			this.createHierarchyDialogSimple(result);
		}
	}
};

oFF.VdModel = function() {};
oFF.VdModel.prototype = new oFF.XObject();
oFF.VdModel.prototype._ff_c = "VdModel";

oFF.VdModel.create = function(variableProcessor, startValues)
{
	let obj = new oFF.VdModel();
	obj.setupExt(variableProcessor, startValues);
	return obj;
};
oFF.VdModel.prototype.m_hasDynamicVariables = false;
oFF.VdModel.prototype.m_hasExitVariables = false;
oFF.VdModel.prototype.m_invalidValue = null;
oFF.VdModel.prototype.m_listener = null;
oFF.VdModel.prototype.m_startValues = null;
oFF.VdModel.prototype.m_varProcessor = null;
oFF.VdModel.prototype.m_variableModels = null;
oFF.VdModel.prototype.m_variableModelsByName = null;
oFF.VdModel.prototype.addListener = function(listener)
{
	this.m_listener.add(listener);
};
oFF.VdModel.prototype.checkVariablesInSync = function()
{
	let variables = this.m_varProcessor.getInputEnabledAndNonTechnicalVariables();
	if (variables.size() !== this.m_variableModels.size())
	{
		this.prepare(variables);
		return;
	}
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		let variableModel = this.m_variableModels.get(i);
		if (!variables.containsKey(variableModel.getName()))
		{
			this.prepare(variables);
			return;
		}
	}
};
oFF.VdModel.prototype.clearValues = function()
{
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		this.m_variableModels.get(i).clearValues();
	}
};
oFF.VdModel.prototype.getCleanedValues = function()
{
	let result = oFF.XLinkedHashMapByString.create();
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		let variableModel = this.m_variableModels.get(i);
		result.put(variableModel.getName(), variableModel.getCleanedValues());
	}
	return result;
};
oFF.VdModel.prototype.getCurrentValues = function()
{
	let result = oFF.XLinkedHashMapByString.create();
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		let variableModel = this.m_variableModels.get(i);
		result.put(variableModel.getName(), variableModel.getValues());
	}
	return result;
};
oFF.VdModel.prototype.getFirstInvalidValue = function()
{
	return this.m_invalidValue;
};
oFF.VdModel.prototype.getStartValues = function()
{
	return this.m_startValues;
};
oFF.VdModel.prototype.getVariableModelByName = function(varName)
{
	return this.m_variableModelsByName.getByKey(varName);
};
oFF.VdModel.prototype.getVariableModels = function()
{
	return this.m_variableModels;
};
oFF.VdModel.prototype.getVariableProcessor = function()
{
	return this.m_varProcessor;
};
oFF.VdModel.prototype.getVariants = function()
{
	return this.m_varProcessor.getVariableVariants();
};
oFF.VdModel.prototype.hasDynamicVariables = function()
{
	return this.m_hasDynamicVariables;
};
oFF.VdModel.prototype.hasExitVariables = function()
{
	return this.m_hasExitVariables;
};
oFF.VdModel.prototype.hasVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.m_variableModels);
};
oFF.VdModel.prototype.prepare = function(variables)
{
	this.m_variableModels.clear();
	this.m_variableModelsByName.clear();
	this.m_hasExitVariables = false;
	this.m_hasDynamicVariables = false;
	let len = variables.size();
	for (let i = 0; i < len; i++)
	{
		let variable = variables.get(i);
		let variableModel = oFF.VdVariableModel.createVariableModel(variable);
		this.m_variableModels.add(variableModel);
		this.m_variableModelsByName.put(variable.getName(), variableModel);
		if (variable.isEnforcedDynamicValue())
		{
			this.m_hasExitVariables = true;
		}
		if (variable.isDynamicVariable())
		{
			this.m_hasDynamicVariables = true;
		}
	}
	this.m_variableModels.sortByComparator(oFF.VdVariableOrderComparator.getComparator());
	for (let j = this.m_listener.size() - 1; j >= 0; j--)
	{
		this.m_listener.get(j).onVariableModelsChanged();
	}
};
oFF.VdModel.prototype.releaseObject = function()
{
	this.m_varProcessor = null;
	this.m_variableModels = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variableModels);
	this.m_variableModelsByName = oFF.XObjectExt.release(this.m_variableModelsByName);
	this.m_invalidValue = oFF.XObjectExt.release(this.m_invalidValue);
	this.m_listener = oFF.XObjectExt.release(this.m_listener);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdModel.prototype.removeListener = function(listener)
{
	this.m_listener.removeElement(listener);
};
oFF.VdModel.prototype.resetValues = function()
{
	this.setValues(this.m_startValues);
};
oFF.VdModel.prototype.resolveAndSaveValues = function(listener, customIdentifier)
{
	listener.onValuesResolvedAndSave(customIdentifier);
};
oFF.VdModel.prototype.setStartValues = function(startValues)
{
	this.m_startValues = oFF.VdValue.cloneValueMap(startValues);
};
oFF.VdModel.prototype.setValues = function(allValues)
{
	this.setValuesInternal(oFF.VdValue.cloneValueMap(allValues));
};
oFF.VdModel.prototype.setValuesFromProcessor = function()
{
	this.setValuesInternal(oFF.VdImportExport.getValuesFromProcessor(this.m_varProcessor));
};
oFF.VdModel.prototype.setValuesInternal = function(allValues)
{
	if (!oFF.XCollectionUtils.hasElements(allValues))
	{
		this.clearValues();
		return;
	}
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		let variableModel = this.m_variableModels.get(i);
		let values = allValues.getByKey(variableModel.getName());
		if (oFF.XCollectionUtils.hasElements(values))
		{
			variableModel.setValues(values);
		}
		else
		{
			variableModel.clearValues();
		}
	}
};
oFF.VdModel.prototype.setupExt = function(variableProcessor, startValues)
{
	this.m_varProcessor = variableProcessor;
	this.m_startValues = oFF.notNull(startValues) ? oFF.VdValue.cloneValueMap(startValues) : oFF.VdImportExport.getValuesFromProcessor(this.m_varProcessor);
	this.m_variableModels = oFF.XList.create();
	this.m_variableModelsByName = oFF.XHashMapByString.create();
	this.m_listener = oFF.XList.create();
	let variables = this.m_varProcessor.getInputEnabledAndNonTechnicalVariables();
	this.prepare(variables);
	let startValuesClone = oFF.VdValue.cloneValueMap(this.m_startValues);
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		let variableModel = this.m_variableModels.get(i);
		variableModel.setValues(startValuesClone.getByKey(variableModel.getName()));
	}
};
oFF.VdModel.prototype.validateValues = function()
{
	let valid = true;
	this.m_invalidValue = null;
	for (let i = 0; i < this.m_variableModels.size(); i++)
	{
		if (!this.m_variableModels.get(i).validateValues())
		{
			if (!this.m_variableModels.get(i).getInvalidValues().isEmpty() && oFF.isNull(this.m_invalidValue))
			{
				this.m_invalidValue = this.m_variableModels.get(i).getInvalidValues().get(0);
			}
			valid = false;
		}
	}
	return valid;
};

oFF.VdResolveHelper = function() {};
oFF.VdResolveHelper.prototype = new oFF.OlapUiMultiRequestHelper();
oFF.VdResolveHelper.prototype._ff_c = "VdResolveHelper";

oFF.VdResolveHelper.createHelper = function(listener, customIdentifier)
{
	let obj = new oFF.VdResolveHelper();
	obj.setupExt(listener, customIdentifier);
	return obj;
};
oFF.VdResolveHelper.prototype.m_handles = null;
oFF.VdResolveHelper.prototype.m_resolvedResult = null;
oFF.VdResolveHelper.prototype.addResult = function(variableName, value)
{
	this.getResultsForVariable(variableName).add(value);
};
oFF.VdResolveHelper.prototype.addResults = function(variableName, values)
{
	this.getResultsForVariable(variableName).addAll(values);
};
oFF.VdResolveHelper.prototype.getHandle = function(variableName)
{
	let handle = oFF.VdResolveHelperHandle.createHandle(this, variableName);
	this.m_handles.add(handle);
	return handle;
};
oFF.VdResolveHelper.prototype.getResolvedResults = function()
{
	return this.m_resolvedResult;
};
oFF.VdResolveHelper.prototype.getResultsForVariable = function(variableName)
{
	let results = this.m_resolvedResult.getByKey(variableName);
	if (oFF.isNull(results))
	{
		results = oFF.XList.create();
		this.m_resolvedResult.put(variableName, results);
	}
	return results;
};
oFF.VdResolveHelper.prototype.releaseObject = function()
{
	this.m_resolvedResult = oFF.XObjectExt.release(this.m_resolvedResult);
	this.m_handles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_handles);
	oFF.OlapUiMultiRequestHelper.prototype.releaseObject.call( this );
};
oFF.VdResolveHelper.prototype.setupExt = function(listener, customIdentifier)
{
	this.setupHelper(listener, customIdentifier);
	this.m_resolvedResult = oFF.XHashMapByString.create();
	this.m_handles = oFF.XList.create();
};

oFF.VdVariantManager = function() {};
oFF.VdVariantManager.prototype = new oFF.XObject();
oFF.VdVariantManager.prototype._ff_c = "VdVariantManager";

oFF.VdVariantManager.createManager = function(context)
{
	let obj = new oFF.VdVariantManager();
	obj.setupExt(context);
	return obj;
};
oFF.VdVariantManager.prototype.m_context = null;
oFF.VdVariantManager.prototype.getUiContext = function()
{
	return this.m_context;
};
oFF.VdVariantManager.prototype.presentVariantSavePopup = function(variableProcessor, onSaved)
{
	let genesis = this.m_context.getUiManager().getFreeGenesis();
	oFF.VdVariantSavePopup.createSavePopup(this, genesis, variableProcessor, onSaved).open();
};
oFF.VdVariantManager.prototype.presentVariantsManagePopup = function(variableProcessor, onFinished)
{
	let genesis = this.m_context.getUiManager().getFreeGenesis();
	oFF.VdVariantManagePopup.createManagePopup(this, genesis, variableProcessor, onFinished).open();
};
oFF.VdVariantManager.prototype.releaseObject = function()
{
	this.m_context = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariantManager.prototype.setupExt = function(context)
{
	this.m_context = context;
};

oFF.VdUpdateDescriptionsResolveHandler = function() {};
oFF.VdUpdateDescriptionsResolveHandler.prototype = new oFF.OlapUiMultiRequestHelper();
oFF.VdUpdateDescriptionsResolveHandler.prototype._ff_c = "VdUpdateDescriptionsResolveHandler";

oFF.VdUpdateDescriptionsResolveHandler.createResolveHandler = function(listener)
{
	let obj = new oFF.VdUpdateDescriptionsResolveHandler();
	obj.setupHelper(listener, null);
	return obj;
};
oFF.VdUpdateDescriptionsResolveHandler.prototype.checkDone = function()
{
	if (!this.isInStartup() && this.isDone())
	{
		let originalListener = this.getOriginalListener();
		originalListener();
	}
};
oFF.VdUpdateDescriptionsResolveHandler.prototype.finishProgress = function()
{
	oFF.OlapUiMultiRequestHelper.prototype.finishProgress.call( this );
	this.checkDone();
};
oFF.VdUpdateDescriptionsResolveHandler.prototype.onFillFieldsDone = function(variable, result, customObject)
{
	this.increaseCallbackCount();
	this.checkDone();
};

oFF.VdValueHelp = function() {};
oFF.VdValueHelp.prototype = new oFF.XObject();
oFF.VdValueHelp.prototype._ff_c = "VdValueHelp";

oFF.VdValueHelp.ERR_SERVER_ERROR = 1001;
oFF.VdValueHelp.KEY_NULL_VALUE = "(null_value_key)";
oFF.VdValueHelp.WARN_VALUE_NOT_FOUND = 2001;
oFF.VdValueHelp.s_nonHumanReadableFieldSearchPattern = "HIEID_F4_HIEID";
oFF.VdValueHelp.hasFieldsWithNonHumanReadableValues = function(dimensionMember, values)
{
	let allFieldValues = dimensionMember.getAllFieldValues();
	let keys = allFieldValues.getKeysAsReadOnlyList();
	for (let i = 0; i < keys.size(); i++)
	{
		if (oFF.XString.containsString(keys.get(i), oFF.VdValueHelp.s_nonHumanReadableFieldSearchPattern))
		{
			for (let k = 0; k < values.size(); k++)
			{
				let value = values.get(k);
				if (oFF.XStringUtils.isNullOrEmpty(value.getFirstOperand().getText()) || value.getOperator().getNumberOfParameters() > 1 && oFF.XStringUtils.isNullOrEmpty(value.getSecondOperand().getText()))
				{
					return true;
				}
			}
			return false;
		}
	}
	return false;
};
oFF.VdValueHelp.searchValues = function(variable, searchOnDisplayKey, searchNullValues, values, listener, customObject)
{
	let obj = new oFF.VdValueHelp();
	obj.setupValueHelp(variable, searchOnDisplayKey, searchNullValues, values, true, listener, customObject);
	obj.performSearch();
};
oFF.VdValueHelp.updateDescriptions = function(processor, values, listener)
{
	let requestHelper = null;
	let variableNames = values.getKeysAsReadOnlyList();
	for (let i = 0; i < variableNames.size(); i++)
	{
		let variableName = variableNames.get(i);
		let variable = processor.getVariable(variableName);
		if (oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let dimensionMember = variable.getDimensionMember();
			if (oFF.notNull(dimensionMember) && oFF.VdValueHelp.hasFieldsWithNonHumanReadableValues(dimensionMember, values.getByKey(variableName)))
			{
				if (oFF.isNull(requestHelper))
				{
					requestHelper = oFF.VdUpdateDescriptionsResolveHandler.createResolveHandler(listener);
				}
				requestHelper.increaseRequestCount();
				let vh = new oFF.VdValueHelp();
				vh.setupValueHelp(variable, true, false, values.getByKey(variableName), false, requestHelper, null);
				vh.performSearch();
			}
		}
	}
	if (oFF.notNull(requestHelper))
	{
		requestHelper.finishProgress();
	}
	else
	{
		listener();
	}
};
oFF.VdValueHelp.prototype.m_customObject = null;
oFF.VdValueHelp.prototype.m_listener = null;
oFF.VdValueHelp.prototype.m_removeInvalidValues = false;
oFF.VdValueHelp.prototype.m_searchEntries = null;
oFF.VdValueHelp.prototype.m_searchNullValues = false;
oFF.VdValueHelp.prototype.m_searchOnDisplayKey = false;
oFF.VdValueHelp.prototype.m_valueHelpProcessor = null;
oFF.VdValueHelp.prototype.m_values = null;
oFF.VdValueHelp.prototype.m_variable = null;
oFF.VdValueHelp.prototype.addSearchEntry = function(searchField, key, value, operandIndex)
{
	let keyValue = key;
	if (searchField.getValueType().isDateBased())
	{
		let dateBasedValue = oFF.XValueAccess.createWithType(searchField.getValueType());
		if (dateBasedValue.parseString(keyValue).isValid())
		{
			keyValue = dateBasedValue.getValue().getStringRepresentation();
		}
	}
	let entries = this.getSearchEntriesByKey(keyValue, false);
	if (oFF.isNull(entries))
	{
		entries = oFF.XList.create();
		this.m_searchEntries.put(keyValue, entries);
	}
	entries.add(oFF.XPair.create(value, oFF.XIntegerValue.create(operandIndex)));
};
oFF.VdValueHelp.prototype.getSearchEntriesByKey = function(key, remove)
{
	let lowerKey = oFF.XString.toLowerCase(key);
	let iterator = this.m_searchEntries.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let searchKey = iterator.next();
		if (oFF.XString.isEqual(oFF.XString.toLowerCase(searchKey), lowerKey))
		{
			oFF.XObjectExt.release(iterator);
			return remove ? this.m_searchEntries.remove(searchKey) : this.m_searchEntries.getByKey(searchKey);
		}
	}
	oFF.XObjectExt.release(iterator);
	return null;
};
oFF.VdValueHelp.prototype.handleCallback = function(extResult)
{
	if (oFF.isNull(this.m_listener))
	{
		return;
	}
	let msgManager = oFF.MessageManagerSimple.createMessageManager();
	if (extResult.hasErrors())
	{
		msgManager.addError(oFF.VdValueHelp.ERR_SERVER_ERROR, "");
		let result1 = oFF.ExtResult.create(this.m_values, msgManager);
		this.m_listener.onFillFieldsDone(this.m_variable, result1, this.m_customObject);
		return;
	}
	let searchField = this.m_searchOnDisplayKey ? this.m_valueHelpProcessor.getDisplayKeyField() : this.m_valueHelpProcessor.getKeyField();
	let nodes = extResult.getData();
	for (let i = 0; i < nodes.size(); i++)
	{
		let node = nodes.get(i);
		let dimensionMember = node.getDimensionMember();
		let fieldValue = dimensionMember.getFieldValue(searchField).getValue().getStringRepresentation();
		let isNullValue = oFF.XString.isEqual(fieldValue, "") && dimensionMember.getDimensionMemberNameValueException() === oFF.ValueException.NULL_VALUE;
		let searchEntries = isNullValue ? this.m_searchEntries.remove(oFF.VdValueHelp.KEY_NULL_VALUE) : this.getSearchEntriesByKey(fieldValue, true);
		if (oFF.notNull(searchEntries))
		{
			for (let j = 0; j < searchEntries.size(); j++)
			{
				let operand = oFF.FilterDialogValueFactory.createValueHelpValueExt(node, this.m_valueHelpProcessor.getHierarchyName(), oFF.ComparisonOperator.EQUAL);
				let pair = searchEntries.get(j);
				let vdValue = pair.getFirstObject();
				let operandIndex = pair.getSecondObject().getInteger();
				vdValue.setOperand(operandIndex, operand);
			}
		}
	}
	if (this.m_removeInvalidValues)
	{
		if (this.m_searchEntries.size() > 0)
		{
			msgManager.addWarning(oFF.VdValueHelp.WARN_VALUE_NOT_FOUND, "");
		}
		let remainingKeys = this.m_searchEntries.getKeysAsIterator();
		while (remainingKeys.hasNext())
		{
			let key = remainingKeys.next();
			let remainingValues = this.m_searchEntries.getByKey(key);
			for (let z = 0; z < remainingValues.size(); z++)
			{
				let pair1 = remainingValues.get(z);
				this.m_values.removeElement(pair1.getFirstObject());
			}
		}
	}
	let result2 = oFF.ExtResult.create(this.m_values, msgManager);
	this.m_listener.onFillFieldsDone(this.m_variable, result2, this.m_customObject);
};
oFF.VdValueHelp.prototype.isSearchNeeded = function(operand)
{
	let keyField = this.m_valueHelpProcessor.getKeyField();
	let displayKeyField = this.m_valueHelpProcessor.getDisplayKeyField();
	return operand.getKey() === null && oFF.notNull(keyField) || !operand.hasDisplayKey() && oFF.notNull(displayKeyField) && displayKeyField !== keyField || operand.getText() === null && this.m_valueHelpProcessor.getTextField() !== null;
};
oFF.VdValueHelp.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.handleCallback(extResult);
	this.releaseObject();
};
oFF.VdValueHelp.prototype.performSearch = function()
{
	let searchField = this.m_searchOnDisplayKey ? this.m_valueHelpProcessor.getDisplayKeyField() : this.m_valueHelpProcessor.getKeyField();
	if (oFF.isNull(searchField) || !(searchField.getModelCapabilities().supportsFilterCapabilityExtended() ? searchField.isFilterableForValueHelpAndReadMode(oFF.QMemberReadMode.MASTER) : searchField.isFilterable()))
	{
		let result1 = oFF.ExtResult.create(this.m_values, oFF.MessageManagerSimple.createMessageManager());
		this.m_listener.onFillFieldsDone(this.m_variable, result1, this.m_customObject);
		return;
	}
	for (let i = 0; i < this.m_values.size(); i++)
	{
		let value = this.m_values.get(i);
		let operator = value.getOperator();
		if (operator.isNullOperator())
		{
			if (this.m_searchNullValues && operator === oFF.VdComparisonOperator.IS_NULL)
			{
				this.addSearchEntry(searchField, oFF.VdValueHelp.KEY_NULL_VALUE, value, oFF.VdValue.FIRST);
			}
			continue;
		}
		let firstOperand = value.getFirstOperand();
		let first = firstOperand.getValueByField(searchField);
		if (oFF.notNull(first) && this.isSearchNeeded(firstOperand))
		{
			this.addSearchEntry(searchField, first, value, oFF.VdValue.FIRST);
		}
		let secondOperand = value.getSecondOperand();
		let second = secondOperand.getValueByField(searchField);
		if (oFF.notNull(second) && this.isSearchNeeded(secondOperand))
		{
			this.addSearchEntry(searchField, second, value, oFF.VdValue.SECOND);
		}
	}
	if (this.m_searchEntries.isEmpty())
	{
		let result2 = oFF.ExtResult.create(this.m_values, oFF.MessageManagerSimple.createMessageManager());
		this.m_listener.onFillFieldsDone(this.m_variable, result2, this.m_customObject);
		return;
	}
	let searchItems = oFF.XList.create();
	let iterator = this.m_searchEntries.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let key = iterator.next();
		if (oFF.XString.isEqual(key, oFF.VdValueHelp.KEY_NULL_VALUE))
		{
			searchItems.add(oFF.OlapUiValueHelpKeyObject.create("", "", true));
		}
		else
		{
			searchItems.add(oFF.OlapUiValueHelpKeyObject.create(this.m_searchOnDisplayKey ? null : key, this.m_searchOnDisplayKey ? key : null, false));
		}
	}
	oFF.XObjectExt.release(iterator);
	this.m_valueHelpProcessor.processFetchItems(searchItems, null, this, null);
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(searchItems);
};
oFF.VdValueHelp.prototype.releaseObject = function()
{
	this.m_variable = null;
	this.m_listener = null;
	this.m_customObject = null;
	this.m_values = null;
	this.m_searchEntries = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_searchEntries);
	this.m_valueHelpProcessor = oFF.XObjectExt.release(this.m_valueHelpProcessor);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdValueHelp.prototype.setupValueHelp = function(variable, searchOnDisplayKey, searchNullValues, values, removeInvalidValues, listener, customObject)
{
	this.m_variable = variable;
	this.m_valueHelpProcessor = oFF.OlapUiValueHelpVariable.create(this.m_variable);
	this.m_searchOnDisplayKey = searchOnDisplayKey;
	this.m_searchNullValues = searchNullValues;
	this.m_values = values;
	this.m_removeInvalidValues = removeInvalidValues;
	this.m_listener = listener;
	this.m_customObject = customObject;
	this.m_searchEntries = oFF.XLinkedHashMapByString.create();
};

oFF.VdVhMobileMemberSelector = function() {};
oFF.VdVhMobileMemberSelector.prototype = new oFF.XObject();
oFF.VdVhMobileMemberSelector.prototype._ff_c = "VdVhMobileMemberSelector";

oFF.VdVhMobileMemberSelector.VIEW_NAME = "vhMobileMemberSelector";
oFF.VdVhMobileMemberSelector.create = function(context, variable, vdConfiguration, selectedItem, listener)
{
	let obj = new oFF.VdVhMobileMemberSelector();
	obj.setupExt(context, vdConfiguration);
	obj.setSelectionFinishedListener(listener);
	obj.setVariable(variable, selectedItem);
	return obj;
};
oFF.VdVhMobileMemberSelector.prototype.m_filterDialog = null;
oFF.VdVhMobileMemberSelector.prototype.m_listener = null;
oFF.VdVhMobileMemberSelector.prototype.m_page = null;
oFF.VdVhMobileMemberSelector.prototype.m_selectedItem = null;
oFF.VdVhMobileMemberSelector.prototype.m_vdConfig = null;
oFF.VdVhMobileMemberSelector.prototype.getPage = function()
{
	return this.m_page;
};
oFF.VdVhMobileMemberSelector.prototype.getSelectedItem = function()
{
	return this.m_selectedItem;
};
oFF.VdVhMobileMemberSelector.prototype.getViewName = function()
{
	return oFF.VdVhMobileMemberSelector.VIEW_NAME;
};
oFF.VdVhMobileMemberSelector.prototype.onFilterDialogCancel = function()
{
	this.m_filterDialog = null;
	this.m_selectedItem = null;
};
oFF.VdVhMobileMemberSelector.prototype.onFilterDialogOk = function(selection, settings)
{
	this.m_filterDialog = null;
	if (oFF.notNull(selection) && selection.hasElements())
	{
		this.m_selectedItem = selection.get(0);
	}
	else
	{
		this.m_selectedItem = null;
	}
	this.m_listener.onVhMobileValuesSelected(this);
};
oFF.VdVhMobileMemberSelector.prototype.onSelectionChange = function(selection)
{
	if (oFF.notNull(selection) && selection.hasElements())
	{
		this.m_selectedItem = selection.get(0);
	}
	else
	{
		this.m_selectedItem = null;
	}
	if (oFF.notNull(this.m_selectedItem))
	{
		this.m_listener.onVhMobileValuesSelected(this);
	}
};
oFF.VdVhMobileMemberSelector.prototype.releaseObject = function()
{
	this.m_vdConfig = null;
	this.m_page = oFF.XObjectExt.release(this.m_page);
	this.m_selectedItem = null;
	this.m_filterDialog = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileMemberSelector.prototype.setSelectionFinishedListener = function(listener)
{
	this.m_listener = listener;
};
oFF.VdVhMobileMemberSelector.prototype.setVariable = function(variable, selectedItem)
{
	if (oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		this.m_page.setContent(null);
		let selectedItemsList = null;
		if (oFF.notNull(selectedItem))
		{
			this.m_selectedItem = selectedItem;
			selectedItemsList = oFF.XCollectionUtils.singletonList(selectedItem);
		}
		let runner = oFF.FilterDialogProgramRunnerFactory.createForVariable(variable.getProcess(), null, variable, "");
		runner.setContainerType(oFF.ProgramContainerType.CONTENT);
		runner.setAnchorContentControl(this.m_page);
		let config = oFF.PrFactory.createStructure();
		config.putString(oFF.FilterDialog.PARAM_SELECTION_MODE, oFF.UiTableSelectionMode.SINGLE.getName());
		config.putBoolean(oFF.FilterDialog.PARAM_RESIZABLE, false);
		config.putBoolean(oFF.FilterDialog.PARAM_OFFER_READMODE_CHANGE, true);
		if (oFF.notNull(this.m_vdConfig))
		{
			let dimensionDisplayInfo = this.m_vdConfig.getDimensionDisplayInfo(variable.getDimension().getName());
			if (oFF.notNull(dimensionDisplayInfo))
			{
				config.putString(oFF.FilterDialog.PARAM_DISPLAY_INFO, dimensionDisplayInfo.getName());
			}
		}
		runner.setConfigStructure(config);
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_DEFAULT_SELECTION, selectedItemsList);
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_SELECTION_CHANGE, this);
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_CLOSE, this);
		runner.runProgram().onThen((filterDialog) => {
			this.m_filterDialog = filterDialog;
		}).onCatch((errMsg) => {
			this.m_filterDialog = null;
		});
		this.m_page.clearPageButtons();
	}
};
oFF.VdVhMobileMemberSelector.prototype.setupExt = function(context, vdConfiguration)
{
	this.m_vdConfig = vdConfiguration;
	let genesis = context.getUiManager().getFreeGenesis();
	this.m_page = genesis.newControl(oFF.UiType.PAGE);
	this.m_page.setName("VdVhMobileMemberSelectorView");
	this.m_page.addCssClass("ffVdVhMobileViewWrapperPage");
	this.m_page.setShowNavButton(false);
	this.m_page.setShowHeader(false);
	let noDimLbl = this.m_page.setNewContent(oFF.UiType.LABEL);
	noDimLbl.setText("No variable specified!");
};
oFF.VdVhMobileMemberSelector.prototype.triggerSelection = function()
{
	if (oFF.notNull(this.m_filterDialog))
	{
		this.m_filterDialog.confirmDialog();
	}
};

oFF.VdViewResponsiveTable = function() {};
oFF.VdViewResponsiveTable.prototype = new oFF.VdView();
oFF.VdViewResponsiveTable.prototype._ff_c = "VdViewResponsiveTable";

oFF.VdViewResponsiveTable.createVdViewResponsiveTable = function(uiManager, embedded, configuration)
{
	let obj = new oFF.VdViewResponsiveTable();
	obj.setupExt(uiManager, embedded, configuration);
	return obj;
};
oFF.VdViewResponsiveTable.prototype.m_i18n2 = null;
oFF.VdViewResponsiveTable.prototype.m_uiMgr2 = null;
oFF.VdViewResponsiveTable.prototype.m_variableLayouts2 = null;
oFF.VdViewResponsiveTable.prototype.m_variableResTable2 = null;
oFF.VdViewResponsiveTable.prototype.m_variableSection2 = null;
oFF.VdViewResponsiveTable.prototype.addColumn = function(name, text, horizontalAlign)
{
	let headerWrapper = this.m_uiMgr2.newControl(oFF.UiType.FLEX_LAYOUT);
	let headerLabel = headerWrapper.addNewItemOfType(oFF.UiType.LABEL);
	headerLabel.setText(text);
	let column = this.m_variableResTable2.addNewResponsiveTableColumn();
	column.setName(name);
	column.setHeader(headerWrapper);
	column.addCssClass(oFF.XStringUtils.concatenate2("ff-variable-dialog-table-column-", name));
	column.setHorizontalAlign(horizontalAlign);
};
oFF.VdViewResponsiveTable.prototype.addVariable = function(varName, withHeaderButtons)
{
	let headerButtons = null;
	if (withHeaderButtons)
	{
		headerButtons = oFF.VdHeaderButtons.createHeaderButtons(this.m_uiMgr2, varName);
	}
	let variableView = oFF.VdVariableViewResponsiveTableRow.createVdVariableViewResponsiveTableRow(this.m_uiMgr2, varName, headerButtons, this.m_variableResTable2);
	this.m_variableLayouts2.put(varName, variableView);
	return variableView;
};
oFF.VdViewResponsiveTable.prototype.buildUi = function()
{
	oFF.VdView.prototype.buildUi.call( this );
	this.getRoot().addCssClass("ffVdGridLayout");
	this.m_variableSection2 = this.getRoot().addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_variableSection2.addCssClass("ff-variable-dialog-variables-section");
	this.m_variableResTable2 = this.m_variableSection2.addNewItemOfType(oFF.UiType.RESPONSIVE_TABLE);
	this.m_variableResTable2.addCssClass("ff-variable-dialog-table");
	this.m_variableResTable2.setColumnResize(true);
	this.addColumn("variables", this.m_i18n2.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_VARIABLES), oFF.UiHorizontalAlign.END);
	this.addColumn("members", this.m_i18n2.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_MEMBERS_DESCRIPTION), oFF.UiHorizontalAlign.BEGIN);
	this.getNewSettingsSection().setVisible(false);
};
oFF.VdViewResponsiveTable.prototype.clearVariables = function()
{
	let varNames = this.m_variableLayouts2.getKeysAsReadOnlyList();
	for (let i = 0; i < varNames.size(); i++)
	{
		let varName = varNames.get(i);
		this.m_variableLayouts2.remove(varName);
	}
};
oFF.VdViewResponsiveTable.prototype.releaseObject = function()
{
	this.m_uiMgr2 = null;
	this.m_i18n2 = null;
	this.m_variableLayouts2 = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variableLayouts2);
	this.m_variableSection2 = oFF.XObjectExt.release(this.m_variableSection2);
	this.m_variableResTable2 = oFF.XObjectExt.release(this.m_variableResTable2);
	oFF.VdView.prototype.releaseObject.call( this );
};
oFF.VdViewResponsiveTable.prototype.setupExt = function(uiManager, embedded, configuration)
{
	this.m_uiMgr2 = uiManager;
	this.m_i18n2 = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_variableLayouts2 = oFF.XHashMapByString.create();
	oFF.VdView.prototype.setupExt.call( this , uiManager, embedded, configuration);
};

oFF.VdViewValueLayout = function() {};
oFF.VdViewValueLayout.prototype = new oFF.VdView();
oFF.VdViewValueLayout.prototype._ff_c = "VdViewValueLayout";

oFF.VdViewValueLayout.createVdViewValueLayout = function(uiManager, embedded, configuration)
{
	let obj = new oFF.VdViewValueLayout();
	obj.setupExt(uiManager, embedded, configuration);
	return obj;
};
oFF.VdViewValueLayout.prototype.m2_uiMgr = null;
oFF.VdViewValueLayout.prototype.m_variableValueLayout = null;
oFF.VdViewValueLayout.prototype.addVariable = function(varName, withHeaderButtons)
{
	let headerButtons = null;
	if (withHeaderButtons)
	{
		headerButtons = oFF.VdHeaderButtons.createHeaderButtons(this.m2_uiMgr, varName);
	}
	return oFF.VdVariableViewValueWrapper.createVdVariableViewValueWrapper(this.m2_uiMgr, varName, headerButtons, this.m_variableValueLayout);
};
oFF.VdViewValueLayout.prototype.buildUi = function()
{
	oFF.VdView.prototype.buildUi.call( this );
	this.getRoot().addCssClass("ffVdEmbeddedValueLayout");
	this.m_variableValueLayout = this.getRoot().addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_variableValueLayout.addCssClass("ff-variable-dialog-variables-section");
};
oFF.VdViewValueLayout.prototype.releaseObject = function()
{
	this.m2_uiMgr = null;
	this.m_variableValueLayout = oFF.XObjectExt.release(this.m_variableValueLayout);
	oFF.VdView.prototype.releaseObject.call( this );
};
oFF.VdViewValueLayout.prototype.setupExt = function(uiManager, embedded, configuration)
{
	this.m2_uiMgr = uiManager;
	oFF.VdView.prototype.setupExt.call( this , uiManager, embedded, configuration);
};

oFF.VdDateMultiView = function() {};
oFF.VdDateMultiView.prototype = new oFF.VdAbstractValueView();
oFF.VdDateMultiView.prototype._ff_c = "VdDateMultiView";

oFF.VdDateMultiView.create = function(uiMgr, isEmbedded)
{
	let obj = new oFF.VdDateMultiView();
	obj.setupExt(uiMgr, isEmbedded);
	return obj;
};
oFF.VdDateMultiView.prototype.m_datePicker1 = null;
oFF.VdDateMultiView.prototype.m_datePicker2 = null;
oFF.VdDateMultiView.prototype.m_deleteLineBtn = null;
oFF.VdDateMultiView.prototype.m_dropdown = null;
oFF.VdDateMultiView.prototype.m_root = null;
oFF.VdDateMultiView.prototype.getDatePicker1 = function()
{
	return this.m_datePicker1;
};
oFF.VdDateMultiView.prototype.getDatePicker2 = function()
{
	return this.m_datePicker2;
};
oFF.VdDateMultiView.prototype.getDeleteLineButton = function()
{
	return this.m_deleteLineBtn;
};
oFF.VdDateMultiView.prototype.getDropdown = function()
{
	return this.m_dropdown;
};
oFF.VdDateMultiView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdDateMultiView.prototype.releaseObject = function()
{
	this.m_dropdown = oFF.XObjectExt.release(this.m_dropdown);
	this.m_datePicker1 = oFF.XObjectExt.release(this.m_datePicker1);
	this.m_datePicker2 = oFF.XObjectExt.release(this.m_datePicker2);
	this.m_deleteLineBtn = oFF.XObjectExt.release(this.m_deleteLineBtn);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.VdAbstractValueView.prototype.releaseObject.call( this );
};
oFF.VdDateMultiView.prototype.setDateDisplayFormat = function(displayFormat)
{
	this.m_datePicker1.setDisplayFormat(displayFormat);
	this.m_datePicker2.setDisplayFormat(displayFormat);
};
oFF.VdDateMultiView.prototype.setDatePicker1Visible = function(visible)
{
	return this.m_datePicker1.setVisible(visible);
};
oFF.VdDateMultiView.prototype.setDatePicker2Visible = function(visible)
{
	return this.m_datePicker2.setVisible(visible);
};
oFF.VdDateMultiView.prototype.setDateValueFormat = function(valueFormat)
{
	this.m_datePicker1.setValueFormat(valueFormat);
	this.m_datePicker2.setValueFormat(valueFormat);
};
oFF.VdDateMultiView.prototype.setDeleteLineButtonVisible = function(visible, isFirst)
{
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0"));
	if ((!visible && !isFirst) && !this.m_root.getUiManager().getDeviceInfo().isMobile())
	{
		this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 37px 0 0"));
	}
	return this.m_deleteLineBtn.setVisible(visible);
};
oFF.VdDateMultiView.prototype.setDropdownVisible = function(visible)
{
	return this.m_dropdown.setVisible(visible);
};
oFF.VdDateMultiView.prototype.setupExt = function(uiMgr, isEmbedded)
{
	let isCozyView = uiMgr.getDeviceInfo().isMobile();
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setName("VariableDialogVariableMember");
	this.m_root.setWidth(oFF.UiCssLength.create("100%"));
	let inputContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputContainer.addCssClass("ffVdVariableMemberInputContainer");
	inputContainer.setWidth(oFF.UiCssLength.create("calc(100% - 2.3rem)"));
	inputContainer.setGap(oFF.UiCssGap.create("5px"));
	if (!isEmbedded)
	{
		inputContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	}
	inputContainer.setDirection(oFF.UiFlexDirection.ROW);
	if (isEmbedded)
	{
		inputContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	}
	this.m_dropdown = inputContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_dropdown.setName("VariableDialogOperatorDd1");
	this.m_dropdown.setWidth(oFF.UiCssLength.create("100px"));
	this.m_datePicker1 = inputContainer.addNewItemOfType(oFF.UiType.DATE_PICKER);
	this.m_datePicker1.setName("VariableDialogDatePicker1");
	this.m_datePicker2 = inputContainer.addNewItemOfType(oFF.UiType.DATE_PICKER);
	this.m_datePicker2.setName("VariableDialogDatePicker2");
	this.m_deleteLineBtn = this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_deleteLineBtn.setName("VariableDialogDeleteLineBtn");
	this.m_deleteLineBtn.setIcon("decline");
	this.m_deleteLineBtn.setTooltip(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE));
	this.m_deleteLineBtn.setPadding(oFF.UiCssBoxEdges.create("0 0 0 5px"));
	this.m_deleteLineBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	if (isCozyView)
	{
		this.m_root.setGap(oFF.UiCssGap.create("5px"));
		inputContainer.setWidth(oFF.UiCssLength.create("85%"));
		inputContainer.setDirection(oFF.UiFlexDirection.COLUMN);
		inputContainer.setPadding(oFF.UiCssBoxEdges.create("0 0 10px 0"));
		this.m_dropdown.setWidth(oFF.UiCssLength.create("100%"));
		this.m_datePicker1.setWidth(oFF.UiCssLength.create("100%"));
		this.m_datePicker2.setWidth(oFF.UiCssLength.create("100%"));
	}
	else
	{
		this.m_root.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
		this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
		inputContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
		this.m_dropdown.setFlex("0 0 auto");
	}
};

oFF.VdDateSingleView = function() {};
oFF.VdDateSingleView.prototype = new oFF.VdAbstractValueView();
oFF.VdDateSingleView.prototype._ff_c = "VdDateSingleView";

oFF.VdDateSingleView.create = function(uiMgr)
{
	let obj = new oFF.VdDateSingleView();
	obj.setupExt(uiMgr);
	return obj;
};
oFF.VdDateSingleView.prototype.m_datePicker = null;
oFF.VdDateSingleView.prototype.m_deleteLineBtn = null;
oFF.VdDateSingleView.prototype.m_root = null;
oFF.VdDateSingleView.prototype.getDatePicker1 = function()
{
	return this.m_datePicker;
};
oFF.VdDateSingleView.prototype.getDeleteLineButton = function()
{
	return this.m_deleteLineBtn;
};
oFF.VdDateSingleView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdDateSingleView.prototype.releaseObject = function()
{
	this.m_deleteLineBtn = oFF.XObjectExt.release(this.m_deleteLineBtn);
	this.m_datePicker = oFF.XObjectExt.release(this.m_datePicker);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.VdAbstractValueView.prototype.releaseObject.call( this );
};
oFF.VdDateSingleView.prototype.setDateDisplayFormat = function(displayFormat)
{
	this.m_datePicker.setDisplayFormat(displayFormat);
};
oFF.VdDateSingleView.prototype.setDatePicker1Visible = function(visible)
{
	return this.m_datePicker.setVisible(visible);
};
oFF.VdDateSingleView.prototype.setDateValueFormat = function(valueFormat)
{
	this.m_datePicker.setValueFormat(valueFormat);
};
oFF.VdDateSingleView.prototype.setDeleteLineButtonVisible = function(visible, isFirst)
{
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0"));
	if ((!visible && !isFirst) && !this.m_root.getUiManager().getDeviceInfo().isMobile())
	{
		this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 37px 0 0"));
	}
	return this.m_deleteLineBtn.setVisible(visible);
};
oFF.VdDateSingleView.prototype.setupExt = function(uiMgr)
{
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setName("VariableDialogVariableMember");
	this.m_root.setWidth(oFF.UiCssLength.create("100%"));
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setGap(oFF.UiCssGap.create("5px"));
	this.m_datePicker = this.m_root.addNewItemOfType(oFF.UiType.DATE_PICKER);
	this.m_datePicker.setName("VariableDialogDatePicker1");
	if (uiMgr.getDeviceInfo().isMobile())
	{
		this.m_datePicker.setWidth(oFF.UiCssLength.create("85%"));
	}
	else
	{
		this.m_datePicker.setWidth(oFF.UiCssLength.create("calc(100% - 4.3rem)"));
	}
	this.m_deleteLineBtn = this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_deleteLineBtn.setName("VariableDialogDeleteLineBtn");
	this.m_deleteLineBtn.setIcon("decline");
	this.m_deleteLineBtn.setTooltip(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE));
	this.m_deleteLineBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
};

oFF.VdDropdownSingleView = function() {};
oFF.VdDropdownSingleView.prototype = new oFF.VdAbstractValueView();
oFF.VdDropdownSingleView.prototype._ff_c = "VdDropdownSingleView";

oFF.VdDropdownSingleView.create = function(uiMgr)
{
	let obj = new oFF.VdDropdownSingleView();
	obj.setupExt(uiMgr);
	return obj;
};
oFF.VdDropdownSingleView.prototype.m_dropdown = null;
oFF.VdDropdownSingleView.prototype.m_root = null;
oFF.VdDropdownSingleView.prototype.getDropdown = function()
{
	return this.m_dropdown;
};
oFF.VdDropdownSingleView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdDropdownSingleView.prototype.releaseObject = function()
{
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_dropdown = oFF.XObjectExt.release(this.m_dropdown);
	oFF.VdAbstractValueView.prototype.releaseObject.call( this );
};
oFF.VdDropdownSingleView.prototype.setDropdownVisible = function(visible)
{
	return this.m_dropdown.setVisible(visible);
};
oFF.VdDropdownSingleView.prototype.setupExt = function(uiMgr)
{
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setName("VariableDialogVariableMember");
	this.m_root.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_root.setWidth(oFF.UiCssLength.create("100%"));
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setGap(oFF.UiCssGap.create("5px"));
	this.m_dropdown = this.m_root.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_dropdown.setName("VariableDialogOperatorDd1");
	this.m_dropdown.setWidth(oFF.UiCssLength.create("100%"));
};

oFF.VdInputMultiView = function() {};
oFF.VdInputMultiView.prototype = new oFF.VdAbstractValueView();
oFF.VdInputMultiView.prototype._ff_c = "VdInputMultiView";

oFF.VdInputMultiView.create = function(uiMgr, isEmbedded)
{
	let obj = new oFF.VdInputMultiView();
	obj.setupExt(uiMgr, isEmbedded);
	return obj;
};
oFF.VdInputMultiView.prototype.m_deleteLineBtn = null;
oFF.VdInputMultiView.prototype.m_dropdown = null;
oFF.VdInputMultiView.prototype.m_input1 = null;
oFF.VdInputMultiView.prototype.m_input1WrapperContainer = null;
oFF.VdInputMultiView.prototype.m_input2 = null;
oFF.VdInputMultiView.prototype.m_input2WrapperContainer = null;
oFF.VdInputMultiView.prototype.m_root = null;
oFF.VdInputMultiView.prototype.getDeleteLineButton = function()
{
	return this.m_deleteLineBtn;
};
oFF.VdInputMultiView.prototype.getDropdown = function()
{
	return this.m_dropdown;
};
oFF.VdInputMultiView.prototype.getInput1 = function()
{
	return this.m_input1;
};
oFF.VdInputMultiView.prototype.getInput2 = function()
{
	return this.m_input2;
};
oFF.VdInputMultiView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdInputMultiView.prototype.releaseObject = function()
{
	this.m_dropdown = oFF.XObjectExt.release(this.m_dropdown);
	this.m_input1 = oFF.XObjectExt.release(this.m_input1);
	this.m_input2 = oFF.XObjectExt.release(this.m_input2);
	this.m_deleteLineBtn = oFF.XObjectExt.release(this.m_deleteLineBtn);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.VdAbstractValueView.prototype.releaseObject.call( this );
};
oFF.VdInputMultiView.prototype.setDeleteLineButtonVisible = function(visible, isFirst)
{
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0"));
	if ((!visible && !isFirst) && !this.m_root.getUiManager().getDeviceInfo().isMobile())
	{
		this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 37px 0 0"));
	}
	return this.m_deleteLineBtn.setVisible(visible);
};
oFF.VdInputMultiView.prototype.setDropdownVisible = function(visible)
{
	return this.m_dropdown.setVisible(visible);
};
oFF.VdInputMultiView.prototype.setInput1Visible = function(visible)
{
	let isMobileView = this.m_input1WrapperContainer.getUiManager().getDeviceInfo().isMobile();
	if (!isMobileView)
	{
		this.m_input1WrapperContainer.setVisible(visible);
	}
	return this.m_input1.setVisible(visible);
};
oFF.VdInputMultiView.prototype.setInput2Visible = function(visible)
{
	let isMobileView = this.m_input2WrapperContainer.getUiManager().getDeviceInfo().isMobile();
	if (!isMobileView)
	{
		this.m_input2WrapperContainer.setVisible(visible);
	}
	return this.m_input2.setVisible(visible);
};
oFF.VdInputMultiView.prototype.setupExt = function(uiMgr, isEmbedded)
{
	let isCozyView = uiMgr.getDeviceInfo().isMobile();
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setName("VariableDialogVariableMember");
	this.m_root.setWidth(oFF.UiCssLength.create("100%"));
	let inputContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputContainer.addCssClass("ffVdVariableMemberInputContainer");
	inputContainer.setWidth(oFF.UiCssLength.create("100%"));
	inputContainer.setGap(oFF.UiCssGap.create("5px"));
	inputContainer.setDirection(oFF.UiFlexDirection.ROW);
	if (!isEmbedded)
	{
		inputContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	}
	let inputWrapperContainer = inputContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputWrapperContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	inputWrapperContainer.setWidth(oFF.UiCssLength.create("100%"));
	inputWrapperContainer.setGap(oFF.UiCssGap.create("5px"));
	inputWrapperContainer.addCssClass("ffInputWrapperContainer");
	if (!isEmbedded && !isCozyView)
	{
		inputWrapperContainer.setWidth(oFF.UiCssLength.create("calc(100% - 4.3rem)"));
	}
	else if (isEmbedded)
	{
		inputWrapperContainer.setWidth(oFF.UiCssLength.create("calc(100% - 2.3rem)"));
		inputWrapperContainer.setDirection(oFF.UiFlexDirection.COLUMN);
		inputWrapperContainer.setAlignItems(oFF.UiFlexAlignItems.START);
	}
	this.m_dropdown = inputWrapperContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_dropdown.setName("VariableDialogOperatorDd1");
	this.m_dropdown.setWidth(oFF.UiCssLength.create("100px"));
	this.m_input1WrapperContainer = inputWrapperContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_input1WrapperContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_input1WrapperContainer.setWidth(oFF.UiCssLength.create("100%"));
	if (isEmbedded)
	{
		this.m_input1WrapperContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	}
	this.m_input1 = this.m_input1WrapperContainer.addNewItemOfType(oFF.UiType.INPUT);
	this.m_input1.setName("VariableDialogValueIpt1");
	this.m_input1.setShowValueHelp(true);
	this.m_input1.addCssClass("ffShowClearIconWhenDisabledInput");
	this.m_input2WrapperContainer = inputWrapperContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_input2WrapperContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_input2WrapperContainer.setWidth(oFF.UiCssLength.create("100%"));
	this.m_input2 = this.m_input2WrapperContainer.addNewItemOfType(oFF.UiType.INPUT);
	this.m_input2.setName("VariableDialogValueIpt2");
	this.m_input2.setShowValueHelp(true);
	this.m_input2.addCssClass("ffShowClearIconWhenDisabledInput");
	if (isEmbedded && !isCozyView)
	{
		this.m_deleteLineBtn = this.m_input1WrapperContainer.addNewItemOfType(oFF.UiType.BUTTON);
		this.m_input1.setWidth(oFF.UiCssLength.create("calc(100% - 2.3rem)"));
		this.m_input2.setWidth(oFF.UiCssLength.create("calc(100% - 2.3rem)"));
	}
	else
	{
		this.m_deleteLineBtn = inputContainer.addNewItemOfType(oFF.UiType.BUTTON);
	}
	this.m_deleteLineBtn.setName("VariableDialogDeleteLineBtn");
	this.m_deleteLineBtn.setIcon("decline");
	this.m_deleteLineBtn.setTooltip(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE));
	this.m_deleteLineBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	if (isCozyView)
	{
		inputWrapperContainer.setDirection(oFF.UiFlexDirection.COLUMN);
		inputWrapperContainer.setWidth(oFF.UiCssLength.create("85%"));
		inputContainer.setWidth(oFF.UiCssLength.create("100%"));
		inputContainer.setPadding(oFF.UiCssBoxEdges.create("0 0 10px 0"));
		this.m_input1WrapperContainer.setGap(oFF.UiCssGap.create("5px"));
		this.m_dropdown.setWidth(oFF.UiCssLength.create("100%"));
		this.m_input1.setWidth(oFF.UiCssLength.create("100%"));
		this.m_input2.setWidth(oFF.UiCssLength.create("100%"));
		if (isEmbedded)
		{
			inputContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
		}
	}
	else
	{
		this.m_dropdown.setFlex("0 0 auto");
	}
};

oFF.VdInputSingleView = function() {};
oFF.VdInputSingleView.prototype = new oFF.VdAbstractValueView();
oFF.VdInputSingleView.prototype._ff_c = "VdInputSingleView";

oFF.VdInputSingleView.create = function(uiMgr)
{
	let obj = new oFF.VdInputSingleView();
	obj.setupExt(uiMgr);
	return obj;
};
oFF.VdInputSingleView.prototype.m_deleteLineBtn = null;
oFF.VdInputSingleView.prototype.m_input = null;
oFF.VdInputSingleView.prototype.m_root = null;
oFF.VdInputSingleView.prototype.getDeleteLineButton = function()
{
	return this.m_deleteLineBtn;
};
oFF.VdInputSingleView.prototype.getInput1 = function()
{
	return this.m_input;
};
oFF.VdInputSingleView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdInputSingleView.prototype.releaseObject = function()
{
	this.m_deleteLineBtn = oFF.XObjectExt.release(this.m_deleteLineBtn);
	this.m_input = oFF.XObjectExt.release(this.m_input);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.VdAbstractValueView.prototype.releaseObject.call( this );
};
oFF.VdInputSingleView.prototype.setDeleteLineButtonVisible = function(visible, isFirst)
{
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0"));
	if ((!visible && !isFirst) && !this.m_root.getUiManager().getDeviceInfo().isMobile())
	{
		this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 37px 0 0"));
	}
	return this.m_deleteLineBtn.setVisible(visible);
};
oFF.VdInputSingleView.prototype.setInput1Visible = function(visible)
{
	return this.m_input.setVisible(visible);
};
oFF.VdInputSingleView.prototype.setupExt = function(uiMgr)
{
	let isCozyView = uiMgr.getDeviceInfo().isMobile();
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setName("VariableDialogVariableMember");
	this.m_root.setWidth(oFF.UiCssLength.create("100%"));
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setGap(oFF.UiCssGap.create("5px"));
	this.m_input = this.m_root.addNewItemOfType(oFF.UiType.INPUT);
	this.m_input.setName("VariableDialogValueIpt1");
	this.m_input.setShowValueHelp(true);
	this.m_input.setWidth(oFF.UiCssLength.create("calc(100% - 4.3rem)"));
	this.m_deleteLineBtn = this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_deleteLineBtn.setName("VariableDialogDeleteLineBtn");
	this.m_deleteLineBtn.setIcon("decline");
	this.m_deleteLineBtn.setTooltip(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE));
	this.m_deleteLineBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	if (isCozyView)
	{
		this.m_input.setWidth(oFF.UiCssLength.create("85%"));
	}
};

oFF.VdMultiInputSingleView = function() {};
oFF.VdMultiInputSingleView.prototype = new oFF.VdAbstractValueView();
oFF.VdMultiInputSingleView.prototype._ff_c = "VdMultiInputSingleView";

oFF.VdMultiInputSingleView.create = function(uiMgr, isEmbedded)
{
	let obj = new oFF.VdMultiInputSingleView();
	obj.setupExt(uiMgr, isEmbedded);
	return obj;
};
oFF.VdMultiInputSingleView.prototype.m_deleteLineBtn = null;
oFF.VdMultiInputSingleView.prototype.m_dropdown = null;
oFF.VdMultiInputSingleView.prototype.m_input = null;
oFF.VdMultiInputSingleView.prototype.m_input1WrapperContainer = null;
oFF.VdMultiInputSingleView.prototype.m_root = null;
oFF.VdMultiInputSingleView.prototype.getDeleteLineButton = function()
{
	return this.m_deleteLineBtn;
};
oFF.VdMultiInputSingleView.prototype.getDropdown = function()
{
	return this.m_dropdown;
};
oFF.VdMultiInputSingleView.prototype.getInput1 = function()
{
	return this.m_input;
};
oFF.VdMultiInputSingleView.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.VdMultiInputSingleView.prototype.releaseObject = function()
{
	this.m_deleteLineBtn = oFF.XObjectExt.release(this.m_deleteLineBtn);
	this.m_dropdown = oFF.XObjectExt.release(this.m_dropdown);
	this.m_input = oFF.XObjectExt.release(this.m_input);
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.VdAbstractValueView.prototype.releaseObject.call( this );
};
oFF.VdMultiInputSingleView.prototype.setDeleteLineButtonVisible = function(visible, isFirst)
{
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0"));
	if ((!visible && !isFirst) && !this.m_root.getUiManager().getDeviceInfo().isMobile())
	{
		this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 37px 0 0"));
	}
	return this.m_deleteLineBtn.setVisible(visible);
};
oFF.VdMultiInputSingleView.prototype.setDropdownVisible = function(visible)
{
	return this.m_dropdown.setVisible(visible);
};
oFF.VdMultiInputSingleView.prototype.setInput1Visible = function(visible)
{
	let isMobileView = this.m_input1WrapperContainer.getUiManager().getDeviceInfo().isMobile() || this.m_input1WrapperContainer.getUiManager().getDeviceInfo().isTablet();
	if (!isMobileView)
	{
		this.m_input1WrapperContainer.setVisible(visible);
	}
	return this.m_input.setVisible(visible);
};
oFF.VdMultiInputSingleView.prototype.setupExt = function(uiMgr, isEmbedded)
{
	let isCozyView = uiMgr.getDeviceInfo().isMobile();
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_root = uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setName("VariableDialogVariableMember");
	this.m_root.setWidth(oFF.UiCssLength.create("100%"));
	let inputContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputContainer.addCssClass("ffVdVariableMemberInputContainer");
	inputContainer.setWidth(oFF.UiCssLength.create("100%"));
	inputContainer.setGap(oFF.UiCssGap.create("5px"));
	this.m_dropdown = inputContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_dropdown.setName("VariableDialogOperatorDd1");
	this.m_dropdown.setWidth(oFF.UiCssLength.create("100px"));
	this.m_dropdown.setVisible(true);
	let inputWrapperContainer = inputContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputWrapperContainer.setVisible(isEmbedded);
	inputWrapperContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	inputWrapperContainer.setWidth(oFF.UiCssLength.create("100%"));
	this.m_input1WrapperContainer = inputContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_input1WrapperContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_input = isEmbedded ? inputWrapperContainer.addNewItemOfType(oFF.UiType.MULTI_INPUT) : this.m_input1WrapperContainer.addNewItemOfType(oFF.UiType.MULTI_INPUT);
	this.m_input.setName("VariableDialogValueIpt1");
	this.m_input.addCssClass("ff-multi-input");
	this.m_input.setShowValueHelp(true);
	this.m_input.setWidth(oFF.UiCssLength.create("100%"));
	if (isCozyView && isEmbedded)
	{
		this.m_deleteLineBtn = this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	}
	else
	{
		this.m_deleteLineBtn = isEmbedded ? inputWrapperContainer.addNewItemOfType(oFF.UiType.BUTTON) : this.m_root.addNewItemOfType(oFF.UiType.BUTTON);
	}
	this.m_deleteLineBtn.setName("VariableDialogDeleteLineBtn");
	this.m_deleteLineBtn.setIcon("decline");
	this.m_deleteLineBtn.setTooltip(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE));
	this.m_deleteLineBtn.setPadding(oFF.UiCssBoxEdges.create("0 0 0 5px"));
	this.m_deleteLineBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	if (isEmbedded)
	{
		this.m_input.setWidth(oFF.UiCssLength.create("calc(100% - 4.3rem)"));
		inputContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	}
	else
	{
		inputContainer.setWidth(oFF.UiCssLength.create("calc(100% - 2.3rem)"));
		inputContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
		inputContainer.setDirection(oFF.UiFlexDirection.ROW);
		this.m_input1WrapperContainer.setWidth(oFF.UiCssLength.create("100%"));
	}
	if (isCozyView)
	{
		this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 0 10px 0"));
		this.m_root.setGap(oFF.UiCssGap.create("5px"));
		inputContainer.setWidth(oFF.UiCssLength.create("85%"));
		this.m_input.setWidth(oFF.UiCssLength.create("100%"));
		inputContainer.setDirection(oFF.UiFlexDirection.COLUMN);
		this.m_dropdown.setWidth(oFF.UiCssLength.create("100%"));
	}
	else
	{
		this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
		this.m_dropdown.setFlex("0 0 auto");
		this.m_deleteLineBtn.setPadding(oFF.UiCssBoxEdges.create("0 0 0 5px"));
	}
};

oFF.VdEntryPoint = function() {};
oFF.VdEntryPoint.prototype = new oFF.DialogEntryPoint();
oFF.VdEntryPoint.prototype._ff_c = "VdEntryPoint";

oFF.VdEntryPoint.createEntryPoint = function(title, variableProcessor, listener)
{
	let obj = new oFF.VdEntryPoint();
	obj.setupVdUqmEntryPoint(title, variableProcessor, null, listener);
	return obj;
};
oFF.VdEntryPoint.createEntryPointWithConfig = function(config, listener)
{
	let obj = new oFF.VdEntryPoint();
	obj.setupVdUqmEntryPoint(null, null, config, listener);
	return obj;
};
oFF.VdEntryPoint.prototype.m_vdController = null;
oFF.VdEntryPoint.prototype.close = function()
{
	this.m_vdController.close();
};
oFF.VdEntryPoint.prototype.getController = function()
{
	return this.m_vdController;
};
oFF.VdEntryPoint.prototype.open = function()
{
	this.m_vdController.open();
};
oFF.VdEntryPoint.prototype.releaseObject = function()
{
	this.m_vdController = oFF.XObjectExt.release(this.m_vdController);
	oFF.DialogEntryPoint.prototype.releaseObject.call( this );
};
oFF.VdEntryPoint.prototype.setupVdUqmEntryPoint = function(title, variableProcessor, config, listener)
{
	if (oFF.notNull(config))
	{
		this.setupEntryPoint(config.getVarProcessor().getApplication());
		this.m_vdController = oFF.VdVariableDialog.createAsDisplay(this.getUiContext(), config, listener);
	}
	else
	{
		this.setupEntryPoint(variableProcessor.getApplication());
		let configToUse = oFF.VdConfiguration.createConfig(title, variableProcessor);
		this.m_vdController = oFF.VdVariableDialog.createAsDisplay(this.getUiContext(), configToUse, listener);
	}
};

oFF.FdOrcaEntryPoint = function() {};
oFF.FdOrcaEntryPoint.prototype = new oFF.XObject();
oFF.FdOrcaEntryPoint.prototype._ff_c = "FdOrcaEntryPoint";

oFF.FdOrcaEntryPoint.create = function()
{
	return new oFF.FdOrcaEntryPoint();
};
oFF.FdOrcaEntryPoint.prototype.m_filterDialog = null;
oFF.FdOrcaEntryPoint.prototype.m_listener = null;
oFF.FdOrcaEntryPoint.prototype.m_reinitializedQm = null;
oFF.FdOrcaEntryPoint.prototype.close = function()
{
	if (this.isOpen())
	{
		this.m_filterDialog.terminate();
	}
};
oFF.FdOrcaEntryPoint.prototype.deserializeOrcaSelectionData = function(selectedData)
{
	let items = oFF.XList.create();
	let selectedDataList = oFF.PrUtils.getListProperty(selectedData, oFF.OrcaConstants.SELECTED_DATA);
	if (oFF.notNull(selectedDataList))
	{
		for (let i = 0; i < selectedDataList.size(); i++)
		{
			let item = selectedDataList.getStructureAt(i);
			let hasKey = item.containsKey(oFF.OrcaConstants.NAME);
			let hasDisplayKey = item.containsKey(oFF.OrcaConstants.DISPLAY_KEY);
			if (hasKey || hasDisplayKey)
			{
				let key = item.getStringByKey(oFF.OrcaConstants.NAME);
				let displayKey = item.getStringByKey(oFF.OrcaConstants.DISPLAY_KEY);
				let text = item.getStringByKey(oFF.OrcaConstants.DISPLAY_NAME);
				if ((!hasKey || oFF.isNull(key)) && (!hasDisplayKey || oFF.isNull(displayKey)))
				{
					items.add(oFF.FilterDialogValueFactory.createNullValue());
				}
				else
				{
					items.add(oFF.FilterDialogValueFactory.createValue(key, displayKey, text));
				}
			}
		}
	}
	return items;
};
oFF.FdOrcaEntryPoint.prototype.getSelectionMode = function(variable, payload)
{
	if (oFF.notNull(payload))
	{
		let selectionMode = payload.getStringByKey(oFF.OrcaConstants.SELECTION);
		if (oFF.XString.isEqual(selectionMode, oFF.OrcaConstants.SELECTION_SINGLE))
		{
			return oFF.UiTableSelectionMode.SINGLE;
		}
		if (oFF.XString.isEqual(selectionMode, oFF.OrcaConstants.SELECTION_MULTI))
		{
			return oFF.UiTableSelectionMode.MULTI_TOGGLE;
		}
	}
	return variable.supportsMultipleValues() ? oFF.UiTableSelectionMode.MULTI_TOGGLE : oFF.UiTableSelectionMode.SINGLE;
};
oFF.FdOrcaEntryPoint.prototype.isOpen = function()
{
	return oFF.notNull(this.m_filterDialog);
};
oFF.FdOrcaEntryPoint.prototype.onFilterDialogCancel = function()
{
	this.onFilterDialogClose(null);
};
oFF.FdOrcaEntryPoint.prototype.onFilterDialogClose = function(selectedData)
{
	this.m_filterDialog = null;
	if (oFF.notNull(this.m_reinitializedQm) && !this.m_reinitializedQm.isReleased() && this.m_reinitializedQm.getVariableProcessorState().isCancelNeeded())
	{
		this.m_reinitializedQm.cancelReInitVariables(oFF.SyncType.NON_BLOCKING, this, oFF.XStringValue.create(selectedData));
		this.m_reinitializedQm = null;
		return;
	}
	this.m_reinitializedQm = null;
	if (oFF.notNull(selectedData))
	{
		this.m_listener.onOrcaFilterDialogOk(selectedData);
	}
	else
	{
		this.m_listener.onOrcaFilterDialogCancel();
	}
};
oFF.FdOrcaEntryPoint.prototype.onFilterDialogOk = function(selection, settings)
{
	this.onFilterDialogClose(this.serializeOrcaSelectionData(selection));
};
oFF.FdOrcaEntryPoint.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.onFilterDialogClose(customIdentifier.getString());
};
oFF.FdOrcaEntryPoint.prototype.openForVariable = function(queryManager, variable, payload, listener)
{
	if (oFF.isNull(this.m_filterDialog) && oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) && variable.supportsValueHelp())
	{
		let title = oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_SELECT_MEMBER_FOR, variable.getText());
		let selectionMode = this.getSelectionMode(variable, payload);
		let selection = this.deserializeOrcaSelectionData(payload);
		let displayInfo = queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA) ? oFF.FilterDisplayInfo.DESCRIPTION : oFF.FilterDisplayInfo.QUERY_DEFAULT;
		if (oFF.notNull(payload) && payload.containsKey(oFF.OrcaConstants.DIMENSION_DISPLAY_INFO))
		{
			displayInfo = oFF.OrcaConstants.mapOrcaDisplayInfo(payload.getStringByKey(oFF.OrcaConstants.DIMENSION_DISPLAY_INFO), displayInfo);
		}
		this.m_listener = listener;
		let runner = oFF.FilterDialogProgramRunnerFactory.createForVariable(queryManager.getProcess(), queryManager, variable, title);
		let config = oFF.PrFactory.createStructure();
		config.putString(oFF.FilterDialog.PARAM_SELECTION_MODE, selectionMode.getName());
		config.putString(oFF.FilterDialog.PARAM_DISPLAY_INFO, displayInfo.getName());
		config.putBoolean(oFF.FilterDialog.PARAM_OFFER_READMODE_CHANGE, true);
		config.putBoolean(oFF.FilterDialog.PARAM_RESIZABLE, false);
		runner.setConfigStructure(config);
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_DEFAULT_SELECTION, selection);
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_CLOSE, this);
		runner.runProgram().onThen((filterDialog) => {
			this.m_filterDialog = filterDialog;
		}).onCatch((errMsg) => {
			this.m_filterDialog = null;
		});
		return true;
	}
	return false;
};
oFF.FdOrcaEntryPoint.prototype.prepareVariableProcessorState = function(variable, listener)
{
	this.m_reinitializedQm = null;
	let qm = oFF.notNull(variable) ? variable.getQueryManager() : null;
	if (oFF.notNull(qm) && qm.getVariableProcessorState().isReinitNeeded())
	{
		this.m_reinitializedQm = qm;
		qm.reInitVariablesAfterSubmit(oFF.SyncType.NON_BLOCKING, listener, null);
	}
	else if (oFF.notNull(qm) && !qm.supportsDirectVariableTransfer())
	{
		qm.transferVariables(oFF.SyncType.NON_BLOCKING, listener, null);
	}
	else if (oFF.notNull(listener))
	{
		listener.onVariableProcessorExecuted(oFF.ExtResult.createEmpty(), null, null);
	}
};
oFF.FdOrcaEntryPoint.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_listener = null;
	this.m_filterDialog = null;
};
oFF.FdOrcaEntryPoint.prototype.serializeOrcaSelectionData = function(selection)
{
	let result = oFF.PrFactory.createStructure();
	let selectedData = result.putNewList(oFF.OrcaConstants.SELECTED_DATA);
	for (let i = 0; i < selection.size(); i++)
	{
		let fdItem = selection.get(i);
		let item = selectedData.addNewStructure();
		if (fdItem.isNull())
		{
			item.putString(oFF.OrcaConstants.NAME, null);
			item.putString(oFF.OrcaConstants.DISPLAY_KEY, null);
			item.putString(oFF.OrcaConstants.DISPLAY_NAME, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NULL));
		}
		else
		{
			let key = fdItem.getKey();
			let displayKey = fdItem.getDisplayKey();
			let text = fdItem.getText();
			if (oFF.XString.isEqual(key, "") && oFF.XString.isEqual(displayKey, ""))
			{
				text = oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NO_VALUE);
			}
			item.putStringNotNull(oFF.OrcaConstants.NAME, key);
			item.putStringNotNull(oFF.OrcaConstants.DISPLAY_KEY, displayKey);
			item.putStringNotNull(oFF.OrcaConstants.DISPLAY_NAME, text);
		}
	}
	return oFF.PrUtils.serialize(result, false, false, 0);
};

oFF.VdOrcaValueParser = function() {};
oFF.VdOrcaValueParser.prototype = new oFF.VdAbstractValueParser();
oFF.VdOrcaValueParser.prototype._ff_c = "VdOrcaValueParser";

oFF.VdOrcaValueParser.createItem = function(variable, key, text, isLinked)
{
	let hierarchyName = variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) ? variable.getHierarchyName() : null;
	if (oFF.VdAbstractValueParser.useKeysAsDisplayKeys(variable, isLinked))
	{
		return oFF.FilterDialogValueFactory.createValueExt(null, key, text, hierarchyName, oFF.ComparisonOperator.EQUAL);
	}
	return oFF.FilterDialogValueFactory.createValueExt(key, null, text, hierarchyName, oFF.ComparisonOperator.EQUAL);
};
oFF.VdOrcaValueParser.createParser = function()
{
	return new oFF.VdOrcaValueParser();
};
oFF.VdOrcaValueParser.createValueDetail = function(variable, value, isBw, keyField, isLinked)
{
	let result = oFF.PrFactory.createStructure();
	let operator = value.getOperator();
	if (operator === oFF.VdComparisonOperator.UNDEFINED)
	{
		operator = oFF.VdComparisonOperator.EQUAL;
	}
	result.putString(oFF.OrcaConstants.OPERATOR, operator.getName());
	if (operator.getNumberOfParameters() < 1)
	{
		return result;
	}
	let key1 = oFF.VdOrcaValueParser.tryGetKey(variable, value.getFirstOperand(), keyField, isLinked);
	if (oFF.isNull(key1))
	{
		return null;
	}
	let variableType = variable.getVariableType();
	let valueType = variable.getValueType();
	if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE) && valueType.isTypeOf(oFF.XValueType.NUMBER) && oFF.XStringUtils.isNullOrEmpty(key1))
	{
		return null;
	}
	let isDatePickerSupported = isBw && oFF.VdVariableForm.isDatePickerSupported(variable);
	if (isDatePickerSupported)
	{
		result.putString(oFF.OrcaConstants.OPERAND_1, oFF.VdAbstractValueParser.getSAPFormat(valueType, key1));
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		result.putString(oFF.OrcaConstants.OPERAND_1, key1);
	}
	else
	{
		result.putString(oFF.OrcaConstants.OPERAND_1, key1);
		result.putStringNotNull(oFF.OrcaConstants.DESC_1, oFF.VdAbstractValueParser.getTextOrDisplayKey(value.getFirstOperand()));
	}
	if (operator.getNumberOfParameters() < 2)
	{
		return result;
	}
	let key2 = oFF.VdOrcaValueParser.tryGetKey(variable, value.getSecondOperand(), keyField, isLinked);
	if (oFF.isNull(key2))
	{
		return null;
	}
	if (isDatePickerSupported)
	{
		result.putString(oFF.OrcaConstants.OPERAND_2, oFF.VdAbstractValueParser.getSAPFormat(valueType, key2));
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		result.putString(oFF.OrcaConstants.OPERAND_2, key2);
	}
	else
	{
		result.putString(oFF.OrcaConstants.OPERAND_2, key2);
		result.putStringNotNull(oFF.OrcaConstants.DESC_2, oFF.VdAbstractValueParser.getTextOrDisplayKey(value.getSecondOperand()));
	}
	return result;
};
oFF.VdOrcaValueParser.exportVariables = function(varProcessor, allValues, linkedVariables)
{
	let variablesStruct = oFF.PrFactory.createStructure();
	let keys = allValues.getKeysAsIterator();
	while (keys.hasNext())
	{
		let varName = keys.next();
		let linked = oFF.notNull(linkedVariables) && linkedVariables.contains(varName);
		let variable = varProcessor.getVariable(varName);
		let variableStruct = variablesStruct.putNewStructure(varName);
		variableStruct.putString(oFF.OrcaConstants.DISPLAY_NAME, variable.getText());
		variableStruct.putString(oFF.OrcaConstants.NAME, varName);
		let isBw = oFF.VdAbstractValueParser.isBw(variable);
		let keyField = null;
		if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let dimVar = variable;
			let dimension = dimVar.getDimension();
			variableStruct.putString(oFF.OrcaConstants.DIMENSION_ID, dimension.getName());
			variableStruct.putBoolean(oFF.OrcaConstants.IS_USED_IN_DYNAMIC_FILTER, dimVar.isUsedInDynamicFilter() && dimension.getAxisType() !== oFF.AxisType.REPOSITORY);
			if (isBw && dimension.isCompound() && !variable.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NODE_VARIABLE) && oFF.XStringUtils.isNullOrEmpty(variable.getHierarchyName()))
			{
				keyField = dimension.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND);
			}
		}
		variableStruct.putBoolean(oFF.OrcaConstants.IS_INPUT_ENABLED, true);
		variableStruct.putBoolean(oFF.OrcaConstants.IS_MANDATORY, variable.isMandatory());
		variableStruct.putString(oFF.OrcaConstants.VALUE_TYPE, variable.getValueType().getName());
		variableStruct.putString(oFF.OrcaConstants.VARIABLE_TYPE, variable.getVariableType().getName());
		variableStruct.putBoolean(oFF.OrcaConstants.SUPPORTS_MULTIPLE_VALUES, variable.supportsMultipleValues());
		variableStruct.putNewStructure(oFF.OrcaConstants.VARIABLE_OBJ);
		variableStruct.putNewList(oFF.OrcaConstants.OPERATORS);
		let valueList = variableStruct.putNewList(oFF.OrcaConstants.VALUE_DETAILS);
		let values = allValues.getByKey(varName);
		for (let j = 0; j < values.size(); j++)
		{
			let valueDetail = oFF.VdOrcaValueParser.createValueDetail(variable, values.get(j), isBw, keyField, linked);
			if (oFF.notNull(valueDetail))
			{
				valueList.add(valueDetail);
			}
		}
	}
	return variablesStruct;
};
oFF.VdOrcaValueParser.mapOrcaDisplayInfo = function(dimName, dimensionDisplayInfo, defaultDisplayInfo)
{
	return oFF.notNull(dimensionDisplayInfo) ? oFF.OrcaConstants.mapOrcaDisplayInfo(dimensionDisplayInfo.getStringByKey(dimName), defaultDisplayInfo) : defaultDisplayInfo;
};
oFF.VdOrcaValueParser.parseJsonToStartValues = function(variablesStruct, variableProcessor, linkedVariables)
{
	if (!oFF.XCollectionUtils.hasElements(variablesStruct))
	{
		return null;
	}
	let map = oFF.XHashMapByString.create();
	let keys = variablesStruct.getKeysAsIterator();
	while (keys.hasNext())
	{
		let varName = keys.next();
		let linked = oFF.notNull(linkedVariables) && linkedVariables.contains(varName);
		let values = oFF.XList.create();
		let variable = variableProcessor.getVariable(varName);
		let valueList = variablesStruct.getStructureByKey(varName).getListByKey(oFF.OrcaConstants.VALUE_DETAILS);
		if (oFF.isNull(variable) || oFF.isNull(valueList))
		{
			continue;
		}
		let isSimpleTypeVar = variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE);
		for (let i = 0; i < valueList.size(); i++)
		{
			let valueStruct = valueList.getStructureAt(i);
			let operator = oFF.VdComparisonOperator.lookupExt(valueStruct.getStringByKey(oFF.OrcaConstants.OPERATOR), false);
			if (oFF.notNull(operator) && operator.isNullOperator())
			{
				values.add(oFF.VdValue.createValue(operator, oFF.FilterDialogValueFactory.createNullValue(), null));
				continue;
			}
			let firstKey = oFF.PrUtils.getStringValueProperty(valueStruct, oFF.OrcaConstants.OPERAND_1, null);
			let firstText = isSimpleTypeVar ? null : valueStruct.getStringByKey(oFF.OrcaConstants.DESC_1);
			let first = oFF.VdOrcaValueParser.createItem(variable, firstKey, firstText, linked);
			if (!isSimpleTypeVar)
			{
				let secondKey = oFF.PrUtils.getStringValueProperty(valueStruct, oFF.OrcaConstants.OPERAND_2, null);
				let secondText = valueStruct.getStringByKey(oFF.OrcaConstants.DESC_2);
				let second = oFF.VdOrcaValueParser.createItem(variable, secondKey, secondText, linked);
				values.add(oFF.VdValue.createValue(operator, first, second));
			}
			else
			{
				values.add(oFF.VdValue.createValue(operator, first, null));
			}
		}
		map.put(varName, values);
	}
	return map;
};
oFF.VdOrcaValueParser.tryGetKey = function(variable, item, keyField, isLinked)
{
	let keyValue = oFF.notNull(keyField) ? item.getValueByField(keyField) : null;
	if (oFF.isNull(keyValue))
	{
		keyValue = item.getKey();
		if (item.getDisplayKey() !== null && oFF.VdAbstractValueParser.useKeysAsDisplayKeys(variable, isLinked))
		{
			keyValue = item.getDisplayKey();
		}
	}
	return keyValue;
};
oFF.VdOrcaValueParser.prototype.deserialize = function(variableProcessor, jsonValues)
{
	return oFF.VdOrcaValueParser.parseJsonToStartValues(jsonValues.asStructure(), variableProcessor, null);
};
oFF.VdOrcaValueParser.prototype.serialize = function(varProcessor, allValues)
{
	return oFF.VdOrcaValueParser.exportVariables(varProcessor, allValues, null);
};

oFF.OrcaLinkVarManager = function() {};
oFF.OrcaLinkVarManager.prototype = new oFF.XObject();
oFF.OrcaLinkVarManager.prototype._ff_c = "OrcaLinkVarManager";

oFF.OrcaLinkVarManager.CANCEL = "cancel";
oFF.OrcaLinkVarManager.COMPONENT_NAME = "OrcaLinkVarManager";
oFF.OrcaLinkVarManager.REINIT = "reinit";
oFF.OrcaLinkVarManager.SUBMIT = "submit";
oFF.OrcaLinkVarManager.TRANSFER = "transfer";
oFF.OrcaLinkVarManager.create = function(context, model, originalHandler)
{
	let obj = new oFF.OrcaLinkVarManager();
	obj.setupExt(context, model, originalHandler);
	return obj;
};
oFF.OrcaLinkVarManager.createWithController = function(controller)
{
	let obj = new oFF.OrcaLinkVarManager();
	obj.setupExt(controller.getContext(), controller.getModel(), controller.getInternalStateHandler());
	return obj;
};
oFF.OrcaLinkVarManager.prototype.m_context = null;
oFF.OrcaLinkVarManager.prototype.m_hasMissingLink = null;
oFF.OrcaLinkVarManager.prototype.m_linkVarHelper = null;
oFF.OrcaLinkVarManager.prototype.m_linkage = null;
oFF.OrcaLinkVarManager.prototype.m_linkedDatasourceSkipSubmit = null;
oFF.OrcaLinkVarManager.prototype.m_linkedProcessors = null;
oFF.OrcaLinkVarManager.prototype.m_linkedProcessorsSkipSubmit = null;
oFF.OrcaLinkVarManager.prototype.m_linkedVarsByDatasource = null;
oFF.OrcaLinkVarManager.prototype.m_mainVarsByLinkedVar = null;
oFF.OrcaLinkVarManager.prototype.m_originalHandler = null;
oFF.OrcaLinkVarManager.prototype.m_submitMode = null;
oFF.OrcaLinkVarManager.prototype.m_valueHelps = null;
oFF.OrcaLinkVarManager.prototype.m_vdModel = null;
oFF.OrcaLinkVarManager.prototype.activateSubmitAll = function(linkVarHelper)
{
	if (oFF.isNull(linkVarHelper))
	{
		throw oFF.XException.createIllegalArgumentException("Cannot activate linked var helper with null object");
	}
	this.m_linkVarHelper = linkVarHelper;
	this.m_submitMode = oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_RECURSIVE;
};
oFF.OrcaLinkVarManager.prototype.activateSubmitLinked = function()
{
	this.m_linkVarHelper = null;
	this.m_submitMode = oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_DIRECT;
};
oFF.OrcaLinkVarManager.prototype.activateVariant = function(variant, listener, customIdentifier)
{
	this.m_originalHandler.activateVariant(variant, listener, customIdentifier);
};
oFF.OrcaLinkVarManager.prototype.addLinkedDatasource = function(mainVariable, linkedVariable)
{
	if (oFF.isNull(this.m_linkVarHelper))
	{
		return;
	}
	this.m_mainVarsByLinkedVar.put(this.getUniqueVarName(linkedVariable), mainVariable.getName());
	let datasourceName = this.m_linkVarHelper.getLinkGroupId(linkedVariable.getQueryManager());
	let varNames = this.m_linkedVarsByDatasource.getByKey(datasourceName);
	if (oFF.isNull(varNames))
	{
		varNames = oFF.XList.create();
		this.m_linkedVarsByDatasource.put(datasourceName, varNames);
	}
	varNames.add(linkedVariable.getName());
};
oFF.OrcaLinkVarManager.prototype.addLinks = function(mainVariable, linkedVariables, joinMode)
{
	if (oFF.isNull(mainVariable) || !mainVariable.isInputEnabled())
	{
		return;
	}
	let linkedVariablesFiltered = oFF.XList.create();
	let linkedDimVariables = oFF.XList.create();
	for (let i = 0; i < linkedVariables.size(); i++)
	{
		let linkedVariable = linkedVariables.get(i);
		let queryManager = linkedVariable.getQueryManager();
		if (!linkedVariable.isInputEnabled() || oFF.isNull(queryManager))
		{
			continue;
		}
		let variableProcessor = queryManager.getVariableProcessor();
		if (!this.m_linkedProcessors.contains(variableProcessor))
		{
			this.m_linkedProcessors.add(variableProcessor);
		}
		linkedVariablesFiltered.add(linkedVariable);
		this.addLinkedDatasource(mainVariable, linkedVariable);
		if (linkedVariable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			linkedDimVariables.add(linkedVariable);
		}
	}
	if (linkedVariablesFiltered.hasElements())
	{
		let mainVarName = mainVariable.getName();
		this.m_linkage.put(mainVarName, linkedVariablesFiltered);
		if (linkedDimVariables.hasElements() && mainVariable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let valueHelp = this.createLinkValueHelp(mainVariable, linkedDimVariables, joinMode);
			this.m_valueHelps.put(mainVarName, valueHelp);
		}
	}
};
oFF.OrcaLinkVarManager.prototype.areValuesDifferentToStartValues = function(values)
{
	let startValues = this.m_vdModel.getStartValues();
	let iterator = values.getKeysAsIterator();
	while (iterator.hasNext())
	{
		let varName = iterator.next();
		if (!oFF.XListUtils.isListEquals(values.getByKey(varName), startValues.getByKey(varName)))
		{
			return true;
		}
	}
	return false;
};
oFF.OrcaLinkVarManager.prototype.cancelReinitVariables = function(startValues, listener, customIdentifier)
{
	let data = oFF.OrcaLinkVarProxyData.createData(oFF.OrcaLinkVarManager.CANCEL, listener, customIdentifier);
	data.increaseRequestCount();
	this.m_originalHandler.cancelReinitVariables(startValues, this, data);
	let toCancel = this.collectLinkedQueryManagers();
	oFF.XCollectionUtils.addAllIfNotPresent(toCancel, this.m_linkedProcessors);
	this.setVariableValuesToLinkedProcessors(startValues);
	for (let i = 0; i < toCancel.size(); i++)
	{
		let processor = toCancel.get(i);
		if (!processor.isCancelNeeded())
		{
			continue;
		}
		data.increaseRequestCount();
		processor.cancelReInitVariables(oFF.OlapUiValueHelpAbstract.s_syncType, this, data);
	}
	data.finishProgress();
	this.checkIfDone(data);
};
oFF.OrcaLinkVarManager.prototype.checkIfDone = function(data)
{
	if (!data.isReleased() && data.isDone())
	{
		let errorResult = data.getErrorResult();
		if (oFF.notNull(errorResult))
		{
			let allProcessors = this.m_linkedProcessors.createListCopy();
			allProcessors.add(this.m_originalHandler.getSubmitProcessor());
			oFF.XStream.of(allProcessors).filter((p1) => {
				return p1.isReinitNeeded() && !p1.isDirectVariableTransferEnabled();
			}).forEach((p2) => {
				p2.reInitVariablesAfterSubmit(oFF.SyncType.BLOCKING, null, null);
			});
		}
		let originalListener = data.getOriginalListener();
		if (oFF.notNull(originalListener))
		{
			originalListener.onVariableProcessorExecuted(oFF.notNull(errorResult) ? errorResult : oFF.ExtResult.createWithInfoMessage("ok"), null, data.getOriginalObject());
		}
		oFF.XObjectExt.release(data);
	}
};
oFF.OrcaLinkVarManager.prototype.collectLinkedQueryManagers = function()
{
	if (this.m_submitMode === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_RECURSIVE)
	{
		return oFF.XStream.of(this.getAllLinkedQueryManagersRecursive()).map((qm) => {
			return qm.getVariableProcessor();
		}).collect(oFF.XStreamCollector.toList());
	}
	return oFF.XStream.of(this.m_linkedProcessors).filter((e) => {
		return !this.m_linkedProcessorsSkipSubmit.contains(e);
	}).collect(oFF.XStreamCollector.toList());
};
oFF.OrcaLinkVarManager.prototype.createLinkValueHelp = function(main, linkedVariables, joinMode)
{
	if (joinMode === oFF.OrcaLinkVarJoinMode.INTERSECT)
	{
		return oFF.OrcaLinkVarValueHelpIntersect.createLink(main, linkedVariables);
	}
	else if (joinMode === oFF.OrcaLinkVarJoinMode.UNION)
	{
		return oFF.OrcaLinkVarValueHelpUnion.createLink(main, linkedVariables);
	}
	throw oFF.XException.createIllegalArgumentException("Unknown join type");
};
oFF.OrcaLinkVarManager.prototype.getAllLinkedQueryManagersRecursive = function()
{
	let result = oFF.XList.create();
	let olapEnv = this.m_vdModel.getVariableProcessor().getOlapEnv();
	let allQueryManagers = olapEnv.getAllAreaQueryManagerActive();
	for (let i = 0; i < allQueryManagers.size(); i++)
	{
		let queryManager = allQueryManagers.get(i);
		let datasourceName = this.m_linkVarHelper.getLinkGroupId(queryManager);
		let linkedVarNamesOfDatasource = this.m_linkedVarsByDatasource.getByKey(datasourceName);
		if (!oFF.XCollectionUtils.hasElements(linkedVarNamesOfDatasource) || this.m_linkedDatasourceSkipSubmit.contains(datasourceName) || !this.m_linkVarHelper.shouldBeSubmitted(queryManager))
		{
			continue;
		}
		result.add(queryManager);
	}
	return result;
};
oFF.OrcaLinkVarManager.prototype.getLinkage = function()
{
	return this.m_linkage;
};
oFF.OrcaLinkVarManager.prototype.getLinkedVariableNames = function()
{
	return this.m_linkage.getKeysAsReadOnlyList();
};
oFF.OrcaLinkVarManager.prototype.getSubmitMode = function()
{
	return this.m_submitMode;
};
oFF.OrcaLinkVarManager.prototype.getSubmitProcessor = function()
{
	return this.m_originalHandler.getSubmitProcessor();
};
oFF.OrcaLinkVarManager.prototype.getUniqueVarName = function(variable)
{
	if (oFF.isNull(this.m_linkVarHelper) || variable.getQueryManager() === null)
	{
		return variable.getName();
	}
	let datasourceName = this.m_linkVarHelper.getLinkGroupId(variable.getQueryManager());
	return oFF.XStringUtils.concatenate3(datasourceName, "~", variable.getName());
};
oFF.OrcaLinkVarManager.prototype.getValueHelpProcessorForVariable = function(varName)
{
	if (this.m_hasMissingLink.contains(varName))
	{
		let msg = oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MISSING_LINK_WARNING);
		this.m_context.getMessageCenter().postMessage(oFF.UiMessageType.WARNING, msg, oFF.OrcaLinkVarManager.COMPONENT_NAME);
	}
	return this.m_valueHelps.getByKey(varName);
};
oFF.OrcaLinkVarManager.prototype.handleErrors = function(extResult, result, data)
{
	if (oFF.isNull(data) || data.isReleased())
	{
		return true;
	}
	if (extResult.hasErrors())
	{
		data.setErrorResult(extResult);
		data.increaseCallbackCount();
		this.checkIfDone(data);
		return true;
	}
	return false;
};
oFF.OrcaLinkVarManager.prototype.hasLinks = function()
{
	return this.m_linkage.hasElements();
};
oFF.OrcaLinkVarManager.prototype.isQueryManagerValidForSubmit = function(queryManager)
{
	if (oFF.isNull(queryManager) || queryManager.isReleased())
	{
		return false;
	}
	let queryModel = queryManager.getQueryModel();
	if (oFF.isNull(queryModel) || queryModel.isReleased())
	{
		return false;
	}
	let variableManager = queryModel.getVariableManager();
	if (oFF.isNull(variableManager) || variableManager.isReleased())
	{
		return false;
	}
	return variableManager.hasVariables();
};
oFF.OrcaLinkVarManager.prototype.onQueryManagerSubmit = function(caller, queryManager, extResult, result, customIdentifier)
{
	let data = customIdentifier;
	if (this.handleErrors(extResult, result, data))
	{
		return;
	}
	this.m_linkVarHelper.onAfterVariableSubmit(queryManager);
	data.increaseCallbackCount();
	this.checkIfDone(data);
	oFF.XObjectExt.release(caller);
};
oFF.OrcaLinkVarManager.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	let data = customIdentifier;
	if (this.handleErrors(extResult, result, data))
	{
		return;
	}
	data.increaseCallbackCount();
	this.checkIfDone(data);
};
oFF.OrcaLinkVarManager.prototype.prepareVariableProcessorsToBeTransferred = function(variable, allValues)
{
	let toBeTransferred = oFF.XList.create();
	let mainVariableNames = this.m_linkage.getKeysAsIterator();
	while (mainVariableNames.hasNext())
	{
		let varName = mainVariableNames.next();
		let mainVariable = this.m_vdModel.getVariableModelByName(varName).getVariable();
		let linkedVariables = this.m_linkage.getByKey(varName);
		for (let i = 0; i < linkedVariables.size(); i++)
		{
			let linkedVariable = linkedVariables.get(i);
			let queryManager = linkedVariable.getQueryManager();
			if (oFF.isNull(queryManager) || !this.m_linkedProcessors.contains(queryManager.getVariableProcessor()))
			{
				continue;
			}
			let variableProcessor = queryManager.getVariableProcessor();
			if (!toBeTransferred.contains(variableProcessor))
			{
				toBeTransferred.add(variableProcessor);
			}
			if (mainVariable !== variable)
			{
				let values = allValues.getByKey(varName);
				oFF.VdImportExport.setValuesToVariable(linkedVariable, values);
			}
			else
			{
				linkedVariable.clear();
			}
		}
	}
	oFF.XObjectExt.release(mainVariableNames);
	return toBeTransferred;
};
oFF.OrcaLinkVarManager.prototype.reinitVariables = function(listener, customIdentifier)
{
	let data = oFF.OrcaLinkVarProxyData.createData(oFF.OrcaLinkVarManager.REINIT, listener, customIdentifier);
	data.increaseRequestCount();
	this.m_originalHandler.reinitVariables(this, data);
	let toReinit = this.collectLinkedQueryManagers();
	oFF.XCollectionUtils.addAllIfNotPresent(toReinit, this.m_linkedProcessors);
	for (let i = 0; i < toReinit.size(); i++)
	{
		let processor = toReinit.get(i);
		if (!processor.isReinitNeeded())
		{
			continue;
		}
		data.increaseRequestCount();
		processor.reInitVariablesAfterSubmit(oFF.OlapUiValueHelpAbstract.s_syncType, this, data);
	}
	data.finishProgress();
	this.checkIfDone(data);
};
oFF.OrcaLinkVarManager.prototype.releaseObject = function()
{
	this.m_context = null;
	this.m_vdModel = null;
	this.m_originalHandler = null;
	this.m_linkedProcessors = oFF.XObjectExt.release(this.m_linkedProcessors);
	this.m_linkedProcessorsSkipSubmit = oFF.XObjectExt.release(this.m_linkedProcessorsSkipSubmit);
	this.m_linkedDatasourceSkipSubmit = oFF.XObjectExt.release(this.m_linkedDatasourceSkipSubmit);
	this.m_linkedVarsByDatasource = oFF.XObjectExt.release(this.m_linkedVarsByDatasource);
	this.m_linkage = oFF.XObjectExt.release(this.m_linkage);
	this.m_valueHelps = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_valueHelps);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OrcaLinkVarManager.prototype.saveVariant = function(values, variant, listener, customIdentifier)
{
	this.m_originalHandler.saveVariant(values, variant, listener, customIdentifier);
};
oFF.OrcaLinkVarManager.prototype.setHasMissingLink = function(mainVariable)
{
	this.m_hasMissingLink.add(mainVariable.getName());
};
oFF.OrcaLinkVarManager.prototype.setSkipSubmitOfLinkedQm = function(manager)
{
	if (oFF.isNull(manager) || manager.getVariableProcessor() === this.m_vdModel.getVariableProcessor())
	{
		return;
	}
	this.m_linkedProcessorsSkipSubmit.add(manager.getVariableProcessor());
	if (oFF.notNull(this.m_linkVarHelper))
	{
		this.m_linkedDatasourceSkipSubmit.add(this.m_linkVarHelper.getLinkGroupId(manager));
	}
};
oFF.OrcaLinkVarManager.prototype.setVariableValues = function(cleanedValues)
{
	this.m_originalHandler.setVariableValues(cleanedValues);
	this.setVariableValuesToLinkedProcessors(cleanedValues);
};
oFF.OrcaLinkVarManager.prototype.setVariableValuesToLinkedProcessors = function(allValues)
{
	let mainVariableNames = this.m_linkage.getKeysAsIterator();
	while (mainVariableNames.hasNext())
	{
		let varName = mainVariableNames.next();
		let linkedVariables = this.m_linkage.getByKey(varName);
		for (let i = 0; i < linkedVariables.size(); i++)
		{
			let linkedVariable = linkedVariables.get(i);
			let queryManager = linkedVariable.getQueryManager();
			if (oFF.isNull(queryManager) || !this.m_linkedProcessors.contains(queryManager.getVariableProcessor()))
			{
				continue;
			}
			let values = allValues.getByKey(varName);
			oFF.VdImportExport.setValuesToVariable(linkedVariable, values);
		}
	}
	oFF.XObjectExt.release(mainVariableNames);
};
oFF.OrcaLinkVarManager.prototype.setupExt = function(context, model, originalHandler)
{
	this.m_context = context;
	this.m_vdModel = model;
	this.m_originalHandler = originalHandler;
	this.m_submitMode = oFF.OrcaLinkVarSubmitHandling.NONE;
	this.m_linkedProcessors = oFF.XList.create();
	this.m_linkedProcessorsSkipSubmit = oFF.XList.create();
	this.m_linkedDatasourceSkipSubmit = oFF.XList.create();
	this.m_linkedVarsByDatasource = oFF.XHashMapByString.create();
	this.m_mainVarsByLinkedVar = oFF.XHashMapByString.create();
	this.m_linkage = oFF.XHashMapByString.create();
	this.m_valueHelps = oFF.XHashMapByString.create();
	this.m_hasMissingLink = oFF.XHashSetOfString.create();
};
oFF.OrcaLinkVarManager.prototype.submitAllQueryManagersOfLinkedDatasources = function(values, data)
{
	let newValues = this.areValuesDifferentToStartValues(values);
	let allQueryManagers = this.getAllLinkedQueryManagersRecursive();
	for (let i = 0; i < allQueryManagers.size(); i++)
	{
		let queryManager = allQueryManagers.get(i);
		if (!this.isQueryManagerValidForSubmit(queryManager))
		{
			continue;
		}
		let datasourceName = this.m_linkVarHelper.getLinkGroupId(queryManager);
		let linkedVarNamesOfDatasource = this.m_linkedVarsByDatasource.getByKey(datasourceName);
		if (!newValues && !queryManager.getVariableProcessorState().isSubmitNeeded())
		{
			continue;
		}
		this.m_linkVarHelper.applySavedValues(queryManager);
		let variableProcessor = queryManager.getVariableProcessor();
		for (let j = 0; j < linkedVarNamesOfDatasource.size(); j++)
		{
			let variable = variableProcessor.getVariable(linkedVarNamesOfDatasource.get(j));
			if (oFF.notNull(variable))
			{
				let mainVarName = this.m_mainVarsByLinkedVar.getByKey(this.getUniqueVarName(variable));
				oFF.VdImportExport.setValuesToVariable(variable, values.getByKey(mainVarName));
			}
		}
		data.increaseRequestCount();
		variableProcessor.submitVariables(oFF.OlapUiValueHelpAbstract.s_syncType, oFF.OrcaLinkVarSubmitCallback.createCallback(this, queryManager), data);
	}
};
oFF.OrcaLinkVarManager.prototype.submitLinkedVariableProcessors = function(values, data)
{
	let keys = this.m_linkage.getKeysAsIterator();
	while (keys.hasNext())
	{
		let varName = keys.next();
		let linkedVariables = this.m_linkage.getByKey(varName);
		for (let j = 0; j < linkedVariables.size(); j++)
		{
			let linkedVariable = linkedVariables.get(j);
			oFF.VdImportExport.setValuesToVariable(linkedVariable, values.getByKey(varName));
		}
	}
	oFF.XObjectExt.release(keys);
	let newValues = this.areValuesDifferentToStartValues(values);
	for (let i = 0; i < this.m_linkedProcessors.size(); i++)
	{
		data.increaseRequestCount();
		let variableProcessor = this.m_linkedProcessors.get(i);
		if (newValues && !this.m_linkedProcessorsSkipSubmit.contains(variableProcessor))
		{
			variableProcessor.submitVariables(oFF.OlapUiValueHelpAbstract.s_syncType, this, data);
		}
		else
		{
			variableProcessor.cancelReInitVariables(oFF.OlapUiValueHelpAbstract.s_syncType, this, data);
		}
	}
};
oFF.OrcaLinkVarManager.prototype.submitVariables = function(values, listener, customIdentifier)
{
	let data = oFF.OrcaLinkVarProxyData.createData(oFF.OrcaLinkVarManager.SUBMIT, listener, customIdentifier);
	data.increaseRequestCount();
	this.m_originalHandler.submitVariables(values, this, data);
	if (this.m_submitMode === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_DIRECT)
	{
		this.submitLinkedVariableProcessors(values, data);
	}
	else if (this.m_submitMode === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_RECURSIVE)
	{
		this.submitAllQueryManagersOfLinkedDatasources(values, data);
	}
	data.finishProgress();
	this.checkIfDone(data);
};
oFF.OrcaLinkVarManager.prototype.transferVariables = function(values, variable, listener, customIdentifier)
{
	let data = oFF.OrcaLinkVarProxyData.createData(oFF.OrcaLinkVarManager.TRANSFER, listener, customIdentifier);
	data.increaseRequestCount();
	this.m_originalHandler.transferVariables(values, variable, this, data);
	if (this.m_linkage.containsKey(variable.getName()))
	{
		let toBeTransferred = this.prepareVariableProcessorsToBeTransferred(variable, values);
		for (let i = 0; i < toBeTransferred.size(); i++)
		{
			let variableProcessor = toBeTransferred.get(i);
			if (variableProcessor.isDirectVariableTransferEnabled())
			{
				continue;
			}
			data.increaseRequestCount();
			variableProcessor.transferVariables(oFF.OlapUiValueHelpAbstract.s_syncType, this, data);
		}
	}
	data.finishProgress();
	this.checkIfDone(data);
};

oFF.VdUqmValueParser = function() {};
oFF.VdUqmValueParser.prototype = new oFF.VdAbstractValueParser();
oFF.VdUqmValueParser.prototype._ff_c = "VdUqmValueParser";

oFF.VdUqmValueParser.createParser = function()
{
	return new oFF.VdUqmValueParser();
};
oFF.VdUqmValueParser.deserializeHierarchyName = function(variableStruct)
{
	let hierarchyName = variableStruct.getStringByKey(oFF.VdUqmConstants.HIERARCHY_NAME);
	let hierarchyText = variableStruct.getStringByKey(oFF.VdUqmConstants.HIERARCHY_DESCRIPTION);
	if (oFF.XStringUtils.isNullOrEmpty(hierarchyName))
	{
		return oFF.XList.create();
	}
	let item = oFF.FilterDialogValueFactory.createValue(hierarchyName, null, hierarchyText);
	let value = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, item, null);
	return oFF.XCollectionUtils.singletonList(value);
};
oFF.VdUqmValueParser.deserializeMembers = function(members)
{
	let values = oFF.XList.create();
	for (let j = 0; j < members.size(); j++)
	{
		let memberStruct = members.getStructureAt(j);
		let operatorString = memberStruct.getStringByKey(oFF.VdUqmConstants.OPERATOR);
		let operator = oFF.VdUqmValueParser.deserializeOperator(operatorString);
		if (operator.getNumberOfParameters() === 0)
		{
			values.add(oFF.VdValue.createValue(operator, oFF.FilterDialogValueFactory.createNullValue(), null));
		}
		else if (operator.getNumberOfParameters() === 1)
		{
			let memberIdStruct = memberStruct.getStructureByKey(oFF.VdUqmConstants.MEMBER_ID);
			let key = memberIdStruct.getStringByKey(oFF.VdUqmConstants.NAME);
			let text = memberIdStruct.getStringByKey(oFF.VdUqmConstants.DESCRIPTION);
			let item = oFF.FilterDialogValueFactory.createValue(key, null, text);
			values.add(oFF.VdValue.createValue(operator, item, null));
		}
		else
		{
			let memberIds = memberStruct.getListByKey(oFF.VdUqmConstants.MEMBER_IDS);
			let memberIdStruct1 = memberIds.getStructureAt(0);
			let key1 = memberIdStruct1.getStringByKey(oFF.VdUqmConstants.NAME);
			let text1 = memberIdStruct1.getStringByKey(oFF.VdUqmConstants.DESCRIPTION);
			let first = oFF.FilterDialogValueFactory.createValue(key1, null, text1);
			let memberIdStruct2 = memberIds.getStructureAt(1);
			let key2 = memberIdStruct2.getStringByKey(oFF.VdUqmConstants.NAME);
			let text2 = memberIdStruct2.getStringByKey(oFF.VdUqmConstants.DESCRIPTION);
			let second = oFF.FilterDialogValueFactory.createValue(key2, null, text2);
			values.add(oFF.VdValue.createValue(operator, first, second));
		}
	}
	return values;
};
oFF.VdUqmValueParser.deserializeOperator = function(uqmString)
{
	if (oFF.XString.isEqual(uqmString, oFF.VdUqmConstants.OPERATOR_IN))
	{
		return oFF.VdComparisonOperator.EQUAL;
	}
	if (oFF.XString.isEqual(uqmString, oFF.VdUqmConstants.OPERATOR_NOT_IN))
	{
		return oFF.VdComparisonOperator.NOT_EQUAL;
	}
	if (oFF.XString.isEqual(uqmString, oFF.VdUqmConstants.OPERATOR_GREATER))
	{
		return oFF.VdComparisonOperator.GREATER_THAN;
	}
	if (oFF.XString.isEqual(uqmString, oFF.VdUqmConstants.OPERATOR_LESS))
	{
		return oFF.VdComparisonOperator.LESS_THAN;
	}
	if (oFF.XString.isEqual(uqmString, oFF.VdUqmConstants.OPERATOR_CONTAINS))
	{
		return oFF.VdComparisonOperator.MATCH;
	}
	return oFF.VdComparisonOperator.lookupExt(uqmString, false);
};
oFF.VdUqmValueParser.deserializeOption = function(optionStruct)
{
	let values = oFF.XList.create();
	let optionName = optionStruct.getStringByKey(oFF.VdUqmConstants.NAME);
	let optionText = optionStruct.getStringByKey(oFF.VdUqmConstants.DESCRIPTION);
	if (!oFF.XString.isEqual(optionName, oFF.VdUqmConstants.EMPTY_OPTION_VALUE))
	{
		let item = oFF.FilterDialogValueFactory.createValue(optionName, null, optionText);
		let value = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, item, null);
		values.add(value);
	}
	return values;
};
oFF.VdUqmValueParser.deserializeSimple = function(stringValues)
{
	let values = oFF.XList.create();
	for (let j = 0; j < stringValues.size(); j++)
	{
		let item = oFF.FilterDialogValueFactory.createValue(stringValues.getStringAt(j), null, null);
		let value = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, item, null);
		values.add(value);
	}
	return values;
};
oFF.VdUqmValueParser.deserializeVariableType = function(variableType)
{
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_DIMENSION_MEMBER, variableType))
	{
		return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
	}
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_HIERARCHY_NAME, variableType))
	{
		return oFF.VariableType.HIERARCHY_NAME_VARIABLE;
	}
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_OPTION_LIST, variableType))
	{
		return oFF.VariableType.OPTION_LIST_VARIABLE;
	}
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_SIMPLE, variableType))
	{
		return oFF.VariableType.SIMPLE_TYPE_VARIABLE;
	}
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_TEXT, variableType))
	{
		return oFF.VariableType.TEXT_VARIABLE;
	}
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_FORMULA, variableType))
	{
		return oFF.VariableType.FORMULA_VARIABLE;
	}
	if (oFF.XString.isEqual(oFF.VdUqmConstants.TYPE_HIERARCHY_NODE, variableType))
	{
		return oFF.VariableType.HIERARCHY_NODE_VARIABLE;
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("No variable type for: ", variableType));
};
oFF.VdUqmValueParser.getFirstKeySafe = function(values, defaultValue)
{
	if (oFF.XCollectionUtils.hasElements(values))
	{
		let key = values.get(0).getFirstOperand().getKey();
		if (oFF.notNull(key))
		{
			return key;
		}
	}
	return defaultValue;
};
oFF.VdUqmValueParser.getTextValue = function(item)
{
	let text = item.getText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	let displayKey = item.getDisplayKey();
	if (!oFF.XString.isEqual(item.getKey(), item.getDisplayKey()))
	{
		return displayKey;
	}
	return null;
};
oFF.VdUqmValueParser.getUqmPropertyNameByVariableType = function(variableType)
{
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		return oFF.VdUqmConstants.HIERARCHY_NAME;
	}
	if (variableType === oFF.VariableType.OPTION_LIST_VARIABLE)
	{
		return oFF.VdUqmConstants.OPTION_NAME;
	}
	if (variableType === oFF.VariableType.TEXT_VARIABLE)
	{
		return oFF.VdUqmConstants.TEXT_VALUE;
	}
	if (variableType === oFF.VariableType.FORMULA_VARIABLE)
	{
		return oFF.VdUqmConstants.FORMULA_VALUE;
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("No uqm property name for: ", variableType.getName()));
};
oFF.VdUqmValueParser.serializeHierarchyName = function(variable, values, variableStruct)
{
	if (oFF.XCollectionUtils.hasElements(values))
	{
		let firstOperand = values.get(0).getFirstOperand();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(firstOperand.getKey()))
		{
			variableStruct.putString(oFF.VdUqmConstants.HIERARCHY_NAME, firstOperand.getKey());
			let text = oFF.XStringUtils.isNotNullAndNotEmpty(firstOperand.getText()) ? firstOperand.getText() : "";
			variableStruct.putString(oFF.VdUqmConstants.HIERARCHY_DESCRIPTION, text);
		}
	}
	else
	{
		variableStruct.putString(oFF.VdUqmConstants.HIERARCHY_NAME, "");
		variableStruct.putString(oFF.VdUqmConstants.HIERARCHY_DESCRIPTION, "");
	}
	let hierarchyDueDate = variable.getHierarchyNameDimension().getHierarchyDueDate();
	variableStruct.putString(oFF.VdUqmConstants.HIERARCHY_DUE_DATE, oFF.notNull(hierarchyDueDate) ? hierarchyDueDate.getStringRepresentation() : "");
	variableStruct.putString(oFF.VdUqmConstants.HIERARCHY_NAME_DIMENSION, variable.getHierarchyNameDimension().getName());
};
oFF.VdUqmValueParser.serializeMembers = function(variableName, values)
{
	let result = oFF.PrFactory.createList();
	if (!oFF.XCollectionUtils.hasElements(values))
	{
		return result;
	}
	for (let i = 0; i < values.size(); i++)
	{
		let memberStruct = result.addNewStructure();
		let value = values.get(i);
		let operator = value.getOperator();
		memberStruct.putString(oFF.VdUqmConstants.OPERATOR, oFF.VdUqmValueParser.serializeOperator(operator));
		if (operator.getNumberOfParameters() <= 0)
		{
			continue;
		}
		let first = value.getFirstOperand();
		let memberIdStruct1 = oFF.PrStructure.create();
		memberIdStruct1.putString(oFF.VdUqmConstants.VARIABLE_ID, variableName);
		memberIdStruct1.putString(oFF.VdUqmConstants.NAME, first.getKey());
		memberIdStruct1.putString(oFF.VdUqmConstants.DESCRIPTION, oFF.VdUqmValueParser.getTextValue(first));
		if (operator.getNumberOfParameters() === 1)
		{
			memberStruct.put(oFF.VdUqmConstants.MEMBER_ID, memberIdStruct1);
		}
		else
		{
			let second = value.getSecondOperand();
			let memberIdStruct2 = oFF.PrStructure.create();
			memberIdStruct2.putString(oFF.VdUqmConstants.VARIABLE_ID, variableName);
			memberIdStruct2.putString(oFF.VdUqmConstants.NAME, second.getKey());
			memberIdStruct2.putString(oFF.VdUqmConstants.DESCRIPTION, oFF.VdUqmValueParser.getTextValue(second));
			let memberIds = memberStruct.putNewList(oFF.VdUqmConstants.MEMBER_IDS);
			memberIds.add(memberIdStruct1);
			memberIds.add(memberIdStruct2);
		}
	}
	return result;
};
oFF.VdUqmValueParser.serializeOperator = function(operator)
{
	if (operator === oFF.VdComparisonOperator.GREATER_THAN)
	{
		return oFF.VdUqmConstants.OPERATOR_GREATER;
	}
	if (operator === oFF.VdComparisonOperator.LESS_THAN)
	{
		return oFF.VdUqmConstants.OPERATOR_LESS;
	}
	if (operator === oFF.VdComparisonOperator.MATCH)
	{
		return oFF.VdUqmConstants.OPERATOR_CONTAINS;
	}
	return operator.getName();
};
oFF.VdUqmValueParser.serializeOption = function(variableName, values)
{
	let optionStruct = oFF.PrFactory.createStructure();
	optionStruct.putString(oFF.VdUqmConstants.VARIABLE_ID, variableName);
	if (oFF.XCollectionUtils.hasElements(values))
	{
		let option = values.get(0).getFirstOperand();
		optionStruct.putString(oFF.VdUqmConstants.NAME, option.getKey());
		optionStruct.putString(oFF.VdUqmConstants.DESCRIPTION, option.getText());
	}
	else
	{
		optionStruct.putString(oFF.VdUqmConstants.NAME, oFF.VdUqmConstants.EMPTY_OPTION_VALUE);
		optionStruct.putString(oFF.VdUqmConstants.DESCRIPTION, "");
	}
	return optionStruct;
};
oFF.VdUqmValueParser.serializeSimple = function(values)
{
	let result = oFF.PrFactory.createList();
	if (!oFF.XCollectionUtils.hasElements(values))
	{
		return result;
	}
	for (let i = 0; i < values.size(); i++)
	{
		let key = values.get(i).getFirstOperand().getKey();
		if (oFF.notNull(key))
		{
			result.addString(key);
		}
	}
	return result;
};
oFF.VdUqmValueParser.serializeValueType = function(valueType)
{
	if (valueType === oFF.XValueType.DATE)
	{
		return oFF.VdUqmConstants.VALUE_TYPE_DATE;
	}
	if (valueType === oFF.XValueType.TIME)
	{
		return oFF.VdUqmConstants.VALUE_TYPE_TIME;
	}
	if (valueType === oFF.XValueType.DATE_TIME)
	{
		return oFF.VdUqmConstants.VALUE_TYPE_DATETIME;
	}
	if (valueType === oFF.XValueType.STRING)
	{
		return oFF.VdUqmConstants.VALUE_TYPE_STRING;
	}
	return oFF.VdUqmConstants.VALUE_TYPE_UNKNOWN;
};
oFF.VdUqmValueParser.serializeVariableType = function(variableType)
{
	if (variableType === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_DIMENSION_MEMBER;
	}
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_HIERARCHY_NAME;
	}
	if (variableType === oFF.VariableType.OPTION_LIST_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_OPTION_LIST;
	}
	if (variableType === oFF.VariableType.SIMPLE_TYPE_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_SIMPLE;
	}
	if (variableType === oFF.VariableType.TEXT_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_TEXT;
	}
	if (variableType === oFF.VariableType.FORMULA_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_FORMULA;
	}
	if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		return oFF.VdUqmConstants.TYPE_HIERARCHY_NODE;
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("No uqm variable type for: ", variableType.getName()));
};
oFF.VdUqmValueParser.prototype.deserialize = function(variableProcessor, jsonValues)
{
	if (oFF.isNull(jsonValues) || !jsonValues.isList())
	{
		return null;
	}
	let result = oFF.XHashMapByString.create();
	let valueList = jsonValues.asList();
	for (let i = 0; i < valueList.size(); i++)
	{
		let variableStruct = valueList.getStructureAt(i);
		let idStruct = variableStruct.getStructureByKey(oFF.VdUqmConstants.ID);
		let varName = idStruct.getStringByKey(oFF.VdUqmConstants.VARIABLE_ID);
		let values;
		let varType = oFF.VdUqmValueParser.deserializeVariableType(variableStruct.getStringByKey(oFF.VdUqmConstants.TYPE));
		if (varType === oFF.VariableType.DIMENSION_MEMBER_VARIABLE || varType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			let members = variableStruct.getListByKey(oFF.VdUqmConstants.MEMBERS);
			values = oFF.VdUqmValueParser.deserializeMembers(members);
		}
		else if (varType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
		{
			values = oFF.VdUqmValueParser.deserializeHierarchyName(variableStruct);
		}
		else if (varType === oFF.VariableType.SIMPLE_TYPE_VARIABLE)
		{
			let stringValues = variableStruct.getListByKey(oFF.VdUqmConstants.SIMPLE_TYPE_VALUES);
			values = oFF.VdUqmValueParser.deserializeSimple(stringValues);
		}
		else if (varType === oFF.VariableType.OPTION_LIST_VARIABLE)
		{
			let optionStruct = variableStruct.getStructureByKey(oFF.VdUqmConstants.OPTION_NAME);
			values = oFF.VdUqmValueParser.deserializeOption(optionStruct);
		}
		else
		{
			let propertyName = oFF.VdUqmValueParser.getUqmPropertyNameByVariableType(varType);
			let propertyValue = variableStruct.getStringByKey(propertyName);
			let item = oFF.FilterDialogValueFactory.createValue(propertyValue, null, null);
			let value = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, item, null);
			values = oFF.XCollectionUtils.singletonList(value);
		}
		if (oFF.XCollectionUtils.hasElements(values))
		{
			result.put(varName, values);
		}
	}
	return result;
};
oFF.VdUqmValueParser.prototype.serialize = function(varProcessor, allValues)
{
	let variablesList = oFF.PrFactory.createList();
	let variables = varProcessor.getInputEnabledAndNonTechnicalVariables();
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		let varName = variable.getName();
		let values = allValues.getByKey(varName);
		let variableStruct = variablesList.addNewStructure();
		let idStruct = variableStruct.putNewStructure(oFF.VdUqmConstants.ID);
		idStruct.putString(oFF.VdUqmConstants.VARIABLE_ID, varName);
		let varType = variable.getVariableType();
		variableStruct.putString(oFF.VdUqmConstants.TYPE, oFF.VdUqmValueParser.serializeVariableType(varType));
		variableStruct.putString(oFF.VdUqmConstants.VALUE_TYPE, oFF.VdUqmValueParser.serializeValueType(variable.getValueType()));
		variableStruct.putString(oFF.VdUqmConstants.DESCRIPTION, variable.getText());
		variableStruct.putString(oFF.VdUqmConstants.IS_MANDATORY, oFF.XBoolean.convertToString(variable.isMandatory()));
		if (varType === oFF.VariableType.DIMENSION_MEMBER_VARIABLE || varType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			variableStruct.put(oFF.VdUqmConstants.MEMBERS, oFF.VdUqmValueParser.serializeMembers(varName, values));
		}
		else if (varType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
		{
			oFF.VdUqmValueParser.serializeHierarchyName(variable, values, variableStruct);
		}
		else if (varType === oFF.VariableType.SIMPLE_TYPE_VARIABLE)
		{
			variableStruct.put(oFF.VdUqmConstants.SIMPLE_TYPE_VALUES, oFF.VdUqmValueParser.serializeSimple(values));
		}
		else if (varType === oFF.VariableType.OPTION_LIST_VARIABLE)
		{
			variableStruct.put(oFF.VdUqmConstants.OPTION_NAME, oFF.VdUqmValueParser.serializeOption(varName, values));
		}
		else
		{
			let value = oFF.VdUqmValueParser.getFirstKeySafe(values, "");
			let propertyName = oFF.VdUqmValueParser.getUqmPropertyNameByVariableType(varType);
			variableStruct.putString(propertyName, value);
		}
	}
	return variablesList;
};

oFF.DataExportHelper = function() {};
oFF.DataExportHelper.prototype = new oFF.XObject();
oFF.DataExportHelper.prototype._ff_c = "DataExportHelper";

oFF.DataExportHelper.OVERWRITE_APPENDIX_CREATED_BY = "FF_DATA_EXPORT_OVERWRITE_APPENDIX_CREATED_BY";
oFF.DataExportHelper.OVERWRITE_APPENDIX_CREATED_ON_TIMESTAMP = "FF_DATA_EXPORT_OVERWRITE_APPENDIX_CREATED_ON_TIMESTAMP";
oFF.DataExportHelper.applyTableDefinition = function(origDef, newDef, config)
{
	newDef.setRepetitiveMemberNames(config.getShowRepetitiveMembers());
	newDef.getApplicationSettings().setSkipTableCellWidthCalc(config.hasAutoColWidths());
	if (oFF.notNull(origDef))
	{
		newDef.getApplicationSettings().setDerivePercentageFromShift(origDef.getApplicationSettings().isDerivePercentageFromShift());
	}
};
oFF.DataExportHelper.applyWindowingSettings = function(applicationSettings)
{
	applicationSettings.setMaxColumns(-1);
	applicationSettings.setMaxRows(-1);
	applicationSettings.setMinColumnsFetch(-1);
	applicationSettings.setMinRowsFetch(-1);
};
oFF.DataExportHelper.copyPropertiesMissedByClone = function(origQm, copyQm)
{
	copyQm.getFilter().linkFilters(origQm.getFilter().getLinkedFilters());
	let original = oFF.DataExportHelper.getMeasureDimension(origQm);
	let copy = oFF.DataExportHelper.getMeasureDimension(copyQm);
	copyQm.getVisualizationManager().getApplicationSettings().copyFrom(origQm.getVisualizationManager().getApplicationSettings(), null);
	if (oFF.notNull(copy) && oFF.notNull(original))
	{
		let allStructureMembersCopy = copy.getAllStructureMembers();
		let allStructureMembersOriginal = original.getAllStructureMembers();
		for (let i = 0; i < allStructureMembersCopy.size(); i++)
		{
			let copyMember = allStructureMembersCopy.get(i);
			let originalMember = allStructureMembersOriginal.get(i);
			if (originalMember.getNumericShift() !== null)
			{
				copyMember.setNumericShift(originalMember.getNumericShift().getInteger());
			}
			copyMember.setScaleFormat(originalMember.getScaleFormat());
			if (originalMember.getNumericScale() !== null)
			{
				copyMember.setNumericScale(originalMember.getNumericScale().getInteger());
			}
			copyMember.setSignPresentation(originalMember.getSignPresentation());
			copyMember.setScaleAndUnitPlacement(originalMember.getScaleAndUnitPlacement());
		}
	}
};
oFF.DataExportHelper.create = function(qm, originalTableDef, onError, onComplete)
{
	let deh = new oFF.DataExportHelper();
	deh.m_queryManager = qm.cloneQueryManager();
	deh.m_originalTableDef = originalTableDef;
	oFF.DataExportHelper.copyPropertiesMissedByClone(qm.getQueryModel(), deh.m_queryManager.getQueryModel());
	deh.m_process = qm.getProcess();
	deh.m_overwriteTexts = qm.getQueryModel().getVisualizationManager().getApplicationSettings().getOverwriteTexts();
	deh.m_onError = onError;
	deh.m_onComplete = onComplete;
	deh.m_scheduleExportHelper = oFF.SuExportScheduleHelper.create(deh.m_process);
	deh.m_processedDimensions = oFF.XHashSetOfString.create();
	return deh;
};
oFF.DataExportHelper.createForTest = function(qm, originalTableDef, onError, onComplete)
{
	let deh = oFF.DataExportHelper.create(qm, originalTableDef, onError, onComplete);
	deh.m_isUnderTest = true;
	return deh;
};
oFF.DataExportHelper.getDisplayMessageFromResult = function(expResult)
{
	let provider = oFF.DataExportHelper.getLocalizationProvider();
	let warnings = expResult.getWarnings();
	let result = "";
	let warnItr = warnings.getIterator();
	while (warnItr.hasNext())
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(result))
		{
			result = oFF.XStringUtils.concatenate2(result, "\n");
		}
		let pair = warnItr.next();
		result = oFF.XStringUtils.concatenate2(result, provider.getTextWithPlaceholder(pair.getFirstString(), provider.getText(pair.getSecondString())));
	}
	return result;
};
oFF.DataExportHelper.getLocalizationProvider = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName(oFF.DataExportHelperI18n.PROVIDER_NAME);
};
oFF.DataExportHelper.getMeasureDimension = function(queryModel)
{
	if (queryModel.isLeadingStructureAccount())
	{
		return queryModel.getAccountDimension();
	}
	return queryModel.getMeasureDimension();
};
oFF.DataExportHelper.prototype.m_config = null;
oFF.DataExportHelper.prototype.m_expModel = null;
oFF.DataExportHelper.prototype.m_isUnderTest = false;
oFF.DataExportHelper.prototype.m_json = null;
oFF.DataExportHelper.prototype.m_newTableDef = null;
oFF.DataExportHelper.prototype.m_onComplete = null;
oFF.DataExportHelper.prototype.m_onError = null;
oFF.DataExportHelper.prototype.m_originalTableDef = null;
oFF.DataExportHelper.prototype.m_overwriteTexts = null;
oFF.DataExportHelper.prototype.m_process = null;
oFF.DataExportHelper.prototype.m_processedDimensions = null;
oFF.DataExportHelper.prototype.m_queryManager = null;
oFF.DataExportHelper.prototype.m_savedQueryModelState = null;
oFF.DataExportHelper.prototype.m_scheduleExportHelper = null;
oFF.DataExportHelper.prototype.m_table = null;
oFF.DataExportHelper.prototype.buildFilterTable = function(appendix)
{
	let measureDimName = "";
	if (this.m_queryManager.getDimensionAccessor().getAccountDimension() !== null)
	{
		measureDimName = this.m_queryManager.getDimensionAccessor().getAccountDimension().getName();
	}
	else
	{
		measureDimName = oFF.XLocalizationCenter.getCenter().getText(oFF.OlapUiCommonI18n.COMMON_MEASURES);
		if (oFF.XStringUtils.isNullOrEmpty(measureDimName) && this.m_queryManager.getQueryModel().getMeasureDimension() !== null)
		{
			measureDimName = this.m_queryManager.getQueryModel().getMeasureDimension().getName();
		}
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(measureDimName))
	{
		this.m_processedDimensions.add(measureDimName);
	}
	let provider = oFF.DataExportHelper.getLocalizationProvider();
	let dimsIter = this.m_queryManager.getQueryModel().getDimensionAccessor().getDimensions().getIterator();
	while (dimsIter.hasNext())
	{
		let dim = dimsIter.next();
		if (!dim.isMeasureStructure() && !oFF.XString.isEqual(dim.getName(), measureDimName))
		{
			let dimFilt = dim.getFilter();
			if (oFF.notNull(dimFilt) && dimFilt.hasElements() && !this.m_processedDimensions.contains(dim.getName()) && !dim.isStructure())
			{
				this.m_processedDimensions.add(dim.getName());
				appendix.addFilterRow(this.getDimensionName(dim), provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_OPERATOR_TITLE), provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_VALUE_TITLE));
				let filtValItr = oFF.FilterDialogValueFactory.createSelectionFromFilter(dim, dimFilt).getIterator();
				while (filtValItr.hasNext())
				{
					let fdv = filtValItr.next();
					appendix.addFilterRow("", this.getFilterOperation(fdv), this.getFilterValueDisplayText(fdv));
				}
			}
		}
	}
	let mainFilter = this.m_queryManager.getQueryModel().getFilter();
	if (oFF.notNull(mainFilter))
	{
		let linkedFiltersItr = mainFilter.getLinkedFilters().getIterator();
		while (linkedFiltersItr.hasNext())
		{
			let fe = linkedFiltersItr.next().getFilterRootElement();
			if (fe.getOlapComponentType() === oFF.FilterComponentType.FILTER_MEASURE_BASED)
			{
				let fmb = fe;
				let vals = oFF.FilterDialogMBFUtils.getFilterRanges(fmb).getIterator();
				appendix.addMeasureFilterRow(measureDimName, this.getDimensionContext(fmb), provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_OPERATOR_TITLE), provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_VALUE_TITLE));
				while (vals.hasNext())
				{
					let curVal = vals.next();
					let memberName = oFF.FilterDialogMBFUtils.getMemberName(fmb);
					appendix.addMeasureFilterRow("", oFF.notNull(memberName) ? memberName : "", this.getFilterOperation(curVal), this.getFilterValueDisplayText(curVal));
				}
			}
		}
		let cart = oFF.ComplexFilterSeparationUtil.getIsolatedCartesianIntersectFilters(this.m_queryManager.getQueryModel());
		if (oFF.notNull(cart))
		{
			let dimNameItr = cart.getKeysAsIterator();
			while (dimNameItr.hasNext())
			{
				let dimName = dimNameItr.next();
				if (this.m_queryManager.getQueryModel().getDimensionByName(dimName) !== null && !this.m_processedDimensions.contains(dimName))
				{
					let filt = cart.getByKey(dimName);
					appendix.addFilterRow(dimName, provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_OPERATOR_TITLE), provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_VALUE_TITLE));
					let eleItr = filt.getIterator();
					while (eleItr.hasNext())
					{
						let element = eleItr.next();
						if (element.getOlapComponentType() === oFF.FilterComponentType.CARTESIAN_LIST)
						{
							let cartList = element;
							for (let i = 0; i < cartList.size(); i++)
							{
								let cartesianElement = cartList.getCartesianElement(i);
								let cartOp = this.getOperator(oFF.VdComparisonOperator.lookupExt(cartesianElement.getComparisonOperator().getName(), cartesianElement.getSetSign() === oFF.SetSign.EXCLUDING));
								let low = cartesianElement.getLow();
								let high = cartesianElement.getHigh();
								let value = "";
								let highVal = "";
								if (oFF.notNull(low) && low.getValue() !== null)
								{
									value = low.getValue().toString();
								}
								if (oFF.notNull(high) && high.getValue() !== null)
								{
									highVal = high.getValue().toString();
								}
								if (oFF.XStringUtils.isNotNullAndNotEmpty(highVal))
								{
									value = oFF.XStringUtils.concatenate3(value, " - ", highVal);
								}
								appendix.addFilterRow("", cartOp, value);
							}
							if (eleItr.hasNext())
							{
								appendix.addFilterRow("", filt.getComponentType().getName(), "");
							}
						}
					}
				}
			}
		}
	}
};
oFF.DataExportHelper.prototype.buildVariableTable = function(appendix)
{
	let isBw = this.m_queryManager.getSystemType().isTypeOf(oFF.SystemType.BW);
	let varIter = this.m_queryManager.getVariables().getIterator();
	while (varIter.hasNext())
	{
		let variable = varIter.next();
		if (!variable.isEmpty() && !variable.isTechnicalVariable())
		{
			let vals = oFF.VdImportExport.getValuesFromVariable(variable).getIterator();
			if (vals.hasNext())
			{
				if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
				{
					let dmv = variable;
					if (isBw && dmv.getDimension() !== null)
					{
						this.m_processedDimensions.add(dmv.getDimension().getName());
					}
				}
				let varName = "";
				if (oFF.XStringUtils.isNotNullAndNotEmpty(variable.getText()))
				{
					varName = variable.getText();
				}
				else
				{
					varName = variable.getName();
				}
				let provider = oFF.DataExportHelper.getLocalizationProvider();
				appendix.addVariableRow(varName, provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_OPERATOR_TITLE), provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTER_VALUE_TITLE));
				while (vals.hasNext())
				{
					let val = vals.next();
					let valStr = this.getFilterValueDisplayText(val.getFirstOperand());
					let secVal = this.getFilterValueDisplayText(val.getSecondOperand());
					if (oFF.XStringUtils.isNotNullAndNotEmpty(secVal))
					{
						valStr = oFF.XStringUtils.concatenate3(valStr, " - ", secVal);
					}
					appendix.addVariableRow("", this.getOperator(val.getOperator()), valStr);
				}
			}
		}
	}
};
oFF.DataExportHelper.prototype.createAppendix = function()
{
	let provider = oFF.DataExportHelper.getLocalizationProvider();
	let title = provider.getText(oFF.DataExportHelperI18n.APPENDIX_TITLE);
	let techTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_TECHNICAL_TITLE);
	let tenantTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_TENANT_TITLE);
	let queryTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_QUERY_TITLE);
	let infoProvTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_INFO_PROVIDER_TITLE);
	let modelTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_MODEL_TITLE);
	let createdByTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_CREATED_BY_TITLE);
	let createdOnTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_CREATED_ON_TITLE);
	let variableTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_VARIABLES_TITLE);
	let filtersTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_FILTERS_TITLE);
	let measureFiltersTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_MEASURE_FILTERS_TITLE);
	let shortcutLinkTitle = provider.getText(oFF.DataExportHelperI18n.APPENDIX_SHORTCUT_LINK_TITLE);
	let appendix = oFF.Appendix.create(title, techTitle, tenantTitle, queryTitle, infoProvTitle, modelTitle, createdByTitle, createdOnTitle, variableTitle, filtersTitle, measureFiltersTitle, shortcutLinkTitle);
	appendix.setShortcutLink(this.m_config.getShortcutUrl());
	appendix.setTenantData(this.m_process.getNetworkLocation());
	appendix.setQueryData(this.m_config, this.m_queryManager.getQueryModel().getName(), this.m_queryManager.getQueryModel().getText(), this.m_queryManager.getSystemType());
	if (this.m_queryManager.getQueryModel().getInfoProvider() !== null)
	{
		appendix.setInfoProviderData(this.m_queryManager.getQueryModel().getInfoProvider().getName(), this.m_queryManager.getQueryModel().getInfoProvider().getText());
	}
	if (this.m_overwriteTexts.containsKey(oFF.DataExportHelper.OVERWRITE_APPENDIX_CREATED_BY))
	{
		appendix.setCreatedBy(this.m_overwriteTexts.getByKey(oFF.DataExportHelper.OVERWRITE_APPENDIX_CREATED_BY));
	}
	else
	{
		appendix.setCreatedBy(this.m_process.getUserProfile().getName());
	}
	if (this.m_overwriteTexts.containsKey(oFF.DataExportHelper.OVERWRITE_APPENDIX_CREATED_ON_TIMESTAMP))
	{
		appendix.setCreatedOnString(this.m_overwriteTexts.getByKey(oFF.DataExportHelper.OVERWRITE_APPENDIX_CREATED_ON_TIMESTAMP));
	}
	else
	{
		appendix.setCreatedOn(oFF.XDateTime.create());
	}
	this.buildVariableTable(appendix);
	this.buildFilterTable(appendix);
	return appendix;
};
oFF.DataExportHelper.prototype.exportData = function(conf)
{
	if (oFF.isNull(conf))
	{
		this.onError(oFF.DataExportHelper.getLocalizationProvider().getText(oFF.DataExportHelperI18n.UKNOWN_EXPORT_CONFIG));
		return;
	}
	try
	{
		this.m_config = conf;
		if (this.m_config.getVdVariableValues() !== null && !oFF.XStringUtils.isNullOrEmpty(this.m_config.getVdValueFormat()))
		{
			let valueFormat = oFF.VdValueFormat.lookup(this.m_config.getVdValueFormat());
			let values = valueFormat.getParser().deserialize(this.m_queryManager, this.m_config.getVdVariableValues());
			let keys = values.getKeysAsIterator();
			while (keys.hasNext())
			{
				let varName = keys.next();
				let variable = this.m_queryManager.getVariable(varName);
				if (oFF.notNull(variable) && variable.isDynamicOrExitVariable())
				{
					values.remove(varName);
				}
			}
			oFF.VdImportExport.setValuesToProcessor(this.m_queryManager, values);
			this.m_queryManager.stopEventing();
			let variables = this.m_queryManager.getVariables();
			oFF.XStream.of(variables).filter((variable) => {
				return variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
			}).filter((variable2) => {
				return !variable2.isHierarchyInfoVariableForExplicitlyInactivatedHierarchy();
			}).map((normalVar) => {
				return normalVar;
			}).forEach((dimVar) => {
				dimVar.setWinControlInAutoSubmit(true);
			});
			this.m_queryManager.resumeEventing();
		}
		if (this.m_config.supportsAppendix())
		{
			this.m_config.addAppendix(this.createAppendix());
		}
		if (this.m_config.getExpandHierarchy())
		{
			this.m_queryManager.getQueryModel().getDrillManager().removeAllContextDrillOperations();
			this.m_queryManager.getQueryModel().getDrillManager().removeAllZoomDrillOperations();
			let setInitialDrill = (dimIter) => {
				while (dimIter.hasNext())
				{
					let dim = dimIter.next();
					if (dim.isHierarchyActive())
					{
						dim.setInitialDrillLevel(-1);
					}
				}
			};
			let rowsIter = this.m_queryManager.getQueryModel().getRowsAxis().getIterator();
			setInitialDrill(rowsIter);
			let colsIter = this.m_queryManager.getQueryModel().getColumnsAxis().getIterator();
			setInitialDrill(colsIter);
		}
		if (this.m_config.skipNumberFormatting())
		{
			let measureDim = oFF.DataExportHelper.getMeasureDimension(this.m_queryManager.getQueryModel());
			if (oFF.notNull(measureDim))
			{
				let allStructureMembersCopy = measureDim.getAllStructureMembers();
				for (let i = 0; i < allStructureMembersCopy.size(); i++)
				{
					let member = allStructureMembersCopy.get(i);
					member.setNumericShift(0);
				}
			}
		}
		if (oFF.XStringUtils.isNullOrEmpty(this.m_config.getFileName()))
		{
			this.m_config.setFileName(oFF.DataExportHelper.getLocalizationProvider().getText(oFF.DataExportHelperI18n.DEFAULT_EXPORT_FILE_NAME));
		}
		if (!this.m_queryManager.isSubmitNeeded() || this.m_queryManager.getModelCapabilities().supportsAutoVariableSubmit())
		{
			this.getResultSet();
		}
		else
		{
			this.submitVariables();
		}
	}
	catch (errorOnData)
	{
		this.onThrowable(errorOnData);
	}
};
oFF.DataExportHelper.prototype.getDimensionContext = function(fmb)
{
	let dimCtx = fmb.getDimensionContext();
	let result = "";
	if (oFF.notNull(dimCtx))
	{
		let dims = dimCtx.getIterator();
		while (dims.hasNext())
		{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(result))
			{
				result = oFF.XStringUtils.concatenate2(result, ", ");
			}
			result = oFF.XStringUtils.concatenate2(result, dims.next());
		}
	}
	return result;
};
oFF.DataExportHelper.prototype.getDimensionName = function(dim)
{
	if (dim.getText() !== null)
	{
		return dim.getText();
	}
	return dim.getName();
};
oFF.DataExportHelper.prototype.getFilterOperation = function(curVal)
{
	let vdComparison = oFF.VdComparisonOperator.lookupExt(curVal.getComparisonOperator().getName(), curVal.isExcluded());
	if (oFF.notNull(vdComparison))
	{
		return this.getOperator(vdComparison);
	}
	return curVal.getComparisonOperator().getDisplayString();
};
oFF.DataExportHelper.prototype.getFilterValueDisplayText = function(fdv)
{
	let result = "";
	if (oFF.notNull(fdv))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(fdv.getText()))
		{
			result = fdv.getText();
		}
		else if (oFF.XStringUtils.isNotNullAndNotEmpty(fdv.getDisplayKey()))
		{
			result = fdv.getDisplayKey();
		}
		else if (fdv.getType() === oFF.FilterDialogValueType.RANGE)
		{
			let rfdv = fdv;
			result = oFF.XStringUtils.concatenate3(rfdv.getLow().getDisplayKey(), " - ", rfdv.getHigh().getDisplayKey());
		}
		else
		{
			result = fdv.getKey();
		}
	}
	return result;
};
oFF.DataExportHelper.prototype.getOperator = function(vdComparison)
{
	if (vdComparison === oFF.VdComparisonOperator.NOT_EQUAL)
	{
		return "!=";
	}
	if (vdComparison === oFF.VdComparisonOperator.UNDEFINED)
	{
		return oFF.VdComparisonOperator.EQUAL.getShortText();
	}
	return vdComparison.getShortText();
};
oFF.DataExportHelper.prototype.getResultSet = function()
{
	this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "RESULT_SET_COLLECTION_STARTED", oFF.SuExportScheduleNotificationType.INFO, null);
	let id = oFF.XStringUtils.concatenate2(oFF.DataExportHelper.getLocalizationProvider().getText(oFF.DataExportHelperI18n.ID_PREFIX), this.m_config.getFileName());
	let visualizationManager = this.m_queryManager.getQueryModel().getVisualizationManager();
	this.m_newTableDef = visualizationManager.getOrCreateVisualisationDefinition(id, oFF.ProtocolBindingType.SAC_TABLE_GRID, oFF.SemanticBindingType.TABLE);
	this.m_newTableDef.setShowDimensionTitles(oFF.TriStateBool._TRUE);
	if (oFF.notNull(this.m_originalTableDef))
	{
		visualizationManager.getTableTemplateLinker().copyFrom(this.m_originalTableDef.getQueryModel().getVisualizationManager().getTableTemplateLinker(), null);
		this.m_newTableDef.getTemplateLinker().copyFrom(this.m_originalTableDef.getTemplateLinker(), null);
	}
	let applicationSettings = this.m_queryManager.getQueryModel().getVisualizationManager().getApplicationSettings();
	oFF.DataExportHelper.applyWindowingSettings(applicationSettings);
	oFF.DataExportHelper.applyTableDefinition(this.m_originalTableDef, this.m_newTableDef, this.m_config);
	if (this.m_isUnderTest)
	{
		this.m_newTableDef.getActiveTableContainer().processExecution(oFF.SyncType.BLOCKING, null, null);
		this.onSynchronized(this.m_queryManager.getResultSetMessages(), null, null);
	}
	else
	{
		this.m_newTableDef.getActiveTableContainer().attachListener(this, oFF.ListenerType.SYNC_LISTENER, null);
		this.m_newTableDef.getActiveTableContainer().processExecution(oFF.SyncType.NON_BLOCKING, null, null);
	}
};
oFF.DataExportHelper.prototype.messagesHandler = function(errorItr)
{
	let msg = "";
	while (oFF.notNull(errorItr) && errorItr.hasNext())
	{
		msg = oFF.XStringUtils.concatenate2(msg, errorItr.next().getText());
		if (errorItr.hasNext())
		{
			msg = oFF.XStringUtils.concatenate2(msg, "\n");
		}
	}
	this.onError(msg);
};
oFF.DataExportHelper.prototype.onComplete = function(result)
{
	if (oFF.notNull(this.m_onComplete))
	{
		this.m_onComplete(result);
	}
	if (!this.m_isUnderTest)
	{
		this.releaseObject();
	}
};
oFF.DataExportHelper.prototype.onError = function(msg)
{
	if (oFF.notNull(this.m_onError))
	{
		this.m_onError(msg);
	}
	oFF.XLogger.println(oFF.XStringUtils.concatenate2("Error occurred in DataExportHelper: ", msg));
	if (!this.m_isUnderTest)
	{
		this.releaseObject();
	}
};
oFF.DataExportHelper.prototype.onSynchronized = function(messages, data, customIdentifier)
{
	if (oFF.notNull(messages) && messages.hasErrors())
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "RESULT_SET_COLLECTION_FAILED", oFF.SuExportScheduleNotificationType.ERROR, null);
		this.messagesHandler(messages.getErrors().getIterator());
	}
	else if (oFF.notNull(messages) && oFF.XCollectionUtils.contains(messages.getInfos(), (warning) => {
		return warning.getCode() === 42709;
	}))
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "MAX_RESULT_RECORDS_LIMIT_REACHED", oFF.SuExportScheduleNotificationType.ERROR, null);
		this.onError(oFF.DataExportHelper.getLocalizationProvider().getText(oFF.DataExportHelperI18n.MAX_RESULT_RECORDS_LIMIT_REACHED));
	}
	else
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "RESULT_SET_COLLECTION_COMPLETE", oFF.SuExportScheduleNotificationType.INFO, null);
		this.processExport();
	}
};
oFF.DataExportHelper.prototype.onThrowable = function(error)
{
	this.onError(oFF.XException.getMessage(error));
};
oFF.DataExportHelper.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	if (oFF.notNull(extResult) && extResult.hasErrors())
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "VARIABLE_SUBMIT_FAILED", oFF.SuExportScheduleNotificationType.ERROR, null);
		this.messagesHandler(extResult.getErrors().getIterator());
	}
	else
	{
		let variableValues = this.m_queryManager.getQueryModel().getVariableContainer().serializeToElement(oFF.QModelFormat.INA_REPOSITORY_DELTA);
		if (oFF.notNull(this.m_savedQueryModelState))
		{
			this.m_queryManager.getQueryModel().deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY_DELTA, this.m_savedQueryModelState);
			oFF.XObjectExt.release(this.m_savedQueryModelState);
			this.m_savedQueryModelState = null;
		}
		this.m_queryManager.getQueryModel().getVariableContainer().deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY_DELTA, variableValues);
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "VARIABLE_SUBMIT_COMPLETED", oFF.SuExportScheduleNotificationType.INFO, null);
		this.getResultSet();
	}
};
oFF.DataExportHelper.prototype.processExport = function()
{
	try
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "STARTING_EXPORT_FILE_PROCESSING", oFF.SuExportScheduleNotificationType.INFO, null);
		this.m_table = this.m_newTableDef.getActiveVisualizationContainer().getVisualizationData();
		this.m_expModel = oFF.Model.create();
		this.m_expModel.processTable(this.m_config, this.m_table);
		let exporter = oFF.Exporter.create();
		let result;
		if (this.m_isUnderTest)
		{
			result = oFF.ExportResult.createSuccessForTest(this.m_expModel);
		}
		else
		{
			result = this.m_config.getExportResult(exporter, this.m_expModel);
		}
		if (!result.success())
		{
			this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "EXPORT_FILE_PROCESSING_FAILED", oFF.SuExportScheduleNotificationType.ERROR, null);
			if (result.hasWarnings())
			{
				this.onError(oFF.DataExportHelper.getDisplayMessageFromResult(result));
			}
			else
			{
				this.onError(oFF.DataExportHelper.getLocalizationProvider().getText(oFF.DataExportHelperI18n.GENERIC_EXPORT_FAILURE));
			}
		}
		else
		{
			this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "EXPORT_COMPLETED", oFF.SuExportScheduleNotificationType.INFO, null);
			this.onComplete(result);
		}
	}
	catch (e2)
	{
		this.onThrowable(e2);
	}
};
oFF.DataExportHelper.prototype.releaseObject = function()
{
	this.m_onError = null;
	this.m_onComplete = null;
	oFF.XObjectExt.release(this.m_processedDimensions);
	oFF.XObjectExt.release(this.m_savedQueryModelState);
	oFF.XObjectExt.release(this.m_expModel);
	oFF.XObjectExt.release(this.m_json);
	oFF.XObjectExt.release(this.m_table);
	oFF.XObjectExt.release(this.m_newTableDef);
	oFF.XObjectExt.release(this.m_config);
	oFF.XObjectExt.release(this.m_queryManager);
	oFF.XObjectExt.release(this.m_scheduleExportHelper);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.DataExportHelper.prototype.showExportDialog = function(exportType, fileName, cancelHandler)
{
	let okHandler = (config) => {
		try
		{
			this.exportData(config);
		}
		catch (e3)
		{
			this.onThrowable(e3);
		}
	};
	let showRepMembers = oFF.notNull(this.m_originalTableDef) ? this.m_originalTableDef.isRepetitiveMemberNames() : false;
	let exportDialogRunner = oFF.ProgramRunner.createRunner(this.m_process, oFF.SuExportDialog.DEFAULT_PROGRAM_NAME);
	exportDialogRunner.setStringArgument(oFF.SuExportDialog.PARAM_EXPORT_TYPE, exportType);
	exportDialogRunner.setStringArgument(oFF.SuExportDialog.PARAM_FILE_NAME, fileName);
	exportDialogRunner.setBooleanArgument(oFF.SuExportDialog.PARAM_SHOW_REP_MEMBERS, showRepMembers);
	exportDialogRunner.runProgram().then((dialog) => {
		let expDialog = dialog;
		expDialog.setOkHandler(okHandler);
		expDialog.setCancelHandler(cancelHandler);
		return expDialog;
	}, (error) => {
		this.onError(error.getMessage().getText());
		return null;
	});
};
oFF.DataExportHelper.prototype.submitVariables = function()
{
	this.m_savedQueryModelState = this.m_queryManager.getQueryModel().serializeToElement(oFF.QModelFormat.INA_REPOSITORY_DELTA);
	if (this.m_isUnderTest)
	{
		let submitResult = this.m_queryManager.submitVariables(oFF.SyncType.BLOCKING, null, null);
		this.onVariableProcessorExecuted(submitResult, null, null);
	}
	else
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_NOTIFICATION_NAME, "SUBMITTING_VARIABLES", oFF.SuExportScheduleNotificationType.INFO, null);
		this.m_queryManager.submitVariables(oFF.SyncType.NON_BLOCKING, this, null);
	}
};

oFF.OuCalcAbstractDatasourceHandler = function() {};
oFF.OuCalcAbstractDatasourceHandler.prototype = new oFF.XObjectExt();
oFF.OuCalcAbstractDatasourceHandler.prototype._ff_c = "OuCalcAbstractDatasourceHandler";

oFF.OuCalcAbstractDatasourceHandler.prototype.m_calcStructure = null;
oFF.OuCalcAbstractDatasourceHandler.prototype.m_datasource = null;
oFF.OuCalcAbstractDatasourceHandler.prototype.m_formulaTextHandler = null;
oFF.OuCalcAbstractDatasourceHandler.prototype.m_queryModel = null;
oFF.OuCalcAbstractDatasourceHandler.prototype.m_restrictedMeasures = null;
oFF.OuCalcAbstractDatasourceHandler.prototype.m_useClientQueryObjectsStorage = false;
oFF.OuCalcAbstractDatasourceHandler.prototype.cleanup = function(calculationId, previousCalculationId)
{
	let calculationIdToDelete = oFF.notNull(previousCalculationId) ? previousCalculationId : calculationId;
	oFF.FeFormulaCustomMeasureUtil.deleteCustomMeasures(calculationIdToDelete, this.m_calcStructure);
	this.m_calcStructure.removeMeasure(calculationIdToDelete);
};
oFF.OuCalcAbstractDatasourceHandler.prototype.createCalculation = function(calculationId, calculationDesc, previousCalculationId, formula, formulaText)
{
	this.m_calcStructure.queueEventing();
	let formulaMeasure = null;
	try
	{
		formulaMeasure = this.createCalculationInternal(calculationId, calculationDesc, previousCalculationId, formula, formulaText);
		this.m_calcStructure.resumeEventing();
	}
	catch (e)
	{
		this.m_calcStructure.resumeEventing();
		if (oFF.FeFeatureToggle.isActive(oFF.FeFeatureToggle.RUNNING_AGGREGATION))
		{
			let errorMsg = oFF.XStringUtils.concatenate2("Error : ", oFF.XException.getMessage(e));
			throw oFF.XException.createRuntimeException(errorMsg);
		}
		else
		{
			throw oFF.XException.createRuntimeException("Error in formula dialog calculation creation.");
		}
	}
	return formulaMeasure;
};
oFF.OuCalcAbstractDatasourceHandler.prototype.createCalculationInternal = function(calculationId, calculationDesc, previousCalculationId, formulaWrapper, formulaText)
{
	let numberFormatting = null;
	let isFromPreviousCalculation = oFF.XStringUtils.isNotNullAndNotEmpty(previousCalculationId) && oFF.XString.isEqual(calculationId, previousCalculationId);
	if (isFromPreviousCalculation)
	{
		let prevCalc = this.m_calcStructure.getStructureMember(previousCalculationId);
		if (oFF.notNull(prevCalc))
		{
			numberFormatting = oFF.OuCalcNumberFormatting.createFromMember(prevCalc, true);
		}
		else
		{
			this.logWarning2("Previous calculation not found in calculation structure. CalculationId: ", previousCalculationId);
			isFromPreviousCalculation = false;
		}
	}
	this.cleanup(calculationId, previousCalculationId);
	this.m_restrictedMeasures = oFF.FeFormulaCustomMeasureUtil.createRestrictedMeasures(this.m_queryModel, this.m_calcStructure, formulaWrapper.getCustomMeasures());
	return this.createFormulaMeasure(calculationId, calculationDesc, formulaWrapper, formulaText, isFromPreviousCalculation, numberFormatting);
};
oFF.OuCalcAbstractDatasourceHandler.prototype.createFormulaMeasure = function(calculationId, calculationDesc, formulaWrapper, formulaText, isFromPreviousCalculation, numberFormatting)
{
	let formulaMeasure = this.m_calcStructure.addNewFormulaMeasure(calculationId, calculationDesc);
	formulaMeasure.setFormula(formulaWrapper.getFormula());
	formulaMeasure.setFormulaText(this.m_formulaTextHandler.generateInternalFormulaText(formulaText));
	formulaMeasure.setIsEditable(true);
	formulaMeasure.setCustomMeasureNames(oFF.FeFormulaCustomMeasureUtil.getCustomMeasureNames(this.m_restrictedMeasures));
	if (this.m_calcStructure.getHierarchy() !== null && this.m_calcStructure.getHierarchy().getName() !== null)
	{
		formulaMeasure.setPreferredHierarchy(this.m_calcStructure.getHierarchy().getName());
	}
	let numericShift = formulaWrapper.getFormula().getNumericShift();
	if (isFromPreviousCalculation && oFF.notNull(numberFormatting))
	{
		numberFormatting.applyToMember(formulaMeasure);
		let isNumericShiftPercentOnCalc = numberFormatting.getNumericShift() !== null && numberFormatting.getNumericShift().getInteger() === 2;
		if (!numericShift.isPresent() && isNumericShiftPercentOnCalc)
		{
			formulaMeasure.resetNumericShiftExt(true);
			this.updateIsNumericShiftPercentInFormula(formulaMeasure);
		}
	}
	if (numericShift.isPresent())
	{
		formulaMeasure.setNumericShiftExt(numericShift.get().getInteger(), false);
		this.updateIsNumericShiftPercentInFormula(formulaMeasure);
	}
	return formulaMeasure;
};
oFF.OuCalcAbstractDatasourceHandler.prototype.getLocalization = function()
{
	return oFF.XLocalizationCenter.getCenter();
};
oFF.OuCalcAbstractDatasourceHandler.prototype.getLogLayer = function()
{
	return oFF.OriginLayer.APPLICATION;
};
oFF.OuCalcAbstractDatasourceHandler.prototype.setupInternal = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	oFF.XObjectExt.assertNotNull(queryModel);
	oFF.XObjectExt.assertNotNull(calcStructure);
	this.m_queryModel = queryModel;
	this.m_useClientQueryObjectsStorage = useClientQueryObjectsStorage;
	this.m_calcStructure = calcStructure;
	this.m_datasource = this.getDatasource();
	this.m_formulaTextHandler = oFF.FeFormulaTextHandler.create(oFF.FeDatasourceMetadataProviderInternalImpl.create(this.m_datasource).getAllUsableMeasures());
};
oFF.OuCalcAbstractDatasourceHandler.prototype.setupInternalPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	oFF.XObjectExt.assertNotNull(queryModel);
	oFF.XObjectExt.assertNotNull(calcStructure);
	this.m_queryModel = queryModel;
	this.m_calcStructure = calcStructure;
	this.m_useClientQueryObjectsStorage = useClientQueryObjectsStorage;
	return oFF.XPromise.create((resolve, reject) => {
		this.getDatasourcePromise().onThen((datasource) => {
			this.m_datasource = datasource;
			this.m_formulaTextHandler = oFF.FeFormulaTextHandler.create(oFF.FeDatasourceMetadataProviderInternalImpl.create(datasource).getAllUsableMeasures());
			resolve(this);
		});
	});
};
oFF.OuCalcAbstractDatasourceHandler.prototype.updateIsNumericShiftPercentInFormula = function(formulaMeasure)
{
	let numericShift = formulaMeasure.getNumericShift();
	if (this.m_queryModel.getModelCapabilities().supportsNumericShiftPercent())
	{
		formulaMeasure.setNumericShiftPercent(oFF.notNull(numericShift) && numericShift.getInteger() === 2);
	}
};

oFF.CbController = function() {};
oFF.CbController.prototype = new oFF.XObject();
oFF.CbController.prototype._ff_c = "CbController";

oFF.CbController.BUSY = 1;
oFF.CbController.COMPONENT_NAME = "ClipboardDialog";
oFF.CbController.IDLE = 0;
oFF.CbController.create = function(uiManager)
{
	let obj = new oFF.CbController();
	obj.setupController(uiManager);
	return obj;
};
oFF.CbController.prototype.m_cancelBtn = null;
oFF.CbController.prototype.m_display = null;
oFF.CbController.prototype.m_layout = null;
oFF.CbController.prototype.m_listener = null;
oFF.CbController.prototype.m_okBtn = null;
oFF.CbController.prototype.m_originalText = null;
oFF.CbController.prototype.m_uiManager = null;
oFF.CbController.prototype.close = function()
{
	this.m_display.close();
};
oFF.CbController.prototype.onAfterOpen = function(event)
{
	this.m_layout.getTextArea().focus();
};
oFF.CbController.prototype.onPaste = function(event)
{
	let textToParse = this.m_layout.getTextArea().getValue();
	let parsedText = oFF.DialogGridParser.convertFromExcel(textToParse);
	this.m_layout.getTextArea().setValue(parsedText);
};
oFF.CbController.prototype.onPress = function(event)
{
	let control = event.getControl();
	if (control === this.m_okBtn)
	{
		this.setState(oFF.CbController.BUSY);
		let text = this.m_layout.getTextArea().getValue();
		let hasChanged = !oFF.XString.isEqual(this.m_originalText, text);
		this.m_listener.onClipboardOk(hasChanged, text);
	}
	else if (control === this.m_cancelBtn)
	{
		this.m_listener.onClipboardCancel();
	}
};
oFF.CbController.prototype.openClipboardDialog = function(infoText, text, listener)
{
	this.setupClipboardDialog(infoText, text, listener, false);
};
oFF.CbController.prototype.openLazyLoadClipboardDialog = function(infoText, listener)
{
	this.setupClipboardDialog(infoText, null, listener, true);
};
oFF.CbController.prototype.releaseObject = function()
{
	this.m_listener = null;
	this.m_originalText = null;
	this.m_okBtn = oFF.XObjectExt.release(this.m_okBtn);
	this.m_cancelBtn = oFF.XObjectExt.release(this.m_cancelBtn);
	this.m_display = oFF.XObjectExt.release(this.m_display);
	this.m_uiManager = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.CbController.prototype.setBusy = function()
{
	this.setState(oFF.CbController.BUSY);
};
oFF.CbController.prototype.setIdle = function()
{
	this.setState(oFF.CbController.IDLE);
};
oFF.CbController.prototype.setState = function(state)
{
	switch (state)
	{
		case oFF.CbController.IDLE:
			this.m_layout.getTextArea().setBusy(false);
			this.m_okBtn.setEnabled(true);
			break;

		case oFF.CbController.BUSY:
			this.m_layout.getTextArea().setBusy(true);
			this.m_okBtn.setEnabled(false);
			break;
	}
};
oFF.CbController.prototype.setText = function(text)
{
	this.m_originalText = text;
	this.m_layout.getTextArea().setValue(text);
	this.setState(oFF.CbController.IDLE);
};
oFF.CbController.prototype.setupClipboardDialog = function(infoText, text, listener, initialDataLazyLoad)
{
	this.m_listener = listener;
	if (oFF.isNull(this.m_display))
	{
		this.m_display = oFF.OlapUiDialogHandle.createDialogHandle(this.m_uiManager.newControl(oFF.UiType.DIALOG));
		this.m_display.setName("ClipboardDialog");
		this.m_display.registerOnAfterOpen(this);
		this.m_display.setTitle(oFF.XLocalizationCenter.getCenter().getText(oFF.ClipboardDialogI18n.I18N_CB_CLIPBOARD));
		this.m_display.setWidth(oFF.UiCssLength.createExt(509, oFF.UiCssSizeUnit.PIXEL));
		this.m_okBtn = this.m_display.addNewButton();
		this.m_okBtn.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.XCommonI18n.OK));
		this.m_okBtn.setButtonType(oFF.UiButtonType.PRIMARY);
		this.m_okBtn.setName("ClipboardOkBtn");
		this.m_okBtn.registerOnPress(this);
		this.m_cancelBtn = this.m_display.addNewButton();
		this.m_cancelBtn.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.XCommonI18n.CANCEL));
		this.m_cancelBtn.setName("ClipboardCancelBtn");
		this.m_cancelBtn.registerOnPress(this);
		this.m_layout.buildOlapDialogUi(this.m_display.getGenesis());
		this.m_layout.getTextArea().registerOnPaste(this);
	}
	if (oFF.XStringUtils.isNullOrEmpty(infoText))
	{
		this.m_layout.getInfoSection().setVisible(false);
	}
	else
	{
		this.m_layout.getInfoSection().setVisible(true);
		this.m_layout.getInfoLabel().setText(infoText);
	}
	this.setText(text);
	this.setState(initialDataLazyLoad ? oFF.CbController.BUSY : oFF.CbController.IDLE);
	this.m_display.open();
};
oFF.CbController.prototype.setupController = function(uiManager)
{
	this.m_uiManager = uiManager;
	this.m_layout = oFF.CbLayout.create();
};

oFF.CmtController = function() {};
oFF.CmtController.prototype = new oFF.XObject();
oFF.CmtController.prototype._ff_c = "CmtController";

oFF.CmtController.BUSY = 1;
oFF.CmtController.IDLE = 0;
oFF.CmtController.create = function(context)
{
	let obj = new oFF.CmtController();
	obj.setupController(context);
	return obj;
};
oFF.CmtController.prototype.m_cancelBtn = null;
oFF.CmtController.prototype.m_context = null;
oFF.CmtController.prototype.m_display = null;
oFF.CmtController.prototype.m_layout = null;
oFF.CmtController.prototype.m_listener = null;
oFF.CmtController.prototype.m_okBtn = null;
oFF.CmtController.prototype.m_originalText = null;
oFF.CmtController.prototype.close = function()
{
	this.m_display.close();
};
oFF.CmtController.prototype.onAfterOpen = function(event)
{
	this.m_layout.getTextArea().focus();
};
oFF.CmtController.prototype.onPress = function(event)
{
	let control = event.getControl();
	if (control === this.m_okBtn)
	{
		this.setState(oFF.CmtController.BUSY);
		let text = this.m_layout.getTextArea().getValue();
		let hasChanged = !oFF.XString.isEqual(this.m_originalText, text);
		this.m_listener.onCommentingOk(hasChanged, text);
	}
	else if (control === this.m_cancelBtn)
	{
		this.m_listener.onCommentingCancel();
	}
};
oFF.CmtController.prototype.openCommentingDialog = function(infoText, text, readOnly, listener)
{
	this.setUpCommentingDialog(infoText, text, readOnly, listener);
};
oFF.CmtController.prototype.releaseObject = function()
{
	this.m_listener = null;
	this.m_originalText = null;
	this.m_okBtn = oFF.XObjectExt.release(this.m_okBtn);
	this.m_cancelBtn = oFF.XObjectExt.release(this.m_cancelBtn);
	this.m_display = oFF.XObjectExt.release(this.m_display);
	this.m_context = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.CmtController.prototype.setBusy = function()
{
	this.setState(oFF.CmtController.BUSY);
};
oFF.CmtController.prototype.setIdle = function()
{
	this.setState(oFF.CmtController.IDLE);
};
oFF.CmtController.prototype.setState = function(state)
{
	switch (state)
	{
		case oFF.CmtController.IDLE:
			this.m_layout.getTextArea().setBusy(false);
			this.m_okBtn.setEnabled(true);
			break;

		case oFF.CmtController.BUSY:
			this.m_layout.getTextArea().setBusy(true);
			this.m_okBtn.setEnabled(false);
			break;
	}
};
oFF.CmtController.prototype.setText = function(text)
{
	this.m_originalText = text;
	this.m_layout.getTextArea().setValue(text);
	this.setState(oFF.CmtController.IDLE);
};
oFF.CmtController.prototype.setUpCommentingDialog = function(infoText, text, readOnly, listener)
{
	this.m_listener = listener;
	if (oFF.isNull(this.m_display))
	{
		this.m_display = this.m_context.getDisplayFactory().getInstance();
		this.m_display.setName("CommentingDialog");
		this.m_display.registerOnAfterOpen(this);
		this.m_display.setTitle("Comment");
		this.m_display.setWidth(oFF.UiCssLength.createExt(509, oFF.UiCssSizeUnit.PIXEL));
		this.m_okBtn = this.m_display.addNewButton();
		this.m_okBtn.setText("Ok");
		this.m_okBtn.setButtonType(oFF.UiButtonType.PRIMARY);
		this.m_okBtn.setName("CommentingOkBtn");
		this.m_okBtn.registerOnPress(this);
		this.m_cancelBtn = this.m_display.addNewButton();
		this.m_cancelBtn.setText("Cancel");
		this.m_cancelBtn.setName("CommentingCancelBtn");
		this.m_cancelBtn.registerOnPress(this);
		this.m_layout.buildOlapDialogUi(this.m_display.getGenesis());
		if (oFF.XStringUtils.isNullOrEmpty(infoText))
		{
			this.m_layout.getInfoSection().setVisible(false);
		}
		else
		{
			this.m_layout.getInfoSection().setVisible(true);
			this.m_layout.getInfoLabel().setText(infoText);
		}
		this.setText(text);
		this.m_layout.getTextArea().setEnabled(!readOnly);
		this.setState(oFF.CmtController.IDLE);
		this.m_display.open();
	}
};
oFF.CmtController.prototype.setupController = function(context)
{
	this.m_context = context;
	this.m_layout = oFF.CmtLayout.create();
};

oFF.DataCellController = function() {};
oFF.DataCellController.prototype = new oFF.XObject();
oFF.DataCellController.prototype._ff_c = "DataCellController";

oFF.DataCellController.create = function(context)
{
	let obj = new oFF.DataCellController();
	obj.setupController(context);
	return obj;
};
oFF.DataCellController.prototype.m_closeBtn = null;
oFF.DataCellController.prototype.m_context = null;
oFF.DataCellController.prototype.m_display = null;
oFF.DataCellController.prototype.m_layout = null;
oFF.DataCellController.prototype.m_listener = null;
oFF.DataCellController.prototype.m_measure1 = null;
oFF.DataCellController.prototype.m_measure2 = null;
oFF.DataCellController.prototype.m_model = null;
oFF.DataCellController.prototype.m_okBtn = null;
oFF.DataCellController.prototype.m_propsForSecondStructure = false;
oFF.DataCellController.prototype.m_queryManager = null;
oFF.DataCellController.prototype.changed = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let measure2 = null;
	if (oFF.notNull(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		measure2 = structureDimension.getDimensionMember(this.m_measure2);
	}
	let resetEverything = false;
	let decimalChanged = false;
	let scalingChanged = false;
	let disaggregationModeChanged = false;
	let measureToUpdate = oFF.isNull(this.m_measure2) ? measure1 : oFF.notNull(measure2) ? measure2 : null;
	if (oFF.notNull(measureToUpdate))
	{
		decimalChanged = this.didValueChange(this.m_model.getDecimal(), this.m_layout.getSelectedDecimal());
		scalingChanged = this.didValueChange(this.m_model.getScaling(), this.m_layout.getSelectedScaling());
		disaggregationModeChanged = this.m_model.getDisaggregationModeOnModel() !== this.m_layout.getSelectedDisaggregationMode();
		if (decimalChanged)
		{
			if (this.m_model.getDecimalDefaultAsMetadata())
			{
				measureToUpdate.resetToDefaultNumericScale();
			}
			else
			{
				measureToUpdate.setNumericScale(oFF.XInteger.convertFromString(this.m_layout.getSelectedDecimal()));
			}
		}
		if (scalingChanged)
		{
			if (this.m_model.getScalingDefaultAsMetadata())
			{
				measureToUpdate.resetToDefaultNumericShift();
			}
			else
			{
				measureToUpdate.setNumericShiftExt(oFF.XInteger.convertFromString(this.m_layout.getSelectedScaling()), true);
			}
		}
		if (disaggregationModeChanged)
		{
			let cell = this.getCellBasedOnMeasures();
			if (this.m_model.getDisaggregationModeDefaultAsMetadata())
			{
				cell.resetToDefaultDisaggregationMode();
			}
			else
			{
				cell.setDisaggregationMode(this.m_layout.getSelectedDisaggregationMode());
			}
		}
	}
	return resetEverything || decimalChanged || scalingChanged || disaggregationModeChanged;
};
oFF.DataCellController.prototype.close = function()
{
	this.m_display.close();
};
oFF.DataCellController.prototype.decimalDefaultAsMetadata = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let decimalDefaultAsMetadata1 = oFF.isNull(measure1) || measure1.isNumericScaleDefault();
	let decimalDefaultAsMetadata2 = true;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		let measure2 = structureDimension.getDimensionMember(this.m_measure2);
		decimalDefaultAsMetadata2 = measure2.isNumericScaleDefault();
	}
	return decimalDefaultAsMetadata1 && decimalDefaultAsMetadata2;
};
oFF.DataCellController.prototype.determineDecimal = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let measure2 = null;
	let decimal1 = oFF.isNull(measure1) ? null : measure1.getNumericScale();
	let decimal2 = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		measure2 = structureDimension.getDimensionMember(this.m_measure2);
		decimal2 = measure2.getNumericScale();
	}
	let finalDecimal = null;
	if (oFF.isNull(measure2))
	{
		if (oFF.notNull(decimal1))
		{
			finalDecimal = decimal1.getStringRepresentation();
		}
	}
	else
	{
		if (oFF.notNull(decimal2))
		{
			finalDecimal = decimal2.getStringRepresentation();
		}
	}
	return finalDecimal;
};
oFF.DataCellController.prototype.determineDisaggregationMode = function()
{
	let cellOfInterest = this.getCellBasedOnMeasures();
	return oFF.notNull(cellOfInterest) ? cellOfInterest.getDisaggregationMode() : null;
};
oFF.DataCellController.prototype.determineResultCalculation = function()
{
	let structureMember = null;
	if (!this.m_propsForSecondStructure && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure1))
	{
		structureMember = this.getCmds().getMeasure(this.m_measure1);
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		structureMember = structureDimension.getDimensionMember(this.m_measure2);
	}
	let resultCalculation = oFF.notNull(structureMember) ? structureMember.getResultCalculation() : null;
	return oFF.notNull(resultCalculation) ? resultCalculation.getName() : null;
};
oFF.DataCellController.prototype.determineScaling = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let measure2 = null;
	let scaling1 = oFF.isNull(measure1) ? null : measure1.getNumericShiftExt(true);
	let scaling2 = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		measure2 = structureDimension.getDimensionMember(this.m_measure2);
		scaling2 = measure2.getNumericShiftExt(true);
	}
	let finalScaling = null;
	if (oFF.isNull(measure2))
	{
		if (oFF.notNull(scaling1))
		{
			finalScaling = scaling1.getStringRepresentation();
		}
	}
	else
	{
		if (oFF.notNull(scaling2))
		{
			finalScaling = scaling2.getStringRepresentation();
		}
	}
	return finalScaling;
};
oFF.DataCellController.prototype.determineSingleValueCalculation = function()
{
	let structureMember = null;
	if (!this.m_propsForSecondStructure && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure1))
	{
		structureMember = this.getCmds().getMeasure(this.m_measure1);
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		structureMember = structureDimension.getDimensionMember(this.m_measure2);
	}
	let singleValueCalculation = oFF.notNull(structureMember) ? structureMember.getSingleValueCalculation() : null;
	return oFF.notNull(singleValueCalculation) ? singleValueCalculation.getName() : null;
};
oFF.DataCellController.prototype.determineValueType = function()
{
	let cellOfInterest = this.getCellBasedOnMeasures();
	let baseValueType = null;
	if (oFF.notNull(cellOfInterest))
	{
		baseValueType = cellOfInterest.getBaseValueType();
	}
	return oFF.notNull(baseValueType) ? baseValueType.getName() : null;
};
oFF.DataCellController.prototype.didValueChange = function(oldValue, newValue)
{
	let valueChanged = false;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(newValue))
	{
		let newValueAsInt = oFF.XInteger.convertFromString(newValue);
		if (oFF.notNull(oldValue))
		{
			let oldValueAsInt = oFF.XInteger.convertFromString(oldValue);
			if (newValueAsInt !== oldValueAsInt)
			{
				valueChanged = true;
			}
		}
		else
		{
			valueChanged = true;
		}
	}
	return valueChanged;
};
oFF.DataCellController.prototype.getCellBasedOnMeasures = function()
{
	let measureMember1 = this.getCmds().getMeasure(this.m_measure1);
	let queryDataCells = oFF.isNull(measureMember1) ? null : measureMember1.getQueryDataCells();
	let cellOfInterest = null;
	if (oFF.XCollectionUtils.hasElements(queryDataCells))
	{
		let numberOfQDC = queryDataCells.size();
		if (numberOfQDC === 1 || oFF.XStringUtils.isNullOrEmpty(this.m_measure2))
		{
			cellOfInterest = queryDataCells.get(0);
		}
		else
		{
			let cell = null;
			for (let i = 0; i < numberOfQDC; i++)
			{
				cell = queryDataCells.get(i);
				if (oFF.XString.isEqual(cell.getReferenceStructureElement1().getName(), this.m_measure1) && oFF.XString.isEqual(cell.getReferenceStructureElement2().getName(), this.m_measure2))
				{
					cellOfInterest = cell;
					break;
				}
			}
		}
	}
	else if (oFF.XStringUtils.isNullOrEmpty(this.m_measure1) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		if (oFF.notNull(structureDimension))
		{
			let measureMember2 = structureDimension.getStructureMemberByAliasOrMember(this.m_measure2);
			queryDataCells = oFF.isNull(measureMember2) ? null : measureMember2.getQueryDataCells();
			if (oFF.XCollectionUtils.hasElements(queryDataCells))
			{
				cellOfInterest = queryDataCells.get(0);
			}
		}
	}
	return cellOfInterest;
};
oFF.DataCellController.prototype.getCmds = function()
{
	return this.getQueryManager().getConvenienceCommands();
};
oFF.DataCellController.prototype.getDecimalDefaultValue = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let decimalDefaultValue1 = oFF.isNull(measure1) ? null : measure1.getDefaultNumericScale();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		let measure2 = structureDimension.getDimensionMember(this.m_measure2);
		let decimalDefaultValue2 = measure2.getDefaultNumericScale();
		return decimalDefaultValue2;
	}
	return decimalDefaultValue1;
};
oFF.DataCellController.prototype.getDecimalSelections = function()
{
	let decimalSelections = oFF.XList.create();
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_UNDEFINED), "-1"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_0), "0"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_1), "1"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_2), "2"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_3), "3"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_4), "4"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_5), "5"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_6), "6"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_7), "7"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_8), "8"));
	decimalSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_9), "9"));
	return decimalSelections;
};
oFF.DataCellController.prototype.getDisaggregationModeDefaultValue = function()
{
	let cellOfInterest = this.getCellBasedOnMeasures();
	return oFF.notNull(cellOfInterest) ? cellOfInterest.getDefaultDisaggregationMode() : null;
};
oFF.DataCellController.prototype.getDisaggregationModeSelections = function()
{
	let disaggregationModeSelections = oFF.XList.create();
	disaggregationModeSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DM_NONE), "None"));
	disaggregationModeSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DM_ABS), "Absolute"));
	disaggregationModeSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DM_COPY), "Copy"));
	disaggregationModeSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DM_DELTA), "Delta"));
	return disaggregationModeSelections;
};
oFF.DataCellController.prototype.getQueryManager = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_queryManager);
};
oFF.DataCellController.prototype.getQueryModel = function()
{
	return this.getQueryManager().getQueryModel();
};
oFF.DataCellController.prototype.getResultCalculationSelections = function()
{
	let resultCalculationSelections = oFF.XList.create();
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_UNDEFINED), "00"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_SUM), "01"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_MAX), "02"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_MIN), "03"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_COUNT_ALL_VALUES), "04"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_COUNT_ALL_VALUES_NOT_ZERO), "05"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_AVG_ALL_VALUES), "06"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_AVG_ALL_VALUES_NOT_ZERO), "07"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_SD), "08"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_VARIANCE), "09"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_FV), "11"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_LV), "12"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_SUM_ROUNDED_VALUES), "13"));
	resultCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RC_SUPPRESS_RESULT), "14"));
	return resultCalculationSelections;
};
oFF.DataCellController.prototype.getScalingDefaultValue = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let scalingDefaultValue1 = oFF.isNull(measure1) ? null : measure1.getDefaultNumericShiftExt(true);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		let measure2 = structureDimension.getDimensionMember(this.m_measure2);
		let scalingDefaultValue2 = measure2.getDefaultNumericShiftExt(true);
		return scalingDefaultValue2;
	}
	return scalingDefaultValue1;
};
oFF.DataCellController.prototype.getScalingSelections = function()
{
	let scalingSelections = oFF.XList.create();
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1), "0"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10), "-1"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100), "-2"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000), "-3"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10000), "-4"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100000), "-5"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000000), "-6"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10000000), "-7"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100000000), "-8"));
	scalingSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000000000), "-9"));
	return scalingSelections;
};
oFF.DataCellController.prototype.getSingleValueCalculationSelections = function()
{
	let singleValueCalculationSelections = oFF.XList.create();
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_UNDEFINED), " "));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_SUM), "1"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_MAX), "2"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_MIN), "3"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_COUNT_ALL_VALUES), "4"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_COUNT_ALL_VALUES_NOT_ZERO), "5"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_AVG_ALL_VALUES), "6"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_AVG_ALL_VALUES_NOT_ZERO), "7"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_SUPPRESS_RESULT), "0"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_RANKEDLIST_OLYMPIC), "O"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_RANKEDLIST), "S"));
	singleValueCalculationSelections.add(oFF.XPairOfString.create(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SVC_NORMALIZATION_OF_OVERALL_RESULT), "G"));
	return singleValueCalculationSelections;
};
oFF.DataCellController.prototype.isDisaggregationModeDefaultAsMetadata = function()
{
	let cellOfInterest = this.getCellBasedOnMeasures();
	return oFF.notNull(cellOfInterest) ? cellOfInterest.isDisaggregationModeDefault() : true;
};
oFF.DataCellController.prototype.onPress = function(event)
{
	let control = event.getControl();
	if (control === this.m_okBtn)
	{
		if (this.changed())
		{
			this.m_listener.onDataCellOk();
		}
	}
	this.m_listener.onDataCellClose();
};
oFF.DataCellController.prototype.openDataCellPropertiesDialog = function(listener, queryManager, measure1, measure2, propsForSecondStructure)
{
	if (propsForSecondStructure && oFF.XStringUtils.isNullOrEmpty(measure2))
	{
		throw oFF.XException.createRuntimeException("measure2 needed when properties for 2nd Structure are to be displayed.");
	}
	this.m_listener = listener;
	this.m_queryManager = oFF.XWeakReferenceUtil.getWeakRef(queryManager);
	this.m_measure1 = measure1;
	this.m_measure2 = measure2;
	this.m_propsForSecondStructure = propsForSecondStructure;
	this.setupDisplay();
	this.populateModel();
	this.m_layout.setModel(this.m_model);
	this.setupDataCellDialog();
};
oFF.DataCellController.prototype.populateModel = function()
{
	let decimalSelections = this.getDecimalSelections();
	let scalingSelections = this.getScalingSelections();
	let resultCalculationSelections = this.getResultCalculationSelections();
	let singleValueCalculationSelections = this.getSingleValueCalculationSelections();
	let disaggregationModeSelections = this.getDisaggregationModeSelections();
	let decimalOnModel = this.determineDecimal();
	let scalingOnModel = this.determineScaling();
	let valueType = this.determineValueType();
	let disaggregationMode = this.determineDisaggregationMode();
	let resultCalculationOnModel = this.determineResultCalculation();
	let singleValueCalculationOnModel = this.determineSingleValueCalculation();
	this.m_model.setModelValues(decimalSelections, scalingSelections, resultCalculationSelections, singleValueCalculationSelections, decimalOnModel, scalingOnModel, resultCalculationOnModel, singleValueCalculationOnModel, valueType, disaggregationModeSelections, disaggregationMode);
	let decimalDefaultValue = this.getDecimalDefaultValue();
	this.m_model.setDecimalDefaultValue(decimalDefaultValue);
	let decimalDefaultAsMetadata = this.decimalDefaultAsMetadata();
	this.m_model.setDecimalDefaultAsMetadata(decimalDefaultAsMetadata);
	let scalingFactorDefaultValue = this.getScalingDefaultValue();
	this.m_model.setScalingDefaultValue(scalingFactorDefaultValue);
	let scalingFactorDefaultAsMetadata = this.scalingDefaultAsMetadata();
	this.m_model.setScalingDefaultAsMetadata(scalingFactorDefaultAsMetadata);
	let disaggregationModeDefaultValue = this.getDisaggregationModeDefaultValue();
	this.m_model.setDisaggregationModeDefaultvalue(disaggregationModeDefaultValue);
	let isDisaggregationModeDefaultAsMetadata = this.isDisaggregationModeDefaultAsMetadata();
	this.m_model.setDisaggregationModeDefaultAsMetadata(isDisaggregationModeDefaultAsMetadata);
};
oFF.DataCellController.prototype.releaseObject = function()
{
	this.m_listener = null;
	this.m_okBtn = oFF.XObjectExt.release(this.m_okBtn);
	this.m_closeBtn = oFF.XObjectExt.release(this.m_closeBtn);
	this.m_display = oFF.XObjectExt.release(this.m_display);
	this.m_context = null;
	this.m_queryManager = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.DataCellController.prototype.scalingDefaultAsMetadata = function()
{
	let measure1 = this.getCmds().getMeasure(this.m_measure1);
	let scalingDefaultAsMetadata1 = oFF.isNull(measure1) || measure1.isNumericShiftDefaultExt(true);
	let scalingDefaultAsMetadata2 = true;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2))
	{
		let structureDimension = this.getQueryModel().getNonMeasureDimension();
		let measure2 = structureDimension.getDimensionMember(this.m_measure2);
		scalingDefaultAsMetadata2 = measure2.isNumericShiftDefaultExt(true);
	}
	return scalingDefaultAsMetadata1 && scalingDefaultAsMetadata2;
};
oFF.DataCellController.prototype.setupController = function(context)
{
	this.m_context = context;
	this.m_model = oFF.DataCellModel.create();
	this.m_layout = oFF.DataCellLayout.create();
};
oFF.DataCellController.prototype.setupDataCellDialog = function()
{
	this.m_okBtn = this.m_display.addNewButton();
	this.m_okBtn.setText(oFF.DataCellDialogI18n.getLocalization().getText(oFF.XCommonI18n.OK)).setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okBtn.setName("OkBtn");
	this.m_okBtn.registerOnPress(this);
	this.m_closeBtn = this.m_display.addNewButton();
	this.m_closeBtn.setText(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_CLOSE));
	this.m_closeBtn.setName("CloseBtn");
	this.m_closeBtn.registerOnPress(this);
	this.m_layout.buildOlapDialogUi(this.m_display.getGenesis());
	this.m_display.open();
};
oFF.DataCellController.prototype.setupDisplay = function()
{
	this.m_display = this.m_context.getDisplayFactory().getInstance();
	this.m_display.setName("DataCellProperties");
	let structureElement = null;
	let measureDimension = this.getQueryModel().getMeasureDimension();
	let secondaryStructure = this.getQueryModel().getNonMeasureDimension();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure1) && oFF.notNull(measureDimension))
	{
		structureElement = measureDimension.getStructureMemberByAliasOrMember(this.m_measure1);
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_measure2) && oFF.notNull(secondaryStructure))
	{
		structureElement = secondaryStructure.getStructureMemberByAliasOrMember(this.m_measure2);
	}
	if (oFF.notNull(structureElement))
	{
		this.m_display.setTitle(oFF.XStringUtils.concatenate3(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SETTINGS_OF), " ", structureElement.getText()));
	}
	this.m_display.setWidth(oFF.UiCssLength.createExt(500, oFF.UiCssSizeUnit.PIXEL));
};

oFF.DataCellLayout = function() {};
oFF.DataCellLayout.prototype = new oFF.XObject();
oFF.DataCellLayout.prototype._ff_c = "DataCellLayout";

oFF.DataCellLayout.create = function()
{
	return new oFF.DataCellLayout();
};
oFF.DataCellLayout.prototype.m_dataCellModel = null;
oFF.DataCellLayout.prototype.m_decimalDefaultSwitch = null;
oFF.DataCellLayout.prototype.m_decimalDropdown = null;
oFF.DataCellLayout.prototype.m_disaggregationModeDefaultSwitch = null;
oFF.DataCellLayout.prototype.m_disaggregationModeDropdown = null;
oFF.DataCellLayout.prototype.m_flexLayout = null;
oFF.DataCellLayout.prototype.m_resetAllSwitch = null;
oFF.DataCellLayout.prototype.m_resultCalculationDropdown = null;
oFF.DataCellLayout.prototype.m_scalingDefaultSwitch = null;
oFF.DataCellLayout.prototype.m_scalingDropdown = null;
oFF.DataCellLayout.prototype.m_selectedDecimal = null;
oFF.DataCellLayout.prototype.m_selectedDisaggregationMode = null;
oFF.DataCellLayout.prototype.m_selectedScaling = null;
oFF.DataCellLayout.prototype.m_singleValueCalculationDropdown = null;
oFF.DataCellLayout.prototype.addBoldLabel = function(genesis, label)
{
	this.spaceHeight(this.m_flexLayout, genesis);
	let propertiesLabel = this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(label));
	propertiesLabel.setFontWeight(oFF.UiFontWeight.BOLD).setTextAlign(oFF.UiTextAlign.LEFT).setFontSize(oFF.UiCssLength.createExt(15, oFF.UiCssSizeUnit.PIXEL));
	propertiesLabel.setWidth(oFF.UiCssLength.create("100%"));
	this.m_flexLayout.addItem(propertiesLabel);
};
oFF.DataCellLayout.prototype.addDropDownFor = function(genesis, singleValueCalculationSelections, singleValueCalculationOnModel, dropdownName)
{
	let dropdown = genesis.newControl(oFF.UiType.DROPDOWN);
	dropdown.setName(dropdownName);
	dropdown.addAllItems(this.createDropdownElements(dropdown, singleValueCalculationSelections));
	dropdown.setSelectedName(singleValueCalculationOnModel);
	dropdown.setWidth(oFF.UiCssLength.create("35%"));
	dropdown.registerOnSelect(this);
	return dropdown;
};
oFF.DataCellLayout.prototype.addSwitch = function(genesis, name, on)
{
	let defaultAsMetadata = genesis.newControl(oFF.UiType.SWITCH);
	defaultAsMetadata.setName(name);
	defaultAsMetadata.setOnText(" ").setOffText(" ");
	defaultAsMetadata.setOn(on);
	defaultAsMetadata.setAlignSelf(oFF.UiFlexAlignSelf.START);
	defaultAsMetadata.registerOnChange(this);
	return defaultAsMetadata;
};
oFF.DataCellLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let root = this.buildTree(genesis);
	genesis.setRoot(root);
};
oFF.DataCellLayout.prototype.buildTree = function(genesis)
{
	this.m_flexLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_flexLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_flexLayout.setWidth(oFF.UiCssLength.create("100%"));
	this.m_flexLayout.setHeight(oFF.UiCssLength.create("100%"));
	this.m_flexLayout.setName("QueryCellDialogMainViewContainer");
	let defaultToMetadata = this.createRow(genesis);
	defaultToMetadata.addItem(genesis.newControl(oFF.UiType.SPACER).setWidth(oFF.UiCssLength.create("75%")));
	this.spaceWidth(defaultToMetadata, genesis);
	let defaultLabel = genesis.newControl(oFF.UiType.LABEL);
	defaultLabel.setName(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DEFAULT_TO_METATA));
	defaultLabel.setText(oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DEFAULT_TO_METATA));
	defaultLabel.setFontWeight(oFF.UiFontWeight.BOLD).setTextAlign(oFF.UiTextAlign.LEFT).setFontSize(oFF.UiCssLength.createExt(15, oFF.UiCssSizeUnit.PIXEL));
	defaultToMetadata.addItem(defaultLabel);
	this.m_flexLayout.addItem(defaultToMetadata);
	this.addBoldLabel(genesis, oFF.DataCellDialogI18n.I18N_DCD_NUMBER_FORMAT);
	let scalingLayout = this.createRow(genesis);
	scalingLayout.addItem(this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SCALING)));
	this.spaceWidth(scalingLayout, genesis);
	this.m_scalingDropdown = this.addDropDownFor(genesis, this.m_dataCellModel.getScalingSelections(), this.m_dataCellModel.getScaling(), "scalingDropDown");
	scalingLayout.addItem(this.m_scalingDropdown);
	this.m_scalingDefaultSwitch = this.addSwitch(genesis, "scalingDefaultAsMetadata", this.m_dataCellModel.getScalingDefaultAsMetadata());
	scalingLayout.addItem(this.m_scalingDefaultSwitch);
	this.m_flexLayout.addItem(scalingLayout);
	let decimalLayout = this.createRow(genesis);
	decimalLayout.addItem(this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL)));
	this.spaceWidth(decimalLayout, genesis);
	this.m_decimalDropdown = this.addDropDownFor(genesis, this.m_dataCellModel.getDecimalSelections(), this.m_dataCellModel.getDecimal(), "decimalDropDown");
	decimalLayout.addItem(this.m_decimalDropdown);
	this.m_decimalDefaultSwitch = this.addSwitch(genesis, "decimalDefaultAsMetadata", this.m_dataCellModel.getDecimalDefaultAsMetadata());
	decimalLayout.addItem(this.m_decimalDefaultSwitch);
	this.m_flexLayout.addItem(decimalLayout);
	this.addBoldLabel(genesis, oFF.DataCellDialogI18n.I18N_DCD_PROPERTIES);
	let valueTypeLayout = this.createRow(genesis);
	valueTypeLayout.addItem(this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_VALUETYPE)));
	this.spaceWidth(valueTypeLayout, genesis);
	valueTypeLayout.addItem(this.createTextBox(genesis, this.m_dataCellModel.getValueType(), false));
	this.m_flexLayout.addItem(valueTypeLayout);
	let disaggregationModeLayout = this.createRow(genesis);
	disaggregationModeLayout.addItem(this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_DISAGGREGATION_MODE)));
	this.spaceWidth(disaggregationModeLayout, genesis);
	let disaggregationModelOnModel = this.m_dataCellModel.getDisaggregationModeOnModel() !== null ? this.m_dataCellModel.getDisaggregationModeOnModel().getName() : null;
	this.m_disaggregationModeDropdown = this.addDropDownFor(genesis, this.m_dataCellModel.getDisaggregationModeSelections(), disaggregationModelOnModel, "diaggregationModeDropDown");
	disaggregationModeLayout.addItem(this.m_disaggregationModeDropdown);
	this.m_disaggregationModeDefaultSwitch = this.addSwitch(genesis, "disaggregationModeDefaultAsMetadata", this.m_dataCellModel.getDisaggregationModeDefaultAsMetadata());
	disaggregationModeLayout.addItem(this.m_disaggregationModeDefaultSwitch);
	this.m_flexLayout.addItem(disaggregationModeLayout);
	this.addBoldLabel(genesis, oFF.DataCellDialogI18n.I18N_DCD_CALCULATIONS);
	let resultCalculationLayout = this.createRow(genesis);
	resultCalculationLayout.addItem(this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RESULT_CALCULATION)));
	this.spaceWidth(resultCalculationLayout, genesis);
	this.m_resultCalculationDropdown = this.addDropDownFor(genesis, this.m_dataCellModel.getResultCalculationSelections(), this.m_dataCellModel.getResultCalculationOnModel(), "resultCalculationDropDown");
	this.m_resultCalculationDropdown.setEnabled(false);
	resultCalculationLayout.addItem(this.m_resultCalculationDropdown);
	this.m_flexLayout.addItem(resultCalculationLayout);
	let singleValueCalculationLayout = this.createRow(genesis);
	singleValueCalculationLayout.addItem(this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_SINGLE_VALUE_CALCULATION)));
	this.spaceWidth(singleValueCalculationLayout, genesis);
	this.m_singleValueCalculationDropdown = this.addDropDownFor(genesis, this.m_dataCellModel.getSingleValueCalculationSelections(), this.m_dataCellModel.getSingleValueCalculationOnModel(), "singleValueCalculationLabel");
	this.m_singleValueCalculationDropdown.setEnabled(false);
	singleValueCalculationLayout.addItem(this.m_singleValueCalculationDropdown);
	this.m_flexLayout.addItem(singleValueCalculationLayout);
	this.spaceHeight(this.m_flexLayout, genesis);
	this.spaceHeight(this.m_flexLayout, genesis);
	let resetAllSettings = this.createRow(genesis);
	let createLabel = this.createLabel(genesis, oFF.DataCellDialogI18n.getLocalization().getText(oFF.DataCellDialogI18n.I18N_DCD_RESET_ALL));
	createLabel.setFontWeight(oFF.UiFontWeight.BOLD).setTextAlign(oFF.UiTextAlign.RIGHT).setFontSize(oFF.UiCssLength.createExt(15, oFF.UiCssSizeUnit.PIXEL));
	createLabel.setWidth(oFF.UiCssLength.create("75%"));
	resetAllSettings.addItem(createLabel);
	this.spaceWidth(resetAllSettings, genesis);
	let reset = this.m_dataCellModel.getDecimalDefaultAsMetadata() && this.m_dataCellModel.getScalingDefaultAsMetadata() && this.m_dataCellModel.getDisaggregationModeDefaultAsMetadata();
	this.m_resetAllSwitch = this.addSwitch(genesis, "resetAllAsMetadata", reset);
	resetAllSettings.addItem(this.m_resetAllSwitch);
	this.m_flexLayout.addItem(resetAllSettings);
	this.m_selectedDecimal = this.m_dataCellModel.getDecimal();
	this.m_selectedScaling = this.m_dataCellModel.getScaling();
	this.m_selectedDisaggregationMode = this.m_dataCellModel.getDisaggregationModeOnModel();
	return this.m_flexLayout;
};
oFF.DataCellLayout.prototype.createDropdownElements = function(dropdown, dropdownValues)
{
	let items = oFF.XList.create();
	let size = dropdownValues.size();
	for (let i = 0; i < size; i++)
	{
		let presentation = dropdownValues.get(i);
		let text = presentation.getFirstString();
		let name = presentation.getSecondString();
		let dropdownItem = dropdown.newItem();
		dropdownItem.setName(name);
		dropdownItem.setText(text);
		items.add(dropdownItem);
	}
	return items;
};
oFF.DataCellLayout.prototype.createLabel = function(genesis, labelText)
{
	let label = genesis.newControl(oFF.UiType.LABEL);
	label.setName(labelText);
	label.setText(labelText);
	label.setWidth(oFF.UiCssLength.create("40%"));
	label.setTextAlign(oFF.UiTextAlign.RIGHT);
	return label;
};
oFF.DataCellLayout.prototype.createRow = function(genesis)
{
	let rowLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	rowLayout.setDirection(oFF.UiFlexDirection.ROW);
	rowLayout.setWidth(oFF.UiCssLength.create("100%"));
	rowLayout.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	return rowLayout;
};
oFF.DataCellLayout.prototype.createTextBox = function(genesis, boxText, editable)
{
	let textBox = genesis.newControl(oFF.UiType.INPUT);
	textBox.setName(boxText);
	textBox.setValue(boxText);
	textBox.setEditable(editable);
	textBox.setWidth(oFF.UiCssLength.create("35%"));
	return textBox;
};
oFF.DataCellLayout.prototype.getLayout = function()
{
	return this.m_flexLayout;
};
oFF.DataCellLayout.prototype.getSelectedDecimal = function()
{
	return this.m_selectedDecimal;
};
oFF.DataCellLayout.prototype.getSelectedDisaggregationMode = function()
{
	return this.m_selectedDisaggregationMode;
};
oFF.DataCellLayout.prototype.getSelectedScaling = function()
{
	return this.m_selectedScaling;
};
oFF.DataCellLayout.prototype.onChange = function(event)
{
	let switchControl = event.getControl();
	if (switchControl.isOn())
	{
		let controlName = event.getControl().getName();
		switch (controlName)
		{
			case "decimalDefaultAsMetadata":
				this.resetDecimal();
				break;

			case "scalingDefaultAsMetadata":
				this.resetScaling();
				break;

			case "disaggregationModeDefaultAsMetadata":
				this.resetDisaggregationMode();
				break;

			default:
				this.resetScaling();
				this.resetDecimal();
				this.resetDisaggregationMode();
				this.m_decimalDefaultSwitch.setOn(true);
				this.m_scalingDefaultSwitch.setOn(true);
				this.m_disaggregationModeDefaultSwitch.setOn(true);
				break;
		}
	}
};
oFF.DataCellLayout.prototype.onSelect = function(event)
{
	let controlName = event.getControl().getName();
	if (oFF.XString.isEqual(controlName, this.m_decimalDropdown.getName()))
	{
		if (!oFF.XString.isEqual(this.m_selectedDecimal, this.m_decimalDropdown.getSelectedItem().getName()))
		{
			this.m_decimalDefaultSwitch.setOn(false);
			this.m_dataCellModel.setDecimalDefaultAsMetadata(false);
			this.m_selectedDecimal = this.m_decimalDropdown.getSelectedItem().getName();
		}
	}
	else if (oFF.XString.isEqual(controlName, this.m_scalingDropdown.getName()))
	{
		if (!oFF.XString.isEqual(this.m_selectedScaling, this.m_scalingDropdown.getSelectedItem().getName()))
		{
			this.m_scalingDefaultSwitch.setOn(false);
			this.m_dataCellModel.setScalingDefaultAsMetadata(false);
			this.m_selectedScaling = this.m_scalingDropdown.getSelectedItem().getName();
		}
	}
	else if (oFF.XString.isEqual(controlName, this.m_disaggregationModeDropdown.getName()))
	{
		let selectedDisaggregationMode = oFF.DisaggregationMode.lookup(this.m_disaggregationModeDropdown.getSelectedItem().getName());
		if (this.m_selectedDisaggregationMode !== selectedDisaggregationMode)
		{
			this.m_disaggregationModeDefaultSwitch.setOn(false);
			this.m_dataCellModel.setDisaggregationModeDefaultAsMetadata(false);
			this.m_selectedDisaggregationMode = selectedDisaggregationMode;
		}
	}
	this.m_resetAllSwitch.setOn(this.m_decimalDefaultSwitch.isOn() && this.m_scalingDefaultSwitch.isOn() && this.m_disaggregationModeDefaultSwitch.isOn());
};
oFF.DataCellLayout.prototype.resetDecimal = function()
{
	this.m_selectedDecimal = this.m_dataCellModel.getDecimalDefaultValue();
	this.m_decimalDropdown.setSelectedName(this.m_selectedDecimal);
	this.m_dataCellModel.setDecimalDefaultAsMetadata(true);
};
oFF.DataCellLayout.prototype.resetDisaggregationMode = function()
{
	this.m_selectedDisaggregationMode = this.m_dataCellModel.getDisaggregationModeDefaultvalue();
	this.m_disaggregationModeDropdown.setSelectedName(this.m_selectedDisaggregationMode.getName());
	this.m_dataCellModel.setDisaggregationModeDefaultAsMetadata(true);
};
oFF.DataCellLayout.prototype.resetScaling = function()
{
	this.m_selectedScaling = this.m_dataCellModel.getScalingDefaultValue();
	this.m_scalingDropdown.setSelectedName(this.m_selectedScaling);
	this.m_dataCellModel.setScalingDefaultAsMetadata(true);
};
oFF.DataCellLayout.prototype.setModel = function(dataCellModel)
{
	this.m_dataCellModel = dataCellModel;
};
oFF.DataCellLayout.prototype.spaceHeight = function(layout, genesis)
{
	layout.addItem(genesis.newControl(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.create("10px")));
};
oFF.DataCellLayout.prototype.spaceWidth = function(layout, genesis)
{
	layout.addItem(genesis.newControl(oFF.UiType.SPACER).setWidth(oFF.UiCssLength.create("10px")));
};

oFF.FdItem = function() {};
oFF.FdItem.prototype = new oFF.XObject();
oFF.FdItem.prototype._ff_c = "FdItem";

oFF.FdItem.FD_ITEM_IDENTIFIER = "FdItemIdentifier";
oFF.FdItem.prototype.m_comparisonOperator = null;
oFF.FdItem.prototype.m_hierarchyName = null;
oFF.FdItem.prototype.m_properties = null;
oFF.FdItem.prototype.addProperties = function(properties)
{
	if (oFF.notNull(properties))
	{
		this.m_properties.putAll(properties);
	}
};
oFF.FdItem.prototype.getChildren = function()
{
	return null;
};
oFF.FdItem.prototype.getComparisonOperator = function()
{
	let comparisonOperator = this.getFdComparisonOperator();
	return oFF.notNull(comparisonOperator) ? comparisonOperator.getOriginOperator() : null;
};
oFF.FdItem.prototype.getDisplayKeyFormatted = function()
{
	return this.getDisplayKey();
};
oFF.FdItem.prototype.getFdComparisonOperator = function()
{
	return oFF.notNull(this.m_comparisonOperator) ? this.m_comparisonOperator : oFF.FdComparisonOperator.EQUAL;
};
oFF.FdItem.prototype.getFormattedValueByPresentation = function(presentation)
{
	if (oFF.isNull(presentation))
	{
		return null;
	}
	if (this.isNull())
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NULL);
	}
	let value = presentation.isKey() ? this.getDisplayKey() : this.getText();
	if (oFF.XString.isEqual(value, ""))
	{
		if (!presentation.isKey() && oFF.XStringUtils.isNotNullAndNotEmpty(this.getDisplayKey()))
		{
			return this.getDisplayKey();
		}
		else
		{
			return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NO_VALUE);
		}
	}
	return value;
};
oFF.FdItem.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.FdItem.prototype.getHighItem = function()
{
	return this;
};
oFF.FdItem.prototype.getLowItem = function()
{
	return this;
};
oFF.FdItem.prototype.getProperties = function()
{
	if (oFF.isNull(this.m_properties))
	{
		this.m_properties = oFF.XProperties.create();
		this.m_properties.putBoolean(oFF.FdItem.FD_ITEM_IDENTIFIER, true);
	}
	return this.m_properties;
};
oFF.FdItem.prototype.getTextFormatted = function()
{
	return this.getText();
};
oFF.FdItem.prototype.hasChildren = function()
{
	return false;
};
oFF.FdItem.prototype.isComparisonOperatorEqual = function(otherItem)
{
	return this.getFdComparisonOperator() === otherItem.getFdComparisonOperator() || (this.getFdComparisonOperator().isEqualOperator() && otherItem.getFdComparisonOperator().isEqualOperator());
};
oFF.FdItem.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	return this.isComparisonOperatorEqual(otherItem) && oFF.XString.isEqual(this.getHierarchyName(), otherItem.getHierarchyName()) && this.isNull() === otherItem.isNull();
};
oFF.FdItem.prototype.isExcluded = function()
{
	return !this.getFdComparisonOperator().isIncluding();
};
oFF.FdItem.prototype.isRootNode = function()
{
	return false;
};
oFF.FdItem.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_comparisonOperator = null;
	this.m_hierarchyName = null;
	this.m_properties = oFF.XObjectExt.release(this.m_properties);
};
oFF.FdItem.prototype.setComparisonOperator = function(operator)
{
	let fdComparisonOperator = oFF.FdComparisonOperator.getByOriginalOperator(operator);
	if (oFF.notNull(fdComparisonOperator) || oFF.isNull(operator))
	{
		this.m_comparisonOperator = fdComparisonOperator;
	}
};
oFF.FdItem.prototype.setExcluded = function(excluded)
{
	this.m_comparisonOperator = this.getFdComparisonOperator().getWithExcludedState(excluded);
};
oFF.FdItem.prototype.setFdComparisonOperator = function(operator)
{
	this.m_comparisonOperator = operator;
};
oFF.FdItem.prototype.setHierarchyName = function(hierarchyName)
{
	this.m_hierarchyName = hierarchyName;
};
oFF.FdItem.prototype.toString = function()
{
	return this.getKey();
};

oFF.FdFunctionalValuesView = function() {};
oFF.FdFunctionalValuesView.prototype = new oFF.FdAbstractView();
oFF.FdFunctionalValuesView.prototype._ff_c = "FdFunctionalValuesView";

oFF.FdFunctionalValuesView.createView = function(controller, model)
{
	let fdView = new oFF.FdFunctionalValuesView();
	fdView.setupView(controller, model);
	return fdView;
};
oFF.FdFunctionalValuesView.prototype.m_layout = null;
oFF.FdFunctionalValuesView.prototype.buildOlapDialogUi = function(genesis, initialContentWidth, initialDialogWidth)
{
	this.m_layout = oFF.FdFunctionalValuesViewLayout.createLayout();
	this.m_layout.buildOlapDialogUi(genesis);
};
oFF.FdFunctionalValuesView.prototype.getCurrentViewType = function()
{
	return oFF.FilterDialogViewType.FUNCTIONAL_VALUES;
};
oFF.FdFunctionalValuesView.prototype.getInitialFocusControl = function()
{
	return null;
};
oFF.FdFunctionalValuesView.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdFunctionalValuesView.prototype.onResize = function(contentWidth, dialogWidth)
{
	this.m_layout.onResize(contentWidth, dialogWidth);
};
oFF.FdFunctionalValuesView.prototype.onSelectionChange = function(selection) {};
oFF.FdFunctionalValuesView.prototype.publishAvailablePresentations = function() {};
oFF.FdFunctionalValuesView.prototype.publishMembersList = function(membersList, messages) {};
oFF.FdFunctionalValuesView.prototype.publishPresentations = function() {};
oFF.FdFunctionalValuesView.prototype.releaseObject = function()
{
	oFF.FdAbstractView.prototype.releaseObject.call( this );
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
};

oFF.FdFunctionalValuesViewLayout = function() {};
oFF.FdFunctionalValuesViewLayout.prototype = new oFF.XObject();
oFF.FdFunctionalValuesViewLayout.prototype._ff_c = "FdFunctionalValuesViewLayout";

oFF.FdFunctionalValuesViewLayout.createLayout = function()
{
	return new oFF.FdFunctionalValuesViewLayout();
};
oFF.FdFunctionalValuesViewLayout.prototype.m_root = null;
oFF.FdFunctionalValuesViewLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.setName("FilterDialogFunctionalValuesView");
};
oFF.FdFunctionalValuesViewLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdFunctionalValuesViewLayout.prototype.onResize = function(contentWidth, dialogWidth) {};
oFF.FdFunctionalValuesViewLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_root = oFF.XObjectExt.release(this.m_root);
};

oFF.FdRangesUnsupportedView = function() {};
oFF.FdRangesUnsupportedView.prototype = new oFF.FdAbstractView();
oFF.FdRangesUnsupportedView.prototype._ff_c = "FdRangesUnsupportedView";

oFF.FdRangesUnsupportedView.create = function(controller, model)
{
	let view = new oFF.FdRangesUnsupportedView();
	view.setupView(controller, model);
	view.m_layout = oFF.FdRangesUnsupportedViewLayout.create();
	return view;
};
oFF.FdRangesUnsupportedView.prototype.m_layout = null;
oFF.FdRangesUnsupportedView.prototype.buildOlapDialogUi = function(genesis, initialContentWidth, initialDialogWidth)
{
	this.m_layout.buildOlapDialogUi(genesis);
	this.m_layout.onResize(initialContentWidth, initialDialogWidth);
	this.m_layout.getClearHierarchyBtn().registerOnPress(this);
};
oFF.FdRangesUnsupportedView.prototype.getCurrentViewType = function()
{
	return oFF.FilterDialogViewType.RANGE;
};
oFF.FdRangesUnsupportedView.prototype.getInitialFocusControl = function()
{
	return this.m_layout.getClearHierarchyBtn();
};
oFF.FdRangesUnsupportedView.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdRangesUnsupportedView.prototype.onPress = function(event)
{
	this.m_model.clearSelection();
	oFF.FdLayoutUtils.announceSelectionCleared();
};
oFF.FdRangesUnsupportedView.prototype.onResize = function(contentWidth, dialogWidth)
{
	this.m_layout.onResize(contentWidth, dialogWidth);
};
oFF.FdRangesUnsupportedView.prototype.onSelectionChange = function(selection) {};
oFF.FdRangesUnsupportedView.prototype.publishAvailablePresentations = function() {};
oFF.FdRangesUnsupportedView.prototype.publishMembersList = function(membersList, messages) {};
oFF.FdRangesUnsupportedView.prototype.publishPresentations = function() {};
oFF.FdRangesUnsupportedView.prototype.releaseObject = function()
{
	oFF.FdAbstractView.prototype.releaseObject.call( this );
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
};

oFF.FdRangesUnsupportedViewLayout = function() {};
oFF.FdRangesUnsupportedViewLayout.prototype = new oFF.XObject();
oFF.FdRangesUnsupportedViewLayout.prototype._ff_c = "FdRangesUnsupportedViewLayout";

oFF.FdRangesUnsupportedViewLayout.create = function()
{
	return new oFF.FdRangesUnsupportedViewLayout();
};
oFF.FdRangesUnsupportedViewLayout.prototype.m_clearSelectionBtn = null;
oFF.FdRangesUnsupportedViewLayout.prototype.m_root = null;
oFF.FdRangesUnsupportedViewLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	let message = this.m_root.addNewItemOfType(oFF.UiType.ILLUSTRATED_MESSAGE);
	message.setName("FilterDialogRangesNotSupportedMessage");
	message.setTitle(localization.getText(oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT1));
	message.setDescription(localization.getText(oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT2));
	message.setIllustrationSize(oFF.UiIllustratedMessageSize.DOT);
	message.setIllustrationType(oFF.UiIllustratedMessageType.ERROR_SCREEN);
	this.m_clearSelectionBtn = oFF.FdLayoutUtils.addClearSelectionButton(this.m_root, "FilterDialogRangeClearSelectionBtn");
	this.m_clearSelectionBtn.setButtonType(oFF.UiButtonType.DEFAULT);
	let label = this.m_root.addNewItemOfType(oFF.UiType.LABEL);
	label.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT3));
	label.setMargin(oFF.UiCssBoxEdges.create("0.5rem 0 0 0"));
};
oFF.FdRangesUnsupportedViewLayout.prototype.getClearHierarchyBtn = function()
{
	return this.m_clearSelectionBtn;
};
oFF.FdRangesUnsupportedViewLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdRangesUnsupportedViewLayout.prototype.onResize = function(contentWidth, dialogWidth) {};
oFF.FdRangesUnsupportedViewLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_root = oFF.XObjectExt.release(this.m_root);
};

oFF.FdRangesView = function() {};
oFF.FdRangesView.prototype = new oFF.FdAbstractView();
oFF.FdRangesView.prototype._ff_c = "FdRangesView";

oFF.FdRangesView.createView = function(controller, model)
{
	let fdView = new oFF.FdRangesView();
	fdView.setupView(controller, model);
	return fdView;
};
oFF.FdRangesView.prototype.m_genesis = null;
oFF.FdRangesView.prototype.m_layout = null;
oFF.FdRangesView.prototype.m_ranges = null;
oFF.FdRangesView.prototype.m_selectionContainer = null;
oFF.FdRangesView.prototype.addNewRange = function(item, focus, addToModel)
{
	if (!this.isValidItem(item))
	{
		return;
	}
	let range = this.createRange(item);
	this.m_ranges.add(range);
	range.buildOlapDialogUi(this.m_genesis);
	range.registerOnDelete(() => {
		this.deleteRange(range, true);
	});
	range.registerOnChange((isLiveChange, newItem) => {
		this.updateModel(range, isLiveChange, newItem);
	});
	this.m_layout.addRange(range.getLayout());
	if (addToModel && !range.isEmpty() && range.getItem() !== null)
	{
		this.addRangeToSelection(range);
	}
	if (focus)
	{
		oFF.XCollectionUtils.forEach(this.m_ranges, (r) => {
			r.setExpanded(r === range);
		});
		range.focus();
	}
};
oFF.FdRangesView.prototype.addRangeToSelection = function(range)
{
	this.clearHierarchy();
	this.m_model.unregisterOnSelectionChange(this);
	if (this.m_model.getSelectionMode() === oFF.UiTableSelectionMode.SINGLE && this.m_model.getSelectedItems().hasElements())
	{
		this.m_model.setSelectedItemAt(0, range.getItem());
	}
	else
	{
		this.m_model.addToSelection(range.getItem());
	}
	this.m_model.registerOnSelectionChange(this);
};
oFF.FdRangesView.prototype.buildOlapDialogUi = function(genesis, initialContentWidth, initialDialogWidth)
{
	this.m_genesis = genesis;
	this.m_layout = this.createLayout(() => {
		if (oFF.isNull(this.m_selectionContainer))
		{
			this.m_selectionContainer = oFF.FdComponentSelectionContainer.create(this.m_model, this, true);
			this.m_selectionContainer.buildOlapDialogUi(this.m_genesis);
		}
		return this.m_selectionContainer.getLayout();
	});
	this.m_layout.buildOlapDialogUi(genesis);
	this.m_layout.getAddRangeBtn().registerOnPress(this);
	this.m_layout.setAddRangeBtnVisible(this.m_model.getSelectionMode() === oFF.UiTableSelectionMode.MULTI_TOGGLE);
	let rangeModel = this.m_model.getRangeModel();
	this.m_layout.setRangeInfo(rangeModel.getMin(), rangeModel.getMax(), rangeModel.getDateRangeGranularities());
	this.m_layout.onResize(initialContentWidth, initialDialogWidth);
	this.m_layout.getRoot().setBusy(true);
};
oFF.FdRangesView.prototype.clearHierarchy = function()
{
	if (this.m_model.getHierarchyModel().isHierarchical() && !this.m_model.isFeatureEnabled(oFF.FdFeature.RANGES_IN_HIERARCHY))
	{
		this.m_model.unregisterOnSelectionChange(this);
		this.m_model.getHierarchyModel().changeHierarchy(null);
		this.m_model.registerOnSelectionChange(this);
	}
};
oFF.FdRangesView.prototype.createLayout = function(selectionContainerSupplier)
{
	return oFF.FdRangesViewLayout.createLayout(this.m_model, selectionContainerSupplier);
};
oFF.FdRangesView.prototype.createRange = function(item)
{
	return oFF.FdComponentRange.create(this.m_model, item);
};
oFF.FdRangesView.prototype.deleteRange = function(range, addNewRangeIfEmpty)
{
	this.m_model.unregisterOnSelectionChange(this);
	this.removeRangeFromModel(range);
	this.m_ranges.removeElement(range);
	this.m_layout.removeRange(range.getLayout());
	oFF.XObjectExt.release(range);
	this.onRangesChanged(addNewRangeIfEmpty);
	this.m_model.registerOnSelectionChange(this);
};
oFF.FdRangesView.prototype.getCurrentViewType = function()
{
	return oFF.FilterDialogViewType.RANGE;
};
oFF.FdRangesView.prototype.getInitialFocusControl = function()
{
	return this.m_ranges.hasElements() ? this.m_ranges.get(0).getFocusControl() : null;
};
oFF.FdRangesView.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdRangesView.prototype.isValidItem = function(item)
{
	return oFF.isNull(item) || item.getType() === oFF.FilterDialogValueType.RANGE || item.getType() === oFF.FilterDialogValueType.BASIC || item.getType() === oFF.FilterDialogValueType.VALUEHELP;
};
oFF.FdRangesView.prototype.onNewClipboardSelection = function(items, includedItems, excludedItems)
{
	this.m_layout.getRoot().setBusy(true);
	oFF.FdAbstractView.prototype.onNewClipboardSelection.call( this , items, includedItems, excludedItems);
};
oFF.FdRangesView.prototype.onPress = function(event)
{
	if (event.getControl() === this.m_layout.getAddRangeBtn())
	{
		this.addNewRange(null, true, true);
		this.onRangesChanged(false);
	}
};
oFF.FdRangesView.prototype.onRangesChanged = function(addNewRangeIfEmpty)
{
	if (addNewRangeIfEmpty && this.m_ranges.isEmpty())
	{
		this.addNewRange(null, true, true);
	}
	let hasSeveralRanges = this.m_ranges.size() > 1;
	for (let i = 0; i < this.m_ranges.size(); i++)
	{
		this.m_ranges.get(i).onRangesChanged(hasSeveralRanges, i);
	}
	this.updateAddRangeButtonState();
};
oFF.FdRangesView.prototype.onResize = function(contentWidth, dialogWidth)
{
	this.m_layout.onResize(contentWidth, dialogWidth);
};
oFF.FdRangesView.prototype.onSelectionChange = function(selection)
{
	let expandedItems = oFF.XStream.of(this.m_ranges).filter((range) => {
		return range.isExpanded();
	}).map((expandedRange) => {
		return expandedRange.getItem();
	}).collect(oFF.XStreamCollector.toList());
	this.publishRanges();
	if (this.m_ranges.size() === 1 && this.m_ranges.get(0).isEmpty())
	{
		this.m_ranges.get(0).setExpanded(true);
	}
	else
	{
		oFF.XCollectionUtils.forEach(this.m_ranges, (newRange) => {
			newRange.setExpanded(expandedItems.contains(newRange.getItem()));
		});
	}
	this.m_layout.getRoot().setBusy(false);
};
oFF.FdRangesView.prototype.publishAvailablePresentations = function() {};
oFF.FdRangesView.prototype.publishMembersList = function(membersList, messages)
{
	this.publishRanges();
	this.m_layout.getRoot().setBusy(false);
};
oFF.FdRangesView.prototype.publishPresentations = function() {};
oFF.FdRangesView.prototype.publishRanges = function()
{
	this.m_ranges.clear();
	this.m_layout.clearRanges();
	if (this.m_model.getSelectedItems().hasElements())
	{
		let showEqualOperator = this.m_model.isFeatureEnabled(oFF.FdFeature.EQUAL_IN_RANGE_VIEW);
		let showNotEqualOperator = this.m_model.isFeatureEnabled(oFF.FdFeature.NOT_EQUAL_IN_RANGE_VIEW);
		let showNullOperator = this.m_model.isFeatureEnabled(oFF.FdFeature.NULL_IN_RANGE_VIEW);
		let items;
		if (!oFF.FdLayoutUtils.isMultiView(this.m_model) || showEqualOperator && showNullOperator)
		{
			items = this.m_model.getSelectedItems().createListCopy();
		}
		else
		{
			items = oFF.XCollectionUtils.filter(this.m_model.getSelectedItems(), (selectedItem) => {
				if (selectedItem.isNull())
				{
					return showNullOperator;
				}
				let operator = selectedItem.getFdComparisonOperator();
				return !operator.isEqualOperator() || operator === oFF.FdComparisonOperator.EQUAL && showEqualOperator || operator === oFF.FdComparisonOperator.NOT_EQUAL && showNotEqualOperator;
			});
		}
		oFF.XCollectionUtils.forEach(items, (item) => {
			this.addNewRange(item, false, false);
		});
		if (this.m_ranges.hasElements())
		{
			this.m_ranges.get(0).setExpanded(true);
		}
	}
	this.onRangesChanged(true);
};
oFF.FdRangesView.prototype.registerOnSelectionChange = function()
{
	this.m_model.registerOnSelectionChange(this);
};
oFF.FdRangesView.prototype.releaseObject = function()
{
	oFF.FdAbstractView.prototype.releaseObject.call( this );
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
	this.m_genesis = null;
	this.m_ranges = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_ranges);
	this.m_selectionContainer = oFF.XObjectExt.release(this.m_selectionContainer);
};
oFF.FdRangesView.prototype.removeRangeFromModel = function(range)
{
	let index = 0;
	let selectedItems = this.m_model.getSelectedItems();
	while (index < selectedItems.size() && selectedItems.get(index) !== range.getItem())
	{
		index++;
	}
	this.m_model.removeSelectedItemAt(index);
};
oFF.FdRangesView.prototype.setupView = function(controller, model)
{
	oFF.FdAbstractView.prototype.setupView.call( this , controller, model);
	this.m_ranges = oFF.XList.create();
};
oFF.FdRangesView.prototype.updateAddRangeButtonState = function()
{
	let invalidRange = oFF.XCollectionUtils.findFirst(this.m_ranges, (range) => {
		return !range.validate(false);
	});
	if (oFF.notNull(invalidRange))
	{
		this.m_layout.getAddRangeBtn().setEnabled(false);
		this.m_layout.getAddRangeBtn().setTooltip(oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW_DISABLED_TOOLTIP, oFF.XInteger.convertToString(this.m_ranges.getIndex(invalidRange) + 1)));
	}
	else
	{
		this.m_layout.getAddRangeBtn().setEnabled(true);
		this.m_layout.getAddRangeBtn().setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW));
	}
};
oFF.FdRangesView.prototype.updateModel = function(range, isLiveChange, newItem)
{
	this.updateAddRangeButtonState();
	if (isLiveChange.getBoolean())
	{
		return;
	}
	this.m_model.unregisterOnSelectionChange(this);
	let rangeItem = range.getItem();
	if (rangeItem !== newItem)
	{
		let index = 0;
		let selectedItems = this.m_model.getSelectedItems();
		while (index < selectedItems.size() && selectedItems.get(index) !== rangeItem)
		{
			index++;
		}
		this.m_model.setSelectedItemAt(index, newItem);
	}
	else if (range.isEmpty() && this.m_ranges.size() <= 1)
	{
		this.removeRangeFromModel(range);
	}
	else if (!range.isEmpty() && !oFF.XCollectionUtils.contains(this.m_model.getSelectedItems(), (selectedItem) => {
		return selectedItem === rangeItem;
	}))
	{
		this.addRangeToSelection(range);
	}
	else
	{
		this.m_model.updateSelection();
	}
	this.m_model.registerOnSelectionChange(this);
};
oFF.FdRangesView.prototype.validate = function(selectionRequired)
{
	let invalidRanges = oFF.XStream.of(this.m_ranges).filter((range) => {
		return !range.isEmpty() && !range.validate(true);
	}).collect(oFF.XStreamCollector.toList());
	if (invalidRanges.hasElements())
	{
		oFF.XCollectionUtils.forEach(this.m_ranges, (r) => {
			r.setExpanded(invalidRanges.contains(r));
		});
		return false;
	}
	oFF.XStream.of(this.m_ranges.createListCopy()).filter((range) => {
		return range.isEmpty();
	}).forEach((emptyRange) => {
		this.deleteRange(emptyRange, false);
	});
	if (selectionRequired && !oFF.XCollectionUtils.hasElements(this.m_model.getSelectedItems()))
	{
		this.onRangesChanged(true);
		return false;
	}
	return true;
};

oFF.FdRangesViewLayout = function() {};
oFF.FdRangesViewLayout.prototype = new oFF.XObject();
oFF.FdRangesViewLayout.prototype._ff_c = "FdRangesViewLayout";

oFF.FdRangesViewLayout.createLayout = function(model, selectionContainer)
{
	let layout = new oFF.FdRangesViewLayout();
	layout.setupRangesLayout(model, selectionContainer);
	return layout;
};
oFF.FdRangesViewLayout.prototype.m_addRangeBtn = null;
oFF.FdRangesViewLayout.prototype.m_addRangeBtnContainer = null;
oFF.FdRangesViewLayout.prototype.m_genesis = null;
oFF.FdRangesViewLayout.prototype.m_info = null;
oFF.FdRangesViewLayout.prototype.m_infoContainer = null;
oFF.FdRangesViewLayout.prototype.m_model = null;
oFF.FdRangesViewLayout.prototype.m_rangeLayouts = null;
oFF.FdRangesViewLayout.prototype.m_ranges = null;
oFF.FdRangesViewLayout.prototype.m_root = null;
oFF.FdRangesViewLayout.prototype.m_selectionContainer = null;
oFF.FdRangesViewLayout.prototype.m_selectionContainerToggleBtn = null;
oFF.FdRangesViewLayout.prototype.m_size = null;
oFF.FdRangesViewLayout.prototype.addContent = function(root)
{
	this.addHeader(root);
	this.m_ranges = root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_ranges.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_ranges.setAlignItems(oFF.UiFlexAlignItems.START);
	this.m_ranges.useMaxWidth();
	this.m_ranges.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_ranges.setName("FilterDialogRangeList");
	this.m_addRangeBtnContainer = root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_addRangeBtnContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_addRangeBtnContainer.setName("FilterDialogAddRangeBtnContainer");
	this.m_addRangeBtn = this.m_addRangeBtnContainer.addNewItemOfType(oFF.UiType.BUTTON);
	let addNewText = oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW);
	this.m_addRangeBtn.setText(addNewText);
	this.m_addRangeBtn.setTooltip(addNewText);
	this.m_addRangeBtn.setName("FilterDialogAddRangeBtn");
	this.m_addRangeBtn.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_addRangeBtn.setMargin(oFF.UiCssBoxEdges.create("0 0 0 1rem"));
};
oFF.FdRangesViewLayout.prototype.addHeader = function(root)
{
	this.m_infoContainer = root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_infoContainer.setName("FilterDialogInfoContainer");
	this.m_infoContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_infoContainer.setJustifyContent(oFF.UiFlexJustifyContent.END);
	this.m_infoContainer.useMaxWidth();
	this.m_infoContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 1rem 0"));
	this.m_info = this.m_infoContainer.addNewItemOfType(oFF.UiType.MESSAGE_STRIP);
	this.m_info.setIcon("message-information");
	this.m_info.setShowIcon(true);
	this.m_info.useMaxWidth();
	this.m_info.setName("FilterDialogRangeInfo");
	this.addSelectionContainerToggleBtn(this.m_infoContainer);
};
oFF.FdRangesViewLayout.prototype.addRange = function(range)
{
	if (oFF.notNull(this.m_size))
	{
		range.resizeComponent(this.m_size);
	}
	this.m_rangeLayouts.add(range);
	this.m_ranges.addItem(range.getRoot());
};
oFF.FdRangesViewLayout.prototype.addSelectionContainerToggleBtn = function(parent)
{
	this.m_selectionContainerToggleBtn = oFF.FdLayoutUtils.addSelectedMembersToggleButton(parent, "FilterDialogRangesShowOnlySelected");
	this.m_selectionContainerToggleBtn.setMargin(oFF.UiCssBoxEdges.create("0 0 0 1rem"));
	this.m_selectionContainerToggleBtn.registerOnPress(oFF.UiLambdaPressListener.create((event) => {
		this.setSelectionContainerVisible(event.getControl().isPressed());
	}));
};
oFF.FdRangesViewLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setName("FilterDialogRangesView");
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	this.addContent(this.m_root);
};
oFF.FdRangesViewLayout.prototype.clearRanges = function()
{
	this.m_rangeLayouts.clear();
	this.m_ranges.clearItems();
};
oFF.FdRangesViewLayout.prototype.getAddRangeBtn = function()
{
	return this.m_addRangeBtn;
};
oFF.FdRangesViewLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdRangesViewLayout.prototype.onResize = function(contentWidth, dialogWidth)
{
	this.m_size = oFF.FdLayoutSize.get(this.m_genesis.getUiManager().getDeviceInfo(), contentWidth, dialogWidth, oFF.FdLayoutUtils.isShowSelectionContainer(this.m_genesis, this.m_model));
	this.resizeRangeLayouts(this.m_size, oFF.FdLayoutUtils.isSelectionContainerVisible(this.m_size.getDialogSize()));
};
oFF.FdRangesViewLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_model = null;
	this.m_genesis = null;
	this.m_selectionContainer = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_size = oFF.XObjectExt.release(this.m_size);
	this.m_ranges = oFF.XObjectExt.release(this.m_ranges);
	this.m_addRangeBtn = oFF.XObjectExt.release(this.m_addRangeBtn);
	this.m_rangeLayouts = oFF.XObjectExt.release(this.m_rangeLayouts);
};
oFF.FdRangesViewLayout.prototype.removeRange = function(range)
{
	this.m_rangeLayouts.removeElement(range);
	this.m_ranges.removeItem(range.getRoot());
};
oFF.FdRangesViewLayout.prototype.resizeRangeLayouts = function(size, selectionContainerVisible)
{
	oFF.XCollectionUtils.forEach(this.m_rangeLayouts, (rangeLayout) => {
		rangeLayout.resizeComponent(size);
	});
	this.m_selectionContainerToggleBtn.setVisible(!selectionContainerVisible && size.getContentSize().isSmall() && oFF.FdLayoutUtils.isMultiView(this.m_model) && oFF.FdLayoutUtils.isShowSelectionContainer(this.m_genesis, this.m_model));
	if (!this.m_selectionContainerToggleBtn.isVisible())
	{
		this.setSelectionContainerVisible(false);
	}
	this.updateInfoContainerVisibility();
};
oFF.FdRangesViewLayout.prototype.setAddRangeBtnVisible = function(visible)
{
	this.m_addRangeBtn.setVisible(visible);
};
oFF.FdRangesViewLayout.prototype.setRangeInfo = function(min, max, dateRangeGranularities)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_model.getRangeModel().getInfoText()))
	{
		this.m_info.setText(this.m_model.getRangeModel().getInfoText());
	}
	else if (oFF.notNull(min) && oFF.notNull(max))
	{
		let minValue;
		let maxValue;
		let formatter = oFF.UiNumberFormatterCenter.getCenter();
		if (min.getValueType().isDateBased() && max.getValueType().isDateBased())
		{
			if (!oFF.XCollectionUtils.hasElements(dateRangeGranularities) || dateRangeGranularities.contains(oFF.DateRangeGranularity.DAY))
			{
				minValue = formatter.formatTextForDateTimeKey(null, min.getStringRepresentation(), min.getValueType());
				maxValue = formatter.formatTextForDateTimeKey(null, max.getStringRepresentation(), max.getValueType());
			}
			else
			{
				let minDate = min;
				let maxDate = max;
				let highestGranularity = oFF.DateRangeGranularity.getHighest(dateRangeGranularities);
				let isMonthBased = highestGranularity === oFF.DateRangeGranularity.MONTH;
				let isQuarterBased = highestGranularity === oFF.DateRangeGranularity.QUARTER;
				let isHalfYearBased = highestGranularity === oFF.DateRangeGranularity.HALF_YEAR;
				minValue = oFF.FilterDialogI18nUtils.getDateText(minDate.getYear(), isHalfYearBased ? oFF.DateRangeGranularityMapper.convertMonthToHalfYear(minDate.getMonthOfYear()) : 0, isQuarterBased ? minDate.getQuarterOfYear() : 0, isMonthBased ? minDate.getMonthOfYear() : 0, 0);
				maxValue = oFF.FilterDialogI18nUtils.getDateText(maxDate.getYear(), isHalfYearBased ? oFF.DateRangeGranularityMapper.convertMonthToHalfYear(maxDate.getMonthOfYear()) : 0, isQuarterBased ? maxDate.getQuarterOfYear() : 0, isMonthBased ? maxDate.getMonthOfYear() : 0, 0);
			}
		}
		else if (min.getValueType().isNumber() && max.getValueType().isNumber())
		{
			minValue = formatter.format(min.getStringRepresentation());
			maxValue = formatter.format(max.getStringRepresentation());
		}
		else
		{
			minValue = min.getStringRepresentation();
			maxValue = max.getStringRepresentation();
		}
		this.m_info.setText(oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder2(oFF.FilterDialogI18n.I18N_FD_RANGES_INFO, minValue, maxValue));
	}
	this.m_info.setVisible(oFF.XStringUtils.isNotNullAndNotEmpty(this.m_info.getText()));
	this.updateInfoContainerVisibility();
};
oFF.FdRangesViewLayout.prototype.setSelectionContainerVisible = function(visible)
{
	if (visible)
	{
		this.m_ranges.setVisible(false);
		this.m_addRangeBtnContainer.setVisible(false);
		let layout = this.m_selectionContainer();
		let layoutRoot = layout.getRoot();
		this.getRoot().addItem(layoutRoot);
		layoutRoot.setVisible(true);
	}
	else if (!this.m_ranges.isVisible())
	{
		this.m_selectionContainer().getRoot().setVisible(false);
		this.m_selectionContainerToggleBtn.setPressed(false);
		this.m_ranges.setVisible(true);
		this.m_addRangeBtnContainer.setVisible(true);
	}
};
oFF.FdRangesViewLayout.prototype.setupRangesLayout = function(model, selectionContainer)
{
	this.m_model = model;
	this.m_selectionContainer = selectionContainer;
	this.m_rangeLayouts = oFF.XList.create();
};
oFF.FdRangesViewLayout.prototype.updateInfoContainerVisibility = function()
{
	this.m_infoContainer.setVisible(this.m_info.isVisible() || (this.m_infoContainer.getItemByName(this.m_selectionContainerToggleBtn.getName()) !== null && this.m_selectionContainerToggleBtn.isVisible()));
};

oFF.FdTableView = function() {};
oFF.FdTableView.prototype = new oFF.FdAbstractView();
oFF.FdTableView.prototype._ff_c = "FdTableView";

oFF.FdTableView.createView = function(controller, model)
{
	let fdView = new oFF.FdTableView();
	fdView.setupView(controller, model);
	return fdView;
};
oFF.FdTableView.prototype.m_dataLayoutType = null;
oFF.FdTableView.prototype.m_genesis = null;
oFF.FdTableView.prototype.m_layout = null;
oFF.FdTableView.prototype.m_mainViewSelectionContainer = null;
oFF.FdTableView.prototype.m_presentationSelection = null;
oFF.FdTableView.prototype.m_search = null;
oFF.FdTableView.prototype.m_selectionContainer = null;
oFF.FdTableView.prototype.m_selectionTools = null;
oFF.FdTableView.prototype.m_table = null;
oFF.FdTableView.prototype.m_toggles = null;
oFF.FdTableView.prototype.m_waitingOnSelectionChangeEvent = false;
oFF.FdTableView.prototype.addAllMembersToSelection = function()
{
	this.m_layout.getRoot().setEnabled(false);
	this.setSelectionContainerBusy(true);
	this.m_controller.loadAndSelectAllMembers(this.m_presentationSelection.getSelectedPresentations().getValuesAsReadOnlyList());
};
oFF.FdTableView.prototype.buildOlapDialogUi = function(genesis, initialContentWidth, initialDialogWidth)
{
	this.m_genesis = genesis;
	this.m_search = oFF.FdComponentSearch.create(this.m_model, () => {
		this.onSearch();
	});
	this.m_search.buildOlapDialogUi(genesis);
	this.m_toggles = oFF.FdComponentToggles.create(this.m_model, () => {
		this.reload(false);
	});
	this.m_toggles.buildOlapDialogUi(genesis);
	this.m_presentationSelection = oFF.FdComponentPresentationSelection.create(this.m_model, () => {
		this.onPresentationChanged();
	});
	this.m_presentationSelection.buildOlapDialogUi(genesis);
	this.m_selectionTools = oFF.FdComponentSelectionTools.create(this.m_model, this, oFF.UiLambdaPressListener.create((e2) => {
		this.onShowSelectedMembersOnlyBtnPress();
	}));
	this.m_selectionTools.buildOlapDialogUi(genesis);
	let showSelectionContainer = oFF.FdLayoutUtils.isShowSelectionContainer(genesis, this.m_model);
	if (showSelectionContainer && !oFF.FdLayoutUtils.isMultiView(this.m_model))
	{
		this.m_selectionContainer = oFF.FdComponentSelectionContainer.create(this.m_model, this, false);
		this.m_selectionContainer.buildOlapDialogUi(genesis);
	}
	this.m_layout = oFF.FdTableViewLayout.createLayout(this.m_model, this, this.m_search.getLayout(), this.m_toggles.getLayout(), oFF.notNull(this.m_selectionContainer) ? this.m_selectionContainer.getLayout() : null, this.m_presentationSelection.getLayout(), this.m_selectionTools.getLayout());
	this.m_layout.setHasSelectionContainer(showSelectionContainer);
	this.m_layout.buildOlapDialogUi(genesis);
	this.m_layout.setHeaderPanelExpanded(!this.m_model.isMobile() && this.m_model.getConfig().getContentType() !== oFF.FilterDialogContentType.USER_TEAM);
	this.buildTable();
	this.m_layout.getClearSelectionBtnMobile().registerOnPress(oFF.UiLambdaPressListener.create((e3) => {
		this.m_model.clearSelection();
	}));
	this.m_layout.getShowOnlySelectedToggleBtnMobile().registerOnPress(oFF.UiLambdaPressListener.create((e4) => {
		this.onShowSelectedMembersOnlyBtnPress();
	}));
	this.m_layout.onResize(initialContentWidth, initialDialogWidth);
	this.m_model.getHierarchyModel().registerOnActiveHierarchyChange(this);
	this.m_model.registerOnItemsAdded(() => {
		this.updatePaging();
	});
	this.m_table.setBusy(true);
};
oFF.FdTableView.prototype.buildTable = function()
{
	let isMobile = this.m_genesis.getUiManager().getDeviceInfo().isMobile();
	let layoutType = oFF.FdTableType.getLayoutType(this.m_model.getHierarchyModel().isHierarchical() && !this.m_model.getHierarchyModel().hasRootNodesOnly(), isMobile);
	if (oFF.isNull(this.m_dataLayoutType) || this.m_dataLayoutType !== layoutType)
	{
		let oldTable = this.m_table;
		this.m_dataLayoutType = layoutType;
		if (this.m_dataLayoutType === oFF.FdTableType.RESPONSIVE_TABLE_PAGING || this.m_dataLayoutType === oFF.FdTableType.RESPONSIVE_TABLE_LAZY_LOADING)
		{
			this.m_table = oFF.FdComponentResponsiveTable.create(this, this.m_model, this.m_dataLayoutType);
		}
		else if (this.m_dataLayoutType === oFF.FdTableType.TREE_TABLE)
		{
			this.m_table = oFF.FdComponentTreeTable.create(this, this.m_model);
		}
		else if (this.m_dataLayoutType === oFF.FdTableType.NAVIGATION_CONTAINER)
		{
			this.m_table = oFF.FdComponentNavigationContainer.create(this, this.m_model);
		}
		else
		{
			throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate2("No ui control exists for the layout type ", this.m_dataLayoutType.getName()));
		}
		this.m_table.buildOlapDialogUi(this.m_genesis);
		this.m_table.setSelectionMode(this.m_model.getSelectionMode());
		this.m_selectionTools.setShowSelectionToolButtons(this.isSelectedMembersTableViewSupported());
		this.resetToTableLayout();
		oFF.XObjectExt.release(oldTable);
	}
};
oFF.FdTableView.prototype.clearSearch = function()
{
	this.m_search.clearSearch();
	this.m_layout.setInfoLabelText(null);
};
oFF.FdTableView.prototype.getCurrentViewType = function()
{
	return oFF.FilterDialogViewType.LIST;
};
oFF.FdTableView.prototype.getInitialFocusControl = function()
{
	return oFF.notNull(this.m_search) && this.m_search.getLayout() !== null && this.m_search.getLayout().getRoot().isVisible() ? this.m_search.getFocusControl() : this.m_presentationSelection.getFocusControl();
};
oFF.FdTableView.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdTableView.prototype.getMainPresentation = function()
{
	return this.m_presentationSelection.getMainPresentation();
};
oFF.FdTableView.prototype.getNoResultsText = function(messages)
{
	let i18nKey = oFF.FilterDialogI18n.I18N_FD_NO_RESULTS;
	if (oFF.notNull(messages) && oFF.XCollectionUtils.contains(messages.getInfos(), (warning) => {
		return warning.getCode() === 42709;
	}))
	{
		i18nKey = oFF.FilterDialogI18n.I18N_FD_MAX_RESULT_RECORDS_LIMIT_REACHED;
	}
	else if (this.m_model.getConfig().getContentType().isValueHelp() && this.m_model.getConfig().getExternalValueHelpProcess() !== null)
	{
		i18nKey = oFF.FilterDialogI18n.I18N_FD_NO_RESULTS_EXT;
	}
	else if (this.isSearchActive())
	{
		i18nKey = oFF.FilterDialogI18n.I18N_FD_NO_RESULTS_FOR_SEARCH;
	}
	return oFF.XLocalizationCenter.getCenter().getText(i18nKey);
};
oFF.FdTableView.prototype.getSelectedPresentations = function()
{
	return this.m_presentationSelection.getSelectedPresentations();
};
oFF.FdTableView.prototype.isSearchActive = function()
{
	return this.m_search.isSearchActive();
};
oFF.FdTableView.prototype.isSelectedMembersTableViewActive = function()
{
	return (this.m_layout.getShowOnlySelectedToggleBtnMobile().isPressed() || this.m_selectionTools.isShowOnlySelectedMembers()) && this.isSelectedMembersTableViewSupported();
};
oFF.FdTableView.prototype.isSelectedMembersTableViewSupported = function()
{
	return !this.m_dataLayoutType.isTreeLayout() && !oFF.FdLayoutUtils.isMultiView(this.m_model);
};
oFF.FdTableView.prototype.isSelectionContainerViewActive = function()
{
	return (this.m_layout.getShowOnlySelectedToggleBtnMobile().isPressed() || this.m_selectionTools.isShowOnlySelectedMembers()) && !this.isSelectedMembersTableViewSupported();
};
oFF.FdTableView.prototype.onError = function(messages, customIdentifier)
{
	oFF.FdAbstractView.prototype.onError.call( this , messages, customIdentifier);
	this.m_table.setBusy(false);
	this.setSelectionContainerBusy(false);
	this.m_table.onError(messages, customIdentifier);
	this.m_model.onError(messages, customIdentifier);
	this.m_toggles.onError(messages, customIdentifier);
};
oFF.FdTableView.prototype.onFetchChildren = function(node, offset, presentations, listener, customIdentifier)
{
	let presentationsToRequest = oFF.notNull(presentations) ? presentations : this.m_presentationSelection.getSelectedPresentations().getValuesAsReadOnlyList();
	this.m_controller.fetchChildren(node, offset, this.m_model.getChildNodesPageSize() + 1, presentationsToRequest, listener, customIdentifier);
};
oFF.FdTableView.prototype.onHierarchyChanged = function(activeHierarchy)
{
	this.resetToTableLayout();
	this.reload(false);
};
oFF.FdTableView.prototype.onNewClipboardSelection = function(items, includedItems, excludedItems)
{
	this.m_search.clearSearch();
	this.m_table.setBusy(true);
	this.m_waitingOnSelectionChangeEvent = true;
	oFF.FdAbstractView.prototype.onNewClipboardSelection.call( this , items, includedItems, excludedItems);
};
oFF.FdTableView.prototype.onPresentationChanged = function()
{
	if (this.isSearchActive())
	{
		let firstItem = this.m_table.getFirstItem();
		if (oFF.isNull(firstItem) || !this.m_controller.isReloadRequired(firstItem, this.m_presentationSelection.getSelectedPresentations().getValuesAsReadOnlyList()))
		{
			this.m_model.getPresentationsModel().setSelectedPresentations(this.m_presentationSelection.getMainPresentation(), this.m_presentationSelection.getAdditionalPresentations());
			this.publishPresentations();
			return;
		}
	}
	this.m_model.getPresentationsModel().setSelectedPresentations(this.m_presentationSelection.getMainPresentation(), this.m_presentationSelection.getAdditionalPresentations());
	this.reload(true);
};
oFF.FdTableView.prototype.onProcessFinished = function(items, messages, customIdentifier)
{
	if (this.isReleased())
	{
		oFF.XObjectExt.release(customIdentifier);
		return;
	}
	let identifier = customIdentifier;
	if (identifier.isFetchChildrenIdentifier())
	{
		this.m_table.onProcessFinished(items, messages, customIdentifier);
	}
	else if (identifier.isSearchIdentifier() && oFF.XString.isEqual(this.m_search.getSearchText(), identifier.getSearchValue()))
	{
		this.publishMembersList(items, messages);
	}
	oFF.XObjectExt.release(customIdentifier);
};
oFF.FdTableView.prototype.onRefreshList = function(refreshAttributesOnly, currentPageOnly)
{
	this.m_controller.refreshList(this.m_presentationSelection.getSelectedPresentations().getValuesAsReadOnlyList(), refreshAttributesOnly, currentPageOnly);
};
oFF.FdTableView.prototype.onRefreshTree = function(refreshAttributesOnly, parentNode)
{
	this.m_controller.refreshTree(this.m_presentationSelection.getSelectedPresentations().getValuesAsReadOnlyList(), refreshAttributesOnly, parentNode);
};
oFF.FdTableView.prototype.onResize = function(contentWidth, dialogWidth)
{
	let fdContentWidth = contentWidth > 0 ? contentWidth : oFF.notNull(this.m_layout) ? this.m_layout.getContentWidth() : -1;
	let fdWidth = dialogWidth > 0 ? dialogWidth : this.m_controller.getProgram().getWidth();
	if (oFF.notNull(this.m_layout))
	{
		this.m_layout.onResize(fdContentWidth, fdWidth);
	}
};
oFF.FdTableView.prototype.onSearch = function()
{
	let searchActive = this.m_search.isSearchActive();
	let searchText = this.m_search.getSearchText();
	this.m_table.onSearchChange(searchActive, searchText);
	if (searchActive)
	{
		this.m_table.setBusy(true);
		let presentationsForSearch = this.m_search.getSearchPresentations();
		let presentationsToRequest = this.m_presentationSelection.getSelectedPresentations().getValuesAsReadOnlyList();
		this.m_controller.search(searchText, presentationsForSearch, presentationsToRequest, this.m_table.parentNodesInSearchNeeded(), this, oFF.FdViewCustomIdentifier.creatForSearch(searchText));
	}
	else
	{
		this.clearSearch();
	}
};
oFF.FdTableView.prototype.onSelectionChange = function(selection)
{
	if (!oFF.XCollectionUtils.hasElements(selection))
	{
		this.m_table.onSelectionCleared();
		oFF.FdLayoutUtils.announceSelectionCleared();
	}
	if (this.isSelectedMembersTableViewActive() && !this.isSearchActive())
	{
		this.m_model.unregisterOnSelectionChange(this);
		this.renderItems(this.m_model.getSelectedItems(), null);
		this.m_model.registerOnSelectionChange(this);
	}
	else
	{
		this.m_model.unregisterOnSelectionChange(this);
		this.m_table.updateSelectionState(selection);
		this.m_model.registerOnSelectionChange(this);
	}
	this.m_layout.getRoot().setEnabled(true);
	if (this.m_waitingOnSelectionChangeEvent)
	{
		this.m_waitingOnSelectionChangeEvent = false;
		this.m_table.setBusy(false);
		this.updatePaging();
	}
};
oFF.FdTableView.prototype.onShowSelectedMembersOnlyBtnPress = function()
{
	if (this.isSelectedMembersTableViewActive())
	{
		this.clearSearch();
		this.renderItems(this.m_model.getSelectedItems(), null);
	}
	else if (this.isSelectionContainerViewActive())
	{
		this.clearSearch();
		if (oFF.isNull(this.m_mainViewSelectionContainer))
		{
			this.m_mainViewSelectionContainer = oFF.FdComponentSelectionContainer.create(this.m_model, this, true);
			this.m_mainViewSelectionContainer.buildOlapDialogUi(this.m_genesis);
		}
		this.m_layout.setSelectionContainerLayout(this.m_mainViewSelectionContainer.getLayout());
	}
	else
	{
		this.resetToTableLayout();
		this.publishMembersList(this.m_model.getItems(this.m_dataLayoutType === oFF.FdTableType.RESPONSIVE_TABLE_PAGING ? this.m_model.getPage() : 0, this.m_model.getPage()), null);
	}
};
oFF.FdTableView.prototype.onTableSelectionChange = function(itemList, itemsSelected)
{
	let modelSelectedItems = this.m_model.getSelectedItems();
	if (this.m_model.getSelectionMode() === oFF.UiTableSelectionMode.SINGLE)
	{
		this.m_model.changeSelection(itemsSelected.hasElements() ? oFF.XCollectionUtils.singletonList(itemsSelected.get(0).getCustomObject()) : oFF.XList.create(), modelSelectedItems);
	}
	else
	{
		let selectionsToAdd = oFF.XList.create();
		let selectionsToRemove = oFF.XList.create();
		oFF.XCollectionUtils.forEach(itemList, (item) => {
			let customObject = item.getCustomObject();
			if (oFF.notNull(customObject))
			{
				if (itemsSelected.contains(item))
				{
					selectionsToAdd.add(customObject);
				}
				else
				{
					selectionsToRemove.add(customObject);
				}
			}
		});
		for (let i = selectionsToAdd.size() - 1; i >= 0; i--)
		{
			let itemToAdd = selectionsToAdd.get(i);
			if (selectionsToRemove.contains(itemToAdd))
			{
				if (modelSelectedItems.contains(itemToAdd))
				{
					selectionsToAdd.removeElement(itemToAdd);
				}
				else
				{
					while (selectionsToRemove.contains(itemToAdd))
					{
						selectionsToRemove.removeElement(itemToAdd);
					}
				}
			}
		}
		this.m_model.changeSelection(selectionsToAdd, selectionsToRemove);
		oFF.XObjectExt.release(selectionsToAdd);
		oFF.XObjectExt.release(selectionsToRemove);
	}
};
oFF.FdTableView.prototype.publishAvailablePresentations = function()
{
	this.m_presentationSelection.publishAvailablePresentations();
	this.m_search.publishAvailablePresentations();
};
oFF.FdTableView.prototype.publishMembersList = function(membersList, messages)
{
	let selectedMembersTableViewActive = this.isSelectedMembersTableViewActive();
	let selectionContainerViewActive = this.isSelectionContainerViewActive();
	if (selectedMembersTableViewActive || selectionContainerViewActive)
	{
		if (this.isSearchActive())
		{
			this.resetToTableLayout();
			this.renderItems(membersList, messages);
		}
		else if (selectedMembersTableViewActive)
		{
			this.renderItems(this.m_model.getSelectedItems(), null);
		}
		else
		{
			this.renderItems(membersList, messages);
		}
	}
	else
	{
		this.renderItems(membersList, messages);
	}
};
oFF.FdTableView.prototype.publishPresentations = function()
{
	this.m_table.publishPresentations();
	this.updatePaging();
};
oFF.FdTableView.prototype.releaseObject = function()
{
	this.m_table = oFF.XObjectExt.release(this.m_table);
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
	this.m_search = oFF.XObjectExt.release(this.m_search);
	this.m_toggles = oFF.XObjectExt.release(this.m_toggles);
	this.m_selectionContainer = oFF.XObjectExt.release(this.m_selectionContainer);
	this.m_mainViewSelectionContainer = oFF.XObjectExt.release(this.m_mainViewSelectionContainer);
	this.m_presentationSelection = oFF.XObjectExt.release(this.m_presentationSelection);
	this.m_selectionTools = oFF.XObjectExt.release(this.m_selectionTools);
	this.m_model.registerOnItemsAdded(null);
	this.m_model.getHierarchyModel().unregisterOnActiveHierarchyChange(this);
	oFF.FdAbstractView.prototype.releaseObject.call( this );
};
oFF.FdTableView.prototype.reload = function(reloadPresentationsOnly)
{
	if (!reloadPresentationsOnly)
	{
		this.buildTable();
	}
	this.m_table.setBusy(true);
	if (this.isSearchActive())
	{
		this.onSearch();
	}
	else
	{
		this.m_table.refreshContent(reloadPresentationsOnly);
	}
};
oFF.FdTableView.prototype.renderItems = function(membersList, messages)
{
	let infoLabel = null;
	if (!oFF.XCollectionUtils.hasElements(membersList))
	{
		infoLabel = this.getNoResultsText(messages);
	}
	else if (this.isSearchActive() && membersList.size() >= this.m_model.getConfig().getSearchSize())
	{
		infoLabel = oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_MAX_RESULTS, oFF.XInteger.convertToString(this.m_model.getConfig().getSearchSize()));
	}
	this.m_layout.setInfoLabelText(infoLabel);
	this.m_table.renderItems(membersList, this.m_presentationSelection.getSelectedPresentations(), this.m_model.getSelectedItems());
	this.updatePaging();
	this.m_table.setBusy(false);
};
oFF.FdTableView.prototype.resetToTableLayout = function()
{
	this.m_layout.setTableLayout(this.m_table.getLayout(), this.m_dataLayoutType);
	this.m_selectionTools.resetShowOnlySelectedMembersButtonState();
	this.m_layout.getShowOnlySelectedToggleBtnMobile().setPressed(false);
};
oFF.FdTableView.prototype.setSelectionContainerBusy = function(busy)
{
	if (oFF.notNull(this.m_selectionContainer))
	{
		this.m_selectionContainer.setBusy(busy);
	}
};
oFF.FdTableView.prototype.updatePaging = function()
{
	this.m_table.updatePaging(this.isSelectedMembersTableViewActive());
};

oFF.FdTableViewLayout = function() {};
oFF.FdTableViewLayout.prototype = new oFF.XObject();
oFF.FdTableViewLayout.prototype._ff_c = "FdTableViewLayout";

oFF.FdTableViewLayout.createLayout = function(model, resizeListener, searchLayout, togglesLayout, selectionContainerLayout, presentationSelectionLayout, selectionToolsLayout)
{
	let fdLayout = new oFF.FdTableViewLayout();
	fdLayout.m_model = model;
	fdLayout.m_resizeListener = resizeListener;
	fdLayout.m_searchLayout = searchLayout;
	fdLayout.m_togglesLayout = togglesLayout;
	fdLayout.m_selectionContainerLayout = selectionContainerLayout;
	fdLayout.m_presentationSelectionLayout = presentationSelectionLayout;
	fdLayout.m_selectionToolsLayout = selectionToolsLayout;
	return fdLayout;
};
oFF.FdTableViewLayout.prototype.m_clearSelectionBtnMobile = null;
oFF.FdTableViewLayout.prototype.m_contentContainer = null;
oFF.FdTableViewLayout.prototype.m_genesis = null;
oFF.FdTableViewLayout.prototype.m_hasSelectionContainer = false;
oFF.FdTableViewLayout.prototype.m_headerContainer = null;
oFF.FdTableViewLayout.prototype.m_headerPanel = null;
oFF.FdTableViewLayout.prototype.m_headerPanelToolbar = null;
oFF.FdTableViewLayout.prototype.m_infoLabel = null;
oFF.FdTableViewLayout.prototype.m_infoLabelIcon = null;
oFF.FdTableViewLayout.prototype.m_invisibleTitle = null;
oFF.FdTableViewLayout.prototype.m_layoutType = null;
oFF.FdTableViewLayout.prototype.m_mainView = null;
oFF.FdTableViewLayout.prototype.m_model = null;
oFF.FdTableViewLayout.prototype.m_presentationSelectionLayout = null;
oFF.FdTableViewLayout.prototype.m_resizeListener = null;
oFF.FdTableViewLayout.prototype.m_root = null;
oFF.FdTableViewLayout.prototype.m_searchLayout = null;
oFF.FdTableViewLayout.prototype.m_selectionContainerLayout = null;
oFF.FdTableViewLayout.prototype.m_selectionToolsLayout = null;
oFF.FdTableViewLayout.prototype.m_showOnlySelectedToggleBtnMobile = null;
oFF.FdTableViewLayout.prototype.m_size = null;
oFF.FdTableViewLayout.prototype.m_splitter = null;
oFF.FdTableViewLayout.prototype.m_togglesLayout = null;
oFF.FdTableViewLayout.prototype.m_toolsContainer = null;
oFF.FdTableViewLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.ROW);
	this.m_root.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setName("FilterDialogWrapper");
	this.m_invisibleTitle = this.m_root.addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisibleTitle.setText(this.m_model.getConfig().getTitle());
	this.m_mainView = this.createMainView();
	this.m_root.addItem(this.m_mainView);
	if (oFF.notNull(this.m_selectionContainerLayout))
	{
		this.m_splitter = oFF.FdLayoutUtils.addInteractiveSplitterForSelectionContainer(this.m_root, this.m_resizeListener, this.m_mainView, this.m_selectionContainerLayout);
	}
};
oFF.FdTableViewLayout.prototype.createHeaderPanel = function()
{
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_headerPanel = this.m_genesis.newControl(oFF.UiType.PANEL);
	this.m_headerPanel.setExpandable(true);
	this.m_headerPanel.setWidth(oFF.UiCssLength.create("100%"));
	this.m_headerPanel.setName("FilterDialogHeader");
	this.m_headerPanelToolbar = this.m_genesis.newControl(oFF.UiType.TOOLBAR);
	this.m_headerPanel.setHeaderToolbar(this.m_headerPanelToolbar);
	let title = this.m_headerPanelToolbar.addNewItemOfType(oFF.UiType.TITLE);
	title.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_SETTINGS));
	this.m_headerPanelToolbar.addLabelledBy(title);
	this.m_headerPanelToolbar.addNewItemOfType(oFF.UiType.SPACER);
	this.m_showOnlySelectedToggleBtnMobile = oFF.FdLayoutUtils.addSelectedMembersToggleButton(this.m_headerPanelToolbar, "FilterDialogHeaderShowOnlySelectedToggleBtn");
	let contentContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	contentContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	contentContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	contentContainer.setFlex("0 0 auto");
	contentContainer.setName("FilterDialogHeaderContentWrapper");
	this.m_headerPanel.setContent(contentContainer);
	contentContainer.addItem(this.m_presentationSelectionLayout.getRoot());
	contentContainer.addItem(this.m_togglesLayout.getRoot());
	return this.m_headerPanel;
};
oFF.FdTableViewLayout.prototype.createMainView = function()
{
	let mainViewContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainViewContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	mainViewContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	mainViewContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	if (!oFF.FdLayoutUtils.isMultiView(this.m_model))
	{
		mainViewContainer.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	}
	mainViewContainer.useMaxSpace();
	mainViewContainer.setName("FilterDialogMainViewContainer");
	this.m_headerContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_headerContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_headerContainer.useMaxWidth();
	this.m_headerContainer.setFlex("0 0 auto");
	this.m_headerContainer.setName("FilterDialogHeaderContainer");
	mainViewContainer.addItem(this.m_headerContainer);
	this.m_headerContainer.addItem(this.createHeaderPanel());
	this.m_headerContainer.addItem(this.createToolsContainer());
	this.m_contentContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_contentContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_contentContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_contentContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_contentContainer.useMaxWidth();
	this.m_contentContainer.setMinHeight(oFF.UiCssLength.create("0"));
	this.m_contentContainer.setFlex("auto");
	this.m_contentContainer.setName("FilterDialogContentContainer");
	mainViewContainer.addItem(this.m_contentContainer);
	this.m_clearSelectionBtnMobile = oFF.FdLayoutUtils.addClearSelectionButton(mainViewContainer, "FilterDialogClearButton");
	this.m_clearSelectionBtnMobile.setFlex("0 0 40px");
	this.m_clearSelectionBtnMobile.setVisible(this.m_genesis.getUiManager().getDeviceInfo().isMobile());
	return mainViewContainer;
};
oFF.FdTableViewLayout.prototype.createToolsContainer = function()
{
	this.m_toolsContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_toolsContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_toolsContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_toolsContainer.setName("FilterDialogToolsContainer");
	this.m_toolsContainer.useMaxWidth();
	this.m_toolsContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 1rem 0"));
	this.m_toolsContainer.setVisible(false);
	this.m_infoLabelIcon = this.m_toolsContainer.addNewItemOfType(oFF.UiType.ICON);
	this.m_infoLabelIcon.setIcon("message-information");
	this.m_infoLabelIcon.setMargin(oFF.UiCssBoxEdges.create("0 0.5rem 0 0"));
	this.m_infoLabelIcon.setVisible(false);
	this.m_infoLabel = this.m_toolsContainer.addNewItemOfType(oFF.UiType.LABEL);
	this.m_infoLabel.setFontStyle(oFF.UiFontStyle.ITALIC);
	this.m_infoLabel.setName("FilterDialogInfoLabel");
	this.m_infoLabel.setWrapping(true);
	this.m_infoLabel.setVisible(false);
	this.m_toolsContainer.addItem(this.m_selectionToolsLayout.getRoot());
	this.m_selectionToolsLayout.getRoot().setVisible(false);
	return this.m_toolsContainer;
};
oFF.FdTableViewLayout.prototype.getClearSelectionBtnMobile = function()
{
	return this.m_clearSelectionBtnMobile;
};
oFF.FdTableViewLayout.prototype.getContentWidth = function()
{
	return oFF.notNull(this.m_splitter) && this.m_splitter.getParent() !== null ? this.m_splitter.getItem(0).getOffsetWidth() : -1;
};
oFF.FdTableViewLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdTableViewLayout.prototype.getShowOnlySelectedToggleBtnMobile = function()
{
	return this.m_showOnlySelectedToggleBtnMobile;
};
oFF.FdTableViewLayout.prototype.onResize = function(contentWidth, dialogWidth)
{
	let size = oFF.FdLayoutSize.get(this.m_genesis.getUiManager().getDeviceInfo(), contentWidth, dialogWidth, this.m_hasSelectionContainer);
	if (!oFF.XObjectExt.areEqual(this.m_size, size))
	{
		this.m_size = size;
		let contentSize = size.getContentSize();
		if ((contentSize.isLarge() || (contentSize.isMedium() && this.m_model.getConfig().isShowSimplifiedSearch())) && !contentSize.isMobile())
		{
			this.m_headerPanelToolbar.addItem(this.m_searchLayout.getRoot());
		}
		else
		{
			this.m_headerContainer.insertItem(this.m_searchLayout.getRoot(), 0);
		}
		this.updateSelectionTools(size);
		this.m_toolsContainer.setVisible(oFF.XStringUtils.isNotNullAndNotEmpty(this.m_infoLabel.getText()) || this.m_selectionToolsLayout.getRoot().isVisible());
		this.m_searchLayout.resizeComponent(size);
		this.m_presentationSelectionLayout.resizeComponent(size);
		this.m_togglesLayout.resizeComponent(size);
		if (oFF.notNull(this.m_splitter))
		{
			let selectionContainerVisible = oFF.FdLayoutUtils.isSelectionContainerVisible(size.getDialogSize());
			if (this.m_splitter.getParent() !== null && !selectionContainerVisible)
			{
				this.m_root.removeItem(this.m_splitter);
				this.m_root.addItem(this.m_mainView);
			}
			else if (this.m_splitter.getParent() === null && selectionContainerVisible)
			{
				this.m_root.removeItem(this.m_mainView);
				this.m_root.addItem(this.m_splitter);
				this.m_splitter.getItem(0).setContent(this.m_mainView);
			}
		}
	}
};
oFF.FdTableViewLayout.prototype.releaseObject = function()
{
	this.m_model = null;
	this.m_resizeListener = null;
	this.m_genesis = null;
	this.m_size = oFF.XObjectExt.release(this.m_size);
	this.m_layoutType = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_contentContainer = oFF.XObjectExt.release(this.m_contentContainer);
	this.m_toolsContainer = oFF.XObjectExt.release(this.m_toolsContainer);
	this.m_infoLabelIcon = oFF.XObjectExt.release(this.m_infoLabelIcon);
	this.m_infoLabel = oFF.XObjectExt.release(this.m_infoLabel);
	this.m_clearSelectionBtnMobile = oFF.XObjectExt.release(this.m_clearSelectionBtnMobile);
	this.m_splitter = oFF.XObjectExt.release(this.m_splitter);
	this.m_mainView = oFF.XObjectExt.release(this.m_mainView);
	this.m_searchLayout = oFF.XObjectExt.release(this.m_searchLayout);
	this.m_togglesLayout = oFF.XObjectExt.release(this.m_togglesLayout);
	this.m_selectionContainerLayout = oFF.XObjectExt.release(this.m_selectionContainerLayout);
	this.m_presentationSelectionLayout = oFF.XObjectExt.release(this.m_presentationSelectionLayout);
	this.m_showOnlySelectedToggleBtnMobile = oFF.XObjectExt.release(this.m_showOnlySelectedToggleBtnMobile);
	this.m_headerContainer = oFF.XObjectExt.release(this.m_headerContainer);
	this.m_headerPanelToolbar = oFF.XObjectExt.release(this.m_headerPanelToolbar);
	this.m_selectionToolsLayout = oFF.XObjectExt.release(this.m_selectionToolsLayout);
	this.m_invisibleTitle = oFF.XObjectExt.release(this.m_invisibleTitle);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdTableViewLayout.prototype.setHasSelectionContainer = function(hasSelectionContainer)
{
	this.m_hasSelectionContainer = hasSelectionContainer;
};
oFF.FdTableViewLayout.prototype.setHeaderPanelExpanded = function(expanded)
{
	this.m_headerPanel.setExpanded(expanded);
};
oFF.FdTableViewLayout.prototype.setInfoLabelText = function(text)
{
	let showText = oFF.XStringUtils.isNotNullAndNotEmpty(text);
	this.m_infoLabel.setText(text);
	this.m_infoLabel.setVisible(showText);
	this.m_infoLabelIcon.setVisible(showText);
	this.m_toolsContainer.setVisible(showText || this.m_selectionToolsLayout.getRoot().isVisible());
};
oFF.FdTableViewLayout.prototype.setSelectionContainerLayout = function(selectionContainerLayout)
{
	this.m_contentContainer.clearItems();
	this.m_contentContainer.addItem(selectionContainerLayout.getRoot());
	this.m_layoutType = null;
};
oFF.FdTableViewLayout.prototype.setTableLayout = function(tableLayout, layoutType)
{
	if (layoutType !== this.m_layoutType)
	{
		tableLayout.addLabelledBy(this.m_invisibleTitle);
		this.m_contentContainer.clearItems();
		this.m_contentContainer.addItem(tableLayout.getRoot());
		this.m_layoutType = layoutType;
		if (oFF.notNull(this.m_size))
		{
			this.updateSelectionTools(this.m_size);
		}
	}
};
oFF.FdTableViewLayout.prototype.updateSelectionTools = function(size)
{
	this.m_showOnlySelectedToggleBtnMobile.setVisible(oFF.notNull(this.m_layoutType) && !this.m_layoutType.isTreeLayout() && size.getContentSize().isMobile());
	this.m_showOnlySelectedToggleBtnMobile.setPressed(this.m_showOnlySelectedToggleBtnMobile.isPressed() && this.m_showOnlySelectedToggleBtnMobile.isVisible());
	this.m_selectionToolsLayout.resizeComponent(size);
};

oFF.FdView = function() {};
oFF.FdView.prototype = new oFF.FdAbstractView();
oFF.FdView.prototype._ff_c = "FdView";

oFF.FdView.createView = function(controller, model, genesis, viewTypeChangeListener)
{
	let viewType = oFF.FilterDialogViewType.LIST;
	let viewTypes = model.getViewTypes();
	if (oFF.XCollectionUtils.hasElements(viewTypes))
	{
		viewType = viewTypes.get(0);
		if (oFF.FdLayoutUtils.isMultiView(model))
		{
			let defaultViewType = model.getConfig().getDefaultViewType();
			if (oFF.notNull(defaultViewType) && viewTypes.contains(defaultViewType))
			{
				viewType = defaultViewType;
			}
			else if (viewTypes.contains(oFF.FilterDialogViewType.RANGE) && model.containsRangeSelectionOnly() && oFF.XStringUtils.isNullOrEmpty(model.getInitialSearchValue()))
			{
				viewType = oFF.FilterDialogViewType.RANGE;
			}
			let view = new oFF.FdView();
			view.setupFdView(controller, model, viewTypes, viewType, viewTypeChangeListener, genesis);
			view.buildOlapDialogUi(genesis, -1, controller.getProgram().getWidth());
			genesis.setRoot(view.getLayout().getRoot());
			return view;
		}
	}
	let viewByType = oFF.FdView.createViewByType(controller, model, viewType, null, null);
	viewByType.buildOlapDialogUi(genesis, -1, controller.getProgram().getWidth());
	genesis.setRoot(viewByType.getLayout().getRoot());
	return viewByType;
};
oFF.FdView.createViewByType = function(controller, model, viewType, tabName, fdView)
{
	let view = null;
	if (viewType === oFF.FilterDialogViewType.RANGE)
	{
		let rangeModel = model.getRangeModel();
		if (oFF.notNull(fdView))
		{
			fdView.m_unsupportedRangesViewActive = false;
		}
		if (oFF.notNull(fdView) && oFF.FdLayoutUtils.isMultiView(model) && !oFF.FdView.isRangeViewSupported(model))
		{
			view = oFF.FdRangesUnsupportedView.create(controller, model);
			fdView.m_unsupportedRangesViewActive = true;
		}
		else if (rangeModel.isInputValueDateBased() && rangeModel.supportsFixedAndDynamicDateRange())
		{
			view = oFF.FdDateRangesView.createDateRangeView(controller, model);
		}
		else if (!rangeModel.isInputValueTypeNumeric() && model.supportsValueHelp())
		{
			view = oFF.FdValueHelpRangesView.createValueHelpRangesView(controller, model);
		}
		else
		{
			view = oFF.FdRangesView.createView(controller, model);
		}
	}
	if (viewType === oFF.FilterDialogViewType.MEASURE_BASED_FILTER)
	{
		view = oFF.FdMeasureBasedView.createMeasureBasedView(controller, model);
	}
	if (viewType === oFF.FilterDialogViewType.FUNCTIONAL_VALUES)
	{
		view = oFF.FdFunctionalValuesView.createView(controller, model);
	}
	if (viewType === oFF.FilterDialogViewType.LIST || oFF.isNull(view))
	{
		view = oFF.FdTableView.createView(controller, model);
	}
	return view;
};
oFF.FdView.isRangeViewSupported = function(model)
{
	return !model.getHierarchyModel().isHierarchical() || !oFF.XCollectionUtils.hasElements(model.getSelectedItems()) || model.isFeatureEnabled(oFF.FdFeature.RANGES_IN_HIERARCHY);
};
oFF.FdView.prototype.m_currentView = null;
oFF.FdView.prototype.m_currentViewType = null;
oFF.FdView.prototype.m_genesis = null;
oFF.FdView.prototype.m_layout = null;
oFF.FdView.prototype.m_selectionContainer = null;
oFF.FdView.prototype.m_unsupportedRangesViewActive = false;
oFF.FdView.prototype.m_viewTypeChangeListener = null;
oFF.FdView.prototype.m_viewTypes = null;
oFF.FdView.prototype.buildOlapDialogUi = function(genesis, initialContentWidth, initialDialogWidth)
{
	this.m_currentView.buildOlapDialogUi(genesis, initialContentWidth, initialDialogWidth);
	if (oFF.isNull(this.m_layout))
	{
		let selectionContainerLayout = null;
		if (oFF.FdLayoutUtils.isShowSelectionContainer(genesis, this.m_model))
		{
			this.m_selectionContainer = oFF.FdComponentSelectionContainer.create(this.m_model, this, false);
			this.m_selectionContainer.buildOlapDialogUi(genesis);
			selectionContainerLayout = this.m_selectionContainer.getLayout();
		}
		this.m_layout = oFF.FdViewLayout.createLayout(this.m_viewTypes, this.m_currentViewType, (viewType, tabName) => {
			return this.changeView(viewType, tabName.getString(), false);
		}, this, selectionContainerLayout, null);
		this.m_layout.buildOlapDialogUi(genesis);
		this.m_layout.onResize(initialContentWidth, initialDialogWidth);
		this.m_layout.setTabContent(this.m_currentView.getLayout());
	}
};
oFF.FdView.prototype.changeView = function(viewType, tabName, forceReloadView)
{
	if ((forceReloadView || this.m_currentViewType !== viewType) && this.validate(false))
	{
		this.m_currentViewType = viewType;
		this.m_currentView = oFF.XObjectExt.release(this.m_currentView);
		this.m_currentView = oFF.FdView.createViewByType(this.m_controller, this.m_model, viewType, tabName, this);
		this.m_currentView.buildOlapDialogUi(this.m_genesis, this.m_layout.getContentWidth(), this.m_controller.getProgram().getWidth());
		this.m_viewTypeChangeListener();
		this.m_layout.setTabContent(this.m_currentView.getLayout());
		return oFF.XBooleanValue.create(true);
	}
	return oFF.XBooleanValue.create(false);
};
oFF.FdView.prototype.getCurrentViewType = function()
{
	return this.m_currentViewType;
};
oFF.FdView.prototype.getInitialFocusControl = function()
{
	let selectedTab = this.m_layout.getSelectedTab();
	return oFF.notNull(selectedTab) ? selectedTab : this.m_currentView.getInitialFocusControl();
};
oFF.FdView.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdView.prototype.onError = function(messages, customIdentifier)
{
	this.m_currentView.onError(messages, customIdentifier);
};
oFF.FdView.prototype.onNewClipboardSelection = function(items, includedItems, excludedItems)
{
	this.m_currentView.onNewClipboardSelection(items, includedItems, excludedItems);
};
oFF.FdView.prototype.onResize = function(contentWidth, dialogWidth)
{
	let fdContentWidth = contentWidth > 0 ? contentWidth : oFF.notNull(this.m_layout) ? this.m_layout.getContentWidth() : -1;
	let fdWidth = dialogWidth > 0 ? dialogWidth : this.m_controller.getProgram().getWidth();
	if (oFF.notNull(this.m_layout))
	{
		this.m_layout.onResize(fdContentWidth, fdWidth);
	}
	this.m_currentView.onResize(fdContentWidth, fdWidth);
};
oFF.FdView.prototype.onSelectionChange = function(selection)
{
	if (this.m_currentViewType === oFF.FilterDialogViewType.RANGE)
	{
		let rangeViewSupported = oFF.FdView.isRangeViewSupported(this.m_model);
		if (rangeViewSupported && this.m_unsupportedRangesViewActive || !rangeViewSupported && !this.m_unsupportedRangesViewActive)
		{
			this.changeView(this.m_currentViewType, null, true);
		}
	}
};
oFF.FdView.prototype.publishAvailablePresentations = function()
{
	this.m_currentView.publishAvailablePresentations();
};
oFF.FdView.prototype.publishMembersList = function(membersList, messages)
{
	this.m_currentView.publishMembersList(membersList, messages);
};
oFF.FdView.prototype.publishPresentations = function()
{
	this.m_currentView.publishPresentations();
};
oFF.FdView.prototype.releaseObject = function()
{
	this.m_genesis = null;
	this.m_viewTypes = null;
	this.m_layout = oFF.XObjectExt.release(this.m_layout);
	this.m_currentViewType = null;
	this.m_currentView = oFF.XObjectExt.release(this.m_currentView);
	this.m_viewTypeChangeListener = null;
	this.m_selectionContainer = oFF.XObjectExt.release(this.m_selectionContainer);
	oFF.FdAbstractView.prototype.releaseObject.call( this );
};
oFF.FdView.prototype.setupFdView = function(controller, model, viewTypes, initialViewType, viewTypeChangeListener, genesis)
{
	oFF.FdAbstractView.prototype.setupView.call( this , controller, model);
	this.m_viewTypes = viewTypes;
	this.m_currentViewType = initialViewType;
	this.m_currentView = oFF.FdView.createViewByType(controller, model, initialViewType, null, this);
	this.m_viewTypeChangeListener = viewTypeChangeListener;
	this.m_genesis = genesis;
};
oFF.FdView.prototype.validate = function(selectionRequired)
{
	return this.m_currentView.validate(selectionRequired);
};

oFF.FdViewLayout = function() {};
oFF.FdViewLayout.prototype = new oFF.XObject();
oFF.FdViewLayout.prototype._ff_c = "FdViewLayout";

oFF.FdViewLayout.createLayout = function(filterTypes, selectedFilterType, typeChangeListener, resizeListener, selectionContainerLayout, functionalValueViews)
{
	let layout = new oFF.FdViewLayout();
	layout.m_filterTypes = filterTypes;
	layout.m_selectedTabName = layout.getTabBarItemName(selectedFilterType === oFF.FilterDialogViewType.FUNCTIONAL_VALUES && oFF.XCollectionUtils.hasElements(functionalValueViews) ? functionalValueViews.get(0).getFirstString() : selectedFilterType.getName());
	layout.m_typeChangeListener = typeChangeListener;
	layout.m_resizeListener = resizeListener;
	layout.m_selectionContainerLayout = selectionContainerLayout;
	layout.m_functionalValueViews = functionalValueViews;
	return layout;
};
oFF.FdViewLayout.prototype.m_filterTypes = null;
oFF.FdViewLayout.prototype.m_functionalValueTabNames = null;
oFF.FdViewLayout.prototype.m_functionalValueViews = null;
oFF.FdViewLayout.prototype.m_genesis = null;
oFF.FdViewLayout.prototype.m_resizeListener = null;
oFF.FdViewLayout.prototype.m_root = null;
oFF.FdViewLayout.prototype.m_selectedTabName = null;
oFF.FdViewLayout.prototype.m_selectionContainerLayout = null;
oFF.FdViewLayout.prototype.m_splitter = null;
oFF.FdViewLayout.prototype.m_tabBar = null;
oFF.FdViewLayout.prototype.m_typeChangeListener = null;
oFF.FdViewLayout.prototype.addTabBarItem = function(genesis, name, description)
{
	let tabBarItem = genesis.newControl(oFF.UiType.ICON_TAB_BAR_ITEM);
	tabBarItem.setName(this.getTabBarItemName(name));
	tabBarItem.setText(description);
	tabBarItem.setTooltip(description);
	this.m_tabBar.addItem(tabBarItem);
	return tabBarItem;
};
oFF.FdViewLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.ROW);
	this.m_root.setAlignItems(oFF.UiFlexAlignItems.START);
	this.m_root.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_root.setName("FilterDialogViewContainer");
	this.m_tabBar = this.m_root.addNewItemOfType(oFF.UiType.ICON_TAB_BAR);
	oFF.XCollectionUtils.forEach(this.m_filterTypes, (filterType) => {
		if (filterType === oFF.FilterDialogViewType.FUNCTIONAL_VALUES)
		{
			this.m_functionalValueTabNames = oFF.XHashSetOfString.create();
			for (let i = 0; i < this.m_functionalValueViews.size(); i++)
			{
				let name = this.m_functionalValueViews.get(i).getFirstString();
				let description = this.m_functionalValueViews.get(i).getSecondString();
				let tabBarItem = this.addTabBarItem(genesis, name, description);
				this.m_functionalValueTabNames.add(tabBarItem.getName());
			}
		}
		else
		{
			this.addTabBarItem(genesis, filterType.getName(), this.getTabName(filterType));
		}
	});
	this.m_tabBar.setName("FilterDialogTabBar");
	this.m_tabBar.setSelectedName(this.m_selectedTabName);
	this.m_tabBar.registerOnSelect(this);
	if (oFF.notNull(this.m_selectionContainerLayout))
	{
		this.m_splitter = oFF.FdLayoutUtils.addInteractiveSplitterForSelectionContainer(this.m_root, this.m_resizeListener, this.m_tabBar, this.m_selectionContainerLayout);
	}
};
oFF.FdViewLayout.prototype.getContentWidth = function()
{
	return oFF.notNull(this.m_splitter) && this.m_splitter.getParent() !== null ? this.m_splitter.getItem(0).getOffsetWidth() : -1;
};
oFF.FdViewLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdViewLayout.prototype.getSelectedTab = function()
{
	return this.m_tabBar.getSelectedItem();
};
oFF.FdViewLayout.prototype.getTabBarItemName = function(name)
{
	return oFF.XStringUtils.concatenate2("FilterDialogTab", name);
};
oFF.FdViewLayout.prototype.getTabName = function(filterType)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	if (filterType === oFF.FilterDialogViewType.LIST)
	{
		return localization.getText(oFF.FilterDialogI18n.I18N_FD_FILTER_TAB_LIST);
	}
	if (filterType === oFF.FilterDialogViewType.RANGE)
	{
		return localization.getText(oFF.FilterDialogI18n.I18N_FD_FILTER_TAB_RANGE);
	}
	if (filterType === oFF.FilterDialogViewType.MEASURE_BASED_FILTER)
	{
		return localization.getText(oFF.FilterDialogI18n.I18N_FD_FILTER_TYPE_MBF);
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2(filterType.getName(), " is not supported"));
};
oFF.FdViewLayout.prototype.getViewTypeByTabBarItemName = function(selectedName)
{
	return oFF.FilterDialogViewType.getByName(oFF.XStringUtils.stripStart(selectedName, "FilterDialogTab"));
};
oFF.FdViewLayout.prototype.onResize = function(contentWidth, dialogWidth)
{
	if (oFF.notNull(this.m_splitter))
	{
		let selectionContainerVisible = oFF.FdLayoutUtils.isSelectionContainerVisible(oFF.FdLayoutSize.get(this.m_genesis.getUiManager().getDeviceInfo(), contentWidth, dialogWidth, true).getDialogSize());
		if (this.m_splitter.getParent() !== null && !selectionContainerVisible)
		{
			this.m_root.removeItem(this.m_splitter);
			this.m_root.addItem(this.m_tabBar);
		}
		else if (this.m_splitter.getParent() === null && selectionContainerVisible)
		{
			this.m_root.removeItem(this.m_tabBar);
			this.m_root.addItem(this.m_splitter);
			this.m_splitter.getItem(0).setContent(this.m_tabBar);
		}
	}
};
oFF.FdViewLayout.prototype.onSelect = function(event)
{
	let selectedName = event.getSelectedName();
	let selectedFilterType = oFF.notNull(this.m_functionalValueTabNames) && this.m_functionalValueTabNames.contains(selectedName) ? oFF.FilterDialogViewType.FUNCTIONAL_VALUES : this.getViewTypeByTabBarItemName(selectedName);
	if (oFF.notNull(selectedFilterType) && !oFF.XString.isEqual(this.m_selectedTabName, selectedName))
	{
		this.m_root.setBusy(true);
		if (this.m_typeChangeListener(selectedFilterType, oFF.XStringValue.create(selectedName)).getBoolean())
		{
			this.m_selectedTabName = selectedName;
		}
		else
		{
			this.m_tabBar.setSelectedName(this.m_selectedTabName);
		}
		this.m_root.setBusy(false);
	}
};
oFF.FdViewLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_genesis = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_splitter = oFF.XObjectExt.release(this.m_splitter);
	this.m_tabBar = oFF.XObjectExt.release(this.m_tabBar);
	this.m_selectedTabName = null;
	this.m_filterTypes = null;
	this.m_typeChangeListener = null;
	this.m_resizeListener = null;
	this.m_functionalValueViews = null;
	this.m_functionalValueTabNames = oFF.XObjectExt.release(this.m_functionalValueTabNames);
	this.m_selectionContainerLayout = oFF.XObjectExt.release(this.m_selectionContainerLayout);
};
oFF.FdViewLayout.prototype.setTabContent = function(layout)
{
	let layoutRoot = layout.getRoot();
	layoutRoot.setPadding(null);
	this.m_tabBar.getSelectedItem().setContent(layoutRoot);
};

oFF.FdClipboardListener = function() {};
oFF.FdClipboardListener.prototype = new oFF.XObject();
oFF.FdClipboardListener.prototype._ff_c = "FdClipboardListener";

oFF.FdClipboardListener.create = function(model, uiManager, listenerOnNewSelection, showIncludedItems, showExcludedItems)
{
	let listener = new oFF.FdClipboardListener();
	listener.m_model = model;
	listener.m_uiManager = uiManager;
	listener.m_listenerOnNewSelection = listenerOnNewSelection;
	listener.m_showIncludedItems = showIncludedItems;
	listener.m_showExcludedItems = showExcludedItems;
	return listener;
};
oFF.FdClipboardListener.prototype.m_clipboardController = null;
oFF.FdClipboardListener.prototype.m_clipboardHelper = null;
oFF.FdClipboardListener.prototype.m_listenerOnNewSelection = null;
oFF.FdClipboardListener.prototype.m_model = null;
oFF.FdClipboardListener.prototype.m_showExcludedItems = false;
oFF.FdClipboardListener.prototype.m_showIncludedItems = false;
oFF.FdClipboardListener.prototype.m_uiManager = null;
oFF.FdClipboardListener.prototype.getClipboardController = function()
{
	if (oFF.isNull(this.m_clipboardController))
	{
		this.m_clipboardController = oFF.CbController.create(this.m_uiManager);
	}
	return this.m_clipboardController;
};
oFF.FdClipboardListener.prototype.onClipboardCancel = function()
{
	this.getClipboardController().close();
	this.m_clipboardHelper = oFF.XObjectExt.release(this.m_clipboardHelper);
};
oFF.FdClipboardListener.prototype.onClipboardOk = function(hasChanged, text)
{
	if (hasChanged)
	{
		let items = oFF.FdItemFactory.asFdItemList(this.m_clipboardHelper.parseFromClipboard(text, !this.m_model.supportsDisplayKey()));
		this.m_listenerOnNewSelection.onNewClipboardSelection(items, this.m_showIncludedItems, this.m_showExcludedItems);
	}
	this.getClipboardController().close();
	this.m_clipboardHelper = oFF.XObjectExt.release(this.m_clipboardHelper);
};
oFF.FdClipboardListener.prototype.onPress = function(event)
{
	this.m_clipboardHelper = oFF.ClipboardHelperForFdItem.createHelper();
	let clipboardSelection = oFF.XCollectionUtils.filter(this.m_model.getSelectedItems(), (item) => {
		return item.getFdComparisonOperator().isEqualOperator() && (this.m_showIncludedItems && !item.isExcluded() || this.m_showExcludedItems && item.isExcluded());
	});
	let valueGrid = this.m_clipboardHelper.getValueGrid(oFF.FdItemFactory.asFdValueList(clipboardSelection));
	let text = oFF.DialogGridParser.serializeWithFormat(oFF.DialogGridFormat.SEMICOLON, valueGrid);
	this.getClipboardController().openClipboardDialog(null, text, this);
};
oFF.FdClipboardListener.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_model = null;
	this.m_uiManager = null;
	this.m_listenerOnNewSelection = null;
	this.m_clipboardHelper = oFF.XObjectExt.release(this.m_clipboardHelper);
	this.m_clipboardController = oFF.XObjectExt.release(this.m_clipboardController);
};

oFF.FdComponentMainPresentationSelection = function() {};
oFF.FdComponentMainPresentationSelection.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentMainPresentationSelection.prototype._ff_c = "FdComponentMainPresentationSelection";

oFF.FdComponentMainPresentationSelection.create = function(model, listenerOnPresentationChanged)
{
	let container = new oFF.FdComponentMainPresentationSelection();
	container.setupComponent(model, oFF.FdComponentMainPresentationSelectionLayout.create());
	container.m_listenerOnPresentationChanged = listenerOnPresentationChanged;
	return container;
};
oFF.FdComponentMainPresentationSelection.prototype.m_listenerOnPresentationChanged = null;
oFF.FdComponentMainPresentationSelection.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	this.publishAvailablePresentations();
};
oFF.FdComponentMainPresentationSelection.prototype.getFocusControl = function()
{
	return oFF.notNull(this.m_layout) ? this.getMainPresentationSelectionLayout().getDropdownMainPresentations() : null;
};
oFF.FdComponentMainPresentationSelection.prototype.getMainPresentationSelectionLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentMainPresentationSelection.prototype.onSelect = function(event)
{
	let dropdownMainPresentations = this.getMainPresentationSelectionLayout().getDropdownMainPresentations();
	dropdownMainPresentations.setTooltip(dropdownMainPresentations.getSelectedName());
	this.m_model.getPresentationsModel().setSelectedPresentations(dropdownMainPresentations.getSelectedItem().getCustomObject(), this.m_model.getPresentationsModel().getSelectedAdditionalPresentations());
	this.m_listenerOnPresentationChanged();
};
oFF.FdComponentMainPresentationSelection.prototype.publishAvailablePresentations = function()
{
	let mainPresentationDropdown = this.getMainPresentationSelectionLayout().getDropdownMainPresentations();
	mainPresentationDropdown.clearItems();
	this.addDropdownItems(mainPresentationDropdown, this.m_model.getPresentationsModel().getMainPresentations());
	let selectedMainPresentation = this.m_model.getPresentationsModel().getSelectedMainPresentation().getName();
	mainPresentationDropdown.setSelectedName(selectedMainPresentation);
	mainPresentationDropdown.setTooltip(selectedMainPresentation);
	mainPresentationDropdown.registerOnSelect(this);
};
oFF.FdComponentMainPresentationSelection.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_listenerOnPresentationChanged = null;
};

oFF.FdComponentMainPresentationSelectionLayout = function() {};
oFF.FdComponentMainPresentationSelectionLayout.prototype = new oFF.XObject();
oFF.FdComponentMainPresentationSelectionLayout.prototype._ff_c = "FdComponentMainPresentationSelectionLayout";

oFF.FdComponentMainPresentationSelectionLayout.create = function()
{
	return new oFF.FdComponentMainPresentationSelectionLayout();
};
oFF.FdComponentMainPresentationSelectionLayout.prototype.m_dropdownMainPresentations = null;
oFF.FdComponentMainPresentationSelectionLayout.prototype.m_presentationsContainer = null;
oFF.FdComponentMainPresentationSelectionLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_presentationsContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_presentationsContainer.setName("FilterDialogMainPresentationsContainer");
	this.m_presentationsContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_presentationsContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_presentationsContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	let presentationLabel = this.m_presentationsContainer.addNewItemOfType(oFF.UiType.LABEL);
	presentationLabel.setName("FilterDialogPresentationLabel");
	presentationLabel.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_SHOW_PRESENTATION));
	presentationLabel.setMargin(oFF.UiCssBoxEdges.create("0 0.5rem 0 0"));
	this.m_dropdownMainPresentations = this.m_presentationsContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_dropdownMainPresentations.setName("FilterDialogDropdownMainPresentations");
	presentationLabel.setLabelFor(this.m_dropdownMainPresentations);
};
oFF.FdComponentMainPresentationSelectionLayout.prototype.getDropdownMainPresentations = function()
{
	return this.m_dropdownMainPresentations;
};
oFF.FdComponentMainPresentationSelectionLayout.prototype.getRoot = function()
{
	return this.m_presentationsContainer;
};
oFF.FdComponentMainPresentationSelectionLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_presentationsContainer = oFF.XObjectExt.release(this.m_presentationsContainer);
};
oFF.FdComponentMainPresentationSelectionLayout.prototype.resizeComponent = function(size) {};

oFF.FdComponentPresentationSelection = function() {};
oFF.FdComponentPresentationSelection.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentPresentationSelection.prototype._ff_c = "FdComponentPresentationSelection";

oFF.FdComponentPresentationSelection.create = function(model, listenerOnPresentationsChanged)
{
	let container = new oFF.FdComponentPresentationSelection();
	container.setupComponent(model, oFF.FdComponentPresentationSelectionLayout.create());
	container.m_listenerOnPresentationsChanged = listenerOnPresentationsChanged;
	return container;
};
oFF.FdComponentPresentationSelection.prototype.m_listenerOnPresentationsChanged = null;
oFF.FdComponentPresentationSelection.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	let layout = this.m_layout;
	this.publishAvailablePresentations();
	if (genesis.getUiManager().getDeviceInfo().isSmartphone())
	{
		layout.getComboBoxAdditionalPresentations().registerOnSelectionFinish(this);
	}
	let showHierarchyDropdown = this.m_model.isFeatureEnabled(oFF.FdFeature.HIERARCHY_CHANGE);
	layout.setHierarchyDropdownVisible(showHierarchyDropdown);
	if (showHierarchyDropdown)
	{
		let hierarchyModel = this.m_model.getHierarchyModel();
		this.onAvailableHierarchiesChanged(hierarchyModel.getHierarchies(), hierarchyModel.getHierarchyName());
		hierarchyModel.registerOnAvailableHierarchiesChange(this);
		layout.getDropdownHierarchySelection().registerOnSelect(this);
	}
};
oFF.FdComponentPresentationSelection.prototype.getAdditionalPresentations = function()
{
	let presentations = oFF.XList.create();
	let selectedItems = this.getPresentationSelectionLayout().getComboBoxAdditionalPresentations().getSelectedItems();
	let size = selectedItems.size();
	for (let i = 0; i < size; i++)
	{
		presentations.add(selectedItems.get(i).getCustomObject());
	}
	return presentations;
};
oFF.FdComponentPresentationSelection.prototype.getDropdownItemsSelectedByDefault = function(items, selectedPresentations)
{
	let selectedItems = oFF.XList.create();
	for (let i = 0; i < items.size(); i++)
	{
		if (selectedPresentations.contains(items.get(i).getCustomObject()))
		{
			selectedItems.add(items.get(i));
		}
	}
	return selectedItems.hasElements() ? selectedItems : null;
};
oFF.FdComponentPresentationSelection.prototype.getFocusControl = function()
{
	return oFF.notNull(this.m_layout) ? this.getPresentationSelectionLayout().getDropdownMainPresentations() : null;
};
oFF.FdComponentPresentationSelection.prototype.getMainPresentation = function()
{
	let selection = this.getPresentationSelectionLayout().getDropdownMainPresentations().getSelectedItem();
	return oFF.notNull(selection) ? selection.getCustomObject() : null;
};
oFF.FdComponentPresentationSelection.prototype.getPresentationSelectionLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentPresentationSelection.prototype.getSelectedPresentations = function()
{
	let result = oFF.XLinkedHashMapByString.create();
	let mainPresentation = this.getMainPresentation();
	let primaryValue = mainPresentation.getPrimaryValue();
	let secondaryValue = mainPresentation.getSecondaryValue();
	result.put(primaryValue.getName(), primaryValue);
	if (oFF.notNull(secondaryValue))
	{
		result.put(secondaryValue.getName(), secondaryValue);
	}
	let showKey = mainPresentation.hasKeyPresentation();
	let showText = mainPresentation.hasTextPresentation();
	let isKeyPrimary = mainPresentation.isKeyPrimary();
	oFF.XCollectionUtils.forEach(this.getAdditionalPresentations(), (presentation) => {
		let keyPresentation = presentation.getKeyPresentation();
		let textPresentation = presentation.getTextPresentation();
		let keyVisible = oFF.notNull(keyPresentation) && (showKey || oFF.isNull(textPresentation));
		let textVisible = oFF.notNull(textPresentation) && (showText || oFF.isNull(keyPresentation));
		if (textVisible && !isKeyPrimary)
		{
			result.put(presentation.getName(), textPresentation);
		}
		if (keyVisible)
		{
			result.put(textVisible ? keyPresentation.getName() : presentation.getName(), keyPresentation);
		}
		if (textVisible && isKeyPrimary)
		{
			result.put(presentation.getName(), textPresentation);
		}
	});
	return result;
};
oFF.FdComponentPresentationSelection.prototype.onAvailableHierarchiesChanged = function(hierarchies, activeHierarchy)
{
	let layout = this.getPresentationSelectionLayout();
	let showHierarchies = oFF.XCollectionUtils.hasElements(hierarchies) || oFF.XStringUtils.isNotNullAndNotEmpty(activeHierarchy);
	layout.setHierarchyDropdownVisible(showHierarchies);
	if (showHierarchies)
	{
		let hierarchyDropdown = layout.getDropdownHierarchySelection();
		hierarchyDropdown.clearItems();
		let flatPresentationText = oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_HIERARCHY_FLAT_PRESENTATION);
		oFF.FdLayoutUtils.addDropdownItem(hierarchyDropdown, flatPresentationText, flatPresentationText, null);
		let hierarchyNames = hierarchies.getKeysAsReadOnlyList();
		oFF.XCollectionUtils.forEach(hierarchyNames, (hierarchyName) => {
			oFF.FdLayoutUtils.addDropdownItem(hierarchyDropdown, hierarchyName, hierarchies.getByKey(hierarchyName), null);
		});
		let selectedHierarchy = oFF.XStringUtils.isNotNullAndNotEmpty(activeHierarchy) ? activeHierarchy : flatPresentationText;
		hierarchyDropdown.setSelectedName(selectedHierarchy);
		this.updateHierarchyDropdownTooltip();
		this.m_model.registerOnSelectionChange(this);
		layout.setShowHierarchyDropdownInfoText(oFF.XCollectionUtils.contains(this.m_model.getSelectedItems(), (item) => {
			return item.getComparisonOperator().isRange();
		}));
	}
};
oFF.FdComponentPresentationSelection.prototype.onSelect = function(event)
{
	let layout = this.getPresentationSelectionLayout();
	let dropdownMainPresentations = layout.getDropdownMainPresentations();
	if (event.getControl() === dropdownMainPresentations)
	{
		dropdownMainPresentations.setTooltip(dropdownMainPresentations.getSelectedName());
		this.m_listenerOnPresentationsChanged();
		return;
	}
	let dropdownHierarchySelection = layout.getDropdownHierarchySelection();
	if (event.getControl() === dropdownHierarchySelection)
	{
		let selectedHierarchy = dropdownHierarchySelection.getSelectedName();
		this.updateHierarchyDropdownTooltip();
		if (oFF.XString.isEqual(selectedHierarchy, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_HIERARCHY_FLAT_PRESENTATION)))
		{
			selectedHierarchy = null;
		}
		this.m_model.getHierarchyModel().changeHierarchy(selectedHierarchy);
	}
};
oFF.FdComponentPresentationSelection.prototype.onSelectionChange = function(selection)
{
	this.getPresentationSelectionLayout().setShowHierarchyDropdownInfoText(oFF.XCollectionUtils.contains(selection, (item) => {
		return item.getComparisonOperator().isRange();
	}));
};
oFF.FdComponentPresentationSelection.prototype.onSelectionFinish = function(event)
{
	this.updateAdditionalPresentationsTooltip();
	this.m_listenerOnPresentationsChanged();
};
oFF.FdComponentPresentationSelection.prototype.publishAvailablePresentations = function()
{
	let presentationsModel = this.m_model.getPresentationsModel();
	let layout = this.getPresentationSelectionLayout();
	let mainPresentationDropdown = layout.getDropdownMainPresentations();
	mainPresentationDropdown.clearItems();
	this.addDropdownItems(mainPresentationDropdown, presentationsModel.getMainPresentations());
	let selectedMainPresentation = presentationsModel.getSelectedMainPresentation().getName();
	mainPresentationDropdown.setSelectedName(selectedMainPresentation);
	mainPresentationDropdown.setTooltip(selectedMainPresentation);
	mainPresentationDropdown.registerOnSelect(this);
	let additionalPresentations = layout.getComboBoxAdditionalPresentations();
	additionalPresentations.clearItems();
	let dropdownItems = this.addDropdownItems(additionalPresentations, presentationsModel.getAdditionalPresentations());
	additionalPresentations.setSelectedItems(this.getDropdownItemsSelectedByDefault(dropdownItems, presentationsModel.getSelectedAdditionalPresentations()));
	this.updateAdditionalPresentationsTooltip();
	layout.setAdditionalPresentationsVisible(dropdownItems.hasElements());
	additionalPresentations.registerOnSelectionChange(oFF.UiLambdaSelectionChangeListener.create((event) => {
		this.updateAdditionalPresentationsTooltip();
		this.m_listenerOnPresentationsChanged();
	}));
};
oFF.FdComponentPresentationSelection.prototype.releaseObject = function()
{
	this.m_listenerOnPresentationsChanged = null;
	this.m_model.unregisterOnSelectionChange(this);
	this.m_model.getHierarchyModel().unregisterOnAvailableHierarchiesChange(this);
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
};
oFF.FdComponentPresentationSelection.prototype.updateAdditionalPresentationsTooltip = function()
{
	let comboBoxAdditionalPresentations = this.getPresentationSelectionLayout().getComboBoxAdditionalPresentations();
	if (comboBoxAdditionalPresentations.isVisible())
	{
		let selectedItems = comboBoxAdditionalPresentations.getSelectedItems();
		comboBoxAdditionalPresentations.setTooltip(oFF.XCollectionUtils.hasElements(selectedItems) ? oFF.XCollectionUtils.join(oFF.XStream.of(selectedItems).collect(oFF.XStreamCollector.toListOfString((item) => {
			return item.getName();
		})), ",") : null);
	}
};
oFF.FdComponentPresentationSelection.prototype.updateHierarchyDropdownTooltip = function()
{
	let dropdown = this.getPresentationSelectionLayout().getDropdownHierarchySelection();
	let hierarchyName = dropdown.getSelectedName();
	if (!oFF.XString.isEqual(hierarchyName, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_HIERARCHY_FLAT_PRESENTATION)))
	{
		let hierarchies = this.m_model.getHierarchyModel().getHierarchies();
		let hierarchyText = oFF.notNull(hierarchies) ? hierarchies.getByKey(hierarchyName) : null;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyText) && !oFF.XString.isEqual(hierarchyText, hierarchyName))
		{
			dropdown.setTooltip(oFF.XStringUtils.concatenate3(hierarchyName, " - ", hierarchyText));
			return;
		}
	}
	dropdown.setTooltip(hierarchyName);
};

oFF.FdComponentPresentationSelectionLayout = function() {};
oFF.FdComponentPresentationSelectionLayout.prototype = new oFF.XObject();
oFF.FdComponentPresentationSelectionLayout.prototype._ff_c = "FdComponentPresentationSelectionLayout";

oFF.FdComponentPresentationSelectionLayout.MARGIN = "0 0 0 0.25rem";
oFF.FdComponentPresentationSelectionLayout.create = function()
{
	return new oFF.FdComponentPresentationSelectionLayout();
};
oFF.FdComponentPresentationSelectionLayout.prototype.m_additionalPresentationsContainer = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_comboBoxAdditionalPresentations = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_dropdownHierarchySelection = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_dropdownMainPresentations = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_hierarchyContainer = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_mainPresentationsContainer = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_presentationsContainer = null;
oFF.FdComponentPresentationSelectionLayout.prototype.m_size = null;
oFF.FdComponentPresentationSelectionLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let margin = oFF.UiCssBoxEdges.create(oFF.FdComponentPresentationSelectionLayout.MARGIN);
	this.m_presentationsContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_presentationsContainer.setName("FilterDialogPresentationWrapper");
	this.m_presentationsContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_presentationsContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_presentationsContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_presentationsContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_presentationsContainer.setWidth(oFF.UiCssLength.create("100%"));
	this.m_mainPresentationsContainer = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_mainPresentationsContainer.setName("FilterDialogMainPresentationsContainer");
	this.m_presentationsContainer.addItem(this.m_mainPresentationsContainer);
	let presentationLabel = genesis.newControl(oFF.UiType.LABEL);
	presentationLabel.setName("FilterDialogPresentationLabel");
	presentationLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_SHOW_PRESENTATION));
	this.m_mainPresentationsContainer.addItem(presentationLabel);
	this.m_dropdownMainPresentations = genesis.newControl(oFF.UiType.DROPDOWN);
	this.m_dropdownMainPresentations.setName("FilterDialogDropdownMainPresentations");
	this.m_dropdownMainPresentations.setWidth(oFF.UiCssLength.create("100%"));
	presentationLabel.setLabelFor(this.m_dropdownMainPresentations);
	this.m_mainPresentationsContainer.addItem(this.m_dropdownMainPresentations);
	this.m_hierarchyContainer = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_hierarchyContainer.setName("FilterDialogHierarchyContainer");
	this.m_hierarchyContainer.setMargin(margin);
	this.m_presentationsContainer.addItem(this.m_hierarchyContainer);
	let hierarchyLabel = genesis.newControl(oFF.UiType.LABEL);
	hierarchyLabel.setName("FilterDialogHierarchyLabel");
	hierarchyLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_HIERARCHY));
	this.m_hierarchyContainer.addItem(hierarchyLabel);
	this.m_dropdownHierarchySelection = genesis.newControl(oFF.UiType.DROPDOWN);
	this.m_dropdownHierarchySelection.setName("FilterDialogDropdownHierarchy");
	this.m_dropdownHierarchySelection.setWidth(oFF.UiCssLength.create("100%"));
	hierarchyLabel.setLabelFor(this.m_dropdownHierarchySelection);
	this.m_hierarchyContainer.addItem(this.m_dropdownHierarchySelection);
	this.m_additionalPresentationsContainer = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_additionalPresentationsContainer.setName("FilterDialogAdditionalPresentationsContainer");
	this.m_additionalPresentationsContainer.setMargin(margin);
	this.m_presentationsContainer.addItem(this.m_additionalPresentationsContainer);
	let additionalPresentationsLabel = genesis.newControl(oFF.UiType.LABEL);
	additionalPresentationsLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_ATTRIBUTES));
	this.m_additionalPresentationsContainer.addItem(additionalPresentationsLabel);
	this.m_comboBoxAdditionalPresentations = genesis.newControl(oFF.UiType.MULTI_COMBO_BOX);
	this.m_comboBoxAdditionalPresentations.setName("FilterDialogComboBoxAdditionalPresentations");
	this.m_comboBoxAdditionalPresentations.setWidth(oFF.UiCssLength.create("100%"));
	this.m_comboBoxAdditionalPresentations.setPlaceholder(localization.getText(oFF.FilterDialogI18n.I18N_FD_SELECT_ATTRIBUTE));
	additionalPresentationsLabel.setLabelFor(this.m_comboBoxAdditionalPresentations);
	this.m_additionalPresentationsContainer.addItem(this.m_comboBoxAdditionalPresentations);
	this.updateDropdownSizes();
};
oFF.FdComponentPresentationSelectionLayout.prototype.getComboBoxAdditionalPresentations = function()
{
	return this.m_comboBoxAdditionalPresentations;
};
oFF.FdComponentPresentationSelectionLayout.prototype.getDropdownHierarchySelection = function()
{
	return this.m_dropdownHierarchySelection;
};
oFF.FdComponentPresentationSelectionLayout.prototype.getDropdownMainPresentations = function()
{
	return this.m_dropdownMainPresentations;
};
oFF.FdComponentPresentationSelectionLayout.prototype.getRoot = function()
{
	return this.m_presentationsContainer;
};
oFF.FdComponentPresentationSelectionLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_size = oFF.XObjectExt.release(this.m_size);
	this.m_mainPresentationsContainer = oFF.XObjectExt.release(this.m_mainPresentationsContainer);
	this.m_dropdownMainPresentations = oFF.XObjectExt.release(this.m_dropdownMainPresentations);
	this.m_additionalPresentationsContainer = oFF.XObjectExt.release(this.m_additionalPresentationsContainer);
	this.m_comboBoxAdditionalPresentations = oFF.XObjectExt.release(this.m_comboBoxAdditionalPresentations);
	this.m_hierarchyContainer = oFF.XObjectExt.release(this.m_hierarchyContainer);
	this.m_dropdownHierarchySelection = oFF.XObjectExt.release(this.m_dropdownHierarchySelection);
};
oFF.FdComponentPresentationSelectionLayout.prototype.resizeComponent = function(size)
{
	this.m_size = size;
	if (this.m_hierarchyContainer.isVisible() || this.m_additionalPresentationsContainer.isVisible())
	{
		this.updateDropdownSizes();
	}
};
oFF.FdComponentPresentationSelectionLayout.prototype.setAdditionalPresentationsVisible = function(visible)
{
	if (this.m_additionalPresentationsContainer.isVisible() !== visible)
	{
		this.m_additionalPresentationsContainer.setVisible(visible);
		this.updateDropdownSizes();
	}
};
oFF.FdComponentPresentationSelectionLayout.prototype.setHierarchyDropdownVisible = function(visible)
{
	if (this.m_hierarchyContainer.isVisible() !== visible)
	{
		this.m_hierarchyContainer.setVisible(visible);
		this.updateDropdownSizes();
	}
};
oFF.FdComponentPresentationSelectionLayout.prototype.setShowHierarchyDropdownInfoText = function(showInfoText)
{
	this.m_dropdownHierarchySelection.setValueState(showInfoText ? oFF.UiValueState.INFORMATION : null);
	this.m_dropdownHierarchySelection.setValueStateText(showInfoText ? oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_HIERARCHY_INFO) : null);
};
oFF.FdComponentPresentationSelectionLayout.prototype.updateDropdownSizes = function()
{
	if (oFF.notNull(this.m_size) && (this.m_size.getContentSize().isLarge() || (this.m_size.getContentSize().isMedium() && (!this.m_hierarchyContainer.isVisible() || !this.m_additionalPresentationsContainer.isVisible()))))
	{
		let fixWidth = oFF.UiCssLength.create(oFF.FdLayoutUtils.DROPDOWN_WIDTH);
		let margin = oFF.UiCssBoxEdges.create(oFF.FdComponentPresentationSelectionLayout.MARGIN);
		let additionalPresentationsVisible = this.m_additionalPresentationsContainer.isVisible();
		this.m_presentationsContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
		this.m_mainPresentationsContainer.setWidth(additionalPresentationsVisible || this.m_hierarchyContainer.isVisible() ? fixWidth : oFF.UiCssLength.create("100%"));
		this.m_mainPresentationsContainer.setFlex("0 0 auto");
		this.m_hierarchyContainer.setWidth(additionalPresentationsVisible ? fixWidth : null);
		this.m_hierarchyContainer.setFlex(additionalPresentationsVisible ? "0 0 auto" : "1 1 auto");
		this.m_hierarchyContainer.setMargin(margin);
		this.m_additionalPresentationsContainer.setWidth(null);
		this.m_additionalPresentationsContainer.setFlex("1 1 auto");
		this.m_additionalPresentationsContainer.setMargin(margin);
	}
	else
	{
		this.m_presentationsContainer.setWrap(oFF.UiFlexWrap.WRAP);
		this.m_mainPresentationsContainer.useMaxWidth();
		this.m_hierarchyContainer.useMaxWidth();
		this.m_hierarchyContainer.setMargin(null);
		this.m_additionalPresentationsContainer.useMaxWidth();
		this.m_additionalPresentationsContainer.setMargin(null);
	}
};

oFF.FdComponentSearch = function() {};
oFF.FdComponentSearch.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentSearch.prototype._ff_c = "FdComponentSearch";

oFF.FdComponentSearch.SEARCH_DEBOUNCE_TIMEOUT = 1000;
oFF.FdComponentSearch.create = function(model, listenerOnSearch)
{
	let container = new oFF.FdComponentSearch();
	container.setupComponent(model, oFF.FdComponentSearchLayout.create());
	container.m_listenerOnSearch = listenerOnSearch;
	return container;
};
oFF.FdComponentSearch.prototype.m_listenerOnSearch = null;
oFF.FdComponentSearch.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	let layout = this.getSearchContainerLayout();
	let searchField = layout.getSearchField();
	searchField.setValue(this.m_model.getInitialSearchValue());
	searchField.registerOnSearch(this);
	searchField.registerOnLiveChange(oFF.UiLambdaLiveChangeWithDebounceListener.create((controlEvent) => {
		this.m_listenerOnSearch();
	}, oFF.FdComponentSearch.SEARCH_DEBOUNCE_TIMEOUT));
	layout.setDropdownVisible(!this.m_model.getConfig().isShowSimplifiedSearch());
	this.publishAvailablePresentations();
};
oFF.FdComponentSearch.prototype.clearSearch = function()
{
	this.getSearchContainerLayout().getSearchField().setValue(null);
};
oFF.FdComponentSearch.prototype.getFocusControl = function()
{
	return oFF.notNull(this.m_layout) ? this.getSearchContainerLayout().getSearchField() : null;
};
oFF.FdComponentSearch.prototype.getSearchContainerLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentSearch.prototype.getSearchPresentations = function()
{
	let dropdownSearch = this.getSearchContainerLayout().getDropdownSearch();
	if (dropdownSearch.isVisible())
	{
		let selection = dropdownSearch.getSelectedItem();
		let presentation = oFF.notNull(selection) ? selection.getCustomObject() : null;
		if (oFF.notNull(presentation))
		{
			return presentation.getFilterableValues();
		}
	}
	return oFF.XList.create();
};
oFF.FdComponentSearch.prototype.getSearchText = function()
{
	return this.getSearchContainerLayout().getSearchField().getValue();
};
oFF.FdComponentSearch.prototype.isSearchActive = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getSearchContainerLayout().getSearchField().getValue());
};
oFF.FdComponentSearch.prototype.onSearch = function(event)
{
	oFF.UtUiHelpers.cancelLiveChangeDebounceIfNeeded(event.getControl());
	this.m_listenerOnSearch();
};
oFF.FdComponentSearch.prototype.onSelect = function(event)
{
	if (this.isSearchActive())
	{
		this.m_listenerOnSearch();
	}
};
oFF.FdComponentSearch.prototype.publishAvailablePresentations = function()
{
	let presentationsForSearch = this.m_model.getPresentationsModel().getFilterablePresentations();
	if (oFF.XCollectionUtils.hasElements(presentationsForSearch))
	{
		this.getSearchContainerLayout().setSearchVisible(true);
		let dropdownSearch = this.getSearchContainerLayout().getDropdownSearch();
		if (dropdownSearch.isVisible())
		{
			let selectedName = dropdownSearch.getSelectedName();
			let hasSelection = oFF.XStringUtils.isNotNullAndNotEmpty(selectedName);
			if (!hasSelection || !oFF.XCollectionUtils.contains(presentationsForSearch, (p) => {
				return oFF.XString.isEqual(p.getName(), dropdownSearch.getSelectedName());
			}))
			{
				selectedName = this.m_model.getPresentationsModel().getDefaultSearchPresentation().getName();
				if (hasSelection)
				{
					this.clearSearch();
				}
			}
			dropdownSearch.clearItems();
			this.addDropdownItems(dropdownSearch, presentationsForSearch);
			dropdownSearch.setSelectedName(selectedName);
			dropdownSearch.registerOnSelect(this);
		}
	}
	else
	{
		this.getSearchContainerLayout().setSearchVisible(false);
	}
};
oFF.FdComponentSearch.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_listenerOnSearch = null;
};

oFF.FdComponentSearchLayout = function() {};
oFF.FdComponentSearchLayout.prototype = new oFF.XObject();
oFF.FdComponentSearchLayout.prototype._ff_c = "FdComponentSearchLayout";

oFF.FdComponentSearchLayout.create = function()
{
	return new oFF.FdComponentSearchLayout();
};
oFF.FdComponentSearchLayout.prototype.m_dropdownSearch = null;
oFF.FdComponentSearchLayout.prototype.m_searchContainer = null;
oFF.FdComponentSearchLayout.prototype.m_searchField = null;
oFF.FdComponentSearchLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_searchContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_searchContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_searchContainer.setJustifyContent(oFF.UiFlexJustifyContent.END);
	this.m_searchContainer.setAlignItems(oFF.UiFlexAlignItems.END);
	this.m_searchContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_searchContainer.setName("FilterDialogSearchContainer");
	this.m_searchField = genesis.newControl(oFF.UiType.SEARCH_FIELD);
	this.m_searchField.setName("FilterDialogSearchInput");
	this.m_searchField.setWidth(oFF.UiCssLength.create("250px"));
	this.m_searchField.setMargin(oFF.UiCssBoxEdges.create("0 0.25rem 0 0"));
	this.m_searchContainer.addItem(this.m_searchField);
	this.m_dropdownSearch = genesis.newControl(oFF.UiType.DROPDOWN);
	this.m_dropdownSearch.setName("FilterDialogDropdownSearch");
	this.m_dropdownSearch.setWidth(oFF.UiCssLength.create(oFF.FdLayoutUtils.DROPDOWN_WIDTH));
	this.m_dropdownSearch.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_SEARCH_TOOLTIP));
	this.m_searchContainer.addItem(this.m_dropdownSearch);
};
oFF.FdComponentSearchLayout.prototype.getDropdownSearch = function()
{
	return this.m_dropdownSearch;
};
oFF.FdComponentSearchLayout.prototype.getRoot = function()
{
	return this.m_searchContainer;
};
oFF.FdComponentSearchLayout.prototype.getSearchField = function()
{
	return this.m_searchField;
};
oFF.FdComponentSearchLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_searchContainer = oFF.XObjectExt.release(this.m_searchContainer);
	this.m_dropdownSearch = oFF.XObjectExt.release(this.m_dropdownSearch);
	this.m_searchField = oFF.XObjectExt.release(this.m_searchField);
};
oFF.FdComponentSearchLayout.prototype.resizeComponent = function(size) {};
oFF.FdComponentSearchLayout.prototype.setDropdownVisible = function(visible)
{
	this.m_dropdownSearch.setVisible(visible);
	this.m_searchField.setMargin(oFF.UiCssBoxEdges.create(visible ? "0 0.25rem 0 0" : "0"));
	this.m_searchField.setPlaceholder(oFF.XLocalizationCenter.getCenter().getText(visible ? oFF.FilterDialogI18n.I18N_FD_SEARCH : oFF.FilterDialogI18n.I18N_FD_SEARCH_SIMPLIFIED));
};
oFF.FdComponentSearchLayout.prototype.setSearchVisible = function(visible)
{
	this.m_searchContainer.setVisible(visible);
};

oFF.FdComponentSelectionContainer = function() {};
oFF.FdComponentSelectionContainer.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentSelectionContainer.prototype._ff_c = "FdComponentSelectionContainer";

oFF.FdComponentSelectionContainer.create = function(model, listenerOnNewSelection, usedInMainContentArea)
{
	let container = new oFF.FdComponentSelectionContainer();
	container.setupSelectionContainer(model, listenerOnNewSelection, usedInMainContentArea);
	return container;
};
oFF.FdComponentSelectionContainer.prototype.m_excludes = null;
oFF.FdComponentSelectionContainer.prototype.m_genesis = null;
oFF.FdComponentSelectionContainer.prototype.m_includes = null;
oFF.FdComponentSelectionContainer.prototype.m_listenerOnNewSelection = null;
oFF.FdComponentSelectionContainer.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_includes.buildOlapDialogUi(genesis);
	this.m_layout.buildOlapDialogUi(genesis);
	this.onFeatureAvailabilityChanged(oFF.FdFeature.EXCLUDE_ADVANCED, this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED));
	this.getSelectionContainerLayout().registerOnSelectionClearPress(oFF.UiLambdaPressListener.create((evt) => {
		this.m_model.clearSelection();
		oFF.FdLayoutUtils.announceSelectionCleared();
	}));
	this.m_model.registerOnSelectionChange(this);
	this.m_model.registerOnFeatureAvailabilityChange(this);
};
oFF.FdComponentSelectionContainer.prototype.getFocusControl = function()
{
	return null;
};
oFF.FdComponentSelectionContainer.prototype.getSelectionContainerLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentSelectionContainer.prototype.onFeatureAvailabilityChanged = function(feature, available)
{
	if (feature === oFF.FdFeature.EXCLUDE_ADVANCED)
	{
		if (available && oFF.isNull(this.m_excludes))
		{
			this.m_excludes = oFF.FdComponentSelectionList.create(this.m_model, this, false);
			this.m_excludes.buildOlapDialogUi(this.m_genesis);
		}
		if (oFF.notNull(this.m_excludes))
		{
			this.getSelectionContainerLayout().setExcludeList(this.m_excludes.getLayout(), available);
		}
	}
};
oFF.FdComponentSelectionContainer.prototype.onNewClipboardSelection = function(items, includedItems, excludedItems)
{
	this.setBusy(true);
	this.m_listenerOnNewSelection.onNewClipboardSelection(items, includedItems, excludedItems);
};
oFF.FdComponentSelectionContainer.prototype.onSelectionChange = function(selection)
{
	this.setBusy(false);
};
oFF.FdComponentSelectionContainer.prototype.releaseObject = function()
{
	this.m_model.unregisterOnSelectionChange(this);
	this.m_model.unregisterOnFeatureAvailabilityChange(this);
	this.m_includes = oFF.XObjectExt.release(this.m_includes);
	this.m_excludes = oFF.XObjectExt.release(this.m_excludes);
	this.m_listenerOnNewSelection = null;
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
};
oFF.FdComponentSelectionContainer.prototype.setBusy = function(busy)
{
	this.m_includes.setBusy(busy);
	if (oFF.notNull(this.m_excludes))
	{
		this.m_excludes.setBusy(busy);
	}
	this.getSelectionContainerLayout().setClearButtonEnabled(!busy);
};
oFF.FdComponentSelectionContainer.prototype.setupSelectionContainer = function(model, listenerOnNewSelection, usedInMainContentArea)
{
	this.m_includes = oFF.FdComponentSelectionList.create(model, this, true);
	this.m_listenerOnNewSelection = listenerOnNewSelection;
	this.setupComponent(model, oFF.FdComponentSelectionContainerLayout.create(usedInMainContentArea, oFF.FdLayoutUtils.isMultiView(model), this.m_includes.getLayout()));
};

oFF.FdComponentSelectionContainerLayout = function() {};
oFF.FdComponentSelectionContainerLayout.prototype = new oFF.XObject();
oFF.FdComponentSelectionContainerLayout.prototype._ff_c = "FdComponentSelectionContainerLayout";

oFF.FdComponentSelectionContainerLayout.create = function(usedInMainContentArea, usedInMultiView, listLayout)
{
	let layout = new oFF.FdComponentSelectionContainerLayout();
	layout.m_usedInMainContentArea = usedInMainContentArea;
	layout.m_usedInMultiView = usedInMultiView;
	layout.m_listLayout = listLayout;
	return layout;
};
oFF.FdComponentSelectionContainerLayout.prototype.m_listLayout = null;
oFF.FdComponentSelectionContainerLayout.prototype.m_selectionContainer = null;
oFF.FdComponentSelectionContainerLayout.prototype.m_selectionListClearBtn = null;
oFF.FdComponentSelectionContainerLayout.prototype.m_selectionListContainer = null;
oFF.FdComponentSelectionContainerLayout.prototype.m_usedInMainContentArea = false;
oFF.FdComponentSelectionContainerLayout.prototype.m_usedInMultiView = false;
oFF.FdComponentSelectionContainerLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_selectionContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_selectionContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_selectionContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_selectionContainer.setAlignItems(oFF.UiFlexAlignItems.START);
	this.m_selectionContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_selectionContainer.setName("FilterDialogSelectionContainer");
	this.m_selectionContainer.useMaxSpace();
	if (this.m_usedInMainContentArea)
	{
		this.m_selectionContainer.setMargin(oFF.UiCssBoxEdges.create("0 -0.5rem 0 0.5rem"));
	}
	else if (this.m_usedInMultiView)
	{
		this.m_selectionContainer.setPadding(oFF.UiCssBoxEdges.create("0.25rem 0.25rem 1rem 0.25rem"));
	}
	else
	{
		this.m_selectionContainer.setPadding(oFF.UiCssBoxEdges.create("1rem 0.25rem"));
	}
	this.m_selectionListContainer = this.m_selectionContainer.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	this.m_selectionListContainer.setName("FilterDialogSelectionListsContainer");
	this.m_selectionListContainer.useMaxSpace();
	this.m_selectionListContainer.addItem(this.m_listLayout.getRoot());
	let clearButtonContainer = this.m_selectionContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	clearButtonContainer.setDirection(oFF.UiFlexDirection.ROW);
	clearButtonContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	clearButtonContainer.setFlex("0 0 auto");
	clearButtonContainer.useMaxWidth();
	clearButtonContainer.setName("FilterDialogPreviewListClearBtnContainer");
	this.m_selectionListClearBtn = oFF.FdLayoutUtils.addClearSelectionButton(clearButtonContainer, "FilterDialogPreviewListClearBtn");
};
oFF.FdComponentSelectionContainerLayout.prototype.getRoot = function()
{
	return this.m_selectionContainer;
};
oFF.FdComponentSelectionContainerLayout.prototype.registerOnSelectionClearPress = function(listener)
{
	if (oFF.notNull(this.m_selectionListClearBtn))
	{
		this.m_selectionListClearBtn.registerOnPress(listener);
	}
};
oFF.FdComponentSelectionContainerLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_selectionContainer = oFF.XObjectExt.release(this.m_selectionContainer);
};
oFF.FdComponentSelectionContainerLayout.prototype.resizeComponent = function(size) {};
oFF.FdComponentSelectionContainerLayout.prototype.setClearButtonEnabled = function(enabled)
{
	this.m_selectionListClearBtn.setEnabled(enabled);
};
oFF.FdComponentSelectionContainerLayout.prototype.setExcludeList = function(excludeListLayout, visible)
{
	let includeRoot = this.m_listLayout.getRoot();
	let excludeRoot = excludeListLayout.getRoot();
	if (visible)
	{
		if (this.m_selectionListContainer.getIndexOfItem(excludeRoot) === -1)
		{
			this.m_selectionListContainer.addItem(excludeRoot);
		}
		includeRoot.setHeight(oFF.UiCssLength.create("50%"));
		includeRoot.setMinHeight(oFF.UiCssLength.create(this.m_usedInMainContentArea ? "100px" : "150px"));
		excludeRoot.setHeight(oFF.UiCssLength.create("50%"));
		excludeRoot.setMinHeight(oFF.UiCssLength.create(this.m_usedInMainContentArea ? "100px" : "150px"));
		excludeRoot.setVisible(true);
	}
	else
	{
		includeRoot.setHeight(null);
		excludeRoot.setVisible(false);
	}
};

oFF.FdComponentSelectionList = function() {};
oFF.FdComponentSelectionList.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentSelectionList.prototype._ff_c = "FdComponentSelectionList";

oFF.FdComponentSelectionList.create = function(model, listenerOnNewSelection, showIncludes)
{
	let list = new oFF.FdComponentSelectionList();
	list.setupSelectionList(model, listenerOnNewSelection, showIncludes);
	return list;
};
oFF.FdComponentSelectionList.prototype.m_listenerOnNewSelection = null;
oFF.FdComponentSelectionList.prototype.m_showIncludes = false;
oFF.FdComponentSelectionList.prototype.buildOlapDialogUi = function(genesis)
{
	let layout = this.getSelectionListLayout();
	layout.buildOlapDialogUi(genesis);
	layout.getSelectionList().registerOnDelete(this);
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.CLIPBOARD))
	{
		layout.getClipboardButton().registerOnPress(oFF.FdClipboardListener.create(this.m_model, genesis.getUiManager(), this.m_listenerOnNewSelection, this.m_showIncludes, this.isShowExcludes(this.m_model)));
	}
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED))
	{
		layout.getRoot().registerOnDrop(oFF.UiLambdaDropListener.create((event) => {
			let item = event.getDraggedControl().getCustomObject();
			if (!this.m_model.getSelectedItems().contains(item) || item.isExcluded() !== this.isShowExcludes(this.m_model))
			{
				item.setExcluded(this.isShowExcludes(this.m_model));
				this.m_model.moveToEndOfSelection(item);
			}
		}));
	}
	this.renderSelectedItems();
	this.m_model.registerOnSelectionChange(this);
};
oFF.FdComponentSelectionList.prototype.getFocusControl = function()
{
	return null;
};
oFF.FdComponentSelectionList.prototype.getItemKeyValue = function(item, keyPresentation)
{
	let key = item.getFormattedValueByPresentation(keyPresentation);
	return oFF.notNull(key) ? key : item.getDisplayKey();
};
oFF.FdComponentSelectionList.prototype.getItemTextValue = function(item, textPresentation)
{
	let text = item.getFormattedValueByPresentation(textPresentation);
	return oFF.notNull(text) ? text : item.getTextFormatted();
};
oFF.FdComponentSelectionList.prototype.getSelectedItemText = function(item, presentation, isExcludeAdvancedEnabled)
{
	let keyPresentation = presentation.getKeyPresentation();
	let textPresentation = presentation.getTextPresentation();
	let keyPrimary = presentation.isKeyPrimary();
	let valueFormatter = this.m_model.getConfig().getValueFormatter();
	if (item.getType() === oFF.FilterDialogValueType.RANGE)
	{
		let keyLow = oFF.notNull(keyPresentation) ? this.getItemKeyValue(item.getLowItem(), keyPresentation) : null;
		let keyHigh = oFF.notNull(keyPresentation) ? this.getItemKeyValue(item.getHighItem(), keyPresentation) : null;
		let textLow = oFF.notNull(textPresentation) ? this.getItemTextValue(item.getLowItem(), textPresentation) : null;
		let textHigh = oFF.notNull(textPresentation) ? this.getItemTextValue(item.getHighItem(), textPresentation) : null;
		if (keyPrimary)
		{
			return valueFormatter.formatRange(keyLow, textLow, keyHigh, textHigh, !isExcludeAdvancedEnabled && item.isExcluded());
		}
		else
		{
			return valueFormatter.formatRange(textLow, keyLow, textHigh, keyHigh, !isExcludeAdvancedEnabled && item.isExcluded());
		}
	}
	else if (item.getType() === oFF.FilterDialogValueType.DATE_RANGE_FIXED || item.getType() === oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC)
	{
		return oFF.FilterDialogI18nUtils.getDateRangeFormattedLongText(item.getDateRange(), null, valueFormatter);
	}
	let result;
	let key = this.getItemKeyValue(item, keyPresentation);
	let text = this.getItemTextValue(item, textPresentation);
	if (oFF.notNull(keyPresentation) && oFF.notNull(textPresentation) && oFF.notNull(key) && oFF.notNull(text))
	{
		if (keyPrimary)
		{
			result = valueFormatter.format(key, text);
		}
		else
		{
			result = valueFormatter.format(text, key);
		}
	}
	else
	{
		result = oFF.notNull(textPresentation) && oFF.notNull(text) || oFF.isNull(key) ? text : key;
	}
	return this.prependComparisonOperator(item, result);
};
oFF.FdComponentSelectionList.prototype.getSelectionListLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentSelectionList.prototype.isShowExcludes = function(model)
{
	return !this.m_showIncludes || !model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED);
};
oFF.FdComponentSelectionList.prototype.isSupportedOperatorForDragDrop = function(item, isExcludeAdvancedEnabled)
{
	if (isExcludeAdvancedEnabled)
	{
		let type = item.getType();
		if (type !== oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC && type !== oFF.FilterDialogValueType.DATE_RANGE_FIXED)
		{
			let operator = item.getFdComparisonOperator();
			if (operator.isEqualOperator())
			{
				return true;
			}
			if (operator.isBetweenOperator() || operator.isNullOperator())
			{
				let supportedComparisonOperators = this.m_model.getRangeModel().getSupportedComparisonOperators();
				let oppositeOperator = operator.getWithExcludedState(operator.isIncluding());
				return oFF.notNull(supportedComparisonOperators) && supportedComparisonOperators.contains(oppositeOperator);
			}
		}
	}
	return false;
};
oFF.FdComponentSelectionList.prototype.onDelete = function(event)
{
	let removedItem = event.getAffectedItem();
	let item = removedItem.getCustomObject();
	let selectionList = this.getSelectionListLayout().getSelectionList();
	let itemIndex = selectionList.getIndexOfItem(removedItem);
	selectionList.removeItem(removedItem);
	this.m_model.removeSelectedItem(item);
	oFF.FdLayoutUtils.announceSelectedMemberRemoved(this.getSelectedItemText(item, this.m_model.getPresentationsModel().getSelectedMainPresentation(), this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED)));
	this.getSelectionListLayout().onAfterItemDelete(itemIndex);
};
oFF.FdComponentSelectionList.prototype.onSelectionChange = function(selection)
{
	this.renderSelectedItems();
};
oFF.FdComponentSelectionList.prototype.prependComparisonOperator = function(item, value)
{
	let operator = item.getFdComparisonOperator();
	if (!operator.isIncluding() && !this.m_showIncludes && this.isShowExcludes(this.m_model))
	{
		operator = operator.getWithExcludedState(false);
	}
	if (!operator.isEqualOperator())
	{
		return oFF.XStringUtils.concatenate3(operator.getSign(), " ", value);
	}
	return value;
};
oFF.FdComponentSelectionList.prototype.releaseObject = function()
{
	this.m_model.unregisterOnSelectionChange(this);
	this.m_listenerOnNewSelection = null;
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
};
oFF.FdComponentSelectionList.prototype.renderSelectedItems = function()
{
	if (this.m_layout.getRoot().isVisible())
	{
		let layout = this.getSelectionListLayout();
		let selectionList = layout.getSelectionList();
		let presentation = this.m_model.getPresentationsModel().getSelectedMainPresentation();
		let selectedItems = this.m_model.getSelectedItems();
		let showExcludes = this.isShowExcludes(this.m_model);
		let isExcludeAdvancedEnabled = this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED);
		selectionList.clearItems();
		selectionList.addAllItems(oFF.XStream.of(selectedItems).filter((selectedItem) => {
			return this.m_showIncludes && !selectedItem.isExcluded() || showExcludes && selectedItem.isExcluded();
		}).map((item) => {
			let text = this.getSelectedItemText(item, presentation, isExcludeAdvancedEnabled);
			let showAsExcluded = this.m_showIncludes && showExcludes && item.isExcluded() && item.getFdComparisonOperator() !== oFF.FdComparisonOperator.NOT_BETWEEN;
			return layout.createNewSelectionListItem(text, showAsExcluded, this.isSupportedOperatorForDragDrop(item, isExcludeAdvancedEnabled), item);
		}).collect(oFF.XStreamCollector.toList()));
		this.setBusy(false);
	}
};
oFF.FdComponentSelectionList.prototype.setBusy = function(busy)
{
	let selectionList = this.getSelectionListLayout().getSelectionList();
	if (oFF.notNull(selectionList))
	{
		selectionList.setBusy(busy);
	}
};
oFF.FdComponentSelectionList.prototype.setupSelectionList = function(model, listenerOnNewSelection, showIncludes)
{
	this.m_listenerOnNewSelection = listenerOnNewSelection;
	this.m_showIncludes = showIncludes;
	let titleKey;
	if (model.getConfig().getContentType() === oFF.FilterDialogContentType.USER_TEAM)
	{
		titleKey = oFF.FilterDialogI18n.I18N_FD_SELECTED_USERS;
	}
	else if (!this.m_showIncludes && this.isShowExcludes(model))
	{
		titleKey = oFF.FilterDialogI18n.I18N_FD_EXCLUDED_MEMBERS;
	}
	else
	{
		titleKey = oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS;
	}
	this.setupComponent(model, oFF.FdComponentSelectionListLayout.create(titleKey, model.isFeatureEnabled(oFF.FdFeature.CLIPBOARD)));
};

oFF.FdComponentSelectionListLayout = function() {};
oFF.FdComponentSelectionListLayout.prototype = new oFF.XObject();
oFF.FdComponentSelectionListLayout.prototype._ff_c = "FdComponentSelectionListLayout";

oFF.FdComponentSelectionListLayout.SELECTION_LIST_ITEM_PADDING = "0 5px";
oFF.FdComponentSelectionListLayout.SELECTION_LIST_MARGIN = "0 0 0 -5px";
oFF.FdComponentSelectionListLayout.SELECTION_LIST_WIDTH = "calc(100% + 10px)";
oFF.FdComponentSelectionListLayout.create = function(titleI18nKey, showClipboardButton)
{
	let layout = new oFF.FdComponentSelectionListLayout();
	layout.m_titleI18nKey = titleI18nKey;
	layout.m_showClipboardButton = showClipboardButton;
	return layout;
};
oFF.FdComponentSelectionListLayout.prototype.m_clipboardBtn = null;
oFF.FdComponentSelectionListLayout.prototype.m_deleteItemKeyPressed = false;
oFF.FdComponentSelectionListLayout.prototype.m_genesis = null;
oFF.FdComponentSelectionListLayout.prototype.m_list = null;
oFF.FdComponentSelectionListLayout.prototype.m_root = null;
oFF.FdComponentSelectionListLayout.prototype.m_showClipboardButton = false;
oFF.FdComponentSelectionListLayout.prototype.m_titleI18nKey = null;
oFF.FdComponentSelectionListLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.useMaxSpace();
	this.m_root.setName("FilterDialogSelectionListContainer");
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("0 0.5rem 0.5rem 0.5rem"));
	let header = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	header.setDirection(oFF.UiFlexDirection.ROW);
	header.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	header.setAlignItems(oFF.UiFlexAlignItems.START);
	header.setWrap(oFF.UiFlexWrap.NO_WRAP);
	header.useMaxWidth();
	header.setMinHeight(oFF.UiCssLength.create("2rem"));
	header.setFlex("0 0 auto");
	header.setMargin(oFF.UiCssBoxEdges.create("0 0 0.5rem 0"));
	header.setName("FilterDialogSelectionListHeader");
	let label = header.addNewItemOfType(oFF.UiType.LABEL);
	label.setText(oFF.XLocalizationCenter.getCenter().getText(this.m_titleI18nKey));
	label.setFontWeight(oFF.UiFontWeight.BOLD);
	label.setFlex("0 0 auto");
	label.setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
	if (this.m_showClipboardButton)
	{
		let clipboardBtnContainer = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		clipboardBtnContainer.setDirection(oFF.UiFlexDirection.ROW);
		clipboardBtnContainer.setJustifyContent(oFF.UiFlexJustifyContent.END);
		clipboardBtnContainer.setAlignItems(oFF.UiFlexAlignItems.START);
		clipboardBtnContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
		this.m_clipboardBtn = oFF.FdLayoutUtils.addClipboardButton(this.m_genesis, clipboardBtnContainer, "FilterDialogClipboard");
	}
	let listWrapper = this.m_root.addNewItemOfType(oFF.UiType.SCROLL_CONTAINER);
	listWrapper.setWidth(oFF.UiCssLength.create(oFF.FdComponentSelectionListLayout.SELECTION_LIST_WIDTH));
	listWrapper.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentSelectionListLayout.SELECTION_LIST_MARGIN));
	listWrapper.setFlex("auto");
	this.m_list = listWrapper.setNewContent(oFF.UiType.LIST);
	this.m_list.setName("FilterDialogPreviewList");
	this.m_list.useMaxSpace();
	this.m_list.setSelectionMode(oFF.UiSelectionMode.DELETE);
	this.m_list.setBorderWidth(oFF.UiCssBoxEdges.create("0px"));
	label.setLabelFor(this.m_list);
};
oFF.FdComponentSelectionListLayout.prototype.createNewSelectionListItem = function(text, showExcluded, draggable, item)
{
	let labelContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	let label = labelContainer.addNewItemOfType(oFF.UiType.LABEL);
	label.setText(text);
	if (showExcluded)
	{
		label.setTextDecoration(oFF.UiCssTextDecoration.createByValues(oFF.UiTextDecorationLine.LINE_THROUGH, null, null));
	}
	label.addCssClass("sapMSLITitle");
	let listItem = this.m_genesis.newControl(oFF.UiType.CUSTOM_LIST_ITEM);
	listItem.setCustomObject(item);
	listItem.setContent(labelContainer);
	listItem.setPadding(oFF.UiCssBoxEdges.create(oFF.FdComponentSelectionListLayout.SELECTION_LIST_ITEM_PADDING));
	listItem.setTooltip(text);
	listItem.setDraggable(draggable);
	listItem.registerOnKeyDown(oFF.UiLambdaKeyDownListener.create((event) => {
		if (oFF.XString.isEqual(event.getCode(), "Delete"))
		{
			this.m_deleteItemKeyPressed = true;
		}
	}));
	return listItem;
};
oFF.FdComponentSelectionListLayout.prototype.getClipboardButton = function()
{
	return this.m_clipboardBtn;
};
oFF.FdComponentSelectionListLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdComponentSelectionListLayout.prototype.getSelectionList = function()
{
	return this.m_list;
};
oFF.FdComponentSelectionListLayout.prototype.onAfterItemDelete = function(deletedItemIndex)
{
	if (this.m_deleteItemKeyPressed)
	{
		let numberOfItems = this.m_list.getNumberOfItems();
		if (numberOfItems > deletedItemIndex)
		{
			this.m_list.getItem(deletedItemIndex).focus();
		}
		else if (numberOfItems > 0)
		{
			this.m_list.getItem(numberOfItems - 1).focus();
		}
		else
		{
			this.m_list.focus();
		}
	}
	this.m_deleteItemKeyPressed = false;
};
oFF.FdComponentSelectionListLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_titleI18nKey = null;
};
oFF.FdComponentSelectionListLayout.prototype.resizeComponent = function(size) {};

oFF.FdComponentSelectionTools = function() {};
oFF.FdComponentSelectionTools.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentSelectionTools.prototype._ff_c = "FdComponentSelectionTools";

oFF.FdComponentSelectionTools.create = function(model, clipboardListenerOnNewSelection, showOnlySelectedMembersListener)
{
	let selectionTools = new oFF.FdComponentSelectionTools();
	selectionTools.setupComponent(model, oFF.FdComponentSelectionToolsLayout.create(model));
	selectionTools.m_clipboardListenerOnNewSelection = clipboardListenerOnNewSelection;
	selectionTools.m_showOnlySelectedMembersListener = showOnlySelectedMembersListener;
	return selectionTools;
};
oFF.FdComponentSelectionTools.prototype.m_clipboardListenerOnNewSelection = null;
oFF.FdComponentSelectionTools.prototype.m_showOnlySelectedMembersListener = null;
oFF.FdComponentSelectionTools.prototype.buildOlapDialogUi = function(genesis)
{
	let layout = this.getSelectionToolsLayout();
	layout.buildOlapDialogUi(genesis);
	if (layout.getClipboardBtn() !== null && oFF.notNull(this.m_clipboardListenerOnNewSelection))
	{
		layout.getClipboardBtn().registerOnPress(oFF.FdClipboardListener.create(this.m_model, genesis.getUiManager(), this.m_clipboardListenerOnNewSelection, true, !this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED)));
	}
	layout.getClearSelectionBtn().registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
		this.m_model.clearSelection();
	}));
	if (oFF.notNull(this.m_showOnlySelectedMembersListener))
	{
		layout.getShowOnlySelectedToggleBtn().registerOnPress(this.m_showOnlySelectedMembersListener);
	}
};
oFF.FdComponentSelectionTools.prototype.getFocusControl = function()
{
	let layout = this.getSelectionToolsLayout();
	let showOnlySelectedToggleBtn = layout.getShowOnlySelectedToggleBtn();
	if (oFF.notNull(showOnlySelectedToggleBtn) && showOnlySelectedToggleBtn.isVisible())
	{
		return showOnlySelectedToggleBtn;
	}
	let clipboardBtn = layout.getClipboardBtn();
	if (oFF.notNull(clipboardBtn) && clipboardBtn.isVisible())
	{
		return clipboardBtn;
	}
	return layout.getClearSelectionBtn();
};
oFF.FdComponentSelectionTools.prototype.getSelectionToolsLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentSelectionTools.prototype.isShowOnlySelectedMembers = function()
{
	return this.getSelectionToolsLayout().getShowOnlySelectedToggleBtn().isPressed();
};
oFF.FdComponentSelectionTools.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_clipboardListenerOnNewSelection = null;
	this.m_showOnlySelectedMembersListener = null;
};
oFF.FdComponentSelectionTools.prototype.resetShowOnlySelectedMembersButtonState = function()
{
	this.getSelectionToolsLayout().getShowOnlySelectedToggleBtn().setPressed(false);
};
oFF.FdComponentSelectionTools.prototype.setShowSelectionToolButtons = function(showSelectionToolButtons)
{
	this.getSelectionToolsLayout().setShowSelectionToolButtons(showSelectionToolButtons);
};

oFF.FdComponentSelectionToolsLayout = function() {};
oFF.FdComponentSelectionToolsLayout.prototype = new oFF.XObject();
oFF.FdComponentSelectionToolsLayout.prototype._ff_c = "FdComponentSelectionToolsLayout";

oFF.FdComponentSelectionToolsLayout.create = function(model)
{
	let layout = new oFF.FdComponentSelectionToolsLayout();
	layout.m_model = model;
	return layout;
};
oFF.FdComponentSelectionToolsLayout.prototype.m_clearSelectionBtn = null;
oFF.FdComponentSelectionToolsLayout.prototype.m_clipboardBtn = null;
oFF.FdComponentSelectionToolsLayout.prototype.m_genesis = null;
oFF.FdComponentSelectionToolsLayout.prototype.m_model = null;
oFF.FdComponentSelectionToolsLayout.prototype.m_root = null;
oFF.FdComponentSelectionToolsLayout.prototype.m_showOnlySelectedToggleBtn = null;
oFF.FdComponentSelectionToolsLayout.prototype.m_showSelectionToolButtons = false;
oFF.FdComponentSelectionToolsLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_genesis = genesis;
	this.m_root.setDirection(oFF.UiFlexDirection.ROW);
	this.m_root.setJustifyContent(oFF.UiFlexJustifyContent.END);
	this.m_root.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_root.setName("FilterDialogSelectionToolsContainer");
	this.m_root.setFlex("1");
	this.m_root.setMaxHeight(oFF.UiCssLength.create("1rem"));
	this.m_showOnlySelectedToggleBtn = oFF.FdLayoutUtils.addSelectedMembersToggleButton(this.m_root, "FilterDialogSelectionToolsShowOnlySelected");
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.CLIPBOARD))
	{
		this.m_clipboardBtn = oFF.FdLayoutUtils.addClipboardButton(genesis, this.m_root, "FilterDialogSelectionToolsClipboard");
	}
	this.m_clearSelectionBtn = oFF.FdLayoutUtils.addClearSelectionButton(this.m_root, "FilterDialogSelectionToolsClear");
};
oFF.FdComponentSelectionToolsLayout.prototype.getClearSelectionBtn = function()
{
	return this.m_clearSelectionBtn;
};
oFF.FdComponentSelectionToolsLayout.prototype.getClipboardBtn = function()
{
	return this.m_clipboardBtn;
};
oFF.FdComponentSelectionToolsLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdComponentSelectionToolsLayout.prototype.getShowOnlySelectedToggleBtn = function()
{
	return this.m_showOnlySelectedToggleBtn;
};
oFF.FdComponentSelectionToolsLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_model = null;
	this.m_genesis = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
};
oFF.FdComponentSelectionToolsLayout.prototype.resizeComponent = function(size)
{
	let showSelectionContainer = oFF.FdLayoutUtils.isShowSelectionContainer(this.m_genesis, this.m_model);
	let showSelectionContainerButtons = this.m_showSelectionToolButtons && showSelectionContainer && !oFF.FdLayoutUtils.isSelectionContainerVisible(size.getDialogSize());
	let toggleBtnVisibleAndPressed = this.m_showOnlySelectedToggleBtn.isVisible() && this.m_showOnlySelectedToggleBtn.isPressed();
	this.m_showOnlySelectedToggleBtn.setVisible(!size.getContentSize().isMobile() && size.getContentSize().isSmall() && showSelectionContainer && !oFF.FdLayoutUtils.isSelectionContainerVisible(size.getDialogSize()));
	this.m_showOnlySelectedToggleBtn.setPressed(this.m_showOnlySelectedToggleBtn.isPressed() && this.m_showOnlySelectedToggleBtn.isVisible());
	if (toggleBtnVisibleAndPressed && !this.m_showOnlySelectedToggleBtn.isVisible() && this.m_showOnlySelectedToggleBtn.getListenerOnPress() !== null)
	{
		this.m_showOnlySelectedToggleBtn.getListenerOnPress().onPress(oFF.UiControlEvent.create(this.m_showOnlySelectedToggleBtn));
	}
	if (oFF.notNull(this.m_clipboardBtn))
	{
		this.m_clipboardBtn.setVisible(showSelectionContainerButtons);
	}
	this.m_clearSelectionBtn.setVisible(showSelectionContainerButtons);
	this.m_root.setVisible(showSelectionContainerButtons || this.m_showOnlySelectedToggleBtn.isVisible());
};
oFF.FdComponentSelectionToolsLayout.prototype.setShowSelectionToolButtons = function(showSelectionToolButtons)
{
	this.m_showSelectionToolButtons = showSelectionToolButtons;
};

oFF.FdComponentToggles = function() {};
oFF.FdComponentToggles.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentToggles.prototype._ff_c = "FdComponentToggles";

oFF.FdComponentToggles.create = function(model, listenerOnChange)
{
	let container = new oFF.FdComponentToggles();
	container.setupComponent(model, oFF.FdComponentTogglesLayout.create());
	container.m_listenerOnToggleChange = listenerOnChange;
	return container;
};
oFF.FdComponentToggles.prototype.m_listenerOnToggleChange = null;
oFF.FdComponentToggles.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	this.updateReadModeToggleLayout();
	let layout = this.getToggleLayout();
	let readModeSwitch = layout.getReadModeSwitch();
	if (readModeSwitch.isVisible())
	{
		if (this.m_model.supportsReadMode(oFF.OlapUiReadMode.BOOKED) && this.m_model.supportsReadMode(oFF.OlapUiReadMode.MASTER))
		{
			readModeSwitch.registerOnChange(this);
			if (this.m_model.supportsReadMode(oFF.OlapUiReadMode.QUERY_DEFAULT))
			{
				layout.getReadModeUseDefaultCheckbox().registerOnChange(this);
			}
		}
		else
		{
			readModeSwitch.setTooltip(oFF.XLocalizationCenter.getCenter().getText(readModeSwitch.isOn() ? oFF.FilterDialogI18n.I18N_FD_READMODE_SWITCH_UNBOOKED_DISABLED : oFF.FilterDialogI18n.I18N_FD_READMODE_SWITCH_BOOKED_DISABLED));
		}
	}
	else if (layout.getReadModeDropdown().isVisible())
	{
		layout.getReadModeDropdown().registerOnSelect(this);
	}
	this.updateExcludeToggleVisibility();
	this.m_model.registerOnFeatureAvailabilityChange(this);
};
oFF.FdComponentToggles.prototype.getFocusControl = function()
{
	if (oFF.notNull(this.m_layout))
	{
		let readModeDropdown = this.getToggleLayout().getReadModeDropdown();
		if (oFF.notNull(readModeDropdown) && readModeDropdown.isVisible())
		{
			return readModeDropdown;
		}
		let readModeSwitch = this.getToggleLayout().getReadModeSwitch();
		if (oFF.notNull(readModeSwitch) && readModeSwitch.isVisible())
		{
			return readModeSwitch;
		}
		let excludeSwitch = this.getToggleLayout().getExcludeSwitch();
		if (oFF.notNull(excludeSwitch) && excludeSwitch.isVisible())
		{
			return excludeSwitch;
		}
	}
	return null;
};
oFF.FdComponentToggles.prototype.getToggleLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentToggles.prototype.onChange = function(event)
{
	let toggleLayout = this.getToggleLayout();
	let readModeSwitch = toggleLayout.getReadModeSwitch();
	let readModeUseDefaultCheckbox = toggleLayout.getReadModeUseDefaultCheckbox();
	let excludeSwitch = toggleLayout.getExcludeSwitch();
	if (event.getControl() === readModeSwitch)
	{
		let isReadModeOn = readModeSwitch.isOn();
		this.m_model.setReadMode(isReadModeOn ? oFF.OlapUiReadMode.MASTER : oFF.OlapUiReadMode.BOOKED);
		this.m_listenerOnToggleChange();
	}
	else if (event.getControl() === readModeUseDefaultCheckbox)
	{
		this.m_model.setReadMode(readModeUseDefaultCheckbox.isChecked() ? oFF.OlapUiReadMode.QUERY_DEFAULT : readModeSwitch.isOn() ? oFF.OlapUiReadMode.MASTER : oFF.OlapUiReadMode.BOOKED);
		this.updateReadModeToggleLayout();
		this.m_listenerOnToggleChange();
	}
	else if (event.getControl() === excludeSwitch)
	{
		this.m_model.setExcludeSwitchOn(excludeSwitch.isOn());
	}
};
oFF.FdComponentToggles.prototype.onError = function(messages, customIdentifier)
{
	this.updateReadModeToggleLayout();
};
oFF.FdComponentToggles.prototype.onFeatureAvailabilityChanged = function(feature, available)
{
	if (feature === oFF.FdFeature.EXCLUDE)
	{
		this.updateExcludeToggleVisibility();
	}
};
oFF.FdComponentToggles.prototype.onSelect = function(event)
{
	let layout = this.getToggleLayout();
	if (event.getControl() === layout.getReadModeDropdown())
	{
		this.m_model.setReadMode(layout.getReadModeDropdown().getSelectedItem().getCustomObject());
		this.m_listenerOnToggleChange();
		this.getToggleLayout().updateReadModeDropdownTooltip(this.m_model.getQueryDefaultReadMode());
	}
};
oFF.FdComponentToggles.prototype.releaseObject = function()
{
	this.m_model.unregisterOnFeatureAvailabilityChange(this);
	this.m_listenerOnToggleChange = null;
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
};
oFF.FdComponentToggles.prototype.updateExcludeToggleVisibility = function()
{
	let layout = this.getToggleLayout();
	layout.setExcludeSwitchVisible(this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE));
	let excludeSwitch = layout.getExcludeSwitch();
	excludeSwitch.setOn(this.m_model.isExcludeSwitchOn());
	excludeSwitch.registerOnChange(this);
};
oFF.FdComponentToggles.prototype.updateReadModeToggleLayout = function()
{
	let layout = this.getToggleLayout();
	let supportsQueryDefault = this.m_model.supportsReadMode(oFF.OlapUiReadMode.QUERY_DEFAULT);
	let supportsBookedCascading = this.m_model.supportsReadMode(oFF.OlapUiReadMode.BOOKED_CASCADING);
	let supportsBooked = this.m_model.supportsReadMode(oFF.OlapUiReadMode.BOOKED);
	let supportsMaster = this.m_model.supportsReadMode(oFF.OlapUiReadMode.MASTER);
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.EXTENDED_READMODE) && (supportsQueryDefault || supportsBookedCascading || supportsBooked || supportsMaster))
	{
		layout.setReadModeDropdownVisible(true, supportsQueryDefault, supportsBookedCascading, supportsBooked, supportsMaster, this.m_model.getReadMode());
		layout.updateReadModeDropdownTooltip(this.m_model.getQueryDefaultReadMode());
		layout.setReadModeSwitchVisible(false, false, false, false, false);
	}
	else
	{
		layout.setReadModeDropdownVisible(false, false, false, false, false, null);
		layout.setReadModeSwitchVisible(supportsBooked || supportsMaster, supportsBooked && supportsMaster, this.m_model.getEffectiveReadMode() === oFF.OlapUiReadMode.MASTER, supportsQueryDefault, this.m_model.getReadMode() === oFF.OlapUiReadMode.QUERY_DEFAULT);
	}
};

oFF.FdComponentTogglesLayout = function() {};
oFF.FdComponentTogglesLayout.prototype = new oFF.XObject();
oFF.FdComponentTogglesLayout.prototype._ff_c = "FdComponentTogglesLayout";

oFF.FdComponentTogglesLayout.MARGIN_COLUMN = "0 0.5rem 0 0";
oFF.FdComponentTogglesLayout.MARGIN_EXCLUDE_SWITCH_IN_ROW = "0 0 0.5rem 0.75rem";
oFF.FdComponentTogglesLayout.MARGIN_RIGHT = "0 0.25rem 0 0";
oFF.FdComponentTogglesLayout.MARGIN_TOP = "0.25rem 0 0 0";
oFF.FdComponentTogglesLayout.MARGIN_TOP_AND_BOTTOM = "0.25rem 0";
oFF.FdComponentTogglesLayout.MARGIN_USE_DEFAULT_READMODE_SMALL_SCREEN = "-0.25rem 0px 0px 0.5rem";
oFF.FdComponentTogglesLayout.create = function()
{
	return new oFF.FdComponentTogglesLayout();
};
oFF.FdComponentTogglesLayout.prototype.m_container = null;
oFF.FdComponentTogglesLayout.prototype.m_excludeLabelContainer = null;
oFF.FdComponentTogglesLayout.prototype.m_excludeSwitch = null;
oFF.FdComponentTogglesLayout.prototype.m_labelColumn = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeDropdown = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeDropdownContainer = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeLabelContainer = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeSwitch = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeUseDefaultCheckbox = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeUseDefaultCheckboxColumn = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeUseDefaultInfoIcon = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeUseDefaultInfoIconPopover = null;
oFF.FdComponentTogglesLayout.prototype.m_readModeUseDefaultLayout = null;
oFF.FdComponentTogglesLayout.prototype.m_smallScreenSwitchPlaceholder = null;
oFF.FdComponentTogglesLayout.prototype.m_switchContainer = null;
oFF.FdComponentTogglesLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_readModeDropdown = this.createReadModeDropdown(genesis);
	this.m_readModeSwitch = this.createSwitch(genesis, "FilterDialogReadModeSwitch");
	this.m_readModeUseDefaultCheckbox = genesis.newControl(oFF.UiType.CHECKBOX);
	this.m_readModeUseDefaultCheckbox.setName("FilterDialogReadModeUseDefaultCheckbox");
	this.m_smallScreenSwitchPlaceholder = genesis.newControl(oFF.UiType.FLEX_LAYOUT).setHeight(oFF.UiCssLength.create("2rem")).setVisible(false);
	this.m_excludeSwitch = this.createSwitch(genesis, "FilterDialogExcludeSwitch");
	this.m_container = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_container.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_container.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_container.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_container.setName("FilterDialogToggleContainer");
	this.m_switchContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_switchContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_switchContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_switchContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_switchContainer.setName("FilterDialogToggleSwitchContainer");
	this.m_labelColumn = this.createColumn(genesis);
	this.m_readModeLabelContainer = this.createLabelLayout(genesis, oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS, this.m_readModeSwitch);
	this.m_excludeLabelContainer = this.createLabelLayout(genesis, oFF.FilterDialogI18n.I18N_FD_EXCLUDE_MEMBERS, this.m_excludeSwitch);
	this.m_labelColumn.addItem(this.m_readModeLabelContainer);
	this.m_labelColumn.addItem(this.m_excludeLabelContainer);
	this.m_switchContainer.addItem(this.m_labelColumn);
	let toggleColumn = this.createColumn(genesis);
	toggleColumn.addItem(this.m_readModeSwitch);
	toggleColumn.addItem(this.m_smallScreenSwitchPlaceholder);
	toggleColumn.addItem(this.m_excludeSwitch);
	this.m_switchContainer.addItem(toggleColumn);
	this.m_readModeUseDefaultCheckboxColumn = this.createColumn(genesis);
	this.m_readModeUseDefaultLayout = this.createReadModeDefaultLayout(genesis);
	this.m_readModeUseDefaultCheckboxColumn.addItem(this.m_readModeUseDefaultLayout);
	this.m_switchContainer.addItem(this.m_readModeUseDefaultCheckboxColumn);
	this.m_readModeDropdownContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_readModeDropdownContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_readModeDropdownContainer.setAlignItems(oFF.UiFlexAlignItems.START);
	this.m_readModeDropdownContainer.setName("FilterDialogReadModeToggleDropdownContainer");
	this.m_readModeDropdownContainer.addItem(this.createReadModeDropdownLabel(genesis));
	this.m_readModeDropdownContainer.addItem(this.m_readModeDropdown);
	this.m_container.addItem(this.m_readModeDropdownContainer);
	this.m_container.addItem(this.m_switchContainer);
};
oFF.FdComponentTogglesLayout.prototype.createCenteredRowLayout = function(genesis)
{
	let container = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	container.setDirection(oFF.UiFlexDirection.ROW);
	container.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	container.setWrap(oFF.UiFlexWrap.NO_WRAP);
	container.setFlex("auto");
	container.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_TOP));
	return container;
};
oFF.FdComponentTogglesLayout.prototype.createColumn = function(genesis)
{
	let labelContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	labelContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	labelContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	labelContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	labelContainer.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_COLUMN));
	labelContainer.setFlex("0 0 auto");
	return labelContainer;
};
oFF.FdComponentTogglesLayout.prototype.createLabelLayout = function(genesis, i18nKey, element)
{
	let label = genesis.newControl(oFF.UiType.LABEL);
	label.setFlex("auto");
	label.setText(oFF.XLocalizationCenter.getCenter().getText(i18nKey));
	label.setLabelFor(element);
	let container = this.createCenteredRowLayout(genesis);
	container.addItem(label);
	return container;
};
oFF.FdComponentTogglesLayout.prototype.createReadModeDefaultLayout = function(genesis)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let label = genesis.newControl(oFF.UiType.LABEL);
	label.setName("FilterDialogReadModeUseDefaultLabel");
	label.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT));
	label.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_RIGHT));
	this.m_readModeUseDefaultInfoIcon = genesis.newControl(oFF.UiType.ICON);
	this.m_readModeUseDefaultInfoIcon.setName("FilterDialogReadModeUseDefaultIcon");
	this.m_readModeUseDefaultInfoIcon.setIcon("message-information");
	this.m_readModeUseDefaultInfoIcon.setTooltip(null);
	this.m_readModeUseDefaultInfoIcon.registerOnHover(this);
	this.m_readModeUseDefaultInfoIcon.registerOnHoverEnd(this);
	let iconPopOverLabel = genesis.newControl(oFF.UiType.LABEL);
	iconPopOverLabel.setName("FilterDialogReadModeUseDefaultIconPopoverLabel");
	iconPopOverLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT_TOOLTIP));
	iconPopOverLabel.setWrapping(true);
	this.m_readModeUseDefaultInfoIconPopover = genesis.newControl(oFF.UiType.POPOVER);
	this.m_readModeUseDefaultInfoIconPopover.setName("FilterDialogReadModeUseDefaultIconPopover");
	this.m_readModeUseDefaultInfoIconPopover.setContent(iconPopOverLabel);
	this.m_readModeUseDefaultInfoIconPopover.setWidth(oFF.UiCssLength.create("150px"));
	this.m_readModeUseDefaultInfoIconPopover.setPadding(oFF.UiCssBoxEdges.create("10px"));
	this.m_readModeUseDefaultInfoIconPopover.setPlacement(oFF.UiPlacementType.TOP);
	let container = this.createCenteredRowLayout(genesis);
	container.setName("FilterDialogReadModeUseDefaultContainer");
	container.setFlex(null);
	container.addItem(this.m_readModeUseDefaultCheckbox);
	container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_readModeUseDefaultCheckbox, genesis, localization.getText(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS)));
	label.setLabelFor(this.m_readModeUseDefaultCheckbox);
	container.addItem(label);
	container.addItem(this.m_readModeUseDefaultInfoIcon);
	container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_readModeUseDefaultInfoIcon, genesis, localization.getText(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT_TOOLTIP)));
	return container;
};
oFF.FdComponentTogglesLayout.prototype.createReadModeDropdown = function(genesis)
{
	let dropdown = genesis.newControl(oFF.UiType.DROPDOWN);
	dropdown.setName("FilterDialogReadModeDropdown");
	dropdown.setMinWidth(oFF.UiCssLength.create(oFF.FdLayoutUtils.DROPDOWN_WIDTH));
	return dropdown;
};
oFF.FdComponentTogglesLayout.prototype.createReadModeDropdownLabel = function(genesis)
{
	let label = genesis.newControl(oFF.UiType.LABEL);
	label.setName("FilterDialogReadModeDropdownLabel");
	label.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_AVAILABLE_MEMBERS));
	label.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_TOP_AND_BOTTOM));
	label.setLabelFor(this.m_readModeDropdown);
	return label;
};
oFF.FdComponentTogglesLayout.prototype.createSwitch = function(genesis, name)
{
	let switchControl = genesis.newControl(oFF.UiType.SWITCH);
	switchControl.setName(name);
	switchControl.setOnText(" ");
	switchControl.setOffText(" ");
	switchControl.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_TOP));
	return switchControl;
};
oFF.FdComponentTogglesLayout.prototype.getExcludeSwitch = function()
{
	return this.m_excludeSwitch;
};
oFF.FdComponentTogglesLayout.prototype.getReadModeDropdown = function()
{
	return this.m_readModeDropdown;
};
oFF.FdComponentTogglesLayout.prototype.getReadModeSwitch = function()
{
	return this.m_readModeSwitch;
};
oFF.FdComponentTogglesLayout.prototype.getReadModeUseDefaultCheckbox = function()
{
	return this.m_readModeUseDefaultCheckbox;
};
oFF.FdComponentTogglesLayout.prototype.getRoot = function()
{
	return this.m_container;
};
oFF.FdComponentTogglesLayout.prototype.onHover = function(event)
{
	this.m_readModeUseDefaultInfoIconPopover.openAt(this.m_readModeUseDefaultInfoIcon);
};
oFF.FdComponentTogglesLayout.prototype.onHoverEnd = function(event)
{
	this.m_readModeUseDefaultInfoIconPopover.close();
};
oFF.FdComponentTogglesLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_container = oFF.XObjectExt.release(this.m_container);
	this.m_labelColumn = oFF.XObjectExt.release(this.m_labelColumn);
	this.m_readModeLabelContainer = oFF.XObjectExt.release(this.m_readModeLabelContainer);
	this.m_excludeLabelContainer = oFF.XObjectExt.release(this.m_excludeLabelContainer);
	this.m_readModeSwitch = oFF.XObjectExt.release(this.m_readModeSwitch);
	this.m_readModeDropdown = oFF.XObjectExt.release(this.m_readModeDropdown);
	this.m_readModeUseDefaultCheckbox = oFF.XObjectExt.release(this.m_readModeUseDefaultCheckbox);
	this.m_excludeSwitch = oFF.XObjectExt.release(this.m_excludeSwitch);
	this.m_readModeUseDefaultCheckboxColumn = oFF.XObjectExt.release(this.m_readModeUseDefaultCheckboxColumn);
	this.m_readModeUseDefaultLayout = oFF.XObjectExt.release(this.m_readModeUseDefaultLayout);
	this.m_smallScreenSwitchPlaceholder = oFF.XObjectExt.release(this.m_smallScreenSwitchPlaceholder);
	this.m_readModeUseDefaultInfoIcon = oFF.XObjectExt.release(this.m_readModeUseDefaultInfoIcon);
	this.m_readModeUseDefaultInfoIconPopover = oFF.XObjectExt.release(this.m_readModeUseDefaultInfoIconPopover);
	this.m_switchContainer = oFF.XObjectExt.release(this.m_switchContainer);
	this.m_readModeDropdownContainer = oFF.XObjectExt.release(this.m_readModeDropdownContainer);
};
oFF.FdComponentTogglesLayout.prototype.resizeComponent = function(size)
{
	if (this.m_readModeUseDefaultCheckboxColumn.isVisible())
	{
		if (size.getContentSize().isSmall())
		{
			this.m_readModeUseDefaultLayout.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_USE_DEFAULT_READMODE_SMALL_SCREEN));
			this.m_labelColumn.insertItem(this.m_readModeUseDefaultLayout, 1);
			this.m_smallScreenSwitchPlaceholder.setVisible(true);
		}
		else
		{
			this.m_readModeUseDefaultLayout.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_TOP));
			this.m_readModeUseDefaultCheckboxColumn.addItem(this.m_readModeUseDefaultLayout);
			this.m_smallScreenSwitchPlaceholder.setVisible(false);
		}
	}
	if (this.m_readModeDropdown.isVisible())
	{
		if (size.getContentSize().isLarge())
		{
			this.m_readModeDropdown.setWidth(null);
			this.showSwitchContainerInRow();
		}
		else
		{
			this.m_readModeDropdown.useMaxWidth();
			this.showSwitchContainerInColumn();
		}
	}
};
oFF.FdComponentTogglesLayout.prototype.setExcludeSwitchVisible = function(visible)
{
	this.m_excludeLabelContainer.setVisible(visible);
	this.m_excludeSwitch.setVisible(visible);
	this.updateComponentVisibility();
};
oFF.FdComponentTogglesLayout.prototype.setReadModeDropdownVisible = function(visible, supportsQueryDefaultReadMode, supportsBookedCascading, supportsBooked, supportsMaster, defaultSelected)
{
	this.m_readModeDropdown.setVisible(visible);
	this.m_readModeDropdown.clearItems();
	let localization = oFF.XLocalizationCenter.getCenter();
	if (supportsQueryDefaultReadMode)
	{
		oFF.FdLayoutUtils.addDropdownItem(this.m_readModeDropdown, "FilterDialogReadModeDefault", localization.getText(oFF.FilterDialogI18n.I18N_FD_MEMBERS_DEFAULT_WITHOUT_EFFECTIVE), oFF.OlapUiReadMode.QUERY_DEFAULT);
	}
	if (supportsBookedCascading)
	{
		oFF.FdLayoutUtils.addDropdownItem(this.m_readModeDropdown, "FilterDialogReadModeBookedCascading", localization.getText(oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED_CASCADING), oFF.OlapUiReadMode.BOOKED_CASCADING);
	}
	if (supportsBooked)
	{
		oFF.FdLayoutUtils.addDropdownItem(this.m_readModeDropdown, "FilterDialogReadModeBooked", localization.getText(oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED), oFF.OlapUiReadMode.BOOKED);
	}
	if (supportsMaster)
	{
		oFF.FdLayoutUtils.addDropdownItem(this.m_readModeDropdown, "FilterDialogReadModeMaster", localization.getText(oFF.FilterDialogI18n.I18N_FD_MEMBERS_MASTER), oFF.OlapUiReadMode.MASTER);
	}
	if (oFF.notNull(defaultSelected))
	{
		let selectedItem = oFF.XCollectionUtils.findFirst(this.m_readModeDropdown.getItems(), (item) => {
			return item.getCustomObject() === defaultSelected;
		});
		if (oFF.notNull(selectedItem))
		{
			this.m_readModeDropdown.setSelectedItem(selectedItem);
		}
	}
	this.updateComponentVisibility();
};
oFF.FdComponentTogglesLayout.prototype.setReadModeSwitchVisible = function(visible, enabled, isOn, useDefaultCheckboxVisible, useDefaultCheckboxChecked)
{
	this.m_readModeLabelContainer.setVisible(visible);
	this.m_readModeSwitch.setVisible(visible);
	this.m_readModeSwitch.setEnabled(enabled && (!useDefaultCheckboxVisible || !useDefaultCheckboxChecked));
	this.m_readModeSwitch.setOn(isOn);
	this.m_readModeUseDefaultCheckboxColumn.setVisible(useDefaultCheckboxVisible);
	this.m_readModeUseDefaultCheckbox.setChecked(useDefaultCheckboxChecked);
	this.updateComponentVisibility();
};
oFF.FdComponentTogglesLayout.prototype.showSwitchContainerInColumn = function()
{
	this.m_container.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_switchContainer.setAlignItems(oFF.UiFlexAlignItems.STRETCH);
	this.m_excludeLabelContainer.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_TOP));
};
oFF.FdComponentTogglesLayout.prototype.showSwitchContainerInRow = function()
{
	this.m_container.setDirection(oFF.UiFlexDirection.ROW);
	this.m_switchContainer.setAlignItems(oFF.UiFlexAlignItems.END);
	this.m_excludeLabelContainer.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentTogglesLayout.MARGIN_EXCLUDE_SWITCH_IN_ROW));
};
oFF.FdComponentTogglesLayout.prototype.updateComponentVisibility = function()
{
	if (this.m_readModeDropdown.isVisible() || this.m_readModeSwitch.isVisible() || this.m_excludeSwitch.isVisible())
	{
		this.m_container.setVisible(true);
		this.m_readModeDropdownContainer.setVisible(this.m_readModeDropdown.isVisible());
		this.m_switchContainer.setVisible(this.m_readModeSwitch.isVisible() || this.m_excludeSwitch.isVisible());
		if (this.m_readModeDropdown.isVisible())
		{
			this.showSwitchContainerInRow();
		}
		else
		{
			this.showSwitchContainerInColumn();
		}
	}
	else
	{
		this.m_container.setVisible(false);
	}
};
oFF.FdComponentTogglesLayout.prototype.updateReadModeDropdownTooltip = function(queryDefaultReadMode)
{
	let readMode = this.m_readModeDropdown.getSelectedItem().getCustomObject();
	if (readMode === oFF.OlapUiReadMode.QUERY_DEFAULT && oFF.notNull(queryDefaultReadMode))
	{
		readMode = queryDefaultReadMode;
	}
	let localizationKey = oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED;
	if (readMode === oFF.OlapUiReadMode.MASTER)
	{
		localizationKey = oFF.FilterDialogI18n.I18N_FD_MEMBERS_MASTER;
	}
	else if (readMode === oFF.OlapUiReadMode.BOOKED_CASCADING)
	{
		localizationKey = oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED_CASCADING;
	}
	else if (readMode === oFF.FdReadMode.DIMENSION_RELATIONSHIPS)
	{
		localizationKey = oFF.FilterDialogI18n.I18N_FD_MEMBERS_DIM_RELATIONSHIPS;
	}
	this.m_readModeDropdown.setTooltip(oFF.XLocalizationCenter.getCenter().getText(localizationKey));
};

oFF.FdComponentDateRangeDynamic = function() {};
oFF.FdComponentDateRangeDynamic.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentDateRangeDynamic.prototype._ff_c = "FdComponentDateRangeDynamic";

oFF.FdComponentDateRangeDynamic.create = function(model, item, dataChangedListener)
{
	let component = new oFF.FdComponentDateRangeDynamic();
	component.setupComponent(model, oFF.FdComponentDateRangeDynamicLayout.create(() => {
		component.onDataChanged();
	}, model.getConfig().getValueFormatter()));
	component.m_item = item;
	component.m_dataChangedListener = dataChangedListener;
	return component;
};
oFF.FdComponentDateRangeDynamic.prototype.m_dataChangedListener = null;
oFF.FdComponentDateRangeDynamic.prototype.m_item = null;
oFF.FdComponentDateRangeDynamic.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	let layout = this.getDynamicDateRangeLayout();
	layout.setAvailableGranularities(this.m_model.getRangeModel().getDateRangeGranularities());
	layout.bindItem(this.m_item);
};
oFF.FdComponentDateRangeDynamic.prototype.getDynamicDateRangeLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentDateRangeDynamic.prototype.getFocusControl = function()
{
	return this.getDynamicDateRangeLayout().getTypeDropdown();
};
oFF.FdComponentDateRangeDynamic.prototype.getItem = function()
{
	return this.m_item;
};
oFF.FdComponentDateRangeDynamic.prototype.getMaxValue = function(granularity)
{
	let value = this.m_model.getConfig().getDynamicDateRangeMaxYears();
	if (granularity === oFF.DateRangeGranularity.HALF_YEAR)
	{
		return value * 2;
	}
	if (granularity === oFF.DateRangeGranularity.QUARTER)
	{
		return value * 4;
	}
	if (granularity === oFF.DateRangeGranularity.MONTH)
	{
		return value * 12;
	}
	if (granularity === oFF.DateRangeGranularity.DAY)
	{
		return value * 365;
	}
	return value;
};
oFF.FdComponentDateRangeDynamic.prototype.isEmpty = function()
{
	return this.m_item.getGranularity() === null;
};
oFF.FdComponentDateRangeDynamic.prototype.isNumberValid = function(inputText, maxValue)
{
	if (oFF.XStringUtils.isNullOrEmpty(inputText) || oFF.XString.containsString(inputText, ".") || oFF.XString.containsString(inputText, ","))
	{
		return false;
	}
	let value = oFF.XInteger.convertFromStringWithDefault(inputText, -1);
	return value >= 0 && value <= maxValue;
};
oFF.FdComponentDateRangeDynamic.prototype.onDataChanged = function()
{
	this.validate(true);
	this.m_dataChangedListener();
};
oFF.FdComponentDateRangeDynamic.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_item = null;
	this.m_dataChangedListener = null;
};
oFF.FdComponentDateRangeDynamic.prototype.validate = function(showValidationMessages)
{
	let layout = this.getDynamicDateRangeLayout();
	if (showValidationMessages)
	{
		layout.clearMessages();
	}
	if (showValidationMessages && this.isEmpty())
	{
		return true;
	}
	let granularity = this.m_item.getGranularity();
	if (oFF.isNull(granularity))
	{
		return false;
	}
	let lookBackValid = granularity.isCurrentDateUnit() || this.isNumberValid(layout.getLookBackText(), this.getMaxValue(granularity));
	let lookAheadValid = granularity.isCurrentDateUnit() || this.isNumberValid(layout.getLookAheadText(), this.getMaxValue(granularity));
	if ((!lookBackValid || !lookAheadValid) && showValidationMessages)
	{
		layout.showMainMessage(oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder2(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_NUMBER_BETWEEN, "0", oFF.XInteger.convertToString(this.getMaxValue(granularity))), !lookBackValid, !lookAheadValid);
	}
	let offsetGranularity = this.m_item.getOffsetGranularity();
	let offsetValid = oFF.isNull(offsetGranularity) || this.isNumberValid(layout.getOffsetText(), this.getMaxValue(offsetGranularity));
	if (!offsetValid && showValidationMessages)
	{
		layout.showOffsetMessage(oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder2(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_NUMBER_BETWEEN, "0", oFF.XInteger.convertToString(this.getMaxValue(offsetGranularity))));
	}
	return lookAheadValid && lookBackValid && offsetValid;
};

oFF.FdComponentDateRangeFixed = function() {};
oFF.FdComponentDateRangeFixed.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentDateRangeFixed.prototype._ff_c = "FdComponentDateRangeFixed";

oFF.FdComponentDateRangeFixed.create = function(model, item, dataChangedListener)
{
	let component = new oFF.FdComponentDateRangeFixed();
	component.setupComponent(model, oFF.FdComponentDateRangeFixedLayout.create(() => {
		component.onDataChanged();
	}, model.getConfig().getValueFormatter()));
	component.m_item = item;
	component.m_dataChangedListener = dataChangedListener;
	return component;
};
oFF.FdComponentDateRangeFixed.prototype.m_dataChangedListener = null;
oFF.FdComponentDateRangeFixed.prototype.m_dateRangeMax = null;
oFF.FdComponentDateRangeFixed.prototype.m_dateRangeMin = null;
oFF.FdComponentDateRangeFixed.prototype.m_item = null;
oFF.FdComponentDateRangeFixed.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	let layout = this.getFixedDateRangeLayout();
	let rangeModel = this.m_model.getRangeModel();
	let minDate = rangeModel.getMin();
	let maxDate = rangeModel.getMax();
	if (oFF.notNull(minDate) && oFF.notNull(maxDate))
	{
		this.m_dateRangeMin = oFF.XDate.createHollowDate();
		this.m_dateRangeMin.setYear(minDate.getYear());
		this.m_dateRangeMin.setMonthOfYear(1);
		this.m_dateRangeMin.setDayOfMonth(1);
		this.m_dateRangeMax = oFF.XDate.createHollowDate();
		this.m_dateRangeMax.setYear(maxDate.getYear());
		this.m_dateRangeMax.setMonthOfYear(12);
		this.m_dateRangeMax.setDayOfMonth(31);
		layout.setAvailableRange(this.m_dateRangeMin, this.m_dateRangeMax);
	}
	layout.setAvailableGranularities(rangeModel.getDateRangeGranularities());
	layout.bindItem(this.m_item);
};
oFF.FdComponentDateRangeFixed.prototype.getFixedDateRangeLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentDateRangeFixed.prototype.getFocusControl = function()
{
	return this.getFixedDateRangeLayout().getGranularityDropdown();
};
oFF.FdComponentDateRangeFixed.prototype.getItem = function()
{
	return this.m_item;
};
oFF.FdComponentDateRangeFixed.prototype.getMilliseconds = function(date)
{
	try
	{
		return oFF.notNull(date) ? date.getMilliseconds() : -1;
	}
	catch (e)
	{
		return -1;
	}
};
oFF.FdComponentDateRangeFixed.prototype.isEmpty = function()
{
	return this.m_item.getGranularity() === null;
};
oFF.FdComponentDateRangeFixed.prototype.isStartDateLaterThanEndDate = function()
{
	let startDateLaterThanEndDate = false;
	let granularity = this.m_item.getGranularity();
	if ((granularity === oFF.DateRangeGranularity.YEAR || granularity === oFF.DateRangeGranularity.HALF_YEAR || granularity === oFF.DateRangeGranularity.QUARTER || granularity === oFF.DateRangeGranularity.MONTH) && this.m_item.getYearFrom() !== -1 && this.m_item.getYearTo() !== -1)
	{
		if (this.m_item.getYearFrom() > this.m_item.getYearTo())
		{
			startDateLaterThanEndDate = true;
		}
		else if (this.m_item.getYearFrom() === this.m_item.getYearTo())
		{
			if (granularity === oFF.DateRangeGranularity.HALF_YEAR)
			{
				startDateLaterThanEndDate = this.m_item.getHalfYearFrom() > this.m_item.getHalfYearTo();
			}
			else if (granularity === oFF.DateRangeGranularity.QUARTER)
			{
				startDateLaterThanEndDate = this.m_item.getQuarterFrom() > this.m_item.getQuarterTo();
			}
			else
			{
				startDateLaterThanEndDate = this.m_item.getMonthFrom() > this.m_item.getMonthTo();
			}
		}
	}
	return startDateLaterThanEndDate;
};
oFF.FdComponentDateRangeFixed.prototype.onDataChanged = function()
{
	this.validate(true);
	this.m_dataChangedListener();
};
oFF.FdComponentDateRangeFixed.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_item = null;
	this.m_dataChangedListener = null;
	this.m_dateRangeMin = oFF.XObjectExt.release(this.m_dateRangeMin);
	this.m_dateRangeMax = oFF.XObjectExt.release(this.m_dateRangeMax);
};
oFF.FdComponentDateRangeFixed.prototype.validate = function(showValidationMessages)
{
	if (showValidationMessages)
	{
		this.getFixedDateRangeLayout().clearMessage();
	}
	if (showValidationMessages && this.isEmpty())
	{
		return true;
	}
	if (this.m_item.getGranularity() === null)
	{
		return false;
	}
	if (this.m_item.getGranularity() === oFF.DateRangeGranularity.DAY)
	{
		return this.validateDateInputFields(showValidationMessages);
	}
	if (this.isStartDateLaterThanEndDate())
	{
		if (showValidationMessages)
		{
			this.getFixedDateRangeLayout().showMessage(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_MIN_GREATER_MAX), true, true);
		}
		return false;
	}
	return true;
};
oFF.FdComponentDateRangeFixed.prototype.validateDateInputFields = function(showValidationMessages)
{
	let isFromStart = this.m_item.getDateFrom() === null;
	let isToEnd = this.m_item.getDateTo() === null;
	let dateFrom = !isFromStart ? oFF.XDate.createDateSafe(this.m_item.getDateFrom()) : null;
	let dateTo = !isToEnd ? oFF.XDate.createDateSafe(this.m_item.getDateTo()) : null;
	let errorMessage = null;
	let errorOnFromDate = !isFromStart && oFF.isNull(dateFrom);
	let errorOnToDate = !isToEnd && oFF.isNull(dateTo);
	if (errorOnFromDate || errorOnToDate)
	{
		let dateDisplayFormat = oFF.UiNumberFormatterCenter.getCenter().getDateDisplayFormat();
		errorMessage = oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_INVALID_DATE_FORMAT, oFF.notNull(dateDisplayFormat) ? dateDisplayFormat : "");
	}
	else
	{
		let millisecondsFrom = this.getMilliseconds(dateFrom);
		let millisecondsTo = this.getMilliseconds(dateTo);
		if (!isFromStart && !isToEnd && millisecondsFrom > millisecondsTo)
		{
			errorOnFromDate = true;
			errorOnToDate = true;
			errorMessage = oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_MIN_GREATER_MAX);
		}
		else
		{
			if (!isFromStart && (millisecondsFrom === -1 || oFF.notNull(this.m_dateRangeMin) && millisecondsFrom < this.m_dateRangeMin.getMilliseconds()))
			{
				errorOnFromDate = true;
				errorMessage = oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_START_DATE_OUTSIDE_RANGE);
			}
			if (!isToEnd && (millisecondsTo === -1 || oFF.notNull(this.m_dateRangeMax) && millisecondsTo > this.m_dateRangeMax.getMilliseconds()))
			{
				errorOnToDate = true;
				errorMessage = oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_END_DATE_OUTSIDE_RANGE);
			}
		}
	}
	if ((errorOnFromDate || errorOnToDate) && showValidationMessages)
	{
		this.getFixedDateRangeLayout().showMessage(errorMessage, errorOnFromDate, errorOnToDate);
	}
	return !errorOnFromDate && !errorOnToDate;
};

oFF.FdComponentAbstractPagingLayout = function() {};
oFF.FdComponentAbstractPagingLayout.prototype = new oFF.XObject();
oFF.FdComponentAbstractPagingLayout.prototype._ff_c = "FdComponentAbstractPagingLayout";

oFF.FdComponentAbstractPagingLayout.MARGIN = "0 0 0 0.25rem";
oFF.FdComponentAbstractPagingLayout.prototype.m_container = null;
oFF.FdComponentAbstractPagingLayout.prototype.m_pagingBtnNext = null;
oFF.FdComponentAbstractPagingLayout.prototype.m_pagingBtnPrev = null;
oFF.FdComponentAbstractPagingLayout.prototype.addContainer = function(genesis)
{
	this.m_container = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_container.setDirection(oFF.UiFlexDirection.ROW);
	this.m_container.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_container.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_container.setWidth(oFF.UiCssLength.create("100%"));
	this.m_container.setMargin(oFF.UiCssBoxEdges.create("0.5rem 0 0 0"));
	this.m_container.setJustifyContent(oFF.UiFlexJustifyContent.CENTER);
	this.m_container.setName("FilterDialogTableFooter");
};
oFF.FdComponentAbstractPagingLayout.prototype.addPagingBtnNext = function(genesis)
{
	this.m_pagingBtnNext = this.m_container.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_pagingBtnNext.setName("FilterDialogPagingBtnNext");
	this.m_pagingBtnNext.setIcon("navigation-right-arrow");
	this.m_pagingBtnNext.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NEXT));
	this.m_pagingBtnNext.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentAbstractPagingLayout.MARGIN));
	this.m_pagingBtnNext.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_pagingBtnNext, genesis, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NEXT)));
};
oFF.FdComponentAbstractPagingLayout.prototype.addPagingBtnPrev = function(genesis)
{
	this.m_pagingBtnPrev = this.m_container.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_pagingBtnPrev.setName("FilterDialogPagingBtnPrev");
	this.m_pagingBtnPrev.setIcon("navigation-left-arrow");
	this.m_pagingBtnPrev.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_PREVIOUS));
	this.m_pagingBtnPrev.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_pagingBtnPrev, genesis, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_PREVIOUS)));
};
oFF.FdComponentAbstractPagingLayout.prototype.getPagingBtnNext = function()
{
	return this.m_pagingBtnNext;
};
oFF.FdComponentAbstractPagingLayout.prototype.getPagingBtnPrev = function()
{
	return this.m_pagingBtnPrev;
};
oFF.FdComponentAbstractPagingLayout.prototype.getRoot = function()
{
	return this.m_container;
};
oFF.FdComponentAbstractPagingLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_container = oFF.XObjectExt.release(this.m_container);
};
oFF.FdComponentAbstractPagingLayout.prototype.resizeComponent = function(size) {};

oFF.FdComponentAbstractTable = function() {};
oFF.FdComponentAbstractTable.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentAbstractTable.prototype._ff_c = "FdComponentAbstractTable";

oFF.FdComponentAbstractTable.prototype.m_uiTable = null;
oFF.FdComponentAbstractTable.prototype.m_view = null;
oFF.FdComponentAbstractTable.prototype.createCell = function(row, item, presentation, colIndex)
{
	let cell = this.m_uiTable.newCell(row, null);
	cell.setText(item.getFormattedValueByPresentation(presentation));
	return cell;
};
oFF.FdComponentAbstractTable.prototype.createRowCells = function(row, item, presentations)
{
	let tooltip = this.getTooltip(item);
	let cellList = oFF.XList.create();
	let size = presentations.size();
	for (let i = 0; i < size; i++)
	{
		let presentation = presentations.get(i);
		let cell = this.createCell(row, item, presentation, i);
		cell.setCustomObject(presentation);
		cell.setTooltip(tooltip);
		cellList.add(cell);
	}
	return cellList;
};
oFF.FdComponentAbstractTable.prototype.getFirstItem = function()
{
	let rows = this.m_uiTable.getRows();
	return oFF.XCollectionUtils.hasElements(rows) ? rows.get(0).getCustomObject() : null;
};
oFF.FdComponentAbstractTable.prototype.getFocusControl = function()
{
	return null;
};
oFF.FdComponentAbstractTable.prototype.getLayout = function()
{
	return this.m_uiTable.getLayout();
};
oFF.FdComponentAbstractTable.prototype.getOrCreateColumn = function(colIndex)
{
	let col = this.m_uiTable.getColumn(colIndex);
	return oFF.notNull(col) ? col : this.m_uiTable.addNewColumn();
};
oFF.FdComponentAbstractTable.prototype.getTooltip = function(item)
{
	let sb = oFF.XStringBuffer.create();
	let key = item.getDisplayKeyFormatted();
	let hasKey = oFF.XStringUtils.isNotNullAndNotEmpty(key);
	if (hasKey)
	{
		sb.append(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID)).append(": ").append(key);
	}
	let text = item.getTextFormatted();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		if (hasKey)
		{
			sb.appendNewLine();
		}
		let itemType = item.getType();
		let descKey = itemType === oFF.FilterDialogValueType.USER || itemType === oFF.FilterDialogValueType.TEAM ? oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME : oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION;
		sb.append(oFF.XLocalizationCenter.getCenter().getText(descKey)).append(": ").append(text);
	}
	return sb.toString();
};
oFF.FdComponentAbstractTable.prototype.isPresentationUpdateNeeded = function(presentationNames)
{
	let columns = this.m_uiTable.getColumns();
	if (presentationNames.size() !== columns.size())
	{
		return true;
	}
	for (let i = 0; i < columns.size(); i++)
	{
		if (!oFF.XString.isEqual(columns.get(i).getTitle(), presentationNames.get(i)))
		{
			return true;
		}
	}
	return false;
};
oFF.FdComponentAbstractTable.prototype.onError = function(messages, customIdentifier)
{
	this.setBusy(false);
	this.updatePaging(false);
};
oFF.FdComponentAbstractTable.prototype.onProcessFinished = function(items, messages, customIdentifier) {};
oFF.FdComponentAbstractTable.prototype.onSearchChange = function(isSearchActive, searchText)
{
	if (!isSearchActive)
	{
		this.setBusy(true);
		this.refreshContent(false);
	}
};
oFF.FdComponentAbstractTable.prototype.onSelectionChange = function(event)
{
	this.m_view.onTableSelectionChange(this.m_uiTable.getVisibleRows(), this.m_uiTable.getSelectedItems());
};
oFF.FdComponentAbstractTable.prototype.onSelectionCleared = function()
{
	this.m_uiTable.clearSelectedItems();
};
oFF.FdComponentAbstractTable.prototype.parentNodesInSearchNeeded = function()
{
	return true;
};
oFF.FdComponentAbstractTable.prototype.publishPresentations = function()
{
	let presentations = this.m_view.getSelectedPresentations();
	this.updateColumns(presentations.getKeysAsReadOnlyList());
	this.updateRows(this.m_uiTable.getRows(), presentations.getValuesAsReadOnlyList());
	this.setBusy(false);
};
oFF.FdComponentAbstractTable.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_uiTable = oFF.XObjectExt.release(this.m_uiTable);
	this.m_view = null;
};
oFF.FdComponentAbstractTable.prototype.setBusy = function(busy)
{
	this.m_uiTable.setBusy(busy);
};
oFF.FdComponentAbstractTable.prototype.setSelectionMode = function(selectionMode)
{
	this.m_uiTable.setTableSelectionMode(selectionMode, this.m_model.isMobile());
};
oFF.FdComponentAbstractTable.prototype.setupTableComponent = function(model, layout, tableBasedView)
{
	this.setupComponent(model, layout);
	this.m_view = tableBasedView;
};
oFF.FdComponentAbstractTable.prototype.updateColumns = function(presentationNames)
{
	let colIndex = 0;
	let size = presentationNames.size();
	for (let i = 0; i < size; i++)
	{
		let col = this.getOrCreateColumn(colIndex);
		col.setTitle(presentationNames.get(i));
		colIndex++;
	}
	while (this.m_uiTable.getColumn(colIndex) !== null)
	{
		this.m_uiTable.removeColumn(this.m_uiTable.getColumn(colIndex));
	}
	if (this.m_uiTable.hasColumns())
	{
		let lastColIndex = this.m_uiTable.getNumberOfColumns() - 1;
		let lastCol = this.m_uiTable.getColumn(lastColIndex).getUiColumn();
		lastCol.setWidth(oFF.UiCssLength.create("auto"));
	}
};
oFF.FdComponentAbstractTable.prototype.updatePaging = function(forceDisablePaging) {};
oFF.FdComponentAbstractTable.prototype.updateRows = function(rows, presentations)
{
	if (oFF.XCollectionUtils.hasElements(rows))
	{
		let size = rows.size();
		for (let i = 0; i < size; i++)
		{
			let row = rows.get(i);
			this.m_uiTable.clearCells(row);
			this.m_uiTable.addAllCells(row, this.createRowCells(row, row.getCustomObject(), presentations));
		}
	}
};
oFF.FdComponentAbstractTable.prototype.updateSelectionState = function(selection)
{
	oFF.XCollectionUtils.forEach(this.m_uiTable.getRows(), (tableRow) => {
		let item = tableRow.getCustomObject();
		if (oFF.notNull(item))
		{
			let isSelected = selection.contains(item);
			if (tableRow.isSelected() !== isSelected)
			{
				tableRow.setSelected(isSelected);
			}
		}
	});
};

oFF.FdComponentEndlessPaging = function() {};
oFF.FdComponentEndlessPaging.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentEndlessPaging.prototype._ff_c = "FdComponentEndlessPaging";

oFF.FdComponentEndlessPaging.create = function(model)
{
	let component = new oFF.FdComponentEndlessPaging();
	component.setupComponent(model, oFF.FdComponentEndlessPagingLayout.create());
	return component;
};
oFF.FdComponentEndlessPaging.prototype.m_keepPagingButtonsEnabled = false;
oFF.FdComponentEndlessPaging.prototype.buildOlapDialogUi = function(genesis)
{
	let pagingLayout = this.getPagingLayout();
	pagingLayout.buildOlapDialogUi(genesis);
	pagingLayout.registerOnPress(this);
};
oFF.FdComponentEndlessPaging.prototype.getFocusControl = function()
{
	return this.getPagingLayout().getNextEnabledPagingButton().orElse(null);
};
oFF.FdComponentEndlessPaging.prototype.getPagingLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentEndlessPaging.prototype.onPress = function(event)
{
	let pagingLayout = this.getPagingLayout();
	let control = event.getControl();
	let controlName = control.getName();
	if (oFF.XString.isEqual(controlName, pagingLayout.getPagingBtnPrev().getName()))
	{
		this.switchPage(this.m_model.getPage() - 1);
		this.preservePagingFocus(control);
	}
	else if (oFF.XString.isEqual(controlName, pagingLayout.getPagingBtnNext().getName()))
	{
		this.switchPage(this.m_model.getPage() + 1);
		this.preservePagingFocus(control);
	}
	else if (oFF.XString.isEqual(controlName, pagingLayout.getPagingBtn1().getName()) || oFF.XString.isEqual(controlName, pagingLayout.getPagingBtn2().getName()) || oFF.XString.isEqual(controlName, pagingLayout.getPagingBtn3().getName()))
	{
		this.switchPage(control.getCustomObject().getInteger());
		this.preservePagingFocus(control);
	}
};
oFF.FdComponentEndlessPaging.prototype.preservePagingFocus = function(previousPagingFocus)
{
	if (!previousPagingFocus.isVisible() || !previousPagingFocus.isEnabled())
	{
		this.getPagingLayout().getNextEnabledPagingButton().ifPresent((button) => {
			button.focus();
		});
	}
};
oFF.FdComponentEndlessPaging.prototype.setBusy = function(busy)
{
	if (busy && !this.m_keepPagingButtonsEnabled)
	{
		this.getPagingLayout().disableAllPagingButtons();
	}
};
oFF.FdComponentEndlessPaging.prototype.switchPage = function(page)
{
	this.m_keepPagingButtonsEnabled = true;
	this.m_model.setPage(page);
	this.m_keepPagingButtonsEnabled = false;
};
oFF.FdComponentEndlessPaging.prototype.updatePaging = function(forceDisablePaging)
{
	let pagingLayout = this.getPagingLayout();
	let pagingBtn1 = pagingLayout.getPagingBtn1();
	let pagingBtn2 = pagingLayout.getPagingBtn2();
	let pagingBtn3 = pagingLayout.getPagingBtn3();
	if (forceDisablePaging)
	{
		pagingBtn1.setText("1");
		pagingLayout.setPagingBtn1Visible(true, false);
		pagingLayout.setPagingBtn2Visible(false, false);
		pagingLayout.setPagingBtn3Visible(false, false);
		pagingLayout.getPagingBtnPrev().setEnabled(false);
		pagingLayout.getPagingBtnNext().setEnabled(false);
	}
	else
	{
		let pageCount = this.m_model.getPageCount();
		let currentPage = this.m_model.getPage();
		pagingLayout.getPagingBtnPrev().setEnabled(currentPage > 0);
		pagingLayout.getPagingBtnNext().setEnabled(this.m_model.hasNextPage());
		let btn1Page = currentPage;
		let btn2Page = -1;
		let btn3Page = -1;
		if (pageCount > currentPage + 1)
		{
			btn2Page = currentPage + 1;
			if (pageCount > currentPage + 2)
			{
				btn3Page = currentPage + 2;
			}
			else if (btn1Page > 0)
			{
				btn3Page = btn2Page;
				btn2Page = btn1Page;
				btn1Page = currentPage - 1;
			}
		}
		else if (btn1Page > 0)
		{
			btn2Page = btn1Page;
			btn1Page = currentPage - 1;
			if (btn1Page > 0)
			{
				btn3Page = btn2Page;
				btn2Page = btn1Page;
				btn1Page = currentPage - 2;
			}
		}
		pagingBtn1.setText(oFF.XInteger.convertToString(btn1Page + 1));
		pagingBtn1.setEnabled(btn1Page !== currentPage);
		pagingBtn1.setCustomObject(oFF.XIntegerValue.create(btn1Page));
		pagingBtn2.setText(oFF.XInteger.convertToString(btn2Page + 1));
		pagingLayout.setPagingBtn2Visible(btn2Page !== -1, btn2Page !== currentPage);
		pagingBtn2.setCustomObject(oFF.XIntegerValue.create(btn2Page));
		pagingBtn3.setText(oFF.XInteger.convertToString(btn3Page + 1));
		pagingLayout.setPagingBtn3Visible(btn3Page !== -1, btn3Page !== currentPage);
		pagingBtn3.setCustomObject(oFF.XIntegerValue.create(btn3Page));
	}
};

oFF.FdComponentPaging = function() {};
oFF.FdComponentPaging.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentPaging.prototype._ff_c = "FdComponentPaging";

oFF.FdComponentPaging.create = function(model)
{
	let component = new oFF.FdComponentPaging();
	component.setupComponent(model, oFF.FdComponentPagingLayout.create());
	return component;
};
oFF.FdComponentPaging.prototype.m_keepPagingButtonsEnabled = false;
oFF.FdComponentPaging.prototype.buildOlapDialogUi = function(genesis)
{
	let pagingLayout = this.getPagingLayout();
	pagingLayout.buildOlapDialogUi(genesis);
	pagingLayout.registerOnPress(this);
};
oFF.FdComponentPaging.prototype.getFocusControl = function()
{
	let pagingLayout = this.getPagingLayout();
	if (pagingLayout.getPagingBtnPrev().isEnabled())
	{
		return pagingLayout.getPagingBtnPrev();
	}
	if (pagingLayout.getPagingBtnNext().isEnabled())
	{
		return pagingLayout.getPagingBtnNext();
	}
	return null;
};
oFF.FdComponentPaging.prototype.getPagingLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentPaging.prototype.onPress = function(event)
{
	let pagingLayout = this.getPagingLayout();
	let controlName = event.getControl().getName();
	if (oFF.XString.isEqual(controlName, pagingLayout.getPagingBtnPrev().getName()))
	{
		this.switchPage(this.m_model.getPage() - 1);
	}
	else if (oFF.XString.isEqual(controlName, pagingLayout.getPagingBtnNext().getName()))
	{
		this.switchPage(this.m_model.getPage() + 1);
	}
};
oFF.FdComponentPaging.prototype.setBusy = function(busy)
{
	if (busy && !this.m_keepPagingButtonsEnabled)
	{
		let pagingLayout = this.getPagingLayout();
		pagingLayout.getPagingBtnPrev().setEnabled(false);
		pagingLayout.getPagingBtnNext().setEnabled(false);
	}
};
oFF.FdComponentPaging.prototype.switchPage = function(page)
{
	this.m_keepPagingButtonsEnabled = true;
	this.m_model.setPage(page);
	this.m_keepPagingButtonsEnabled = false;
};
oFF.FdComponentPaging.prototype.updatePaging = function(forceDisablePaging)
{
	let pagingLayout = this.getPagingLayout();
	if (forceDisablePaging)
	{
		pagingLayout.setPage(0, 0);
	}
	else
	{
		let currentPage = this.m_model.getPage();
		pagingLayout.getPagingBtnPrev().setEnabled(currentPage > 0);
		pagingLayout.getPagingBtnNext().setEnabled(currentPage < this.m_model.getPageCount() - 1);
		pagingLayout.setPage(currentPage + 1, this.m_model.getTotalPageCount());
	}
};

oFF.OuShareDialogAccessPanel = function() {};
oFF.OuShareDialogAccessPanel.prototype = new oFF.XObject();
oFF.OuShareDialogAccessPanel.prototype._ff_c = "OuShareDialogAccessPanel";

oFF.OuShareDialogAccessPanel.create = function(shareDialog, isInitialiseShareDialog)
{
	let obj = new oFF.OuShareDialogAccessPanel();
	obj.m_shareDialog = shareDialog;
	obj.m_isInitialiseShareDialog = isInitialiseShareDialog;
	obj.buildPanel();
	return obj;
};
oFF.OuShareDialogAccessPanel.prototype.m_accessDropdownVisible = false;
oFF.OuShareDialogAccessPanel.prototype.m_accessIcon = null;
oFF.OuShareDialogAccessPanel.prototype.m_deleteIcon = null;
oFF.OuShareDialogAccessPanel.prototype.m_ignoreNextLiveChange = false;
oFF.OuShareDialogAccessPanel.prototype.m_isInitialiseShareDialog = false;
oFF.OuShareDialogAccessPanel.prototype.m_page = 0;
oFF.OuShareDialogAccessPanel.prototype.m_panelAccessMenuButton = null;
oFF.OuShareDialogAccessPanel.prototype.m_searchField = null;
oFF.OuShareDialogAccessPanel.prototype.m_searchIcon = null;
oFF.OuShareDialogAccessPanel.prototype.m_shareDialog = null;
oFF.OuShareDialogAccessPanel.prototype.m_sharedWithLbl = null;
oFF.OuShareDialogAccessPanel.prototype.m_table = null;
oFF.OuShareDialogAccessPanel.prototype.m_toolbarButtons = null;
oFF.OuShareDialogAccessPanel.prototype.m_totalUsers = 0;
oFF.OuShareDialogAccessPanel.prototype.m_userAccessList = null;
oFF.OuShareDialogAccessPanel.prototype.addRow = function(user)
{
	let userIdAndDisplay;
	if (oFF.XString.isEqual(user.getStringByKey("type"), "USER"))
	{
		userIdAndDisplay = oFF.XStringUtils.concatenate4(user.getStringByKey("displayName"), " (", user.getStringByKey("id"), ")");
	}
	else if (oFF.XString.isEqual(user.getStringByKey("type"), "ALL_USERS"))
	{
		userIdAndDisplay = this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.ALL_USERS);
	}
	else
	{
		userIdAndDisplay = oFF.XStringUtils.concatenate2("Team: ", user.getStringByKey("displayName"));
	}
	if (!oFF.XString.isEqual(user.getStringByKey("id"), this.m_shareDialog.getFile().getAttributes().getStringByKey("os.createdBy")))
	{
		let newRow = this.m_table.addNewResponsiveTableRow();
		newRow.addNewResponsiveTableCell().setText(userIdAndDisplay).setTooltip(userIdAndDisplay).setName(user.getStringByKey("id"));
		let accessDropdownTable = this.m_shareDialog.getGenesis().newControl(oFF.UiType.MENU);
		this.m_shareDialog.setTableAccessMenuButton(this.m_shareDialog.getGenesis().newControl(oFF.UiType.MENU_BUTTON));
		this.m_shareDialog.getTableAccessMenuButton().setButtonType(oFF.UiButtonType.TRANSPARENT);
		this.m_shareDialog.getTableAccessMenuButton().addCssClass(user.getStringByKey("id"));
		this.m_shareDialog.getTableAccessMenuButton().setWidth(oFF.UiCssLength.create("7rem"));
		this.m_shareDialog.getTableAccessMenuButton().setMenu(accessDropdownTable);
		let accessNum = user.getIntegerByKey("access");
		let accessValue = this.setAccessType(accessNum);
		this.m_shareDialog.getTableAccessMenuButton().setText(accessValue);
		this.m_shareDialog.getTableAccessMenuButton().setName("view");
		this.m_shareDialog.getTableAccessMenuButton().addCssClass("ffShareDialogAccessMenu");
		this.m_shareDialog.getTableAccessMenuButton().setWidth(oFF.UiCssLength.create("auto"));
		this.m_toolbarButtons.addItem(this.m_shareDialog.getTableAccessMenuButton());
		this.m_shareDialog.fillAccessTypes(accessDropdownTable);
		let items = accessDropdownTable.getItems();
		for (let j = 0; j < items.size(); j++)
		{
			let item = items.get(j);
			item.setKey(user.getStringByKey("id"));
			if (oFF.XString.isEqual(item.getText(), accessValue))
			{
				this.m_shareDialog.getTableAccessMenuButton().setText(item.getText());
			}
		}
		let newCell = newRow.addNewResponsiveTableCellOfType(oFF.UiType.VERTICAL_LAYOUT);
		newCell.addItem(this.m_shareDialog.getTableAccessMenuButton());
	}
};
oFF.OuShareDialogAccessPanel.prototype.addRowsToTable = function()
{
	this.m_table.clearResponsiveTableRows();
	for (let i = 0; i < this.m_userAccessList.size() - 1; i++)
	{
		let user = this.m_userAccessList.getStructureAt(i);
		this.addRow(user);
	}
};
oFF.OuShareDialogAccessPanel.prototype.buildPanel = function()
{
	let panelLayout = this.m_shareDialog.getPanelLayout();
	if (oFF.notNull(panelLayout))
	{
		panelLayout.destroy();
	}
	let accessDetails = this.m_shareDialog.getAccessRights(0, 0, null, this.m_isInitialiseShareDialog);
	accessDetails.onThen((result) => {
		this.m_userAccessList = result.getListReadOnlyByKey(oFF.XFileAttribute.ACCESS_RIGHTS);
		let userAndTeam = this.m_userAccessList.get(this.m_userAccessList.size() - 1);
		let teamCount = userAndTeam.getIntegerByKey("teamCount");
		let userCount = userAndTeam.getIntegerByKey("userCount");
		for (let i = 0; i < this.m_userAccessList.size() - 1; i++)
		{
			let user = this.m_userAccessList.getStructureAt(i);
			if (oFF.XString.isEqual(user.getStringByKey("id"), this.m_shareDialog.getOwner()))
			{
				userCount--;
			}
		}
		if (((teamCount + userCount) > 0))
		{
			this.buildUi();
			this.m_shareDialog.resizeDialog("43rem", "auto");
			this.m_searchField.registerOnSearch(oFF.UiLambdaSearchListener.create((controlEvt) => {
				if (controlEvt.getParameters().getBooleanByKeyExt(oFF.UiEventParams.PARAM_CLEAR_BUTTON_PRESSED, false))
				{
					this.m_ignoreNextLiveChange = true;
				}
				this.handleSearch(controlEvt, false);
			}));
			this.m_searchField.registerOnLiveChange(oFF.UiLambdaLiveChangeWithDebounceListener.create((controlEvt) => {
				if (this.m_ignoreNextLiveChange)
				{
					this.m_ignoreNextLiveChange = false;
					return;
				}
				this.handleSearch(controlEvt, true);
			}, 1000));
			this.m_searchIcon.registerOnPress(oFF.UiLambdaPressListener.create((controlClickEvent) => {
				this.m_searchField.setVisible(true);
				this.setSearchButtonHidden();
			}));
			this.m_deleteIcon.registerOnPress(oFF.UiLambdaPressListener.create((controlClickEvent) => {
				let selectedRows = this.m_table.getSelectedItems();
				let listToAdd = oFF.XList.create();
				for (let j = 0; j < selectedRows.size(); j++)
				{
					listToAdd.add(selectedRows.get(j).getResponsiveTableCell(0).getName());
				}
				let access = oFF.XFileAccessState.create();
				for (let k = 0; k < listToAdd.size(); k++)
				{
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.READ, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.COPY, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.VIEW_COMMENT, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.ADD_COMMENT, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.UPDATE, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.DELETE, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.DELETE_COMMENT, false);
					access.setUserAccess(listToAdd.get(k), oFF.XFileAccess.SHARE, false);
				}
				this.m_shareDialog.setIsSearch(false);
				this.m_shareDialog.setDialogBusy(true);
				this.m_shareDialog.shareFile(access, false, this.m_shareDialog.getIsSelectAll());
			}));
			this.m_shareDialog.fillAccessTypes(this.m_panelAccessMenuButton.getMenu());
			this.m_accessDropdownVisible = false;
			this.m_accessIcon.registerOnPress(oFF.UiLambdaPressListener.create((controlClickEvent) => {
				if (this.m_accessDropdownVisible)
				{
					this.m_panelAccessMenuButton.setVisible(false);
					this.m_accessDropdownVisible = false;
				}
				else
				{
					this.m_panelAccessMenuButton.setVisible(true);
					this.m_accessDropdownVisible = true;
				}
			}));
			this.m_table.registerOnSelectionChange(oFF.UiLambdaSelectionChangeListener.create((evt) => {
				let selectedRows = this.m_table.getSelectedItems();
				if (this.m_shareDialog.getIsSearch())
				{
					this.m_shareDialog.setIsSelectAll(false);
				}
				else
				{
					this.m_shareDialog.setIsSelectAll(evt.getParameters().getBooleanByKey(oFF.UiEventParams.PARAM_SELECT_ALL));
					this.m_table.getResponsiveTableColumn(0).getHeader().setSelected(this.m_table.getResponsiveTableRows().size() - 1 === selectedRows.size());
				}
				if (!selectedRows.isEmpty())
				{
					this.m_deleteIcon.setEnabled(true);
					this.m_accessIcon.setEnabled(true);
				}
				else
				{
					this.m_deleteIcon.setEnabled(false);
					this.m_accessIcon.setEnabled(false);
					if (this.m_accessDropdownVisible)
					{
						this.m_panelAccessMenuButton.setVisible(false);
						this.m_accessDropdownVisible = false;
					}
				}
			}));
			this.buildSharedWithTable();
			this.m_shareDialog.setPanelAccessMenuButton(this.m_panelAccessMenuButton);
			this.m_shareDialog.setTable(this.m_table);
		}
		else
		{
			this.m_shareDialog.resizeDialog("43rem", "auto");
		}
	});
};
oFF.OuShareDialogAccessPanel.prototype.buildSharedWithTable = function()
{
	if (this.m_shareDialog.getProgramStartData() !== null)
	{
		let accessDetails = this.m_shareDialog.getAccessRights(0, 25, null, false);
		accessDetails.onThen((result) => {
			this.m_userAccessList = result.getListReadOnlyByKey(oFF.XFileAttribute.ACCESS_RIGHTS);
			let userAndTeam = this.m_userAccessList.get(this.m_userAccessList.size() - 1);
			let teamCount = userAndTeam.getIntegerByKey("teamCount");
			let userCount = userAndTeam.getIntegerByKey("userCount");
			for (let i = 0; i < this.m_userAccessList.size() - 1; i++)
			{
				let user = this.m_userAccessList.getStructureAt(i);
				if (oFF.XString.isEqual(user.getStringByKey("id"), this.m_shareDialog.getOwner()))
				{
					userCount--;
				}
			}
			let sharedWithText = this.getSharedWithText(teamCount, userCount);
			this.m_sharedWithLbl.setText(sharedWithText);
			this.addRowsToTable();
			this.m_page = 1;
			this.m_table.registerOnScrollLoad(this);
		});
	}
};
oFF.OuShareDialogAccessPanel.prototype.buildUi = function()
{
	let panelLayout = this.m_shareDialog.getGenesis().newControl(oFF.UiType.PANEL);
	panelLayout.registerOnExpand(oFF.UiLambdaExpandListener.create((controlClickEvent) => {
		this.m_shareDialog.resizeDialog("43rem", "auto");
	}));
	panelLayout.registerOnCollapse(oFF.UiLambdaCollapseListener.create((controlClickEvent) => {
		this.m_shareDialog.resizeDialog("43rem", "auto");
	}));
	panelLayout.setMargin(oFF.UiCssBoxEdges.create("0 1rem 1rem 1rem"));
	panelLayout.setExpandable(true);
	panelLayout.setExpanded(false);
	panelLayout.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	panelLayout.setWidth(oFF.UiCssLength.create("calc(100% - 2rem)"));
	let headerToolbar = panelLayout.setNewHeaderToolbar();
	headerToolbar.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	this.m_sharedWithLbl = headerToolbar.addNewItemOfType(oFF.UiType.LABEL);
	this.m_sharedWithLbl.setLabelFor(panelLayout);
	this.m_toolbarButtons = headerToolbar.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	let searchContainer = this.m_toolbarButtons.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_searchIcon = searchContainer.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_searchIcon.setName("Search");
	this.m_searchIcon.setIcon("search");
	this.m_searchField = panelLayout.setNewContent(oFF.UiType.SEARCH_FIELD);
	this.m_searchField.setVisible(false);
	this.m_searchField.setName("ShareDialogSearchInput");
	this.m_searchField.setWidth(oFF.UiCssLength.create("250px"));
	this.m_searchField.setMargin(oFF.UiCssBoxEdges.create("0 0.25rem 0 0 "));
	this.m_searchField.setPlaceholder(this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.SEARCH));
	searchContainer.addItem(this.m_searchField);
	this.m_deleteIcon = this.m_toolbarButtons.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_deleteIcon.setName("Unshare");
	this.m_deleteIcon.setIcon("delete");
	this.m_deleteIcon.setEnabled(false);
	let accessContainer = this.m_toolbarButtons.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_accessIcon = accessContainer.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_accessIcon.setName("Access");
	this.m_accessIcon.setIcon("fpa/roles");
	this.m_accessIcon.setTooltip(this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.ACCESS_TOOLTIP));
	this.m_accessIcon.setEnabled(false);
	this.m_panelAccessMenuButton = this.m_shareDialog.getGenesis().newControl(oFF.UiType.MENU_BUTTON);
	this.m_panelAccessMenuButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	let accessDropdown = this.m_shareDialog.getGenesis().newControl(oFF.UiType.MENU);
	accessContainer.addItem(this.m_panelAccessMenuButton);
	this.m_panelAccessMenuButton.setMenu(accessDropdown);
	this.m_panelAccessMenuButton.setText(this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE));
	this.m_panelAccessMenuButton.setName("view");
	this.m_panelAccessMenuButton.setWidth(oFF.UiCssLength.create("auto"));
	accessDropdown.setName("selectedUsersTable");
	this.m_panelAccessMenuButton.setVisible(false);
	this.m_panelAccessMenuButton.addCssClass("ffShareDialogAccessMenu");
	this.m_toolbarButtons.setMargin(oFF.UiCssBoxEdges.create("0 0 0 auto"));
	let tableLayout = panelLayout.setNewContent(oFF.UiType.VERTICAL_LAYOUT);
	let tableContainer = tableLayout.addNewItemOfType(oFF.UiType.SCROLL_CONTAINER);
	tableContainer.setWidth(oFF.UiCssLength.create("auto"));
	tableContainer.setBorderColor(oFF.UiColor.createByRgba(240, 240, 240, 1.0));
	tableContainer.setBorderStyle(oFF.UiBorderStyle.SOLID);
	tableContainer.setBorderWidth(oFF.UiCssBoxEdges.create("1px"));
	tableContainer.setMaxHeight(oFF.UiCssLength.create("9.5rem"));
	this.m_table = tableContainer.setNewContent(oFF.UiType.RESPONSIVE_TABLE);
	this.m_table.addCssClass("ffShareDialogReTable");
	this.m_table.setFlex("auto");
	this.m_table.setBorderColor(oFF.UiColor.createByRgba(240, 240, 240, 1.0));
	this.m_table.setBorderStyle(oFF.UiBorderStyle.SOLID);
	this.m_table.setBorderWidth(oFF.UiCssBoxEdges.create("1px"));
	this.m_table.setHeight(oFF.UiCssLength.create("20%"));
	this.m_table.setSelectionMode(oFF.UiSelectionMode.MULTI_SELECT);
	this.m_table.addNewResponsiveTableColumn().setNewHeader(oFF.UiType.LABEL).setText(this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.NAME));
	let column = this.m_table.addNewResponsiveTableColumn();
	column.setNewHeader(oFF.UiType.LABEL).setText(this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.ACCESS));
	column.setWidth(oFF.UiCssLength.create("32%"));
	column.addCssClass("ffShareDialogReTableLastColumn");
	this.m_shareDialog.setPanelLayout(panelLayout);
};
oFF.OuShareDialogAccessPanel.prototype.getSharedWithText = function(teamCount, userCount)
{
	if (this.m_totalUsers === 0)
	{
		this.m_totalUsers = teamCount + userCount;
	}
	this.m_shareDialog.getGeneralLayout().addItem(this.m_shareDialog.getPanelLayout());
	if (userCount >= 1 && oFF.XString.isEqual(this.m_userAccessList.get(1).getStringByKey("type"), "ALL_USERS"))
	{
		if (teamCount > 1)
		{
			return this.m_shareDialog.getShareDialogLocalization().getTextWithPlaceholder(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_ALL_USERS, oFF.XInteger.convertToString(teamCount));
		}
		else if (teamCount === 1)
		{
			return this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_ALL_USERS);
		}
		else
		{
			return this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.SHARED_WITH_ALL_USERS);
		}
	}
	if (teamCount > 1 && userCount > 1)
	{
		return this.m_shareDialog.getShareDialogLocalization().getTextWithPlaceholder2(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USERS, oFF.XInteger.convertToString(teamCount), oFF.XInteger.convertToString(userCount));
	}
	else if (teamCount > 1 && userCount === 1)
	{
		return this.m_shareDialog.getShareDialogLocalization().getTextWithPlaceholder(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USER, oFF.XInteger.convertToString(teamCount));
	}
	else if (teamCount === 1 && userCount > 1)
	{
		return this.m_shareDialog.getShareDialogLocalization().getTextWithPlaceholder(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USERS, oFF.XInteger.convertToString(userCount));
	}
	else if (teamCount === 1 && userCount === 1)
	{
		return this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USER);
	}
	else if (teamCount > 1 && userCount === 0)
	{
		return this.m_shareDialog.getShareDialogLocalization().getTextWithPlaceholder(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS, oFF.XInteger.convertToString(teamCount));
	}
	else if (teamCount === 1 && userCount === 0)
	{
		return this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM);
	}
	else if (teamCount === 0 && userCount > 1)
	{
		return this.m_shareDialog.getShareDialogLocalization().getTextWithPlaceholder(oFF.OuShareDialogI18n.SHARED_WITH_USERS, oFF.XInteger.convertToString(userCount));
	}
	else if (teamCount === 0 && userCount === 1)
	{
		return this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.SHARED_WITH_USER);
	}
	return "";
};
oFF.OuShareDialogAccessPanel.prototype.getUserAccessList = function()
{
	return this.m_userAccessList;
};
oFF.OuShareDialogAccessPanel.prototype.handleSearch = function(controlEvent, liveChange)
{
	if (oFF.notNull(controlEvent))
	{
		let didPressClearButton = controlEvent.getParameters().getBooleanByKeyExt(oFF.UiEventParams.PARAM_CLEAR_BUTTON_PRESSED, false);
		let searchText;
		if (liveChange)
		{
			searchText = controlEvent.getParameters().getStringByKeyExt(oFF.UiEventParams.PARAM_VALUE, "");
		}
		else
		{
			searchText = controlEvent.getParameters().getStringByKeyExt(oFF.UiEventParams.PARAM_SEARCH_TEXT, "");
		}
		if (!didPressClearButton && !oFF.XStringUtils.isNullOrEmpty(searchText))
		{
			this.m_table.setBusy(true);
			this.m_shareDialog.setIsSearch(true);
			let accessDetails = this.m_shareDialog.getAccessRights(0, 100, searchText, false);
			accessDetails.onThen((result) => {
				this.m_userAccessList = result.getListReadOnlyByKey(oFF.XFileAttribute.ACCESS_RIGHTS);
				this.addRowsToTable();
				this.m_table.setBusy(false);
			});
		}
		else
		{
			this.m_shareDialog.setIsSearch(false);
			this.m_table.setBusy(true);
			this.m_searchField.setVisible(false);
			this.m_table.clearResponsiveTableRows();
			let accessDetails = this.m_shareDialog.getAccessRights(0, 25, null, false);
			accessDetails.onThen((result) => {
				this.m_userAccessList = result.getListReadOnlyByKey(oFF.XFileAttribute.ACCESS_RIGHTS);
				this.addRowsToTable();
			}).onFinally(() => {
				this.m_table.getResponsiveTableColumn(0).getHeader().setSelected(false);
				this.m_table.setBusy(false);
			});
			this.m_searchIcon.setVisible(true);
			this.m_searchIcon.setEnabled(true);
		}
	}
};
oFF.OuShareDialogAccessPanel.prototype.onScrollLoad = function(event)
{
	if (!this.m_table.isBusy())
	{
		if (this.m_totalUsers > this.m_page * 25)
		{
			this.m_shareDialog.setDialogBusy(true);
			this.m_page = this.m_page + 1;
			let accessDetails = this.m_shareDialog.getAccessRights(((this.m_page - 1) * 25), this.m_page * 25, null, false);
			accessDetails.onThen((result) => {
				this.m_userAccessList = result.getListReadOnlyByKey(oFF.XFileAttribute.ACCESS_RIGHTS);
				for (let i = 0; i < this.m_userAccessList.size() - 1; i++)
				{
					let user = this.m_userAccessList.getStructureAt(i);
					this.addRow(user);
				}
				this.m_shareDialog.setDialogBusy(false);
			});
		}
	}
};
oFF.OuShareDialogAccessPanel.prototype.releaseObject = function()
{
	this.m_sharedWithLbl = oFF.XObjectExt.release(this.m_sharedWithLbl);
	this.m_toolbarButtons = oFF.XObjectExt.release(this.m_toolbarButtons);
	this.m_searchIcon = oFF.XObjectExt.release(this.m_searchIcon);
	this.m_searchField = oFF.XObjectExt.release(this.m_searchField);
	this.m_accessIcon = oFF.XObjectExt.release(this.m_accessIcon);
	this.m_deleteIcon = oFF.XObjectExt.release(this.m_deleteIcon);
	this.m_table = oFF.XObjectExt.release(this.m_table);
	this.m_panelAccessMenuButton = oFF.XObjectExt.release(this.m_panelAccessMenuButton);
	this.m_shareDialog = oFF.XObjectExt.release(this.m_shareDialog);
	this.m_userAccessList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_userAccessList);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OuShareDialogAccessPanel.prototype.setAccessType = function(accessNumber)
{
	let access;
	switch (accessNumber)
	{
		case 450:
			access = this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE);
			break;

		case 454:
			access = this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.EDIT_ACCESS_TYPE);
			break;

		case 975:
			access = this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.FULL_ACCESS_TYPE);
			break;

		default:
			access = this.m_shareDialog.getShareDialogLocalization().getText(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TYPE);
			break;
	}
	return access;
};
oFF.OuShareDialogAccessPanel.prototype.setSearchButtonHidden = function()
{
	this.m_searchIcon.setEnabled(false);
	this.m_searchIcon.setVisible(false);
	this.m_searchField.setVisible(true);
	this.m_searchField.focus();
};

oFF.OuFetchUsersTeams = function() {};
oFF.OuFetchUsersTeams.prototype = new oFF.XObjectExt();
oFF.OuFetchUsersTeams.prototype._ff_c = "OuFetchUsersTeams";

oFF.OuFetchUsersTeams.create = function(localization)
{
	let obj = new oFF.OuFetchUsersTeams();
	obj.m_localization = localization;
	return obj;
};
oFF.OuFetchUsersTeams.prototype.m_localization = null;
oFF.OuFetchUsersTeams.prototype.fetchUsersOrTeams = function(dir, offset, maxUsers, searchValue, sort, workspaceId)
{
	return oFF.XPromise.create((resolve, reject) => {
		if (oFF.notNull(dir) && dir.isValid())
		{
			if (!dir.isMetadataLoaded())
			{
				dir.processFetchMetadata(oFF.SyncType.BLOCKING, null, null, oFF.XFileCachingType.AUTO);
			}
			let query = dir.newFileQuery();
			query.setSearchValue(searchValue);
			query.setOffset(offset);
			query.setMaxItems(maxUsers);
			let sortDef = oFF.XFileSortDef.create();
			if (oFF.notNull(sort))
			{
				sortDef.setDirection(sort);
			}
			query.setSingleSortDef(sortDef);
			if (oFF.notNull(workspaceId))
			{
				let workspaceFilter = query.newFilterElement(oFF.XFileAttributeDef.SPACE_ID);
				workspaceFilter.setValue(workspaceId);
				workspaceFilter.setType(oFF.XFileFilterType.EXACT);
				query.addCartesianFilter(workspaceFilter);
			}
			dir.processFetchChildren(oFF.SyncType.NON_BLOCKING, oFF.XLambdaFileFetchChildrenListener.create((result, list) => {
				if (oFF.notNull(result) && !result.hasErrors())
				{
					resolve(result);
				}
				else
				{
					reject(oFF.XError.create(this.m_localization.getText(oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR)));
				}
			}), null, query);
		}
		else
		{
			reject(oFF.XError.create(this.m_localization.getText(oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR)));
		}
	});
};
oFF.OuFetchUsersTeams.prototype.getTeams = function(process, offset, maxUsers, searchValue, sort, workspaceId)
{
	let teamDirFilePath = process.getKernel().getKernelProcess().getEnvironment().resolvePath("sys/${ff_main_clib_sys}/sacusers/Teams/");
	let root = process.getRootDirectoryUri().getUrl();
	let filePath = oFF.XStringUtils.concatenate2(root, teamDirFilePath);
	let teamsDir = oFF.XFile.createWithVars(process, filePath);
	return this.fetchUsersOrTeams(teamsDir, offset, maxUsers, searchValue, sort, workspaceId);
};
oFF.OuFetchUsersTeams.prototype.getUsers = function(process, offset, maxUsers, searchValue, sort, workspaceId)
{
	let teamDirFilePath = process.getKernel().getKernelProcess().getEnvironment().resolvePath("sys/${ff_main_clib_sys}/sacusers/Users/");
	let root = process.getRootDirectoryUri().getUrl();
	let filePath = oFF.XStringUtils.concatenate2(root, teamDirFilePath);
	let usersDir = oFF.XFile.createWithVars(process, filePath);
	return this.fetchUsersOrTeams(usersDir, offset, maxUsers, searchValue, sort, workspaceId);
};
oFF.OuFetchUsersTeams.prototype.getUsersInTeam = function(team, process)
{
	return oFF.XPromise.create((resolve, reject) => {
		let teamDirFilePath = process.getKernel().getKernelProcess().getEnvironment().resolvePath("sys/${ff_main_clib_sys}/sacusers/Teams/");
		let root = process.getRootDirectoryUri().getUrl();
		let filePath = oFF.XStringUtils.concatenate3(root, teamDirFilePath, team);
		let teamsDir = oFF.XFile.createWithVars(process, filePath);
		if (teamsDir.isValid())
		{
			teamsDir.processFetchChildren(oFF.SyncType.NON_BLOCKING, oFF.XLambdaFileFetchChildrenListener.create((result, list) => {
				if (oFF.notNull(result) && !result.hasErrors())
				{
					resolve(result);
				}
				else
				{
					reject(oFF.XError.create(this.m_localization.getText(oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR)));
				}
			}), null, null);
		}
		else
		{
			reject(oFF.XError.create(this.m_localization.getText(oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR)));
		}
	});
};
oFF.OuFetchUsersTeams.prototype.releaseObject = function()
{
	this.m_localization = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};

oFF.VdBackendStateHandler = function() {};
oFF.VdBackendStateHandler.prototype = new oFF.XObjectExt();
oFF.VdBackendStateHandler.prototype._ff_c = "VdBackendStateHandler";

oFF.VdBackendStateHandler.createHandler = function(varProcessor)
{
	let obj = new oFF.VdBackendStateHandler();
	obj.setupExt(varProcessor);
	return obj;
};
oFF.VdBackendStateHandler.prototype.m_savedValues = null;
oFF.VdBackendStateHandler.prototype.m_submitListener = null;
oFF.VdBackendStateHandler.prototype.m_submitValues = null;
oFF.VdBackendStateHandler.prototype.m_varProcessor = null;
oFF.VdBackendStateHandler.prototype.m_variables = null;
oFF.VdBackendStateHandler.prototype.activateVariant = function(variant, listener, customIdentifier)
{
	let transferListener = oFF.VariableProcessorCallbackLambda.createSingleUse((transferResult) => {
		if (transferResult.hasErrors())
		{
			listener.onVariableProcessorExecuted(transferResult, null, customIdentifier);
			return;
		}
		let allValues = oFF.VdImportExport.getValuesFromProcessor(this.m_varProcessor);
		this.m_savedValues = oFF.VdValue.cloneValueMap(allValues);
		listener.onVariableProcessorExecuted(transferResult, transferResult.getData(), customIdentifier);
	});
	let activationListener = oFF.VariableProcessorCallbackLambda.createSingleUse((activateResult) => {
		if (activateResult.hasErrors())
		{
			listener.onVariableProcessorExecuted(activateResult, null, customIdentifier);
			return;
		}
		this.m_varProcessor.transferVariables(oFF.OlapUiValueHelpAbstract.s_syncType, transferListener, null);
	});
	this.m_varProcessor.activateVariableVariant(variant, oFF.OlapUiValueHelpAbstract.s_syncType, activationListener, null);
};
oFF.VdBackendStateHandler.prototype.cancelReinitVariables = function(startValues, listener, customIdentifier)
{
	this.saveValues(startValues);
	if (!this.m_varProcessor.isCancelNeeded())
	{
		listener.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, customIdentifier);
		return;
	}
	this.m_varProcessor.cancelReInitVariables(oFF.OlapUiValueHelpAbstract.s_syncType, listener, customIdentifier);
};
oFF.VdBackendStateHandler.prototype.doCallbackWithProcessingError = function(i18nKey, listener, customIdentifier)
{
	let messages = oFF.MessageManagerSimple.createMessageManager();
	messages.setServerStatusCode(oFF.HttpStatusCode.SC_OK);
	messages.addError(oFF.ErrorCodes.VARIABLE_PROCESSOR_ALREADY_PROCESSING, oFF.OuVariableDialogI18nLegacy.getProvider().getText(i18nKey));
	listener.onVariableProcessorExecuted(oFF.ExtResult.create(null, messages), null, customIdentifier);
};
oFF.VdBackendStateHandler.prototype.getSubmitProcessor = function()
{
	return this.m_varProcessor;
};
oFF.VdBackendStateHandler.prototype.isTransferRequired = function(values, variableToTransfer)
{
	let queryManager = variableToTransfer.getQueryManager();
	let skipGivenVariable = oFF.notNull(queryManager) ? !queryManager.isDirectVariableTransferEnabled() : !this.m_varProcessor.isDirectVariableTransferEnabled();
	for (let i = 0; i < this.m_variables.size(); i++)
	{
		let variable = this.m_variables.get(i);
		if (variable === variableToTransfer && skipGivenVariable)
		{
			continue;
		}
		let varName = variable.getName();
		if (!oFF.XListUtils.isListEquals(values.getByKey(varName), this.m_savedValues.getByKey(varName)))
		{
			return true;
		}
	}
	return false;
};
oFF.VdBackendStateHandler.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.submitVariables(this.m_submitValues, this.m_submitListener, customIdentifier);
	this.m_submitValues = null;
	this.m_submitListener = null;
};
oFF.VdBackendStateHandler.prototype.reinitVariables = function(listener, customIdentifier)
{
	if (this.m_varProcessor.getVariableProcessorState().isTypeOf(oFF.VariableProcessorState.PROCESSING))
	{
		this.doCallbackWithProcessingError(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_QUERIES_IN_PROCESSING, listener, customIdentifier);
		return;
	}
	if (!this.m_varProcessor.isReinitNeeded())
	{
		listener.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, customIdentifier);
		return;
	}
	this.m_varProcessor.reInitVariablesAfterSubmit(oFF.OlapUiValueHelpAbstract.s_syncType, listener, customIdentifier);
};
oFF.VdBackendStateHandler.prototype.releaseObject = function()
{
	this.m_varProcessor = null;
	this.m_variables = null;
	this.m_submitValues = null;
	this.m_submitListener = null;
	this.m_savedValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_savedValues);
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.VdBackendStateHandler.prototype.saveValues = function(allValues)
{
	for (let i = 0; i < this.m_variables.size(); i++)
	{
		let variable = this.m_variables.get(i);
		let varName = variable.getName();
		oFF.VdImportExport.setValuesToVariable(variable, allValues.getByKey(varName));
	}
	this.m_savedValues = oFF.VdValue.cloneValueMap(allValues);
};
oFF.VdBackendStateHandler.prototype.saveVariant = function(values, variant, listener, customIdentifier)
{
	this.saveValues(values);
	this.m_varProcessor.updateVariableVariantValues(variant, oFF.OlapUiValueHelpAbstract.s_syncType, listener, customIdentifier);
};
oFF.VdBackendStateHandler.prototype.setVariableValues = function(cleanedValues)
{
	oFF.VdImportExport.setValuesToProcessor(this.m_varProcessor, cleanedValues);
};
oFF.VdBackendStateHandler.prototype.setupExt = function(varProcessor)
{
	this.m_varProcessor = varProcessor;
	this.m_variables = this.m_varProcessor.getInputEnabledAndNonTechnicalVariables();
	this.m_savedValues = this.m_varProcessor.isDirectVariableTransferEnabled() || this.m_varProcessor.getVariableProcessorState().isTypeOf(oFF.VariableProcessorState.CHANGEABLE_REINIT) ? oFF.VdImportExport.getValuesFromProcessor(this.m_varProcessor) : oFF.XHashMapByString.create();
};
oFF.VdBackendStateHandler.prototype.submitVariables = function(values, listener, customIdentifier)
{
	if (this.m_varProcessor.getVariableProcessorState().isTypeOf(oFF.VariableProcessorState.PROCESSING))
	{
		this.doCallbackWithProcessingError(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VAR_SUBMIT_IN_PROCESSING, listener, customIdentifier);
	}
	else if (this.m_varProcessor.isReinitNeeded())
	{
		this.m_submitValues = values;
		this.m_submitListener = listener;
		this.m_varProcessor.reInitVariablesAfterSubmit(oFF.OlapUiValueHelpAbstract.s_syncType, this, customIdentifier);
	}
	else if (this.m_varProcessor.isSubmitNeeded())
	{
		this.saveValues(values);
		this.m_varProcessor.submitVariables(oFF.OlapUiValueHelpAbstract.s_syncType, listener, customIdentifier);
	}
	else
	{
		this.saveValues(values);
		listener.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, customIdentifier);
	}
};
oFF.VdBackendStateHandler.prototype.transferVariables = function(values, variable, listener, customIdentifier)
{
	let queryManager = variable.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		this.transferWithProcessor(queryManager, values, variable, listener, customIdentifier);
	}
	else
	{
		this.transferWithProcessor(this.m_varProcessor, values, variable, listener, customIdentifier);
	}
};
oFF.VdBackendStateHandler.prototype.transferWithProcessor = function(processor, values, variable, listener, customIdentifier)
{
	if (this.isTransferRequired(values, variable))
	{
		this.saveValues(values);
		if (!processor.isDirectVariableTransferEnabled())
		{
			processor.transferVariables(oFF.OlapUiValueHelpAbstract.s_syncType, listener, customIdentifier);
			return;
		}
	}
	listener.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, customIdentifier);
};

oFF.VdVariableDialog = function() {};
oFF.VdVariableDialog.prototype = new oFF.XObject();
oFF.VdVariableDialog.prototype._ff_c = "VdVariableDialog";

oFF.VdVariableDialog.CSS_DIALOG = "ffVariableDialog";
oFF.VdVariableDialog.CSS_DIALOG_CANCEL_BTN = "VariableDialogCancelBtn";
oFF.VdVariableDialog.CSS_DIALOG_SUBMIT_BTN = "VariableDialogSubmitBtn";
oFF.VdVariableDialog.CSS_DIALOG_WITH_GRID = "ffVariableDialogWithGrid";
oFF.VdVariableDialog.createAsDisplay = function(context, configuration, displayListener)
{
	let obj = new oFF.VdVariableDialog();
	obj.setupVariableDialog(context, configuration, displayListener);
	return obj;
};
oFF.VdVariableDialog.prototype.m_cancelBtn = null;
oFF.VdVariableDialog.prototype.m_config = null;
oFF.VdVariableDialog.prototype.m_display = null;
oFF.VdVariableDialog.prototype.m_displayListener = null;
oFF.VdVariableDialog.prototype.m_originalReinitListener = null;
oFF.VdVariableDialog.prototype.m_originalRenderListener = null;
oFF.VdVariableDialog.prototype.m_originalSubmitListener = null;
oFF.VdVariableDialog.prototype.m_submitBtn = null;
oFF.VdVariableDialog.prototype.m_variableForm = null;
oFF.VdVariableDialog.prototype.attemptSubmit = function()
{
	this.m_variableForm.attemptSubmit();
};
oFF.VdVariableDialog.prototype.attemptSubmitWithCancelReinitFallback = function()
{
	this.m_variableForm.attemptSubmitWithCancelReinitFallback();
};
oFF.VdVariableDialog.prototype.callOnCancel = function()
{
	if (oFF.notNull(this.m_displayListener))
	{
		this.m_displayListener.onCancel();
	}
};
oFF.VdVariableDialog.prototype.callOnOk = function()
{
	if (oFF.notNull(this.m_displayListener))
	{
		this.m_displayListener.onOk();
	}
};
oFF.VdVariableDialog.prototype.cancelReinit = function()
{
	this.m_variableForm.cancelReinit();
};
oFF.VdVariableDialog.prototype.close = function()
{
	if (this.m_display.isOpen())
	{
		this.m_display.close();
	}
};
oFF.VdVariableDialog.prototype.closeDialogCancel = function()
{
	if (oFF.notNull(this.m_display) && this.m_display.isOpen())
	{
		this.m_display.close();
	}
	this.callOnCancel();
};
oFF.VdVariableDialog.prototype.closeDialogOk = function()
{
	if (oFF.notNull(this.m_display) && this.m_display.isOpen())
	{
		this.m_display.close();
	}
	this.callOnOk();
};
oFF.VdVariableDialog.prototype.getCleanedValues = function()
{
	return this.m_variableForm.getCleanedValues();
};
oFF.VdVariableDialog.prototype.getContext = function()
{
	return this.m_variableForm.getContext();
};
oFF.VdVariableDialog.prototype.getControllers = function()
{
	return this.m_variableForm.getControllers();
};
oFF.VdVariableDialog.prototype.getCurrentValues = function()
{
	return this.m_variableForm.getCurrentValues();
};
oFF.VdVariableDialog.prototype.getInternalStateHandler = function()
{
	return this.m_variableForm.getInternalStateHandler();
};
oFF.VdVariableDialog.prototype.getModel = function()
{
	return this.m_variableForm.getModel();
};
oFF.VdVariableDialog.prototype.getNumberOfMandatoryVariables = function()
{
	return this.m_variableForm.getNumberOfMandatoryVariables();
};
oFF.VdVariableDialog.prototype.getStateHandler = function()
{
	return this.m_variableForm.getStateHandler();
};
oFF.VdVariableDialog.prototype.getVariableProcessor = function()
{
	return this.m_variableForm.getVariableProcessor();
};
oFF.VdVariableDialog.prototype.getView = function()
{
	return this.m_variableForm.getView();
};
oFF.VdVariableDialog.prototype.hasDynamicVariables = function()
{
	return this.m_variableForm.hasDynamicVariables();
};
oFF.VdVariableDialog.prototype.hasExitVariables = function()
{
	return this.m_variableForm.hasExitVariables();
};
oFF.VdVariableDialog.prototype.hasVariables = function()
{
	return this.m_variableForm.hasVariables();
};
oFF.VdVariableDialog.prototype.isEmbedded = function()
{
	return this.m_variableForm.isEmbedded();
};
oFF.VdVariableDialog.prototype.isInputEnabled = function()
{
	return this.m_variableForm.isInputEnabled();
};
oFF.VdVariableDialog.prototype.isOpen = function()
{
	return this.m_display.isOpen();
};
oFF.VdVariableDialog.prototype.needShowMandatoryVarsOnlyCb = function()
{
	return this.m_variableForm.needShowMandatoryVarsOnlyCb();
};
oFF.VdVariableDialog.prototype.onAfterOpen = function(event)
{
	let genesis = oFF.UiGenesis.create(this.m_display);
	this.m_variableForm.buildOlapDialogUi(genesis);
};
oFF.VdVariableDialog.prototype.onAfterSubmit = function(success, extResult, values, valuesJson)
{
	this.m_submitBtn.setEnabled(true);
	if (oFF.notNull(this.m_originalSubmitListener))
	{
		this.m_originalSubmitListener.onAfterSubmit(success, extResult, values, valuesJson);
	}
	if (success)
	{
		this.closeDialogOk();
	}
};
oFF.VdVariableDialog.prototype.onAfterVariantActivation = function()
{
	this.setSubmitButtonEnabled(true);
};
oFF.VdVariableDialog.prototype.onBeforeClose = function(event)
{
	this.cancelReinit();
};
oFF.VdVariableDialog.prototype.onBeforeSubmit = function(values, valuesJson)
{
	this.m_submitBtn.setEnabled(false);
	if (oFF.notNull(this.m_originalSubmitListener))
	{
		this.m_originalSubmitListener.onBeforeSubmit(values, valuesJson);
	}
};
oFF.VdVariableDialog.prototype.onBeforeVariantActivation = function()
{
	this.setSubmitButtonEnabled(false);
};
oFF.VdVariableDialog.prototype.onCancelReinit = function()
{
	this.closeDialogCancel();
	if (oFF.notNull(this.m_originalReinitListener))
	{
		this.m_originalReinitListener.onCancelReinit();
	}
};
oFF.VdVariableDialog.prototype.onReinit = function(success, extResult)
{
	if (!success)
	{
		this.m_display.close();
	}
	if (oFF.notNull(this.m_originalReinitListener))
	{
		this.m_originalReinitListener.onReinit(success, extResult);
	}
};
oFF.VdVariableDialog.prototype.onRenderDone = function(root)
{
	if (!this.m_config.isGridLayoutEnabled())
	{
		this.m_display.setHeight(oFF.UiCssLength.AUTO);
	}
	this.m_submitBtn = this.m_display.newDialogButton();
	this.m_submitBtn.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_submitBtn.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET));
	this.m_submitBtn.setName(oFF.VdVariableDialog.CSS_DIALOG_SUBMIT_BTN);
	this.m_submitBtn.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
		this.attemptSubmit();
	}));
	this.m_submitBtn.focus();
	this.m_display.insertDialogButton(this.m_submitBtn, 0);
	if (oFF.notNull(this.m_originalRenderListener))
	{
		this.m_originalRenderListener.onRenderDone(root);
	}
};
oFF.VdVariableDialog.prototype.open = function()
{
	let model = this.m_variableForm.getModel();
	let processorState = model.getVariableProcessor().getVariableProcessorState();
	if (this.m_config.isAutoSubmitOnStartup() && processorState === oFF.VariableProcessorState.CHANGEABLE_STARTUP && model.validateValues())
	{
		this.m_variableForm.submitInternal();
	}
	else
	{
		this.m_display.setNewContent(oFF.UiType.ACTIVITY_INDICATOR).useMaxSpace();
		this.m_display.open();
	}
};
oFF.VdVariableDialog.prototype.performStoryFilterOptimizationWorkflow = function(varName)
{
	this.m_variableForm.performStoryFilterOptimizationWorkflow(varName);
};
oFF.VdVariableDialog.prototype.performStoryFilterOptimizationWorkflowWithCallback = function(varName, listener)
{
	this.m_variableForm.performStoryFilterOptimizationWorkflowWithCallback(varName, listener);
};
oFF.VdVariableDialog.prototype.performValueHelpWithDialog = function(variableModel, currentSelection, selectionMode, listener)
{
	this.m_variableForm.performValueHelpWithDialog(variableModel, currentSelection, selectionMode, listener);
};
oFF.VdVariableDialog.prototype.registerReinitListener = function(listener)
{
	this.m_originalReinitListener = listener;
};
oFF.VdVariableDialog.prototype.registerRenderListener = function(listener)
{
	this.m_originalRenderListener = listener;
};
oFF.VdVariableDialog.prototype.registerSubmitListener = function(listener)
{
	this.m_originalSubmitListener = listener;
};
oFF.VdVariableDialog.prototype.releaseObject = function()
{
	this.m_submitBtn = oFF.XObjectExt.release(this.m_submitBtn);
	this.m_cancelBtn = oFF.XObjectExt.release(this.m_cancelBtn);
	this.m_display = oFF.XObjectExt.release(this.m_display);
	this.m_variableForm = oFF.XObjectExt.release(this.m_variableForm);
	this.m_displayListener = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableDialog.prototype.resetValues = function()
{
	this.m_variableForm.resetValues();
};
oFF.VdVariableDialog.prototype.setExternalStateHandler = function(externalStateHandler)
{
	this.m_variableForm.setExternalStateHandler(externalStateHandler);
};
oFF.VdVariableDialog.prototype.setInitialFocus = function()
{
	this.m_submitBtn.focus();
};
oFF.VdVariableDialog.prototype.setInputEnabled = function(inputEnabled)
{
	this.m_variableForm.setInputEnabled(inputEnabled);
};
oFF.VdVariableDialog.prototype.setSubmitButtonEnabled = function(enabled)
{
	this.m_submitBtn.setEnabled(enabled);
};
oFF.VdVariableDialog.prototype.setValueHelpProcessorProvider = function(processorProvider)
{
	this.m_variableForm.setValueHelpProcessorProvider(processorProvider);
};
oFF.VdVariableDialog.prototype.setValueJson = function(valueJson)
{
	this.m_variableForm.setValueJson(valueJson);
};
oFF.VdVariableDialog.prototype.setValueNativeJson = function(json)
{
	this.m_variableForm.setValueNativeJson(json);
};
oFF.VdVariableDialog.prototype.setValues = function(allValues)
{
	this.m_variableForm.setValues(allValues);
};
oFF.VdVariableDialog.prototype.setValuesFromProcessor = function()
{
	this.m_variableForm.setValuesFromProcessor();
};
oFF.VdVariableDialog.prototype.setVariantsSectionVisible = function(visible)
{
	this.m_variableForm.setVariantsSectionVisible(visible);
};
oFF.VdVariableDialog.prototype.setupVariableDialog = function(context, configuration, displayListener)
{
	this.m_config = configuration;
	this.m_displayListener = displayListener;
	this.m_variableForm = oFF.VdVariableForm._createForDialog(context, configuration);
	this.m_variableForm.registerReinitListener(this);
	this.m_variableForm.registerRenderListener(this);
	this.m_variableForm.registerSubmitListener(this);
	this.m_variableForm.registerVariantActivationListener(this);
	this.m_variableForm.setOnInvalidValues(() => {
		this.m_display.shake();
		if (this.m_config.isMultiInputComponentEnabled())
		{
			let firstInvalidValue = this.getModel().getFirstInvalidValue();
			if (oFF.notNull(firstInvalidValue))
			{
				firstInvalidValue.callOnInvalidValueState();
			}
		}
	});
	this.m_display = context.getUiManager().getFreeGenesis().newControl(oFF.UiType.DIALOG);
	this.m_display.addCssClass(oFF.VdVariableDialog.CSS_DIALOG);
	if (this.m_config.isGridLayoutEnabled())
	{
		this.m_display.addCssClass(oFF.VdVariableDialog.CSS_DIALOG_WITH_GRID);
	}
	this.m_display.setName("VariableDialog");
	this.m_display.setTitle(this.m_config.getTitle());
	this.m_display.setResizable(true);
	this.m_display.setNewContent(oFF.UiType.ACTIVITY_INDICATOR).useMaxSpace();
	this.m_display.registerOnAfterOpen(this);
	this.m_display.registerOnBeforeClose(this);
	this.m_submitBtn = oFF.UiContextDummy.getSingleton();
	this.m_cancelBtn = this.m_display.addNewDialogButton();
	this.m_cancelBtn.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_CANCEL));
	this.m_cancelBtn.setName(oFF.VdVariableDialog.CSS_DIALOG_CANCEL_BTN);
	this.m_cancelBtn.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
		this.cancelReinit();
	}));
	if (!configuration.isGridLayoutEnabled())
	{
		this.m_display.setHeight(oFF.UiCssLength.createExt(50, oFF.UiCssSizeUnit.PERCENT));
		this.m_display.setWidth(oFF.UiCssLength.createExt(oFF.VdConstants.BASIC_DIALOG_WIDTH, oFF.UiCssSizeUnit.PIXEL));
	}
	else
	{
		this.m_cancelBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	}
};
oFF.VdVariableDialog.prototype.showMandatoryVarsOnly = function(mandatoryOnly)
{
	this.m_variableForm.showMandatoryVarsOnly(mandatoryOnly);
};
oFF.VdVariableDialog.prototype.showVariableTechnicalNames = function(show)
{
	this.m_variableForm.showVariableTechnicalNames(show);
};
oFF.VdVariableDialog.prototype.supportsStoryFilterOptimization = function(varName)
{
	return this.m_variableForm.supportsStoryFilterOptimization(varName);
};
oFF.VdVariableDialog.prototype.updateDynamicVariables = function()
{
	this.m_variableForm.updateDynamicVariables();
};

oFF.VdVariableForm = function() {};
oFF.VdVariableForm.prototype = new oFF.XObject();
oFF.VdVariableForm.prototype._ff_c = "VdVariableForm";

oFF.VdVariableForm.ACTIVATE_VARIANT_IDENTIFIER = "activate_variant";
oFF.VdVariableForm.CANCEL_SUBMIT_IDENTIFIER = "cancel_submit";
oFF.VdVariableForm.COMPONENT_NAME = "VariableDialog";
oFF.VdVariableForm.SAVE_VARIANT_IDENTIFIER = "save_variant";
oFF.VdVariableForm.SUBMIT_IDENTIFIER = "submit";
oFF.VdVariableForm._createForDialog = function(context, configuration)
{
	let obj = new oFF.VdVariableForm();
	obj.setupController(context, configuration);
	return obj;
};
oFF.VdVariableForm.areKeysDifferent = function(valuesFromDialog, valuesFromVariable, checkDisplayKey, isDateBased)
{
	if (valuesFromDialog.size() !== valuesFromVariable.size())
	{
		return true;
	}
	for (let i = 0; i < valuesFromDialog.size(); i++)
	{
		let valueFromDialog = valuesFromDialog.get(i);
		let valueFromVariable = valuesFromVariable.get(i);
		let operator = valueFromDialog.getOperator();
		if (operator !== valueFromVariable.getOperator())
		{
			return true;
		}
		if (operator.getNumberOfParameters() <= 0)
		{
			continue;
		}
		if (oFF.VdVariableForm.areKeysDifferent2(valueFromDialog.getFirstOperand(), valueFromVariable.getFirstOperand(), checkDisplayKey, isDateBased))
		{
			return true;
		}
		if (operator.getNumberOfParameters() >= 2 && oFF.VdVariableForm.areKeysDifferent2(valueFromDialog.getSecondOperand(), valueFromVariable.getSecondOperand(), checkDisplayKey, isDateBased))
		{
			return true;
		}
	}
	return false;
};
oFF.VdVariableForm.areKeysDifferent2 = function(dialog, variable, checkDisplayKey, isDateBased)
{
	let dialogKey = dialog.getKey();
	let variableKey = checkDisplayKey ? variable.getDisplayKey() : variable.getKey();
	if (isDateBased && oFF.XObjectExt.areEqual(oFF.XDate.createDateSafe(dialogKey), oFF.XDate.createDateSafe(variableKey)))
	{
		return false;
	}
	return !oFF.XString.isEqual(dialogKey, variableKey);
};
oFF.VdVariableForm.createAsToken = function(context, configuration)
{
	let obj = new oFF.VdVariableForm();
	obj.setupController(context, configuration);
	obj.m_embedded = true;
	return obj;
};
oFF.VdVariableForm.getVariantNameForMenu = function(variant)
{
	let prefix = variant.getScope() === oFF.Scope.USER ? "User" : "Global";
	return oFF.XStringUtils.concatenate3(prefix, ":", variant.getName());
};
oFF.VdVariableForm.isDatePickerSupported = function(variable)
{
	let isDateBased = variable.getValueType().isDateBased();
	let isHierarchyNode = variable.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NODE_VARIABLE);
	let isDimensionMember = variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
	let hasNoHierarchy = isDimensionMember && oFF.XStringUtils.isNullOrEmpty(variable.getHierarchyName());
	return isDateBased && (!isHierarchyNode || hasNoHierarchy);
};
oFF.VdVariableForm.supportsStoryFilterOptimizationForDesktop = function(variableModel)
{
	if (!variableModel.supportsValueHelp() || oFF.VdVariableForm.isDatePickerSupported(variableModel.getVariable()) || variableModel.isInterval())
	{
		return false;
	}
	return !variableModel.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE) && !variableModel.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE);
};
oFF.VdVariableForm.prototype.allVariablesAreMandatory = false;
oFF.VdVariableForm.prototype.m_backendStateHandler = null;
oFF.VdVariableForm.prototype.m_config = null;
oFF.VdVariableForm.prototype.m_context = null;
oFF.VdVariableForm.prototype.m_embedded = false;
oFF.VdVariableForm.prototype.m_externalStateHandler = null;
oFF.VdVariableForm.prototype.m_externalValueHelpProvider = null;
oFF.VdVariableForm.prototype.m_genesis = null;
oFF.VdVariableForm.prototype.m_inputEnabled = false;
oFF.VdVariableForm.prototype.m_isClosing = false;
oFF.VdVariableForm.prototype.m_maintainsVariants = false;
oFF.VdVariableForm.prototype.m_model = null;
oFF.VdVariableForm.prototype.m_numberOfMandatoryVariables = 0;
oFF.VdVariableForm.prototype.m_onInvalidValues = null;
oFF.VdVariableForm.prototype.m_preparingSubmit = false;
oFF.VdVariableForm.prototype.m_preparingTransfer = false;
oFF.VdVariableForm.prototype.m_reinitListener = null;
oFF.VdVariableForm.prototype.m_renderListener = null;
oFF.VdVariableForm.prototype.m_startValues = null;
oFF.VdVariableForm.prototype.m_submitListener = null;
oFF.VdVariableForm.prototype.m_transferCallback = null;
oFF.VdVariableForm.prototype.m_transferModel = null;
oFF.VdVariableForm.prototype.m_valuesDisplayDd = null;
oFF.VdVariableForm.prototype.m_variableController = null;
oFF.VdVariableForm.prototype.m_variantActivationListener = null;
oFF.VdVariableForm.prototype.m_variantMenu = null;
oFF.VdVariableForm.prototype.m_variantMenuBtn = null;
oFF.VdVariableForm.prototype.m_variantMenuManageBtn = null;
oFF.VdVariableForm.prototype.m_variantMenuOverwriteBtn = null;
oFF.VdVariableForm.prototype.m_variantMenuSaveBtn = null;
oFF.VdVariableForm.prototype.m_view = null;
oFF.VdVariableForm.prototype.attemptSubmit = function()
{
	this.setBusy(true);
	this.m_preparingSubmit = true;
	for (let i = 0; i < this.m_variableController.size(); i++)
	{
		if (!this.m_variableController.get(i).wrapUpState())
		{
			return;
		}
	}
	if (this.m_model.validateValues())
	{
		this.m_isClosing = true;
		if (this.m_config.isFunctionalValuesEnabled())
		{
			this.m_model.resolveAndSaveValues(this, null);
		}
		else
		{
			this.submitInternal();
		}
	}
	else
	{
		this.setBusy(false);
		if (oFF.notNull(this.m_onInvalidValues))
		{
			this.m_onInvalidValues();
		}
	}
	this.m_preparingSubmit = false;
};
oFF.VdVariableForm.prototype.attemptSubmitWithCancelReinitFallback = function()
{
	this.attemptSubmit();
	if (this.m_isClosing)
	{
		return;
	}
	this.cancelReinit();
};
oFF.VdVariableForm.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.setBusy(true);
	oFF.VdStartupAction.createAndRun(this, this.m_startValues, (updateStartValues) => {
		this.setBusy(false);
		this.m_model.checkVariablesInSync();
		this.setStartValues(updateStartValues);
		this.render();
	}, (result) => {
		this.postServerError(result);
		this.callOnReinit(false, result);
	});
};
oFF.VdVariableForm.prototype.callOnAfterSubmit = function(success, extResult)
{
	let values = this.m_model.getCleanedValues();
	this.syncValues(values, true, true);
	if (oFF.isNull(this.m_submitListener))
	{
		return;
	}
	let valueFormat = this.m_config.getValueJsonFormat();
	let valuesJson = oFF.notNull(valueFormat) ? valueFormat.getParser().serialize(this.getVariableProcessor(), values) : null;
	this.m_submitListener.onAfterSubmit(success, extResult, values, valuesJson);
};
oFF.VdVariableForm.prototype.callOnAfterVariantActivation = function()
{
	if (oFF.isNull(this.m_variantActivationListener))
	{
		return;
	}
	this.m_variantActivationListener.onAfterVariantActivation();
};
oFF.VdVariableForm.prototype.callOnBeforeSubmit = function()
{
	if (oFF.isNull(this.m_submitListener))
	{
		return;
	}
	let values = this.m_model.getCleanedValues();
	let valueFormat = this.m_config.getValueJsonFormat();
	let valuesJson = oFF.notNull(valueFormat) ? valueFormat.getParser().serialize(this.getVariableProcessor(), values) : null;
	this.m_submitListener.onBeforeSubmit(values, valuesJson);
};
oFF.VdVariableForm.prototype.callOnBeforeVariantActivation = function()
{
	if (oFF.isNull(this.m_variantActivationListener))
	{
		return;
	}
	this.m_variantActivationListener.onBeforeVariantActivation();
};
oFF.VdVariableForm.prototype.callOnCancelReinit = function()
{
	if (oFF.notNull(this.m_reinitListener))
	{
		this.m_reinitListener.onCancelReinit();
	}
};
oFF.VdVariableForm.prototype.callOnReinit = function(success, extResult)
{
	if (oFF.notNull(this.m_reinitListener))
	{
		this.m_reinitListener.onReinit(success, extResult);
	}
};
oFF.VdVariableForm.prototype.callOnRenderDone = function()
{
	if (oFF.notNull(this.m_renderListener))
	{
		this.m_renderListener.onRenderDone(this.m_view.getRoot());
	}
};
oFF.VdVariableForm.prototype.cancelReinit = function()
{
	if (!this.m_isClosing && this.isVisible())
	{
		this.m_isClosing = true;
		this.getStateHandler().cancelReinitVariables(this.m_model.getStartValues(), this, oFF.XStringValue.create(oFF.VdVariableForm.CANCEL_SUBMIT_IDENTIFIER));
	}
};
oFF.VdVariableForm.prototype.clearVariantIcons = function()
{
	oFF.XCollectionUtils.forEach(this.getAllVariantItemsWithIcon(), (item) => {
		item.setIcon(null);
	});
};
oFF.VdVariableForm.prototype.configureNewSettingsSection = function()
{
	if (!this.hasVariables() || !this.m_config.isNewSettingsEnabled())
	{
		this.getView().getNewSettingsSection().setVisible(false);
		return;
	}
	let mandatoryVarsOnlyCb = this.getView().getMandatoryVarsOnlyCb();
	if (this.needShowMandatoryVarsOnlyCb())
	{
		let mandatoryVarsOnlyText = oFF.XStringUtils.concatenate4(mandatoryVarsOnlyCb.getText(), " (", oFF.XInteger.convertToString(this.getNumberOfMandatoryVariables()), ")");
		mandatoryVarsOnlyCb.setText(mandatoryVarsOnlyText);
		mandatoryVarsOnlyCb.registerOnChange(oFF.UiLambdaChangeListener.create((clickEvent) => {
			this.showMandatoryVarsOnly(mandatoryVarsOnlyCb.isChecked());
		}));
	}
	else
	{
		mandatoryVarsOnlyCb.setVisible(false);
	}
	let showVarTechNamesCb = this.getView().getShowVarTechNamesCb();
	showVarTechNamesCb.registerOnChange(oFF.UiLambdaChangeListener.create((clickEvent2) => {
		this.showVariableTechnicalNames(showVarTechNamesCb.isChecked());
	}));
	this.m_valuesDisplayDd = this.getView().getValuesDisplayDd();
	this.m_valuesDisplayDd.registerOnSelect(this);
};
oFF.VdVariableForm.prototype.configureToolbar = function()
{
	this.configureVariantSection();
	this.m_view.getSettingsButton().registerOnPress(this);
};
oFF.VdVariableForm.prototype.configureVariantSection = function()
{
	let hasVariants = oFF.XCollectionUtils.hasElements(this.m_model.getVariants());
	this.m_variantMenuBtn = oFF.UiContextDummy.getSingleton();
	this.m_variantMenu = oFF.UiContextDummy.getSingleton();
	this.m_variantMenuOverwriteBtn = oFF.UiContextDummy.getSingleton();
	this.m_variantMenuSaveBtn = oFF.UiContextDummy.getSingleton();
	this.m_variantMenuManageBtn = oFF.UiContextDummy.getSingleton();
	let processor = this.getVariableProcessor();
	this.m_maintainsVariants = processor.supportsMaintainsVariableVariants() && processor.getSession().hasFeature(oFF.FeatureToggleOlap.MAINTAIN_VARIABLE_VARIANTS);
	if (!this.m_config.isVariantManagementEnabled() || !this.m_model.hasVariables() || !hasVariants && !this.m_maintainsVariants)
	{
		this.setVariantsSectionVisible(false);
		return;
	}
	this.m_variantMenuBtn = this.m_view.getVariantMenuBtn();
	this.m_variantMenuBtn.setEnabled(this.m_inputEnabled);
	this.m_variantMenuBtn.registerOnPress(this);
	this.m_variantMenu = this.m_view.getVariantMenu();
	this.updateVariantSection(null);
};
oFF.VdVariableForm.prototype.createVariableControllers = function()
{
	let variablesToDisplay = this.m_config.getVariablesToDisplay();
	let hasSpecificVariables = oFF.XCollectionUtils.hasElements(variablesToDisplay);
	let variableModels = this.m_model.getVariableModels();
	for (let i = 0; i < variableModels.size(); i++)
	{
		let variableModel = variableModels.get(i);
		let varName = variableModel.getName();
		if (hasSpecificVariables && !variablesToDisplay.contains(varName))
		{
			continue;
		}
		let layout = this.m_view.addVariable(varName, variableModel.supportsMultipleValues());
		let variableController = oFF.VdVariableController.createVariableController(this.m_context, this.m_config, this, variableModel, layout);
		if (variableModel.getVariable().isMandatory())
		{
			this.m_numberOfMandatoryVariables++;
		}
		else
		{
			this.allVariablesAreMandatory = false;
		}
		this.m_variableController.add(variableController);
	}
};
oFF.VdVariableForm.prototype.enhanceWithDisplayKeys = function()
{
	let variableNames = this.getCurrentValues().getKeysAsReadOnlyList();
	for (let i = 0; i < variableNames.size(); i++)
	{
		let variableName = variableNames.get(i);
		let variable = this.getStateHandler().getSubmitProcessor().getVariable(variableName);
		if (this.isDisplayKeyRelevant(variable))
		{
			let filterValues = oFF.VdImportExport.getValuesFromVariable(variable);
			let variableValues = this.getCurrentValues().getByKey(variable.getName());
			oFF.XStream.of(variableValues).forEach((variableValue) => {
				let firstOperand = variableValue.getFirstOperand();
				if (oFF.notNull(firstOperand) && !firstOperand.hasDisplayKey())
				{
					let filterValue = oFF.XStream.of(filterValues).find((element) => {
						return firstOperand.compareTo(element.getFirstOperand()) === 0;
					}).orElse(null);
					if (oFF.notNull(filterValue))
					{
						variableValue.setFirstOperand(oFF.FdSimpleItem.create(firstOperand.getKey(), filterValue.getFirstOperand().getDisplayKey(), firstOperand.getText()));
					}
				}
				let secondOperand = variableValue.getSecondOperand();
				if (oFF.notNull(secondOperand) && !secondOperand.hasDisplayKey())
				{
					let filterValue = oFF.XStream.of(filterValues).find((element) => {
						return secondOperand.compareTo(element.getSecondOperand()) === 0;
					}).orElse(null);
					if (oFF.notNull(filterValue))
					{
						variableValue.setSecondOperand(oFF.FdSimpleItem.create(secondOperand.getKey(), filterValue.getSecondOperand().getDisplayKey(), secondOperand.getText()));
					}
				}
			});
		}
	}
};
oFF.VdVariableForm.prototype.executeValueSearch = function(variableModel, input, listener, customIdentifier)
{
	let variable = variableModel.getVariable();
	let valueHelpProcess = null;
	if (oFF.notNull(this.m_externalValueHelpProvider))
	{
		valueHelpProcess = this.m_externalValueHelpProvider.getValueHelpProcessorForVariable(variable.getName());
	}
	if (oFF.isNull(valueHelpProcess))
	{
		valueHelpProcess = oFF.OlapUiValueHelpVariable.create(variable);
	}
	let searchFields = oFF.XCollectionUtils.singletonList(variable.getDimension().getSelectorDisplayKeyField());
	valueHelpProcess.processSearch(input, searchFields, null, 10, false, oFF.OlapUiReadMode.MASTER, listener, customIdentifier);
};
oFF.VdVariableForm.prototype.executeVariableHelpWithDialog = function(variableModel, currentSelection, selectionMode, listener)
{
	let variable = variableModel.getVariable();
	let replacementText = oFF.XStringUtils.isNotNullAndNotEmpty(variable.getText()) ? variable.getText() : variable.getName();
	let title = oFF.OuVariableDialogI18nLegacy.getProvider().getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_SELECT_MEMBER_FOR, replacementText);
	let valueSelection = oFF.XList.create();
	oFF.XCollectionUtils.addAll(valueSelection, currentSelection);
	let dimensionDisplayInfo = this.m_config.getDimensionDisplayInfo(variable.getDimension().getName());
	let runner = oFF.FilterDialogProgramRunnerFactory.createForVariable(this.getVariableProcessor().getProcess(), null, variable, title);
	let config = oFF.PrFactory.createStructure();
	config.putString(oFF.FilterDialog.PARAM_SELECTION_MODE, selectionMode.getName());
	config.putBoolean(oFF.FilterDialog.PARAM_RESIZABLE, false);
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_READMODE_CHANGE, true);
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_FUNCTIONAL_VALUES_VIEW, this.m_config.isFunctionalValuesEnabled());
	if (oFF.notNull(dimensionDisplayInfo))
	{
		config.putString(oFF.FilterDialog.PARAM_DISPLAY_INFO, dimensionDisplayInfo.getName());
	}
	runner.setConfigStructure(config);
	if (oFF.notNull(this.m_externalValueHelpProvider))
	{
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_EXTERNAL_VALUEHELP_PROCESS, this.m_externalValueHelpProvider.getValueHelpProcessorForVariable(variableModel.getName()));
	}
	runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_DEFAULT_SELECTION, valueSelection);
	runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_CLOSE, listener);
	runner.runProgram();
};
oFF.VdVariableForm.prototype.getAllVariantItemsWithIcon = function()
{
	return oFF.XCollectionUtils.filter(this.m_variantMenu.getItems(), (item) => {
		let isIcon = item.getIcon() !== null;
		return isIcon && oFF.XString.isEqual(item.getIcon(), "accept");
	});
};
oFF.VdVariableForm.prototype.getCleanedValues = function()
{
	return this.m_model.getCleanedValues();
};
oFF.VdVariableForm.prototype.getContext = function()
{
	return this.m_context;
};
oFF.VdVariableForm.prototype.getControllers = function()
{
	return this.m_variableController;
};
oFF.VdVariableForm.prototype.getCurrentValues = function()
{
	return this.m_model.getCurrentValues();
};
oFF.VdVariableForm.prototype.getInternalStateHandler = function()
{
	return this.m_backendStateHandler;
};
oFF.VdVariableForm.prototype.getModel = function()
{
	return this.m_model;
};
oFF.VdVariableForm.prototype.getNumberOfMandatoryVariables = function()
{
	return this.m_numberOfMandatoryVariables;
};
oFF.VdVariableForm.prototype.getSelectedVariant = function()
{
	return this.getAllVariantItemsWithIcon().get(0).getCustomObject();
};
oFF.VdVariableForm.prototype.getStateHandler = function()
{
	if (oFF.notNull(this.m_externalStateHandler))
	{
		return this.m_externalStateHandler;
	}
	return this.m_backendStateHandler;
};
oFF.VdVariableForm.prototype.getVariableProcessor = function()
{
	return this.m_model.getVariableProcessor();
};
oFF.VdVariableForm.prototype.getView = function()
{
	return this.m_view;
};
oFF.VdVariableForm.prototype.hasDynamicVariables = function()
{
	return this.m_model.hasDynamicVariables();
};
oFF.VdVariableForm.prototype.hasExitVariables = function()
{
	return this.m_model.hasExitVariables();
};
oFF.VdVariableForm.prototype.hasVariables = function()
{
	return this.m_model.hasVariables();
};
oFF.VdVariableForm.prototype.isDisplayKeyRelevant = function(variable)
{
	return oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) && variable.getValueType() !== oFF.XValueType.DATE && variable.getDimension().getDisplayKeyField() !== null;
};
oFF.VdVariableForm.prototype.isEmbedded = function()
{
	return this.m_embedded;
};
oFF.VdVariableForm.prototype.isInputEnabled = function()
{
	return this.m_inputEnabled;
};
oFF.VdVariableForm.prototype.isMissingDisplayKey = function()
{
	let variables = this.getStateHandler().getSubmitProcessor().getVariables();
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		if (this.isDisplayKeyRelevant(variable))
		{
			let variableValues = this.getCurrentValues().getByKey(variable.getName());
			for (let j = 0; oFF.notNull(variableValues) && j < variableValues.size(); j++)
			{
				let variableValue = variableValues.get(j);
				if (!variableValue.getFirstOperand().hasDisplayKey())
				{
					return true;
				}
			}
		}
	}
	return false;
};
oFF.VdVariableForm.prototype.isSyncCandidate = function(variable, syncExits)
{
	if (this.getVariableProcessor().getVariable(variable.getName()) === null)
	{
		return false;
	}
	if (syncExits && variable.isEnforcedDynamicValue())
	{
		return true;
	}
	if (!variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return false;
	}
	let dimVar = variable;
	return !dimVar.supportsValueHelp() || !dimVar.getDimension().getHasCheckTable();
};
oFF.VdVariableForm.prototype.isVariableUpdateRequired = function()
{
	if (oFF.XStringUtils.containsString(this.m_valuesDisplayDd.getSelectedItem().getName(), "ID", false) && this.isMissingDisplayKey())
	{
		let submitProcessor = this.getStateHandler().getSubmitProcessor();
		if (oFF.notNull(submitProcessor) && !submitProcessor.isDirectVariableTransferEnabled())
		{
			return true;
		}
	}
	return false;
};
oFF.VdVariableForm.prototype.isVisible = function()
{
	return true;
};
oFF.VdVariableForm.prototype.needShowMandatoryVarsOnlyCb = function()
{
	return this.m_numberOfMandatoryVariables !== 0 && this.allVariablesAreMandatory === false;
};
oFF.VdVariableForm.prototype.notifyStateChange = function(state)
{
	if (this.m_preparingSubmit)
	{
		this.attemptSubmit();
	}
	else if (this.m_preparingTransfer)
	{
		this.prepareValuehelp(this.m_transferModel, this.m_transferCallback);
	}
};
oFF.VdVariableForm.prototype.onPress = function(event)
{
	let control = event.getControl();
	let parent = control.getParent();
	if (parent === this.m_variantMenu)
	{
		let variant = this.m_variantMenu.getItemByName(control.getName()).getCustomObject();
		if (control === this.m_variantMenuOverwriteBtn)
		{
			this.openOverwriteConfirmation(this.getSelectedVariant());
		}
		else if (control === this.m_variantMenuSaveBtn)
		{
			oFF.VdImportExport.setValuesToProcessor(this.getVariableProcessor(), this.m_model.getCleanedValues());
			this.m_context.getVariantController().presentVariantSavePopup(this.getVariableProcessor(), (newVariant) => {
				if (oFF.notNull(newVariant))
				{
					this.updateVariantSection(newVariant);
					this.clearVariantIcons();
					this.m_variantMenu.getItemByName(oFF.VdVariableForm.getVariantNameForMenu(newVariant)).setIcon("accept");
				}
				this.m_variantMenuBtn.focus();
			});
		}
		else if (control === this.m_variantMenuManageBtn)
		{
			this.m_context.getVariantController().presentVariantsManagePopup(this.getVariableProcessor(), () => {
				this.updateVariantSection(null);
				this.m_variantMenuBtn.focus();
			});
		}
		else
		{
			this.clearVariantIcons();
			this.m_variantMenu.getItemByName(control.getName()).setIcon("accept");
			if (oFF.isNull(variant))
			{
				this.m_variantMenuBtn.setText(control.getText());
				this.m_variantMenuOverwriteBtn.setEnabled(false);
				this.resetValues();
				return;
			}
			this.m_variantMenuBtn.setText(variant.getText());
			this.m_variantMenuOverwriteBtn.setEnabled(true);
			this.callOnBeforeVariantActivation();
			this.getStateHandler().activateVariant(variant, this, oFF.XStringValue.create(oFF.VdVariableForm.ACTIVATE_VARIANT_IDENTIFIER));
		}
	}
	else if (control === this.m_view.getSettingsButton())
	{
		this.openSettingsPopover();
	}
};
oFF.VdVariableForm.prototype.onSelect = function(event)
{
	if (event.getControl() === this.m_valuesDisplayDd)
	{
		let selectedDdItem = this.m_valuesDisplayDd.getSelectedItem();
		this.setLabelMode(selectedDdItem.getName());
		this.updateOnDisplayChange();
	}
};
oFF.VdVariableForm.prototype.onValuesResolvedAndSave = function(customIdentifier)
{
	this.submitInternal();
};
oFF.VdVariableForm.prototype.onVariableModelsChanged = function()
{
	if (oFF.isNull(this.m_view))
	{
		return;
	}
	this.m_view.clearVariables();
	this.m_variableController.clear();
	this.createVariableControllers();
};
oFF.VdVariableForm.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.setBusy(false);
	let step = customIdentifier.toString();
	if (extResult.hasErrors() || extResult.hasSeverity(oFF.Severity.SEMANTICAL_ERROR))
	{
		this.postServerError(extResult);
		switch (step)
		{
			case oFF.VdVariableForm.CANCEL_SUBMIT_IDENTIFIER:
				this.m_isClosing = false;
				break;

			case oFF.VdVariableForm.SUBMIT_IDENTIFIER:
				this.m_isClosing = false;
				this.callOnAfterSubmit(false, extResult);
				break;

			case oFF.VdVariableForm.ACTIVATE_VARIANT_IDENTIFIER:
				this.callOnAfterVariantActivation();
				break;
		}
		return;
	}
	switch (step)
	{
		case oFF.VdVariableForm.SUBMIT_IDENTIFIER:
			if (!extResult.hasSeverity(oFF.Severity.SEMANTICAL_ERROR))
			{
				this.callOnAfterSubmit(true, extResult);
			}
			else
			{
				this.callOnAfterSubmit(false, extResult);
				this.postServerError(extResult);
			}
			break;

		case oFF.VdVariableForm.CANCEL_SUBMIT_IDENTIFIER:
			this.callOnCancelReinit();
			break;

		case oFF.VdVariableForm.ACTIVATE_VARIANT_IDENTIFIER:
			this.m_model.setValuesFromProcessor();
			this.callOnAfterVariantActivation();
			break;

		case oFF.VdVariableForm.SAVE_VARIANT_IDENTIFIER:
			let msg = oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_SUCCESS);
			this.m_context.getMessageCenter().postMessage(oFF.UiMessageType.SUCCESS, msg, oFF.VdVariableForm.COMPONENT_NAME);
			this.m_variantMenu.close();
			break;
	}
	oFF.XObjectExt.release(customIdentifier);
};
oFF.VdVariableForm.prototype.openOverwriteConfirmation = function(variant)
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let title = i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_WARNING);
	let variantName = variant.getText();
	let scopeName = i18n.getText(variant.getScope() === oFF.Scope.USER ? oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_PERSONAL : oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GLOBAL);
	let text = i18n.getTextWithPlaceholder2(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE_CONFIRMATION, scopeName, variantName);
	let confirmPopup = oFF.UtConfirmPopup.create(this.m_genesis, title, text);
	confirmPopup.setConfirmButtonIcon(null);
	confirmPopup.setConfirmButtonText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_SAVE));
	confirmPopup.setCancelButtonIcon(null);
	confirmPopup.setCancelButtonText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CANCEL));
	confirmPopup.setCloseProcedure(() => {
		this.m_variantMenuBtn.focus();
	});
	confirmPopup.setConfirmProcedure(() => {
		this.getStateHandler().saveVariant(this.m_model.getCleanedValues(), variant, this, oFF.XStringValue.create(oFF.VdVariableForm.SAVE_VARIANT_IDENTIFIER));
		this.m_variantMenuBtn.focus();
	});
	confirmPopup.open();
};
oFF.VdVariableForm.prototype.openSettingsPopover = function()
{
	this.m_view.getSettingsPopover().openAt(this.m_view.getSettingsButton());
};
oFF.VdVariableForm.prototype.performMobileValueHelpWithDialog = function(variableModel, currentSelection, selectionMode, listener)
{
	this.setBusy(true);
	this.prepareValuehelp(variableModel, oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		this.setBusy(false);
		if (extResult.hasErrors() || extResult.hasSeverity(oFF.Severity.SEMANTICAL_ERROR))
		{
			this.postServerError(extResult);
			listener.onFilterDialogCancel();
			return;
		}
		let vhMobileCtrl = oFF.VdVhMobileController.createForVariableModel(variableModel, this, listener, this.m_config);
		if (vhMobileCtrl.mobileValueHelpViewAvailable())
		{
			vhMobileCtrl.performMobileValueHelp();
		}
		else
		{
			this.executeVariableHelpWithDialog(variableModel, currentSelection, selectionMode, listener);
		}
	}));
};
oFF.VdVariableForm.prototype.performStoryFilterOptimizationWorkflow = function(varName)
{
	this.performStoryFilterOptimizationWorkflowWithCallback(varName, null);
};
oFF.VdVariableForm.prototype.performStoryFilterOptimizationWorkflowWithCallback = function(varName, listener)
{
	if (!this.supportsStoryFilterOptimization(varName))
	{
		if (oFF.notNull(listener))
		{
			listener.onCancel();
		}
		return;
	}
	oFF.VdStartupAction.createAndRun(this, this.m_startValues, (updatedStartValues) => {
		this.m_genesis = oFF.UiGenesis.create(oFF.UiContextDummy.getSingleton());
		this.m_model.checkVariablesInSync();
		this.setStartValues(updatedStartValues);
		this.render();
		let variableController = this.m_variableController.getByKey(varName);
		let fdListener = oFF.FilterDialogLambdaCloseListener.create((selection) => {
			if (oFF.notNull(selection))
			{
				variableController.handleMultipleFilterDialogValues(selection);
			}
			this.attemptSubmit();
			if (oFF.notNull(listener))
			{
				listener.onOk();
			}
		}, () => {
			this.cancelReinit();
			if (oFF.notNull(listener))
			{
				listener.onCancel();
			}
		});
		if (this.m_context.getUiManager().getDeviceInfo().isMobile())
		{
			let selectionModeMobile = variableController.getVariable().supportsMultipleValues() ? oFF.UiTableSelectionMode.MULTI_TOGGLE : oFF.UiTableSelectionMode.SINGLE;
			this.performMobileValueHelpWithDialog(variableController.getModel(), variableController.getFirstValues(), selectionModeMobile, fdListener);
		}
		else
		{
			let selectionMode = variableController.getVariable().supportsMultipleValues() ? oFF.UiTableSelectionMode.MULTI_TOGGLE : oFF.UiTableSelectionMode.SINGLE;
			this.performValueHelpWithDialog(variableController.getModel(), variableController.getFirstValues(), selectionMode, fdListener);
		}
	}, (result) => {
		if (oFF.notNull(listener))
		{
			listener.onCancel();
		}
		this.callOnReinit(false, result);
	});
};
oFF.VdVariableForm.prototype.performValueHelpWithDialog = function(variableModel, currentSelection, selectionMode, listener)
{
	this.setBusy(true);
	this.prepareValuehelp(variableModel, oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		this.setBusy(false);
		if (extResult.hasErrors() || extResult.hasSeverity(oFF.Severity.SEMANTICAL_ERROR))
		{
			this.postServerError(extResult);
			listener.onFilterDialogCancel();
			return;
		}
		this.executeVariableHelpWithDialog(variableModel, currentSelection, selectionMode, listener);
	}));
};
oFF.VdVariableForm.prototype.performValueSearch = function(variableModel, input, listener, customIdentifier)
{
	this.prepareValuehelp(variableModel, oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		if (extResult.hasErrors() || extResult.hasSeverity(oFF.Severity.SEMANTICAL_ERROR))
		{
			this.postServerError(extResult);
			listener.onValuehelpExecuted(oFF.ExtResult.create(null, extResult), null, customIdentifier);
			return;
		}
		this.executeValueSearch(variableModel, input, listener, customIdentifier);
	}));
};
oFF.VdVariableForm.prototype.postServerError = function(messages)
{
	let msg = oFF.OlapUiMessageCenter.getInaErrorMessage(messages, oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR));
	let showWarning = oFF.OlapUiMessageCenter.getInaErrorCode(messages) === oFF.ErrorCodes.VARIABLE_PROCESSOR_ALREADY_PROCESSING;
	this.m_context.getMessageCenter().postMessage(showWarning ? oFF.UiMessageType.WARNING : oFF.UiMessageType.ERROR, msg, oFF.VdVariableForm.COMPONENT_NAME);
};
oFF.VdVariableForm.prototype.postValueDifferenceMessage = function(variable, valuesFromVariable)
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let buffer = oFF.XStringBuffer.create();
	buffer.append(i18n.getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_VARIABLE_VALUES_SET_TO, variable.getText())).appendNewLine();
	buffer.append(this.prettyPrintVariableValues(valuesFromVariable));
	this.m_context.getMessageCenter().postMessage(oFF.UiMessageType.WARNING, buffer.toString(), oFF.VdVariableForm.COMPONENT_NAME);
};
oFF.VdVariableForm.prototype.prepareValuehelp = function(variableModel, callback)
{
	this.m_preparingTransfer = true;
	if (oFF.notNull(this.m_transferModel) && this.m_transferModel !== variableModel)
	{
		callback.onVariableProcessorExecuted(oFF.ExtResult.createWithInfoMessage("ok"), null, null);
		return;
	}
	this.m_transferModel = variableModel;
	this.m_transferCallback = callback;
	for (let i = 0; i < this.m_variableController.size(); i++)
	{
		let variableController = this.m_variableController.get(i);
		if (variableController.getModel() === variableModel)
		{
			continue;
		}
		if (!variableController.wrapUpState())
		{
			return;
		}
	}
	this.m_preparingTransfer = false;
	this.m_transferModel = null;
	this.m_transferCallback = null;
	let dimVar = variableModel.getVariable();
	this.getStateHandler().transferVariables(this.m_model.getCleanedValues(), dimVar, callback, null);
};
oFF.VdVariableForm.prototype.prettyPrintVariableValues = function(values)
{
	let buffer = oFF.XStringBuffer.create();
	if (!oFF.XCollectionUtils.hasElements(values))
	{
		return buffer.toString();
	}
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		if (value.getOperator().getNumberOfParameters() === 2)
		{
			let first = value.getFirstOperand();
			let second = value.getSecondOperand();
			let firstText = first.getText();
			let secondText = second.getText();
			if (oFF.isNull(firstText) || oFF.isNull(secondText))
			{
				firstText = first.getDisplayKey();
				secondText = second.getDisplayKey();
			}
			buffer.append(firstText).append(" - ").append(secondText);
		}
		else
		{
			let operand = value.getFirstOperand();
			let operandText = operand.getText();
			if (oFF.isNull(operandText))
			{
				operandText = operand.getDisplayKey();
			}
			buffer.append(operandText);
		}
		buffer.appendNewLine();
	}
	return buffer.toString();
};
oFF.VdVariableForm.prototype.registerReinitListener = function(listener)
{
	this.m_reinitListener = listener;
};
oFF.VdVariableForm.prototype.registerRenderListener = function(listener)
{
	this.m_renderListener = listener;
};
oFF.VdVariableForm.prototype.registerSubmitListener = function(listener)
{
	this.m_submitListener = listener;
};
oFF.VdVariableForm.prototype.registerVariantActivationListener = function(listener)
{
	this.m_variantActivationListener = listener;
};
oFF.VdVariableForm.prototype.releaseObject = function()
{
	this.m_context = null;
	this.m_backendStateHandler = null;
	this.m_externalStateHandler = null;
	this.m_externalValueHelpProvider = null;
	this.m_variableController = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variableController);
	this.m_genesis = null;
	this.m_variantMenuBtn = null;
	this.m_variantMenu = null;
	this.m_valuesDisplayDd = oFF.XObjectExt.release(this.m_valuesDisplayDd);
	this.m_variantMenuOverwriteBtn = oFF.XObjectExt.release(this.m_variantMenuOverwriteBtn);
	this.m_variantMenuSaveBtn = oFF.XObjectExt.release(this.m_variantMenuSaveBtn);
	this.m_variantMenuManageBtn = oFF.XObjectExt.release(this.m_variantMenuManageBtn);
	this.m_view = oFF.XObjectExt.release(this.m_view);
	this.m_model = oFF.XObjectExt.release(this.m_model);
	this.m_renderListener = null;
	this.m_reinitListener = null;
	this.m_submitListener = null;
	this.m_variantActivationListener = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableForm.prototype.render = function()
{
	if (oFF.isNull(this.m_genesis))
	{
		this.buildOlapDialogUi(oFF.UiGenesis.create(oFF.UiContextDummy.getSingleton()));
		return;
	}
	this.callOnReinit(true, null);
	if (this.m_config.isGridLayoutEnabled())
	{
		if (this.m_config.isMultiInputComponentEnabled() && this.m_embedded)
		{
			this.m_view = oFF.VdViewValueLayout.createVdViewValueLayout(this.m_context.getUiManager(), this.m_embedded, this.m_config);
		}
		else
		{
			this.m_view = oFF.VdViewResponsiveTable.createVdViewResponsiveTable(this.m_context.getUiManager(), this.m_embedded, this.m_config);
		}
	}
	else
	{
		this.m_view = oFF.VdView.create(this.m_context.getUiManager(), this.m_embedded, this.m_config);
	}
	this.m_genesis.setRoot(this.m_view.getRoot());
	if (this.m_config.isSettingsPopoverEnabled())
	{
		this.configureToolbar();
	}
	else
	{
		this.configureVariantSection();
	}
	this.m_variableController = oFF.XListOfNameObject.create();
	this.createVariableControllers();
	this.configureNewSettingsSection();
	this.callOnRenderDone();
};
oFF.VdVariableForm.prototype.resetValues = function()
{
	this.m_model.resetValues();
};
oFF.VdVariableForm.prototype.setBusy = function(busy)
{
	if (oFF.notNull(this.m_view))
	{
		this.m_view.getRoot().setBusy(busy);
	}
};
oFF.VdVariableForm.prototype.setDynamicVariables = function()
{
	let variablesToDisplay = this.m_config.getVariablesToDisplay();
	let hasSpecificVariables = oFF.XCollectionUtils.hasElements(variablesToDisplay);
	let variableModels = this.m_model.getVariableModels();
	for (let i = 0; i < variableModels.size(); i++)
	{
		let variableModel = variableModels.get(i);
		let variable = variableModel.getVariable();
		if (!variable.isDynamicVariable() || hasSpecificVariables && !variablesToDisplay.contains(variable.getName()))
		{
			continue;
		}
		variableModel.setValues(oFF.VdImportExport.getValuesFromVariable(variable));
	}
};
oFF.VdVariableForm.prototype.setExternalStateHandler = function(externalStateHandler)
{
	this.m_externalStateHandler = externalStateHandler;
};
oFF.VdVariableForm.prototype.setInitialFocus = function()
{
	if (!this.m_context.getDeviceInfo().isMobile())
	{
		this.m_view.getShowVarTechNamesCb().focus();
	}
};
oFF.VdVariableForm.prototype.setInputEnabled = function(inputEnabled)
{
	if (this.m_inputEnabled === inputEnabled)
	{
		return;
	}
	this.m_inputEnabled = inputEnabled;
	if (oFF.notNull(this.m_variantMenuBtn))
	{
		this.m_variantMenuBtn.setEnabled(this.m_inputEnabled);
	}
	if (this.m_config.isMultiInputComponentEnabled())
	{
		this.m_view.getMandatoryVarsOnlyCb().setEditable(inputEnabled);
		this.m_view.getShowVarTechNamesCb().setEditable(inputEnabled);
	}
	else
	{
		this.m_view.getMandatoryVarsOnlyCb().setEnabled(inputEnabled);
		this.m_view.getShowVarTechNamesCb().setEnabled(inputEnabled);
	}
	if (oFF.notNull(this.m_variableController))
	{
		let keys = this.m_variableController.getKeysAsIterator();
		while (keys.hasNext())
		{
			let variableController = this.m_variableController.getByKey(keys.next());
			variableController.update();
		}
	}
};
oFF.VdVariableForm.prototype.setLabelMode = function(dropDownItem)
{
	if (oFF.XString.isEqual(dropDownItem, "ID"))
	{
		this.m_config.setLabelMode(oFF.DialogLabelMode.KEY);
	}
	else if (oFF.XString.isEqual(dropDownItem, "Description"))
	{
		this.m_config.setLabelMode(oFF.DialogLabelMode.TEXT);
	}
	else if (oFF.XString.isEqual(dropDownItem, "ID and Description"))
	{
		this.m_config.setLabelMode(oFF.DialogLabelMode.KEY_AND_TEXT);
	}
};
oFF.VdVariableForm.prototype.setOnInvalidValues = function(onInvalidValues)
{
	this.m_onInvalidValues = onInvalidValues;
};
oFF.VdVariableForm.prototype.setStartValues = function(startValues)
{
	this.m_startValues = oFF.VdValue.cloneValueMap(startValues);
	this.m_model.setStartValues(this.m_startValues);
	this.m_model.setValues(this.m_startValues);
};
oFF.VdVariableForm.prototype.setSubmitButtonEnabled = function(enabled) {};
oFF.VdVariableForm.prototype.setValueHelpProcessorProvider = function(processorProvider)
{
	this.m_externalValueHelpProvider = processorProvider;
};
oFF.VdVariableForm.prototype.setValueJson = function(valueJson)
{
	let valueFormat = this.m_config.getValueJsonFormat();
	if (oFF.isNull(valueFormat))
	{
		return;
	}
	let values = valueFormat.getParser().deserialize(this.getVariableProcessor(), valueJson);
	this.setValues(values);
};
oFF.VdVariableForm.prototype.setValueNativeJson = function(json)
{
	let parser = oFF.JsonParserFactory.newInstance();
	let prElement = parser.convertFromNative(json);
	this.setValueJson(prElement);
};
oFF.VdVariableForm.prototype.setValues = function(allValues)
{
	this.m_model.setValues(allValues);
};
oFF.VdVariableForm.prototype.setValuesFromProcessor = function()
{
	this.m_model.setValuesFromProcessor();
};
oFF.VdVariableForm.prototype.setVariantActions = function()
{
	if (this.m_maintainsVariants)
	{
		let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
		this.m_variantMenuOverwriteBtn = this.m_variantMenu.addNewItem();
		this.m_variantMenuOverwriteBtn.setName("VdVariantMenuOverwriteBtn");
		this.m_variantMenuOverwriteBtn.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE));
		this.m_variantMenuOverwriteBtn.setIcon("refresh");
		this.m_variantMenuOverwriteBtn.registerOnPress(this);
		this.m_variantMenuSaveBtn = this.m_variantMenu.addNewItem();
		this.m_variantMenuSaveBtn.setName("VdVariantMenuSaveBtn");
		this.m_variantMenuSaveBtn.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_CURRENT));
		this.m_variantMenuSaveBtn.setIcon("save");
		this.m_variantMenuSaveBtn.registerOnPress(this);
		this.m_variantMenuManageBtn = this.m_variantMenu.addNewItem();
		this.m_variantMenuManageBtn.setName("VdVariantMenuManageBtn");
		this.m_variantMenuManageBtn.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_MANAGE));
		this.m_variantMenuManageBtn.setIcon("wrench");
		this.m_variantMenuManageBtn.registerOnPress(this);
	}
};
oFF.VdVariableForm.prototype.setVariantsSectionVisible = function(visible)
{
	let hasVariants = oFF.XCollectionUtils.hasElements(this.m_model.getVariants());
	let shouldBeEnabled = this.m_model.hasVariables() && (hasVariants || this.m_maintainsVariants) && visible;
	if (this.m_config.isSettingsPopoverEnabled())
	{
		this.m_view.getVariantLabel().setVisible(shouldBeEnabled);
		this.m_view.getVariantMenuBtn().setVisible(shouldBeEnabled);
	}
	else
	{
		this.m_view.getVariantSection().setVisible(shouldBeEnabled);
	}
};
oFF.VdVariableForm.prototype.setupController = function(context, configuration)
{
	this.m_context = context;
	this.m_config = configuration;
	this.m_inputEnabled = true;
	let varProcessor = this.m_config.getVarProcessor();
	this.m_numberOfMandatoryVariables = 0;
	this.allVariablesAreMandatory = true;
	this.m_startValues = this.m_config.getStartValues();
	if (oFF.isNull(this.m_startValues))
	{
		let valueFormat = this.m_config.getValueJsonFormat();
		let startValueJson = this.m_config.getStartValueJson();
		if (oFF.notNull(valueFormat) && oFF.notNull(startValueJson))
		{
			this.m_startValues = valueFormat.getParser().deserialize(varProcessor, startValueJson);
		}
	}
	this.m_model = oFF.VdModel.create(varProcessor, this.m_startValues);
	this.m_model.addListener(this);
	this.m_backendStateHandler = oFF.VdBackendStateHandler.createHandler(varProcessor);
};
oFF.VdVariableForm.prototype.showMandatoryVarsOnly = function(mandatoryOnly)
{
	for (let i = 0; i < this.m_variableController.size(); i++)
	{
		let variableControllerI = this.m_variableController.get(i);
		if (!variableControllerI.getVariable().isMandatory())
		{
			variableControllerI.getView().getVisibleProperty().setVisible(mandatoryOnly ? false : true);
		}
	}
};
oFF.VdVariableForm.prototype.showVariableTechnicalNames = function(show)
{
	for (let j = 0; j < this.m_variableController.size(); j++)
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_variableController.get(j).getView().getTechnicalNameLabel().getText()))
		{
			this.m_variableController.get(j).getView().getTechnicalNameLabel().setVisible(show ? true : false);
		}
	}
};
oFF.VdVariableForm.prototype.submitInternal = function()
{
	let cleanedValues = this.m_model.getCleanedValues();
	if (this.m_config.useImplicitSubmit())
	{
		this.callOnBeforeSubmit();
		this.getStateHandler().submitVariables(cleanedValues, this, oFF.XStringValue.create(oFF.VdVariableForm.SUBMIT_IDENTIFIER));
	}
	else
	{
		this.getStateHandler().setVariableValues(cleanedValues);
		let submitProcessor = this.getStateHandler().getSubmitProcessor();
		if (oFF.notNull(submitProcessor) && !submitProcessor.isDirectVariableTransferEnabled())
		{
			submitProcessor.transferVariables(oFF.OlapUiValueHelpAbstract.s_syncType, oFF.VariableProcessorCallbackLambda.createSingleUse((result) => {
				this.syncValues(cleanedValues, false, false);
				this.m_model.setValues(cleanedValues);
				this.callOnBeforeSubmit();
			}), null);
			return;
		}
		this.callOnBeforeSubmit();
	}
};
oFF.VdVariableForm.prototype.supportsStoryFilterOptimization = function(varName)
{
	let variableModel = this.m_model.getVariableModelByName(varName);
	if (oFF.isNull(variableModel))
	{
		return false;
	}
	if (this.m_context.getUiManager().getDeviceInfo().isMobile())
	{
		return oFF.VdVhMobileController.supportsMobileValueHelp(variableModel);
	}
	return oFF.VdVariableForm.supportsStoryFilterOptimizationForDesktop(variableModel);
};
oFF.VdVariableForm.prototype.syncValues = function(values, syncExits, postMessages)
{
	let submitProcessor = this.getStateHandler().getSubmitProcessor();
	if (oFF.isNull(submitProcessor))
	{
		return;
	}
	let variables = submitProcessor.getInputEnabledAndNonTechnicalVariables();
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		let varName = variable.getName();
		if (!this.isSyncCandidate(variable, syncExits))
		{
			continue;
		}
		let dateBased = variable.getValueType().isDateBased();
		let valuesFromDialog = values.containsKey(varName) ? values.getByKey(varName) : oFF.XList.create();
		let valuesFromVariable = oFF.VdImportExport.getValuesFromVariable(variable);
		if (oFF.VdVariableForm.areKeysDifferent(valuesFromDialog, valuesFromVariable, false, dateBased))
		{
			values.put(varName, valuesFromVariable);
			if (postMessages && !variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
			{
				this.postValueDifferenceMessage(variable, valuesFromVariable);
				continue;
			}
			let dimVar = variable;
			if (!dimVar.supportsValueHelp() || !dimVar.getDimension().getHasCheckTable())
			{
				continue;
			}
			if (postMessages && oFF.VdVariableForm.areKeysDifferent(valuesFromDialog, valuesFromVariable, true, dateBased))
			{
				this.postValueDifferenceMessage(variable, valuesFromVariable);
			}
		}
	}
};
oFF.VdVariableForm.prototype.updateDisplayedValues = function()
{
	for (let i = 0; i < this.m_variableController.size(); i++)
	{
		let variableController = this.m_variableController.get(i);
		let variable = variableController.getVariable();
		if (variable.getVariableType().isTypeOf(oFF.VariableType.TEXT_VARIABLE) || variable.getVariableType().isTypeOf(oFF.VariableType.FORMULA_VARIABLE))
		{
			continue;
		}
		variableController.updateDisplayedValues();
	}
};
oFF.VdVariableForm.prototype.updateDynamicVariables = function()
{
	if (this.hasDynamicVariables())
	{
		this.setBusy(true);
		this.getVariableProcessor().updateDynamicVariables(oFF.SyncType.NON_BLOCKING, oFF.QueryExecutionListenerLambda.createSingleUse((result) => {
			this.setBusy(false);
			if (result.isValid())
			{
				this.setDynamicVariables();
			}
		}), null);
	}
};
oFF.VdVariableForm.prototype.updateOnDisplayChange = function()
{
	if (this.isVariableUpdateRequired())
	{
		this.getStateHandler().getSubmitProcessor().transferVariables(oFF.OlapUiValueHelpAbstract.s_syncType, oFF.VariableProcessorCallbackLambda.createSingleUse((variableResult) => {
			if (variableResult.hasErrors())
			{
				this.postServerError(variableResult);
			}
			else
			{
				this.enhanceWithDisplayKeys();
			}
			this.updateDisplayedValues();
		}), null);
	}
	else
	{
		this.updateDisplayedValues();
	}
};
oFF.VdVariableForm.prototype.updateVariantSection = function(selectedVariant)
{
	if (oFF.isNull(this.m_variantMenuBtn))
	{
		return;
	}
	let variants = this.m_model.getVariants();
	this.m_variantMenu.clearItems();
	let emptyItem = this.m_variantMenu.addNewItem();
	emptyItem.setName("emptyItem");
	emptyItem.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NONE));
	emptyItem.registerOnPress(this);
	if (oFF.isNull(selectedVariant))
	{
		emptyItem.setIcon("accept");
	}
	let addToMenu = (variant) => {
		let item = this.m_variantMenu.addNewItem();
		item.setName(oFF.VdVariableForm.getVariantNameForMenu(variant));
		item.setText(variant.getText());
		item.setCustomObject(variant);
		item.registerOnPress(this);
	};
	oFF.XStream.of(variants).filter((usr1) => {
		return usr1.getScope() === oFF.Scope.USER;
	}).sorted(oFF.VdVariantComparator.getInstance()).forEach(addToMenu);
	oFF.XStream.of(variants).filter((gbl1) => {
		return gbl1.getScope() === oFF.Scope.GLOBAL;
	}).sorted(oFF.VdVariantComparator.getInstance()).forEach(addToMenu);
	this.setVariantActions();
	this.m_variantMenuBtn.setText(oFF.notNull(selectedVariant) ? selectedVariant.getText() : emptyItem.getText());
	this.m_variantMenuOverwriteBtn.setEnabled(oFF.notNull(selectedVariant));
	this.m_variantMenuManageBtn.setEnabled(oFF.XCollectionUtils.hasElements(variants));
};

oFF.VdAbstractValueController = function() {};
oFF.VdAbstractValueController.prototype = new oFF.XObject();
oFF.VdAbstractValueController.prototype._ff_c = "VdAbstractValueController";

oFF.VdAbstractValueController.prototype.INDEX = null;
oFF.VdAbstractValueController.prototype.SEARCH_VALUE = null;
oFF.VdAbstractValueController.prototype.m_config = null;
oFF.VdAbstractValueController.prototype.m_context = null;
oFF.VdAbstractValueController.prototype.m_control1 = null;
oFF.VdAbstractValueController.prototype.m_control2 = null;
oFF.VdAbstractValueController.prototype.m_focusedControl = null;
oFF.VdAbstractValueController.prototype.m_parent = null;
oFF.VdAbstractValueController.prototype.m_renderer = null;
oFF.VdAbstractValueController.prototype.m_value = null;
oFF.VdAbstractValueController.prototype.m_variableModel = null;
oFF.VdAbstractValueController.prototype.m_view = null;
oFF.VdAbstractValueController.prototype.addInvisibleTexts = function()
{
	let invisibleVariableTitleText = this.m_parent.getView().getInvisibleVariableTitleText();
	this.m_view.getDropdown().addLabelledBy(invisibleVariableTitleText);
	this.addValueSpecificInvisibleTexts();
	this.m_view.getDeleteLineButton().addLabelledBy(invisibleVariableTitleText);
};
oFF.VdAbstractValueController.prototype.clearIdAndInfoMessage = function()
{
	if (!this.shouldDisplayIdAndInfoMessage())
	{
		return;
	}
	let inputIndex = this.getControlIndex(this.m_focusedControl);
	this.m_value.resetValueState(inputIndex);
	this.m_parent.updateDisplayedValue(this.m_value);
};
oFF.VdAbstractValueController.prototype.displayInfoMessage = function(isOnEnter)
{
	if (!this.shouldDisplayIdAndInfoMessage())
	{
		return;
	}
	let inputIndex = this.getControlIndex(this.m_focusedControl);
	let isStraightAfterValueHelpDialog = this.m_parent.isStraightAfterValueHelpDialog();
	if (isStraightAfterValueHelpDialog)
	{
		this.m_parent.clearValueHelpDialogState();
	}
	let isShowInfoMessage = !isOnEnter && !isStraightAfterValueHelpDialog;
	if (isShowInfoMessage)
	{
		this.m_value.setInfo(inputIndex, this.m_focusedControl.getPlaceholder());
	}
};
oFF.VdAbstractValueController.prototype.getBestFittingValueHelpResult = function(result, searchText)
{
	let firstItem = null;
	for (let i = 0; i < result.size(); i++)
	{
		let node = result.get(i);
		let item = oFF.FilterDialogValueFactory.createValueHelpValue(node);
		if (oFF.XString.isEqual(oFF.XString.toLowerCase(item.getDisplayKey()), oFF.XString.toLowerCase(searchText)))
		{
			oFF.XObjectExt.release(firstItem);
			return item;
		}
		if (oFF.isNull(firstItem))
		{
			firstItem = item;
			continue;
		}
		oFF.XObjectExt.release(item);
	}
	return firstItem;
};
oFF.VdAbstractValueController.prototype.getControlIndex = function(control)
{
	return oFF.XObject.areObjectsEqual(control, this.m_control1) ? 0 : oFF.XObject.areObjectsEqual(control, this.m_control2) ? 1 : -1;
};
oFF.VdAbstractValueController.prototype.getControlState = function(control)
{
	if (control.getCustomObject() === null)
	{
		return oFF.VdControllerState.PRISTINE;
	}
	return control.getCustomObject();
};
oFF.VdAbstractValueController.prototype.getDisplayValue = function(labelMode, value, operandIndex)
{
	return this.m_renderer.getDisplayValue(labelMode, value, operandIndex);
};
oFF.VdAbstractValueController.prototype.getSelectedOperator = function(item)
{
	let operator = item.getCustomObject();
	let shallowCopy = this.m_value.createShallowCopy();
	shallowCopy.setOperator(operator);
	let isNewValue = this.m_variableModel.isNewValue(shallowCopy);
	oFF.XObjectExt.release(shallowCopy);
	return isNewValue ? operator : this.m_value.getOperator();
};
oFF.VdAbstractValueController.prototype.getVarType = function()
{
	return this.m_variableModel.getVariableType();
};
oFF.VdAbstractValueController.prototype.getView = function()
{
	return this.m_view;
};
oFF.VdAbstractValueController.prototype.handleIdAndInfoMessage = function(isOnEnter, isTextSelected)
{
	if (!this.shouldDisplayIdAndInfoMessage())
	{
		return;
	}
	let inputIndex = this.getControlIndex(this.m_focusedControl);
	let displayKey = this.m_value.getOperand(inputIndex).getDisplayKey();
	this.displayInfoMessage(isOnEnter);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(displayKey) && !oFF.XString.isEqual(this.m_focusedControl.getValue(), displayKey))
	{
		this.m_focusedControl.setValue(displayKey);
		if (isTextSelected)
		{
			this.m_focusedControl.selectText(0, oFF.XString.size(this.m_focusedControl.getValue()));
		}
	}
};
oFF.VdAbstractValueController.prototype.isMultiInput = function()
{
	return false;
};
oFF.VdAbstractValueController.prototype.isNewValue = function(operand, operandIndex)
{
	let shallowCopy = this.m_value.createShallowCopy();
	shallowCopy.setOperand(operandIndex, operand);
	let isNewValue = this.m_variableModel.isNewValue(shallowCopy);
	oFF.XObjectExt.release(shallowCopy);
	return isNewValue;
};
oFF.VdAbstractValueController.prototype.notifyStateChange = function()
{
	let state1 = this.getControlState(this.m_control1);
	let state2 = this.getControlState(this.m_control2);
	this.m_parent.notifyStateChange(oFF.VdControllerState.getHigherPriority(state1, state2));
};
oFF.VdAbstractValueController.prototype.onInvalidValueState = function() {};
oFF.VdAbstractValueController.prototype.onSearchDone = function(index) {};
oFF.VdAbstractValueController.prototype.onSelect = function(event)
{
	let selectedOperator = this.getSelectedOperator(event.getSelectedItem());
	let previousOperator = this.m_value.getOperator();
	let isSameOperatorType = this.m_parent.isSupportedMultiInput(selectedOperator) === this.m_parent.isSupportedMultiInput(previousOperator);
	if (!isSameOperatorType)
	{
		this.m_value = this.m_parent.replaceIncompatibleValue(this, this.m_value, selectedOperator);
	}
	else if (!this.isMultiInput())
	{
		this.m_value.setOperator(selectedOperator);
	}
	else
	{
		this.m_parent.updateMultiInputKey(previousOperator, selectedOperator);
		let valuesToUpdate = this.m_parent.getMultiInputValues(selectedOperator);
		if (valuesToUpdate.isEmpty())
		{
			valuesToUpdate.put(this.m_value.getId(), this.m_value);
		}
		oFF.XCollectionUtils.forEach(valuesToUpdate, (value) => {
			value.setOperator(selectedOperator);
		});
	}
	if (this.m_parent.isSupportedMultiInput(previousOperator) || this.m_parent.isSupportedMultiInput(selectedOperator))
	{
		this.m_parent.updateWithOptions(true);
	}
};
oFF.VdAbstractValueController.prototype.onValueStateChanged = function() {};
oFF.VdAbstractValueController.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	let properties = customIdentifier;
	let searchedOnIndex = properties.getIntegerByKey(this.INDEX);
	let searchValue = properties.getStringByKey(this.SEARCH_VALUE);
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let isCurrentInputFocused = false;
	let isHandlingId = false;
	if (extResult.hasErrors())
	{
		this.m_value.setError(searchedOnIndex, i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR));
	}
	else
	{
		let result = extResult.getData();
		if (oFF.XCollectionUtils.hasElements(result))
		{
			let operand = this.getBestFittingValueHelpResult(result, searchValue);
			let input = searchedOnIndex === 0 ? this.m_view.getInput1() : this.m_view.getInput2();
			isCurrentInputFocused = input === this.m_focusedControl;
			if (this.m_variableModel.getInputValue() === this.m_value || this.isNewValue(operand, searchedOnIndex))
			{
				this.m_parent.setEnableAutoFocus(isCurrentInputFocused);
				this.m_value.setOperand(searchedOnIndex, operand);
				this.m_parent.setEnableAutoFocus(false);
			}
			isHandlingId = true;
		}
		else
		{
			this.m_value.setError(searchedOnIndex, i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_DOES_NOT_EXIST));
		}
	}
	this.onSearchDone(searchedOnIndex);
	if (isHandlingId)
	{
		this.handleIdAndInfoMessage(isCurrentInputFocused, false);
	}
};
oFF.VdAbstractValueController.prototype.performValueSearch = function(index, searchValue)
{
	let properties = oFF.XProperties.create();
	properties.putInteger(this.INDEX, index);
	properties.putString(this.SEARCH_VALUE, searchValue);
	this.m_parent.performValueSearch(searchValue, this, properties);
};
oFF.VdAbstractValueController.prototype.releaseObject = function()
{
	this.m_control1 = null;
	this.m_control2 = null;
	this.m_view = oFF.XObjectExt.release(this.m_view);
	this.m_renderer = oFF.XObjectExt.release(this.m_renderer);
	this.m_config = null;
	if (oFF.notNull(this.m_value))
	{
		this.m_value.removeValueStateListener(this);
	}
	this.m_value = null;
	this.m_variableModel = null;
	this.m_parent = null;
	this.m_context = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdAbstractValueController.prototype.setState = function(control, state)
{
	control.setCustomObject(state);
	if (oFF.VdControllerState.isCompleted(this.m_control1.getCustomObject()) && oFF.notNull(this.m_control2) && oFF.VdControllerState.isCompleted(this.m_control2.getCustomObject()) && this.m_parent.getModel().isNewValue(this.m_value))
	{
		this.m_value.updateOperandOrder();
	}
	this.notifyStateChange();
};
oFF.VdAbstractValueController.prototype.setupController = function(context, configuration, controller, variableModel, value)
{
	this.m_context = context;
	this.m_config = configuration;
	this.m_parent = controller;
	this.m_variableModel = variableModel;
	this.m_value = value;
	if (oFF.notNull(this.m_value))
	{
		this.m_value.addValueStateListener(this);
	}
	this.m_view = this.createView(this.m_parent.isEmbedded());
	if (this.m_config.isGridLayoutEnabled())
	{
		this.addInvisibleTexts();
	}
	this.m_view.getDropdown().registerOnSelect(this);
	this.m_view.getInput1().setShowClearIcon(!this.m_config.isMultiInputComponentEnabled());
	this.m_view.getInput1().registerOnValueHelpRequest(oFF.UiLambdaValueHelpRequestListener.create((control1) => {
		if (this.m_variableModel.isInterval())
		{
			this.m_parent.performValueHelpForValue(this.m_value, oFF.VdValue.FIRST);
		}
		else
		{
			this.m_parent.performValueHelpForVariable();
		}
	}));
	this.m_view.getInput2().setShowClearIcon(!this.m_config.isMultiInputComponentEnabled());
	this.m_view.getInput2().registerOnValueHelpRequest(oFF.UiLambdaValueHelpRequestListener.create((control2) => {
		this.m_parent.performValueHelpForValue(this.m_value, oFF.VdValue.SECOND);
	}));
	if (this.m_view.getDeleteLineButton() !== null)
	{
		this.m_view.getDeleteLineButton().registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
			this.m_parent.setEnableAutoFocus(true);
			let currentOperator = this.m_value.getOperator();
			if (this.m_parent.isSupportedMultiInput(currentOperator))
			{
				this.m_variableModel.removeValuesWithOperator(currentOperator);
				if (this.m_variableModel.isInterval())
				{
					this.m_parent.updateViewForMultiInputOperator(currentOperator);
				}
			}
			else
			{
				this.m_variableModel.removeValue(this.m_value);
			}
			this.m_parent.setEnableAutoFocus(false);
			if (this.m_parent.isEmbedded() && this.m_variableModel.isMandatory() && this.m_variableModel.getValues().isEmpty() || this.m_variableModel.getValues().size() === 1 && !this.m_variableModel.getValues().get(0).isFilled())
			{
				this.m_variableModel.validateValues();
			}
		}));
	}
	this.m_renderer = oFF.VdValueRenderer.create(context, configuration, this.m_view, variableModel, value);
	this.INDEX = "index";
	this.SEARCH_VALUE = "search_value";
};
oFF.VdAbstractValueController.prototype.shouldDisplayIdAndInfoMessage = function()
{
	if (!this.m_config.isForceValueIdModification() || !this.m_config.isMultiInputComponentEnabled() || oFF.isNull(this.m_focusedControl) || !this.m_focusedControl.isEditable() || !this.m_focusedControl.isEnabled() || !this.m_parent.getVariable().getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) || this.m_config.getLabelMode() === oFF.DialogLabelMode.KEY || !this.m_parent.getModel().isNewValue(this.m_value))
	{
		return false;
	}
	let inputIndex = this.getControlIndex(this.m_focusedControl);
	let isDirty = this.getControlState(this.m_focusedControl) === oFF.VdControllerState.DIRTY;
	let hasErrorState = this.m_value.getValueState(inputIndex) === oFF.UiValueState.ERROR;
	let isOperandFilled = this.m_value.isOperandFilled(inputIndex);
	return !isDirty && !hasErrorState && isOperandFilled;
};
oFF.VdAbstractValueController.prototype.update = function(labelMode, inputEnabled)
{
	this.m_renderer.update(labelMode, inputEnabled);
};
oFF.VdAbstractValueController.prototype.wrapUpState = function()
{
	let state1 = this.getControlState(this.m_control1);
	let state2 = this.getControlState(this.m_control2);
	if (state1 === oFF.VdControllerState.PENDING || state2 === oFF.VdControllerState.PENDING)
	{
		return false;
	}
	if (state1 === oFF.VdControllerState.DIRTY)
	{
		this.processVariable(this.m_control1);
		return false;
	}
	else if (state2 === oFF.VdControllerState.DIRTY)
	{
		this.processVariable(this.m_control2);
		return false;
	}
	return true;
};

oFF.VdVariableController = function() {};
oFF.VdVariableController.prototype = new oFF.XObject();
oFF.VdVariableController.prototype._ff_c = "VdVariableController";

oFF.VdVariableController.CLIPBOARD = "Clipboard";
oFF.VdVariableController.MAX_VALUES = 50;
oFF.VdVariableController.OPEN_CLIPBOARD = "OpenClipboard";
oFF.VdVariableController.createVariableController = function(context, configuration, master, variableModel, layout)
{
	let obj = new oFF.VdVariableController();
	obj.setupVariableController(context, configuration, master, variableModel, layout);
	return obj;
};
oFF.VdVariableController.prototype.m_clipboardController = null;
oFF.VdVariableController.prototype.m_clipboardHelper = null;
oFF.VdVariableController.prototype.m_config = null;
oFF.VdVariableController.prototype.m_context = null;
oFF.VdVariableController.prototype.m_controllers = null;
oFF.VdVariableController.prototype.m_enableAutoFocus = false;
oFF.VdVariableController.prototype.m_isStraightAfterValueHelpDialog = false;
oFF.VdVariableController.prototype.m_master = null;
oFF.VdVariableController.prototype.m_model = null;
oFF.VdVariableController.prototype.m_multiInputControllers = null;
oFF.VdVariableController.prototype.m_view = null;
oFF.VdVariableController.prototype.addCurrentInputValueToModel = function()
{
	let inputValue = this.m_model.getInputValue();
	this.m_model.setInputValue(null);
	this.renderValue(inputValue);
	this.m_model.addValue(inputValue);
};
oFF.VdVariableController.prototype.addInputFieldIfNecessary = function()
{
	let values = this.m_model.getValues();
	if (values.isEmpty() || values.get(values.size() - 1).isFilled() && this.m_model.supportsMultipleValues())
	{
		let inputValue = this.m_model.getInputValue();
		if (oFF.notNull(inputValue))
		{
			if (!values.contains(inputValue) && inputValue.isFilled() && this.m_model.isNewValue(inputValue))
			{
				this.addCurrentInputValueToModel();
			}
			else if (!inputValue.isFilled() && !this.isSupportedMultiInput(inputValue.getOperator()))
			{
				let valueView = this.m_controllers.getByKey(inputValue.getId()).getView();
				this.m_view.removeValue(valueView);
				this.m_view.addValue(valueView);
				this.renderValue(inputValue);
			}
		}
		else
		{
			let defaultOperator = this.m_model.getDefaultOperator();
			let operator = this.getCurrentOperatorOrFallback(this.m_model.getDefaultOperator());
			if (oFF.isNull(defaultOperator) || oFF.notNull(operator))
			{
				inputValue = oFF.VdValue.createValue(operator, null, null);
				this.m_model.setInputValue(inputValue);
				this.addValue(inputValue);
			}
		}
	}
};
oFF.VdVariableController.prototype.addMoreButton = function()
{
	let button = this.m_view.showMoreButton();
	button.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
		let hiddenValues = this.getHiddenValues();
		this.insertValueList(this.m_view.getMoreButtonIndex(), hiddenValues);
		this.addInputFieldIfNecessary();
		if (this.m_model.getValues().size() <= this.m_controllers.size())
		{
			this.m_view.hideMoreButton();
		}
	}));
};
oFF.VdVariableController.prototype.addValue = function(value)
{
	this.insertValue(-1, value);
};
oFF.VdVariableController.prototype.clearValueHelpDialogState = function()
{
	this.m_isStraightAfterValueHelpDialog = false;
};
oFF.VdVariableController.prototype.createValueController = function(value)
{
	let variableType = this.m_model.getVariableType();
	if (this.m_model.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE) || this.m_model.getValueType().isBoolean())
	{
		return oFF.VdOptionValueController.create(this.m_context, this.m_config, this, this.m_model, value);
	}
	if (oFF.VdVariableForm.isDatePickerSupported(this.getVariable()))
	{
		if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
		{
			return oFF.VdDateValueController.create(this.m_context, this.m_config, this, this.m_model, value);
		}
		if (this.m_config.useDatePicker())
		{
			return oFF.VdDateValueController.create(this.m_context, this.m_config, this, this.m_model, value);
		}
	}
	if (this.isSupportedMultiInput(value.getOperator()))
	{
		return oFF.VdMultiInputValueController.create(this.m_context, this.m_config, this, this.m_model);
	}
	else
	{
		return oFF.VdInputValueController.create(this.m_context, this.m_config, this, this.m_model, value);
	}
};
oFF.VdVariableController.prototype.focusInput = function(input)
{
	if (oFF.notNull(input) && input.isVisible() && input.isEnabled() && input.isEditable())
	{
		input.focus();
		return true;
	}
	return false;
};
oFF.VdVariableController.prototype.focusNextField = function(renderedValue, renderedOperandIndex)
{
	let valueViews = this.m_view.getValueViews();
	if (!oFF.XCollectionUtils.hasElements(valueViews))
	{
		return;
	}
	let renderedView;
	if (oFF.notNull(renderedValue))
	{
		if (renderedValue.getSecondOperand() !== null)
		{
			return;
		}
		renderedView = this.m_controllers.getByKey(renderedValue.getId()).getView();
	}
	else
	{
		renderedView = valueViews.get(valueViews.size() - 1);
	}
	let startIndex = valueViews.getIndex(renderedView);
	if (renderedOperandIndex >= 0)
	{
		if (renderedOperandIndex === 0 && this.focusInput(renderedView.getInput2()))
		{
			return;
		}
		startIndex++;
	}
	for (let i = startIndex; i < valueViews.size(); i++)
	{
		let valueView = valueViews.get(i);
		if (this.focusInput(valueView.getInput1()) || this.focusInput(valueView.getInput2()))
		{
			return;
		}
	}
	let input = renderedOperandIndex === 1 && renderedView.getInput2().isVisible() ? renderedView.getInput2() : renderedView.getInput1();
	input.focus();
};
oFF.VdVariableController.prototype.getCurrentOperatorOrFallback = function(operator)
{
	if (this.isSupportedMultiInput(operator) && this.m_model.isOperatorInUse(operator))
	{
		let supportedComparisonOperators = this.m_model.getSupportedComparisonOperators().createListCopy();
		let isEqualInUse = this.m_model.isOperatorInUse(oFF.VdComparisonOperator.EQUAL);
		let isNotEqualInUse = this.m_model.isOperatorInUse(oFF.VdComparisonOperator.NOT_EQUAL);
		oFF.XCollectionUtils.removeIf(supportedComparisonOperators, (supportedOperator) => {
			return isEqualInUse && supportedOperator === oFF.VdComparisonOperator.EQUAL || isNotEqualInUse && supportedOperator === oFF.VdComparisonOperator.NOT_EQUAL;
		});
		if (supportedComparisonOperators.isEmpty())
		{
			return null;
		}
		else
		{
			return supportedComparisonOperators.get(0);
		}
	}
	return operator;
};
oFF.VdVariableController.prototype.getFdLambda = function(consumer)
{
	return oFF.FilterDialogLambdaCloseListener.create(consumer, null);
};
oFF.VdVariableController.prototype.getFirstValues = function()
{
	let selection = oFF.XList.create();
	let values = this.m_model.getValues();
	for (let i = 0; i < values.size(); i++)
	{
		selection.add(values.get(i).getFirstOperand());
	}
	return selection;
};
oFF.VdVariableController.prototype.getFirstValuesForOperator = function(operator)
{
	let selection = oFF.XList.create();
	let values = this.m_model.getValues();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		if (value.isFilled() && (value.getOperator() === operator || value.getOperator() === oFF.VdComparisonOperator.IS_NULL && operator === oFF.VdComparisonOperator.EQUAL || value.getOperator() === oFF.VdComparisonOperator.IS_NOT_NULL && operator === oFF.VdComparisonOperator.NOT_EQUAL))
		{
			selection.add(value.getFirstOperand());
		}
	}
	return selection;
};
oFF.VdVariableController.prototype.getFromCurrentValues = function(firstOperand, secondOperand)
{
	let currentValues = this.m_model.getValues();
	let size = currentValues.size();
	for (let i = 0; i < size; i++)
	{
		let value = currentValues.get(i);
		if (oFF.XObjectExt.areEqual(value.getFirstOperand(), firstOperand) && oFF.XObjectExt.areEqual(value.getSecondOperand(), secondOperand))
		{
			return value;
		}
	}
	return null;
};
oFF.VdVariableController.prototype.getHiddenValues = function()
{
	return oFF.XStream.of(this.m_model.getValues()).filter((v1) => {
		return !this.m_controllers.containsKey(v1.getId()) && v1 !== this.m_model.getInputValue();
	}).collect(oFF.XStreamCollector.toList());
};
oFF.VdVariableController.prototype.getMaster = function()
{
	return this.m_master;
};
oFF.VdVariableController.prototype.getModel = function()
{
	return this.m_model;
};
oFF.VdVariableController.prototype.getMultiInputValueControllerKey = function(operator)
{
	return oFF.XStringUtils.concatenate2(this.m_model.getName(), operator.toString());
};
oFF.VdVariableController.prototype.getMultiInputValues = function(operator)
{
	let key = this.getMultiInputValueControllerKey(operator);
	if (!this.m_multiInputControllers.containsKey(key))
	{
		return oFF.XHashMapByString.create();
	}
	return this.m_multiInputControllers.getByKey(key).getValues();
};
oFF.VdVariableController.prototype.getName = function()
{
	return this.m_model.getName();
};
oFF.VdVariableController.prototype.getValueViewToFocusOn = function(value)
{
	let currentValueController = null;
	if (this.isSupportedMultiInput(value.getOperator()))
	{
		let multiInputValueController = this.m_multiInputControllers.getByKey(this.getMultiInputValueControllerKey(value.getOperator()));
		if (multiInputValueController.getValues().size() > 1)
		{
			return multiInputValueController.getView();
		}
		currentValueController = multiInputValueController;
	}
	else
	{
		currentValueController = this.m_controllers.getByKey(value.getId());
	}
	if (oFF.notNull(currentValueController))
	{
		let valueViews = this.m_view.getValueViews();
		let indexOfValueView = oFF.XListUtils.getIndexOf(valueViews, currentValueController.getView());
		if (indexOfValueView > -1 && indexOfValueView < valueViews.size() - 1)
		{
			return valueViews.get(indexOfValueView + 1);
		}
	}
	return null;
};
oFF.VdVariableController.prototype.getValuesFromFilterDialogSelection = function(selection, originalOperator)
{
	let values = oFF.XList.create();
	for (let i = 0; i < selection.size(); i++)
	{
		let node = selection.get(i);
		let value = this.m_model.createNewValue();
		if (node.isNull())
		{
			if (originalOperator === oFF.VdComparisonOperator.NOT_EQUAL)
			{
				value.setOperator(oFF.VdComparisonOperator.IS_NOT_NULL);
			}
			else
			{
				value.setOperator(oFF.VdComparisonOperator.IS_NULL);
			}
		}
		else if (oFF.notNull(originalOperator))
		{
			value.setOperator(originalOperator);
		}
		value.setFirstOperand(node);
		values.add(value);
	}
	return values;
};
oFF.VdVariableController.prototype.getVariable = function()
{
	return this.m_model.getVariable();
};
oFF.VdVariableController.prototype.getView = function()
{
	return this.m_view;
};
oFF.VdVariableController.prototype.handleMultipleFilterDialogValues = function(selection)
{
	if (oFF.isNull(selection))
	{
		return;
	}
	this.setEnableAutoFocus(true);
	let values = this.getValuesFromFilterDialogSelection(selection, null);
	this.m_model.setValues(values);
	this.m_isStraightAfterValueHelpDialog = true;
	this.setEnableAutoFocus(false);
};
oFF.VdVariableController.prototype.handleSingleFilterDialogValue = function(value, operandIndex, selection)
{
	if (!oFF.XCollectionUtils.hasElements(selection))
	{
		return;
	}
	this.setEnableAutoFocus(true);
	let node = selection.get(0);
	if (this.isNewValue(value, node, operandIndex))
	{
		if (node.isNull())
		{
			value.setOperator(oFF.VdComparisonOperator.IS_NULL);
		}
		value.setOperand(operandIndex, node);
	}
	this.m_isStraightAfterValueHelpDialog = true;
	this.setEnableAutoFocus(false);
};
oFF.VdVariableController.prototype.insertValue = function(index, value)
{
	let valueControllerKey = value.getId();
	let isSupportedMultiInput = this.isSupportedMultiInput(value.getOperator());
	if (!isSupportedMultiInput && this.m_controllers.containsKey(valueControllerKey))
	{
		return;
	}
	let valueController = null;
	if (isSupportedMultiInput)
	{
		valueControllerKey = this.getMultiInputValueControllerKey(value.getOperator());
		valueController = this.m_multiInputControllers.getByKey(valueControllerKey);
	}
	if (oFF.isNull(valueController))
	{
		valueController = this.createValueController(value);
		if (index < 0)
		{
			this.m_view.addValue(valueController.getView());
		}
		else
		{
			this.m_view.insertValue(index, valueController.getView());
		}
	}
	if (isSupportedMultiInput)
	{
		let multiInputValueController = valueController;
		multiInputValueController.addValue(value);
		this.m_multiInputControllers.put(valueControllerKey, multiInputValueController);
	}
	else
	{
		this.m_controllers.put(value.getId(), valueController);
	}
	valueController.update(this.m_config.getLabelMode(), this.m_master.isInputEnabled());
	value.addListener(this);
	let isFirstMultiInputValue = isSupportedMultiInput && valueController.getValues().size() === 1;
	let isInputValueMultiInputOperator = this.m_model.getInputValue() !== null && this.isSupportedMultiInput(this.m_model.getInputValue().getOperator());
	if (this.m_model.isInterval() && (isFirstMultiInputValue || isInputValueMultiInputOperator))
	{
		this.updateWithOptions(true);
	}
	else
	{
		this.updateHead();
	}
};
oFF.VdVariableController.prototype.insertValueList = function(index, values)
{
	for (let i = 0; i < values.size(); i++)
	{
		if (i >= oFF.VdVariableController.MAX_VALUES)
		{
			break;
		}
		this.insertValue(index + i, values.get(i));
	}
};
oFF.VdVariableController.prototype.isEmbedded = function()
{
	return this.m_master.isEmbedded();
};
oFF.VdVariableController.prototype.isNewValue = function(value, operand, operandIndex)
{
	let shallowCopy = value.createShallowCopy();
	if (operand.isNull())
	{
		shallowCopy.setOperator(oFF.VdComparisonOperator.IS_NULL);
	}
	shallowCopy.setOperand(operandIndex, operand);
	let isNewValue = this.m_model.isNewValue(shallowCopy);
	oFF.XObjectExt.release(shallowCopy);
	return isNewValue;
};
oFF.VdVariableController.prototype.isStraightAfterValueHelpDialog = function()
{
	return this.m_isStraightAfterValueHelpDialog;
};
oFF.VdVariableController.prototype.isSupportedMultiInput = function(operator)
{
	if (!this.m_config.isMultiInputComponentEnabled())
	{
		return false;
	}
	let isDimMemberVar = this.m_model.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
	let usesDatePicker = oFF.VdVariableForm.isDatePickerSupported(this.getVariable()) && this.m_config.useDatePicker();
	let supportsMultipleValues = this.m_model.supportsMultipleValues();
	if (!isDimMemberVar || !supportsMultipleValues || usesDatePicker)
	{
		return false;
	}
	if (oFF.isNull(operator))
	{
		return false;
	}
	return operator === oFF.VdComparisonOperator.EQUAL || operator === oFF.VdComparisonOperator.NOT_EQUAL;
};
oFF.VdVariableController.prototype.notifyStateChange = function(state)
{
	this.m_master.notifyStateChange(state);
};
oFF.VdVariableController.prototype.onClipboardCancel = function()
{
	this.m_clipboardController.close();
	this.m_clipboardController = null;
	this.m_clipboardHelper = oFF.XObjectExt.release(this.m_clipboardHelper);
};
oFF.VdVariableController.prototype.onClipboardOk = function(hasChanged, text)
{
	if (!hasChanged)
	{
		this.m_clipboardController.close();
		this.m_clipboardController = null;
		this.m_clipboardHelper = oFF.XObjectExt.release(this.m_clipboardHelper);
		return;
	}
	let supportedOperators = this.m_model.getSupportedComparisonOperators();
	let supportsNull = supportedOperators.contains(oFF.VdComparisonOperator.IS_NULL);
	let supportsNotNull = supportedOperators.contains(oFF.VdComparisonOperator.IS_NOT_NULL);
	let supportsBetween = supportedOperators.contains(oFF.VdComparisonOperator.BETWEEN);
	let values = this.m_clipboardHelper.parseFromClipboard(text, supportsNotNull, supportsBetween);
	let dimVar = this.m_model.getVariable();
	oFF.VdValueHelp.searchValues(dimVar, true, !supportsNull, values, this, oFF.XStringValue.create(oFF.VdVariableController.CLIPBOARD));
};
oFF.VdVariableController.prototype.onFillFieldsDone = function(variable, result, customObject)
{
	let step = customObject.toString();
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	if (result.hasErrors())
	{
		let errorMSg = i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_UNKNOWN_ERROR);
		if (oFF.XString.isEqual(oFF.VdVariableController.CLIPBOARD, step) && result.getFirstError().getCode() === oFF.VdValueHelp.ERR_SERVER_ERROR)
		{
			errorMSg = i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR);
		}
		this.m_clipboardController.setIdle();
		this.m_context.getMessageCenter().postMessage(oFF.UiMessageType.ERROR, errorMSg, oFF.VdVariableForm.COMPONENT_NAME);
		return;
	}
	if (result.hasSeverity(oFF.Severity.WARNING))
	{
		if (result.getFirstWithSeverity(oFF.Severity.WARNING).getCode() === oFF.VdValueHelp.WARN_VALUE_NOT_FOUND)
		{
			this.m_context.getMessageCenter().postMessage(oFF.UiMessageType.WARNING, i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_WARN_VH_VALUES_NOT_FOUND), oFF.VdVariableForm.COMPONENT_NAME);
		}
	}
	let values = result.getData();
	switch (step)
	{
		case oFF.VdVariableController.CLIPBOARD:
			this.updateOperatorsOnClipboadValues(values);
			this.m_model.setValues(values);
			this.m_clipboardController.close();
			this.m_clipboardController = null;
			this.m_clipboardHelper = oFF.XObjectExt.release(this.m_clipboardHelper);
			break;

		case oFF.VdVariableController.OPEN_CLIPBOARD:
			let valueGrid = this.m_clipboardHelper.getValueGrid(values);
			this.m_clipboardController.setText(oFF.DialogGridParser.serializeWithFormat(oFF.DialogGridFormat.SEMICOLON, valueGrid));
			break;
	}
};
oFF.VdVariableController.prototype.onFilterDialogCancel = function() {};
oFF.VdVariableController.prototype.onFilterDialogOk = function(selection, settings)
{
	this.setEnableAutoFocus(true);
	this.handleMultipleFilterDialogValues(selection);
	this.setEnableAutoFocus(false);
};
oFF.VdVariableController.prototype.onPress = function(event)
{
	let control = event.getControl();
	if (control === this.m_view.getClearButton())
	{
		this.m_view.hideMoreButton();
		this.m_model.clearValues();
	}
	else if (control === this.m_view.getClipboardButton())
	{
		this.m_clipboardController = this.m_context.getClipboardController();
		this.m_clipboardHelper = oFF.ClipboardHelperForVdValue.createHelper();
		let variable = this.m_model.getVariable();
		let infoText = null;
		if (this.m_model.isInterval())
		{
			infoText = oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CLIPBOARD_INFO);
		}
		this.m_clipboardController.openLazyLoadClipboardDialog(infoText, this);
		oFF.VdValueHelp.searchValues(variable, false, false, this.m_model.getValues(), this, oFF.XStringValue.create(oFF.VdVariableController.OPEN_CLIPBOARD));
	}
};
oFF.VdVariableController.prototype.onValueAdded = function(value)
{
	this.addValue(value);
	this.addInputFieldIfNecessary();
};
oFF.VdVariableController.prototype.onValueChanged = function(value, operandIndex)
{
	if (this.m_model.isNewValue(value) || !value.isFilled())
	{
		if (this.m_model.getInputValue() === value && value.isFilled())
		{
			this.addCurrentInputValueToModel();
		}
		else
		{
			this.renderValue(value);
		}
		if (this.m_enableAutoFocus)
		{
			this.focusNextField(value, operandIndex);
		}
	}
};
oFF.VdVariableController.prototype.onValueRemoved = function(value, valueIndex)
{
	if (this.m_enableAutoFocus)
	{
		let viewToFocusOn = this.getValueViewToFocusOn(value);
		if (oFF.notNull(viewToFocusOn) && viewToFocusOn.getDeleteLineButton() !== null && viewToFocusOn.getDeleteLineButton().isVisible())
		{
			viewToFocusOn.getDeleteLineButton().focus();
		}
		else
		{
			this.focusNextField(null, -1);
		}
	}
	let values = this.m_model.getValues();
	this.removeValue(value);
	this.addInputFieldIfNecessary();
	if (values.isEmpty())
	{
		if (this.m_model.isInterval() && this.isSupportedMultiInput(value.getOperator()))
		{
			return;
		}
		this.focusNextField(null, -1);
	}
};
oFF.VdVariableController.prototype.onValuesSet = function()
{
	let values = this.m_model.getValues();
	this.setValueList(values);
	if (this.m_enableAutoFocus)
	{
		this.focusNextField(null, -1);
	}
};
oFF.VdVariableController.prototype.performValueHelpForValue = function(value, operandIndex)
{
	let operator = value.getOperator();
	let newWorkflowPossible = (this.m_config.isNewSettingsEnabled() || this.m_config.isMultiInputComponentEnabled()) && (operator === oFF.VdComparisonOperator.EQUAL || operator === oFF.VdComparisonOperator.NOT_EQUAL) && this.m_model.supportsMultipleValues();
	if (newWorkflowPossible)
	{
		let listener = oFF.FilterDialogLambdaCloseListener.create((selection1) => {
			if (oFF.isNull(selection1))
			{
				return;
			}
			this.setEnableAutoFocus(true);
			let newValues = this.getValuesFromFilterDialogSelection(selection1, operator);
			this.m_model.setMultiInputValues(newValues, operator);
			this.setEnableAutoFocus(false);
		}, null);
		this.m_master.performValueHelpWithDialog(this.m_model, this.getFirstValuesForOperator(operator), oFF.UiTableSelectionMode.MULTI_TOGGLE, listener);
	}
	else
	{
		let oldListener = this.getFdLambda((selection2) => {
			this.handleSingleFilterDialogValue(value, operandIndex, selection2);
		});
		this.m_master.performValueHelpWithDialog(this.m_model, oFF.XList.create(), oFF.UiTableSelectionMode.SINGLE, oldListener);
	}
};
oFF.VdVariableController.prototype.performValueHelpForVariable = function()
{
	let selectionMode = this.m_model.supportsMultipleValues() ? oFF.UiTableSelectionMode.MULTI_TOGGLE : oFF.UiTableSelectionMode.SINGLE;
	let listener = this.getFdLambda(this.handleMultipleFilterDialogValues.bind(this));
	this.m_master.performValueHelpWithDialog(this.m_model, this.getFirstValues(), selectionMode, listener);
};
oFF.VdVariableController.prototype.performValueSearch = function(input, listener, customIdentifier)
{
	this.m_master.performValueSearch(this.m_model, input, listener, customIdentifier);
};
oFF.VdVariableController.prototype.releaseObject = function()
{
	this.m_controllers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_controllers);
	this.m_multiInputControllers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_multiInputControllers);
	this.m_view = oFF.XObjectExt.release(this.m_view);
	let values = this.m_model.getValues();
	for (let i = 0; i < values.size(); i++)
	{
		values.get(i).removeListener(this);
	}
	this.m_model.removeListener(this);
	this.m_model = null;
	this.m_master = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableController.prototype.removeValue = function(value)
{
	let valueControllerKey = value.getId();
	let multiInputControllerKey = this.getMultiInputValueControllerKey(value.getOperator());
	let multiInputControllerExists = this.m_config.isMultiInputComponentEnabled() && this.m_multiInputControllers.containsKey(multiInputControllerKey);
	if (!this.m_controllers.containsKey(valueControllerKey) && !multiInputControllerExists)
	{
		return;
	}
	if (multiInputControllerExists)
	{
		let multiInputValueController = this.m_multiInputControllers.getByKey(multiInputControllerKey);
		multiInputValueController.removeValue(value);
	}
	else
	{
		let removedValueController = this.m_controllers.remove(valueControllerKey);
		this.m_view.removeValue(removedValueController.getView());
	}
	value.removeListener(this);
	this.updateHead();
};
oFF.VdVariableController.prototype.renderValue = function(value)
{
	let renderer = this.m_controllers.getByKey(value.getId());
	let multiInputValueController = null;
	if (this.m_config.isMultiInputComponentEnabled())
	{
		multiInputValueController = this.m_multiInputControllers.getByKey(this.getMultiInputValueControllerKey(value.getOperator()));
	}
	if (oFF.notNull(renderer) && !this.isSupportedMultiInput(value.getOperator()))
	{
		renderer.update(this.m_config.getLabelMode(), this.m_master.isInputEnabled());
	}
	else if (oFF.notNull(multiInputValueController))
	{
		multiInputValueController.addValue(value);
		multiInputValueController.update(this.m_config.getLabelMode(), this.m_master.isInputEnabled());
	}
};
oFF.VdVariableController.prototype.replaceIncompatibleValue = function(controller, previousValue, newOperator)
{
	let previousValueView = controller.getView();
	let indexOfValueViewToUpdate = this.m_view.getValueViews().getIndex(previousValueView);
	let previousOperator = previousValue.getOperator();
	let isFromMultiInputOperator = this.isSupportedMultiInput(previousOperator);
	let newValue;
	this.m_view.removeValue(previousValueView);
	if (isFromMultiInputOperator)
	{
		let oldKey = this.getMultiInputValueControllerKey(previousOperator);
		let previousMultiInputValues = this.m_multiInputControllers.getByKey(oldKey).getValues().getValuesAsReadOnlyList();
		newValue = previousMultiInputValues.isEmpty() ? this.m_model.createNewValue() : previousMultiInputValues.get(0).createShallowCopy();
		this.m_model.removeValuesWithOperator(previousOperator);
		this.m_multiInputControllers.remove(oldKey);
	}
	else
	{
		let isPreviousOperatorNullOperator = previousValue.getOperator().isNullOperator();
		newValue = previousValue.isEmpty() || isPreviousOperatorNullOperator ? this.m_model.createNewValue() : previousValue;
		this.m_controllers.remove(previousValue.getId());
		if (isPreviousOperatorNullOperator)
		{
			this.m_model.removeValue(previousValue);
		}
	}
	newValue.setOperator(newOperator);
	let isPreviousValueSameAsInputValue = previousValue === this.m_model.getInputValue();
	if (isPreviousValueSameAsInputValue)
	{
		this.m_model.setInputValue(newValue);
	}
	this.insertValue(indexOfValueViewToUpdate, newValue);
	if (isFromMultiInputOperator && !isPreviousValueSameAsInputValue)
	{
		this.m_model.insertValue(indexOfValueViewToUpdate, newValue);
	}
	this.addInputFieldIfNecessary();
	this.m_view.getValueViews().get(indexOfValueViewToUpdate).getDropdown().focus();
	return newValue;
};
oFF.VdVariableController.prototype.setEnableAutoFocus = function(enableAutoFocus)
{
	this.m_enableAutoFocus = enableAutoFocus;
};
oFF.VdVariableController.prototype.setValueList = function(values)
{
	this.m_view.clearValues();
	this.m_controllers.clear();
	this.m_multiInputControllers.clear();
	for (let i = 0; i < values.size(); i++)
	{
		if (!this.isSupportedMultiInput(values.get(i).getOperator()) && i >= oFF.VdVariableController.MAX_VALUES)
		{
			this.addMoreButton();
			break;
		}
		this.addValue(values.get(i));
	}
	this.addInputFieldIfNecessary();
};
oFF.VdVariableController.prototype.setupVariableController = function(context, configuration, master, variableModel, layout)
{
	this.m_context = context;
	this.m_config = configuration;
	this.m_master = master;
	this.m_model = variableModel;
	this.m_model.addListener(this);
	this.m_view = layout;
	this.m_view.getClearButton().registerOnPress(this);
	this.m_view.getClipboardButton().registerOnPress(this);
	if (this.m_config.isGridLayoutEnabled())
	{
		this.m_view.getClipboardButton().addLabelledBy(this.m_view.getInvisibleVariableTitleText());
	}
	if (this.m_model.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		let dimVar = this.m_model.getVariable();
		if (dimVar.isUsedInDynamicFilter() && dimVar.getDimension().getAxisType() !== oFF.AxisType.REPOSITORY)
		{
			this.m_view.showDynamicFilterInfoIcon();
		}
	}
	this.updateHead();
	this.m_controllers = oFF.XHashMapByString.create();
	this.m_multiInputControllers = oFF.XHashMapByString.create();
	this.setValueList(this.m_model.getValues());
};
oFF.VdVariableController.prototype.update = function()
{
	this.updateWithOptions(false);
};
oFF.VdVariableController.prototype.updateDisplayedValue = function(value)
{
	this.renderValue(value);
};
oFF.VdVariableController.prototype.updateDisplayedValues = function()
{
	let values = this.m_model.getValues().createListCopy();
	for (let i = 0; i < values.size(); i++)
	{
		this.renderValue(values.get(i));
	}
};
oFF.VdVariableController.prototype.updateHead = function()
{
	let variableTitle = this.m_model.getText();
	if (oFF.XStringUtils.isNullOrEmpty(variableTitle))
	{
		variableTitle = this.m_model.getName();
	}
	else if (this.m_config.isNewSettingsEnabled())
	{
		let techNameLabel = this.m_view.getTechnicalNameLabel();
		techNameLabel.setText(oFF.XStringUtils.concatenate3("[", this.m_model.getName(), "]"));
		techNameLabel.setTooltip(this.m_model.getName());
	}
	let nameLabel = this.m_view.getNameLabel();
	nameLabel.setText(variableTitle);
	if (this.m_config.isGridLayoutEnabled())
	{
		nameLabel.setTooltip(variableTitle);
		this.m_view.getInvisibleVariableTitleText().setText(variableTitle);
	}
	else
	{
		nameLabel.setTooltip(this.m_model.getName());
	}
	nameLabel.setRequired(this.m_model.isMandatory());
	let inputEnabled = this.m_master.isInputEnabled();
	let clearButton = this.m_view.getClearButton();
	if (this.m_config.isGridLayoutEnabled())
	{
		clearButton.setVisible(false);
	}
	else
	{
		clearButton.setVisible(this.m_model.getValues().size() > 1);
		clearButton.setEnabled(inputEnabled);
	}
	let clipboardButton = this.m_view.getClipboardButton();
	if (this.m_context.getDeviceInfo().isMobile())
	{
		clipboardButton.setVisible(false);
		clipboardButton.removeCssClass("ffClipBoardVisible");
	}
	else
	{
		let isHierarchyNode = this.m_model.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NODE_VARIABLE);
		let isClipboardBtnVisible = this.m_model.supportsMultipleValues() && this.m_model.supportsValueHelp() && !isHierarchyNode;
		if (isClipboardBtnVisible)
		{
			clipboardButton.addCssClass("ffClipBoardVisible");
		}
		clipboardButton.setVisible(isClipboardBtnVisible);
		clipboardButton.setEnabled(inputEnabled);
	}
	this.m_view.getMoreButton().setEnabled(inputEnabled);
};
oFF.VdVariableController.prototype.updateMultiInputKey = function(previousOperator, newOperator)
{
	let oldKey = this.getMultiInputValueControllerKey(previousOperator);
	let newKey = this.getMultiInputValueControllerKey(newOperator);
	if (this.m_multiInputControllers.containsKey(oldKey))
	{
		let multiInputValueController = this.m_multiInputControllers.remove(oldKey);
		this.m_multiInputControllers.put(newKey, multiInputValueController);
	}
};
oFF.VdVariableController.prototype.updateOperatorsOnClipboadValues = function(clipboardValues)
{
	let size = clipboardValues.size();
	for (let i = 0; i < size; i++)
	{
		let clipboardValue = clipboardValues.get(i);
		if (clipboardValue.getOperator().isNullOperator())
		{
			continue;
		}
		let currentValue = this.getFromCurrentValues(clipboardValue.getFirstOperand(), clipboardValue.getSecondOperand());
		if (oFF.notNull(currentValue))
		{
			clipboardValue.setOperator(currentValue.getOperator());
		}
		else
		{
			let supportedOperators = this.m_model.getSupportedComparisonOperators();
			if (clipboardValue.isOperandFilled(oFF.VdValue.SECOND) && supportedOperators.contains(oFF.VdComparisonOperator.BETWEEN))
			{
				clipboardValue.setOperator(oFF.VdComparisonOperator.BETWEEN);
			}
			else
			{
				clipboardValue.setOperator(supportedOperators.contains(oFF.VdComparisonOperator.EQUAL) ? oFF.VdComparisonOperator.EQUAL : this.m_model.getDefaultOperator());
			}
		}
	}
};
oFF.VdVariableController.prototype.updateViewForMultiInputOperator = function(operator)
{
	let key = this.getMultiInputValueControllerKey(operator);
	if (this.m_multiInputControllers.containsKey(key))
	{
		let multiInputController = this.m_multiInputControllers.getByKey(key);
		this.m_view.removeValue(multiInputController.getView());
		let shouldBeLastView = this.m_model.getInputValue() !== null && this.m_model.getInputValue().getOperator() === operator;
		if (shouldBeLastView)
		{
			this.m_view.addValue(multiInputController.getView());
		}
		else
		{
			this.m_multiInputControllers.remove(key);
		}
		this.updateWithOptions(true);
	}
};
oFF.VdVariableController.prototype.updateWithOptions = function(isUpdateMultiInputOperatorOnlyOnce)
{
	this.updateHead();
	let values = this.m_model.getValues().createListCopy();
	let processedMultiInputOperators = oFF.XSetOfNameObject.create();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		let operator = value.getOperator();
		if (isUpdateMultiInputOperatorOnlyOnce && this.isSupportedMultiInput(operator))
		{
			if (processedMultiInputOperators.contains(operator))
			{
				continue;
			}
			else
			{
				processedMultiInputOperators.add(operator);
			}
		}
		this.renderValue(value);
	}
	let inputValue = this.m_model.getInputValue();
	if (oFF.notNull(inputValue))
	{
		this.renderValue(inputValue);
	}
};
oFF.VdVariableController.prototype.wrapUpState = function()
{
	let controllers = this.m_controllers.getValuesAsReadOnlyList();
	for (let i = 0; i < controllers.size(); i++)
	{
		if (!controllers.get(i).wrapUpState())
		{
			return false;
		}
	}
	let multiInputControllers = this.m_multiInputControllers.getValuesAsReadOnlyList();
	for (let i = 0; i < multiInputControllers.size(); i++)
	{
		if (!multiInputControllers.get(i).wrapUpState())
		{
			return false;
		}
	}
	return true;
};

oFF.VdVariableModel = function() {};
oFF.VdVariableModel.prototype = new oFF.XObject();
oFF.VdVariableModel.prototype._ff_c = "VdVariableModel";

oFF.VdVariableModel.EMPTY_OPTIONS = null;
oFF.VdVariableModel.createVariableModel = function(variable)
{
	let obj = new oFF.VdVariableModel();
	obj.setupVariableModel(variable);
	return obj;
};
oFF.VdVariableModel.prototype.m_defaultOperator = null;
oFF.VdVariableModel.prototype.m_inputValue = null;
oFF.VdVariableModel.prototype.m_interval = false;
oFF.VdVariableModel.prototype.m_invalidValues = null;
oFF.VdVariableModel.prototype.m_listeners = null;
oFF.VdVariableModel.prototype.m_supportedOperators = null;
oFF.VdVariableModel.prototype.m_values = null;
oFF.VdVariableModel.prototype.m_variable = null;
oFF.VdVariableModel.prototype.addListener = function(listener)
{
	this.m_listeners.add(listener);
};
oFF.VdVariableModel.prototype.addValue = function(value)
{
	this.insertValue(-1, value);
};
oFF.VdVariableModel.prototype.clearValues = function()
{
	this.setValues(null);
};
oFF.VdVariableModel.prototype.createNewValue = function()
{
	return oFF.VdValue.createValue(this.m_defaultOperator, null, null);
};
oFF.VdVariableModel.prototype.determineOperators = function()
{
	this.m_supportedOperators = oFF.XListOfNameObject.create();
	let variableType = this.m_variable.getVariableType();
	if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		this.m_defaultOperator = oFF.VdComparisonOperator.EQUAL;
		return;
	}
	if (!variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return;
	}
	let dimVar = this.m_variable;
	let filterCapability = dimVar.getFilterCapability();
	let including = filterCapability.getSupportedComparisonOperators(oFF.SetSign.INCLUDING);
	let excluding = filterCapability.getSupportedComparisonOperators(oFF.SetSign.EXCLUDING);
	if (oFF.notNull(including))
	{
		for (let i = 0; i < including.size(); i++)
		{
			let operator = including.get(i);
			if (operator.getNumberOfParameters() > 1)
			{
				this.m_interval = true;
			}
			let vdOperator = oFF.VdComparisonOperator.lookup(operator.getName(), false);
			if (oFF.notNull(vdOperator))
			{
				this.m_supportedOperators.add(vdOperator);
			}
		}
	}
	if (oFF.notNull(excluding) && excluding.contains(oFF.ComparisonOperator.IS_NULL))
	{
		this.m_supportedOperators.add(oFF.VdComparisonOperator.IS_NOT_NULL);
	}
	this.m_defaultOperator = this.m_supportedOperators.hasElements() ? this.m_supportedOperators.get(0) : oFF.VdComparisonOperator.UNDEFINED;
};
oFF.VdVariableModel.prototype.formatValues = function(values)
{
	if (!oFF.XCollectionUtils.hasElements(values) || !this.m_variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE) || !this.m_variable.getValueType().isTypeOf(oFF.XValueType.NUMBER))
	{
		return;
	}
	let numberFormatter = oFF.UiNumberFormatterCenter.getCenter();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		let key = value.getFirstOperand().getKey();
		let formatted = numberFormatter.format(key);
		if (oFF.XStringUtils.isNullOrEmpty(formatted))
		{
			continue;
		}
		value.setFirstOperand(oFF.FilterDialogValueFactory.createValue(key, formatted, null));
	}
};
oFF.VdVariableModel.prototype.getCleanedValue = function(original)
{
	if (oFF.isNull(original) || !original.isFilled() && !this.isOperatorSwitchPossible(original))
	{
		return null;
	}
	let value = original.clone();
	let operator = value.getOperator();
	if ((operator === oFF.VdComparisonOperator.BETWEEN && this.m_supportedOperators.contains(oFF.VdComparisonOperator.EQUAL) || operator === oFF.VdComparisonOperator.NOT_BETWEEN && this.m_supportedOperators.contains(oFF.VdComparisonOperator.NOT_EQUAL)) && value.isOperandFilled(oFF.VdValue.FIRST) && !value.isOperandFilled(oFF.VdValue.SECOND))
	{
		value.setOperator(operator === oFF.VdComparisonOperator.BETWEEN ? oFF.VdComparisonOperator.EQUAL : oFF.VdComparisonOperator.NOT_EQUAL);
	}
	return value;
};
oFF.VdVariableModel.prototype.getCleanedValues = function()
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_values.size(); i++)
	{
		oFF.XCollectionUtils.addIfNotNull(result, this.getCleanedValue(this.m_values.get(i)));
	}
	let cleanedValue = this.getCleanedValue(this.m_inputValue);
	if (oFF.notNull(cleanedValue) && this.isNewValueInList(result, cleanedValue))
	{
		result.add(cleanedValue);
	}
	return result;
};
oFF.VdVariableModel.prototype.getDefaultOperator = function()
{
	return this.m_defaultOperator;
};
oFF.VdVariableModel.prototype.getInputValue = function()
{
	return this.m_inputValue;
};
oFF.VdVariableModel.prototype.getInvalidValues = function()
{
	return this.m_invalidValues;
};
oFF.VdVariableModel.prototype.getName = function()
{
	return this.m_variable.getName();
};
oFF.VdVariableModel.prototype.getOptions = function()
{
	if (this.m_variable.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		return this.m_variable.getOptions();
	}
	if (oFF.isNull(oFF.VdVariableModel.EMPTY_OPTIONS))
	{
		oFF.VdVariableModel.EMPTY_OPTIONS = oFF.XListOfNameObject.create();
	}
	return oFF.VdVariableModel.EMPTY_OPTIONS;
};
oFF.VdVariableModel.prototype.getOrder = function()
{
	return this.m_variable.getVariableOrder();
};
oFF.VdVariableModel.prototype.getSupportedComparisonOperators = function()
{
	return this.m_supportedOperators;
};
oFF.VdVariableModel.prototype.getText = function()
{
	return this.m_variable.getText();
};
oFF.VdVariableModel.prototype.getValueType = function()
{
	return this.m_variable.getValueType();
};
oFF.VdVariableModel.prototype.getValues = function()
{
	return this.m_values;
};
oFF.VdVariableModel.prototype.getValuesWithOperator = function(operator)
{
	return oFF.XStream.of(this.m_values).filter((value) => {
		return value.getOperator() === operator;
	}).collect(oFF.XStreamCollector.toList());
};
oFF.VdVariableModel.prototype.getVariable = function()
{
	return this.m_variable;
};
oFF.VdVariableModel.prototype.getVariableType = function()
{
	return this.m_variable.getVariableType();
};
oFF.VdVariableModel.prototype.handleMissingValue = function(value)
{
	if (!value.isFilled() && !this.isOperatorSwitchPossible(value))
	{
		let index = !value.isOperandFilled(0) ? 0 : 1;
		value.setError(index, oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_VALUE_MISSING));
		return true;
	}
	return false;
};
oFF.VdVariableModel.prototype.hasCheckTable = function()
{
	if (this.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		let dimVar = this.m_variable;
		let dimension = dimVar.getDimension();
		if (!dimension.isStructure() && !dimension.isHierarchyActive())
		{
			return dimension.getHasCheckTable();
		}
		return true;
	}
	return false;
};
oFF.VdVariableModel.prototype.insertValue = function(index, value)
{
	if (!this.supportsMultipleValues() && this.m_values.size() === 1)
	{
		return;
	}
	if (index < 0)
	{
		this.m_values.add(value);
	}
	else
	{
		this.m_values.insert(index, value);
	}
	for (let i = this.m_listeners.size() - 1; i >= 0; i--)
	{
		this.m_listeners.get(i).onValueAdded(value);
	}
};
oFF.VdVariableModel.prototype.isInterval = function()
{
	return this.m_interval;
};
oFF.VdVariableModel.prototype.isMandatory = function()
{
	return this.m_variable.isMandatory();
};
oFF.VdVariableModel.prototype.isNewValue = function(value)
{
	return this.isNewValueInList(this.getValues(), value);
};
oFF.VdVariableModel.prototype.isNewValueInList = function(values, value)
{
	let isValueFilled = value.isFilled();
	let size = values.size();
	for (let i = 0; i < size; i++)
	{
		let otherValue = values.get(i);
		if (!oFF.XString.isEqual(value.getId(), otherValue.getId()))
		{
			if (value.getOperator() === oFF.VdComparisonOperator.IS_NULL && otherValue.getOperator() === oFF.VdComparisonOperator.IS_NOT_NULL || value.getOperator() === oFF.VdComparisonOperator.IS_NOT_NULL && otherValue.getOperator() === oFF.VdComparisonOperator.IS_NULL)
			{
				continue;
			}
			if (isValueFilled && value.operandsEqualTo(otherValue) || !isValueFilled && value.isEqualTo(otherValue))
			{
				return false;
			}
		}
	}
	return true;
};
oFF.VdVariableModel.prototype.isOperatorInUse = function(operator)
{
	let valuesToCheck = oFF.XList.createWithList(this.m_values);
	if (oFF.notNull(this.m_inputValue))
	{
		valuesToCheck.add(this.m_inputValue);
	}
	return oFF.XStream.of(valuesToCheck).find((value) => {
		return value.getOperator() === operator;
	}).isPresent();
};
oFF.VdVariableModel.prototype.isOperatorSwitchPossible = function(value)
{
	let operator = value.getOperator();
	return (operator === oFF.VdComparisonOperator.BETWEEN && this.m_supportedOperators.contains(oFF.VdComparisonOperator.EQUAL) || operator === oFF.VdComparisonOperator.NOT_BETWEEN && this.m_supportedOperators.contains(oFF.VdComparisonOperator.NOT_EQUAL)) && value.isOperandFilled(oFF.VdValue.FIRST) && !value.isOperandFilled(oFF.VdValue.SECOND);
};
oFF.VdVariableModel.prototype.releaseObject = function()
{
	this.m_variable = null;
	this.m_values = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_values);
	this.m_inputValue = oFF.XObjectExt.release(this.m_inputValue);
	this.m_invalidValues = oFF.XObjectExt.release(this.m_invalidValues);
	this.m_listeners = oFF.XObjectExt.release(this.m_listeners);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVariableModel.prototype.removeListener = function(listener)
{
	this.m_listeners.removeElement(listener);
};
oFF.VdVariableModel.prototype.removeValue = function(value)
{
	if (value === this.m_inputValue)
	{
		this.m_inputValue.clear();
		return;
	}
	for (let i = this.m_values.size() - 1; i >= 0; i--)
	{
		if (this.m_values.get(i) === value)
		{
			this.m_values.removeAt(i);
			for (let k = this.m_listeners.size() - 1; k >= 0; k--)
			{
				this.m_listeners.get(k).onValueRemoved(value, i);
			}
			oFF.XObjectExt.release(value);
			return;
		}
	}
};
oFF.VdVariableModel.prototype.removeValuesWithOperator = function(operator)
{
	let values = oFF.XList.create();
	values.addAll(this.m_values);
	oFF.XStream.of(values).filter((currentValue) => {
		return currentValue.getOperator() === operator;
	}).forEach(this.removeValue.bind(this));
};
oFF.VdVariableModel.prototype.setDefaultOption = function()
{
	if (!this.isMandatory() || !this.m_values.isEmpty())
	{
		return;
	}
	if (this.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		let options = this.getOptions();
		if (oFF.XCollectionUtils.hasElements(options))
		{
			let defaultValue = this.createNewValue();
			defaultValue.setFirstOperand(oFF.FilterDialogValueFactory.createValue(options.get(0).getName(), null, null));
			this.m_values.add(defaultValue);
		}
	}
	else if (this.getValueType().isBoolean())
	{
		let defaultBoolValue = this.createNewValue();
		defaultBoolValue.setFirstOperand(oFF.FilterDialogValueFactory.createValue(oFF.XBoolean.convertToString(true), null, null));
		this.m_values.add(defaultBoolValue);
	}
};
oFF.VdVariableModel.prototype.setInputValue = function(inputValue)
{
	this.m_inputValue = inputValue;
};
oFF.VdVariableModel.prototype.setMultiInputValues = function(values, operator)
{
	let otherValues = oFF.XList.create();
	for (let i = 0; i < this.m_values.size(); i++)
	{
		let currentValue = this.m_values.get(i);
		if (currentValue.getOperator() !== operator && !(currentValue.getOperator() === oFF.VdComparisonOperator.IS_NULL && operator === oFF.VdComparisonOperator.EQUAL) && !(currentValue.getOperator() === oFF.VdComparisonOperator.IS_NOT_NULL && operator === oFF.VdComparisonOperator.NOT_EQUAL))
		{
			otherValues.add(currentValue);
		}
	}
	this.m_values.clear();
	this.formatValues(values);
	let newValues = oFF.XList.create();
	newValues.addAll(otherValues);
	for (let j = 0; j < values.size(); j++)
	{
		let value = values.get(j);
		if (this.isNewValueInList(otherValues, value))
		{
			newValues.add(value);
		}
	}
	this.setValuesInternal(newValues);
	this.setDefaultOption();
};
oFF.VdVariableModel.prototype.setValues = function(values)
{
	this.m_values.clear();
	this.formatValues(values);
	this.setValuesInternal(values);
	this.setDefaultOption();
};
oFF.VdVariableModel.prototype.setValuesInternal = function(values)
{
	this.m_inputValue = null;
	if (oFF.isNull(values))
	{
		this.m_values = oFF.XList.create();
	}
	else if (!this.supportsMultipleValues() && values.size() > 1)
	{
		this.m_values = oFF.XCollectionUtils.singletonList(values.get(0));
	}
	else
	{
		this.m_values = values;
	}
	for (let i = this.m_listeners.size() - 1; i >= 0; i--)
	{
		this.m_listeners.get(i).onValuesSet();
	}
};
oFF.VdVariableModel.prototype.setupVariableModel = function(variable)
{
	this.m_variable = variable;
	this.m_values = oFF.XList.create();
	this.m_listeners = oFF.XList.create();
	this.determineOperators();
};
oFF.VdVariableModel.prototype.supportsMultipleValues = function()
{
	let varType = this.getVariableType();
	return this.m_variable.supportsMultipleValues() && (varType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) || varType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE));
};
oFF.VdVariableModel.prototype.supportsValueHelp = function()
{
	if (this.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return this.m_variable.supportsValueHelp();
	}
	return false;
};
oFF.VdVariableModel.prototype.toString = function()
{
	if (oFF.isNull(this.m_variable))
	{
		return "";
	}
	let buffer = oFF.XStringBuffer.create();
	buffer.append(this.m_variable.getName()).append("=[");
	for (let i = 0; i < this.m_values.size(); i++)
	{
		buffer.append("{");
		let value = this.m_values.get(i);
		buffer.append(value.toString());
		buffer.append("}");
		if (i + 1 < this.m_values.size())
		{
			buffer.append(", ");
		}
	}
	buffer.append("]");
	return buffer.toString();
};
oFF.VdVariableModel.prototype.validateSimpleType = function(value, index)
{
	this.validateSimpleTypeInput(value, value.getOperand(index).getDisplayKey(), index);
};
oFF.VdVariableModel.prototype.validateSimpleTypeInput = function(value, inputValue, inputIndex)
{
	if (this.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		let localization = oFF.OuVariableDialogI18nLegacy.getProvider();
		let numberFormatter = oFF.UiNumberFormatterCenter.getCenter();
		if (this.m_variable.isMandatory() && !this.m_variable.supportsMultipleValues() && oFF.XStringUtils.isNullOrEmpty(inputValue))
		{
			value.setError(inputIndex, localization.getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_MANDATORY_VAR, this.m_variable.getText()));
			return;
		}
		if (oFF.XStringUtils.isNullOrEmpty(inputValue))
		{
			return;
		}
		let valueType = this.getValueType();
		if (valueType.isTypeOf(oFF.XValueType.NUMBER))
		{
			let formattedValue = numberFormatter.format(numberFormatter.parseFormattedNumber(inputValue));
			if (oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				if (!oFF.XString.isEqual(formattedValue, inputValue))
				{
					value.setWarning(inputIndex, localization.getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_WARNING_MSG_NUMBER_FORMAT, formattedValue));
				}
			}
			else
			{
				value.setError(inputIndex, localization.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_NUMBER_VALIDATION));
			}
		}
	}
};
oFF.VdVariableModel.prototype.validateValues = function()
{
	let valid = true;
	let empty = true;
	let variableType = this.m_variable.getVariableType();
	let localization = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_invalidValues = oFF.XList.create();
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) || variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		if (oFF.notNull(this.m_inputValue) && !this.m_inputValue.isEmpty() && this.handleMissingValue(this.m_inputValue))
		{
			valid = false;
			this.m_invalidValues.add(this.m_inputValue);
		}
		for (let i = 0; i < this.m_values.size(); i++)
		{
			let value = this.m_values.get(i);
			if (value.isEmpty())
			{
				continue;
			}
			if (value.hasErrors())
			{
				valid = false;
				this.m_invalidValues.add(value);
			}
			else if (this.handleMissingValue(value))
			{
				valid = false;
				this.m_invalidValues.add(value);
			}
			else
			{
				empty = false;
			}
		}
	}
	else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		for (let j = 0; j < this.m_values.size(); j++)
		{
			if (this.m_values.get(j).hasErrors())
			{
				valid = false;
				this.m_invalidValues.add(this.m_values.get(j));
			}
			else
			{
				empty = false;
			}
		}
	}
	if (oFF.notNull(this.m_inputValue) && this.m_inputValue.hasErrors())
	{
		valid = false;
		this.m_invalidValues.add(this.m_inputValue);
	}
	if (valid && this.m_variable.isMandatory() && empty)
	{
		valid = false;
		let target = oFF.notNull(this.m_inputValue) || this.m_values.isEmpty() ? this.m_inputValue : this.m_values.get(this.m_values.size() - 1);
		if (oFF.notNull(target))
		{
			let cleanedValue = this.getCleanedValue(target);
			if (oFF.notNull(cleanedValue) && cleanedValue.isFilled())
			{
				empty = false;
				valid = true;
			}
			else
			{
				this.m_invalidValues.add(target);
				target.setError(-1, localization.getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_MANDATORY_VAR, this.m_variable.getText()));
			}
		}
	}
	return valid;
};

oFF.VdVhMobileTester = function() {};
oFF.VdVhMobileTester.prototype = new oFF.XObject();
oFF.VdVhMobileTester.prototype._ff_c = "VdVhMobileTester";

oFF.VdVhMobileTester.testCalendarRange = function(application)
{
	let tmpApp = application;
	if (oFF.isNull(tmpApp))
	{
		tmpApp = oFF.ApplicationFactory.createDefaultApplication();
	}
	let obj = new oFF.VdVhMobileTester();
	obj.testRangeCalendarView(tmpApp);
	return obj;
};
oFF.VdVhMobileTester.testCalendarSingle = function(application)
{
	let tmpApp = application;
	if (oFF.isNull(tmpApp))
	{
		tmpApp = oFF.ApplicationFactory.createDefaultApplication();
	}
	let obj = new oFF.VdVhMobileTester();
	obj.testSingleCalendarView(tmpApp);
	return obj;
};
oFF.VdVhMobileTester.testMemberSelector = function(application, variable)
{
	let tmpApp = application;
	if (oFF.isNull(tmpApp))
	{
		let session = oFF.DefaultSession.createWithVersion(oFF.XVersion.MAX);
		session.getEnvironment().put("ff_sdk", "${ff_network_dir}/");
		let url = oFF.XUri.createFromFilePath(session, "${ff_sdk}/production/systems/SystemLandscapeAllWithPwds.json", oFF.PathFormat.AUTO_DETECT, oFF.VarResolveMode.DOLLAR, null);
		let systemLandscapePath = url.getUrl();
		let extResult = oFF.ApplicationFactory.createApplicationWithVersionAndLandscape(session, oFF.XVersion.MAX, systemLandscapePath);
		tmpApp = extResult.getData();
	}
	let tmpVariable = variable;
	if (oFF.isNull(tmpVariable))
	{
		let serviceConfig = oFF.QueryServiceConfig.createWithDataSourceName(tmpApp, "KIW", "query:[0BOC_TEST_VARIABLE_TYPES_1]");
		let syncAction = serviceConfig.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
		let queryManager = syncAction.getData();
		tmpVariable = queryManager.getVariables().get(1);
	}
	let obj = new oFF.VdVhMobileTester();
	obj.testMemberSelectorView(tmpApp, tmpVariable);
	return obj;
};
oFF.VdVhMobileTester.testOperatorList = function(application)
{
	let tmpApp = application;
	if (oFF.isNull(tmpApp))
	{
		tmpApp = oFF.ApplicationFactory.createDefaultApplication();
	}
	let obj = new oFF.VdVhMobileTester();
	obj.testOperatorListView(tmpApp);
	return obj;
};
oFF.VdVhMobileTester.testOperatorWorkflow = function(application, variable)
{
	let tmpApp = application;
	if (oFF.isNull(tmpApp))
	{
		let session = oFF.DefaultSession.createWithVersion(oFF.XVersion.MAX);
		session.getEnvironment().put("ff_sdk", "${ff_network_dir}/");
		let url = oFF.XUri.createFromFilePath(session, "${ff_sdk}/production/systems/SystemLandscapeAllWithPwds.json", oFF.PathFormat.AUTO_DETECT, oFF.VarResolveMode.DOLLAR, null);
		let systemLandscapePath = url.getUrl();
		let extResult = oFF.ApplicationFactory.createApplicationWithVersionAndLandscape(session, oFF.XVersion.MAX, systemLandscapePath);
		tmpApp = extResult.getData();
	}
	let tmpVariable = variable;
	if (oFF.isNull(tmpVariable))
	{
		let serviceConfig = oFF.QueryServiceConfig.createWithDataSourceName(tmpApp, "KIW", "query:[0BOC_TEST_VARIABLE_TYPES_1]");
		let syncAction = serviceConfig.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
		let queryManager = syncAction.getData();
		tmpVariable = queryManager.getVariables().get(1);
	}
	let obj = new oFF.VdVhMobileTester();
	obj.prepareOperatorWorkflow(tmpApp, tmpVariable);
	return obj;
};
oFF.VdVhMobileTester.testSimpleList = function(application)
{
	let tmpApp = application;
	if (oFF.isNull(tmpApp))
	{
		tmpApp = oFF.ApplicationFactory.createDefaultApplication();
	}
	let obj = new oFF.VdVhMobileTester();
	obj.testSimpleListView(tmpApp);
	return obj;
};
oFF.VdVhMobileTester.prototype.m_dialog = null;
oFF.VdVhMobileTester.prototype.m_genesis = null;
oFF.VdVhMobileTester.prototype.onPress = function(event)
{
	let controlName = event.getControl().getName();
	if (oFF.XString.isEqual(controlName, "vdVhMobileDialogCloseBtn"))
	{
		this.m_dialog.close();
	}
	if (oFF.XString.isEqual(controlName, "vdVhMobileDialogOkBtn"))
	{
		this.m_dialog.close();
		let tmpCalView = event.getControl().getParent().getCustomObject();
		let startDate = oFF.XStringUtils.concatenate2("startDate: ", tmpCalView.getStartDate());
		let endDate = oFF.XStringUtils.concatenate2("endDate: ", tmpCalView.getEndDate());
		let selValuesStr = oFF.XStringUtils.concatenate3(startDate, " ", endDate);
		this.m_genesis.showSuccessToast(selValuesStr);
	}
	if (oFF.XString.isEqual(controlName, "vdVhMobileDialogMemberSelectorOkBtn"))
	{
		this.m_dialog.close();
		let tmpMemberSelectorView = event.getControl().getParent().getCustomObject();
		tmpMemberSelectorView.triggerSelection();
	}
	if (oFF.XString.isEqual(controlName, "vdVhMobileDialogWorkflowOkBtn"))
	{
		this.m_dialog.close();
		let tmpWorkflowView = this.m_dialog.getCustomObject();
		let tmpStr = "Operator workflow finished! Operator: ";
		if (oFF.XStringUtils.isNotNullAndNotEmpty(tmpWorkflowView.getSelectedOperatorItem().getName()))
		{
			tmpStr = oFF.XStringUtils.concatenate3(tmpStr, tmpWorkflowView.getSelectedOperatorItem().getName(), ",");
		}
		if (tmpWorkflowView.getSelectedFromItem() !== null)
		{
			tmpStr = oFF.XStringUtils.concatenate3(tmpStr, " Item1:", tmpWorkflowView.getSelectedFromItem().getText());
		}
		if (tmpWorkflowView.getSelectedToItem() !== null)
		{
			tmpStr = oFF.XStringUtils.concatenate3(tmpStr, ", Item2:", tmpWorkflowView.getSelectedToItem().getText());
		}
		this.m_genesis.showSuccessToast(tmpStr);
	}
};
oFF.VdVhMobileTester.prototype.onVhMobileOperatorWorkflowFinished = function(operatorItem, itemFrom, itemTo)
{
	if (!this.m_dialog.getDialogButtonByName("vdVhMobileDialogWorkflowOkBtn").isEnabled())
	{
		this.m_dialog.getDialogButtonByName("vdVhMobileDialogWorkflowOkBtn").setEnabled(true);
	}
};
oFF.VdVhMobileTester.prototype.onVhMobileOperatorWorkflowNavigate = function(currentPageIndex, pageCount)
{
	this.m_dialog.getDialogButtonByName("vdVhMobileDialogWorkflowOkBtn").setVisible(currentPageIndex === pageCount - 1);
};
oFF.VdVhMobileTester.prototype.onVhMobileValuesSelected = function(view)
{
	let selValuesStr = "result missing";
	if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileCalendar.VIEW_NAME))
	{
		this.m_dialog.close();
		let tmpCalView = view;
		selValuesStr = tmpCalView.getStartDate();
	}
	if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileRangeCalendar.VIEW_NAME))
	{
		let tmpRangeCalView = view;
		selValuesStr = oFF.XStringUtils.concatenate4("startDate:", tmpRangeCalView.getStartDate(), " endDate:", tmpRangeCalView.getEndDate());
	}
	if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileList.VIEW_NAME))
	{
		this.m_dialog.close();
		let tmpListView = view;
		selValuesStr = tmpListView.getSelectedItem().getName();
	}
	if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileMemberSelector.VIEW_NAME))
	{
		this.m_dialog.close();
		let tmpMemberSelView = view;
		selValuesStr = tmpMemberSelView.getSelectedItem().getText();
	}
	this.m_genesis.showSuccessToast(selValuesStr);
};
oFF.VdVhMobileTester.prototype.prepareOperatorWorkflow = function(application, variable)
{
	let tmpUiMgr = application.getUiManager();
	let tmpContext = oFF.OlapUiContext.createContext(tmpUiMgr, oFF.OlapUiDisplayFactory.createFactoryForDialog(tmpUiMgr));
	let newVarModel = oFF.VdVariableModel.createVariableModel(variable);
	let operatorWorkflow = oFF.VdVhMobileOperatorWorkflow.createWithVariableModel(tmpContext, newVarModel, null, this);
	this.setupExt(application.getUiManager(), null, variable.getText());
	this.m_dialog.setName("vdVhMobileDialogOperatorList");
	this.m_dialog.setCustomObject(operatorWorkflow);
	this.m_dialog.setPadding(oFF.UiCssBoxEdges.create("0px"));
	this.m_dialog.setContent(operatorWorkflow.getWorkflowView());
	let okButton = this.m_dialog.addNewDialogButton();
	okButton.setName("vdVhMobileDialogWorkflowOkBtn");
	okButton.setText("Ok");
	okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	okButton.setEnabled(false);
	okButton.setVisible(false);
	okButton.registerOnPress(this);
	let closeButton = this.m_dialog.addNewDialogButton();
	closeButton.setName("vdVhMobileDialogCloseBtn");
	closeButton.setText("Cancel");
	closeButton.registerOnPress(this);
	operatorWorkflow.start();
	this.m_dialog.open();
};
oFF.VdVhMobileTester.prototype.releaseObject = function()
{
	this.m_dialog = oFF.XObjectExt.release(this.m_dialog);
	this.m_genesis = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileTester.prototype.setupExt = function(uiMgr, mobileview, title)
{
	this.m_genesis = uiMgr.getFreeGenesis();
	this.m_dialog = this.m_genesis.newControl(oFF.UiType.DIALOG);
	this.m_dialog.useMaxSpace();
	this.m_dialog.setTitle(title);
	if (oFF.notNull(mobileview))
	{
		this.m_dialog.setContent(mobileview.getPage());
	}
};
oFF.VdVhMobileTester.prototype.testMemberSelectorView = function(application, variable)
{
	let tmpUiMgr = application.getUiManager();
	let tmpContext = oFF.OlapUiContext.createContext(tmpUiMgr, oFF.OlapUiDisplayFactory.createFactoryForDialog(tmpUiMgr));
	let tmpMemberSelector = oFF.VdVhMobileMemberSelector.create(tmpContext, variable, null, null, this);
	this.setupExt(application.getUiManager(), tmpMemberSelector, "Select Member");
	this.m_dialog.setName("vdVhMobileDialogMemberSelector");
	this.m_dialog.setCustomObject(tmpMemberSelector);
	this.m_dialog.setPadding(oFF.UiCssBoxEdges.create("0px"));
	let closeButton = this.m_dialog.addNewDialogButton();
	closeButton.setName("vdVhMobileDialogCloseBtn");
	closeButton.setText("Cancel");
	closeButton.registerOnPress(this);
	this.m_dialog.open();
};
oFF.VdVhMobileTester.prototype.testOperatorListView = function(application)
{
	let tmpUiMgr = application.getUiManager();
	let testOperators = oFF.XList.create();
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.IS_NULL.getName(), oFF.VdComparisonOperator.IS_NULL.getLongText(), oFF.VdComparisonOperator.IS_NULL));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.IS_NOT_NULL.getName(), oFF.VdComparisonOperator.IS_NOT_NULL.getLongText(), oFF.VdComparisonOperator.IS_NOT_NULL));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.EQUAL.getName(), oFF.VdComparisonOperator.EQUAL.getLongText(), oFF.VdComparisonOperator.EQUAL));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.NOT_EQUAL.getName(), oFF.VdComparisonOperator.NOT_EQUAL.getLongText(), oFF.VdComparisonOperator.NOT_EQUAL));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.GREATER_THAN.getName(), oFF.VdComparisonOperator.GREATER_THAN.getLongText(), oFF.VdComparisonOperator.GREATER_THAN));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.GREATER_EQUAL.getName(), oFF.VdComparisonOperator.GREATER_EQUAL.getLongText(), oFF.VdComparisonOperator.GREATER_EQUAL));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.LESS_THAN.getName(), oFF.VdComparisonOperator.LESS_THAN.getLongText(), oFF.VdComparisonOperator.LESS_THAN));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.LESS_EQUAL.getName(), oFF.VdComparisonOperator.LESS_EQUAL.getLongText(), oFF.VdComparisonOperator.LESS_EQUAL));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.BETWEEN.getName(), oFF.VdComparisonOperator.BETWEEN.getLongText(), oFF.VdComparisonOperator.BETWEEN));
	testOperators.add(oFF.VdVhMobileListItem.create(oFF.VdComparisonOperator.NOT_BETWEEN.getName(), oFF.VdComparisonOperator.NOT_BETWEEN.getLongText(), oFF.VdComparisonOperator.NOT_BETWEEN));
	let tmpList = oFF.VdVhMobileList.create(tmpUiMgr, testOperators, oFF.VdComparisonOperator.EQUAL.getName(), this);
	this.setupExt(application.getUiManager(), tmpList, "Select Operator of Type");
	this.m_dialog.setName("vdVhMobileDialogOperatorList");
	this.m_dialog.setCustomObject(tmpList);
	this.m_dialog.setPadding(oFF.UiCssBoxEdges.create("0px"));
	let closeButton = this.m_dialog.addNewDialogButton();
	closeButton.setName("vdVhMobileDialogCloseBtn");
	closeButton.setText("Cancel");
	closeButton.registerOnPress(this);
	this.m_dialog.open();
};
oFF.VdVhMobileTester.prototype.testRangeCalendarView = function(application)
{
	let tmpRangeCal = oFF.VdVhMobileRangeCalendar.create(application.getUiManager(), "yyyy-MM-dd", "2016-03-11", "2016-03-15", this);
	tmpRangeCal.setIsMandatory(true);
	this.setupExt(application.getUiManager(), tmpRangeCal, "Please select a date range");
	this.m_dialog.setName("vdVhMobileDialogRangeDate");
	this.m_dialog.setCustomObject(tmpRangeCal);
	let okButton = this.m_dialog.addNewDialogButton();
	okButton.setName("vdVhMobileDialogOkBtn");
	okButton.setText("Ok");
	okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	okButton.registerOnPress(this);
	let closeButton = this.m_dialog.addNewDialogButton();
	closeButton.setName("vdVhMobileDialogCloseBtn");
	closeButton.setText("Cancel");
	closeButton.registerOnPress(this);
	this.m_dialog.open();
};
oFF.VdVhMobileTester.prototype.testSimpleListView = function(application)
{
	let tmpUiMgr = application.getUiManager();
	let testItems = oFF.XList.create();
	testItems.add(oFF.VdVhMobileListItem.create("one_time", "1x", null));
	testItems.add(oFF.VdVhMobileListItem.create("two_times", "2x", null));
	testItems.add(oFF.VdVhMobileListItem.create("x_times", "x", null));
	let tmpList = oFF.VdVhMobileList.create(tmpUiMgr, testItems, null, this);
	this.setupExt(application.getUiManager(), tmpList, "Select for Input Multiplier");
	this.m_dialog.setName("vdVhMobileDialogSimpleList");
	this.m_dialog.setCustomObject(tmpList);
	this.m_dialog.setPadding(oFF.UiCssBoxEdges.create("0px"));
	let closeButton = this.m_dialog.addNewDialogButton();
	closeButton.setName("vdVhMobileDialogCloseBtn");
	closeButton.setText("Cancel");
	closeButton.registerOnPress(this);
	this.m_dialog.open();
};
oFF.VdVhMobileTester.prototype.testSingleCalendarView = function(application)
{
	let tmpCal = oFF.VdVhMobileCalendar.create(application.getUiManager(), "yyyy-MM-dd", "2016-03-11", this);
	tmpCal.setIsMandatory(false);
	this.setupExt(application.getUiManager(), tmpCal, "Please select a date");
	this.m_dialog.setName("VdVhMobileDialogSingleDate");
	this.m_dialog.setCustomObject(tmpCal);
	let closeButton = this.m_dialog.addNewDialogButton();
	closeButton.setName("vdVhMobileDialogCloseBtn");
	closeButton.setText("Cancel");
	closeButton.registerOnPress(this);
	this.m_dialog.open();
};

oFF.VdVhMobileController = function() {};
oFF.VdVhMobileController.prototype = new oFF.XObject();
oFF.VdVhMobileController.prototype._ff_c = "VdVhMobileController";

oFF.VdVhMobileController.VD_MOBILE_VH_ISO_DATE_FORMAT = "yyyy-MM-dd";
oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_CALENDAR = 1;
oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_NOT_SUPPORTED = 0;
oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_OPERATOR_WORKFLOW = 5;
oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_OPTION_LIST = 3;
oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_RANGE_CALENDAR = 2;
oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_SINGLE_DIMENSION_MEMBER = 4;
oFF.VdVhMobileController.createForVariableModel = function(variableModel, vdVariableForm, listener, vdConfiguration)
{
	let obj = new oFF.VdVhMobileController();
	obj.setupController(variableModel, vdVariableForm, listener, vdConfiguration);
	return obj;
};
oFF.VdVhMobileController.supportsMobileValueHelp = function(variableModel)
{
	if (variableModel.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		return true;
	}
	if (oFF.VdVariableForm.isDatePickerSupported(variableModel.getVariable()))
	{
		if (variableModel.supportsMultipleValues() && variableModel.isInterval())
		{
			return false;
		}
		return true;
	}
	if (variableModel.supportsValueHelp())
	{
		if (variableModel.supportsMultipleValues() && variableModel.isInterval())
		{
			return false;
		}
		return true;
	}
	return false;
};
oFF.VdVhMobileController.prototype.m_closeListener = null;
oFF.VdVhMobileController.prototype.m_containerDialog = null;
oFF.VdVhMobileController.prototype.m_uiMgr = null;
oFF.VdVhMobileController.prototype.m_valueHelpType = 0;
oFF.VdVhMobileController.prototype.m_variableModel = null;
oFF.VdVhMobileController.prototype.m_vdConfig = null;
oFF.VdVhMobileController.prototype.m_vdVariableForm = null;
oFF.VdVhMobileController.prototype.cancelSubmit = function()
{
	this.m_containerDialog.close();
	if (oFF.notNull(this.m_closeListener))
	{
		this.m_closeListener.onFilterDialogCancel();
	}
	else
	{
		this.m_vdVariableForm.cancelReinit();
	}
};
oFF.VdVhMobileController.prototype.createCalendarValueHelp = function()
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let selectedDate = null;
	if (this.m_variableModel.getValues().size() > 0)
	{
		selectedDate = this.m_variableModel.getValues().get(0).getFirstOperand().getKey();
		selectedDate = this.formatDateToIsoFormat(selectedDate);
	}
	let vhMobileCalendar = oFF.VdVhMobileCalendar.create(this.m_uiMgr, oFF.VdVhMobileController.VD_MOBILE_VH_ISO_DATE_FORMAT, selectedDate, this);
	vhMobileCalendar.setIsMandatory(this.m_variableModel.isMandatory());
	this.m_containerDialog.setName("VdVhMobileDialogSingleDate");
	this.m_containerDialog.setTitle(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_DATE_VIEW_SELECT_DATE));
	this.m_containerDialog.setContent(vhMobileCalendar.getPage());
	this.m_containerDialog.setCustomObject(vhMobileCalendar);
	if (!this.m_variableModel.isMandatory())
	{
		let okSingleMemberButton = this.m_containerDialog.addNewDialogButton();
		okSingleMemberButton.setName("VdVhMobileSingleCalendarDialogOkBtn");
		okSingleMemberButton.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_OK));
		okSingleMemberButton.setButtonType(oFF.UiButtonType.PRIMARY);
		okSingleMemberButton.registerOnPress(this);
	}
};
oFF.VdVhMobileController.prototype.createOperatorWorkflowValueHelp = function()
{
	let vhMobileOperatorWorkflow = oFF.VdVhMobileOperatorWorkflow.createWithVariableModel(this.m_vdVariableForm.getContext(), this.m_variableModel, this.m_vdConfig, this);
	this.m_containerDialog.setName("VdVhMobileDialogOperatorWorkflow");
	this.m_containerDialog.setTitle(this.m_variableModel.getVariable().getText());
	this.m_containerDialog.setContent(vhMobileOperatorWorkflow.getWorkflowView());
	this.m_containerDialog.setCustomObject(vhMobileOperatorWorkflow);
	let okOperatorButton = this.m_containerDialog.addNewDialogButton();
	okOperatorButton.setName("VdVhMobileDialogWorkflowOkBtn");
	okOperatorButton.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_OK));
	okOperatorButton.setButtonType(oFF.UiButtonType.PRIMARY);
	okOperatorButton.setEnabled(false);
	okOperatorButton.setVisible(false);
	okOperatorButton.registerOnPress(this);
	vhMobileOperatorWorkflow.start();
};
oFF.VdVhMobileController.prototype.createOptionListValueHelp = function()
{
	let optionsList = oFF.XList.create();
	let selectedOptionName = null;
	if (!this.m_variableModel.isMandatory())
	{
		optionsList.add(oFF.VdVhMobileListItem.create(oFF.VdConstants.EMPTY_OPTION, "", null));
	}
	if (this.m_variableModel.getOptions().size() > 0)
	{
		oFF.XCollectionUtils.forEach(this.m_variableModel.getOptions(), (nameTextObj) => {
			let newItem = oFF.VdVhMobileListItem.create(nameTextObj.getName(), nameTextObj.getText(), null);
			optionsList.add(newItem);
		});
	}
	if (this.m_variableModel.getValues() !== null && this.m_variableModel.getValues().size() > 0)
	{
		selectedOptionName = this.m_variableModel.getValues().get(0).getFirstOperand().getKey();
	}
	else if (optionsList.size() > 0)
	{
		selectedOptionName = optionsList.get(0).getName();
	}
	let vhMobileList = oFF.VdVhMobileList.create(this.m_uiMgr, optionsList, selectedOptionName, this);
	this.m_containerDialog.setName("VdVhMobileDialogSimpleList");
	this.m_containerDialog.setTitle(oFF.OuVariableDialogI18nLegacy.getProvider().getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_LIST_VIEW_SELECT, this.m_variableModel.getVariable().getText()));
	this.m_containerDialog.setContent(vhMobileList.getPage());
	this.m_containerDialog.setCustomObject(vhMobileList);
};
oFF.VdVhMobileController.prototype.createRangeCalendarValueHelp = function()
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let startDate = null;
	let endDate = null;
	if (this.m_variableModel.getValues().size() > 0)
	{
		startDate = this.m_variableModel.getValues().get(0).getFirstOperand().getKey();
		endDate = this.m_variableModel.getValues().get(0).getSecondOperand().getKey();
		startDate = this.formatDateToIsoFormat(startDate);
		endDate = this.formatDateToIsoFormat(endDate);
	}
	let vhMobileRangeCalendar = oFF.VdVhMobileRangeCalendar.create(this.m_uiMgr, oFF.VdVhMobileController.VD_MOBILE_VH_ISO_DATE_FORMAT, startDate, endDate, this);
	vhMobileRangeCalendar.setIsMandatory(this.m_variableModel.isMandatory());
	this.m_containerDialog.setName("VdVhMobileDialogRangeDate");
	this.m_containerDialog.setTitle(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_RANGE_DATE_VIEW_SELECT_DATE_RANGE));
	this.m_containerDialog.setContent(vhMobileRangeCalendar.getPage());
	this.m_containerDialog.setCustomObject(vhMobileRangeCalendar);
	let okButton = this.m_containerDialog.addNewDialogButton();
	okButton.setName("VdVhMobileRangeCalendarDialogOkBtn");
	okButton.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_OK));
	okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	okButton.registerOnPress(this);
};
oFF.VdVhMobileController.prototype.createSingleDimensionMemberValueHelp = function()
{
	let selectedItem = null;
	if (this.m_variableModel.getValues().size() > 0)
	{
		let selectedValue = this.m_variableModel.getValues().get(0);
		selectedItem = selectedValue.getFirstOperand();
	}
	let vhMobileMemberSelector = oFF.VdVhMobileMemberSelector.create(this.m_vdVariableForm.getContext(), this.m_variableModel.getVariable(), this.m_vdConfig, selectedItem, this);
	this.m_containerDialog.setName("VdVhMobileDialogSingleDimensionMember");
	this.m_containerDialog.setTitle(this.m_variableModel.getVariable().getText());
	this.m_containerDialog.setContent(vhMobileMemberSelector.getPage());
	this.m_containerDialog.setCustomObject(vhMobileMemberSelector);
	if (!this.m_variableModel.isMandatory())
	{
		let okSingleMemberButton = this.m_containerDialog.addNewDialogButton();
		okSingleMemberButton.setName("VdVhMobileDialogSingleDimensionMemberOkBtn");
		okSingleMemberButton.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_OK));
		okSingleMemberButton.setButtonType(oFF.UiButtonType.PRIMARY);
		okSingleMemberButton.registerOnPress(this);
	}
};
oFF.VdVhMobileController.prototype.formatDateToIsoFormat = function(dateStr)
{
	let tmpDate = oFF.XDate.createDateSafe(dateStr);
	if (oFF.notNull(tmpDate))
	{
		return tmpDate.toIsoFormat();
	}
	return dateStr;
};
oFF.VdVhMobileController.prototype.getValueHelpType = function()
{
	if (!this.m_variableModel.supportsMultipleValues())
	{
		if (oFF.VdVariableForm.isDatePickerSupported(this.m_variableModel.getVariable()) && (this.m_vdConfig.useDatePicker() || this.m_variableModel.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE)))
		{
			if (this.m_variableModel.isInterval())
			{
				return oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_RANGE_CALENDAR;
			}
			return oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_CALENDAR;
		}
		if (this.m_variableModel.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			if (this.m_variableModel.isInterval())
			{
				return oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_OPERATOR_WORKFLOW;
			}
			return oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_SINGLE_DIMENSION_MEMBER;
		}
	}
	if (this.m_variableModel.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		return oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_OPTION_LIST;
	}
	return oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_NOT_SUPPORTED;
};
oFF.VdVhMobileController.prototype.handleListSelect = function(vhListView)
{
	let selectedItem = vhListView.getSelectedItem();
	let tmpList = null;
	if (oFF.notNull(selectedItem))
	{
		let optionItem = oFF.FilterDialogValueFactory.createValue(selectedItem.getName(), null, selectedItem.getText());
		let optionValue = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, optionItem, null);
		tmpList = oFF.XCollectionUtils.singletonList(optionValue);
	}
	this.submitValues(tmpList);
};
oFF.VdVhMobileController.prototype.handleOperatorWorkflowSelect = function(vhOperatorWorkflow)
{
	let firstOperatorItem = vhOperatorWorkflow.getSelectedFromItem();
	let secondOperatorItem = vhOperatorWorkflow.getSelectedToItem();
	let selectedOperator = vhOperatorWorkflow.getSelectedOperatorItem().getCustomObject();
	let tmpList = null;
	if (oFF.notNull(firstOperatorItem))
	{
		let operatorWorkflowValue = this.m_variableModel.createNewValue();
		if (firstOperatorItem.isNull())
		{
			operatorWorkflowValue.setOperator(oFF.VdComparisonOperator.IS_NULL);
		}
		else
		{
			operatorWorkflowValue.setOperator(selectedOperator);
		}
		operatorWorkflowValue.setFirstOperand(firstOperatorItem);
		if (oFF.notNull(secondOperatorItem))
		{
			operatorWorkflowValue.setSecondOperand(secondOperatorItem);
		}
		tmpList = oFF.XCollectionUtils.singletonList(operatorWorkflowValue);
	}
	this.submitValues(tmpList);
};
oFF.VdVhMobileController.prototype.handleRangeDateSelect = function(vhRangeCalendarView)
{
	let startDate = vhRangeCalendarView.getStartDate();
	let endDate = vhRangeCalendarView.getEndDate();
	let tmpList = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(startDate))
	{
		let startItem = oFF.FilterDialogValueFactory.createValueWithType(startDate, null, null, oFF.XValueType.DATE);
		let endItem = oFF.FilterDialogValueFactory.createValueWithType(endDate, null, null, oFF.XValueType.DATE);
		let rangeValue = oFF.VdValue.createValue(oFF.VdComparisonOperator.BETWEEN, startItem, endItem);
		tmpList = oFF.XCollectionUtils.singletonList(rangeValue);
	}
	this.submitValues(tmpList);
};
oFF.VdVhMobileController.prototype.handleSingleDateSelect = function(vhCalendarView)
{
	let selectedDate = vhCalendarView.getStartDate();
	let tmpList = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(selectedDate))
	{
		let dateItem = oFF.FilterDialogValueFactory.createValueWithType(selectedDate, null, null, oFF.XValueType.DATE);
		let dateValue = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, dateItem, null);
		tmpList = oFF.XCollectionUtils.singletonList(dateValue);
	}
	this.submitValues(tmpList);
};
oFF.VdVhMobileController.prototype.handleSingleDimensionMemberSelect = function(vhSingleDimensionMember)
{
	let selectedItem = vhSingleDimensionMember.getSelectedItem();
	let tmpList = null;
	if (oFF.notNull(selectedItem))
	{
		let singleDimensionMemberValue = oFF.VdValue.createValue(oFF.VdComparisonOperator.EQUAL, selectedItem, null);
		tmpList = oFF.XCollectionUtils.singletonList(singleDimensionMemberValue);
	}
	this.submitValues(tmpList);
};
oFF.VdVhMobileController.prototype.mobileValueHelpViewAvailable = function()
{
	return this.m_valueHelpType !== oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_NOT_SUPPORTED;
};
oFF.VdVhMobileController.prototype.onPress = function(event)
{
	let controlName = event.getControl().getName();
	if (oFF.XString.isEqual(controlName, "VdVhMobileDialogCloseBtn"))
	{
		this.cancelSubmit();
	}
	else if (oFF.XString.isEqual(controlName, "VdVhMobileSingleCalendarDialogOkBtn"))
	{
		let tmpCalView = event.getControl().getParent().getCustomObject();
		this.handleSingleDateSelect(tmpCalView);
	}
	else if (oFF.XString.isEqual(controlName, "VdVhMobileRangeCalendarDialogOkBtn"))
	{
		let tmpRangeCalView = event.getControl().getParent().getCustomObject();
		this.handleRangeDateSelect(tmpRangeCalView);
	}
	else if (oFF.XString.isEqual(controlName, "VdVhMobileDialogWorkflowOkBtn"))
	{
		let tmpOperatorWorkflow = this.m_containerDialog.getCustomObject();
		this.handleOperatorWorkflowSelect(tmpOperatorWorkflow);
	}
	else if (oFF.XString.isEqual(controlName, "VdVhMobileDialogSingleDimensionMemberOkBtn"))
	{
		let tmpView = this.m_containerDialog.getCustomObject();
		tmpView.triggerSelection();
	}
};
oFF.VdVhMobileController.prototype.onVhMobileOperatorWorkflowFinished = function(operatorItem, itemFrom, itemTo)
{
	this.m_containerDialog.getDialogButtonByName("VdVhMobileDialogWorkflowOkBtn").setEnabled(true);
};
oFF.VdVhMobileController.prototype.onVhMobileOperatorWorkflowNavigate = function(currentPageIndex, pageCount)
{
	let isLastPage = currentPageIndex === pageCount - 1;
	this.m_containerDialog.getDialogButtonByName("VdVhMobileDialogWorkflowOkBtn").setVisible(isLastPage);
	if (isLastPage && !this.m_variableModel.isMandatory())
	{
		this.m_containerDialog.getDialogButtonByName("VdVhMobileDialogWorkflowOkBtn").setEnabled(true);
	}
};
oFF.VdVhMobileController.prototype.onVhMobileValuesSelected = function(view)
{
	if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileCalendar.VIEW_NAME))
	{
		this.handleSingleDateSelect(view);
	}
	else if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileList.VIEW_NAME))
	{
		this.handleListSelect(view);
	}
	else if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileMemberSelector.VIEW_NAME))
	{
		this.handleSingleDimensionMemberSelect(view);
	}
};
oFF.VdVhMobileController.prototype.performMobileValueHelp = function()
{
	if (this.mobileValueHelpViewAvailable() && oFF.notNull(this.m_containerDialog))
	{
		this.m_containerDialog.open();
	}
};
oFF.VdVhMobileController.prototype.releaseObject = function()
{
	this.m_variableModel = null;
	this.m_vdVariableForm = null;
	this.m_closeListener = null;
	this.m_uiMgr = null;
	this.m_containerDialog = oFF.XObjectExt.release(this.m_containerDialog);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileController.prototype.setupContainerDialog = function()
{
	this.m_containerDialog = this.m_uiMgr.newControl(oFF.UiType.DIALOG);
	this.m_containerDialog.addCssClass("ffVdVhMobileDialog");
	this.m_containerDialog.useMaxSpace();
	let closeButton = this.m_containerDialog.addNewDialogButton();
	closeButton.setName("VdVhMobileDialogCloseBtn");
	closeButton.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_CANCEL));
	closeButton.registerOnPress(this);
	switch (this.m_valueHelpType)
	{
		case oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_CALENDAR:
			this.createCalendarValueHelp();
			break;

		case oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_RANGE_CALENDAR:
			this.createRangeCalendarValueHelp();
			break;

		case oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_OPTION_LIST:
			this.createOptionListValueHelp();
			break;

		case oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_SINGLE_DIMENSION_MEMBER:
			this.createSingleDimensionMemberValueHelp();
			break;

		case oFF.VdVhMobileController.VD_MOBILE_VH_TYPE_OPERATOR_WORKFLOW:
			this.createOperatorWorkflowValueHelp();
			break;

		default:
			break;
	}
};
oFF.VdVhMobileController.prototype.setupController = function(variableModel, vdVariableForm, listener, vdConfiguration)
{
	this.m_variableModel = variableModel;
	this.m_vdVariableForm = vdVariableForm;
	this.m_closeListener = listener;
	this.m_vdConfig = vdConfiguration;
	this.m_uiMgr = vdVariableForm.getContext().getUiManager();
	this.m_valueHelpType = this.getValueHelpType();
	if (this.mobileValueHelpViewAvailable())
	{
		this.setupContainerDialog();
	}
};
oFF.VdVhMobileController.prototype.submitValues = function(valuesList)
{
	this.m_containerDialog.close();
	this.m_variableModel.setValues(valuesList);
	if (oFF.notNull(this.m_closeListener))
	{
		this.m_closeListener.onFilterDialogOk(null, null);
	}
	else
	{
		this.m_vdVariableForm.attemptSubmit();
	}
};

oFF.VdVhMobileCalendar = function() {};
oFF.VdVhMobileCalendar.prototype = new oFF.XObject();
oFF.VdVhMobileCalendar.prototype._ff_c = "VdVhMobileCalendar";

oFF.VdVhMobileCalendar.VIEW_NAME = "vhMobileSingleDate";
oFF.VdVhMobileCalendar.create = function(uiMgr, valueFormat, selectedDate, listener)
{
	let obj = new oFF.VdVhMobileCalendar();
	obj.setupExt(uiMgr);
	obj.setSelectionFinishedListener(listener);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(valueFormat))
	{
		obj.setValueFormat(valueFormat);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(selectedDate))
	{
		obj.setStartDate(selectedDate);
	}
	return obj;
};
oFF.VdVhMobileCalendar.prototype.m_calendar = null;
oFF.VdVhMobileCalendar.prototype.m_clearSelectionBtn = null;
oFF.VdVhMobileCalendar.prototype.m_listener = null;
oFF.VdVhMobileCalendar.prototype.m_page = null;
oFF.VdVhMobileCalendar.prototype.getPage = function()
{
	return this.m_page;
};
oFF.VdVhMobileCalendar.prototype.getStartDate = function()
{
	if (oFF.notNull(this.m_calendar))
	{
		return this.m_calendar.getStartDate();
	}
	return null;
};
oFF.VdVhMobileCalendar.prototype.getViewName = function()
{
	return oFF.VdVhMobileCalendar.VIEW_NAME;
};
oFF.VdVhMobileCalendar.prototype.onChange = function(event)
{
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onVhMobileValuesSelected(this);
	}
};
oFF.VdVhMobileCalendar.prototype.onPress = function(event)
{
	let controlName = event.getControl().getName();
	if (oFF.XString.isEqual(controlName, "VdVhMobileCalendarClearSelectionBtn"))
	{
		this.setStartDate(null);
	}
};
oFF.VdVhMobileCalendar.prototype.releaseObject = function()
{
	this.m_clearSelectionBtn = oFF.XObjectExt.release(this.m_clearSelectionBtn);
	this.m_calendar = oFF.XObjectExt.release(this.m_calendar);
	this.m_page = oFF.XObjectExt.release(this.m_page);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileCalendar.prototype.setIsMandatory = function(isMandatory)
{
	this.m_clearSelectionBtn.setVisible(!isMandatory);
};
oFF.VdVhMobileCalendar.prototype.setSelectionFinishedListener = function(listener)
{
	this.m_listener = listener;
};
oFF.VdVhMobileCalendar.prototype.setStartDate = function(startDate)
{
	if (oFF.notNull(this.m_calendar))
	{
		this.m_calendar.setStartDate(startDate);
	}
};
oFF.VdVhMobileCalendar.prototype.setValueFormat = function(valueFormat)
{
	if (oFF.notNull(this.m_calendar))
	{
		this.m_calendar.setValueFormat(valueFormat);
	}
};
oFF.VdVhMobileCalendar.prototype.setupExt = function(uiMgr)
{
	let genesis = uiMgr.getFreeGenesis();
	this.m_page = genesis.newControl(oFF.UiType.PAGE);
	this.m_page.setName("VdVhMobileCalendarView");
	this.m_page.addCssClass("ffVdVhMobileViewWrapperPage");
	this.m_page.setShowNavButton(false);
	this.m_page.setShowHeader(false);
	let wrapperLayout = this.m_page.setNewContent(oFF.UiType.FLEX_LAYOUT);
	wrapperLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	wrapperLayout.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	wrapperLayout.useMaxSpace();
	wrapperLayout.setPadding(oFF.UiCssBoxEdges.create("8px"));
	this.m_calendar = wrapperLayout.addNewItemOfType(oFF.UiType.CALENDAR);
	this.m_calendar.setName("VdVhMobileCalendarViewCalendar");
	this.m_calendar.setWidth(oFF.UiCssLength.create("100%"));
	this.m_calendar.setPadding(oFF.UiCssBoxEdges.create("0px"));
	this.m_calendar.registerOnChange(this);
	this.m_clearSelectionBtn = wrapperLayout.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_clearSelectionBtn.setName("VdVhMobileCalendarClearSelectionBtn");
	this.m_clearSelectionBtn.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_CLEAR_SELECTION));
	this.m_clearSelectionBtn.setHeight(oFF.UiCssLength.create("40px"));
	this.m_clearSelectionBtn.setPadding(oFF.UiCssBoxEdges.create("0px"));
	this.m_clearSelectionBtn.setVisible(false);
	this.m_clearSelectionBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_clearSelectionBtn.registerOnPress(this);
};

oFF.VdVhMobileList = function() {};
oFF.VdVhMobileList.prototype = new oFF.XObject();
oFF.VdVhMobileList.prototype._ff_c = "VdVhMobileList";

oFF.VdVhMobileList.VIEW_NAME = "vhMobileList";
oFF.VdVhMobileList.create = function(uiMgr, items, selectedItemName, listener)
{
	let obj = new oFF.VdVhMobileList();
	obj.setupExt(uiMgr);
	obj.setItems(items);
	obj.setSelectionFinishedListener(listener);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(selectedItemName))
	{
		obj.setSelectedItemName(selectedItemName);
	}
	return obj;
};
oFF.VdVhMobileList.prototype.m_items = null;
oFF.VdVhMobileList.prototype.m_list = null;
oFF.VdVhMobileList.prototype.m_listener = null;
oFF.VdVhMobileList.prototype.m_page = null;
oFF.VdVhMobileList.prototype.generateListItems = function(items)
{
	if (oFF.notNull(this.m_list))
	{
		this.m_list.clearItems();
		if (oFF.notNull(items) && items.hasElements())
		{
			let itemIterator = items.getIterator();
			while (itemIterator.hasNext())
			{
				let tmpItem = itemIterator.next();
				let tmpListItem = this.m_list.addNewItem();
				tmpListItem.setName(tmpItem.getName());
				tmpListItem.setText(tmpItem.getText());
				tmpListItem.setCustomObject(tmpItem);
				tmpListItem.registerOnClick(this);
			}
		}
	}
};
oFF.VdVhMobileList.prototype.getPage = function()
{
	return this.m_page;
};
oFF.VdVhMobileList.prototype.getSelectedItem = function()
{
	if (oFF.notNull(this.m_list) && this.m_list.getSelectedItem() !== null)
	{
		return this.m_list.getSelectedItem().getCustomObject();
	}
	return null;
};
oFF.VdVhMobileList.prototype.getViewName = function()
{
	return oFF.VdVhMobileList.VIEW_NAME;
};
oFF.VdVhMobileList.prototype.onClick = function(event)
{
	let selectedItem = this.m_list.getSelectedItem();
	if (oFF.notNull(selectedItem))
	{
		this.m_listener.onVhMobileValuesSelected(this);
	}
};
oFF.VdVhMobileList.prototype.releaseObject = function()
{
	this.m_list = oFF.XObjectExt.release(this.m_list);
	this.m_page = oFF.XObjectExt.release(this.m_page);
	if (oFF.notNull(this.m_items) && this.m_items.hasElements())
	{
		this.m_items.clear();
	}
	this.m_items = oFF.XObjectExt.release(this.m_items);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileList.prototype.setItems = function(items)
{
	this.generateListItems(items);
};
oFF.VdVhMobileList.prototype.setSelectedItemName = function(selectedName)
{
	if (oFF.notNull(this.m_list) && this.m_list.hasItems() === true)
	{
		this.m_list.setSelectedName(selectedName);
	}
};
oFF.VdVhMobileList.prototype.setSelectionFinishedListener = function(listener)
{
	this.m_listener = listener;
};
oFF.VdVhMobileList.prototype.setupExt = function(uiMgr)
{
	let genesis = uiMgr.getFreeGenesis();
	this.m_page = genesis.newControl(oFF.UiType.PAGE);
	this.m_page.setName("VdVhMobileListView");
	this.m_page.addCssClass("ffVdVhMobileViewWrapperPage");
	this.m_page.setShowNavButton(false);
	this.m_page.setShowHeader(false);
	this.m_list = this.m_page.setNewContent(oFF.UiType.LIST);
	this.m_list.setName("VdVhMobileListViewList");
	this.m_list.useMaxSpace();
	this.m_list.setBorderWidth(oFF.UiCssBoxEdges.create("0px"));
	this.m_list.setSelectionMode(oFF.UiSelectionMode.SINGLE_SELECT_MASTER);
};

oFF.VdVhMobileOperatorWorkflow = function() {};
oFF.VdVhMobileOperatorWorkflow.prototype = new oFF.XObject();
oFF.VdVhMobileOperatorWorkflow.prototype._ff_c = "VdVhMobileOperatorWorkflow";

oFF.VdVhMobileOperatorWorkflow.NAVIGATION_CONTAINER_NAME = "VdVhMobileWorkflowOperatorNavContainer";
oFF.VdVhMobileOperatorWorkflow.NEXT_PAGE_BUTTON_TAG = "ffVdVhOperatorWorkflowPageNextButton";
oFF.VdVhMobileOperatorWorkflow.PREV_MEMBER_LABEL_NAME = "VdVhMobileWorkflowOperatorPrevMemberNameLbl";
oFF.VdVhMobileOperatorWorkflow.WORKFLOW_NAME = "vhMobileWorkflowOperator";
oFF.VdVhMobileOperatorWorkflow.createWithVariableModel = function(context, variableModel, vdConfiguration, listener)
{
	let obj = new oFF.VdVhMobileOperatorWorkflow();
	obj.setupWithVariableModel(context, variableModel, vdConfiguration);
	obj.setListener(listener);
	return obj;
};
oFF.VdVhMobileOperatorWorkflow.prototype.m_currentViewIndex = 0;
oFF.VdVhMobileOperatorWorkflow.prototype.m_fromMemberSelectorView = null;
oFF.VdVhMobileOperatorWorkflow.prototype.m_isSingleSelectionWorkflow = false;
oFF.VdVhMobileOperatorWorkflow.prototype.m_isVariableMandatory = false;
oFF.VdVhMobileOperatorWorkflow.prototype.m_listener = null;
oFF.VdVhMobileOperatorWorkflow.prototype.m_navContainer = null;
oFF.VdVhMobileOperatorWorkflow.prototype.m_operatorListView = null;
oFF.VdVhMobileOperatorWorkflow.prototype.m_toMemberSelectorView = null;
oFF.VdVhMobileOperatorWorkflow.prototype.m_uiMgr = null;
oFF.VdVhMobileOperatorWorkflow.prototype.m_views = null;
oFF.VdVhMobileOperatorWorkflow.prototype.addView = function(view)
{
	this.m_views.add(view);
};
oFF.VdVhMobileOperatorWorkflow.prototype.adjustViewsToWorkflowType = function()
{
	if (this.m_isSingleSelectionWorkflow === false && this.m_views.size() === 2)
	{
		this.addView(this.m_toMemberSelectorView);
		this.m_fromMemberSelectorView.getPage().setTitle(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER1));
	}
	else if (this.m_isSingleSelectionWorkflow === true && this.m_views.size() === 3 && this.m_views.get(2) === this.m_toMemberSelectorView)
	{
		this.m_views.removeAt(2);
		this.m_fromMemberSelectorView.getPage().setTitle(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER));
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.checkWorkflowType = function()
{
	let selectedOperator = this.m_operatorListView.getSelectedItem().getCustomObject();
	if (selectedOperator === oFF.VdComparisonOperator.BETWEEN || selectedOperator === oFF.VdComparisonOperator.NOT_BETWEEN)
	{
		this.m_isSingleSelectionWorkflow = false;
	}
	else
	{
		this.m_isSingleSelectionWorkflow = true;
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.finishWorkflow = function()
{
	if (this.m_currentViewIndex === this.m_views.size() - 1 && this.m_views.size() === 2 && this.m_fromMemberSelectorView.getSelectedItem() !== null)
	{
		if (oFF.notNull(this.m_listener))
		{
			this.m_listener.onVhMobileOperatorWorkflowFinished(this.m_operatorListView.getSelectedItem(), this.m_fromMemberSelectorView.getSelectedItem(), null);
		}
	}
	else if (this.m_currentViewIndex === this.m_views.size() - 1 && this.m_views.size() === 3 && this.m_toMemberSelectorView.getSelectedItem() !== null)
	{
		if (oFF.notNull(this.m_listener))
		{
			this.m_listener.onVhMobileOperatorWorkflowFinished(this.m_operatorListView.getSelectedItem(), this.m_fromMemberSelectorView.getSelectedItem(), this.m_toMemberSelectorView.getSelectedItem());
		}
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.getSelectedFromItem = function()
{
	return this.m_fromMemberSelectorView.getSelectedItem();
};
oFF.VdVhMobileOperatorWorkflow.prototype.getSelectedOperatorItem = function()
{
	return this.m_operatorListView.getSelectedItem();
};
oFF.VdVhMobileOperatorWorkflow.prototype.getSelectedToItem = function()
{
	if (!this.m_isSingleSelectionWorkflow)
	{
		return this.m_toMemberSelectorView.getSelectedItem();
	}
	return null;
};
oFF.VdVhMobileOperatorWorkflow.prototype.getViews = function()
{
	return this.m_views;
};
oFF.VdVhMobileOperatorWorkflow.prototype.getWorkflowView = function()
{
	return this.m_navContainer;
};
oFF.VdVhMobileOperatorWorkflow.prototype.goToNextPage = function()
{
	if (this.m_currentViewIndex === 0)
	{
		this.checkWorkflowType();
		this.adjustViewsToWorkflowType();
	}
	if (this.m_currentViewIndex === 1)
	{
		this.updatePreviousSelectionLabel();
	}
	this.toggleNextButtons();
	this.m_currentViewIndex++;
	let tmpView = this.m_views.get(this.m_currentViewIndex);
	let viewPage = tmpView.getPage();
	viewPage.setShowHeader(true);
	viewPage.setShowNavButton(true);
	this.m_navContainer.pushPage(viewPage);
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onVhMobileOperatorWorkflowNavigate(this.m_currentViewIndex, this.m_views.size());
	}
	this.finishWorkflow();
};
oFF.VdVhMobileOperatorWorkflow.prototype.onBack = function(event)
{
	this.m_currentViewIndex = this.m_currentViewIndex - 1;
	this.toggleNextButtons();
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onVhMobileOperatorWorkflowNavigate(this.m_currentViewIndex, this.m_views.size());
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.onPress = function(event)
{
	let control = event.getControl();
	if (oFF.XString.isEqual(control.getTag(), oFF.VdVhMobileOperatorWorkflow.NEXT_PAGE_BUTTON_TAG))
	{
		this.goToNextPage();
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.onVhMobileValuesSelected = function(view)
{
	if (oFF.XString.isEqual(view.getViewName(), oFF.VdVhMobileMemberSelector.VIEW_NAME) && this.m_currentViewIndex === 1)
	{
		this.updatePreviousSelectionLabel();
	}
	if (this.m_currentViewIndex === this.m_views.size() - 1)
	{
		this.finishWorkflow();
	}
	else
	{
		this.goToNextPage();
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.releaseObject = function()
{
	this.m_uiMgr = null;
	this.m_views.clear();
	this.m_views = oFF.XObjectExt.release(this.m_views);
	this.m_operatorListView = oFF.XObjectExt.release(this.m_operatorListView);
	this.m_fromMemberSelectorView = oFF.XObjectExt.release(this.m_fromMemberSelectorView);
	this.m_toMemberSelectorView = oFF.XObjectExt.release(this.m_toMemberSelectorView);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileOperatorWorkflow.prototype.setListener = function(listener)
{
	this.m_listener = listener;
};
oFF.VdVhMobileOperatorWorkflow.prototype.setupWithVariableModel = function(context, variableModel, vdConfiguration)
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_views = oFF.XList.create();
	this.m_currentViewIndex = 0;
	this.m_isSingleSelectionWorkflow = true;
	this.m_isVariableMandatory = variableModel.isMandatory();
	this.m_uiMgr = context.getUiManager();
	let genesis = this.m_uiMgr.getFreeGenesis();
	this.m_navContainer = genesis.newControl(oFF.UiType.NAVIGATION_CONTAINER);
	this.m_navContainer.setName(oFF.VdVhMobileOperatorWorkflow.NAVIGATION_CONTAINER_NAME);
	this.m_navContainer.registerOnBack(this);
	let supportedOperatorsList = oFF.XList.create();
	let supportedOperatorsIterator = variableModel.getSupportedComparisonOperators().getIterator();
	while (supportedOperatorsIterator.hasNext())
	{
		let tmpOperator = supportedOperatorsIterator.next();
		let newItem = oFF.VdVhMobileListItem.create(tmpOperator.getName(), tmpOperator.getLongText(), tmpOperator);
		supportedOperatorsList.add(newItem);
	}
	let selectedFromItem = null;
	let selectedToItem = null;
	let selectedOperatorName = null;
	if (variableModel.getValues().size() > 0)
	{
		let selectedValue = variableModel.getValues().get(0);
		selectedOperatorName = selectedValue.getOperator().getName();
		selectedFromItem = selectedValue.getFirstOperand();
		selectedToItem = selectedValue.getSecondOperand();
	}
	this.m_operatorListView = oFF.VdVhMobileList.create(this.m_uiMgr, supportedOperatorsList, selectedOperatorName, this);
	this.m_operatorListView.getPage().setTitle(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_OPERATOR));
	let operatorNextPageBtn = this.m_operatorListView.getPage().addNewPageButton();
	operatorNextPageBtn.setTag(oFF.VdVhMobileOperatorWorkflow.NEXT_PAGE_BUTTON_TAG);
	operatorNextPageBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	operatorNextPageBtn.setIcon("navigation-right-arrow");
	operatorNextPageBtn.setTooltip(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_NEXT_PAGE_TOOLTIP));
	operatorNextPageBtn.registerOnPress(this);
	operatorNextPageBtn.setVisible(false);
	this.addView(this.m_operatorListView);
	this.m_fromMemberSelectorView = oFF.VdVhMobileMemberSelector.create(context, variableModel.getVariable(), vdConfiguration, selectedFromItem, this);
	this.m_fromMemberSelectorView.getPage().setTitle(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER));
	let firstMemberNextPageBtn = this.m_fromMemberSelectorView.getPage().addNewPageButton();
	firstMemberNextPageBtn.setTag(oFF.VdVhMobileOperatorWorkflow.NEXT_PAGE_BUTTON_TAG);
	firstMemberNextPageBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	firstMemberNextPageBtn.setIcon("navigation-right-arrow");
	firstMemberNextPageBtn.setTooltip(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_NEXT_PAGE_TOOLTIP));
	firstMemberNextPageBtn.registerOnPress(this);
	firstMemberNextPageBtn.setVisible(false);
	this.addView(this.m_fromMemberSelectorView);
	this.m_toMemberSelectorView = oFF.VdVhMobileMemberSelector.create(context, variableModel.getVariable(), vdConfiguration, selectedToItem, this);
	this.m_toMemberSelectorView.getPage().setTitle(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER2));
	let subHeaderFlexLayout = this.m_toMemberSelectorView.getPage().setNewSubHeader(oFF.UiType.FLEX_LAYOUT);
	subHeaderFlexLayout.setPadding(oFF.UiCssBoxEdges.create("10px"));
	subHeaderFlexLayout.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	let previousLbl = subHeaderFlexLayout.addNewItemOfType(oFF.UiType.LABEL);
	previousLbl.setText(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_PREVIOUS_SELECTION));
	subHeaderFlexLayout.addNewItemOfType(oFF.UiType.SPACER).setWidth(oFF.UiCssLength.create("5px")).setFlex("none");
	let prevMemberNameLbl = subHeaderFlexLayout.addNewItemOfType(oFF.UiType.LABEL);
	prevMemberNameLbl.setName(oFF.VdVhMobileOperatorWorkflow.PREV_MEMBER_LABEL_NAME);
	prevMemberNameLbl.setFontWeight(oFF.UiFontWeight.BOLD);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(selectedOperatorName))
	{
		operatorNextPageBtn.setVisible(true);
	}
	if (oFF.notNull(selectedFromItem))
	{
		firstMemberNextPageBtn.setVisible(true);
		prevMemberNameLbl.setText(selectedFromItem.getText());
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.start = function()
{
	if (this.m_views.hasElements())
	{
		let tmpView = this.m_views.get(0);
		let viewPage = tmpView.getPage();
		viewPage.setShowHeader(true);
		viewPage.setShowNavButton(false);
		this.m_navContainer.pushPage(viewPage);
		this.m_currentViewIndex = 0;
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.toggleNextButtons = function()
{
	this.m_operatorListView.getPage().getPageButton(0).setVisible(this.m_operatorListView.getSelectedItem() !== null);
	let hasMorePages = this.getViews().size() > 2;
	if (this.m_isVariableMandatory)
	{
		let hasFromSelectedItem = this.m_fromMemberSelectorView.getSelectedItem() !== null;
		this.m_fromMemberSelectorView.getPage().getPageButton(0).setVisible(hasFromSelectedItem && hasMorePages);
	}
	else
	{
		this.m_fromMemberSelectorView.getPage().getPageButton(0).setVisible(hasMorePages);
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.triggerSelection = function()
{
	if (oFF.notNull(this.m_fromMemberSelectorView))
	{
		this.m_fromMemberSelectorView.triggerSelection();
	}
	if (!this.m_isSingleSelectionWorkflow && oFF.notNull(this.m_toMemberSelectorView))
	{
		this.m_toMemberSelectorView.triggerSelection();
	}
};
oFF.VdVhMobileOperatorWorkflow.prototype.updatePreviousSelectionLabel = function()
{
	let fdItem = this.m_fromMemberSelectorView.getSelectedItem();
	let subHeaderFlexLayout = this.m_toMemberSelectorView.getPage().getSubHeader();
	let prevMemberNameLbl = subHeaderFlexLayout.getItemByName(oFF.VdVhMobileOperatorWorkflow.PREV_MEMBER_LABEL_NAME);
	if (oFF.notNull(fdItem))
	{
		prevMemberNameLbl.setText(fdItem.getText());
	}
	else
	{
		prevMemberNameLbl.setText("-");
	}
};

oFF.VdVhMobileRangeCalendar = function() {};
oFF.VdVhMobileRangeCalendar.prototype = new oFF.XObject();
oFF.VdVhMobileRangeCalendar.prototype._ff_c = "VdVhMobileRangeCalendar";

oFF.VdVhMobileRangeCalendar.VIEW_NAME = "vhMobileRangeCalendar";
oFF.VdVhMobileRangeCalendar.create = function(uiMgr, valueFormat, startDate, endDate, listener)
{
	let obj = new oFF.VdVhMobileRangeCalendar();
	obj.setupExt(uiMgr);
	obj.setSelectionFinishedListener(listener);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(valueFormat))
	{
		obj.setValueFormat(valueFormat);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(startDate))
	{
		obj.setStartDate(startDate);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(endDate))
	{
		obj.setEndDate(endDate);
	}
	return obj;
};
oFF.VdVhMobileRangeCalendar.prototype.m_calendar = null;
oFF.VdVhMobileRangeCalendar.prototype.m_clearSelectionBtn = null;
oFF.VdVhMobileRangeCalendar.prototype.m_listener = null;
oFF.VdVhMobileRangeCalendar.prototype.m_page = null;
oFF.VdVhMobileRangeCalendar.prototype.getEndDate = function()
{
	if (oFF.notNull(this.m_calendar))
	{
		return this.m_calendar.getEndDate();
	}
	return null;
};
oFF.VdVhMobileRangeCalendar.prototype.getPage = function()
{
	return this.m_page;
};
oFF.VdVhMobileRangeCalendar.prototype.getStartDate = function()
{
	if (oFF.notNull(this.m_calendar))
	{
		return this.m_calendar.getStartDate();
	}
	return null;
};
oFF.VdVhMobileRangeCalendar.prototype.getViewName = function()
{
	return oFF.VdVhMobileRangeCalendar.VIEW_NAME;
};
oFF.VdVhMobileRangeCalendar.prototype.onChange = function(event)
{
	if (oFF.notNull(this.m_listener))
	{
		let endDate = this.m_calendar.getEndDate();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(endDate) === true)
		{
			this.m_listener.onVhMobileValuesSelected(this);
		}
	}
};
oFF.VdVhMobileRangeCalendar.prototype.onPress = function(event)
{
	let controlName = event.getControl().getName();
	if (oFF.XString.isEqual(controlName, "VdVhMobileRangeCalendarClearSelectionBtn"))
	{
		this.setStartDate(null);
		this.setEndDate(null);
	}
};
oFF.VdVhMobileRangeCalendar.prototype.releaseObject = function()
{
	this.m_clearSelectionBtn = oFF.XObjectExt.release(this.m_clearSelectionBtn);
	this.m_calendar = oFF.XObjectExt.release(this.m_calendar);
	this.m_page = oFF.XObjectExt.release(this.m_page);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileRangeCalendar.prototype.setEndDate = function(endDate)
{
	if (oFF.notNull(this.m_calendar))
	{
		this.m_calendar.setEndDate(endDate);
	}
};
oFF.VdVhMobileRangeCalendar.prototype.setIsMandatory = function(isMandatory)
{
	this.m_clearSelectionBtn.setVisible(!isMandatory);
};
oFF.VdVhMobileRangeCalendar.prototype.setSelectionFinishedListener = function(listener)
{
	this.m_listener = listener;
};
oFF.VdVhMobileRangeCalendar.prototype.setStartDate = function(startDate)
{
	if (oFF.notNull(this.m_calendar))
	{
		this.m_calendar.setStartDate(startDate);
	}
};
oFF.VdVhMobileRangeCalendar.prototype.setValueFormat = function(valueFormat)
{
	if (oFF.notNull(this.m_calendar))
	{
		this.m_calendar.setValueFormat(valueFormat);
	}
};
oFF.VdVhMobileRangeCalendar.prototype.setupExt = function(uiMgr)
{
	let genesis = uiMgr.getFreeGenesis();
	this.m_page = genesis.newControl(oFF.UiType.PAGE);
	this.m_page.setName("VdVhMobileRangeCalendarView");
	this.m_page.addCssClass("ffVdVhMobileViewWrapperPage");
	this.m_page.setShowNavButton(false);
	this.m_page.setShowHeader(false);
	let wrapperLayout = this.m_page.setNewContent(oFF.UiType.FLEX_LAYOUT);
	wrapperLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	wrapperLayout.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	wrapperLayout.useMaxSpace();
	wrapperLayout.setPadding(oFF.UiCssBoxEdges.create("8px"));
	this.m_calendar = wrapperLayout.addNewItemOfType(oFF.UiType.CALENDAR);
	this.m_calendar.setName("VdVhMobileRangeCalendarViewCalendar");
	this.m_calendar.setWidth(oFF.UiCssLength.create("100%"));
	this.m_calendar.setPadding(oFF.UiCssBoxEdges.create("0px"));
	this.m_calendar.setIntervalSelection(true);
	this.m_calendar.registerOnChange(this);
	this.m_clearSelectionBtn = wrapperLayout.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_clearSelectionBtn.setName("VdVhMobileRangeCalendarClearSelectionBtn");
	this.m_clearSelectionBtn.setText(oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.FilterDialogI18n.I18N_FD_CLEAR_SELECTION));
	this.m_clearSelectionBtn.setHeight(oFF.UiCssLength.create("40px"));
	this.m_clearSelectionBtn.setPadding(oFF.UiCssBoxEdges.create("0px"));
	this.m_clearSelectionBtn.setVisible(false);
	this.m_clearSelectionBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_clearSelectionBtn.registerOnPress(this);
};

oFF.VdOrcaFacade = function() {};
oFF.VdOrcaFacade.prototype = new oFF.XObject();
oFF.VdOrcaFacade.prototype._ff_c = "VdOrcaFacade";

oFF.VdOrcaFacade.ANCHOR_NAME = "VdTokenRoot";
oFF.VdOrcaFacade.configureVariantManagement = function(processor, config)
{
	let application = processor.getApplication();
	let dataSource = processor.getDataSource();
	if (oFF.notNull(dataSource))
	{
		let systemDescription = application.getSystemLandscape().getSystemDescription(dataSource.getSystemName());
		if (oFF.notNull(systemDescription))
		{
			let isS4 = systemDescription.getProperties().getBooleanByKeyExt("FPA_IS_S4_HANA", false);
			let isCloud = oFF.XString.isEqual(systemDescription.getProperties().getStringByKeyExt("FPA_CONNECTION_TYPE", null), "CLOUD");
			let sacEmbedded = oFF.UiIntegrationInfoCenter.getCenter().isEmbedded();
			let disableManagement = isS4 && (isCloud || sacEmbedded);
			config.setVariantManagementEnabled(!disableManagement);
		}
	}
};
oFF.VdOrcaFacade.createFacadeDisplay = function(display, helper, linkedVariableNames)
{
	let obj = new oFF.VdOrcaFacade();
	obj.setDisplay(display);
	obj.setupExt(helper, linkedVariableNames);
	return obj;
};
oFF.VdOrcaFacade.createFacadeToken = function(token, helper, linkedVariableNames)
{
	let obj = new oFF.VdOrcaFacade();
	obj.setToken(token);
	obj.setupExt(helper, linkedVariableNames);
	return obj;
};
oFF.VdOrcaFacade.prototype.m_linkedVariableNames = null;
oFF.VdOrcaFacade.prototype.m_originalRenderListener = null;
oFF.VdOrcaFacade.prototype.m_originalSubmitListener = null;
oFF.VdOrcaFacade.prototype.m_tokenGenesis = null;
oFF.VdOrcaFacade.prototype.m_uiHelper = null;
oFF.VdOrcaFacade.prototype.m_vdController = null;
oFF.VdOrcaFacade.prototype.m_vdDisplay = null;
oFF.VdOrcaFacade.prototype.m_vdToken = null;
oFF.VdOrcaFacade.prototype.attemptSubmit = function()
{
	this.m_vdController.attemptSubmit();
};
oFF.VdOrcaFacade.prototype.attemptSubmitWithCancelReinitFallback = function()
{
	this.m_vdController.attemptSubmitWithCancelReinitFallback();
};
oFF.VdOrcaFacade.prototype.buildUiOnAnchorId = function(anchorId)
{
	if (oFF.notNull(this.m_vdToken))
	{
		let childProcess = this.m_vdToken.getContext().getUiManager().getProcess().newChildProcess(oFF.ProcessType.SERVICE);
		let subUiMgr = oFF.UiManagerFactory.newInstance(childProcess);
		subUiMgr.registerNativeAnchor(oFF.VdOrcaFacade.ANCHOR_NAME, anchorId, null);
		this.m_tokenGenesis = subUiMgr.getGenesis();
		this.m_vdToken.buildOlapDialogUi(this.m_tokenGenesis);
	}
};
oFF.VdOrcaFacade.prototype.buildUiOnAnchorObject = function(anchor)
{
	if (oFF.notNull(this.m_vdToken))
	{
		let childProcess = this.m_vdToken.getContext().getUiManager().getProcess().newChildProcess(oFF.ProcessType.SERVICE);
		let subUiMgr = oFF.UiManagerFactory.newInstance(childProcess);
		subUiMgr.registerNativeAnchor(oFF.VdOrcaFacade.ANCHOR_NAME, null, anchor);
		this.m_tokenGenesis = subUiMgr.getGenesis();
		this.m_vdToken.buildOlapDialogUi(this.m_tokenGenesis);
	}
};
oFF.VdOrcaFacade.prototype.buildUiOnControl = function(control)
{
	if (oFF.notNull(this.m_vdToken))
	{
		this.m_tokenGenesis = oFF.UiGenesis.create(control);
		this.m_vdToken.buildOlapDialogUi(this.m_tokenGenesis);
	}
};
oFF.VdOrcaFacade.prototype.close = function()
{
	if (oFF.notNull(this.m_vdDisplay))
	{
		this.m_vdDisplay.close();
	}
};
oFF.VdOrcaFacade.prototype.exportVariablesAsJson = function()
{
	return oFF.VdOrcaValueParser.exportVariables(this.m_vdController.getVariableProcessor(), this.m_vdController.getCleanedValues(), this.m_linkedVariableNames);
};
oFF.VdOrcaFacade.prototype.exportVariablesAsString = function()
{
	return oFF.PrUtils.serialize(this.exportVariablesAsJson(), false, false, 0);
};
oFF.VdOrcaFacade.prototype.getController = function()
{
	return this.m_vdController;
};
oFF.VdOrcaFacade.prototype.getSubmitListener = function()
{
	return this.m_originalSubmitListener;
};
oFF.VdOrcaFacade.prototype.getVariableProcessor = function()
{
	return this.m_vdController.getVariableProcessor();
};
oFF.VdOrcaFacade.prototype.getView = function()
{
	return this.m_vdController.getView();
};
oFF.VdOrcaFacade.prototype.isDisablingDynamicVariables = function()
{
	return this.m_uiHelper.isDisablingDynamicVariables();
};
oFF.VdOrcaFacade.prototype.isDisablingExitVariables = function()
{
	return this.m_uiHelper.isDisablingExitVariables();
};
oFF.VdOrcaFacade.prototype.isForcePrompt = function()
{
	return this.m_uiHelper.isForcePrompt();
};
oFF.VdOrcaFacade.prototype.isOpen = function()
{
	return oFF.notNull(this.m_vdDisplay) && this.m_vdDisplay.isOpen();
};
oFF.VdOrcaFacade.prototype.isWidgetSelected = function()
{
	return this.m_uiHelper.isWidgetSelected();
};
oFF.VdOrcaFacade.prototype.onAfterSubmit = function(success, extResult, values, valuesJson)
{
	this.getSubmitListener().onAfterSubmit(success, extResult, values, valuesJson);
};
oFF.VdOrcaFacade.prototype.onBeforeSubmit = function(values, valuesJson)
{
	this.getSubmitListener().onBeforeSubmit(values, valuesJson);
};
oFF.VdOrcaFacade.prototype.onRenderDone = function(root)
{
	this.m_uiHelper.addOrcaSpecificUi();
	if (oFF.notNull(this.m_originalRenderListener))
	{
		this.m_originalRenderListener.onRenderDone(root);
	}
};
oFF.VdOrcaFacade.prototype.open = function()
{
	if (oFF.notNull(this.m_vdDisplay))
	{
		this.m_vdDisplay.open();
	}
};
oFF.VdOrcaFacade.prototype.performStoryFilterOptimizationWorkflow = function(varName)
{
	this.m_vdController.performStoryFilterOptimizationWorkflow(varName);
};
oFF.VdOrcaFacade.prototype.performStoryFilterOptimizationWorkflowWithCallback = function(varName, listener)
{
	this.m_vdController.performStoryFilterOptimizationWorkflowWithCallback(varName, listener);
};
oFF.VdOrcaFacade.prototype.registerReinitListener = function(listener)
{
	this.m_vdController.registerReinitListener(listener);
};
oFF.VdOrcaFacade.prototype.registerRenderListener = function(listener)
{
	this.m_originalRenderListener = listener;
};
oFF.VdOrcaFacade.prototype.registerSubmitListener = function(listener)
{
	this.m_originalSubmitListener = listener;
};
oFF.VdOrcaFacade.prototype.releaseObject = function()
{
	this.m_vdController = oFF.XObjectExt.release(this.m_vdController);
	this.m_vdToken = null;
	this.m_vdDisplay = null;
	this.m_uiHelper = oFF.XObjectExt.release(this.m_uiHelper);
	this.m_tokenGenesis = oFF.XObjectExt.release(this.m_tokenGenesis);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdOrcaFacade.prototype.render = function()
{
	if (oFF.notNull(this.m_vdToken))
	{
		this.m_vdToken.render();
	}
};
oFF.VdOrcaFacade.prototype.setDisplay = function(display)
{
	this.m_vdController = this.m_vdDisplay = display;
};
oFF.VdOrcaFacade.prototype.setInitialFocus = function()
{
	this.m_vdController.setInitialFocus();
};
oFF.VdOrcaFacade.prototype.setToken = function(token)
{
	this.m_vdController = this.m_vdToken = token;
};
oFF.VdOrcaFacade.prototype.setupExt = function(helper, linkedVariableNames)
{
	this.m_vdController.registerRenderListener(this);
	this.m_vdController.registerSubmitListener(this);
	this.m_uiHelper = helper;
	this.m_linkedVariableNames = linkedVariableNames;
};
oFF.VdOrcaFacade.prototype.supportsStoryFilterOptimization = function(varName)
{
	return this.m_vdController.supportsStoryFilterOptimization(varName);
};

oFF.OrcaLinkVarSubmitCallback = function() {};
oFF.OrcaLinkVarSubmitCallback.prototype = new oFF.XObjectExt();
oFF.OrcaLinkVarSubmitCallback.prototype._ff_c = "OrcaLinkVarSubmitCallback";

oFF.OrcaLinkVarSubmitCallback.createCallback = function(original, queryManager)
{
	let obj = new oFF.OrcaLinkVarSubmitCallback();
	obj.m_original = original;
	obj.m_queryManager = queryManager;
	return obj;
};
oFF.OrcaLinkVarSubmitCallback.prototype.m_original = null;
oFF.OrcaLinkVarSubmitCallback.prototype.m_queryManager = null;
oFF.OrcaLinkVarSubmitCallback.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.m_original.onQueryManagerSubmit(this, this.m_queryManager, extResult, result, customIdentifier);
};
oFF.OrcaLinkVarSubmitCallback.prototype.releaseObject = function()
{
	this.m_original = null;
	this.m_queryManager = null;
	oFF.XObjectExt.prototype.releaseObject.call( this );
};

oFF.VdOrcaUiHelper = function() {};
oFF.VdOrcaUiHelper.prototype = new oFF.XObject();
oFF.VdOrcaUiHelper.prototype._ff_c = "VdOrcaUiHelper";

oFF.VdOrcaUiHelper.addTextVariableInfoSection = function(controller, infoText)
{
	if (controller.getVariable().getVariableType() !== oFF.VariableType.TEXT_VARIABLE)
	{
		return null;
	}
	return controller.getView().setInfoText(infoText);
};
oFF.VdOrcaUiHelper.createUiHelper = function(controller, config)
{
	let obj = new oFF.VdOrcaUiHelper();
	obj.setupUiHelper(controller, config);
	return obj;
};
oFF.VdOrcaUiHelper.showLinkIconForVariable = function(variableController, tooltipLines, context)
{
	if (oFF.isNull(variableController) || oFF.isNull(context) || oFF.isNull(tooltipLines))
	{
		return null;
	}
	let uiManager = context.getUiManager();
	let localization = oFF.OuVariableDialogI18nLegacy.getProvider();
	let linkIcon = variableController.getView().addNewHeaderIcon();
	linkIcon.setName("VariableLinkIco");
	linkIcon.setIcon("chain-link");
	let popoverInner = uiManager.newControl(oFF.UiType.FLEX_LAYOUT);
	popoverInner.setDirection(oFF.UiFlexDirection.COLUMN);
	popoverInner.setAlignContent(oFF.UiFlexAlignContent.START);
	popoverInner.addNewItemOfType(oFF.UiType.LABEL).setText(localization.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_LINK_INFO_MESSAGE)).setWrapping(true);
	popoverInner.addNewItemOfType(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.create("10px"));
	for (let j = 0; j < tooltipLines.size(); j++)
	{
		let pair = tooltipLines.get(j);
		let line = popoverInner.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		line.addNewItemOfType(oFF.UiType.LABEL).setText(pair.getFirstString()).setTooltip(pair.getFirstString()).setWrapping(true);
		line.addNewItemOfType(oFF.UiType.ICON).setIcon("product").setWidth(oFF.UiCssLength.createExt(30, oFF.UiCssSizeUnit.PIXEL)).setEnabled(false);
		line.addNewItemOfType(oFF.UiType.LABEL).setText(pair.getSecondString()).setTooltip(pair.getSecondString()).setWrapping(true);
		if (j < tooltipLines.size() - 1)
		{
			popoverInner.addNewItemOfType(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.create("5px"));
		}
	}
	return oFF.OlapUiIconPopover.createPopoverWithContent(uiManager, "VariableLinkPop", linkIcon, popoverInner);
};
oFF.VdOrcaUiHelper.supportsStoryFilterOptimization = function(variable, isMobile)
{
	if (oFF.isNull(variable))
	{
		return false;
	}
	let variableModel = oFF.VdVariableModel.createVariableModel(variable);
	let result = isMobile ? oFF.VdVhMobileController.supportsMobileValueHelp(variableModel) : oFF.VdVariableForm.supportsStoryFilterOptimizationForDesktop(variableModel);
	oFF.XObjectExt.release(variableModel);
	return result;
};
oFF.VdOrcaUiHelper.prototype.m_config = null;
oFF.VdOrcaUiHelper.prototype.m_disableDynamicCb = null;
oFF.VdOrcaUiHelper.prototype.m_disableExitCb = null;
oFF.VdOrcaUiHelper.prototype.m_forceCb = null;
oFF.VdOrcaUiHelper.prototype.m_i18n = null;
oFF.VdOrcaUiHelper.prototype.m_level = null;
oFF.VdOrcaUiHelper.prototype.m_orcaLayout = null;
oFF.VdOrcaUiHelper.prototype.m_orcaLayoutPopover = null;
oFF.VdOrcaUiHelper.prototype.m_popovers = null;
oFF.VdOrcaUiHelper.prototype.m_scenario = null;
oFF.VdOrcaUiHelper.prototype.m_storyRb = null;
oFF.VdOrcaUiHelper.prototype.m_textVariableDisableInfos = null;
oFF.VdOrcaUiHelper.prototype.m_uiContext = null;
oFF.VdOrcaUiHelper.prototype.m_uiMgr = null;
oFF.VdOrcaUiHelper.prototype.m_useBottomLevelVariables = false;
oFF.VdOrcaUiHelper.prototype.m_vdController = null;
oFF.VdOrcaUiHelper.prototype.m_widgetRb = null;
oFF.VdOrcaUiHelper.prototype.addDisableDynamicSection = function()
{
	if (this.isDisableDynamicSection())
	{
		let disableDynamicLayout = this.m_orcaLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		disableDynamicLayout.setName("VariableDialogDynamicLayout");
		disableDynamicLayout.useMaxWidth();
		disableDynamicLayout.setDirection(oFF.UiFlexDirection.ROW);
		disableDynamicLayout.setAlignItems(oFF.UiFlexAlignItems.CENTER);
		disableDynamicLayout.setJustifyContent(oFF.UiFlexJustifyContent.START);
		disableDynamicLayout.setPadding(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
		this.m_disableDynamicCb = disableDynamicLayout.addNewItemOfType(oFF.UiType.CHECKBOX);
		this.m_disableDynamicCb.setName("VariableDialogDynamicCb");
		this.m_disableDynamicCb.setWrapping(true);
		this.m_disableDynamicCb.setEnabled(!this.m_config.isReadOnly() && (this.m_level === oFF.VdOrcaLevel.DEFAULT || this.m_useBottomLevelVariables) && !this.m_config.isDisableVariablePersistenceOptions());
		this.m_disableDynamicCb.setChecked(this.getDisableDynamicInitialValue());
		this.m_disableDynamicCb.registerOnChange(this);
		let label = disableDynamicLayout.addNewItemOfType(oFF.UiType.LABEL);
		label.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC));
		label.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC));
		label.setLabelFor(this.m_disableDynamicCb);
		if (this.m_config.isDisableVariablePersistenceOptions())
		{
			let infoIcon = disableDynamicLayout.addNewItemOfType(oFF.UiType.ICON);
			infoIcon.setName("VariableDialogDynamicIco");
			infoIcon.setIcon("message-information");
			infoIcon.setIconSize(oFF.UiCssLength.create("1rem"));
			infoIcon.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
			if (this.m_uiMgr.getDeviceInfo().isMobile())
			{
				infoIcon.setIconSize(oFF.UiCssLength.create(oFF.VdVariableView.MOBILE_ICON_FONT_SIZE));
			}
			let text = this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC_DISABLED_LONG);
			this.m_popovers.add(oFF.OlapUiIconPopover.createPopoverWithText(this.m_uiMgr, "VariableDialogDynamicPop", infoIcon, text));
		}
	}
};
oFF.VdOrcaUiHelper.prototype.addDisableExitSection = function()
{
	if (this.isDisableExitSection() || this.isDisableDynamicSection() && this.m_config.isAlignBwHanaDynamicVariables())
	{
		let disableExitLayout = this.m_uiMgr.newControl(oFF.UiType.FLEX_LAYOUT);
		disableExitLayout.setName("VariableDialogExitLayout");
		disableExitLayout.useMaxWidth();
		disableExitLayout.setDirection(oFF.UiFlexDirection.ROW);
		disableExitLayout.setAlignItems(oFF.UiFlexAlignItems.CENTER);
		disableExitLayout.setJustifyContent(oFF.UiFlexJustifyContent.START);
		disableExitLayout.setPadding(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
		this.m_disableExitCb = disableExitLayout.addNewItemOfType(oFF.UiType.CHECKBOX);
		this.m_disableExitCb.setName("VariableDialogExitCb");
		this.m_disableExitCb.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_SHORT));
		this.m_disableExitCb.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_SHORT));
		this.m_disableExitCb.setChecked(this.isDisableDynamicSection() ? this.getDisableDynamicInitialValue() : this.m_config.isDisableExit());
		let isEditable;
		if (this.isDisableDynamicSection())
		{
			this.m_disableExitCb.registerOnChange(this);
			isEditable = !this.m_config.isReadOnly() && (this.m_level === oFF.VdOrcaLevel.DEFAULT || this.m_useBottomLevelVariables) && !this.m_config.isDisableVariablePersistenceOptions();
		}
		else if (this.m_scenario !== oFF.VdOrcaScenario.BOARD_ROOM && this.m_level.isTypeOf(oFF.VdOrcaLevel.WIDGET))
		{
			isEditable = !this.m_config.isReadOnly() && this.m_useBottomLevelVariables && !this.m_config.isDisableVariablePersistenceOptions();
		}
		else
		{
			isEditable = !this.m_config.isReadOnly() && !this.m_config.isDisableVariablePersistenceOptions();
		}
		if (this.m_vdController.getView().isMultiInputComponentEnabled())
		{
			this.m_disableExitCb.setEditable(isEditable);
		}
		else
		{
			this.m_disableExitCb.setEnabled(isEditable);
		}
		let infoIcon = disableExitLayout.addNewItemOfType(oFF.UiType.ICON);
		infoIcon.setName("VariableDialogExitIco");
		infoIcon.setIcon("message-information");
		infoIcon.setIconSize(oFF.UiCssLength.create("1rem"));
		infoIcon.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
		infoIcon.setTooltip(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INFORMATION_ICON_TOOLTIP));
		let text = this.m_config.isDisableVariablePersistenceOptions() ? this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC_DISABLED_LONG) : this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_LONG);
		this.m_popovers.add(oFF.OlapUiIconPopover.createPopoverWithText(this.m_uiMgr, "VariableDialogExitPop", infoIcon, text));
		if (this.m_vdController.getView().isSettingsPopoverEnabled())
		{
			this.m_vdController.getView().getDefaultValuesSection().addItem(disableExitLayout);
			this.m_vdController.getView().getDefaultValuesSection().setVisible(true);
		}
		else
		{
			this.m_orcaLayout.addItem(disableExitLayout);
		}
	}
};
oFF.VdOrcaUiHelper.prototype.addDynamicVariableIcon = function(controller)
{
	if (!controller.getVariable().isDynamicVariable())
	{
		return;
	}
	let dynamicIcon = controller.getView().addNewHeaderIcon();
	dynamicIcon.setName("DynamicVariableInfoIco");
	dynamicIcon.setIcon("synchronize");
	dynamicIcon.setEnabled(!this.m_config.isReadOnly());
	let text = this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_VARIABLE_INFO);
	this.m_popovers.add(oFF.OlapUiIconPopover.createPopoverWithText(this.m_uiMgr, "DynamicVariableInfoPop", dynamicIcon, text));
};
oFF.VdOrcaUiHelper.prototype.addForceSection = function()
{
	if (this.m_config.hideForceSection() || !this.m_config.isStoryEditable() || this.m_scenario === oFF.VdOrcaScenario.LINKED_VARIABLE || this.m_level.isTypeOf(oFF.VdOrcaLevel.WIDGET))
	{
		return;
	}
	let forceCbLayout = this.m_vdController.getView().isSettingsPopoverEnabled() ? this.m_orcaLayoutPopover.addNewItemOfType(oFF.UiType.FLEX_LAYOUT) : this.m_orcaLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	forceCbLayout.setName("VariableDialogForceLayout");
	forceCbLayout.useMaxWidth();
	forceCbLayout.setDirection(oFF.UiFlexDirection.ROW);
	forceCbLayout.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	forceCbLayout.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_forceCb = forceCbLayout.addNewItemOfType(oFF.UiType.CHECKBOX);
	this.m_forceCb.setName("VariableDialogForceCb");
	this.m_forceCb.setWrapping(true);
	this.m_forceCb.setChecked(this.m_config.isForcePrompt());
	let isEditable = !this.m_config.isReadOnly() && !this.m_config.isDisableVariablePersistenceOptions();
	if (this.m_vdController.getView().isMultiInputComponentEnabled())
	{
		this.m_forceCb.setEditable(isEditable);
	}
	else
	{
		this.m_forceCb.setEnabled(isEditable);
	}
	if (this.m_vdController.getView().isSettingsPopoverEnabled())
	{
		this.m_forceCb.setText(this.getForceText());
		this.m_forceCb.setTooltip(this.getForceText());
	}
	else
	{
		forceCbLayout.setPadding(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
		let label = forceCbLayout.addNewItemOfType(oFF.UiType.LABEL);
		label.setText(this.getForceText());
		label.setTooltip(this.getForceText());
		label.setLabelFor(this.m_forceCb);
	}
	if (oFF.XCollectionUtils.hasElements(this.m_config.getLinkTooltips()) || this.m_config.isDisableVariablePersistenceOptions())
	{
		let infoIcon = forceCbLayout.addNewItemOfType(oFF.UiType.ICON);
		infoIcon.setName("VariableDialogForceIco");
		infoIcon.setIcon("message-information");
		infoIcon.setIconSize(oFF.UiCssLength.create("1rem"));
		infoIcon.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
		if (this.m_uiMgr.getDeviceInfo().isMobile())
		{
			infoIcon.setIconSize(oFF.UiCssLength.create(oFF.VdVariableView.MOBILE_ICON_FONT_SIZE));
		}
		let text = this.m_config.isDisableVariablePersistenceOptions() ? this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_DISABLED_LONG) : this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY_INFO);
		this.m_popovers.add(oFF.OlapUiIconPopover.createPopoverWithText(this.m_uiMgr, "VariableDialogForcePop", infoIcon, text));
	}
};
oFF.VdOrcaUiHelper.prototype.addInfoMessageSection = function(text)
{
	if (oFF.XStringUtils.isNullOrEmpty(text))
	{
		return;
	}
	let infoSection = this.m_orcaLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	infoSection.useMaxWidth();
	infoSection.setMinHeight(oFF.UiCssLength.create("40px"));
	infoSection.setDirection(oFF.UiFlexDirection.ROW);
	infoSection.setJustifyContent(oFF.UiFlexJustifyContent.START);
	infoSection.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	infoSection.setPadding(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
	let infoIcon = infoSection.addNewItemOfType(oFF.UiType.ICON);
	infoIcon.setIcon("message-information");
	infoIcon.setEnabled(false);
	if (this.m_uiContext.getDeviceInfo().isMobile())
	{
		infoIcon.setMargin(oFF.UiCssBoxEdges.create("0 0.5rem 0 2rem"));
	}
	else
	{
		infoIcon.setMargin(oFF.UiCssBoxEdges.create("0 0.5rem 0 0.5rem"));
	}
	let infoLabel = infoSection.addNewItemOfType(oFF.UiType.LABEL);
	infoLabel.useMaxWidth();
	infoLabel.setName("VariableDialogInfoLbl");
	infoLabel.setText(text);
	infoLabel.setTextAlign(oFF.UiTextAlign.CENTER);
	infoLabel.setFontStyle(oFF.UiFontStyle.ITALIC);
	infoLabel.setTextAlign(oFF.UiTextAlign.LEFT);
	infoLabel.setWrapping(true);
};
oFF.VdOrcaUiHelper.prototype.addLevelSection = function()
{
	if (this.m_config.hideLevelSection() || this.m_level !== oFF.VdOrcaLevel.CHART && this.m_level !== oFF.VdOrcaLevel.TABLE || this.m_scenario === oFF.VdOrcaScenario.ANALYTIC_APP && !this.m_config.isStoryEditable())
	{
		return;
	}
	let widgetLevelWarnings = this.m_config.getWidgetLevelWarnings();
	if (oFF.notNull(widgetLevelWarnings))
	{
		for (let i = 0; i < widgetLevelWarnings.size(); i++)
		{
			let infoText = widgetLevelWarnings.get(i);
			this.addInfoMessageSection(infoText);
		}
	}
	let group = this.m_orcaLayout.addNewItemOfType(oFF.UiType.RADIO_BUTTON_GROUP);
	group.setColumnCount(2);
	group.setWidth(oFF.UiCssLength.create("100%"));
	group.registerOnSelect(this);
	this.m_storyRb = group.addNewRadioButton();
	this.m_storyRb.setText(this.getStoryText());
	this.m_storyRb.setName("VariableDialogStoryRb");
	this.m_storyRb.setSelected(!this.m_useBottomLevelVariables);
	this.m_storyRb.setEnabled(!this.m_config.isReadOnly());
	this.m_widgetRb = group.addNewRadioButton();
	this.m_widgetRb.setText(this.getWidgetText());
	this.m_widgetRb.setName("VariableDialogWidgetRb");
	this.m_widgetRb.setSelected(this.m_useBottomLevelVariables);
	this.m_widgetRb.setEnabled(!this.m_config.isReadOnly());
	this.m_orcaLayout.addNewItemOfType(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.createExt(15, oFF.UiCssSizeUnit.PIXEL));
};
oFF.VdOrcaUiHelper.prototype.addLinkIconForVariable = function(variableController)
{
	let tooltipLines = this.m_config.getLinkTooltips().getByKey(variableController.getName());
	if (!oFF.XCollectionUtils.hasElements(tooltipLines))
	{
		return;
	}
	oFF.XCollectionUtils.addIfNotNull(this.m_popovers, oFF.VdOrcaUiHelper.showLinkIconForVariable(variableController, tooltipLines, this.m_uiContext));
};
oFF.VdOrcaUiHelper.prototype.addLinkedVariableInfoSection = function()
{
	let text = this.m_config.getLinkedModelsText();
	if (this.m_scenario !== oFF.VdOrcaScenario.LINKED_VARIABLE || oFF.XStringUtils.isNullOrEmpty(text))
	{
		return;
	}
	let linkedModels = this.m_orcaLayout.addNewItemOfType(oFF.UiType.LABEL);
	linkedModels.setName("VariableDialogLinkLbl");
	linkedModels.setText(text);
	this.m_orcaLayout.addNewItemOfType(oFF.UiType.SPACER).setHeight(oFF.UiCssLength.createExt(15, oFF.UiCssSizeUnit.PIXEL));
};
oFF.VdOrcaUiHelper.prototype.addOrcaSpecificUi = function()
{
	if (oFF.isNull(this.m_scenario) || oFF.isNull(this.m_level))
	{
		return;
	}
	this.m_orcaLayout = this.m_vdController.getView().getCustomSection();
	this.m_orcaLayout.setAlignItems(oFF.UiFlexAlignItems.START);
	this.m_orcaLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_orcaLayoutPopover = this.m_vdController.getView().getCustomSectionPopover();
	let offerVariants = this.m_scenario !== oFF.VdOrcaScenario.LINKED_VARIABLE;
	offerVariants = offerVariants && (this.m_level.isTypeOf(oFF.VdOrcaLevel.DEFAULT) || this.m_useBottomLevelVariables);
	offerVariants = offerVariants || this.m_config.showVariantSection();
	this.m_vdController.setVariantsSectionVisible(offerVariants);
	if (this.m_scenario !== oFF.VdOrcaScenario.BOARD_ROOM && this.m_level.isTypeOf(oFF.VdOrcaLevel.WIDGET))
	{
		this.m_vdController.setInputEnabled(!this.m_config.isReadOnly() && this.m_useBottomLevelVariables);
	}
	else
	{
		this.m_vdController.setInputEnabled(!this.m_config.isReadOnly());
	}
	this.m_vdController.setSubmitButtonEnabled(!this.m_config.isReadOnly());
	if (this.m_level !== oFF.VdOrcaLevel.FILTER)
	{
		if (!this.m_vdController.hasVariables())
		{
			let infoText = this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VARIABLES);
			this.addInfoMessageSection(infoText);
		}
		else
		{
			this.addLinkedVariableInfoSection();
			this.addInfoMessageSection(this.m_config.getInfoText());
			this.addLevelSection();
			this.addForceSection();
			this.addDisableExitSection();
			if (!this.m_config.isAlignBwHanaDynamicVariables())
			{
				this.addDisableDynamicSection();
			}
		}
	}
	this.addVariableUi();
};
oFF.VdOrcaUiHelper.prototype.addTextVariableInfo = function(controller)
{
	if (!this.m_level.isTypeOf(oFF.VdOrcaLevel.WIDGET))
	{
		return;
	}
	let infoSection = oFF.VdOrcaUiHelper.addTextVariableInfoSection(controller, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_TEXT_VARIABLE_DISABLED));
	if (oFF.isNull(infoSection))
	{
		return;
	}
	infoSection.setVisible(this.m_useBottomLevelVariables);
	this.m_textVariableDisableInfos.add(infoSection);
};
oFF.VdOrcaUiHelper.prototype.addVariableUi = function()
{
	let controllers = this.m_vdController.getControllers();
	for (let i = 0; i < controllers.size(); i++)
	{
		let controller = controllers.get(i);
		this.addLinkIconForVariable(controller);
		this.addDynamicVariableIcon(controller);
		this.addTextVariableInfo(controller);
	}
};
oFF.VdOrcaUiHelper.prototype.getCheckbox = function()
{
	return this.m_config.isAlignBwHanaDynamicVariables() || this.isDisableExitSection() ? this.m_disableExitCb : this.m_disableDynamicCb;
};
oFF.VdOrcaUiHelper.prototype.getDisableDynamicInitialValue = function()
{
	return this.m_useBottomLevelVariables ? !this.m_config.isBottomLevelUsingDynamicVariables() : !this.m_config.isTopLevelUsingDynamicVariables();
};
oFF.VdOrcaUiHelper.prototype.getForceText = function()
{
	if (this.m_scenario === oFF.VdOrcaScenario.ANALYTIC_APP)
	{
		return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_APP);
	}
	else if (this.m_scenario === oFF.VdOrcaScenario.PLANNING_SEQUENCE)
	{
		if (this.m_vdController.getVariableProcessor().getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.MA_SUPPORT_BI_USER))
		{
			return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NEW_FORCE_PROMPT_PS);
		}
		return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_PS);
	}
	return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY);
};
oFF.VdOrcaUiHelper.prototype.getStoryText = function()
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_config.getCustomStoryButtonText()))
	{
		return this.m_config.getCustomStoryButtonText();
	}
	else if (this.m_scenario === oFF.VdOrcaScenario.BOARD_ROOM)
	{
		return this.m_config.getBoardRoomParentLevelText();
	}
	else if (this.m_scenario === oFF.VdOrcaScenario.ANALYTIC_APP)
	{
		return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_APP_LEVEL);
	}
	return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_STORY_LEVEL);
};
oFF.VdOrcaUiHelper.prototype.getWidgetText = function()
{
	if (this.m_scenario === oFF.VdOrcaScenario.BOARD_ROOM)
	{
		return this.m_config.getBoardRoomChildLevelText();
	}
	else if (this.m_level === oFF.VdOrcaLevel.TABLE)
	{
		return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_TABLE_LEVEL);
	}
	return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CHART_LEVEL);
};
oFF.VdOrcaUiHelper.prototype.isDisableDynamicSection = function()
{
	return this.m_vdController.hasDynamicVariables() && (this.m_config.isStoryEditable() || this.m_config.showDynamicVariableSection()) && this.m_scenario !== oFF.VdOrcaScenario.LINKED_VARIABLE;
};
oFF.VdOrcaUiHelper.prototype.isDisableExitSection = function()
{
	return this.m_vdController.hasExitVariables() && (this.m_config.isStoryEditable() || this.m_config.showExitVariableSection());
};
oFF.VdOrcaUiHelper.prototype.isDisablingDynamicVariables = function()
{
	if (this.getCheckbox() === oFF.UiContextDummy.getSingleton())
	{
		return this.getDisableDynamicInitialValue();
	}
	return this.getCheckbox().isChecked();
};
oFF.VdOrcaUiHelper.prototype.isDisablingExitVariables = function()
{
	if (this.getCheckbox() === oFF.UiContextDummy.getSingleton())
	{
		return this.m_config.isDisableExit();
	}
	return this.getCheckbox().isChecked();
};
oFF.VdOrcaUiHelper.prototype.isForcePrompt = function()
{
	if (this.m_forceCb === oFF.UiContextDummy.getSingleton())
	{
		return this.m_config.isForcePrompt();
	}
	return this.m_forceCb.isChecked();
};
oFF.VdOrcaUiHelper.prototype.isWidgetSelected = function()
{
	return this.m_useBottomLevelVariables;
};
oFF.VdOrcaUiHelper.prototype.onChange = function(event)
{
	let control = event.getControl();
	if (control === this.getCheckbox())
	{
		if (!this.getCheckbox().isChecked() && this.m_scenario !== oFF.VdOrcaScenario.PLANNING_SEQUENCE)
		{
			this.m_vdController.updateDynamicVariables();
		}
	}
};
oFF.VdOrcaUiHelper.prototype.onSelect = function(event)
{
	let control = event.getSelectedItem();
	if (control === this.m_widgetRb || control === this.m_storyRb)
	{
		if (this.m_scenario !== oFF.VdOrcaScenario.BOARD_ROOM)
		{
			this.m_useBottomLevelVariables = this.m_widgetRb.isSelected();
			this.m_vdController.setInputEnabled(this.m_useBottomLevelVariables);
			this.m_vdController.setVariantsSectionVisible(this.m_useBottomLevelVariables);
			let isEditable = this.m_useBottomLevelVariables && !this.m_config.isDisableVariablePersistenceOptions();
			if (this.m_vdController.getView().isMultiInputComponentEnabled())
			{
				this.m_disableExitCb.setEditable(isEditable);
				this.m_disableDynamicCb.setEditable(isEditable);
			}
			else
			{
				this.m_disableExitCb.setEnabled(isEditable);
				this.m_disableDynamicCb.setEnabled(isEditable);
			}
			if (this.isDisableDynamicSection())
			{
				this.getCheckbox().setChecked(this.getDisableDynamicInitialValue());
			}
			for (let i = 0; i < this.m_textVariableDisableInfos.size(); i++)
			{
				this.m_textVariableDisableInfos.get(i).setVisible(this.m_useBottomLevelVariables);
			}
			this.updateValues();
		}
	}
};
oFF.VdOrcaUiHelper.prototype.releaseObject = function()
{
	this.m_uiContext = null;
	this.m_vdController = null;
	oFF.XObjectExt.release(this.m_config);
	this.m_uiMgr = null;
	this.m_i18n = null;
	this.m_scenario = null;
	this.m_level = null;
	this.m_forceCb = null;
	this.m_storyRb = null;
	this.m_widgetRb = null;
	this.m_disableExitCb = null;
	this.m_disableDynamicCb = null;
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_popovers);
	oFF.XObjectExt.release(this.m_textVariableDisableInfos);
	oFF.XObjectExt.release(this.m_orcaLayout);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.VdOrcaUiHelper.prototype.setupUiHelper = function(controller, config)
{
	this.m_vdController = controller;
	this.m_config = config;
	this.m_uiContext = this.m_vdController.getContext();
	this.m_uiMgr = this.m_uiContext.getUiManager();
	this.m_i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_scenario = this.m_config.getScenario();
	this.m_level = this.m_config.getLevel();
	this.m_useBottomLevelVariables = this.m_config.useBottomLevelVariables();
	this.m_textVariableDisableInfos = oFF.XList.create();
	this.m_popovers = oFF.XList.create();
	this.m_forceCb = oFF.UiContextDummy.getSingleton();
	this.m_storyRb = oFF.UiContextDummy.getSingleton();
	this.m_widgetRb = oFF.UiContextDummy.getSingleton();
	this.m_disableExitCb = oFF.UiContextDummy.getSingleton();
	this.m_disableDynamicCb = oFF.UiContextDummy.getSingleton();
};
oFF.VdOrcaUiHelper.prototype.updateValues = function()
{
	if (this.m_useBottomLevelVariables)
	{
		let bottomLevelValues = this.m_config.getBottomLevelValues();
		if (oFF.notNull(bottomLevelValues))
		{
			this.m_vdController.setValues(bottomLevelValues);
		}
	}
	else
	{
		let topLevelValues = this.m_config.getTopLevelValues();
		if (oFF.notNull(topLevelValues))
		{
			this.m_vdController.setValues(topLevelValues);
		}
		else
		{
			this.m_vdController.resetValues();
		}
	}
};

oFF.OuDataProviderOlapUiActionsCollection = function() {};
oFF.OuDataProviderOlapUiActionsCollection.prototype = new oFF.DfOlapDataProviderActionsCollection();
oFF.OuDataProviderOlapUiActionsCollection.prototype._ff_c = "OuDataProviderOlapUiActionsCollection";

oFF.OuDataProviderOlapUiActionsCollection.NAME = "OlapUiActions";
oFF.OuDataProviderOlapUiActionsCollection.getOlapUiActions = function(dataProvider)
{
	return dataProvider.getActions().getActionCollectionByName(oFF.OuDataProviderOlapUiActionsCollection.NAME);
};
oFF.OuDataProviderOlapUiActionsCollection.prototype.getName = function()
{
	return oFF.OuDataProviderOlapUiActionsCollection.NAME;
};
oFF.OuDataProviderOlapUiActionsCollection.prototype.openVariableDialog = function(title, otherArguments)
{
	let action = oFF.OuDataProviderVariableDialogAction.create();
	action.setTypedParameters(title, otherArguments);
	return this.getActions().performTypedAction(action);
};

oFF.OuCalcCalculationsDialogI18n = function() {};
oFF.OuCalcCalculationsDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuCalcCalculationsDialogI18n.prototype._ff_c = "OuCalcCalculationsDialogI18n";

oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_CREATE = "FF_CALCULATIONS_DIALOG_TITLE_CREATE";
oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_DEFAULT = "FF_CALCULATIONS_DIALOG_TITLE";
oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_EDIT = "FF_CALCULATIONS_DIALOG_TITLE_EDIT";
oFF.OuCalcCalculationsDialogI18n.DIALOG_TOOLBAR_MAXIMIZE = "FF_CALCULATIONS_DIALOG_TOOLBAR_MAXIMIZE";
oFF.OuCalcCalculationsDialogI18n.staticSetup = function()
{
	let instance = new oFF.OuCalcCalculationsDialogI18n();
	instance.setupProvider(oFF.OuCalcCalculationsDialog.DEFAULT_PROGRAM_NAME, true);
	instance.addTextWithComment(oFF.OuCalcCalculationsDialogI18n.DIALOG_TOOLBAR_MAXIMIZE, "Maximize", "#XTOL: Tooltip shown on maximize button");
	instance.addTextWithComment(oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_DEFAULT, "Calculation Editor", "#XTIT: The title of the dialog");
	instance.addTextWithComment(oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_CREATE, "Create Calculation", "#XTIT: The title of the dialog when opened on calculation creation");
	instance.addTextWithComment(oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_EDIT, "Edit Calculation", "#XTIT: The title of the dialog when opened on calculation edit");
	return instance;
};

oFF.OuCalcDatasourceHandler = function() {};
oFF.OuCalcDatasourceHandler.prototype = new oFF.OuCalcAbstractDatasourceHandler();
oFF.OuCalcDatasourceHandler.prototype._ff_c = "OuCalcDatasourceHandler";

oFF.OuCalcDatasourceHandler._create = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandler();
	handler.setupInternal(queryModel, calcStructure, false);
	return handler;
};
oFF.OuCalcDatasourceHandler.createPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandler();
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandler.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProvider._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandler.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProvider.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.OuCalcDatasourceHandlerBW = function() {};
oFF.OuCalcDatasourceHandlerBW.prototype = new oFF.OuCalcAbstractDatasourceHandler();
oFF.OuCalcDatasourceHandlerBW.prototype._ff_c = "OuCalcDatasourceHandlerBW";

oFF.OuCalcDatasourceHandlerBW._create = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandlerBW();
	handler.setupInternal(queryModel, calcStructure, false);
	oFF.XObjectExt.assertTrueExt(queryModel.getSystemType().isTypeOf(oFF.SystemType.BW), "This provider only supports BW");
	return handler;
};
oFF.OuCalcDatasourceHandlerBW.createPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandlerBW();
	oFF.XObjectExt.assertTrueExt(queryModel.getSystemType().isTypeOf(oFF.SystemType.BW), "This provider only supports BW");
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandlerBW.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProviderBW._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandlerBW.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProviderBW.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.OuCalcDatasourceHandlerHANA = function() {};
oFF.OuCalcDatasourceHandlerHANA.prototype = new oFF.OuCalcAbstractDatasourceHandler();
oFF.OuCalcDatasourceHandlerHANA.prototype._ff_c = "OuCalcDatasourceHandlerHANA";

oFF.OuCalcDatasourceHandlerHANA._create = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandlerHANA();
	handler.setupInternal(queryModel, calcStructure, false);
	return handler;
};
oFF.OuCalcDatasourceHandlerHANA.createPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandlerHANA();
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandlerHANA.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProviderHANA._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandlerHANA.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProviderHANA.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.OuCalcDatasourceHandlerModelAccount = function() {};
oFF.OuCalcDatasourceHandlerModelAccount.prototype = new oFF.OuCalcAbstractDatasourceHandler();
oFF.OuCalcDatasourceHandlerModelAccount.prototype._ff_c = "OuCalcDatasourceHandlerModelAccount";

oFF.OuCalcDatasourceHandlerModelAccount._create = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandlerModelAccount();
	handler.setupInternal(queryModel, calcStructure, false);
	oFF.XObjectExt.assertTrueExt(calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider only support account structures");
	return handler;
};
oFF.OuCalcDatasourceHandlerModelAccount.createPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandlerModelAccount();
	oFF.XObjectExt.assertTrueExt(calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider only support account structures");
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandlerModelAccount.prototype.createCalculationInternal = function(calculationId, calculationDesc, previousCalculationId, formulaWrapper, formulaText)
{
	let formulaMeasure = oFF.OuCalcAbstractDatasourceHandler.prototype.createCalculationInternal.call( this , calculationId, calculationDesc, previousCalculationId, formulaWrapper, formulaText);
	formulaMeasure.setAliasName(calculationId);
	this.m_calcStructure.assignPlaceholderIdByAlias(this.m_calcStructure.getNextFreePlaceholderId(), formulaMeasure.getAliasName());
	let restrictedMeasures = this.m_restrictedMeasures.getIterator();
	while (restrictedMeasures.hasNext())
	{
		let restrictedMeasure = restrictedMeasures.next();
		restrictedMeasure.setAutoSignFlip(true);
		restrictedMeasure.setAliasName(restrictedMeasure.getName());
		this.m_calcStructure.assignPlaceholderIdByAlias(this.m_calcStructure.getNextFreePlaceholderId(), restrictedMeasure.getName());
	}
	formulaMeasure.setAutoSignFlip(true);
	return formulaMeasure;
};
oFF.OuCalcDatasourceHandlerModelAccount.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProviderModelAccount._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandlerModelAccount.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProviderModelAccount.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.OuCalcDatasourceHandlerModelMeasure = function() {};
oFF.OuCalcDatasourceHandlerModelMeasure.prototype = new oFF.OuCalcAbstractDatasourceHandler();
oFF.OuCalcDatasourceHandlerModelMeasure.prototype._ff_c = "OuCalcDatasourceHandlerModelMeasure";

oFF.OuCalcDatasourceHandlerModelMeasure._create = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandlerModelMeasure();
	handler.setupInternal(queryModel, calcStructure, false);
	oFF.XObjectExt.assertTrue(queryModel.hasUserDefinedMeasures());
	oFF.XObjectExt.assertTrueExt(!calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider handles the measures structure in acquired models");
	return handler;
};
oFF.OuCalcDatasourceHandlerModelMeasure.createPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandlerModelMeasure();
	oFF.XObjectExt.assertTrue(queryModel.hasUserDefinedMeasures());
	oFF.XObjectExt.assertTrueExt(!calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider handles the measures structure in acquired models");
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandlerModelMeasure.prototype.createCalculationInternal = function(calculationId, calculationDesc, previousCalculationId, formulaWrapper, formulaText)
{
	let formulaMeasure = oFF.OuCalcAbstractDatasourceHandler.prototype.createCalculationInternal.call( this , calculationId, calculationDesc, previousCalculationId, formulaWrapper, formulaText);
	let restrictedMeasures = this.m_restrictedMeasures.getIterator();
	while (restrictedMeasures.hasNext())
	{
		let restrictedMeasure = restrictedMeasures.next();
		restrictedMeasure.setAutoSignFlip(true);
	}
	formulaMeasure.setAutoSignFlip(true);
	return formulaMeasure;
};
oFF.OuCalcDatasourceHandlerModelMeasure.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProviderModelMeasure._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandlerModelMeasure.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProviderModelMeasure.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.OuCalcCalculationsView = function() {};
oFF.OuCalcCalculationsView.prototype = new oFF.DfUiView();
oFF.OuCalcCalculationsView.prototype._ff_c = "OuCalcCalculationsView";

oFF.OuCalcCalculationsView.LEFT_PANEL_WIDTH_DEFAULT = "20%";
oFF.OuCalcCalculationsView.RIGHT_PANEL_WIDTH_DEFAULT = "20%";
oFF.OuCalcCalculationsView.create = function(leftPanelWidth, rightPanelWidth, isLefPanelInitialCollapsed, isRightPanelInitialCollapsed, preferences)
{
	let instance = new oFF.OuCalcCalculationsView();
	instance.m_leftPanelWidth = oFF.notNull(leftPanelWidth) ? leftPanelWidth : oFF.OuCalcCalculationsView.LEFT_PANEL_WIDTH_DEFAULT;
	instance.m_rightPanelWidth = oFF.notNull(rightPanelWidth) ? rightPanelWidth : oFF.OuCalcCalculationsView.RIGHT_PANEL_WIDTH_DEFAULT;
	instance.m_isRightPanelInitialCollapsed = isRightPanelInitialCollapsed;
	instance.m_isLeftPanelInitialCollapsed = isLefPanelInitialCollapsed;
	instance.m_preferences = oFF.notNull(preferences) ? preferences : oFF.FePreferences.createDefault();
	return instance;
};
oFF.OuCalcCalculationsView.prototype.m_assistancePanelArea = null;
oFF.OuCalcCalculationsView.prototype.m_centralPanelSplitterItem = null;
oFF.OuCalcCalculationsView.prototype.m_codeEditorArea = null;
oFF.OuCalcCalculationsView.prototype.m_detailsArea = null;
oFF.OuCalcCalculationsView.prototype.m_formulaItemListArea = null;
oFF.OuCalcCalculationsView.prototype.m_isLeftPanelInitialCollapsed = false;
oFF.OuCalcCalculationsView.prototype.m_isRightPanelInitialCollapsed = false;
oFF.OuCalcCalculationsView.prototype.m_leftPanelSplitterItem = null;
oFF.OuCalcCalculationsView.prototype.m_leftPanelWidth = null;
oFF.OuCalcCalculationsView.prototype.m_mainSplitter = null;
oFF.OuCalcCalculationsView.prototype.m_preferences = null;
oFF.OuCalcCalculationsView.prototype.m_rightPanelSplitterItem = null;
oFF.OuCalcCalculationsView.prototype.m_rightPanelWidth = null;
oFF.OuCalcCalculationsView.prototype.m_rightSplitter = null;
oFF.OuCalcCalculationsView.prototype.m_rightSplitterItem = null;
oFF.OuCalcCalculationsView.prototype.addItemToSplitter = function(splitter, content)
{
	let item = splitter.addNewItem();
	item.setContent(content);
	return item;
};
oFF.OuCalcCalculationsView.prototype.createBottomLayout = function()
{
	this.m_mainSplitter = this.getGenesis().newControl(oFF.UiType.INTERACTIVE_SPLITTER);
	this.m_mainSplitter.setOrientation(oFF.UiOrientation.HORIZONTAL);
	this.m_mainSplitter.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.LAYOUT_BOTTOM_CSS_CLASS);
	this.m_mainSplitter.setEnableReordering(false);
	this.m_leftPanelSplitterItem = this.addItemToSplitter(this.m_mainSplitter, this.m_formulaItemListArea);
	this.m_leftPanelSplitterItem.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.PANEL_ITEM_LEFT_CSS_CLASS);
	this.m_rightSplitter = this.getGenesis().newControl(oFF.UiType.INTERACTIVE_SPLITTER);
	this.m_rightSplitter.setOrientation(oFF.UiOrientation.HORIZONTAL);
	this.m_rightSplitter.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.LAYOUT_BOTTOM_CSS_CLASS);
	this.m_rightSplitter.setEnableReordering(false);
	this.m_rightSplitterItem = this.addItemToSplitter(this.m_mainSplitter, this.m_rightSplitter);
	let centralPanelLayout = this.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
	centralPanelLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	centralPanelLayout.addItem(this.m_codeEditorArea);
	this.m_centralPanelSplitterItem = this.addItemToSplitter(this.m_rightSplitter, centralPanelLayout);
	this.m_centralPanelSplitterItem.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.PANEL_ITEM_CENTRAL_CSS_CLASS);
	this.m_rightPanelSplitterItem = this.addItemToSplitter(this.m_rightSplitter, this.m_assistancePanelArea);
	this.m_rightPanelSplitterItem.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.PANEL_ITEM_RIGHT_CSS_CLASS);
	return this.m_mainSplitter;
};
oFF.OuCalcCalculationsView.prototype.createContentWrapper = function(cssClass)
{
	let contentWrapper = this.getGenesis().newControl(oFF.UiType.CONTENT_WRAPPER);
	contentWrapper.useMaxSpace();
	contentWrapper.addCssClass(cssClass);
	return contentWrapper;
};
oFF.OuCalcCalculationsView.prototype.destroyView = function()
{
	this.m_mainSplitter = null;
	this.m_leftPanelSplitterItem = null;
	this.m_rightPanelSplitterItem = null;
	this.m_centralPanelSplitterItem = null;
	this.m_detailsArea = null;
	this.m_codeEditorArea = null;
	this.m_assistancePanelArea = null;
	this.m_formulaItemListArea = null;
	this.m_preferences = null;
};
oFF.OuCalcCalculationsView.prototype.getContentWrapperMap = function()
{
	let map = oFF.XSimpleMap.create();
	if (this.m_preferences.isDetailsEnabled())
	{
		map.put(oFF.OuCalcUiComponent.DETAILS_PANEL, this.m_detailsArea);
	}
	map.put(oFF.OuCalcUiComponent.CODE_EDITOR, this.m_codeEditorArea);
	map.put(oFF.OuCalcUiComponent.ASSISTANCE_PANEL, this.m_assistancePanelArea);
	map.put(oFF.OuCalcUiComponent.FORMULA_ELEMENTS_PANEL, this.m_formulaItemListArea);
	return map;
};
oFF.OuCalcCalculationsView.prototype.getViewControl = function(genesis)
{
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	mainLayout.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.CALCULATION_DIALOG_V2_CSS_CLASS);
	mainLayout.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.MAIN_LAYOUT_CSS_CLASS);
	return mainLayout;
};
oFF.OuCalcCalculationsView.prototype.layoutView = function(viewControl)
{
	if (this.m_preferences.isDetailsEnabled())
	{
		this.m_detailsArea = this.createContentWrapper(oFF.OuCalcCalculationsDialogViewConstants.DETAILS_AREA_CSS_CLASS);
	}
	this.m_codeEditorArea = this.createContentWrapper(oFF.OuCalcCalculationsDialogViewConstants.CODE_EDITOR_AREA_CSS_CLASS);
	this.m_assistancePanelArea = this.createContentWrapper(oFF.OuCalcCalculationsDialogViewConstants.ASSISTANCE_PANEL_AREA_CSS_CLASS);
	this.m_formulaItemListArea = this.createContentWrapper(oFF.OuCalcCalculationsDialogViewConstants.FORMULA_ITEM_LIST_AREA_CSS_CLASS);
	if (this.m_preferences.isDetailsEnabled())
	{
		let topLayout = viewControl.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
		topLayout.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.LAYOUT_TOP_CSS_CLASS);
		topLayout.addItem(this.m_detailsArea);
	}
	viewControl.addItem(this.createBottomLayout());
	this.m_leftPanelSplitterItem.setWidth(oFF.UiCssLength.create(this.m_leftPanelWidth));
	this.m_rightPanelSplitterItem.setWidth(oFF.UiCssLength.create(this.m_rightPanelWidth));
	this.setRightPanelCollapsed(this.m_isRightPanelInitialCollapsed);
	this.setLeftPanelCollapsed(this.m_isLeftPanelInitialCollapsed);
};
oFF.OuCalcCalculationsView.prototype.onCalculationUiEvents = function(eventName, eventData)
{
	if (oFF.XString.isEqual(eventName, oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED))
	{
		let itemListCollapsed = eventData;
		this.setLeftPanelCollapsed(itemListCollapsed.getBoolean());
	}
	else if (oFF.XString.isEqual(eventName, oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED))
	{
		let assistanceCollapsed = eventData;
		this.setRightPanelCollapsed(assistanceCollapsed.getBoolean());
	}
};
oFF.OuCalcCalculationsView.prototype.resetBottomRightSplitterWidth = function()
{
	this.m_rightSplitterItem.setWidth(null);
};
oFF.OuCalcCalculationsView.prototype.resetCentralSplitterWidth = function()
{
	this.m_centralPanelSplitterItem.setWidth(null);
};
oFF.OuCalcCalculationsView.prototype.setLeftPanelCollapsed = function(collapsed)
{
	if (collapsed)
	{
		this.m_leftPanelSplitterItem.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.COLLAPSED_CSS_CLASS);
		this.m_mainSplitter.hideResizerAtIndex(0);
		this.resetBottomRightSplitterWidth();
	}
	else
	{
		this.m_leftPanelSplitterItem.removeCssClass(oFF.OuCalcCalculationsDialogViewConstants.COLLAPSED_CSS_CLASS);
		this.m_mainSplitter.showResizerAtIndex(0);
	}
};
oFF.OuCalcCalculationsView.prototype.setRightPanelCollapsed = function(collapsed)
{
	if (collapsed)
	{
		this.m_rightSplitter.hideResizerAtIndex(0);
		this.m_rightPanelSplitterItem.addCssClass(oFF.OuCalcCalculationsDialogViewConstants.COLLAPSED_CSS_CLASS);
		this.resetBottomRightSplitterWidth();
		this.resetCentralSplitterWidth();
	}
	else
	{
		this.m_rightPanelSplitterItem.removeCssClass(oFF.OuCalcCalculationsDialogViewConstants.COLLAPSED_CSS_CLASS);
		this.m_rightSplitter.showResizerAtIndex(0);
	}
};
oFF.OuCalcCalculationsView.prototype.setupView = function() {};

oFF.ClipboardDialogI18n = function() {};
oFF.ClipboardDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.ClipboardDialogI18n.prototype._ff_c = "ClipboardDialogI18n";

oFF.ClipboardDialogI18n.I18N_CB_CLIPBOARD = "FIREFLY_DIALOGS_CLIPBOARD";
oFF.ClipboardDialogI18n.staticSetup = function()
{
	let provider = new oFF.ClipboardDialogI18n();
	provider.setupProvider(oFF.CbController.COMPONENT_NAME, true);
	provider.addComment(oFF.ClipboardDialogI18n.I18N_CB_CLIPBOARD, "#XMSG: Title text of the clipboard dialog used in the variable dialog");
	provider.addText(oFF.ClipboardDialogI18n.I18N_CB_CLIPBOARD, "Clipboard");
	return provider;
};

oFF.OuCurrencyConversionDialogI18n = function() {};
oFF.OuCurrencyConversionDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuCurrencyConversionDialogI18n.prototype._ff_c = "OuCurrencyConversionDialogI18n";

oFF.OuCurrencyConversionDialogI18n.TARGET_CURRENCY_LABEL = "FF_CURR_DIALOG_TARGET_CURRENCY_LABEL";
oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_DEFAULT_VALUE = "FF_CURR_DIALOG_TARGET_DROPDOWN_DEFAULT_VALUE";
oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_VALUE = "FF_CURR_DIALOG_TARGET_DROPDOWN_VALUE";
oFF.OuCurrencyConversionDialogI18n.TITLE = "FF_CURR_DIALOG_TITLE";
oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_ENABLED = "FF_CURR_DIALOG_TOAST_ERROR_TRANSLATION_NOT_ENABLED";
oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_SUPPORTED = "FF_CURR_DIALOG_TOAST_ERROR_TRANSLATION_NOT_SUPPORTED";
oFF.OuCurrencyConversionDialogI18n.TRANSLATION_TYPE_LABEL = "FF_CURR_DIALOG_TRANSLATION_TYPE_LABEL";
oFF.OuCurrencyConversionDialogI18n.TYPE_DROPDOWN_DEFAULT_VALUE = "FF_CURR_DIALOG_TYPE_DROPDOWN_DEFAULT_VALUE";
oFF.OuCurrencyConversionDialogI18n.staticSetup = function()
{
	let tmpProvider = new oFF.OuCurrencyConversionDialogI18n();
	tmpProvider.setupProvider(oFF.OuCurrencyConversionDialog.DEFAULT_PROGRAM_NAME, true);
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TITLE, "Select Conversions");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TITLE, "#XTIT: Title of the currency conversion dialog");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TARGET_CURRENCY_LABEL, "Target Currency");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TARGET_CURRENCY_LABEL, "#XFLD: Label for the first dropdown field. The target currency");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TRANSLATION_TYPE_LABEL, "Currency Translation Type");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TRANSLATION_TYPE_LABEL, "#XFLD: Label for the second dropdown field. The translation type is the rule set up to deal with currency conversion");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_DEFAULT_VALUE, "Display Original Currency");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_DEFAULT_VALUE, "#XSEL: Default dropdown value for target currency indicating no currency conversion is being done");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TYPE_DROPDOWN_DEFAULT_VALUE, "No Conversion");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TYPE_DROPDOWN_DEFAULT_VALUE, "#XSEL: Default dropdown value for translation type indicating no currency conversion is being done");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_VALUE, "{0} | {1}");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_VALUE, "#XSEL: Dropdown value for target currency, with key and description as placeholders");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_SUPPORTED, "The query does not support Currency Translation.");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_SUPPORTED, "#XMSG: A toast to say the query does not support currency translation");
	tmpProvider.addText(oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_ENABLED, "A Currency Translation cannot be applied on this query.");
	tmpProvider.addComment(oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_ENABLED, "#XMSG: A toast to say the query has currency translation disabled");
	return tmpProvider;
};

oFF.DataCellDialogI18n = function() {};
oFF.DataCellDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.DataCellDialogI18n.prototype._ff_c = "DataCellDialogI18n";

oFF.DataCellDialogI18n.I18N_DCD_CALCULATIONS = "I18N_DCD_CALCULATIONS";
oFF.DataCellDialogI18n.I18N_DCD_CLOSE = "I18N_DCD_CLOSE";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL = "I18N_DCD_DECIMAL";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_0 = "I18N_DCD_DECIMAL_0";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_1 = "I18N_DCD_DECIMAL_1";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_2 = "I18N_DCD_DECIMAL_2";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_3 = "I18N_DCD_DECIMAL_3";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_4 = "I18N_DCD_DECIMAL_4";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_5 = "I18N_DCD_DECIMAL_5";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_6 = "I18N_DCD_DECIMAL_6";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_7 = "I18N_DCD_DECIMAL_7";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_8 = "I18N_DCD_DECIMAL_8";
oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_9 = "I18N_DCD_DECIMAL_9";
oFF.DataCellDialogI18n.I18N_DCD_DEFAULT_TO_METATA = "I18N_DCD_DEFAULT_TO_METATA";
oFF.DataCellDialogI18n.I18N_DCD_DISAGGREGATION_MODE = "I18N_DCD_DISAGGREGATION_MODE";
oFF.DataCellDialogI18n.I18N_DCD_DM_ABS = "I18N_DCD_DM_ABS";
oFF.DataCellDialogI18n.I18N_DCD_DM_COPY = "I18N_DCD_DM_COPY";
oFF.DataCellDialogI18n.I18N_DCD_DM_DELTA = "I18N_DCD_DM_DELTA";
oFF.DataCellDialogI18n.I18N_DCD_DM_NONE = "I18N_DCD_DM_NONE";
oFF.DataCellDialogI18n.I18N_DCD_NUMBER_FORMAT = "I18N_DCD_NUMBER_FORMAT";
oFF.DataCellDialogI18n.I18N_DCD_PROPERTIES = "I18N_DCD_PROPERTIES";
oFF.DataCellDialogI18n.I18N_DCD_RC_AVG_ALL_VALUES = "I18N_DCD_RC_AVG_ALL_VALUES";
oFF.DataCellDialogI18n.I18N_DCD_RC_AVG_ALL_VALUES_NOT_ZERO = "I18N_DCD_RC_AVG_ALL_VALUES_NOT_ZERO";
oFF.DataCellDialogI18n.I18N_DCD_RC_COUNT_ALL_VALUES = "I18N_DCD_RC_COUNT_ALL_VALUES";
oFF.DataCellDialogI18n.I18N_DCD_RC_COUNT_ALL_VALUES_NOT_ZERO = "I18N_DCD_RC_COUNT_ALL_VALUES_NOT_ZERO ";
oFF.DataCellDialogI18n.I18N_DCD_RC_FV = "I18N_DCD_RC_FV";
oFF.DataCellDialogI18n.I18N_DCD_RC_LV = "I18N_DCD_RC_LV";
oFF.DataCellDialogI18n.I18N_DCD_RC_MAX = "I18N_DCD_RC_MAX";
oFF.DataCellDialogI18n.I18N_DCD_RC_MIN = "I18N_DCD_RC_MIN";
oFF.DataCellDialogI18n.I18N_DCD_RC_SD = "I18N_DCD_RC_SD";
oFF.DataCellDialogI18n.I18N_DCD_RC_SUM = "I18N_DCD_RC_SUM";
oFF.DataCellDialogI18n.I18N_DCD_RC_SUM_ROUNDED_VALUES = "I18N_DCD_RC_SUM_ROUNDED_VALUES";
oFF.DataCellDialogI18n.I18N_DCD_RC_SUPPRESS_RESULT = "I18N_DCD_RC_SUPPRESS_RESULT";
oFF.DataCellDialogI18n.I18N_DCD_RC_VARIANCE = "I18N_DCD_RC_VARIANCE";
oFF.DataCellDialogI18n.I18N_DCD_RESET_ALL = "I18N_DCD_RESET_ALL";
oFF.DataCellDialogI18n.I18N_DCD_RESULT_CALCULATION = "I18N_DCD_RESULT_CALCULATION";
oFF.DataCellDialogI18n.I18N_DCD_SCALING = "I18N_DCD_SCALING";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1 = "I18N_DCD_SCALING_IN_1";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10 = "I18N_DCD_SCALING_IN_10";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100 = "I18N_DCD_SCALING_IN_100";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000 = "I18N_DCD_SCALING_IN_1000";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10000 = "I18N_DCD_SCALING_IN_10000";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100000 = "I18N_DCD_SCALING_IN_100000";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000000 = "I18N_DCD_SCALING_IN_1000000";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10000000 = "I18N_DCD_SCALING_IN_10000000";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100000000 = "I18N_DCD_SCALING_IN_100000000";
oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000000000 = "I18N_DCD_SCALING_IN_1000000000";
oFF.DataCellDialogI18n.I18N_DCD_SETTINGS_OF = "I18N_DCD_SETTINGS_OF";
oFF.DataCellDialogI18n.I18N_DCD_SINGLE_VALUE_CALCULATION = "I18N_DCD_SINGLE_VALUE_CALCULATION";
oFF.DataCellDialogI18n.I18N_DCD_SVC_AVG_ALL_VALUES = "I18N_DCD_SVC_AVG_ALL_VALUES";
oFF.DataCellDialogI18n.I18N_DCD_SVC_AVG_ALL_VALUES_NOT_ZERO = "I18N_DCD_SVC_AVG_ALL_VALUES_NOT_ZERO";
oFF.DataCellDialogI18n.I18N_DCD_SVC_COUNT_ALL_VALUES = "I18N_DCD_SVC_COUNT_ALL_VALUES";
oFF.DataCellDialogI18n.I18N_DCD_SVC_COUNT_ALL_VALUES_NOT_ZERO = "I18N_DCD_SVC_COUNT_ALL_VALUES_NOT_ZERO ";
oFF.DataCellDialogI18n.I18N_DCD_SVC_MAX = "I18N_DCD_SVC_MAX";
oFF.DataCellDialogI18n.I18N_DCD_SVC_MIN = "I18N_DCD_SVC_MIN";
oFF.DataCellDialogI18n.I18N_DCD_SVC_NORMALIZATION_OF_OVERALL_RESULT = "I18N_DCD_SVC_NORMALIZATION_OF_OVERALL_RESULT";
oFF.DataCellDialogI18n.I18N_DCD_SVC_RANKEDLIST = "I18N_DCD_SVC_RANKEDLIST";
oFF.DataCellDialogI18n.I18N_DCD_SVC_RANKEDLIST_OLYMPIC = "I18N_DCD_SVC_RANKEDLIST_OLYMPIC";
oFF.DataCellDialogI18n.I18N_DCD_SVC_SUM = "I18N_DCD_SVC_SUM";
oFF.DataCellDialogI18n.I18N_DCD_SVC_SUPPRESS_RESULT = "I18N_DCD_SVC_SUPPRESS_RESULT";
oFF.DataCellDialogI18n.I18N_DCD_UNDEFINED = "I18N_DCD_UNDEFINED";
oFF.DataCellDialogI18n.I18N_DCD_VALUETYPE = "I18N_DCD_VALUETYPE";
oFF.DataCellDialogI18n.PROVIDER_NAME = "DataCellDialogI18n";
oFF.DataCellDialogI18n.getLocalization = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName(oFF.DataCellDialogI18n.PROVIDER_NAME);
};
oFF.DataCellDialogI18n.staticSetupDcd = function()
{
	let provider = new oFF.DataCellDialogI18n();
	provider.setupProvider(oFF.DataCellDialogI18n.PROVIDER_NAME, false);
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_PROPERTIES, "Properties");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_NUMBER_FORMAT, "Number Format");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SETTINGS_OF, "Settings of");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_CLOSE, "Close");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_VALUETYPE, "Value Type");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL, "Number of Decimal Places");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING, "Scaling Factor");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_CALCULATIONS, "Calculations (Includes Displayed Data Only)");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RESULT_CALCULATION, "Calculate Results as");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SINGLE_VALUE_CALCULATION, "Calculate Single Value as");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DISAGGREGATION_MODE, "Disaggregation Mode");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RESET_ALL, "Reset All Settings");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DEFAULT_TO_METATA, "Default");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_UNDEFINED, "Undefined");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_0, "0");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_1, "0.0");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_2, "0.00");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_3, "0.000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_4, "0.0000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_5, "0.00000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_6, "0.000000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_7, "0.0000000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_8, "0.00000000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DECIMAL_9, "0.000000000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1, "in 1");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10, "in 10");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100, "in 100");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000, "in 1,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10000, "in 10,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100000, "in 100,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000000, "in 1,000,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_10000000, "in 10,000,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_100000000, "in 100,000,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SCALING_IN_1000000000, "in 1,000,000,000");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_SUM, "Summation");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_MAX, "Maximum");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_MIN, "Minimum");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_COUNT_ALL_VALUES, "Counting all Values");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_COUNT_ALL_VALUES_NOT_ZERO, "Counting all Values <> 0");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_AVG_ALL_VALUES, "Average of all Values");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_AVG_ALL_VALUES_NOT_ZERO, "Average of all Values <> 0");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_SD, "Standard Deviation");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_VARIANCE, "Variance");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_FV, "First Value");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_LV, "Last Value");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_SUM_ROUNDED_VALUES, "Summation of Rounded Values");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_RC_SUPPRESS_RESULT, "Suppress Result");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_SUM, "Summation");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_MAX, "Maximum");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_MIN, "Minimum");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_COUNT_ALL_VALUES, "Counting all Values");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_COUNT_ALL_VALUES_NOT_ZERO, "Counting all Values <> 0");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_AVG_ALL_VALUES, "Average of all Values");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_AVG_ALL_VALUES_NOT_ZERO, "Average of all Values <> 0");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_SUPPRESS_RESULT, "Suppress Result");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_RANKEDLIST_OLYMPIC, "Ranked List (Olympic)");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_RANKEDLIST, "Ranked List");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_SVC_NORMALIZATION_OF_OVERALL_RESULT, "Normalization of Overall Result");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DM_NONE, "None");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DM_ABS, "Absolute");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DM_COPY, "Copy");
	provider.addText(oFF.DataCellDialogI18n.I18N_DCD_DM_DELTA, "Delta");
	return provider;
};

oFF.AuDatasourcePickerI18n = function() {};
oFF.AuDatasourcePickerI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.AuDatasourcePickerI18n.prototype._ff_c = "AuDatasourcePickerI18n";

oFF.AuDatasourcePickerI18n.CATALOG = "FF_DATASOURCE_PICKER_CATALOG";
oFF.AuDatasourcePickerI18n.RECENT = "FF_DATASOURCE_PICKER_RECENT";
oFF.AuDatasourcePickerI18n.staticSetup = function()
{
	let tmpProvider = new oFF.AuDatasourcePickerI18n();
	tmpProvider.setupProvider(oFF.AuDatasourcePicker.DEFAULT_PROGRAM_NAME, false);
	tmpProvider.addText(oFF.AuDatasourcePickerI18n.CATALOG, "Catalog");
	tmpProvider.addText(oFF.AuDatasourcePickerI18n.RECENT, "Recent");
	return tmpProvider;
};

oFF.OuDimensionDialog2I18n = function() {};
oFF.OuDimensionDialog2I18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuDimensionDialog2I18n.prototype._ff_c = "OuDimensionDialog2I18n";

oFF.OuDimensionDialog2I18n.ALL_NODES = "FF_DD_ALL_NODES";
oFF.OuDimensionDialog2I18n.BREAK_GROUPING = "FF_DD_BREAK_GROUPING";
oFF.OuDimensionDialog2I18n.CONDENSE_NODES = "FF_DD_CONDENSE_NODES";
oFF.OuDimensionDialog2I18n.CONTENT = "FF_DD_CONTENT";
oFF.OuDimensionDialog2I18n.DIMENSION = "FF_DD_DIMENSION";
oFF.OuDimensionDialog2I18n.DISPLAY = "FF_DD_DISPLAY";
oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY = "FF_DD_DISPLAY_HIERARCHICALLY";
oFF.OuDimensionDialog2I18n.ENTER_HIERARCHY_NAME = "FF_DD_ENTER_HIERARCHY_NAME";
oFF.OuDimensionDialog2I18n.HIERARCHIES = "FF_DD_HIERARCHIES";
oFF.OuDimensionDialog2I18n.HIERARCHY = "FF_DD_HIERARCHY";
oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED = "FF_DD_INCLUDE_UNBOOKED";
oFF.OuDimensionDialog2I18n.INFO_HIERARCHY_FIXED = "FF_DD_INFO_HIERARCHY_FIXED";
oFF.OuDimensionDialog2I18n.INFO_HIERARCHY_ON_STRUCTURE = "FF_DD_INFO_HIERARCHY_ON_STRUCTURE";
oFF.OuDimensionDialog2I18n.KEY = "FF_DD_CONTENT_KEY";
oFF.OuDimensionDialog2I18n.KEY_AND_TEXT = "FF_DD_CONTENT_KEY_AND_TEXT";
oFF.OuDimensionDialog2I18n.NODES_TO_SHOW = "FF_DD_NODES_TO_SHOW";
oFF.OuDimensionDialog2I18n.NODE_POSITION = "FF_DD_NODE_POSITION";
oFF.OuDimensionDialog2I18n.NODE_POSITION_ABOVE = "FF_DD_NODE_POSITION_ABOVE";
oFF.OuDimensionDialog2I18n.NODE_POSITION_BELOW = "FF_DD_NODE_POSITION_BELOW";
oFF.OuDimensionDialog2I18n.ONLY_ROOT_NODES = "FF_DD_ONLY_ROOT_NODES";
oFF.OuDimensionDialog2I18n.ROOT_AND_X_CHILD_LEVEL = "FF_DD_ROOT_AND_X_CHILD_LEVEL";
oFF.OuDimensionDialog2I18n.SORTING = "FF_DD_SORTING";
oFF.OuDimensionDialog2I18n.SORT_BY = "FF_DD_SORT_BY";
oFF.OuDimensionDialog2I18n.SORT_BY_FILTER = "FF_DD_SORT_BY_FILTER";
oFF.OuDimensionDialog2I18n.SORT_BY_HIERARCHY = "FF_DD_SORT_BY_HIERARCHY";
oFF.OuDimensionDialog2I18n.SORT_DIRECTION = "FF_DD_SORT_DIRECTION";
oFF.OuDimensionDialog2I18n.SORT_DIRECTION_ASCENDING = "FF_DD_SORT_DIRECTION_ASCENDING";
oFF.OuDimensionDialog2I18n.SORT_DIRECTION_DESCENDING = "FF_DD_SORT_DIRECTION_DESCENDING";
oFF.OuDimensionDialog2I18n.SORT_DIRECTION_NONE = "FF_DD_SORT_DIRECTION_NONE";
oFF.OuDimensionDialog2I18n.TEXT = "FF_DD_CONTENT_TEXT";
oFF.OuDimensionDialog2I18n.TEXT_AND_KEY = "FF_DD_CONTENT_TEXT_AND_KEY";
oFF.OuDimensionDialog2I18n.TEXT_TYPE = "FF_DD_TYPE";
oFF.OuDimensionDialog2I18n.TEXT_TYPE_LONG = "FF_DD_TYPE_LONG";
oFF.OuDimensionDialog2I18n.TEXT_TYPE_MEDIUM = "FF_DD_TYPE_MEDIUM";
oFF.OuDimensionDialog2I18n.TEXT_TYPE_SHORT = "FF_DD_TYPE_SHORT";
oFF.OuDimensionDialog2I18n.TEXT_TYPE_XXL = "FF_DD_TYPE_XXL";
oFF.OuDimensionDialog2I18n.TITLE = "FF_DD_TITLE";
oFF.OuDimensionDialog2I18n.TOTALS = "FF_DD_TOTALS";
oFF.OuDimensionDialog2I18n.TOTALS_HIDDEN = "FF_DD_TOTALS_HIDDEN";
oFF.OuDimensionDialog2I18n.TOTALS_MORE_THAN_ONE = "FF_DD_TOTALS_MORE_THAN_ONE";
oFF.OuDimensionDialog2I18n.TOTALS_POSITION = "FF_DD_TOTALS_POSITION";
oFF.OuDimensionDialog2I18n.TOTALS_POSITION_BOT = "FF_DD_TOTALS_POSITION_BOT";
oFF.OuDimensionDialog2I18n.TOTALS_POSITION_TOP = "FF_DD_TOTALS_POSITION_TOP";
oFF.OuDimensionDialog2I18n.TOTALS_VISIBLE = "FF_DD_TOTALS_VISIBLE";
oFF.OuDimensionDialog2I18n.staticSetup = function()
{
	let tmpProvider = new oFF.OuDimensionDialog2I18n();
	tmpProvider.setupProvider(oFF.OuDimensionDialog2.DEFAULT_PROGRAM_NAME, true);
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TITLE, "Properties for {0}");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TITLE, "#XTIT: Title of the dialog for dimension settings (Placeholder is dimension name)");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.DIMENSION, "Dimension");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.DIMENSION, "#XTIT: A generic fallback for the title placeholder, if no dimension name is available");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.DISPLAY, "Display");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.DISPLAY, "#XTBS: A label on the tab for the display settings (e.g. presentation type)");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORTING, "Sorting");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORTING, "#XTBS: A label on the tab for the sorting settings");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.HIERARCHIES, "Hierarchies");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.HIERARCHIES, "#XTBS: A label on the tab for the hierarchy settings");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.CONTENT, "Content:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.CONTENT, "#XFLD: Title of a dropdown to set how a dimension should be shown");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.KEY, "ID");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.KEY, "#XSEL: Dropdown item to configure that dimension should be shown by their id");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT, "Description");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT, "#XSEL: Dropdown item to configure that dimension should be shown by their description");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.KEY_AND_TEXT, "ID (Description)");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.KEY_AND_TEXT, "#XSEL: Dropdown item to configure that dimension should be shown by their id and description");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT_AND_KEY, "Description (ID)");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT_AND_KEY, "#XSEL: Dropdown item to configure that dimension should be shown by their id and description");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT_TYPE, "Description Type:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT_TYPE, "#XFLD: Title of a dropdown to set the type of texts");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_SHORT, "Short");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT_TYPE_SHORT, "#XSEL: Dropdown item to set that short text attributes should be used");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_MEDIUM, "Medium");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT_TYPE_MEDIUM, "#XSEL: Dropdown item to set that medium text attributes should be used");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_LONG, "Long");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT_TYPE_LONG, "#XSEL: Dropdown item to set that long text attributes should be used");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TEXT_TYPE_XXL, "XXL");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TEXT_TYPE_XXL, "#XSEL: Dropdown item to set that xxl text attributes should be used");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS, "Totals:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS, "#XFLD: Title of a dropdown to set the representation of totals in a table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS_VISIBLE, "Visible");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS_VISIBLE, "#XSEL: Dropdown item to make totals visible in the table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS_HIDDEN, "Hidden");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS_HIDDEN, "#XSEL: Dropdown item to hide totals in the table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS_MORE_THAN_ONE, "When more than 1 value");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS_MORE_THAN_ONE, "#XSEL: Dropdown item to hide totals in the table if there is only one value");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS_POSITION, "Totals Position:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS_POSITION, "#XFLD: Title of a dropdown to set the position of totals in a table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS_POSITION_TOP, "Top");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS_POSITION_TOP, "#XSEL: Dropdown item put the totals on top of the table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.TOTALS_POSITION_BOT, "Bottom");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.TOTALS_POSITION_BOT, "#XSEL: Dropdown item put the totals on bottom of the table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED, "Include unbooked values");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.INCLUDE_UNBOOKED, "#XCKL: A checkbox to determine if unbooked values should show up in the table");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION, "Direction:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_DIRECTION, "#XFLD: Title of a dropdown to change the sorting direction");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_NONE, "None");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_NONE, "#XSEL: Dropdown item to disable the sorting");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_ASCENDING, "Ascending");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_ASCENDING, "#XSEL: Dropdown item to set the sort direction to ascending");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_DESCENDING, "Descending");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_DIRECTION_DESCENDING, "#XSEL: Dropdown item to set the sort direction to descending");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_BY, "Sort by:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_BY, "#XFLD: Title of a dropdown to define how a sort operation is done");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_BY_HIERARCHY, "Hierarchy");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_BY_HIERARCHY, "#XSEL: Dropdown item to let the sort be done by hierarchy");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.SORT_BY_FILTER, "Filter");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.SORT_BY_FILTER, "#XSEL: Dropdown item to let the sort be done by filter");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.BREAK_GROUPING, "Break grouping");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.BREAK_GROUPING, "#XCKL: A checkbox to allow the sorting to break up groups");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY, "Display hierarchically");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.DISPLAY_HIERARCHICALLY, "#XCKL: A checkbox to enable or disable the hierarchy");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.CONDENSE_NODES, "Condense nodes with only 1 child");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.CONDENSE_NODES, "#XCKL: A checkbox to set if nodes in a hierarchy can be condensed if they only have one child");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.HIERARCHY, "Hierarchy:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.HIERARCHY, "#XFLD: The title of a input field for hierarchy names");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.ENTER_HIERARCHY_NAME, "Hierarchy Name");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.ENTER_HIERARCHY_NAME, "#XFLD: An input placeholder to let the user know to enter a hierarchy name");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.NODES_TO_SHOW, "Nodes to show:");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.NODES_TO_SHOW, "XFLD: Title of a dropdown to which level of nodes should be displayed");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.ALL_NODES, "All nodes");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.ALL_NODES, "#XSEL: A dropdown item to set that all nodes should be shown");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.ONLY_ROOT_NODES, "Only root nodes");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.ONLY_ROOT_NODES, "#XSEL: A dropdown item to set that only nodes on root level are to be displayed");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.ROOT_AND_X_CHILD_LEVEL, "From root to level {0}");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.ROOT_AND_X_CHILD_LEVEL, "#XSEL: A dropdown item to set that the amount of the placeholder number levels should be shown");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.NODE_POSITION, "Position of child nodes");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.NODE_POSITION, "#XFLD: The description of a segmented button to select where hierarchy nodes are positioned");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.NODE_POSITION_ABOVE, "Above");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.NODE_POSITION_ABOVE, "#XBUT: Segment button text to let child nodes be shown above their parents");
	tmpProvider.addText(oFF.OuDimensionDialog2I18n.NODE_POSITION_BELOW, "Below");
	tmpProvider.addComment(oFF.OuDimensionDialog2I18n.NODE_POSITION_BELOW, "#XBUT: Segment button text to let child nodes be shown below their parents");
	tmpProvider.addTextWithComment(oFF.OuDimensionDialog2I18n.INFO_HIERARCHY_FIXED, "The hierarchy can only be changed by the filter or a variable", "#XTOL: A tooltip indicating why a input field is not editable, because the hierarchy is defined by the filter");
	tmpProvider.addTextWithComment(oFF.OuDimensionDialog2I18n.INFO_HIERARCHY_ON_STRUCTURE, "The hierarchy of a measure or structure cannot be changed", "#XTOL: A tooltip indicating why a input field is not editable, because the dimension is a measure or structure");
	return tmpProvider;
};

oFF.FdUnsupportedFilterPopup = function() {};
oFF.FdUnsupportedFilterPopup.prototype = new oFF.UtConfirmPopup();
oFF.FdUnsupportedFilterPopup.prototype._ff_c = "FdUnsupportedFilterPopup";

oFF.FdUnsupportedFilterPopup.createFiscalDateRangePopup = function(genesis)
{
	let popup = new oFF.FdUnsupportedFilterPopup();
	let localization = oFF.XLocalizationCenter.getCenter();
	popup.setupUnsupportedFilterPopup(genesis, localization.getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_FISCAL_RANGE_TEXT), localization.getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_SUB_TEXT), null);
	return popup;
};
oFF.FdUnsupportedFilterPopup.createNonCompoundPopup = function(genesis)
{
	let popup = new oFF.FdUnsupportedFilterPopup();
	let localization = oFF.XLocalizationCenter.getCenter();
	popup.setupUnsupportedFilterPopup(genesis, localization.getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_TEXT), null, "https://help.sap.com/docs/SAP_ANALYTICS_CLOUD/00f68c2e08b941f081002fd3691d86a7/90edb0e43311457a8d331d31c1129cb1.html");
	return popup;
};
oFF.FdUnsupportedFilterPopup.prototype.m_link = null;
oFF.FdUnsupportedFilterPopup.prototype.m_subText = null;
oFF.FdUnsupportedFilterPopup.prototype.buildPopupContent = function(genesis)
{
	let container = genesis.newRoot(oFF.UiType.FLEX_LAYOUT);
	container.setDirection(oFF.UiFlexDirection.COLUMN);
	container.setName("FilterDialogIncompatibleFilterPopupContent");
	let label = container.addNewItemOfType(oFF.UiType.LABEL);
	label.setName("FilterDialogIncompatibleFilterPopupInfoLabel");
	label.setText(this.m_text);
	if (oFF.notNull(this.m_subText))
	{
		let subLabel = container.addNewItemOfType(oFF.UiType.LABEL);
		subLabel.setName("FilterDialogIncompatibleFilterPopupAdditionalInfoLabel");
		subLabel.setMargin(oFF.UiCssBoxEdges.create("1rem 0 0 0"));
		subLabel.setText(this.m_subText);
	}
	if (oFF.notNull(this.m_link))
	{
		let link = container.addNewItemOfType(oFF.UiType.LINK);
		link.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_INFO_LINK));
		link.addLabelledBy(label);
		link.setName("FilterDialogIncompatibleFilterPopupInfoLink");
		link.setMargin(oFF.UiCssBoxEdges.create("1rem 0 0 0"));
		link.setSrc(this.m_link);
		link.setTarget("_blank");
	}
};
oFF.FdUnsupportedFilterPopup.prototype.configurePopup = function(dialog)
{
	oFF.UtConfirmPopup.prototype.configurePopup.call( this , dialog);
	dialog.setName("FilterDialogIncompatibleFilterPopup");
	this.setConfirmButtonText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_DELETE_BUTTON));
	this.setCancelButtonIcon(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_CANCEL_BUTTON));
	this.setConfirmButtonIcon(null);
	this.setCancelButtonIcon(null);
};
oFF.FdUnsupportedFilterPopup.prototype.releaseObject = function()
{
	oFF.UtConfirmPopup.prototype.releaseObject.call( this );
	this.m_subText = null;
	this.m_link = null;
};
oFF.FdUnsupportedFilterPopup.prototype.setupUnsupportedFilterPopup = function(genesis, text, subText, link)
{
	this.m_subText = subText;
	this.m_link = link;
	oFF.UtConfirmPopup.prototype.setupInternal.call( this , genesis, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_TITLE), text);
};

oFF.FdAbstractDateRangeItem = function() {};
oFF.FdAbstractDateRangeItem.prototype = new oFF.FdItem();
oFF.FdAbstractDateRangeItem.prototype._ff_c = "FdAbstractDateRangeItem";

oFF.FdAbstractDateRangeItem.prototype.m_dateTimeProvider = null;
oFF.FdAbstractDateRangeItem.prototype.m_granularity = null;
oFF.FdAbstractDateRangeItem.prototype.getDisplayKey = function()
{
	return null;
};
oFF.FdAbstractDateRangeItem.prototype.getFdComparisonOperator = function()
{
	let operator = oFF.FdItem.prototype.getFdComparisonOperator.call( this );
	return operator === oFF.FdComparisonOperator.BETWEEN || operator === oFF.FdComparisonOperator.NOT_BETWEEN ? operator : oFF.FdComparisonOperator.BETWEEN;
};
oFF.FdAbstractDateRangeItem.prototype.getFormattedValueByPresentation = function(presentation)
{
	return this.getTextFormatted();
};
oFF.FdAbstractDateRangeItem.prototype.getGranularity = function()
{
	return this.m_granularity;
};
oFF.FdAbstractDateRangeItem.prototype.getKey = function()
{
	return null;
};
oFF.FdAbstractDateRangeItem.prototype.getName = function()
{
	return null;
};
oFF.FdAbstractDateRangeItem.prototype.getText = function()
{
	return null;
};
oFF.FdAbstractDateRangeItem.prototype.getValueByField = function(field)
{
	return null;
};
oFF.FdAbstractDateRangeItem.prototype.getValueType = function()
{
	return oFF.XValueType.DATE;
};
oFF.FdAbstractDateRangeItem.prototype.hasDisplayKey = function()
{
	return false;
};
oFF.FdAbstractDateRangeItem.prototype.hasText = function()
{
	return false;
};
oFF.FdAbstractDateRangeItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdItem.prototype.isEqualTo.call( this , other) || other.getType() !== this.getType())
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	return otherItem.m_granularity === this.m_granularity;
};
oFF.FdAbstractDateRangeItem.prototype.isNull = function()
{
	return false;
};
oFF.FdAbstractDateRangeItem.prototype.releaseObject = function()
{
	oFF.FdItem.prototype.releaseObject.call( this );
	this.m_dateTimeProvider = null;
	this.m_granularity = null;
};
oFF.FdAbstractDateRangeItem.prototype.setGranularity = function(granularity)
{
	this.m_granularity = granularity;
};

oFF.FdAbstractUserTeamItem = function() {};
oFF.FdAbstractUserTeamItem.prototype = new oFF.FdItem();
oFF.FdAbstractUserTeamItem.prototype._ff_c = "FdAbstractUserTeamItem";

oFF.FdAbstractUserTeamItem.prototype.m_displayName = null;
oFF.FdAbstractUserTeamItem.prototype.m_icon = null;
oFF.FdAbstractUserTeamItem.prototype.m_name = null;
oFF.FdAbstractUserTeamItem.prototype.m_text = null;
oFF.FdAbstractUserTeamItem.prototype.getDisplayKey = function()
{
	return this.m_displayName;
};
oFF.FdAbstractUserTeamItem.prototype.getIcon = function()
{
	return this.m_icon;
};
oFF.FdAbstractUserTeamItem.prototype.getKey = function()
{
	return this.m_name;
};
oFF.FdAbstractUserTeamItem.prototype.getName = function()
{
	return this.m_name;
};
oFF.FdAbstractUserTeamItem.prototype.getText = function()
{
	return this.m_text;
};
oFF.FdAbstractUserTeamItem.prototype.getValueByField = function(field)
{
	return null;
};
oFF.FdAbstractUserTeamItem.prototype.getValueType = function()
{
	return oFF.XValueType.STRING;
};
oFF.FdAbstractUserTeamItem.prototype.hasDisplayKey = function()
{
	return true;
};
oFF.FdAbstractUserTeamItem.prototype.hasText = function()
{
	return oFF.notNull(this.m_text);
};
oFF.FdAbstractUserTeamItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdItem.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	let otherKey = otherItem.getKey();
	return oFF.notNull(otherKey) && oFF.XString.isEqual(this.getKey(), otherKey) || otherItem.getDisplayKey() !== null && oFF.XString.isEqual(this.getDisplayKey(), otherItem.getDisplayKey());
};
oFF.FdAbstractUserTeamItem.prototype.isNull = function()
{
	return false;
};
oFF.FdAbstractUserTeamItem.prototype.releaseObject = function()
{
	oFF.FdItem.prototype.releaseObject.call( this );
	this.m_name = null;
	this.m_displayName = null;
	this.m_text = null;
	this.m_icon = null;
};
oFF.FdAbstractUserTeamItem.prototype.setupUserTeamItem = function(name, text, icon)
{
	this.m_name = name;
	this.m_displayName = this.getDisplayName(name);
	this.m_text = text;
	this.m_icon = icon;
};
oFF.FdAbstractUserTeamItem.prototype.toString = function()
{
	let sb = oFF.XStringBuffer.create();
	sb.append("{");
	sb.append("Name: ").append(this.m_name);
	sb.append(", Text: ").append(this.m_text);
	sb.append("}");
	return sb.toString();
};

oFF.FdHierarchyCatalogItem = function() {};
oFF.FdHierarchyCatalogItem.prototype = new oFF.FdItem();
oFF.FdHierarchyCatalogItem.prototype._ff_c = "FdHierarchyCatalogItem";

oFF.FdHierarchyCatalogItem.createHierarchyCatalogItem = function(catalogItem)
{
	let obj = new oFF.FdHierarchyCatalogItem();
	obj.m_catalogItem = catalogItem;
	return obj;
};
oFF.FdHierarchyCatalogItem.prototype.m_catalogItem = null;
oFF.FdHierarchyCatalogItem.prototype.getCatalogItem = function()
{
	return this.m_catalogItem;
};
oFF.FdHierarchyCatalogItem.prototype.getDateStringToDisplay = function(date)
{
	if (oFF.isNull(date) || date.isEqualTo(oFF.XDate.createHollowDate()))
	{
		return null;
	}
	let dateIso = date.toIsoFormat();
	return oFF.UiNumberFormatterCenter.getCenter().formatTextForDateTimeKey(dateIso, dateIso, oFF.XValueType.DATE);
};
oFF.FdHierarchyCatalogItem.prototype.getDisplayKey = function()
{
	return this.getName();
};
oFF.FdHierarchyCatalogItem.prototype.getFormattedValueByPresentation = function(presentation)
{
	if (oFF.isNull(presentation))
	{
		return null;
	}
	if (presentation.getCustomObject() !== null)
	{
		let additional = presentation.getCustomObject().toString();
		switch (additional)
		{
			case oFF.FdContentProviderHierarchyCatalog.VERSION:
				return presentation.isKey() ? this.m_catalogItem.getVersionDisplayKey() : this.m_catalogItem.getVersionDescription();

			case oFF.FdContentProviderHierarchyCatalog.OBJECT_VERSION:
				return this.m_catalogItem.getObjectVersion();

			case oFF.FdContentProviderHierarchyCatalog.DATE_FROM:
				return this.getDateStringToDisplay(this.m_catalogItem.getDateFrom());

			case oFF.FdContentProviderHierarchyCatalog.DATE_TO:
				return this.getDateStringToDisplay(this.m_catalogItem.getDateTo());
		}
	}
	if (presentation.isKey())
	{
		return this.getDisplayKey();
	}
	let text = this.getText();
	if (oFF.XStringUtils.isNullOrEmpty(text))
	{
		return this.getDisplayKey();
	}
	return text;
};
oFF.FdHierarchyCatalogItem.prototype.getHierarchyName = function()
{
	return this.m_catalogItem.getHierarchyName();
};
oFF.FdHierarchyCatalogItem.prototype.getKey = function()
{
	return this.getName();
};
oFF.FdHierarchyCatalogItem.prototype.getName = function()
{
	return this.getHierarchyName();
};
oFF.FdHierarchyCatalogItem.prototype.getText = function()
{
	let text = this.m_catalogItem.getHierarchyShortText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	text = this.m_catalogItem.getHierarchyMediumText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	text = this.m_catalogItem.getHierarchyLongText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	return text;
};
oFF.FdHierarchyCatalogItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.HIERARCHY_CATALOG;
};
oFF.FdHierarchyCatalogItem.prototype.getValueByField = function(field)
{
	return null;
};
oFF.FdHierarchyCatalogItem.prototype.getValueType = function()
{
	return oFF.XValueType.STRING;
};
oFF.FdHierarchyCatalogItem.prototype.hasDisplayKey = function()
{
	return false;
};
oFF.FdHierarchyCatalogItem.prototype.hasText = function()
{
	return true;
};
oFF.FdHierarchyCatalogItem.prototype.isNull = function()
{
	return false;
};
oFF.FdHierarchyCatalogItem.prototype.releaseObject = function()
{
	this.m_catalogItem = null;
	oFF.FdItem.prototype.releaseObject.call( this );
};
oFF.FdHierarchyCatalogItem.prototype.toString = function()
{
	return this.m_catalogItem.getHierarchyName();
};

oFF.FdRangeItem = function() {};
oFF.FdRangeItem.prototype = new oFF.FdItem();
oFF.FdRangeItem.prototype._ff_c = "FdRangeItem";

oFF.FdRangeItem.create = function(low, high, excludedRange)
{
	let item = new oFF.FdRangeItem();
	item.setupRangeItem(low, high, excludedRange);
	return item;
};
oFF.FdRangeItem.prototype.m_high = null;
oFF.FdRangeItem.prototype.m_low = null;
oFF.FdRangeItem.prototype.concatenate = function(lowValue, highValue)
{
	return oFF.XStringUtils.concatenate3(oFF.notNull(lowValue) ? lowValue : "", " - ", oFF.notNull(highValue) ? highValue : "");
};
oFF.FdRangeItem.prototype.getDisplayKey = function()
{
	return null;
};
oFF.FdRangeItem.prototype.getFormattedValueByPresentation = function(presentation)
{
	return this.concatenate(this.m_low.getFormattedValueByPresentation(presentation), this.m_high.getFormattedValueByPresentation(presentation));
};
oFF.FdRangeItem.prototype.getHierarchyName = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(oFF.FdItem.prototype.getHierarchyName.call( this )) ? oFF.FdItem.prototype.getHierarchyName.call( this ) : this.m_low.getHierarchyName();
};
oFF.FdRangeItem.prototype.getHigh = function()
{
	return this.getHighItem();
};
oFF.FdRangeItem.prototype.getHighItem = function()
{
	return this.m_high;
};
oFF.FdRangeItem.prototype.getKey = function()
{
	return null;
};
oFF.FdRangeItem.prototype.getLow = function()
{
	return this.getLowItem();
};
oFF.FdRangeItem.prototype.getLowItem = function()
{
	return this.m_low;
};
oFF.FdRangeItem.prototype.getName = function()
{
	return this.concatenate(this.m_low.getName(), this.m_high.getName());
};
oFF.FdRangeItem.prototype.getText = function()
{
	let low = this.m_low.getText();
	let high = this.m_high.getText();
	return oFF.XStringUtils.isNotNullAndNotEmpty(low) && oFF.XStringUtils.isNotNullAndNotEmpty(high) ? this.concatenate(low, high) : null;
};
oFF.FdRangeItem.prototype.getTextFormatted = function()
{
	return this.concatenate(this.m_low.getTextFormatted(), this.m_high.getTextFormatted());
};
oFF.FdRangeItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.RANGE;
};
oFF.FdRangeItem.prototype.getValueByField = function(field)
{
	return this.concatenate(this.m_low.getValueByField(field), this.m_high.getValueByField(field));
};
oFF.FdRangeItem.prototype.getValueType = function()
{
	return null;
};
oFF.FdRangeItem.prototype.hasDisplayKey = function()
{
	return false;
};
oFF.FdRangeItem.prototype.hasText = function()
{
	return this.m_low.hasText() || this.m_high.hasText();
};
oFF.FdRangeItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdItem.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	return oFF.XObjectExt.areEqual(this.getLowItem(), otherItem.getLowItem()) && oFF.XObjectExt.areEqual(this.getHighItem(), otherItem.getHighItem());
};
oFF.FdRangeItem.prototype.isNull = function()
{
	return false;
};
oFF.FdRangeItem.prototype.releaseObject = function()
{
	oFF.FdItem.prototype.releaseObject.call( this );
	this.m_low = oFF.XObjectExt.release(this.m_low);
	this.m_high = oFF.XObjectExt.release(this.m_high);
};
oFF.FdRangeItem.prototype.setFdComparisonOperator = function(operator)
{
	if (operator === oFF.FdComparisonOperator.BETWEEN || operator === oFF.FdComparisonOperator.NOT_BETWEEN)
	{
		oFF.FdItem.prototype.setFdComparisonOperator.call( this , operator);
	}
};
oFF.FdRangeItem.prototype.setHigh = function(highItem)
{
	if (oFF.notNull(highItem))
	{
		this.m_high = highItem;
	}
	else
	{
		this.m_high = oFF.FdSimpleItem.create(null, null, null);
	}
};
oFF.FdRangeItem.prototype.setLow = function(lowItem)
{
	if (oFF.notNull(lowItem))
	{
		this.m_low = lowItem;
	}
	else
	{
		this.m_low = oFF.FdSimpleItem.create(null, null, null);
	}
};
oFF.FdRangeItem.prototype.setupRangeItem = function(low, high, excludedRange)
{
	this.setLow(low);
	this.setHigh(high);
	this.setFdComparisonOperator(excludedRange ? oFF.FdComparisonOperator.NOT_BETWEEN : oFF.FdComparisonOperator.BETWEEN);
};
oFF.FdRangeItem.prototype.toString = function()
{
	return oFF.XStringUtils.concatenate3(this.getLowItem().getKey(), "-", this.getHighItem().getKey());
};

oFF.FdSimpleItem = function() {};
oFF.FdSimpleItem.prototype = new oFF.FdItem();
oFF.FdSimpleItem.prototype._ff_c = "FdSimpleItem";

oFF.FdSimpleItem.create = function(key, displayKey, text)
{
	let item = new oFF.FdSimpleItem();
	item.m_key = key;
	item.m_displayKey = displayKey;
	item.m_text = text;
	return item;
};
oFF.FdSimpleItem.createNull = function(excluding)
{
	let item = new oFF.FdSimpleItem();
	item.m_key = "";
	item.m_displayKey = "";
	item.m_isNull = true;
	item.setExcluded(excluding);
	return item;
};
oFF.FdSimpleItem.createWithType = function(key, displayKey, text, valueType)
{
	let item = oFF.FdSimpleItem.create(key, displayKey, text);
	item.m_valueType = valueType;
	return item;
};
oFF.FdSimpleItem.prototype.m_displayKey = null;
oFF.FdSimpleItem.prototype.m_isNull = false;
oFF.FdSimpleItem.prototype.m_key = null;
oFF.FdSimpleItem.prototype.m_text = null;
oFF.FdSimpleItem.prototype.m_valueType = null;
oFF.FdSimpleItem.prototype.compareTo = function(objectToCompare)
{
	if (oFF.isNull(objectToCompare))
	{
		return 1;
	}
	let key = this.getKey();
	let otherKey = objectToCompare.getKey();
	if (oFF.isNull(key) || oFF.isNull(otherKey))
	{
		key = this.getDisplayKey();
		otherKey = objectToCompare.getDisplayKey();
	}
	if (this.getValueType() === oFF.XValueType.DATE || objectToCompare.getValueType() === oFF.XValueType.DATE)
	{
		let thisDate = oFF.XDate.createDateSafe(key);
		let otherDate = oFF.XDate.createDateSafe(otherKey);
		if (oFF.notNull(thisDate) && oFF.notNull(otherDate))
		{
			return oFF.XString.compare(thisDate.toIsoFormat(), otherDate.toIsoFormat());
		}
	}
	try
	{
		let comparison = oFF.XDouble.convertFromString(key) - oFF.XDouble.convertFromString(otherKey);
		return comparison < 0 ? -1 : comparison > 0 ? 1 : 0;
	}
	catch (e)
	{
		return oFF.XString.compare(key, otherKey);
	}
};
oFF.FdSimpleItem.prototype.getDisplayKey = function()
{
	return oFF.notNull(this.m_displayKey) ? this.m_displayKey : this.m_key;
};
oFF.FdSimpleItem.prototype.getKey = function()
{
	return this.m_key;
};
oFF.FdSimpleItem.prototype.getName = function()
{
	return this.m_displayKey;
};
oFF.FdSimpleItem.prototype.getText = function()
{
	return this.m_text;
};
oFF.FdSimpleItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.BASIC;
};
oFF.FdSimpleItem.prototype.getValueByField = function(field)
{
	if (oFF.notNull(field))
	{
		let dimension = field.getDimension();
		let flatKeyField = dimension.getFlatKeyField();
		let hierarchyKeyField = dimension.getHierarchyKeyField();
		let flatDisplayKeyField = dimension.getFlatDisplayKeyField();
		let hierarchyDisplayKeyField = dimension.getHierarchyDisplayKeyField();
		if (flatKeyField === field || hierarchyKeyField === field || dimension.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND) === field)
		{
			if (oFF.notNull(flatDisplayKeyField) && flatKeyField === flatDisplayKeyField || oFF.notNull(hierarchyDisplayKeyField) && hierarchyKeyField === hierarchyDisplayKeyField)
			{
				return oFF.notNull(this.m_key) ? this.m_key : this.m_displayKey;
			}
			return this.m_key;
		}
		if (flatDisplayKeyField === field || hierarchyDisplayKeyField === field)
		{
			return this.m_displayKey;
		}
		if (field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT))
		{
			return this.m_text;
		}
	}
	return null;
};
oFF.FdSimpleItem.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.FdSimpleItem.prototype.hasDisplayKey = function()
{
	return oFF.notNull(this.m_displayKey);
};
oFF.FdSimpleItem.prototype.hasText = function()
{
	return oFF.notNull(this.m_text);
};
oFF.FdSimpleItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdItem.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	if (this.isNull() && otherItem.isNull())
	{
		return true;
	}
	if (!oFF.XString.isEqual(this.getKey(), otherItem.getKey()))
	{
		return false;
	}
	if (this.getKey() === null && !oFF.XString.isEqual(this.getDisplayKey(), otherItem.getDisplayKey()))
	{
		return false;
	}
	let text = this.getText();
	let otherText = otherItem.getText();
	return oFF.isNull(text) || oFF.isNull(otherText) || oFF.XString.isEqual(text, otherText);
};
oFF.FdSimpleItem.prototype.isNull = function()
{
	return this.m_isNull || this.getFdComparisonOperator().isNullOperator();
};
oFF.FdSimpleItem.prototype.releaseObject = function()
{
	oFF.FdItem.prototype.releaseObject.call( this );
	this.m_key = null;
	this.m_displayKey = null;
	this.m_text = null;
	this.m_valueType = null;
};
oFF.FdSimpleItem.prototype.setNull = function(isNull)
{
	this.m_isNull = isNull;
};
oFF.FdSimpleItem.prototype.toString = function()
{
	if (oFF.isNull(this.m_displayKey) && oFF.isNull(this.m_key) && oFF.isNull(this.m_text))
	{
		return "";
	}
	let sb = oFF.XStringBuffer.create();
	sb.append("{");
	sb.append("DisplayKey: ").append(this.m_displayKey);
	sb.append(", Key: ").append(this.m_key);
	sb.append(", Text: ").append(this.m_text);
	sb.append("}");
	return sb.toString();
};

oFF.FdValueHelpItem = function() {};
oFF.FdValueHelpItem.prototype = new oFF.FdItem();
oFF.FdValueHelpItem.prototype._ff_c = "FdValueHelpItem";

oFF.FdValueHelpItem.create = function(node, hierarchyName, textField)
{
	let fdValueHelpItem = new oFF.FdValueHelpItem();
	fdValueHelpItem.setupValueHelpItem(node, hierarchyName, textField);
	return fdValueHelpItem;
};
oFF.FdValueHelpItem.getByKey = function(items, requiredItem)
{
	if (!oFF.XCollectionUtils.hasElements(items) || oFF.isNull(requiredItem))
	{
		return null;
	}
	if (requiredItem.isNull())
	{
		return oFF.XStream.of(items).map((fdItem) => {
			return fdItem.isNull() ? fdItem : oFF.FdValueHelpItem.getByKey(fdItem.getChildren(), requiredItem);
		}).filterNullValues().map((matchingNullItem) => {
			return oFF.FdValueHelpItem.getMatchingItem(requiredItem, matchingNullItem);
		}).findAny().orElse(null);
	}
	let key = requiredItem.getKey();
	let displayKey = requiredItem.hasDisplayKey() ? requiredItem.getDisplayKey() : null;
	let hasDisplayKey = oFF.XStringUtils.isNotNullAndNotEmpty(displayKey);
	let hasKey = oFF.XStringUtils.isNotNullAndNotEmpty(key) || (oFF.XString.isEqual(key, "") && !hasDisplayKey);
	let matchingItem = null;
	for (let i = 0; i < items.size(); i++)
	{
		let item = items.get(i);
		if (!item.isNull())
		{
			if (hasKey && oFF.XString.isEqual(item.getKey(), key))
			{
				matchingItem = oFF.FdValueHelpItem.getMatchingItem(requiredItem, item);
				break;
			}
			else if (!hasKey && hasDisplayKey && item.hasDisplayKey() && oFF.XString.isEqual(item.getDisplayKey(), displayKey))
			{
				matchingItem = oFF.FdValueHelpItem.getMatchingItem(requiredItem, item);
			}
			else if (!hasKey && !hasDisplayKey && oFF.XStringUtils.isNullOrEmpty(item.getKey()) && oFF.XStringUtils.isNullOrEmpty(item.getDisplayKey()))
			{
				matchingItem = oFF.FdValueHelpItem.getMatchingItem(requiredItem, item);
			}
		}
		let matchingChild = oFF.FdValueHelpItem.getByKey(item.getChildren(), requiredItem);
		if (oFF.notNull(matchingChild))
		{
			matchingItem = matchingChild;
		}
	}
	return matchingItem;
};
oFF.FdValueHelpItem.getMatchingItem = function(originalItem, matchingItem)
{
	if (originalItem.getFdComparisonOperator() !== matchingItem.getFdComparisonOperator() && matchingItem.getType() === oFF.FilterDialogValueType.VALUEHELP)
	{
		let clonedItem = oFF.FdValueHelpItem.create(matchingItem.getValueHelpNode(), matchingItem.getHierarchyName(), matchingItem.getTextField());
		clonedItem.setFdComparisonOperator(originalItem.getFdComparisonOperator());
		return clonedItem;
	}
	return matchingItem;
};
oFF.FdValueHelpItem.prototype.m_children = null;
oFF.FdValueHelpItem.prototype.m_node = null;
oFF.FdValueHelpItem.prototype.m_textField = null;
oFF.FdValueHelpItem.prototype.compareTo = function(objectToCompare)
{
	if (oFF.isNull(objectToCompare))
	{
		return 1;
	}
	let key = this.getKey();
	let otherKey = objectToCompare.getKey();
	let valueType = this.getValueType();
	if (valueType.isNumber())
	{
		try
		{
			let comparison = oFF.XDouble.convertFromString(key) - oFF.XDouble.convertFromString(otherKey);
			return comparison < 0 ? -1 : comparison > 0 ? 1 : 0;
		}
		catch (e)
		{
			return oFF.XString.compare(key, otherKey);
		}
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		let thisDate = oFF.XDate.createDateSafe(key);
		let otherDate = oFF.XDate.createDateSafe(otherKey);
		if (oFF.notNull(thisDate) && oFF.notNull(otherDate))
		{
			key = thisDate.toIsoFormat();
			otherKey = otherDate.toIsoFormat();
		}
	}
	return oFF.XString.compare(key, otherKey);
};
oFF.FdValueHelpItem.prototype.getChildren = function()
{
	if (oFF.isNull(this.m_children))
	{
		this.m_children = oFF.XList.create();
	}
	if (this.m_node.hasChildren())
	{
		let children = this.m_node.getChildren();
		let size = children.size();
		for (let i = 0; i < size; i++)
		{
			if (this.m_children.size() <= i)
			{
				this.m_children.add(oFF.FdValueHelpItem.create(children.get(i), this.getHierarchyName(), this.m_textField));
			}
		}
	}
	return this.m_children;
};
oFF.FdValueHelpItem.prototype.getDimension = function()
{
	return this.m_node.getDimension();
};
oFF.FdValueHelpItem.prototype.getDimensionMember = function()
{
	return this.m_node.getDimensionMember();
};
oFF.FdValueHelpItem.prototype.getDisplayKey = function()
{
	let displayName = this.getDisplayName();
	return oFF.notNull(displayName) ? displayName : this.getValueByField(this.getDisplayKeyField());
};
oFF.FdValueHelpItem.prototype.getDisplayKeyField = function()
{
	let dim = this.getDimension();
	return this.isHierarchyNode() ? dim.getHierarchyDisplayKeyField() : dim.getFlatDisplayKeyField();
};
oFF.FdValueHelpItem.prototype.getDisplayKeyFormatted = function()
{
	let displayName = this.getDisplayName();
	return oFF.notNull(displayName) ? displayName : this.getFormattedValueByField(this.getDisplayKeyField());
};
oFF.FdValueHelpItem.prototype.getDisplayName = function()
{
	let dimMember = this.getDimensionMember();
	return dimMember.isDisplayNameSet() ? dimMember.getDisplayName() : null;
};
oFF.FdValueHelpItem.prototype.getFormattedValueByField = function(field)
{
	let fieldValue = this.getDimensionMember().getFieldValue(field);
	if (oFF.notNull(fieldValue))
	{
		let formattedValue = fieldValue.getFormattedValue();
		return oFF.notNull(formattedValue) ? formattedValue : fieldValue.getString();
	}
	return null;
};
oFF.FdValueHelpItem.prototype.getFormattedValueByPresentation = function(presentation)
{
	if (this.isNull())
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NULL);
	}
	let value = null;
	if (oFF.notNull(presentation))
	{
		let field = presentation.getCustomObject();
		if (field === this.getTextField())
		{
			value = this.getText();
		}
		else
		{
			let hasDisplayKey = this.hasDisplayKey();
			if (hasDisplayKey && field === this.getDisplayKeyField() || !hasDisplayKey && field === this.getKeyField() && this.getDimensionMember().isDisplayNameSet())
			{
				value = this.getDisplayKey();
			}
		}
		if (oFF.isNull(value))
		{
			value = this.getFormattedValueByField(field);
		}
		if (oFF.isNull(value))
		{
			let presentationType = field.getPresentationType();
			if (presentationType.isTypeOf(oFF.PresentationType.KEY) || presentationType.isTypeOf(oFF.PresentationType.HIERARCHY_KEY))
			{
				value = this.getKey();
			}
			else if (presentationType.isTypeOf(oFF.PresentationType.DISPLAY_KEY) || presentationType.isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY))
			{
				value = this.getDisplayKey();
				if (oFF.isNull(value))
				{
					value = this.getKey();
				}
			}
			else if (presentationType.isTypeOf(oFF.PresentationType.TEXT) || presentationType.isTypeOf(oFF.PresentationType.HIERARCHY_TEXT))
			{
				value = this.getText();
			}
		}
		if (oFF.XString.isEqual(value, "") && !presentation.isKey())
		{
			let keyFieldValue = this.getFormattedValueByField(this.getKeyFieldForTextPresentation(presentation));
			if (oFF.XStringUtils.isNotNullAndNotEmpty(keyFieldValue))
			{
				value = keyFieldValue;
			}
		}
		if (!presentation.isKey())
		{
			if (field.getValueType().isTypeOf(oFF.XValueType.NUMBER))
			{
				value = oFF.UiNumberFormatterCenter.getCenter().format(value);
			}
			else
			{
				let keyField = this.getKeyFieldForTextPresentation(presentation);
				if (oFF.notNull(keyField) && keyField.getValueType().isDateTime())
				{
					let keyValue = this.getFormattedValueByField(keyField);
					value = oFF.UiNumberFormatterCenter.getCenter().formatTextForDateTimeKey(value, oFF.notNull(keyValue) ? keyValue : value, keyField.getValueType());
				}
			}
		}
	}
	if (oFF.XString.isEqual(value, ""))
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NO_VALUE);
	}
	return value;
};
oFF.FdValueHelpItem.prototype.getKey = function()
{
	return this.getValueByField(this.getKeyField());
};
oFF.FdValueHelpItem.prototype.getKeyField = function()
{
	let dim = this.getDimension();
	return this.isHierarchyNode() ? dim.getHierarchyKeyField() : dim.getFlatKeyField();
};
oFF.FdValueHelpItem.prototype.getKeyFieldForTextPresentation = function(presentationValue)
{
	let presentation = presentationValue.getParent();
	let keyPresentation = presentation.getKeyPresentation();
	if (oFF.notNull(keyPresentation))
	{
		return keyPresentation.getCustomObject();
	}
	else if (presentation.isMainPresentation())
	{
		return this.hasDisplayKey() ? this.getDisplayKeyField() : this.getKeyField();
	}
	return null;
};
oFF.FdValueHelpItem.prototype.getName = function()
{
	return this.m_node.getName();
};
oFF.FdValueHelpItem.prototype.getText = function()
{
	let dimMember = this.getDimensionMember();
	if (dimMember.isDisplayDescriptionSet())
	{
		return dimMember.getDisplayDescription();
	}
	let text = dimMember.getText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	return this.getValueByField(this.getTextField());
};
oFF.FdValueHelpItem.prototype.getTextField = function()
{
	return oFF.notNull(this.m_textField) ? this.m_textField : this.isHierarchyNode() ? this.getDimension().getHierarchyTextField() : this.getDimension().getFlatTextField();
};
oFF.FdValueHelpItem.prototype.getTextFormatted = function()
{
	if (!this.isNull())
	{
		let keyField = this.hasDisplayKey() ? this.getDisplayKeyField() : this.getKeyField();
		let formatter = oFF.UiNumberFormatterCenter.getCenter();
		if (oFF.notNull(keyField) && keyField.getValueType().isDateTime())
		{
			return formatter.formatTextForDateTimeKey(this.getText(), this.getFormattedValueByField(keyField), keyField.getValueType());
		}
		let textField = this.getTextField();
		if (oFF.notNull(textField) && textField.getValueType().isTypeOf(oFF.XValueType.NUMBER))
		{
			return formatter.format(this.getText());
		}
	}
	return this.getText();
};
oFF.FdValueHelpItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.VALUEHELP;
};
oFF.FdValueHelpItem.prototype.getValueByField = function(field)
{
	let fieldValue = this.getDimensionMember().getFieldValue(field);
	return oFF.isNull(fieldValue) ? null : fieldValue.getString();
};
oFF.FdValueHelpItem.prototype.getValueHelpNode = function()
{
	return this.m_node;
};
oFF.FdValueHelpItem.prototype.getValueType = function()
{
	return this.getDimensionMember().getValueType();
};
oFF.FdValueHelpItem.prototype.hasChildren = function()
{
	return this.isHierarchyNode() && this.m_node.getChildSetState() !== oFF.ChildSetState.NONE;
};
oFF.FdValueHelpItem.prototype.hasDisplayKey = function()
{
	return this.getDisplayKeyField() !== null && this.getDisplayKey() !== null;
};
oFF.FdValueHelpItem.prototype.hasText = function()
{
	return this.getTextField() !== null;
};
oFF.FdValueHelpItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdItem.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	if (this.isNull() && otherItem.isNull())
	{
		return true;
	}
	let key = this.getKey();
	if (!oFF.XString.isEqual(key, otherItem.getKey()))
	{
		return false;
	}
	if (oFF.isNull(key) && !oFF.XString.isEqual(this.getDisplayKey(), otherItem.getDisplayKey()))
	{
		return false;
	}
	let text = this.getText();
	let otherText = otherItem.getText();
	return oFF.isNull(text) || oFF.isNull(otherText) || oFF.XString.isEqual(text, otherText);
};
oFF.FdValueHelpItem.prototype.isHierarchyNode = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getHierarchyName());
};
oFF.FdValueHelpItem.prototype.isNull = function()
{
	return this.getDimensionMember().getDimensionMemberNameValueException() === oFF.ValueException.NULL_VALUE;
};
oFF.FdValueHelpItem.prototype.isRootNode = function()
{
	return this.m_node.getParentNode() === null;
};
oFF.FdValueHelpItem.prototype.releaseObject = function()
{
	oFF.FdItem.prototype.releaseObject.call( this );
	this.m_node = null;
	this.m_children = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_children);
	this.m_textField = null;
};
oFF.FdValueHelpItem.prototype.setupValueHelpItem = function(node, hierarchyName, textField)
{
	this.m_node = node;
	this.setHierarchyName(hierarchyName);
	this.m_textField = textField;
	if (oFF.isNull(this.m_textField))
	{
		this.m_textField = oFF.XStream.of(node.getDimensionMember().getAllFieldValues()).map((fieldValue) => {
			return fieldValue.getField();
		}).filter((field) => {
			return oFF.notNull(field) && !field.isHierarchyNavigationField() && field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT);
		}).findAny().orElse(null);
	}
};
oFF.FdValueHelpItem.prototype.toString = function()
{
	return this.m_node.toString();
};

oFF.FilterDialogI18n = function() {};
oFF.FilterDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.FilterDialogI18n.prototype._ff_c = "FilterDialogI18n";

oFF.FilterDialogI18n.I18N_FD_ATTRIBUTES = "I18N_FD_ATTRIBUTES";
oFF.FilterDialogI18n.I18N_FD_AVAILABLE_MEMBERS = "I18N_FD_AVAILABLE_MEMBERS";
oFF.FilterDialogI18n.I18N_FD_CANCEL = "I18N_FD_CANCEL";
oFF.FilterDialogI18n.I18N_FD_CLEAR_SELECTION = "I18N_FD_CLEAR_SELECTION";
oFF.FilterDialogI18n.I18N_FD_CLIPBOARD_VALUES_NOT_FOUND = "I18N_FD_CLIPBOARD_VALUES_NOT_FOUND";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_BETWEEN = "I18N_FD_COMPARISON_OPERATOR_BETWEEN";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_EQUAL = "I18N_FD_COMPARISON_OPERATOR_EQUAL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_GREATER = "I18N_FD_COMPARISON_OPERATOR_GREATER";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_GREATER_EQUAL = "I18N_FD_COMPARISON_OPERATOR_GREATER_EQUAL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NOT_NULL = "I18N_FD_COMPARISON_OPERATOR_IS_NOT_NULL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NULL = "I18N_FD_COMPARISON_OPERATOR_IS_NULL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_LESS = "I18N_FD_COMPARISON_OPERATOR_LESS";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_LESS_EQUAL = "I18N_FD_COMPARISON_OPERATOR_LESS_EQUAL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_BETWEEN = "I18N_FD_COMPARISON_OPERATOR_NOT_BETWEEN";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_EQUAL = "I18N_FD_COMPARISON_OPERATOR_NOT_EQUAL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_GREATER = "I18N_FD_COMPARISON_OPERATOR_NOT_GREATER";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_GREATER_EQUAL = "I18N_FD_COMPARISON_OPERATOR_NOT_GREATER_EQUAL";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_LESS = "I18N_FD_COMPARISON_OPERATOR_NOT_LESS";
oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_LESS_EQUAL = "I18N_FD_COMPARISON_OPERATOR_NOT_LESS_EQUAL";
oFF.FilterDialogI18n.I18N_FD_CURRENTPAGE = "I18N_FD_CURRENTPAGE";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_CURRENT_PERIOD = "I18N_FD_DATE_RANGE_CURRENT_PERIOD";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_DYNAMIC = "I18N_FD_DATE_RANGE_DYNAMIC";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_END_DATE_OUTSIDE_RANGE = "I18N_FD_DATE_RANGE_ERROR_END_DATE_OUTSIDE_RANGE";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_INVALID_DATE_FORMAT = "I18N_FD_DATE_RANGE_ERROR_INVALID_DATE_FORMAT";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_MIN_GREATER_MAX = "I18N_FD_DATE_RANGE_ERROR_MIN_GREATER_MAX";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_NUMBER_BETWEEN = "I18N_FD_DATE_RANGE_ERROR_NUMBER_BETWEEN";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_START_DATE_OUTSIDE_RANGE = "I18N_FD_DATE_RANGE_ERROR_START_DATE_OUTSIDE_RANGE";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_FIXED = "I18N_FD_DATE_RANGE_FIXED";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_FROM = "I18N_FD_DATE_RANGE_FROM";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_GRANULARITY = "I18N_FD_DATE_RANGE_GRANULARITY";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_HEADER = "I18N_FD_DATE_RANGE_HEADER";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_HIERARCHY = "I18N_FD_DATE_RANGE_HIERARCHY";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_CURRENT_PERIOD = "I18N_FD_DATE_RANGE_INCLUDE_UP_TO_CURRENT_PERIOD";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_OFFSET_PERIOD = "I18N_FD_DATE_RANGE_INCLUDE_UP_TO_OFFSET_PERIOD";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_LOOK_AHEAD = "I18N_FD_DATE_RANGE_LOOK_AHEAD";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_LOOK_BACK = "I18N_FD_DATE_RANGE_LOOK_BACK";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_AMOUNT = "I18N_FD_DATE_RANGE_OFFSET_AMOUNT";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_DIRECTION = "I18N_FD_DATE_RANGE_OFFSET_DIRECTION";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_GRANULARITY = "I18N_FD_DATE_RANGE_OFFSET_GRANULARITY";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_PERIOD = "I18N_FD_DATE_RANGE_OFFSET_PERIOD";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_TO = "I18N_FD_DATE_RANGE_TO";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_TYPE = "I18N_FD_DATE_RANGE_TYPE";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_FROM_START = "I18N_FD_DATE_RANGE_START";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_MONTH = "I18N_FD_DATE_RANGE_CURRENT_MONTH";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_QUARTER = "I18N_FD_DATE_RANGE_CURRENT_QUARTER";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_YEAR = "I18N_FD_DATE_RANGE_CURRENT_YEAR";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_DAY = "I18N_FD_DATE_RANGE_DAY";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_HALFYEAR = "I18N_FD_DATE_RANGE_HALFYEAR";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_MONTH = "I18N_FD_DATE_RANGE_MONTH";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_QUARTER = "I18N_FD_DATE_RANGE_QUARTER";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR = "I18N_FD_DATE_RANGE_YEAR";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_OFFSET_DIRECTION_LOOK_AHEAD = "I18N_FD_DATE_RANGE_OFFSET_DIRECTION_LOOK_AHEAD";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_OFFSET_DIRECTION_LOOK_BACK = "I18N_FD_DATE_RANGE_OFFSET_DIRECTION_LOOK_BACK";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TO_END = "I18N_FD_DATE_RANGE_END";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_OFFSET = "I18N_FD_DATE_RANGE_OFFSET";
oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_STANDARD = "I18N_FD_DATE_RANGE_STANDARD";
oFF.FilterDialogI18n.I18N_FD_ERR_NO_VALUES_FOR_MANDATORY_VARIABLES = "I18N_FD_ERR_NO_VALUES_FOR_MANDATORY_VARIABLES";
oFF.FilterDialogI18n.I18N_FD_ERR_VH_SERVER_ERROR = "I18N_ERR_VH_SERVER_ERROR";
oFF.FilterDialogI18n.I18N_FD_EXCLUDE = "I18N_FD_EXCLUDE";
oFF.FilterDialogI18n.I18N_FD_EXCLUDED_MEMBERS = "I18N_FD_EXCLUDED_MEMBERS";
oFF.FilterDialogI18n.I18N_FD_EXCLUDE_MEMBERS = "I18N_FD_EXCLUDE_MEMBERS";
oFF.FilterDialogI18n.I18N_FD_FILTER_TAB_LIST = "I18N_FD_FILTER_TAB_LIST";
oFF.FilterDialogI18n.I18N_FD_FILTER_TAB_RANGE = "I18N_FD_FILTER_TAB_RANGE";
oFF.FilterDialogI18n.I18N_FD_FILTER_TYPE_MBF = "I18N_FD_FILTER_TAB_RANGE";
oFF.FilterDialogI18n.I18N_FD_HALFYEAR1 = "I18N_FD_HALFYEAR1";
oFF.FilterDialogI18n.I18N_FD_HALFYEAR2 = "I18N_FD_HALFYEAR2";
oFF.FilterDialogI18n.I18N_FD_HIERARCHY = "I18N_FD_HIERARCHY";
oFF.FilterDialogI18n.I18N_FD_HIERARCHY_FLAT_PRESENTATION = "I18N_FD_HIERARCHY_FLAT_PRESENTATION";
oFF.FilterDialogI18n.I18N_FD_HIERARCHY_INFO = "I18N_FD_HIERARCHY_INFO";
oFF.FilterDialogI18n.I18N_FD_HIER_DATE_FROM = "I18N_FD_HIER_DATE_FROM";
oFF.FilterDialogI18n.I18N_FD_HIER_DATE_TO = "I18N_FD_HIER_DATE_TO";
oFF.FilterDialogI18n.I18N_FD_HIER_OBJECT_VERSION = "I18N_FD_HIER_OBJECT_VERSION";
oFF.FilterDialogI18n.I18N_FD_HIER_VERSION = "I18N_FD_HIER_VERSION";
oFF.FilterDialogI18n.I18N_FD_INCLUDE = "I18N_FD_INCLUDE";
oFF.FilterDialogI18n.I18N_FD_LOADING = "I18N_FD_LOADING";
oFF.FilterDialogI18n.I18N_FD_MAX_RESULTS = "I18N_FD_MAX_RESULTS";
oFF.FilterDialogI18n.I18N_FD_MAX_RESULT_RECORDS_LIMIT_REACHED = "I18N_FD_MAX_RESULT_RECORDS_LIMIT_REACHED";
oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT = "I18N_FD_MBF_DIMENSION_CONTEXT";
oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_ERROR_NO_SELECTION = "I18N_FD_MBF_DIMENSION_CONTEXT_ERROR_NO_SELECTION";
oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO = "I18N_FD_MBF_DIMENSION_CONTEXT_INFO";
oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION = "I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION";
oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSIONS = "I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSIONS";
oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION_LIST = "I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION_LIST";
oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT = "I18N_FD_MBF_MEASURE_CONTEXT";
oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT_INFO = "I18N_FD_MBF_MEASURE_CONTEXT_INFO";
oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED = "I18N_FD_MEMBERS_BOOKED";
oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED_CASCADING = "I18N_FD_MEMBERS_BOOKED_CASCADING";
oFF.FilterDialogI18n.I18N_FD_MEMBERS_DEFAULT = "I18N_FD_MEMBERS_DEFAULT";
oFF.FilterDialogI18n.I18N_FD_MEMBERS_DEFAULT_WITHOUT_EFFECTIVE = "I18N_FD_MEMBERS_DEFAULT_WITHOUT_EFFECTIVE";
oFF.FilterDialogI18n.I18N_FD_MEMBERS_DIM_RELATIONSHIPS = "I18N_FD_MEMBERS_DIM_RELATIONSHIPS";
oFF.FilterDialogI18n.I18N_FD_MEMBERS_MASTER = "I18N_FD_MEMBERS_MASTER";
oFF.FilterDialogI18n.I18N_FD_MEMBER_SELECTION = "I18N_FD_MEMBER_SELECTION";
oFF.FilterDialogI18n.I18N_FD_MONTH1 = "I18N_FD_MONTH1";
oFF.FilterDialogI18n.I18N_FD_MONTH10 = "I18N_FD_MONTH10";
oFF.FilterDialogI18n.I18N_FD_MONTH11 = "I18N_FD_MONTH11";
oFF.FilterDialogI18n.I18N_FD_MONTH12 = "I18N_FD_MONTH12";
oFF.FilterDialogI18n.I18N_FD_MONTH2 = "I18N_FD_MONTH2";
oFF.FilterDialogI18n.I18N_FD_MONTH3 = "I18N_FD_MONTH3";
oFF.FilterDialogI18n.I18N_FD_MONTH4 = "I18N_FD_MONTH4";
oFF.FilterDialogI18n.I18N_FD_MONTH5 = "I18N_FD_MONTH5";
oFF.FilterDialogI18n.I18N_FD_MONTH6 = "I18N_FD_MONTH6";
oFF.FilterDialogI18n.I18N_FD_MONTH7 = "I18N_FD_MONTH7";
oFF.FilterDialogI18n.I18N_FD_MONTH8 = "I18N_FD_MONTH8";
oFF.FilterDialogI18n.I18N_FD_MONTH9 = "I18N_FD_MONTH9";
oFF.FilterDialogI18n.I18N_FD_NEXT = "I18N_FD_NEXT";
oFF.FilterDialogI18n.I18N_FD_NO_RESULTS = "I18N_FD_NO_RESULTS";
oFF.FilterDialogI18n.I18N_FD_NO_RESULTS_EXT = "I18N_VD_LINKED_VARIABLE_NO_DESCRIPTION";
oFF.FilterDialogI18n.I18N_FD_NO_RESULTS_FOR_SEARCH = "I18N_FD_NO_RESULTS_FOR_SEARCH";
oFF.FilterDialogI18n.I18N_FD_NO_VALUE = "I18N_FD_NO_VALUE";
oFF.FilterDialogI18n.I18N_FD_NULL = "I18N_FD_NULL";
oFF.FilterDialogI18n.I18N_FD_OK = "I18N_FD_OK";
oFF.FilterDialogI18n.I18N_FD_PAGE = "I18N_FD_PAGE";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION = "I18N_FD_PRESENTATION_DESCRIPTION";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION_AND_ID = "I18N_FD_PRESENTATION_DESCRIPTION_AND_ID";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID = "I18N_FD_PRESENTATION_ID";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_DESCRIPTION = "I18N_FD_PRESENTATION_ID_AND_DESCRIPTION";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_NAME = "I18N_FD_PRESENTATION_ID_AND_NAME";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME = "I18N_FD_PRESENTATION_NAME";
oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME_AND_ID = "I18N_FD_PRESENTATION_NAME_AND_ID";
oFF.FilterDialogI18n.I18N_FD_PREVIOUS = "I18N_FD_PREVIOUS";
oFF.FilterDialogI18n.I18N_FD_QUARTER1 = "I18N_FD_QUARTER1";
oFF.FilterDialogI18n.I18N_FD_QUARTER2 = "I18N_FD_QUARTER2";
oFF.FilterDialogI18n.I18N_FD_QUARTER3 = "I18N_FD_QUARTER3";
oFF.FilterDialogI18n.I18N_FD_QUARTER4 = "I18N_FD_QUARTER4";
oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW = "I18N_FD_RANGES_ADD_NEW";
oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW_DISABLED_TOOLTIP = "I18N_FD_RANGES_ADD_NEW_DISABLED_TOOLTIP";
oFF.FilterDialogI18n.I18N_FD_RANGES_BETWEEN_LABEL = "I18N_FD_RANGES_BETWEEN_LABEL";
oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_ENTER_NUMBER = "I18N_FD_RANGES_ERROR_ENTER_NUMER";
oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_ENTER_VALUE = "I18N_FD_RANGES_ERROR_ENTER_VALUE";
oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_MIN_GREATER_MAX = "I18N_FD_RANGES_MIN_GREATER_MAX";
oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_NOT_VALID = "I18N_FD_RANGES_NOT_VALID";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER = "I18N_FD_RANGES_HEADER";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_GENERIC = "I18N_FD_RANGES_HEADER_GENERIC";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_BETWEEN = "I18N_FD_RANGES_HEADER_OPERATOR_BETWEEN";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_EQUAL = "I18N_FD_RANGES_HEADER_OPERATOR_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_GREATER = "I18N_FD_RANGES_HEADER_OPERATOR_GREATER";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_GREATER_EQUAL = "I18N_FD_RANGES_HEADER_OPERATOR_GREATER_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_LESS = "I18N_FD_RANGES_HEADER_OPERATOR_LESS";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_LESS_EQUAL = "I18N_FD_RANGES_HEADER_OPERATOR_LESS_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_BETWEEN = "I18N_FD_RANGES_HEADER_OPERATOR_NOT_BETWEEN";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_EQUAL = "I18N_FD_RANGES_HEADER_OPERATOR_NOT_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER = "I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER_EQUAL = "I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS = "I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS";
oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS_EQUAL = "I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_INFO = "I18N_FD_RANGES_INFO";
oFF.FilterDialogI18n.I18N_FD_RANGES_INFO_ON_COMPOUND_DIMENSION = "I18N_FD_RANGES_INFO_ON_COMPOUND_DIMENSION";
oFF.FilterDialogI18n.I18N_FD_RANGES_OPERATOR_EXCLUDING = "I18N_FD_RANGES_OPERATOR_EXCLUDING";
oFF.FilterDialogI18n.I18N_FD_RANGES_OPERATOR_INCLUDING = "I18N_FD_RANGES_OPERATOR_INCLUDING";
oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_EQUAL = "I18N_FD_RANGES_PLACEHOLDER_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MAX = "I18N_FD_RANGES_PLACEHOLDER_MAX";
oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MIN = "I18N_FD_RANGES_PLACEHOLDER_MIN";
oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_NOT_EQUAL = "I18N_FD_RANGES_PLACEHOLDER_NOT_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_REMOVE_RANGE = "I18N_FD_RANGES_REMOVE_RANGE";
oFF.FilterDialogI18n.I18N_FD_RANGES_SELECT_OPERATOR = "I18N_FD_RANGES_SELECT_OPERATOR";
oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_EQUAL = "I18N_FD_RANGES_TOOLTIP_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MAX = "I18N_FD_RANGES_TOOLTIP_MAX";
oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MIN = "I18N_FD_RANGES_TOOLTIP_MIN";
oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_NOT_EQUAL = "I18N_FD_RANGES_TOOLTIP_NOT_EQUAL";
oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT1 = "I18N_FD_RANGES_UNSUPPORTED_TEXT1";
oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT2 = "I18N_FD_RANGES_UNSUPPORTED_TEXT2";
oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT3 = "I18N_FD_RANGES_UNSUPPORTED_TEXT3";
oFF.FilterDialogI18n.I18N_FD_RANGES_WARN_VALUE_OUTSIDE_RANGE = "I18N_FD_RANGES_WARN_VALUE_OUTSIDE_RANGE";
oFF.FilterDialogI18n.I18N_FD_READMODE_SWITCH_BOOKED_DISABLED = "I18N_FD_READMODE_SWITCH_BOOKED_DISABLED";
oFF.FilterDialogI18n.I18N_FD_READMODE_SWITCH_UNBOOKED_DISABLED = "I18N_FD_READMODE_SWITCH_UNBOOKED_DISABLED";
oFF.FilterDialogI18n.I18N_FD_SEARCH = "I18N_FD_SEARCH";
oFF.FilterDialogI18n.I18N_FD_SEARCH_SIMPLIFIED = "I18N_FD_SEARCH_SIMPLIFIED";
oFF.FilterDialogI18n.I18N_FD_SEARCH_TOOLTIP = "I18N_FD_SEARCH_TOOLTIP";
oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS = "I18N_FD_SELECTED_MEMBERS";
oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS_CLEARED_ANNOUNCEMENT = "I18N_FD_SELECTED_MEMBERS_CLEARED_ANNOUNCEMENT";
oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS_REMOVE_ANNOUNCEMENT = "I18N_FD_SELECTED_MEMBERS_REMOVE_ANNOUNCEMENT";
oFF.FilterDialogI18n.I18N_FD_SELECTED_USERS = "I18N_FD_SELECTED_USERS";
oFF.FilterDialogI18n.I18N_FD_SELECTION_REQUIRED = "I18N_FD_SELECTION_REQUIRED";
oFF.FilterDialogI18n.I18N_FD_SELECT_ATTRIBUTE = "I18N_FD_SELECT_ATTRIBUTE";
oFF.FilterDialogI18n.I18N_FD_SELECT_MEMBER_FOR = "I18N_FD_SELECT_MEMBER_FOR";
oFF.FilterDialogI18n.I18N_FD_SETTINGS = "I18N_FD_SETTINGS";
oFF.FilterDialogI18n.I18N_FD_SHOW_ONLY_SELECTED_MEMBERS = "I18N_FD_SHOW_ONLY_SELECTED_MEMBERS";
oFF.FilterDialogI18n.I18N_FD_SHOW_PRESENTATION = "I18N_FD_SHOW_PRESENTATION";
oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS = "I18N_FD_UNBOOKED_MEMBERS";
oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT = "I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT";
oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT_TOOLTIP = "I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT_TOOLTIP";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_CANCEL_BUTTON = "I18N_FD_UNSUPPORTED_FILTER_CANCEL_BUTTON";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_DELETE_BUTTON = "I18N_FD_UNSUPPORTED_FILTER_DELETE_BUTTON";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_FISCAL_RANGE_TEXT = "I18N_FD_UNSUPPORTED_FILTER_FISCAL_RANGE_TEXT";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_INFO_LINK = "I18N_FD_UNSUPPORTED_FILTER_INFO_LINK";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_SUB_TEXT = "I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_SUB_TEXT";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_TEXT = "I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_TEXT";
oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_TITLE = "I18N_FD_UNSUPPORTED_FILTER_TITLE";
oFF.FilterDialogI18n.staticSetup = function()
{
	let provider = new oFF.FilterDialogI18n();
	provider.setupProvider("FilterDialogProgram", true);
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_OK, "OK", "#XBUT: The text of the ok button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_CANCEL, "Cancel", "#XBUT: The text of the cancel button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SETTINGS, "Settings", "#XTIT: The title of the settings panel");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_NO_RESULTS, "No available members", "#XMSG: Message shown when no members are available for selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_NO_RESULTS_FOR_SEARCH, "There are no results for the searched member", "#XMSG: Message shown when no members are available for selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_NO_RESULTS_EXT, "There are no results for the searched member in the description section. It might be a fallback. Please try to search with ID.", "#XMSG: Message shown when no members are available for linked variables selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MAX_RESULT_RECORDS_LIMIT_REACHED, "No available members are displayed as the member count is higher than the limit for possible members. Please use the search field to restrict the results.", "#XMSG: Message shown when no members are available because the MaxResultRecords limit has been reached.");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MAX_RESULTS, "This list is restricted to {0} results. Please refine your search criteria.", "#XMSG: Message shown when a search responds with too many members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS, "Selected Members", "#XTIT: The title of the list showing the selected members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_EXCLUDED_MEMBERS, "Excluded Members", "#XTIT: The title of the list showing the excluded members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECTED_USERS, "Selected Users", "#XTIT: The title of the list showing the selected members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS_REMOVE_ANNOUNCEMENT, "{0} has been removed from selection", "#XMSG: Announcement read by screen readers after removing a member from the selected members list");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECTED_MEMBERS_CLEARED_ANNOUNCEMENT, "Selection has been cleared", "#XMSG: Announcement read by screen readers the clear selection button has been pressed");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_CLEAR_SELECTION, "Clear selection", "#XBUT: The text of the clear selection button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SHOW_PRESENTATION, "Display:", "#XFLD: The label of the id and description dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID, "ID", "#XSEL: The ID presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION, "Description", "#XSEL: The description presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME, "Name", "#XSEL: The name presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_DESCRIPTION, "ID and Description", "#XSEL: The ID and description presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_DESCRIPTION_AND_ID, "Description and ID", "#XSEL: The description and ID presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_ID_AND_NAME, "ID and Name", "#XSEL: The ID and name presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PRESENTATION_NAME_AND_ID, "Name and ID", "#XSEL: The name and ID presentation value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_ATTRIBUTES, "Attributes:", "#XFLD: The label of the attributes combobox");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECT_ATTRIBUTE, "Select Attribute", "#XTOL: A placeholder for the attributes combobox");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIERARCHY, "Hierarchy:", "#XFLD: The label of the hierarchy dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIERARCHY_FLAT_PRESENTATION, "Flat presentation", "#XSEL: The hierarchy dropdown value for flat presentation, i.e. no hierarchy");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIERARCHY_INFO, "Changing the hierarchy presentation will clear your current selection.", "#XMSG: An info text that is shown in the hierarchy dropdown when a member selection already exists");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_LOADING, "Loading...", "#XSEL: An indicator shown in the tree to while child members of an expanded node are currently loading");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SEARCH, "Search in...", "#XTOL: A placeholder for the search field");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SEARCH_SIMPLIFIED, "Search", "#XTOL: A placeholder for the search field if no dropdown is available for choosing an attribute to search on");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SEARCH_TOOLTIP, "Select the option in which to search", "#XTOL: A tooltip for the search in attributes dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PREVIOUS, "Previous page", "#XTOL: A tooltip for the previous page button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_NEXT, "Next page", "#XTOL: A tooltip for the next page button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_PAGE, "Page", "#XFLD: A hidden label for paging buttons");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_CURRENTPAGE, "{0} of {1}", "#XMSG: A label showing the current page number that is displayed like '1 of 10'");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_NULL, "(Null)", "#XSEL: A text for representing a NULL member");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_NO_VALUE, "(No Value)", "#XSEL: A text for representing an empy member");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_ERR_VH_SERVER_ERROR, "A server error has occurred, and the values cannot be processed. Please try again.", "#XMSG: A message displayed when the value help response contains an error");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS, "Show unbooked members", "#XFLD: A label for the unbooked members switch");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT, "Use Default", "#XCKL: A label for the default read mode usage");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNBOOKED_MEMBERS_USE_DEFAULT_TOOLTIP, "Applies type for filter value selection as defined in BW query", "#XTOL: A label for the default read mode usage");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_AVAILABLE_MEMBERS, "Available members:", "#XFLD: A label for the members dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBERS_DEFAULT, "Default ({0})", "#XSEL: The Default selection value for available members including the effective value in brackets.");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBERS_DEFAULT_WITHOUT_EFFECTIVE, "Default", "#XSEL: The Default selection value for available members without the effective value in brackets.");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED_CASCADING, "Cascaded Members", "#XSEL: The Booked Cascading selection value for available members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBERS_BOOKED, "Booked Members", "#XSEL: The Booked selection value for available members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBERS_MASTER, "All Members", "#XSEL: The Master selection value for available members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBERS_DIM_RELATIONSHIPS, "Dimension Relationships", "#XSEL: The Dimension Relationships value for available members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_EXCLUDE_MEMBERS, "Exclude selected members", "#XFLD: A label for the exclude switch");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MEMBER_SELECTION, "Member selection:", "#XFLD: A label for the include-exclude toggle button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_INCLUDE, "Include", "#XFLD: A label for the include toggle button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_EXCLUDE, "Exclude", "#XFLD: A label for the exclude toggle button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_ERR_NO_VALUES_FOR_MANDATORY_VARIABLES, "Please set values for all mandatory variables", "#XMSG: A message shown when the mandatory variables must be set first before opening the filter dialog for the current variable");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_READMODE_SWITCH_BOOKED_DISABLED, "Showing unbooked members is not supported", "#XTOL: A tooltip for the unbooked members switch");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_READMODE_SWITCH_UNBOOKED_DISABLED, "Showing booked members only is not supported", "#XTOL: A tooltip for the unbooked members switch");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SHOW_ONLY_SELECTED_MEMBERS, "Show only selected members", "#XBUT: A text for a button showing only the selected members in the list");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECT_MEMBER_FOR, "Select Member for {0}", "#XTIT: A dialog title for selecting a member for a specific variable");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_SELECTION_REQUIRED, "Please select at least one item to set the filter", "#XMSG: A post message shown when selecting at least 1 item is required but user didn't select anything");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_CLIPBOARD_VALUES_NOT_FOUND, "Some values could not be found and were not applied.", "#XMSG: A post message shown when not all values which were pasted to the clipboard are valid members");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIER_VERSION, "Version", "#XSEL: A presentation value in hierarchy catalog");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIER_OBJECT_VERSION, "Object Version", "#XSEL: A presentation value in hierarchy catalog");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIER_DATE_FROM, "Date from", "#XSEL: A presentation value in hierarchy catalog");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HIER_DATE_TO, "Date to", "#XSEL: A presentation value in hierarchy catalog");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_EQUAL, "Equal", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_EQUAL, "Not Equal", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_GREATER, "Greater Than", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_GREATER_EQUAL, "Greater Than or Equal To", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_LESS, "Less Than", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_LESS_EQUAL, "Less Than or Equal To", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_BETWEEN, "Between", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_BETWEEN, "Not Between", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NULL, "Is Null", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NOT_NULL, "Is Not Null", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_GREATER, "Not Greater Than", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_GREATER_EQUAL, "Not Greater Than or Equal To", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_LESS, "Not Less Than", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_LESS_EQUAL, "Not Less Than or Equal To", "#XSEL: An item in the comparison operator dropdown for range selection");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_FILTER_TAB_LIST, "Filter by Member", "#XTIT: A tab title for list view.");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_FILTER_TAB_RANGE, "Filter by Range", "#XTIT: A tab title for range view.");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER, "Range {0}: {1}", "#XTIT: A basic title for a range containing the range number and the range description");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_GENERIC, "Range {0}", "#XTIT: A basic title for a range containing the range number but no description yet");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_EQUAL, "Equal To {0}", "#XTIT: The range title description for comparison operator equal");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_EQUAL, "Not Equal To {0}", "#XTIT: The range title description for comparison operator not-equal");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_GREATER, "Greater Than {0}", "#XTIT: The range title description for comparison operator greater");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_GREATER_EQUAL, "Greater Than or Equal To {0}", "#XTIT: The range title description for comparison operator greater-equal");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_LESS, "Less Than {0}", "#XTIT: The range title description for comparison operator less");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_LESS_EQUAL, "Less Than or Equal To {0}", "#XTIT: The range title description for comparison operator less-equal");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_BETWEEN, "Between {0} and {1}", "#XTIT: The range title description for comparison operator between");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_BETWEEN, "Not Between {0} and {1}", "#XTIT: The range title description for comparison operator not-between");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER, "Not Greater Than {0}", "#XTIT: The range title description for comparison operator not greater");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER_EQUAL, "Not Greater Than or Equal To {0}", "#XTIT: The range title description for comparison operator not greater-equal");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS, "Not Less Than {0}", "#XTIT: The range title description for comparison operator not less");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS_EQUAL, "Not Less Than or Equal To {0}", "#XTIT: The range title description for comparison operator not less-equal");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_INFO, "Available range: {0} - {1}", "#XMSG: A message describing the available numeric range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW, "Add a new range", "#XBUT: The text of the add new range button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_ADD_NEW_DISABLED_TOOLTIP, "Range {0} is not valid.", "#XTOL: A button tooltip describing the disabled state");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_SELECT_OPERATOR, "Operator:", "#XFLD: The label of the comparison operator dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_OPERATOR_INCLUDING, "Including", "#XTIT: The group header for including operators in the comparison operator dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_OPERATOR_EXCLUDING, "Excluding", "#XTIT: The group header for excluding operators in the comparison operator dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_BETWEEN_LABEL, "and", "#XFLD: A label shown between the 2 ranges fields for min and max values");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_REMOVE_RANGE, "Remove range {0}", "#XTOL: A tooltip for the remove range button");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MIN, "Min", "#XTOL: A placeholder for the min value in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MAX, "Max", "#XTOL: A placeholder for the max value in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_EQUAL, "Equal To", "#XTOL: A placeholder shown in the input field when the equal comparison operator is chosen in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_NOT_EQUAL, "Not Equal To", "#XTOL: A placeholder shown in the input field when the not-equal comparison operator is chosen in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MIN, "Range {0}, minimum value", "#XTOL: A tooltip shown for the min value in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MAX, "Range {0}, maximum value", "#XTOL: A tooltip shown for the max value in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_EQUAL, "Range {0}, equal to value", "#XTOL: A tooltip shown for the equal-to value in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_NOT_EQUAL, "Range {0}, not equal to value", "#XTOL: A tooltip shown for the not-equal-to value in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_ENTER_NUMBER, "Please enter a number.", "#XMSG: Error message shown when a number is not valid");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_ENTER_VALUE, "Please enter a value.", "#XMSG: Error shown when no value is provided in an input field in a range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_NOT_VALID, "The value is not valid.", "#XMSG: Error shown when a provided non-numeric value is not valid");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_MIN_GREATER_MAX, "The start value cannot be bigger than the end value.", "#XMSG: Error shown when the start value is bigger the end value");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_WARN_VALUE_OUTSIDE_RANGE, "Input value is outside the available value range.", "#XMSG: Warning shown when the provided range is outside the available range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT1, "You can't mix ranges with member selection in a hierarchy.", "#XMSG: Part 1 of a message displayed when adding a range is not possible because a hierarchy is active and members from this hierarchy have already been selected");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT2, "Clear your current selection to filter by range.", "#XMSG: Part 2 of a message displayed when adding a range is not possible because a hierarchy is active and members from this hierarchy have already been selected");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_UNSUPPORTED_TEXT3, "If you want to mix member selection and ranges, use the flat presentation.", "#XMSG: Part 3 of a message displayed when adding a range is not possible because a hierarchy is active and members from this hierarchy have already been selected");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_RANGES_INFO_ON_COMPOUND_DIMENSION, "Filter by range is only applied to the non-compounded key of this compounded dimension.", "#XMSG: Info message shown when the user tries to define a range filter on a compound dimension");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_HIERARCHY, "Hierarchy:", "#XFLD: A label of the hierarchy dropdown in a date range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_HEADER, "From {0} to {1}", "#XTIT: A title for a date range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_FIXED, "Fixed Date", "#XBUT: A text for selecting a fixed range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_DYNAMIC, "Dynamic Date", "#XBUT: A text for selecting a dynamic range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_TYPE, "Range Type:", "#XFLD: A label for the date range type dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_GRANULARITY, "Granularity:", "#XFLD: A label for the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_LOOK_BACK, "Look Back:", "#XFLD: A label for the date range look back input");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_LOOK_AHEAD, "Look Ahead:", "XFLD: A label for the date range look ahead input");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_CURRENT_PERIOD, "Current Period:", "XFLD: A label for the date range current period description");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_PERIOD, "Offset Period:", "#XFLD: A label for the date range offset period description");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_DIRECTION, "Offset Direction:", "XFLD: A label for the date range offset direction dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_GRANULARITY, "Offset Granularity:", "XFLD: A label for the date range offset granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_AMOUNT, "Offset Amount:", "XFLD: A label for the date range offset amount input");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_CURRENT_PERIOD, "Include range up to current period:", "#XFLD: A label for the up-to-current-period toggle");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_OFFSET_PERIOD, "Include range up to offset period:", "#XFLD: A label for the up-to-offset-period toggle");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_FROM, "From:", "#XFLD: A label for the from date selection in a fixed date range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_TO, "To:", "#XFLD: A label for the to date selection in a fixed date range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_MIN_GREATER_MAX, "The start date cannot be later than the end date.", "#XMSG: Error shown when the start date is later than the end date");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_INVALID_DATE_FORMAT, "The input is not a valid date format ({0}).", "#XMSG: Error shown when the date valid is not in a valid format");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_START_DATE_OUTSIDE_RANGE, "The start date is outside the selectable range.", "#XMSG: Error shown when the start date range is outside the available range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_END_DATE_OUTSIDE_RANGE, "The end date is outside the selectable range.", "#XMSG: Error shown when the end date range is outside the available range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_NUMBER_BETWEEN, "Please enter a number between {0} and {1}.", "#XMSG: Error shown when the provided number of years/months/etc. for look back or ahead is outside the supported range");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_STANDARD, "Standard", "#XSEL: A value in the date range type dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_OFFSET, "Offset", "#XSEL: A value in the date range type dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_OFFSET_DIRECTION_LOOK_BACK, "Look Back", "#XSEL: A value in the date range offset direction dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_OFFSET_DIRECTION_LOOK_AHEAD, "Look Ahead", "#XSEL: A value in the date range offset direction dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR, "Year", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_HALFYEAR, "Half Year", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_QUARTER, "Quarter", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_MONTH, "Month", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_DAY, "Day", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_YEAR, "Current Year", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_QUARTER, "Current Quarter", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_MONTH, "Current Month", "#XSEL: A value in the date range granularity dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_FROM_START, "Start", "#XSEL: A value in the fixed date range year dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TO_END, "End", "#XSEL: A value in the fixed date range year dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HALFYEAR1, "H1", "#XSEL: A value in the date range half year dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_HALFYEAR2, "H2", "#XSEL: A value in the date range half year dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_QUARTER1, "Q1", "#XSEL: A value in the date range quarter dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_QUARTER2, "Q2", "#XSEL: A value in the date range quarter dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_QUARTER3, "Q3", "#XSEL: A value in the date range quarter dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_QUARTER4, "Q4", "#XSEL: A value in the date range quarter dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH1, "Jan", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH2, "Feb", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH3, "Mar", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH4, "Apr", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH5, "May", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH6, "Jun", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH7, "Jul", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH8, "Aug", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH9, "Sep", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH10, "Oct", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH11, "Nov", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MONTH12, "Dec", "#XSEL: A value in the date range month dropdown");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT, "Dimension Context:", "#XFLD: A label for the dimension context dropdown for measure based filters");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO, "Edit dimension context for aggregation.", "#XACT: A text shown in a popover for the dimension context dropdown for measure based filters");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION, "Mandatory dimension:", "#XACT: A text shown in a popover for the dimension context dropdown for measure based filters when a required dimension exists");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSIONS, "Mandatory dimensions:", "#XACT: A text shown in a popover for the dimension context dropdown for measure based filters when required dimensions exist");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION_LIST, "{0}.", "#XACT: A bold enumeration of dimensions shown in a popover for the dimension context dropdown for measure based filters when required dimensions exist");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_ERROR_NO_SELECTION, "At least one dimension must be selected.", "#XMSG: Error shown when no dimension context has been selected for a measure based filter");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT, "Measure Context:", "#XFLD: A label for the measure context dropdown for measure based filters");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT_INFO, "A measure selection is required for this model.", "#XACT:  A text shown in a popover for the measure context dropdown for measure based filters");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_TITLE, "Incompatible Filter", "#XTIT: The title of the popup for unsupported filters");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_DELETE_BUTTON, "Delete Filter", "#XBUT: The text of the button to clear the unsupported filter");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_CANCEL_BUTTON, "Cancel", "#XBUT: The text of the button to cancel the popup and not clear the unsupported filter");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_INFO_LINK, "Learn more...", "#XLNK: The link to the documentation to show more details");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_FISCAL_RANGE_TEXT, "To edit the filter of this fiscal dimension, you must first delete the applied filter.", "#XMSG: The text describing the unsupported filter on non-compound fields");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_TEXT, "To edit the filter of this compounded dimension, you must first delete the applied filter.", "#XMSG: The text describing the unsupported fiscal range filter");
	provider.addTextWithComment(oFF.FilterDialogI18n.I18N_FD_UNSUPPORTED_FILTER_NON_COMPOUND_FIELD_SUB_TEXT, "Range filters on fiscal dimensions are not supported.", "#XMSG: The text describing the unsupported fiscal range filter");
	return provider;
};

oFF.FdModel = function() {};
oFF.FdModel.prototype = new oFF.XObject();
oFF.FdModel.prototype._ff_c = "FdModel";

oFF.FdModel.create = function(config)
{
	return oFF.FdModel.createExt(config, false, null, null);
};
oFF.FdModel.createExt = function(config, mobile, process, controller)
{
	let fd = new oFF.FdModel();
	fd.setupModel(config, mobile, process, controller);
	return fd;
};
oFF.FdModel.prototype.m_childNodesPageSize = 0;
oFF.FdModel.prototype.m_configuration = null;
oFF.FdModel.prototype.m_contentProvider = null;
oFF.FdModel.prototype.m_controller = null;
oFF.FdModel.prototype.m_currentPage = 0;
oFF.FdModel.prototype.m_defaultExpandLevel = 0;
oFF.FdModel.prototype.m_excludeSwitchOn = false;
oFF.FdModel.prototype.m_featureAvailabilityChangeListeners = null;
oFF.FdModel.prototype.m_features = null;
oFF.FdModel.prototype.m_hierarchyModel = null;
oFF.FdModel.prototype.m_initialSearchValue = null;
oFF.FdModel.prototype.m_items = null;
oFF.FdModel.prototype.m_lastReadMode = null;
oFF.FdModel.prototype.m_listenerOnItemsAdded = null;
oFF.FdModel.prototype.m_listenerOnPageChanged = null;
oFF.FdModel.prototype.m_mobile = false;
oFF.FdModel.prototype.m_pageCount = 0;
oFF.FdModel.prototype.m_pageSize = 0;
oFF.FdModel.prototype.m_presentationsModel = null;
oFF.FdModel.prototype.m_queryDefaultReadMode = null;
oFF.FdModel.prototype.m_rangeModel = null;
oFF.FdModel.prototype.m_selectedItems = null;
oFF.FdModel.prototype.m_selectionChangeListeners = null;
oFF.FdModel.prototype.m_selectionMode = null;
oFF.FdModel.prototype.m_sessionData = null;
oFF.FdModel.prototype.m_supportedReadModes = null;
oFF.FdModel.prototype.m_supportsDisplayKey = false;
oFF.FdModel.prototype.m_totalPageCount = 0;
oFF.FdModel.prototype.m_viewTypes = null;
oFF.FdModel.prototype.addItems = function(items, startPage)
{
	if (oFF.notNull(this.m_lastReadMode) || this.m_hierarchyModel.isActiveHierarchyChanged())
	{
		this.m_items = oFF.XObjectExt.release(this.m_items);
		this.m_items = oFF.XLinkedHashMapByString.create();
		this.m_currentPage = 0;
		this.m_pageCount = 0;
		this.m_lastReadMode = null;
		this.m_hierarchyModel.resetHierarchyChangedState();
	}
	if (oFF.XCollectionUtils.hasElements(items) && startPage >= 0)
	{
		let pageSize = this.getPageSize();
		let size = items.size();
		if (size <= pageSize)
		{
			this.m_items.put(oFF.XInteger.convertToString(startPage), items);
			this.m_pageCount = startPage >= this.m_pageCount ? startPage + 1 : this.m_pageCount;
		}
		else
		{
			let page = startPage;
			let start = 0;
			let end = 0;
			while (size > end)
			{
				end = end + pageSize;
				this.m_items.put(oFF.XInteger.convertToString(page), items.sublist(start, oFF.XMath.min(end, size)).createListCopy());
				start = start + pageSize;
				page++;
			}
			this.m_pageCount = oFF.XMath.max(page, this.m_pageCount);
		}
		if (oFF.notNull(this.m_listenerOnItemsAdded))
		{
			this.m_listenerOnItemsAdded();
		}
	}
};
oFF.FdModel.prototype.addToSelection = function(item)
{
	if (oFF.notNull(item))
	{
		this.m_selectedItems.add(item);
		this.onSelectionChanged();
	}
};
oFF.FdModel.prototype.changeSelection = function(itemsToAdd, itemsToRemove)
{
	if (oFF.notNull(itemsToRemove))
	{
		for (let k = itemsToRemove.size() - 1; k >= 0; k--)
		{
			let itemToRemove = itemsToRemove.get(k);
			if (oFF.isNull(itemsToAdd) || !itemsToAdd.contains(itemToRemove))
			{
				this.m_selectedItems.removeElement(itemToRemove);
			}
		}
	}
	if (oFF.notNull(itemsToAdd))
	{
		for (let i = 0; i < itemsToAdd.size(); i++)
		{
			let itemToAdd = itemsToAdd.get(i);
			if (!this.m_selectedItems.contains(itemToAdd))
			{
				if (this.isFeatureEnabled(oFF.FdFeature.EXCLUDE) && itemToAdd.getFdComparisonOperator().isEqualOperator())
				{
					itemToAdd.setExcluded(this.isExcludeSwitchOn());
				}
				this.m_selectedItems.add(itemToAdd);
			}
		}
	}
	this.onSelectionChanged();
};
oFF.FdModel.prototype.clearSelection = function()
{
	this.m_selectedItems.clear();
	this.onSelectionChanged();
};
oFF.FdModel.prototype.containsRangeSelectionOnly = function()
{
	return oFF.XCollectionUtils.hasElements(this.m_selectedItems) && !oFF.XCollectionUtils.contains(this.m_selectedItems, (selectedItem) => {
		return selectedItem.getFdComparisonOperator().isEqualOperator();
	});
};
oFF.FdModel.prototype.getChildNodesPageSize = function()
{
	return this.m_childNodesPageSize;
};
oFF.FdModel.prototype.getConfig = function()
{
	return this.m_configuration;
};
oFF.FdModel.prototype.getContentProvider = function()
{
	return this.m_contentProvider;
};
oFF.FdModel.prototype.getDefaultExpandLevel = function()
{
	return this.m_defaultExpandLevel;
};
oFF.FdModel.prototype.getEffectiveReadMode = function()
{
	let readMode = this.getReadMode();
	return readMode === oFF.OlapUiReadMode.QUERY_DEFAULT ? this.m_queryDefaultReadMode : readMode;
};
oFF.FdModel.prototype.getHierarchyModel = function()
{
	return this.m_hierarchyModel;
};
oFF.FdModel.prototype.getInitialSearchValue = function()
{
	return this.m_initialSearchValue;
};
oFF.FdModel.prototype.getItems = function(fromPage, toPage)
{
	let allItems = oFF.XList.create();
	let pages = this.m_items.getValuesAsReadOnlyList();
	let pageCount = pages.size();
	let endPage = toPage === -1 ? pageCount : oFF.XMath.min(toPage + 1, pageCount);
	for (let i = fromPage; i < endPage; i++)
	{
		allItems.addAll(pages.get(i));
	}
	return allItems;
};
oFF.FdModel.prototype.getItemsByPage = function(page)
{
	return this.m_items.getByKey(oFF.XInteger.convertToString(page));
};
oFF.FdModel.prototype.getItemsOnCurrentPage = function()
{
	this.m_initialSearchValue = null;
	let items = this.getItemsByPage(this.m_currentPage);
	return oFF.notNull(items) ? items : oFF.XList.create();
};
oFF.FdModel.prototype.getMissingPresentations = function(items, presentations)
{
	return this.supportsPresentations() ? this.m_contentProvider.getMissingPresentations(items, presentations) : null;
};
oFF.FdModel.prototype.getPage = function()
{
	return this.m_currentPage;
};
oFF.FdModel.prototype.getPageCount = function()
{
	return this.m_pageCount;
};
oFF.FdModel.prototype.getPageSize = function()
{
	return this.m_hierarchyModel.isHierarchical() ? this.m_childNodesPageSize : this.m_pageSize;
};
oFF.FdModel.prototype.getPresentationsModel = function()
{
	if (oFF.isNull(this.m_presentationsModel))
	{
		this.m_presentationsModel = oFF.FdPresentationsModel.create(this);
	}
	return this.m_presentationsModel;
};
oFF.FdModel.prototype.getQueryDefaultReadMode = function()
{
	return this.m_queryDefaultReadMode;
};
oFF.FdModel.prototype.getRangeModel = function()
{
	if (oFF.isNull(this.m_rangeModel))
	{
		this.m_rangeModel = oFF.FdRangeModel.create();
	}
	return this.m_rangeModel;
};
oFF.FdModel.prototype.getReadMode = function()
{
	return this.supportsReadModes() ? this.m_contentProvider.getReadMode() : null;
};
oFF.FdModel.prototype.getSelectedItems = function()
{
	return this.m_selectedItems;
};
oFF.FdModel.prototype.getSelectionMode = function()
{
	return this.m_selectionMode;
};
oFF.FdModel.prototype.getSessionData = function()
{
	return this.m_sessionData;
};
oFF.FdModel.prototype.getTotalPageCount = function()
{
	return this.m_totalPageCount;
};
oFF.FdModel.prototype.getViewTypes = function()
{
	return oFF.XCollectionUtils.hasElements(this.m_viewTypes) ? this.m_viewTypes : oFF.XCollectionUtils.singletonList(oFF.FilterDialogViewType.LIST);
};
oFF.FdModel.prototype.hasNextPage = function()
{
	return this.m_currentPage + 1 < this.m_pageCount;
};
oFF.FdModel.prototype.initReadMode = function(readMode, queryDefaultReadMode, supportedReadModes)
{
	if (oFF.notNull(this.m_contentProvider) && this.supportsReadModes())
	{
		this.m_contentProvider.setReadMode(readMode);
	}
	this.m_queryDefaultReadMode = queryDefaultReadMode;
	this.m_supportedReadModes = supportedReadModes;
};
oFF.FdModel.prototype.isExcludeSwitchOn = function()
{
	return this.m_excludeSwitchOn;
};
oFF.FdModel.prototype.isFeatureEnabled = function(feature)
{
	return this.m_features.contains(feature);
};
oFF.FdModel.prototype.isInitial = function()
{
	return oFF.notNull(this.m_lastReadMode) || this.m_hierarchyModel.isActiveHierarchyChanged() || !oFF.XCollectionUtils.hasElements(this.m_items);
};
oFF.FdModel.prototype.isMobile = function()
{
	return this.m_mobile;
};
oFF.FdModel.prototype.isSystemTypeHana = function()
{
	return this.supportsValueHelp() && this.m_contentProvider.isSystemTypeHana();
};
oFF.FdModel.prototype.loadMissingPresentations = function(items, missingPresentations, listener, customIdentifier)
{
	if (this.supportsPresentations())
	{
		this.m_contentProvider.loadMissingPresentations(items, missingPresentations, listener, customIdentifier);
	}
};
oFF.FdModel.prototype.loadSuggestions = function(text, listener)
{
	this.m_contentProvider.loadSuggestions(text, listener);
};
oFF.FdModel.prototype.moveToEndOfSelection = function(item)
{
	if (oFF.notNull(item))
	{
		this.m_selectedItems.removeElement(item);
		this.m_selectedItems.add(item);
		this.onSelectionChanged();
	}
};
oFF.FdModel.prototype.onError = function(messages, customIdentifier)
{
	if (oFF.notNull(this.m_lastReadMode))
	{
		this.setReadMode(this.m_lastReadMode);
		this.m_lastReadMode = null;
	}
};
oFF.FdModel.prototype.onNewClipboardSelection = function(items, includedItems, excludedItems)
{
	this.syncSelectionListWithKnownItems(items, this.getItems(0, -1), null, true, true, oFF.FdDataLoadedLambdaListener.create((syncedItems, messages) => {
		if (!this.isReleased())
		{
			let newSelection = oFF.XList.create();
			oFF.XStream.of(this.m_selectedItems).filter((selectedItem) => {
				return !selectedItem.getFdComparisonOperator().isEqualOperator();
			}).forEach((rangeItem) => {
				newSelection.add(rangeItem);
			});
			if (!includedItems && excludedItems)
			{
				oFF.XCollectionUtils.addAllIfNotPresent(newSelection, oFF.XCollectionUtils.filter(this.m_selectedItems, (item2) => {
					return item2.getFdComparisonOperator().isEqualOperator() && !item2.isExcluded() && !syncedItems.contains(item2);
				}));
			}
			let selectionExcluded = this.isFeatureEnabled(oFF.FdFeature.EXCLUDE) && this.m_excludeSwitchOn || this.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED) && excludedItems;
			oFF.XCollectionUtils.forEach(syncedItems, (item1) => {
				item1.setExcluded(selectionExcluded);
			});
			oFF.XCollectionUtils.addAllIfNotPresent(newSelection, syncedItems);
			if (includedItems && !excludedItems)
			{
				oFF.XCollectionUtils.addAllIfNotPresent(newSelection, oFF.XCollectionUtils.filter(this.m_selectedItems, (item3) => {
					return item3.getFdComparisonOperator().isEqualOperator() && item3.isExcluded();
				}));
			}
			this.m_selectedItems.clear();
			this.m_selectedItems.addAll(newSelection);
			this.onSelectionChanged();
			if (oFF.notNull(messages) && oFF.notNull(this.m_controller) && messages.hasSeverity(oFF.Severity.WARNING) && messages.getFirstWithSeverity(oFF.Severity.WARNING).getCode() === oFF.ErrorCodes.INVALID_TOKEN)
			{
				this.m_controller.postMessage(oFF.UiMessageType.WARNING, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_CLIPBOARD_VALUES_NOT_FOUND));
			}
		}
	}, (errors) => {
		if (!this.isReleased() && oFF.notNull(this.m_controller))
		{
			this.m_controller.onError(errors, null);
		}
	}), null);
};
oFF.FdModel.prototype.onSelectionChanged = function()
{
	this.triggerOnSelectionChanged(true);
};
oFF.FdModel.prototype.openValueHelp = function(defaultSelection, useCurrentHierarchy, listener, customIdentifier)
{
	if (this.supportsValueHelp())
	{
		this.m_contentProvider.openValueHelp(defaultSelection, useCurrentHierarchy, listener, customIdentifier);
	}
};
oFF.FdModel.prototype.preloadNextPages = function(startPage, presentations, listener, customIdentifier)
{
	if (this.supportsPreloading())
	{
		this.m_contentProvider.preloadNextPages(startPage, presentations, listener, customIdentifier);
	}
};
oFF.FdModel.prototype.processData = function(startPage, endPage, presentations, listener, customIdentifier)
{
	this.m_contentProvider.processData(startPage, endPage, presentations, listener, customIdentifier);
};
oFF.FdModel.prototype.processDataRange = function(listener, customIdentifier)
{
	this.m_contentProvider.processDataRange(listener, customIdentifier);
};
oFF.FdModel.prototype.registerOnFeatureAvailabilityChange = function(listener)
{
	if (oFF.isNull(this.m_featureAvailabilityChangeListeners))
	{
		this.m_featureAvailabilityChangeListeners = oFF.XList.create();
	}
	this.m_featureAvailabilityChangeListeners.add(listener);
};
oFF.FdModel.prototype.registerOnItemsAdded = function(listener)
{
	this.m_listenerOnItemsAdded = listener;
};
oFF.FdModel.prototype.registerOnPageChanged = function(listener)
{
	this.m_listenerOnPageChanged = listener;
};
oFF.FdModel.prototype.registerOnSelectionChange = function(listener)
{
	this.unregisterOnSelectionChange(listener);
	if (oFF.isNull(this.m_selectionChangeListeners))
	{
		this.m_selectionChangeListeners = oFF.XList.create();
	}
	this.m_selectionChangeListeners.add(listener);
};
oFF.FdModel.prototype.releaseObject = function()
{
	this.m_contentProvider = oFF.XObjectExt.release(this.m_contentProvider);
	this.m_configuration = null;
	this.m_items = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_items);
	this.m_selectedItems = null;
	this.m_features = oFF.XObjectExt.release(this.m_features);
	this.m_hierarchyModel = oFF.XObjectExt.release(this.m_hierarchyModel);
	this.m_rangeModel = oFF.XObjectExt.release(this.m_rangeModel);
	this.m_presentationsModel = oFF.XObjectExt.release(this.m_presentationsModel);
	this.m_sessionData = null;
	this.m_listenerOnItemsAdded = null;
	this.m_listenerOnPageChanged = null;
	this.m_queryDefaultReadMode = null;
	this.m_lastReadMode = null;
	this.m_supportedReadModes = oFF.XObjectExt.release(this.m_supportedReadModes);
	this.m_selectionChangeListeners = oFF.XObjectExt.release(this.m_selectionChangeListeners);
	this.m_featureAvailabilityChangeListeners = oFF.XObjectExt.release(this.m_featureAvailabilityChangeListeners);
	this.m_viewTypes = null;
	this.m_controller = null;
	this.m_initialSearchValue = null;
};
oFF.FdModel.prototype.removeSelectedItem = function(item)
{
	this.m_selectedItems.removeElement(item);
	this.onSelectionChanged();
};
oFF.FdModel.prototype.removeSelectedItemAt = function(index)
{
	if (index >= 0 && this.m_selectedItems.size() > index)
	{
		this.m_selectedItems.removeAt(index);
		this.onSelectionChanged();
	}
};
oFF.FdModel.prototype.search = function(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier)
{
	if (!oFF.XString.isEqual(searchPattern, this.m_initialSearchValue))
	{
		this.m_initialSearchValue = null;
	}
	this.m_contentProvider.search(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier);
};
oFF.FdModel.prototype.selectAll = function()
{
	this.m_selectedItems.clear();
	this.changeSelection(oFF.XStream.of(this.m_items.getValuesAsReadOnlyList()).flatMap((page) => {
		return oFF.XStream.of(page);
	}).collect(oFF.XStreamCollector.toList()), null);
};
oFF.FdModel.prototype.setDefaultExpandLevel = function(level)
{
	this.m_defaultExpandLevel = level;
};
oFF.FdModel.prototype.setExcludeSwitchOn = function(excludeSwitchOn)
{
	this.m_excludeSwitchOn = excludeSwitchOn && this.isFeatureEnabled(oFF.FdFeature.EXCLUDE);
	if (this.isFeatureEnabled(oFF.FdFeature.EXCLUDE))
	{
		oFF.XStream.of(this.m_selectedItems).filter((selectedItem) => {
			return selectedItem.getFdComparisonOperator().isEqualOperator();
		}).forEach((item) => {
			item.setExcluded(this.m_excludeSwitchOn);
		});
		this.updateSelection();
	}
};
oFF.FdModel.prototype.setFeatureEnabled = function(feature, enabled)
{
	let featureStateChanged = enabled && !this.isFeatureEnabled(feature) || !enabled && this.isFeatureEnabled(feature);
	if (enabled)
	{
		oFF.XCollectionUtils.addIfNotPresent(this.m_features, feature);
	}
	else
	{
		this.m_features.removeElement(feature);
	}
	if (featureStateChanged)
	{
		oFF.XCollectionUtils.forEach(this.m_featureAvailabilityChangeListeners, (listener) => {
			listener.onFeatureAvailabilityChanged(feature, enabled);
		});
	}
};
oFF.FdModel.prototype.setPage = function(page)
{
	if (page >= 0 && this.m_currentPage !== page)
	{
		this.m_currentPage = page;
		if (oFF.notNull(this.m_listenerOnPageChanged))
		{
			this.m_listenerOnPageChanged();
		}
	}
};
oFF.FdModel.prototype.setReadMode = function(readMode)
{
	if (readMode !== this.getReadMode() && this.supportsReadMode(readMode) && this.supportsReadModes())
	{
		this.m_lastReadMode = this.getReadMode();
		this.m_contentProvider.setReadMode(readMode);
	}
};
oFF.FdModel.prototype.setSelectedItemAt = function(index, item)
{
	if (oFF.notNull(item) && index >= 0 && this.m_selectedItems.size() > index)
	{
		this.m_selectedItems.removeAt(index);
		this.m_selectedItems.insert(index, item);
		this.onSelectionChanged();
	}
};
oFF.FdModel.prototype.setSessionData = function(sessionData)
{
	this.m_sessionData = sessionData;
};
oFF.FdModel.prototype.setSupportsDisplayKey = function(supportsDisplayKey)
{
	this.m_supportsDisplayKey = supportsDisplayKey;
};
oFF.FdModel.prototype.setTotalItemCount = function(totalItemCount)
{
	let pageSize = this.getPageSize();
	this.m_totalPageCount = oFF.XMath.div(totalItemCount, pageSize);
	if (oFF.XMath.mod(totalItemCount, pageSize) > 0)
	{
		this.m_totalPageCount++;
	}
};
oFF.FdModel.prototype.setViewTypes = function(viewTypes)
{
	this.m_viewTypes = viewTypes;
};
oFF.FdModel.prototype.setupModel = function(config, mobile, process, controller)
{
	this.m_mobile = mobile;
	this.m_controller = controller;
	this.m_items = oFF.XLinkedHashMapByString.create();
	this.m_selectedItems = oFF.XList.create();
	this.m_currentPage = 0;
	this.m_pageCount = 0;
	this.m_pageSize = config.getListPageSize();
	this.m_childNodesPageSize = config.getListChildNodePageSize();
	this.m_selectionMode = config.getSelectionMode();
	this.m_features = oFF.XSetOfNameObject.create();
	this.m_hierarchyModel = oFF.FdHierarchyModel.create();
	this.changeSelection(oFF.FdItemFactory.asFdItemList(config.getDefaultSelection()), null);
	this.m_configuration = config;
	this.m_queryDefaultReadMode = null;
	this.m_lastReadMode = null;
	this.m_totalPageCount = -1;
	this.setFeatureEnabled(oFF.FdFeature.CLIPBOARD, config.isOfferClipboard() && this.m_selectionMode === oFF.UiTableSelectionMode.MULTI_TOGGLE);
	this.setFeatureEnabled(oFF.FdFeature.EQUAL_IN_RANGE_VIEW, config.isOfferEqualInRangeFilter());
	this.setFeatureEnabled(oFF.FdFeature.NULL_IN_RANGE_VIEW, config.isOfferNullInRangeFilter());
	this.setFeatureEnabled(oFF.FdFeature.EXTENDED_READMODE, config.isOfferReadModeExtendedSettings());
	this.m_contentProvider = oFF.FdContentProviderFactory.createContentProvider(this, process);
	if (this.supportsValueHelp())
	{
		this.m_hierarchyModel.setHierarchyContentProvider(this.m_contentProvider);
	}
	if (oFF.notNull(this.m_viewTypes) && this.m_viewTypes.contains(oFF.FilterDialogViewType.LIST) && (config.getDefaultViewType() === null || config.getDefaultViewType() === oFF.FilterDialogViewType.LIST) && oFF.XCollectionUtils.hasElements(this.getPresentationsModel().getFilterablePresentations()))
	{
		this.m_initialSearchValue = config.getSearchValue();
	}
};
oFF.FdModel.prototype.supportsDisplayKey = function()
{
	return this.m_supportsDisplayKey;
};
oFF.FdModel.prototype.supportsPreloading = function()
{
	return this.supportsValueHelp() || this.m_configuration.getContentType().isEqualTo(oFF.FilterDialogContentType.USER_TEAM);
};
oFF.FdModel.prototype.supportsPresentations = function()
{
	let contentType = this.m_configuration.getContentType();
	return contentType.isValueHelp() || contentType.isHierarchyCatalog();
};
oFF.FdModel.prototype.supportsReadMode = function(readMode)
{
	return oFF.notNull(this.m_supportedReadModes) && this.m_supportedReadModes.contains(readMode);
};
oFF.FdModel.prototype.supportsReadModes = function()
{
	return this.supportsValueHelp();
};
oFF.FdModel.prototype.supportsSelectAll = function()
{
	return this.supportsValueHelp();
};
oFF.FdModel.prototype.supportsValueHelp = function()
{
	return this.m_configuration.getContentType().isValueHelp();
};
oFF.FdModel.prototype.syncSelectionListWithKnownItems = function(selectionList, knownItems, presentations, removeUnknownValues, populateErrors, listener, customIdentifier)
{
	this.m_contentProvider.syncSelectionListWithKnownItems(selectionList, knownItems, presentations, removeUnknownValues, populateErrors, listener, customIdentifier);
};
oFF.FdModel.prototype.triggerOnSelectionChanged = function(triggerExternalListener)
{
	let selection = oFF.FdItemFactory.asFdValueList(this.getSelectedItems());
	oFF.XCollectionUtils.forEach(oFF.XCollectionUtils.createListCopy(this.m_selectionChangeListeners), (listener) => {
		listener.onSelectionChange(selection);
	});
	if (triggerExternalListener && oFF.notNull(this.m_configuration) && this.m_configuration.getListenerSelectionChange() !== null)
	{
		this.m_configuration.getListenerSelectionChange().onSelectionChange(oFF.FdItemFactory.asFdValueList(this.getSelectedItems()));
	}
};
oFF.FdModel.prototype.unregisterOnFeatureAvailabilityChange = function(listener)
{
	if (oFF.notNull(this.m_featureAvailabilityChangeListeners))
	{
		this.m_featureAvailabilityChangeListeners.removeElement(listener);
	}
};
oFF.FdModel.prototype.unregisterOnSelectionChange = function(listener)
{
	if (oFF.notNull(this.m_selectionChangeListeners))
	{
		this.m_selectionChangeListeners.removeElement(listener);
	}
};
oFF.FdModel.prototype.updateSelection = function()
{
	this.triggerOnSelectionChanged(false);
};

oFF.FdContentProviderValueHelp = function() {};
oFF.FdContentProviderValueHelp.prototype = new oFF.XObject();
oFF.FdContentProviderValueHelp.prototype._ff_c = "FdContentProviderValueHelp";

oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_REMOVE_UNKNOWN = "ParamValueHelpRemoveUnknown";
oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_KEY = "ParamValueHelpSearchOnKey";
oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_TEXT = "ParamValueHelpSearchOnText";
oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_PATTERN = "ParamValueHelpSearchPattern";
oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SHOW_ERRORS = "ParamValueHelpShowErrors";
oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SUGGESTIONS_CACHE_KEY = "ParamValueHelpSuggestionsCacheKey";
oFF.FdContentProviderValueHelp.VALUE_HELP = "ValueHelp";
oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_ATTRIBUTES = "ValueHelpLoadPresentations";
oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_CHILDREN = "ValueHelpLoadChildren";
oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_UNKNOWN_SELECTED_ITEMS = "ValueHelpLoadUnknownSelectedItems";
oFF.FdContentProviderValueHelp.VALUE_HELP_RANGE = "ValueHelpRange";
oFF.FdContentProviderValueHelp.VALUE_HELP_SEARCH = "ValueHelpSearch";
oFF.FdContentProviderValueHelp.VALUE_HELP_SUGGESTIONS = "ValueHelpSuggestions";
oFF.FdContentProviderValueHelp.prototype.m_allDataLoaded = false;
oFF.FdContentProviderValueHelp.prototype.m_configuration = null;
oFF.FdContentProviderValueHelp.prototype.m_isPreloading = false;
oFF.FdContentProviderValueHelp.prototype.m_model = null;
oFF.FdContentProviderValueHelp.prototype.m_readMode = null;
oFF.FdContentProviderValueHelp.prototype.m_suggestions = null;
oFF.FdContentProviderValueHelp.prototype.m_valueHelpProcessor = null;
oFF.FdContentProviderValueHelp.prototype.addAttributesToExistingValueHelpNodes = function(items, loadedNodes)
{
	let size = items.size();
	for (let i = 0; i < size; i++)
	{
		let node = items.get(i).getValueHelpNode();
		let loadedNode = this.getNodeByKey(loadedNodes, this.getKeyFieldValue(node).getValue(), i);
		if (oFF.notNull(loadedNode))
		{
			node.getDimensionMember().copyAttributesFromDimensionMember(loadedNode.getDimensionMember());
		}
	}
};
oFF.FdContentProviderValueHelp.prototype.applyCustomMembers = function(result, listenerProxy)
{
	let dimension = this.getDimension();
	if (dimension.isMeasureStructure() || dimension.getMetadata().isSecondaryStructure())
	{
		let hideCumulatedMeasures = this.m_configuration.isHideCumulatedMeasures();
		return oFF.XCollectionUtils.filter(result, (resultMember) => {
			let sm = dimension.getStructureMember(resultMember.getName());
			if (oFF.notNull(sm))
			{
				if (dimension.getTagging().containsKey(oFF.QTransientConstants.createIsTransientMemberTag(sm.getAliasOrMemberName())) || sm.getResultVisibility() === oFF.ResultVisibility.HIDDEN)
				{
					return false;
				}
				if (hideCumulatedMeasures)
				{
					return !sm.isCumulation() && (sm.getSingleValueCalculation() === null || sm.getSingleValueCalculation() === oFF.SingleValueCalculation.NOT_DEFINED) && (sm.getResultCalculation() === null || sm.getResultCalculation() === oFF.ResultCalculation.NOT_DEFINED);
				}
			}
			return true;
		});
	}
	return result;
};
oFF.FdContentProviderValueHelp.prototype.changeHierarchy = function(hierarchyName)
{
	let oldHierarchyName = this.m_valueHelpProcessor.getHierarchyName();
	this.m_valueHelpProcessor.setHierarchyName(hierarchyName);
	this.m_model.clearSelection();
	this.m_model.setExcludeSwitchOn(false);
	if ((oFF.isNull(hierarchyName) && oFF.notNull(oldHierarchyName) || oFF.notNull(hierarchyName) && oFF.isNull(oldHierarchyName)) && this.m_model.getPresentationsModel().getMainPresentations() !== null)
	{
		this.m_model.getPresentationsModel().setupModel(this.getMainPresentations(), this.getAdditionalPresentations(), null, null);
		this.m_model.setSupportsDisplayKey(this.supportsDisplayKeyField());
		this.updateExcludeFeatureAvailability();
		this.updateSupportedComparisonOperators();
	}
	if (oFF.notNull(this.m_suggestions))
	{
		this.m_suggestions.clear();
	}
};
oFF.FdContentProviderValueHelp.prototype.fetchChildren = function(node, offset, amount, presentations, listener, customIdentifier)
{
	let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_CHILDREN);
	this.m_valueHelpProcessor.processChildFetch(node.getValueHelpNode(), offset, amount, this.getFieldsFromPresentationValues(presentations), this.m_readMode, this, listenerProxy);
};
oFF.FdContentProviderValueHelp.prototype.getAdditionalPresentations = function()
{
	if (this.supportsAdditionalPresentations())
	{
		return oFF.FdPresentationFactory.createAdditionalPresentationsByDim(this.getDimension(), this.isHierarchical(), this.isUseResultSetTextField(), this.isFilterOnAdditionalPresentationsAllowed(), this.m_readMode.getFFReadMode());
	}
	return oFF.XList.create();
};
oFF.FdContentProviderValueHelp.prototype.getContextType = function(systemType)
{
	return oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.HANA) ? oFF.QContextType.RESULT_SET : oFF.QContextType.SELECTOR;
};
oFF.FdContentProviderValueHelp.prototype.getFieldsFromPresentationValues = function(presentations)
{
	return oFF.XStream.of(presentations).filterNullValues().map((p) => {
		return p.getCustomObject();
	}).distinct().collect(oFF.XStreamCollector.toList());
};
oFF.FdContentProviderValueHelp.prototype.getHierarchyName = function()
{
	return this.isHierarchical() ? this.m_valueHelpProcessor.getHierarchyName() : null;
};
oFF.FdContentProviderValueHelp.prototype.getKeyFieldValue = function(node)
{
	let dimensionMember = node.getDimensionMember();
	return dimensionMember.getFieldValue(dimensionMember.getDimension().getSelectorKeyField());
};
oFF.FdContentProviderValueHelp.prototype.getMainPresentations = function()
{
	return oFF.FdPresentationFactory.createMainPresentationsByDim(this.m_valueHelpProcessor.getDisplayKeyField(), this.m_valueHelpProcessor.getTextField(), this.m_readMode.getFFReadMode(), this.m_model.getConfig().isOfferDisplayInfoExtendedSettings());
};
oFF.FdContentProviderValueHelp.prototype.getMissingPresentations = function(items, presentations)
{
	let missingPresentations = oFF.XList.create();
	if (oFF.XCollectionUtils.hasElements(items) && oFF.XCollectionUtils.hasElements(presentations) && this.supportsAdditionalPresentations())
	{
		let node = items.get(0).getValueHelpNode();
		let allFieldValues = node.getDimensionMember().getAllFieldValues();
		for (let i = 0; i < presentations.size(); i++)
		{
			let presentation = presentations.get(i);
			if (!allFieldValues.containsKey(presentation.getCustomObject().getName()))
			{
				missingPresentations.add(presentation);
			}
		}
	}
	return missingPresentations;
};
oFF.FdContentProviderValueHelp.prototype.getNodeByKey = function(nodes, keyValue, expectedIndex)
{
	let size = nodes.size();
	if (size > expectedIndex)
	{
		let node = nodes.get(expectedIndex);
		let keyFieldValue = this.getKeyFieldValue(node);
		if (oFF.notNull(keyFieldValue) && keyFieldValue.getValue().isEqualTo(keyValue))
		{
			return node;
		}
	}
	return oFF.XCollectionUtils.findFirst(nodes, (node) => {
		let key = this.getKeyFieldValue(node);
		return oFF.notNull(key) && key.getValue().isEqualTo(keyValue);
	});
};
oFF.FdContentProviderValueHelp.prototype.getReadMode = function()
{
	return this.m_readMode;
};
oFF.FdContentProviderValueHelp.prototype.getSupportedComparisonOperatorsByFilterCapability = function(filterCapability)
{
	let operators = oFF.XList.create();
	if (oFF.notNull(filterCapability))
	{
		let includingOperators = filterCapability.getSupportedComparisonOperators(oFF.SetSign.INCLUDING);
		let excludingOperators = filterCapability.getSupportedComparisonOperators(oFF.SetSign.EXCLUDING);
		oFF.XCollectionUtils.forEach(includingOperators, (operator) => {
			oFF.XCollectionUtils.addIfNotPresent(operators, oFF.FdComparisonOperator.lookup(operator.getName()));
		});
		if (oFF.notNull(excludingOperators))
		{
			if (excludingOperators.contains(oFF.ComparisonOperator.EQUAL))
			{
				oFF.XCollectionUtils.addIfNotPresent(operators, oFF.FdComparisonOperator.NOT_EQUAL);
			}
			if (excludingOperators.contains(oFF.ComparisonOperator.BETWEEN))
			{
				oFF.XCollectionUtils.addIfNotPresent(operators, oFF.FdComparisonOperator.NOT_BETWEEN);
			}
			if (excludingOperators.contains(oFF.ComparisonOperator.IS_NULL))
			{
				oFF.XCollectionUtils.addIfNotPresent(operators, oFF.FdComparisonOperator.IS_NOT_NULL);
			}
		}
	}
	if (operators.isEmpty())
	{
		operators.add(oFF.FdComparisonOperator.EQUAL);
	}
	return operators;
};
oFF.FdContentProviderValueHelp.prototype.getSupportedReadModes = function()
{
	let dimension = this.getDimension();
	if (dimension.getQueryModel() !== null && dimension.getQueryModel().isSelectorReadModeMasterOnly())
	{
		return oFF.XCollectionUtils.singletonList(oFF.OlapUiReadMode.MASTER);
	}
	let systemType = this.getSystemType(dimension);
	let contextType = this.getContextType(systemType);
	let supportedReadModes = dimension.getSupportedReadModes(contextType);
	let readModes = oFF.XList.create();
	if (this.m_configuration.isOfferReadModeExtendedSettings() && this.supportsReadModeBookedCascading(contextType))
	{
		readModes.add(oFF.OlapUiReadMode.BOOKED);
		readModes.add(oFF.OlapUiReadMode.BOOKED_CASCADING);
	}
	else if (oFF.XCollectionUtils.contains(supportedReadModes, (readModeB) => {
		return readModeB.isTypeOf(oFF.QMemberReadMode.BOOKED);
	}))
	{
		readModes.add(oFF.OlapUiReadMode.BOOKED);
	}
	if (oFF.XCollectionUtils.contains(supportedReadModes, (readModeM) => {
		return readModeM.isTypeOf(oFF.QMemberReadMode.MASTER);
	}))
	{
		readModes.add(oFF.OlapUiReadMode.MASTER);
	}
	if (this.supportsQueryDefaultReadMode(contextType, systemType))
	{
		readModes.add(oFF.OlapUiReadMode.QUERY_DEFAULT);
	}
	if (!readModes.contains(this.m_readMode))
	{
		readModes.add(this.m_readMode);
	}
	return readModes;
};
oFF.FdContentProviderValueHelp.prototype.getSystemType = function(dimension)
{
	let systemName = dimension.getDataSource().getSystemName();
	let systemDescription = dimension.getApplication().getSystemLandscape().getSystemDescription(systemName);
	return oFF.notNull(systemDescription) ? systemDescription.getSystemType() : null;
};
oFF.FdContentProviderValueHelp.prototype.getVhItemFromKnownItems = function(item, knownItems, unknownItems)
{
	let itemWithValueHelpNode = oFF.FdValueHelpItem.getByKey(knownItems, item);
	if (oFF.notNull(itemWithValueHelpNode))
	{
		return itemWithValueHelpNode;
	}
	else
	{
		unknownItems.add(item);
		return null;
	}
};
oFF.FdContentProviderValueHelp.prototype.isFilterOnAdditionalPresentationsAllowed = function()
{
	return !this.isHierarchical() || !this.isSystemTypeBW();
};
oFF.FdContentProviderValueHelp.prototype.isHierarchical = function()
{
	return this.m_valueHelpProcessor.isHierarchicalValueHelp();
};
oFF.FdContentProviderValueHelp.prototype.isSystemTypeBW = function()
{
	let systemType = this.getSystemType(this.getDimension());
	return oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.ABAP);
};
oFF.FdContentProviderValueHelp.prototype.isSystemTypeHana = function()
{
	let systemType = this.getSystemType(this.getDimension());
	return oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.HANA);
};
oFF.FdContentProviderValueHelp.prototype.isUseResultSetTextField = function()
{
	let textUsageType = this.m_configuration.getTextUsageType();
	return this.isSystemTypeBW() && (textUsageType === oFF.FilterDialogTextUsageType.RESULTSET_TEXT || textUsageType === oFF.FilterDialogTextUsageType.AUTO);
};
oFF.FdContentProviderValueHelp.prototype.loadMissingPresentations = function(items, missingPresentations, listener, customIdentifier)
{
	let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_ATTRIBUTES);
	listenerProxy.setItems(items);
	let presentationValues = oFF.XList.create();
	oFF.XCollectionUtils.forEach(missingPresentations, (mp) => {
		let presentation = mp.getParent();
		oFF.XCollectionUtils.addIfNotNull(presentationValues, presentation.getKeyPresentation());
		oFF.XCollectionUtils.addIfNotNull(presentationValues, presentation.getTextPresentation());
	});
	let fields = this.getFieldsFromPresentationValues(presentationValues);
	if (this.isHierarchical())
	{
		let parentNode = items.get(0).getValueHelpNode().getParentNode();
		if (oFF.notNull(parentNode))
		{
			this.m_valueHelpProcessor.processChildFetch(parentNode, 0, items.size(), fields, this.m_readMode, this, listenerProxy);
		}
		else
		{
			this.m_valueHelpProcessor.processValueHelp(0, -1, 0, fields, this.m_readMode, this, listenerProxy);
		}
	}
	else
	{
		let pageSize = this.m_configuration.getListPageSize();
		let endPage = items.size() / pageSize;
		if (oFF.XMath.mod(items.size(), pageSize) === 0)
		{
			endPage--;
		}
		this.m_valueHelpProcessor.processValueHelp(0, endPage, pageSize, fields, this.m_readMode, this, listenerProxy);
	}
};
oFF.FdContentProviderValueHelp.prototype.loadSuggestions = function(text, listener)
{
	if (oFF.XStringUtils.isNullOrEmpty(text))
	{
		listener.onProcessFinished(oFF.XList.create(), null, null);
		return;
	}
	let presentation = this.m_model.getPresentationsModel().getSelectedMainPresentation();
	if (!presentation.hasKeyPresentation())
	{
		presentation = oFF.XStream.of(this.getMainPresentations()).find((p) => {
			return p.hasKeyPresentation() && p.hasTextPresentation();
		}).orElse(presentation);
	}
	let cacheKey = text;
	let fields = oFF.XList.create();
	if (oFF.notNull(presentation))
	{
		cacheKey = oFF.XStringUtils.concatenate2(text, presentation.getName());
		oFF.XCollectionUtils.addIfNotPresent(fields, presentation.hasKeyPresentation() ? presentation.getKeyPresentation().getCustomObject() : null);
		oFF.XCollectionUtils.addIfNotPresent(fields, presentation.hasTextPresentation() ? presentation.getTextPresentation().getCustomObject() : null);
	}
	if (oFF.notNull(this.m_suggestions) && this.m_suggestions.containsKey(cacheKey))
	{
		listener.onProcessFinished(this.m_suggestions.getByKey(cacheKey), null, null);
		return;
	}
	let identifier = oFF.FdValueHelpListenerProxy.create(listener, null, oFF.FdContentProviderValueHelp.VALUE_HELP_SUGGESTIONS);
	identifier.getProperties().put(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_PATTERN, text);
	identifier.getProperties().put(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SUGGESTIONS_CACHE_KEY, cacheKey);
	identifier.getProperties().putBoolean(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_KEY, !oFF.XCollectionUtils.hasElements(fields) || fields.contains(this.m_valueHelpProcessor.getDisplayKeyField()));
	identifier.getProperties().putBoolean(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_TEXT, !oFF.XCollectionUtils.hasElements(fields) || fields.contains(this.m_valueHelpProcessor.getTextField()));
	this.m_valueHelpProcessor.processSearch(text, fields, fields, this.m_configuration.getListPageSize(), false, oFF.OlapUiReadMode.MASTER, this, identifier);
};
oFF.FdContentProviderValueHelp.prototype.mapValueHelpResult = function(result, forceFlatItems)
{
	let hierarchyName = !forceFlatItems && this.isHierarchical() ? this.m_valueHelpProcessor.getHierarchyName() : null;
	let textField = this.m_valueHelpProcessor.getTextField();
	return oFF.XCollectionUtils.map(result, (node) => {
		return oFF.FdValueHelpItem.create(node, hierarchyName, textField);
	});
};
oFF.FdContentProviderValueHelp.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (!this.isReleased())
	{
		let listenerProxy = customIdentifier;
		let valueHelpType = listenerProxy.getValueHelpType();
		if (extResult.hasErrors())
		{
			if (!oFF.XString.isEqual(valueHelpType, oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_UNKNOWN_SELECTED_ITEMS) && !oFF.XString.isEqual(valueHelpType, oFF.FdContentProviderValueHelp.VALUE_HELP_SUGGESTIONS))
			{
				this.m_model.getSessionData().setReadMode(null);
				this.m_isPreloading = false;
				listenerProxy.callErrorListener(extResult);
			}
			else if (listenerProxy.getProperties().getBooleanByKeyExt(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SHOW_ERRORS, false))
			{
				listenerProxy.callErrorListener(extResult);
			}
			else
			{
				listenerProxy.callListener(listenerProxy.getItems(), extResult);
			}
			return;
		}
		let data = extResult.getData();
		switch (valueHelpType)
		{
			case oFF.FdContentProviderValueHelp.VALUE_HELP:
				let items = this.mapValueHelpResult(this.applyCustomMembers(data, listenerProxy), false);
				let allNodesLoaded = !items.hasElements() || oFF.XMath.mod(items.size(), this.m_configuration.getListPageSize()) !== 0;
				this.m_model.getHierarchyModel().setHasRootNodesOnly(allNodesLoaded && !this.m_model.isFeatureEnabled(oFF.FdFeature.HIERARCHY_CHANGE) && (!this.isHierarchical() || !oFF.XCollectionUtils.contains(items, (i) => {
					return i.hasChildren();
				})));
				this.m_allDataLoaded = !this.isHierarchical() && allNodesLoaded;
				listenerProxy.callListener(items, extResult);
				this.m_isPreloading = false;
				break;

			case oFF.FdContentProviderValueHelp.VALUE_HELP_RANGE:
				listenerProxy.callListener(this.mapValueHelpResult(data, true), extResult);
				break;

			case oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_ATTRIBUTES:
				this.addAttributesToExistingValueHelpNodes(listenerProxy.getItems(), data);
				listenerProxy.callListener(listenerProxy.getItems(), extResult);
				break;

			case oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_CHILDREN:
				let childItems = this.mapValueHelpResult(data, false);
				this.syncSelectionList(this.m_model.getSelectedItems(), childItems);
				listenerProxy.callListener(childItems, extResult);
				break;

			case oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_UNKNOWN_SELECTED_ITEMS:
				let unknownItems = this.syncSelectionList(listenerProxy.getItems(), this.mapValueHelpResult(data, false));
				let msgManager = oFF.MessageManagerSimple.createMessageManager();
				msgManager.addAllMessages(extResult);
				if (listenerProxy.getProperties().getBooleanByKeyExt(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_REMOVE_UNKNOWN, false))
				{
					if (oFF.XCollectionUtils.hasElements(unknownItems))
					{
						msgManager.addWarning(oFF.ErrorCodes.INVALID_TOKEN, "Unknown items removed");
					}
					oFF.XCollectionUtils.removeIf(listenerProxy.getItems(), (item1) => {
						return unknownItems.contains(item1);
					});
				}
				listenerProxy.callListener(listenerProxy.getItems(), msgManager);
				break;

			case oFF.FdContentProviderValueHelp.VALUE_HELP_SEARCH:
				listenerProxy.callListener(this.mapValueHelpResult(this.applyCustomMembers(data, listenerProxy), false), extResult);
				break;

			case oFF.FdContentProviderValueHelp.VALUE_HELP_SUGGESTIONS:
				let suggestionItems = this.mapValueHelpResult(this.applyCustomMembers(data, listenerProxy), false);
				this.m_suggestions = oFF.isNull(this.m_suggestions) ? oFF.XHashMapByString.create() : this.m_suggestions;
				this.m_suggestions.put(listenerProxy.getProperties().getByKey(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SUGGESTIONS_CACHE_KEY), suggestionItems);
				listenerProxy.callListener(suggestionItems, extResult);
				break;
		}
	}
};
oFF.FdContentProviderValueHelp.prototype.openValueHelp = function(defaultSelection, useCurrentHierarchy, listener, customIdentifier)
{
	let itemSelection = oFF.notNull(defaultSelection) && (defaultSelection.getKey() !== null || defaultSelection.getDisplayKey() !== null || defaultSelection.isNull()) ? oFF.XCollectionUtils.singletonList(defaultSelection) : null;
	if (oFF.notNull(itemSelection) && !defaultSelection.getFdComparisonOperator().isEqualOperator())
	{
		if (defaultSelection.getType() === oFF.FilterDialogValueType.VALUEHELP)
		{
			itemSelection.set(0, oFF.FdValueHelpItem.create(defaultSelection.getValueHelpNode(), defaultSelection.getHierarchyName(), defaultSelection.getTextField()));
		}
		else if (defaultSelection.getType() === oFF.FilterDialogValueType.BASIC)
		{
			itemSelection.set(0, oFF.FdSimpleItem.create(defaultSelection.getKey(), defaultSelection.getDisplayKey(), defaultSelection.getText()));
		}
	}
	let runner = this.createProgramRunner();
	runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_DEFAULT_SELECTION, itemSelection);
	let config = oFF.PrFactory.createStructure();
	config.putString(oFF.FilterDialog.PARAM_SELECTION_MODE, oFF.UiTableSelectionMode.SINGLE.getName());
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_LIST_VIEW, true);
	config.putInteger(oFF.FilterDialog.PARAM_LIST_PAGE_SIZE, this.m_configuration.getListPageSize());
	config.putInteger(oFF.FilterDialog.PARAM_LIST_PRELOAD_PAGE_COUNT, this.m_configuration.getListPreloadPageCount());
	config.putInteger(oFF.FilterDialog.PARAM_SEARCH_SIZE, this.m_configuration.getSearchSize());
	config.putInteger(oFF.FilterDialog.PARAM_LIST_CHILD_NODES_PAGE_SIZE, this.m_configuration.getListChildNodePageSize());
	config.putString(oFF.FilterDialog.PARAM_DISPLAY_INFO, this.m_configuration.getDisplayInfo() !== null ? this.m_configuration.getDisplayInfo().getName() : null);
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_DISPLAY_INFO_EXTENDED_SETTINGS, this.m_configuration.isOfferDisplayInfoExtendedSettings());
	config.putString(oFF.FilterDialog.PARAM_READMODE, this.m_readMode.getName());
	config.putString(oFF.FilterDialog.PARAM_HIERARCHY, useCurrentHierarchy ? oFF.XStringUtils.nullToEmpty(this.getHierarchyName()) : "");
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_HIERARCHY_CHANGE, false);
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_READMODE_CHANGE, this.m_configuration.isOfferReadModeChange());
	config.putBoolean(oFF.FilterDialog.PARAM_OFFER_READMODE_EXTENDED_SETTINGS, this.m_configuration.isOfferReadModeExtendedSettings());
	config.putBoolean(oFF.FilterDialog.PARAM_RESIZABLE, this.m_configuration.isResizeable());
	config.putBoolean(oFF.FilterDialog.PARAM_SELECTION_REQUIRED, true);
	config.putBoolean(oFF.FilterDialog.PARAM_SIMPLIFIED_SEARCH, this.m_configuration.isShowSimplifiedSearch());
	runner.setConfigStructure(config);
	runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_CLOSE, oFF.FilterDialogLambdaCloseListener.createExt((selection, settings) => {
		this.m_model.setReadMode(settings.getReadMode());
		listener.onProcessFinished(oFF.FdItemFactory.asFdItemList(selection), null, customIdentifier);
	}, () => {
		listener.onProcessFinished(null, null, customIdentifier);
	}));
	runner.runProgram();
};
oFF.FdContentProviderValueHelp.prototype.preloadNextPages = function(startPage, presentations, listener, customIdentifier)
{
	if (!this.m_allDataLoaded && !this.m_isPreloading)
	{
		this.m_isPreloading = true;
		let endPage = startPage + this.m_configuration.getListPreloadPageCount() - 1;
		this.processData(startPage, endPage, presentations, listener, customIdentifier);
	}
};
oFF.FdContentProviderValueHelp.prototype.processData = function(startPage, endPage, presentations, listener, customIdentifier)
{
	let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP);
	this.m_valueHelpProcessor.processValueHelp(startPage, endPage, this.m_configuration.getListPageSize(), this.getFieldsFromPresentationValues(presentations), this.m_readMode, this, listenerProxy);
};
oFF.FdContentProviderValueHelp.prototype.releaseObject = function()
{
	this.m_valueHelpProcessor = this.m_configuration.getExternalValueHelpProcess() !== this.m_valueHelpProcessor ? oFF.XObjectExt.release(this.m_valueHelpProcessor) : null;
	this.m_model = null;
	this.m_configuration = null;
	this.m_readMode = null;
	this.m_suggestions = oFF.XObjectExt.release(this.m_suggestions);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdContentProviderValueHelp.prototype.search = function(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier)
{
	let searchFields = this.getFieldsFromPresentationValues(searchPresentations);
	if (searchFields.isEmpty())
	{
		searchFields.add(this.m_valueHelpProcessor.getDisplayKeyField());
		searchFields.add(this.m_valueHelpProcessor.getTextField());
	}
	let fields = this.getFieldsFromPresentationValues(presentations);
	let identifier = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP_SEARCH);
	identifier.getProperties().put(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_PATTERN, searchPattern);
	identifier.getProperties().putBoolean(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_KEY, searchFields.contains(this.m_valueHelpProcessor.getDisplayKeyField()));
	identifier.getProperties().putBoolean(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_TEXT, searchFields.contains(this.m_valueHelpProcessor.getTextField()));
	this.m_valueHelpProcessor.processSearch(searchPattern, searchFields, fields, this.m_configuration.getSearchSize(), loadParentNodes, this.m_readMode, this, identifier);
};
oFF.FdContentProviderValueHelp.prototype.setReadMode = function(readMode)
{
	if (this.m_readMode !== readMode && oFF.notNull(readMode))
	{
		this.m_readMode = readMode;
		this.m_model.getSessionData().setReadMode(readMode);
		let filterOnAdditionalPresentationsAllowed = this.isFilterOnAdditionalPresentationsAllowed();
		this.m_model.getPresentationsModel().updateFilterableState((value) => {
			return value.getCustomObject().isFilterableForValueHelpAndReadMode(readMode.getFFReadMode());
		}, (value) => {
			return filterOnAdditionalPresentationsAllowed && value.getCustomObject().isFilterableForValueHelpAndReadMode(readMode.getFFReadMode());
		});
	}
};
oFF.FdContentProviderValueHelp.prototype.setupContentProvider = function(model)
{
	this.m_model = model;
	this.m_configuration = model.getConfig();
	this.setupSessionBasedSettings();
	this.setupProcessor(this.m_configuration.getExternalValueHelpProcess());
	this.m_valueHelpProcessor.setUseResultSetTextField(this.isUseResultSetTextField());
	this.m_valueHelpProcessor.setNullText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_NULL));
	this.setupReadMode();
	this.setupModel();
};
oFF.FdContentProviderValueHelp.prototype.setupModel = function()
{
	this.m_model.setSupportsDisplayKey(this.supportsDisplayKeyField());
	this.m_model.setViewTypes(this.getSupportedViewTypes());
	this.updateExcludeFeatureAvailability();
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE) && this.m_configuration.isExcludeByDefault())
	{
		this.m_model.setExcludeSwitchOn(true);
	}
	let mainPresentations = this.getMainPresentations();
	let additionalPresentations = this.getAdditionalPresentations();
	let displayInfoInSession = this.m_model.getSessionData().getMainPresentationDisplayInfo();
	let displayInfo = oFF.notNull(displayInfoInSession) ? displayInfoInSession : this.m_configuration.getDisplayInfo();
	let presentationsInSession = this.m_model.getSessionData().getAdditionalPresentations();
	let selectedPresentations = oFF.notNull(presentationsInSession) ? presentationsInSession : this.m_configuration.getDefaultAttributeSelection();
	this.m_model.getPresentationsModel().setupModel(mainPresentations, additionalPresentations, oFF.FdPresentationFactory.mapDimensionDisplayInfoToPresentation(displayInfo, this.getDimension(), mainPresentations), selectedPresentations);
};
oFF.FdContentProviderValueHelp.prototype.setupReadMode = function()
{
	this.m_readMode = oFF.OlapUiReadMode.BOOKED;
	let queryDefaultReadMode = oFF.OlapUiReadMode.BOOKED;
	let supportsReadModeSwitch = false;
	let dimension = this.getDimension();
	let sessionData = this.m_model.getSessionData();
	let systemType = this.getSystemType(dimension);
	if (oFF.notNull(systemType))
	{
		let contextType = this.getContextType(systemType);
		let masterOnlyForValueHelp = dimension.getQueryModel() !== null && dimension.getQueryModel().isSelectorReadModeMasterOnly();
		let dfReadMode = masterOnlyForValueHelp ? oFF.QMemberReadMode.MASTER : dimension.getReadModeDefault(contextType);
		if (oFF.notNull(dfReadMode))
		{
			if (dfReadMode === oFF.QMemberReadMode.REL_MASTER)
			{
				queryDefaultReadMode = oFF.FdReadMode.DIMENSION_RELATIONSHIPS;
			}
			else if (dfReadMode.isTypeOf(oFF.QMemberReadMode.MASTER))
			{
				queryDefaultReadMode = oFF.OlapUiReadMode.MASTER;
			}
			else
			{
				queryDefaultReadMode = dfReadMode.isTypeOf(oFF.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE) ? oFF.OlapUiReadMode.BOOKED_CASCADING : oFF.OlapUiReadMode.BOOKED;
			}
		}
		let preferredReadMode = masterOnlyForValueHelp ? oFF.OlapUiReadMode.MASTER : this.m_configuration.getReadMode();
		supportsReadModeSwitch = this.supportsReadModeSwitch(systemType);
		if (supportsReadModeSwitch && oFF.isNull(preferredReadMode))
		{
			preferredReadMode = sessionData.getReadMode() !== null ? sessionData.getReadMode() : oFF.OlapUiReadMode.QUERY_DEFAULT;
		}
		if (preferredReadMode === oFF.OlapUiReadMode.QUERY_DEFAULT && this.supportsQueryDefaultReadMode(contextType, systemType))
		{
			this.m_readMode = oFF.OlapUiReadMode.QUERY_DEFAULT;
		}
		else if (preferredReadMode === oFF.OlapUiReadMode.BOOKED && this.supportsReadMode(contextType, oFF.QMemberReadMode.BOOKED))
		{
			this.m_readMode = oFF.OlapUiReadMode.BOOKED;
		}
		else if (preferredReadMode === oFF.OlapUiReadMode.BOOKED_CASCADING && this.supportsReadModeBookedCascading(contextType))
		{
			this.m_readMode = oFF.OlapUiReadMode.BOOKED_CASCADING;
		}
		else if (this.supportsReadMode(contextType, oFF.QMemberReadMode.MASTER))
		{
			if (preferredReadMode === oFF.OlapUiReadMode.MASTER || systemType.isTypeOf(oFF.SystemType.HANA) && this.m_configuration.getContentType().isVariableValueHelp())
			{
				this.m_readMode = oFF.OlapUiReadMode.MASTER;
			}
			else if ((oFF.isNull(preferredReadMode) || preferredReadMode === oFF.OlapUiReadMode.QUERY_DEFAULT) && oFF.notNull(dfReadMode) && dfReadMode.isTypeOf(oFF.QMemberReadMode.MASTER) || !this.supportsReadMode(contextType, oFF.QMemberReadMode.BOOKED))
			{
				this.m_readMode = oFF.OlapUiReadMode.MASTER;
			}
		}
		if (sessionData.getReadMode() !== null && sessionData.getReadMode() !== this.m_readMode)
		{
			sessionData.setReadMode(null);
		}
	}
	this.m_model.initReadMode(this.m_readMode, queryDefaultReadMode, supportsReadModeSwitch ? this.getSupportedReadModes() : null);
};
oFF.FdContentProviderValueHelp.prototype.supportsAdditionalPresentations = function()
{
	let supportsAdditionalPresentations = this.m_valueHelpProcessor.supportsAdditionalPresentations();
	if (supportsAdditionalPresentations)
	{
		let modelCapabilities = this.getDimension().getModelCapabilities();
		return oFF.notNull(modelCapabilities) && modelCapabilities.supportsValueHelpWithAttributes();
	}
	return false;
};
oFF.FdContentProviderValueHelp.prototype.supportsDisplayKeyField = function()
{
	return this.m_valueHelpProcessor.getDisplayKeyField() !== null && this.m_valueHelpProcessor.getDisplayKeyField() !== this.m_valueHelpProcessor.getKeyField();
};
oFF.FdContentProviderValueHelp.prototype.supportsReadMode = function(contextType, readMode)
{
	let supportedReadModes = this.getDimension().getSupportedReadModes(contextType);
	return oFF.notNull(supportedReadModes) && oFF.XCollectionUtils.contains(supportedReadModes.getValuesAsReadOnlyList(), (rm) => {
		return rm.isTypeOf(readMode);
	});
};
oFF.FdContentProviderValueHelp.prototype.supportsReadModeSwitch = function(systemType)
{
	return this.m_configuration.isOfferReadModeChange() && !systemType.isTypeOf(oFF.SystemType.UNV) && !systemType.isTypeOf(oFF.SystemType.UQAS);
};
oFF.FdContentProviderValueHelp.prototype.syncSelectionList = function(selectionList, knownItems)
{
	let unknownItems = oFF.XList.create();
	let size = oFF.notNull(selectionList) ? selectionList.size() : 0;
	for (let i = 0; i < size; i++)
	{
		let item = selectionList.get(i);
		if (item.getType() === oFF.FilterDialogValueType.BASIC)
		{
			let vhItem = this.getVhItemFromKnownItems(item, knownItems, unknownItems);
			selectionList.set(i, oFF.notNull(vhItem) ? vhItem : item);
		}
		else if (item.getType() === oFF.FilterDialogValueType.RANGE)
		{
			let rangeItem = item;
			let lowItem = rangeItem.getLowItem();
			if (lowItem.getType() === oFF.FilterDialogValueType.BASIC)
			{
				let lowVhItem = this.getVhItemFromKnownItems(lowItem, knownItems, unknownItems);
				rangeItem.setLow(oFF.notNull(lowVhItem) ? lowVhItem : lowItem);
			}
			let highItem = rangeItem.getHighItem();
			if (highItem.getType() === oFF.FilterDialogValueType.BASIC)
			{
				let highVhItem = this.getVhItemFromKnownItems(highItem, knownItems, unknownItems);
				rangeItem.setHigh(oFF.notNull(highVhItem) ? highVhItem : highItem);
			}
		}
	}
	return unknownItems;
};
oFF.FdContentProviderValueHelp.prototype.syncSelectionListWithKnownItems = function(selectionList, knownItems, presentations, removeUnknownValues, populateErrors, listener, customIdentifier)
{
	let unknownItems = this.syncSelectionList(selectionList, knownItems);
	if (oFF.notNull(listener))
	{
		if (unknownItems.isEmpty())
		{
			listener.onProcessFinished(selectionList, null, customIdentifier);
		}
		else
		{
			let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP_LOAD_UNKNOWN_SELECTED_ITEMS);
			listenerProxy.setItems(selectionList);
			listenerProxy.getProperties().putBoolean(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_REMOVE_UNKNOWN, removeUnknownValues);
			listenerProxy.getProperties().putBoolean(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SHOW_ERRORS, populateErrors);
			this.m_valueHelpProcessor.processFetchItems(unknownItems, this.getFieldsFromPresentationValues(presentations), this, listenerProxy);
		}
	}
	else if (removeUnknownValues)
	{
		oFF.XCollectionUtils.removeIf(selectionList, (item1) => {
			return unknownItems.contains(item1);
		});
	}
};
oFF.FdContentProviderValueHelp.prototype.updateExcludeFeatureAvailability = function()
{
	let supportsExclude = this.getSupportedComparisonOperators(false).contains(oFF.FdComparisonOperator.NOT_EQUAL);
	let exclude = supportsExclude && this.m_configuration.isOfferExclude();
	let excludeAdvanced = supportsExclude && this.m_configuration.isOfferExcludeAdvanced();
	if (excludeAdvanced && (this.m_model.getSelectionMode() === oFF.UiTableSelectionMode.SINGLE || !this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.RANGE)))
	{
		exclude = true;
		excludeAdvanced = false;
	}
	this.m_model.setFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED, excludeAdvanced);
	this.m_model.setFeatureEnabled(oFF.FdFeature.EXCLUDE, exclude && !excludeAdvanced);
	this.m_model.setFeatureEnabled(oFF.FdFeature.EXCLUDE_IN_RANGE_VIEW, excludeAdvanced || exclude && this.isSystemTypeHana());
	this.m_model.setFeatureEnabled(oFF.FdFeature.NOT_EQUAL_IN_RANGE_VIEW, excludeAdvanced || this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_IN_RANGE_VIEW) && this.m_model.isFeatureEnabled(oFF.FdFeature.EQUAL_IN_RANGE_VIEW));
	this.m_model.setFeatureEnabled(oFF.FdFeature.RANGES_IN_HIERARCHY, excludeAdvanced);
};
oFF.FdContentProviderValueHelp.prototype.updateSupportedComparisonOperators = function()
{
	let comparisonOperators;
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED) && this.isHierarchical())
	{
		comparisonOperators = oFF.XList.create();
		if (this.m_model.isFeatureEnabled(oFF.FdFeature.EQUAL_IN_RANGE_VIEW))
		{
			comparisonOperators.add(oFF.FdComparisonOperator.EQUAL);
		}
		if (this.m_model.isFeatureEnabled(oFF.FdFeature.NOT_EQUAL_IN_RANGE_VIEW))
		{
			comparisonOperators.add(oFF.FdComparisonOperator.NOT_EQUAL);
		}
	}
	else
	{
		comparisonOperators = this.getSupportedComparisonOperators(!this.m_model.isFeatureEnabled(oFF.FdFeature.RANGES_IN_HIERARCHY));
	}
	this.m_model.getRangeModel().setSupportedComparisonOperators(comparisonOperators);
};

oFF.FdDateRangesView = function() {};
oFF.FdDateRangesView.prototype = new oFF.FdRangesView();
oFF.FdDateRangesView.prototype._ff_c = "FdDateRangesView";

oFF.FdDateRangesView.createDateRangeView = function(controller, model)
{
	let fdView = new oFF.FdDateRangesView();
	fdView.setupView(controller, model);
	return fdView;
};
oFF.FdDateRangesView.prototype.createRange = function(item)
{
	return oFF.isNull(item) && this.m_ranges.isEmpty() && oFF.FdLayoutUtils.isMultiView(this.m_model) ? oFF.FdComponentDateRange.createEmpty(this.m_model) : oFF.FdComponentDateRange.create(this.m_model, item);
};
oFF.FdDateRangesView.prototype.isValidItem = function(item)
{
	return oFF.isNull(item) || item.getType() === oFF.FilterDialogValueType.DATE_RANGE_FIXED || item.getType() === oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC;
};

oFF.FdMeasureBasedView = function() {};
oFF.FdMeasureBasedView.prototype = new oFF.FdRangesView();
oFF.FdMeasureBasedView.prototype._ff_c = "FdMeasureBasedView";

oFF.FdMeasureBasedView.createMeasureBasedView = function(controller, model)
{
	let fdView = new oFF.FdMeasureBasedView();
	fdView.setupView(controller, model);
	return fdView;
};
oFF.FdMeasureBasedView.prototype.createLayout = function(selectionContainerSupplier)
{
	return oFF.FdMeasureBasedViewLayout.createMeasureBasedLayout(this.m_model, selectionContainerSupplier);
};
oFF.FdMeasureBasedView.prototype.getCurrentViewType = function()
{
	return oFF.FilterDialogViewType.MEASURE_BASED_FILTER;
};
oFF.FdMeasureBasedView.prototype.getInitialFocusControl = function()
{
	return this.getMeasureBasedLayout().getDimContextComboBox();
};
oFF.FdMeasureBasedView.prototype.getMeasureBasedLayout = function()
{
	return this.m_layout;
};
oFF.FdMeasureBasedView.prototype.onDimensionContextChange = function(event)
{
	let selectedItem = event.getSelectedItem();
	if (oFF.notNull(selectedItem))
	{
		if (this.getMeasureBasedLayout().getDimContextComboBox().getSelectedItems().contains(selectedItem))
		{
			oFF.XCollectionUtils.addIfNotPresent(this.m_model.getRangeModel().getDimContext(), selectedItem.getName());
		}
		else
		{
			this.m_model.getRangeModel().getDimContext().removeElement(selectedItem.getName());
		}
		this.getMeasureBasedLayout().updateDimContextState();
	}
};
oFF.FdMeasureBasedView.prototype.onSelect = function(event)
{
	this.m_model.getRangeModel().setMeasureContext(event.getSelectedName());
};
oFF.FdMeasureBasedView.prototype.publishRanges = function()
{
	oFF.FdRangesView.prototype.publishRanges.call( this );
	let layout = this.getMeasureBasedLayout();
	let rangeModel = this.m_model.getRangeModel();
	let dimContext = rangeModel.getDimContext();
	let dimContextValues = rangeModel.getAvailableDimContextValues();
	let dimContextComboBox = layout.getDimContextComboBox();
	dimContextComboBox.registerOnSelectionChange(oFF.UiLambdaSelectionChangeListener.create((evt) => {
		this.onDimensionContextChange(evt);
	}));
	dimContextComboBox.clearItems();
	oFF.XCollectionUtils.forEach(dimContextValues, (dimContextValue) => {
		let dimName = dimContextValue.getName();
		let dimText = dimContextValue.getValue();
		oFF.FdLayoutUtils.addDropdownItem(dimContextComboBox, dimName, oFF.XStringUtils.isNotNullAndNotEmpty(dimText) ? dimText : dimName, null);
	});
	oFF.XCollectionUtils.forEach(dimContext, (contextValue) => {
		dimContextComboBox.addSelectedItem(dimContextComboBox.getItemByName(contextValue));
	});
	let measureContextValues = rangeModel.getAvailableMeasureContextValues();
	if (measureContextValues.hasElements())
	{
		let measureContextDropdown = layout.getMeasureContextDropdown();
		measureContextDropdown.registerOnSelect(this);
		measureContextDropdown.clearItems();
		oFF.XCollectionUtils.forEach(measureContextValues, (measureContextValue) => {
			let measureName = measureContextValue.getName();
			let measureText = measureContextValue.getValue();
			oFF.FdLayoutUtils.addDropdownItem(measureContextDropdown, measureName, oFF.XStringUtils.isNotNullAndNotEmpty(measureText) ? measureText : measureName, null);
		});
		measureContextDropdown.setSelectedName(rangeModel.getMeasureContext());
		layout.setMeasureContextVisible(true);
	}
	else
	{
		layout.setMeasureContextVisible(false);
	}
};
oFF.FdMeasureBasedView.prototype.validate = function(selectionRequired)
{
	let rangeModel = this.m_model.getRangeModel();
	return oFF.FdRangesView.prototype.validate.call( this , selectionRequired) && (rangeModel.getDimContext().hasElements() || oFF.XCollectionUtils.hasElements(rangeModel.getRequiredDimContextValues()) || this.m_ranges.isEmpty());
};

oFF.FdMeasureBasedViewLayout = function() {};
oFF.FdMeasureBasedViewLayout.prototype = new oFF.FdRangesViewLayout();
oFF.FdMeasureBasedViewLayout.prototype._ff_c = "FdMeasureBasedViewLayout";

oFF.FdMeasureBasedViewLayout.createMeasureBasedLayout = function(model, selectionContainer)
{
	let layout = new oFF.FdMeasureBasedViewLayout();
	layout.m_requiredDimensions = model.getRangeModel().getRequiredDimContextValues();
	layout.setupRangesLayout(model, selectionContainer);
	return layout;
};
oFF.FdMeasureBasedViewLayout.prototype.m_contextContainer = null;
oFF.FdMeasureBasedViewLayout.prototype.m_dimContextComboBox = null;
oFF.FdMeasureBasedViewLayout.prototype.m_dimContextContainer = null;
oFF.FdMeasureBasedViewLayout.prototype.m_dimContextIconPopover = null;
oFF.FdMeasureBasedViewLayout.prototype.m_dimContextInfoBtn = null;
oFF.FdMeasureBasedViewLayout.prototype.m_dimContextInfoText = null;
oFF.FdMeasureBasedViewLayout.prototype.m_dimLabelContainer = null;
oFF.FdMeasureBasedViewLayout.prototype.m_measureContextContainer = null;
oFF.FdMeasureBasedViewLayout.prototype.m_measureContextDropdown = null;
oFF.FdMeasureBasedViewLayout.prototype.m_measureContextIconPopover = null;
oFF.FdMeasureBasedViewLayout.prototype.m_measureContextInfoBtn = null;
oFF.FdMeasureBasedViewLayout.prototype.m_requiredDimensions = null;
oFF.FdMeasureBasedViewLayout.prototype.addContent = function(root)
{
	let marginRight = oFF.UiCssBoxEdges.create("0 0.5rem 0 0");
	this.m_contextContainer = this.createContainer("FilterDialogContextContainer");
	this.m_contextContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	this.m_contextContainer.addItem(this.createDimensionContext(marginRight));
	this.m_contextContainer.addItem(this.createMeasureContext(marginRight));
	root.addItem(this.m_contextContainer);
	root.addItem(oFF.FdLayoutUtils.createHr(this.m_genesis));
	oFF.FdRangesViewLayout.prototype.addContent.call( this , root);
};
oFF.FdMeasureBasedViewLayout.prototype.createContainer = function(name)
{
	let container = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	container.setName(name);
	container.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.setContainerToRow(container);
	return container;
};
oFF.FdMeasureBasedViewLayout.prototype.createDimensionContext = function(marginRight)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_dimContextContainer = this.createContainer("FilterDialogDimensionContextContainer");
	this.m_dimContextContainer.setFlex("auto");
	this.m_dimLabelContainer = this.createContainer("FilterDialogDimensionContextLabelContainer");
	this.m_dimLabelContainer.setMargin(marginRight);
	this.m_dimLabelContainer.setMinWidth(oFF.UiCssLength.create("160px"));
	let dimContextLabel = this.m_dimLabelContainer.addNewItemOfType(oFF.UiType.LABEL);
	dimContextLabel.setName("FilterDialogDimensionContextLabel");
	dimContextLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT));
	this.m_dimContextContainer.addItem(this.m_dimLabelContainer);
	let comboboxContainer = this.createContainer("FilterDialogDimensionContextComboboxContainer");
	comboboxContainer.useMaxWidth();
	comboboxContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_dimContextContainer.addItem(comboboxContainer);
	this.m_dimContextComboBox = comboboxContainer.addNewItemOfType(oFF.UiType.MULTI_COMBO_BOX);
	this.m_dimContextComboBox.setShowSelectAll(true);
	this.m_dimContextComboBox.setName("FilterDialogDimensionContext");
	this.m_dimContextComboBox.setFlex("auto");
	this.m_dimContextComboBox.setMargin(marginRight);
	dimContextLabel.setLabelFor(this.m_dimContextComboBox);
	this.m_dimContextInfoBtn = comboboxContainer.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_dimContextInfoBtn.setName("FilterDialogDimensionContextInfoButton");
	this.m_dimContextInfoBtn.setIcon("message-information");
	this.m_dimContextInfoBtn.setTooltip(null);
	this.m_dimContextInfoBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_dimContextInfoBtn.registerOnHover(this);
	this.m_dimContextInfoBtn.registerOnHoverEnd(this);
	this.m_dimContextInfoBtn.registerOnPress(this);
	let iconPopOverLabelContainer = this.createContainer("FilterDialogDimensionContextIconPopoverLabelContainer");
	iconPopOverLabelContainer.setAlignItems(oFF.UiFlexAlignItems.START);
	iconPopOverLabelContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	let iconPopOverLabel = iconPopOverLabelContainer.addNewItemOfType(oFF.UiType.LABEL);
	iconPopOverLabel.setName("FilterDialogDimensionContextPopoverLabel");
	iconPopOverLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO));
	iconPopOverLabel.setWrapping(true);
	this.m_dimContextInfoText = iconPopOverLabel.getText();
	if (oFF.XCollectionUtils.hasElements(this.m_requiredDimensions))
	{
		let requiredDimLabelContainer = this.createContainer("FilterDialogDimensionContextIconPopoverRequiredDimLabelContainer");
		requiredDimLabelContainer.useMaxWidth();
		requiredDimLabelContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
		requiredDimLabelContainer.setWrap(oFF.UiFlexWrap.WRAP);
		iconPopOverLabelContainer.addItem(requiredDimLabelContainer);
		let requiredDimInfoLabel = requiredDimLabelContainer.addNewItemOfType(oFF.UiType.LABEL);
		requiredDimInfoLabel.setName("FilterDialogDimensionContextPopoverRequiredDimensionLabel");
		requiredDimInfoLabel.setMargin(oFF.UiCssBoxEdges.create("0 0.25rem 0 0"));
		requiredDimInfoLabel.setText(localization.getText(this.m_requiredDimensions.size() > 1 ? oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSIONS : oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION));
		let requiredDimLabel = requiredDimLabelContainer.addNewItemOfType(oFF.UiType.LABEL);
		requiredDimLabel.setName("FilterDialogDimensionContextPopoverRequiredDimensionList");
		requiredDimLabel.setText(localization.getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_INFO_REQUIRED_DIMENSION_LIST, oFF.XCollectionUtils.join(this.m_requiredDimensions, ", ")));
		requiredDimLabel.setFontWeight(oFF.UiFontWeight.BOLD);
		this.m_dimContextInfoText = oFF.XStringUtils.concatenate3(this.m_dimContextInfoText, requiredDimInfoLabel.getText(), requiredDimLabel.getText());
	}
	this.m_dimContextIconPopover = this.m_genesis.newControl(oFF.UiType.POPOVER);
	this.m_dimContextIconPopover.setName("FilterDialogDimensionContextIconPopover");
	this.m_dimContextIconPopover.setContent(iconPopOverLabelContainer);
	this.m_dimContextIconPopover.setMaxWidth(oFF.UiCssLength.create("320px"));
	this.m_dimContextIconPopover.setPadding(oFF.UiCssBoxEdges.create("10px"));
	this.m_dimContextIconPopover.setPlacement(oFF.UiPlacementType.TOP);
	this.m_dimContextIconPopover.registerOnAfterOpen(this);
	this.m_dimContextIconPopover.registerOnAfterClose(this);
	return this.m_dimContextContainer;
};
oFF.FdMeasureBasedViewLayout.prototype.createMeasureContext = function(marginRight)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_measureContextContainer = this.createContainer("FilterDialogMeasureContextContainer");
	this.setContainerToColumn(this.m_measureContextContainer);
	this.m_measureContextContainer.setFlex("auto");
	this.m_measureContextContainer.setMaxWidth(oFF.UiCssLength.create("500px"));
	this.m_measureContextContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0 2rem"));
	let measureLabelContainer = this.createContainer("FilterDialogMeasureContextLabelContainer");
	this.setContainerToColumn(measureLabelContainer);
	measureLabelContainer.setMargin(marginRight);
	measureLabelContainer.setMinWidth(oFF.UiCssLength.create("160px"));
	let measureContextLabel = measureLabelContainer.addNewItemOfType(oFF.UiType.LABEL);
	measureContextLabel.setName("FilterDialogMeasureContextLabel");
	measureContextLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT));
	this.m_measureContextContainer.addItem(measureLabelContainer);
	let dropdownContainer = this.createContainer("FilterDialogMeasureContextDropdownContainer");
	dropdownContainer.useMaxWidth();
	dropdownContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
	this.m_measureContextContainer.addItem(dropdownContainer);
	this.m_measureContextDropdown = dropdownContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_measureContextDropdown.setName("FilterDialogMeasureContext");
	this.m_measureContextDropdown.setFlex("auto");
	this.m_measureContextDropdown.setMargin(marginRight);
	measureContextLabel.setLabelFor(this.m_measureContextDropdown);
	this.m_measureContextInfoBtn = dropdownContainer.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_measureContextInfoBtn.setName("FilterDialogMeasureContextInfoButton");
	this.m_measureContextInfoBtn.setIcon("message-information");
	this.m_measureContextInfoBtn.setTooltip(null);
	this.m_measureContextInfoBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_measureContextInfoBtn.registerOnHover(this);
	this.m_measureContextInfoBtn.registerOnHoverEnd(this);
	this.m_measureContextInfoBtn.registerOnPress(this);
	let iconPopOverLabel = this.m_genesis.newControl(oFF.UiType.LABEL);
	iconPopOverLabel.setName("FilterDialogMeasureContextPopoverLabel");
	iconPopOverLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT_INFO));
	iconPopOverLabel.setWrapping(true);
	this.m_measureContextIconPopover = this.m_genesis.newControl(oFF.UiType.POPOVER);
	this.m_measureContextIconPopover.setName("FilterDialogMeasureContextIconPopover");
	this.m_measureContextIconPopover.setContent(iconPopOverLabel);
	this.m_measureContextIconPopover.setMaxWidth(oFF.UiCssLength.create("320px"));
	this.m_measureContextIconPopover.setPadding(oFF.UiCssBoxEdges.create("10px"));
	this.m_measureContextIconPopover.setPlacement(oFF.UiPlacementType.TOP);
	this.m_measureContextIconPopover.registerOnAfterOpen(this);
	this.m_measureContextIconPopover.registerOnAfterClose(this);
	return this.m_measureContextContainer;
};
oFF.FdMeasureBasedViewLayout.prototype.getDimContextComboBox = function()
{
	return this.m_dimContextComboBox;
};
oFF.FdMeasureBasedViewLayout.prototype.getMeasureContextDropdown = function()
{
	return this.m_measureContextDropdown;
};
oFF.FdMeasureBasedViewLayout.prototype.onAfterClose = function(event)
{
	if (event.getControl() === this.m_dimContextIconPopover)
	{
		this.m_dimContextInfoBtn.setTooltip(null);
	}
	else if (event.getControl() === this.m_measureContextIconPopover)
	{
		this.m_measureContextInfoBtn.setTooltip(null);
	}
};
oFF.FdMeasureBasedViewLayout.prototype.onAfterOpen = function(event)
{
	if (event.getControl() === this.m_dimContextIconPopover)
	{
		this.m_dimContextInfoBtn.focus();
	}
	else if (event.getControl() === this.m_measureContextIconPopover)
	{
		this.m_measureContextInfoBtn.focus();
	}
};
oFF.FdMeasureBasedViewLayout.prototype.onHover = function(event)
{
	if (event.getControl() === this.m_dimContextInfoBtn)
	{
		this.m_dimContextIconPopover.openAt(this.m_dimContextInfoBtn);
	}
	else if (event.getControl() === this.m_measureContextInfoBtn)
	{
		this.m_measureContextIconPopover.openAt(this.m_measureContextInfoBtn);
	}
};
oFF.FdMeasureBasedViewLayout.prototype.onHoverEnd = function(event)
{
	if (event.getControl() === this.m_dimContextInfoBtn)
	{
		this.m_dimContextIconPopover.close();
	}
	else if (event.getControl() === this.m_measureContextInfoBtn)
	{
		this.m_measureContextIconPopover.close();
	}
};
oFF.FdMeasureBasedViewLayout.prototype.onPress = function(event)
{
	if (event.getControl() === this.m_dimContextInfoBtn)
	{
		this.m_dimContextIconPopover.openAt(this.m_dimContextInfoBtn);
		this.m_dimContextInfoBtn.setTooltip(this.m_dimContextInfoText);
	}
	else if (event.getControl() === this.m_measureContextInfoBtn)
	{
		this.m_measureContextIconPopover.openAt(this.m_measureContextInfoBtn);
		this.m_measureContextInfoBtn.setTooltip(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_MBF_MEASURE_CONTEXT_INFO));
	}
};
oFF.FdMeasureBasedViewLayout.prototype.reArrangeDimContext = function()
{
	if (oFF.notNull(this.m_size) && !this.m_size.getContentSize().isSmall() && !this.m_measureContextContainer.isVisible())
	{
		this.setContainerToRow(this.m_dimContextContainer);
		this.setContainerToRow(this.m_dimLabelContainer);
	}
	else
	{
		this.setContainerToColumn(this.m_dimContextContainer);
		this.setContainerToColumn(this.m_dimLabelContainer);
	}
};
oFF.FdMeasureBasedViewLayout.prototype.releaseObject = function()
{
	oFF.FdRangesViewLayout.prototype.releaseObject.call( this );
	this.m_requiredDimensions = null;
	this.m_dimContextIconPopover = oFF.XObjectExt.release(this.m_dimContextIconPopover);
	this.m_measureContextIconPopover = oFF.XObjectExt.release(this.m_measureContextIconPopover);
	this.m_dimContextInfoText = null;
};
oFF.FdMeasureBasedViewLayout.prototype.resizeRangeLayouts = function(size, selectionContainerVisible)
{
	oFF.FdRangesViewLayout.prototype.resizeRangeLayouts.call( this , size, selectionContainerVisible);
	if (size.getContentSize().isLarge())
	{
		this.setContainerToRow(this.m_contextContainer);
		this.m_dimContextContainer.setWidth(null);
		this.m_measureContextContainer.setWidth(null);
		this.m_measureContextContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0 2rem"));
	}
	else
	{
		this.setContainerToColumn(this.m_contextContainer);
		this.m_contextContainer.setAlignItems(oFF.UiFlexAlignItems.END);
		this.m_dimContextContainer.useMaxWidth();
		this.m_measureContextContainer.useMaxWidth();
		this.m_measureContextContainer.setMargin(null);
	}
	this.reArrangeDimContext();
};
oFF.FdMeasureBasedViewLayout.prototype.setContainerToColumn = function(container)
{
	container.setDirection(oFF.UiFlexDirection.COLUMN);
	container.setJustifyContent(oFF.UiFlexJustifyContent.CENTER);
	container.setAlignItems(oFF.UiFlexAlignItems.START);
};
oFF.FdMeasureBasedViewLayout.prototype.setContainerToRow = function(container)
{
	container.setDirection(oFF.UiFlexDirection.ROW);
	container.setJustifyContent(oFF.UiFlexJustifyContent.END);
	container.setAlignItems(oFF.UiFlexAlignItems.CENTER);
};
oFF.FdMeasureBasedViewLayout.prototype.setMeasureContextVisible = function(visible)
{
	this.m_measureContextContainer.setVisible(visible);
	this.m_dimContextContainer.setMaxWidth(oFF.UiCssLength.create(visible ? "500px" : "750px"));
	this.m_dimContextComboBox.setMaxWidth(oFF.UiCssLength.create(visible ? "460px" : "540px"));
	this.reArrangeDimContext();
};
oFF.FdMeasureBasedViewLayout.prototype.updateDimContextState = function()
{
	if (this.m_dimContextComboBox.getSelectedItems().isEmpty() && !oFF.XCollectionUtils.hasElements(this.m_requiredDimensions))
	{
		this.m_dimContextComboBox.setValueState(oFF.UiValueState.ERROR);
		this.m_dimContextComboBox.setValueStateText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_MBF_DIMENSION_CONTEXT_ERROR_NO_SELECTION));
		this.m_dimContextComboBox.focus();
	}
	else
	{
		this.m_dimContextComboBox.setValueState(oFF.UiValueState.NONE);
	}
};

oFF.FdValueHelpRangesView = function() {};
oFF.FdValueHelpRangesView.prototype = new oFF.FdRangesView();
oFF.FdValueHelpRangesView.prototype._ff_c = "FdValueHelpRangesView";

oFF.FdValueHelpRangesView.createValueHelpRangesView = function(controller, model)
{
	let fdView = new oFF.FdValueHelpRangesView();
	fdView.setupView(controller, model);
	return fdView;
};
oFF.FdValueHelpRangesView.prototype.m_presentation = null;
oFF.FdValueHelpRangesView.prototype.createLayout = function(selectionContainerSupplier)
{
	this.m_presentation = oFF.FdComponentMainPresentationSelection.create(this.m_model, () => {
		this.onRangesChanged(true);
	});
	this.m_presentation.buildOlapDialogUi(this.m_genesis);
	return oFF.FdValueHelpRangesViewLayout.createValueHelpRangeLayout(this.m_model, this.m_presentation.getLayout(), selectionContainerSupplier);
};
oFF.FdValueHelpRangesView.prototype.createRange = function(item)
{
	return oFF.FdComponentValueHelpRange.createValueHelpRange(this.m_model, item, this.m_controller, (text, listener) => {
		this.clearHierarchy();
		this.m_controller.loadSuggestions(text, listener);
	});
};
oFF.FdValueHelpRangesView.prototype.getInitialFocusControl = function()
{
	return this.m_presentation.getFocusControl();
};
oFF.FdValueHelpRangesView.prototype.publishAvailablePresentations = function()
{
	oFF.FdRangesView.prototype.publishAvailablePresentations.call( this );
	this.m_presentation.publishAvailablePresentations();
};
oFF.FdValueHelpRangesView.prototype.releaseObject = function()
{
	oFF.FdRangesView.prototype.releaseObject.call( this );
	this.m_presentation = oFF.XObjectExt.release(this.m_presentation);
};

oFF.FdValueHelpRangesViewLayout = function() {};
oFF.FdValueHelpRangesViewLayout.prototype = new oFF.FdRangesViewLayout();
oFF.FdValueHelpRangesViewLayout.prototype._ff_c = "FdValueHelpRangesViewLayout";

oFF.FdValueHelpRangesViewLayout.createValueHelpRangeLayout = function(model, presentationSelection, selectionContainer)
{
	let layout = new oFF.FdValueHelpRangesViewLayout();
	layout.setupValueHelpRangesLayout(model, presentationSelection, selectionContainer);
	return layout;
};
oFF.FdValueHelpRangesViewLayout.prototype.m_presentationSelection = null;
oFF.FdValueHelpRangesViewLayout.prototype.m_presentationSelectionContainer = null;
oFF.FdValueHelpRangesViewLayout.prototype.addHeader = function(root)
{
	this.m_presentationSelectionContainer = root.newItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_presentationSelectionContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_presentationSelectionContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_presentationSelectionContainer.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_BETWEEN);
	this.m_presentationSelectionContainer.setMargin(oFF.UiCssBoxEdges.create("0 0 0.75rem 0"));
	this.m_presentationSelectionContainer.setName("FilterDialogRangesHeaderContainer");
	this.m_presentationSelectionContainer.addItem(this.m_presentationSelection.getRoot());
	this.m_presentationSelection.getRoot().setMargin(oFF.UiCssBoxEdges.create("0 0 0 1rem"));
	oFF.FdRangesViewLayout.prototype.addHeader.call( this , root);
	root.addItem(this.m_presentationSelectionContainer);
};
oFF.FdValueHelpRangesViewLayout.prototype.addSelectionContainerToggleBtn = function(parent)
{
	oFF.FdRangesViewLayout.prototype.addSelectionContainerToggleBtn.call( this , this.m_presentationSelectionContainer);
};
oFF.FdValueHelpRangesViewLayout.prototype.releaseObject = function()
{
	oFF.FdRangesViewLayout.prototype.releaseObject.call( this );
	this.m_presentationSelection = null;
};
oFF.FdValueHelpRangesViewLayout.prototype.setupValueHelpRangesLayout = function(model, presentationSelection, selectionContainer)
{
	this.m_presentationSelection = presentationSelection;
	this.setupRangesLayout(model, selectionContainer);
};

oFF.FdComponentAbstractRange = function() {};
oFF.FdComponentAbstractRange.prototype = new oFF.FdAbstractComponent();
oFF.FdComponentAbstractRange.prototype._ff_c = "FdComponentAbstractRange";

oFF.FdComponentAbstractRange.prototype.m_changeListener = null;
oFF.FdComponentAbstractRange.prototype.m_deleteListener = null;
oFF.FdComponentAbstractRange.prototype.m_expandedByUser = false;
oFF.FdComponentAbstractRange.prototype.m_forceDeleteBtnEnabled = false;
oFF.FdComponentAbstractRange.prototype.m_item = null;
oFF.FdComponentAbstractRange.prototype.m_rangeIndex = 0;
oFF.FdComponentAbstractRange.prototype.buildOlapDialogUi = function(genesis)
{
	let layout = this.m_layout;
	layout.buildOlapDialogUi(genesis);
	layout.getPanel().registerOnExpand(this);
	layout.getPanel().registerOnCollapse(this);
	layout.getDeleteBtn().registerOnPress(this);
};
oFF.FdComponentAbstractRange.prototype.getItem = function()
{
	return this.m_item;
};
oFF.FdComponentAbstractRange.prototype.getRangeNumber = function()
{
	return this.m_rangeIndex + 1;
};
oFF.FdComponentAbstractRange.prototype.isExpanded = function()
{
	return this.m_expandedByUser || this.m_layout.getPanel().isExpanded();
};
oFF.FdComponentAbstractRange.prototype.onCollapse = function(event)
{
	this.m_expandedByUser = false;
};
oFF.FdComponentAbstractRange.prototype.onDataChanged = function(isLiveChange)
{
	if (oFF.notNull(this.m_changeListener))
	{
		this.m_changeListener(oFF.XBooleanValue.create(isLiveChange), this.m_item);
	}
	this.m_layout.updateDeleteBtnEnabledState(this.m_forceDeleteBtnEnabled);
};
oFF.FdComponentAbstractRange.prototype.onExpand = function(event)
{
	if (event.getParameters().getBooleanByKeyExt(oFF.UiEventParams.PARAM_TRIGGERED_BY_INTERACTION, false))
	{
		this.m_expandedByUser = true;
	}
};
oFF.FdComponentAbstractRange.prototype.onPress = function(event)
{
	this.m_deleteListener();
};
oFF.FdComponentAbstractRange.prototype.onRangesChanged = function(hasOtherRanges, rangeIndex)
{
	this.m_forceDeleteBtnEnabled = hasOtherRanges;
	this.m_rangeIndex = rangeIndex;
	this.updateFields();
	this.updateRangeText();
	this.m_layout.updateDeleteBtnEnabledState(this.m_forceDeleteBtnEnabled);
};
oFF.FdComponentAbstractRange.prototype.registerOnChange = function(listener)
{
	this.m_changeListener = listener;
};
oFF.FdComponentAbstractRange.prototype.registerOnDelete = function(listener)
{
	this.m_deleteListener = listener;
};
oFF.FdComponentAbstractRange.prototype.releaseObject = function()
{
	oFF.FdAbstractComponent.prototype.releaseObject.call( this );
	this.m_item = null;
	this.m_deleteListener = null;
	this.m_changeListener = null;
};
oFF.FdComponentAbstractRange.prototype.replaceItem = function(newItem)
{
	this.m_changeListener(oFF.XBooleanValue.create(false), newItem);
	this.m_item = newItem;
};
oFF.FdComponentAbstractRange.prototype.setExpanded = function(expanded)
{
	if (expanded || !this.m_expandedByUser)
	{
		this.m_layout.getPanel().setExpanded(expanded);
	}
};
oFF.FdComponentAbstractRange.prototype.updateFields = function() {};
oFF.FdComponentAbstractRange.prototype.updateRangeText = function()
{
	this.m_layout.updateHeaderText(this.getRangeNumber());
};

oFF.FdComponentAbstractRangeLayout = function() {};
oFF.FdComponentAbstractRangeLayout.prototype = new oFF.XObject();
oFF.FdComponentAbstractRangeLayout.prototype._ff_c = "FdComponentAbstractRangeLayout";

oFF.FdComponentAbstractRangeLayout.prototype.m_contentContainer = null;
oFF.FdComponentAbstractRangeLayout.prototype.m_deleteBtn = null;
oFF.FdComponentAbstractRangeLayout.prototype.m_errorLabel = null;
oFF.FdComponentAbstractRangeLayout.prototype.m_genesis = null;
oFF.FdComponentAbstractRangeLayout.prototype.m_headerTitle = null;
oFF.FdComponentAbstractRangeLayout.prototype.m_root = null;
oFF.FdComponentAbstractRangeLayout.prototype.addErrorLabel = function(parent)
{
	this.m_errorLabel = oFF.FdLayoutUtils.createErrorLabel(this.m_genesis, "FilterDialogErrorLabel");
	parent.addItem(this.m_errorLabel);
};
oFF.FdComponentAbstractRangeLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_root = genesis.newControl(oFF.UiType.PANEL);
	this.m_root.setName("FilterDialogRangePanel");
	this.m_root.useMaxWidth();
	this.m_root.setMargin(oFF.UiCssBoxEdges.create("0 0 0.5rem 0"));
	this.m_root.setExpandable(true);
	this.m_root.setExpanded(false);
	let headerToolbar = this.m_genesis.newControl(oFF.UiType.TOOLBAR);
	this.m_root.setHeaderToolbar(headerToolbar);
	this.m_headerTitle = headerToolbar.addNewItemOfType(oFF.UiType.TITLE);
	this.m_headerTitle.setName("FilterDialogRangeHeaderTitle");
	this.m_headerTitle.setFlex("1");
	this.m_headerTitle.setTitleStyle(oFF.UiTitleLevel.H_5);
	headerToolbar.addLabelledBy(this.m_headerTitle);
	this.m_deleteBtn = headerToolbar.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_deleteBtn.setIcon("decline");
	this.m_deleteBtn.setName("FilterDialogRangeDeleteBtn");
	this.m_deleteBtn.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_contentContainer = this.m_genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_contentContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_contentContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_contentContainer.setPadding(oFF.UiCssBoxEdges.create("0.5rem 0 0.5rem 0"));
	this.m_contentContainer.setName("FilterDialogRangeContainer");
	this.m_contentContainer.useMaxWidth();
	this.addContent(this.m_contentContainer);
	this.m_root.setContent(this.m_contentContainer);
};
oFF.FdComponentAbstractRangeLayout.prototype.clearMessage = function()
{
	oFF.FdLayoutUtils.updateErrorLabel(this.m_errorLabel, null, false);
};
oFF.FdComponentAbstractRangeLayout.prototype.getContentContainer = function()
{
	return this.m_contentContainer;
};
oFF.FdComponentAbstractRangeLayout.prototype.getDeleteBtn = function()
{
	return this.m_deleteBtn;
};
oFF.FdComponentAbstractRangeLayout.prototype.getPanel = function()
{
	return this.m_root;
};
oFF.FdComponentAbstractRangeLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdComponentAbstractRangeLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_genesis = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_headerTitle = oFF.XObjectExt.release(this.m_headerTitle);
	this.m_deleteBtn = oFF.XObjectExt.release(this.m_deleteBtn);
	this.m_contentContainer = oFF.XObjectExt.release(this.m_contentContainer);
	this.m_errorLabel = oFF.XObjectExt.release(this.m_errorLabel);
};
oFF.FdComponentAbstractRangeLayout.prototype.resizeComponent = function(size)
{
	this.m_contentContainer.setDirection(size.getContentSize().isLarge() ? oFF.UiFlexDirection.ROW : oFF.UiFlexDirection.COLUMN);
};
oFF.FdComponentAbstractRangeLayout.prototype.showMessage = function(message, onControl, isError)
{
	if (isError || this.m_errorLabel.getText() === null)
	{
		oFF.FdLayoutUtils.updateErrorLabel(this.m_errorLabel, message, isError);
	}
};
oFF.FdComponentAbstractRangeLayout.prototype.updateDeleteBtnEnabledState = function(enabled)
{
	this.m_deleteBtn.setEnabled(enabled || this.hasUserInput());
};
oFF.FdComponentAbstractRangeLayout.prototype.updateHeaderText = function(rangeNumber)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let rangeNr = oFF.XInteger.convertToString(rangeNumber);
	let descriptionText = this.getDescriptionText();
	this.m_headerTitle.setText(oFF.XStringUtils.isNotNullAndNotEmpty(descriptionText) ? localization.getTextWithPlaceholder2(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER, rangeNr, descriptionText) : localization.getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_GENERIC, rangeNr));
	this.m_deleteBtn.setTooltip(localization.getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_REMOVE_RANGE, rangeNr));
};

oFF.FdComponentDateRangeDynamicLayout = function() {};
oFF.FdComponentDateRangeDynamicLayout.prototype = new oFF.XObject();
oFF.FdComponentDateRangeDynamicLayout.prototype._ff_c = "FdComponentDateRangeDynamicLayout";

oFF.FdComponentDateRangeDynamicLayout.ELEMENT_WIDTH = "160px";
oFF.FdComponentDateRangeDynamicLayout.MARGIN_RIGHT = "0 0.5rem 0 0";
oFF.FdComponentDateRangeDynamicLayout.MARGIN_RIGHT_BOTTOM = "0 0.5rem 0.5rem 0";
oFF.FdComponentDateRangeDynamicLayout.create = function(dataChangedListener, valueFormatter)
{
	let layout = new oFF.FdComponentDateRangeDynamicLayout();
	layout.m_dataChangedListener = dataChangedListener;
	layout.m_highestGranularity = oFF.DateRangeGranularity.DAY;
	layout.m_valueFormatter = valueFormatter;
	return layout;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.m_currentPeriod = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_currentPeriodLabel = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_dataChangedListener = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_genesis = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_granularity = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_hiddenLabelForLookAhead = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_hiddenLabelForLookBack = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_highestGranularity = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_item = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_lookAhead = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_lookBack = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_lookBackAheadContainer = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_mainContainer = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_mainErrorLabel = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_offset = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_offsetContainer = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_offsetDirection = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_offsetErrorLabel = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_offsetGranularity = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_root = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_type = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_upToPeriod = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_upToPeriodLabel = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.m_valueFormatter = null;
oFF.FdComponentDateRangeDynamicLayout.prototype.addCurrentPeriodLabel = function(parent)
{
	let container = this.addElementContainer(parent, "FilterDialogDynamicDateRangeCurrentPeriodContainer", false, true);
	this.m_currentPeriodLabel = container.addNewItemOfType(oFF.UiType.LABEL);
	this.m_currentPeriodLabel.setName("FilterDialogDynamicDateRangeCurrentPeriodLabel");
	this.m_currentPeriodLabel.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_CURRENT_PERIOD));
	let textContainer = container.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	textContainer.setName("FilterDialogDynamicDateRangeCurrentPeriodTextContainer");
	textContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	textContainer.setJustifyContent(oFF.UiFlexJustifyContent.CENTER);
	textContainer.setWidth(oFF.UiCssLength.create(oFF.FdComponentDateRangeDynamicLayout.ELEMENT_WIDTH));
	textContainer.setMinHeight(oFF.UiCssLength.create("2rem"));
	textContainer.setFlex("1");
	this.m_currentPeriod = textContainer.addNewItemOfType(oFF.UiType.TITLE);
	this.m_currentPeriod.setTitleStyle(oFF.UiTitleLevel.H_6);
	this.m_currentPeriod.setName("FilterDialogDynamicDateRangeCurrentPeriodText");
	this.m_currentPeriodLabel.setLabelFor(this.m_currentPeriod);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.addElementContainer = function(parent, name, isLast, canBeWrapped)
{
	let container = parent.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	container.setDirection(oFF.UiFlexDirection.COLUMN);
	container.setWrap(oFF.UiFlexWrap.NO_WRAP);
	container.setName(name);
	if (!isLast)
	{
		container.setMargin(canBeWrapped ? oFF.UiCssBoxEdges.create(oFF.FdComponentDateRangeDynamicLayout.MARGIN_RIGHT) : oFF.UiCssBoxEdges.create(oFF.FdComponentDateRangeDynamicLayout.MARGIN_RIGHT_BOTTOM));
	}
	return container;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.addMainSettings = function()
{
	this.m_mainContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_mainContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_mainContainer.setName("FilterDialogDynamicDateRangeMainSettingsContainer");
	this.m_mainContainer.setWrap(oFF.UiFlexWrap.WRAP);
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_type = this.createDropdown(this.m_mainContainer, "FilterDialogDynamicDateRangeTypeContainer", "FilterDialogDynamicDateRangeTypeDropdown", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_TYPE), (typeDropdown) => {
		oFF.FdLayoutUtils.addDropdownItem(typeDropdown, "FilterDialogDynamicDateRangeTypeStandard", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_STANDARD), null);
		oFF.FdLayoutUtils.addDropdownItem(typeDropdown, "FilterDialogDynamicDateRangeTypeOffset", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_OFFSET), null);
	});
	this.m_granularity = this.createDropdown(this.m_mainContainer, "FilterDialogDynamicDateRangeGranularityContainer", "FilterDialogDynamicDateRangeGranularityDropdown", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_GRANULARITY), (granularityDropdown) => {
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityEmpty", "", null);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR), oFF.DateRangeGranularity.YEAR);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityHalfYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_HALFYEAR), oFF.DateRangeGranularity.HALF_YEAR);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityQuarter", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_QUARTER), oFF.DateRangeGranularity.QUARTER);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityMonth", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_MONTH), oFF.DateRangeGranularity.MONTH);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityDay", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_DAY), oFF.DateRangeGranularity.DAY);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityCurrentYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_YEAR), oFF.DateRangeGranularity.CURRENT_YEAR);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityCurrentQuarter", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_QUARTER), oFF.DateRangeGranularity.CURRENT_QUARTER);
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeGranularityCurrentMonth", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_MONTH), oFF.DateRangeGranularity.CURRENT_MONTH);
	});
	let containerWithErrorMessage = this.m_mainContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	containerWithErrorMessage.setDirection(oFF.UiFlexDirection.COLUMN);
	containerWithErrorMessage.setName("FilterDialogDynamicDateRangeLookBackAndAheadContainer1");
	containerWithErrorMessage.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_lookBackAheadContainer = containerWithErrorMessage.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_lookBackAheadContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_lookBackAheadContainer.setName("FilterDialogDynamicDateRangeLookBackAndAheadContainer2");
	this.m_lookBackAheadContainer.setWrap(oFF.UiFlexWrap.WRAP);
	this.m_lookBack = this.createInput(this.m_lookBackAheadContainer, "FilterDialogDynamicDateRangeLookBackContainer", "FilterDialogDynamicDateRangeLookBackInput", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_LOOK_BACK), false);
	this.m_hiddenLabelForLookBack = oFF.FdLayoutUtils.createHiddenLabelFor(this.m_lookBack, this.m_genesis, "");
	this.m_lookBackAheadContainer.addItem(this.m_hiddenLabelForLookBack);
	this.addCurrentPeriodLabel(this.m_lookBackAheadContainer);
	this.m_lookAhead = this.createInput(this.m_lookBackAheadContainer, "FilterDialogDynamicDateRangeLookAheadContainer", "FilterDialogDynamicDateRangeLookAheadInput", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_LOOK_AHEAD), true);
	this.m_hiddenLabelForLookAhead = oFF.FdLayoutUtils.createHiddenLabelFor(this.m_lookAhead, this.m_genesis, "");
	this.m_lookBackAheadContainer.addItem(this.m_hiddenLabelForLookAhead);
	this.m_mainErrorLabel = oFF.FdLayoutUtils.createErrorLabel(this.m_genesis, "FilterDialogErrorLabel");
	containerWithErrorMessage.addItem(this.m_mainErrorLabel);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.addOffsetSettings = function()
{
	this.m_offsetContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_offsetContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_offsetContainer.setName("FilterDialogDynamicDateRangeOffsetContainer");
	this.m_offsetContainer.setWrap(oFF.UiFlexWrap.WRAP);
	this.m_offsetContainer.setMargin(oFF.UiCssBoxEdges.create("0.5rem 0 0 0"));
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_offsetDirection = this.createDropdown(this.m_offsetContainer, "FilterDialogDynamicDateRangeOffsetDirectionContainer", "FilterDialogDynamicDateRangeOffsetDirectionDropdown", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_DIRECTION), (directionDropdown) => {
		oFF.FdLayoutUtils.addDropdownItem(directionDropdown, "FilterDialogDynamicDateRangeOffsetDirectionBack", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_OFFSET_DIRECTION_LOOK_BACK), null);
		oFF.FdLayoutUtils.addDropdownItem(directionDropdown, "FilterDialogDynamicDateRangeOffsetDirectionAhead", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_OFFSET_DIRECTION_LOOK_AHEAD), null);
	});
	this.m_offsetGranularity = this.createDropdown(this.m_offsetContainer, "FilterDialogDynamicDateRangeOffsetGranularityContainer", "FilterDialogDynamicDateRangeOffsetGranularityDropdown", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_GRANULARITY), (granularityDropdown) => {
		oFF.FdLayoutUtils.addDropdownItem(granularityDropdown, "FilterDialogDynamicDateRangeOffsetGranularityYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR), oFF.DateRangeGranularity.YEAR);
	});
	this.m_offset = this.createInput(this.m_offsetContainer, "FilterDialogDynamicDateRangeOffsetAmountContainer", "FilterDialogDynamicDateRangeOffsetAmountInput", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_AMOUNT), true);
	this.m_offsetErrorLabel = oFF.FdLayoutUtils.createErrorLabel(this.m_genesis, "FilterDialogOffsetErrorLabel");
	this.m_offset.getParent().addItem(this.m_offsetErrorLabel);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.addUpToOffsetPeriodSwitch = function()
{
	let container = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	container.setDirection(oFF.UiFlexDirection.ROW);
	container.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	container.setName("FilterDialogDynamicDateRangeUpToPeriodContainer");
	container.setWrap(oFF.UiFlexWrap.WRAP);
	this.m_upToPeriodLabel = container.addNewItemOfType(oFF.UiType.LABEL);
	this.m_upToPeriodLabel.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_CURRENT_PERIOD));
	this.m_upToPeriodLabel.setMargin(oFF.UiCssBoxEdges.create("0 0.5rem 0 0"));
	this.m_upToPeriod = container.addNewItemOfType(oFF.UiType.SWITCH);
	this.m_upToPeriod.setName("FilterDialogDynamicDateRangeUpToPeriodSwitch");
	this.m_upToPeriod.setOnText(" ");
	this.m_upToPeriod.setOffText(" ");
	this.m_upToPeriodLabel.setLabelFor(this.m_upToPeriod);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.bindItem = function(item)
{
	this.m_item = item;
	let granularityItem = this.m_item.getGranularity() !== null ? oFF.XCollectionUtils.findFirst(this.m_granularity.getItems(), (item1) => {
		return item1.getCustomObject() === this.m_item.getGranularity();
	}) : null;
	if (oFF.notNull(granularityItem))
	{
		this.removeEmptyGranularity();
		this.m_granularity.setSelectedItem(granularityItem);
	}
	this.updateOffsetGranularityItems();
	let granularity = this.m_granularity.getSelectedItem().getCustomObject();
	if (oFF.notNull(granularity))
	{
		this.m_lookBackAheadContainer.setVisible(true);
		this.m_lookBack.setValue(oFF.XInteger.convertToString(this.m_item.getLookBack()));
		this.m_lookBack.getParent().setVisible(!granularity.isCurrentDateUnit());
		this.m_lookAhead.setValue(oFF.XInteger.convertToString(this.m_item.getLookAhead()));
		this.m_lookAhead.getParent().setVisible(!granularity.isCurrentDateUnit());
		this.m_lookAhead.setEnabled(!this.m_item.isUpToCurrentPeriod());
		this.m_mainErrorLabel.setVisible(!granularity.isCurrentDateUnit());
	}
	else
	{
		this.m_lookBackAheadContainer.setVisible(false);
	}
	let offsetGranularity = this.m_item.getOffsetGranularity();
	this.m_offsetContainer.setVisible(oFF.notNull(offsetGranularity));
	if (this.m_offsetContainer.isVisible())
	{
		this.m_type.setSelectedName("FilterDialogDynamicDateRangeTypeOffset");
	}
	let offset = this.m_item.getOffset();
	this.m_offsetDirection.setSelectedName(offset <= 0 ? "FilterDialogDynamicDateRangeOffsetDirectionBack" : "FilterDialogDynamicDateRangeOffsetDirectionAhead");
	let offsetGranularityItem = oFF.notNull(offsetGranularity) ? oFF.XCollectionUtils.findFirst(this.m_offsetGranularity.getItems(), (item2) => {
		return item2.getCustomObject() === offsetGranularity;
	}) : null;
	if (oFF.notNull(offsetGranularityItem))
	{
		this.m_offsetGranularity.setSelectedItem(offsetGranularityItem);
	}
	else if (oFF.notNull(offsetGranularity))
	{
		this.m_item.setOffsetGranularity(this.m_offsetGranularity.getSelectedItem().getCustomObject());
	}
	this.m_offset.setValue(oFF.XInteger.convertToString(offset < 0 ? offset * -1 : offset));
	this.updateUpToCurrentPeriodSwitchState();
	this.updateCurrentPeriodText();
	this.m_type.registerOnSelect(this);
	this.m_granularity.registerOnSelect(this);
	this.m_lookBack.registerOnEditingEnd(this);
	this.m_lookAhead.registerOnEditingEnd(this);
	this.m_offsetDirection.registerOnSelect(this);
	this.m_offsetGranularity.registerOnSelect(this);
	this.m_offset.registerOnEditingEnd(this);
	this.m_upToPeriod.registerOnChange(this);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.setName("FilterDialogDynamicDateRangeContainer");
	this.addMainSettings();
	this.addOffsetSettings();
	this.addUpToOffsetPeriodSwitch();
};
oFF.FdComponentDateRangeDynamicLayout.prototype.clearMainMessage = function(clearErrorContainer)
{
	if (clearErrorContainer)
	{
		oFF.FdLayoutUtils.updateErrorLabel(this.m_mainErrorLabel, null, false);
	}
	this.m_lookBack.setValueState(null);
	this.m_lookAhead.setValueState(null);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.clearMessages = function()
{
	this.clearMainMessage(true);
	this.clearOffsetMessage(true);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.clearOffsetMessage = function(clearErrorContainer)
{
	if (clearErrorContainer)
	{
		oFF.FdLayoutUtils.updateErrorLabel(this.m_offsetErrorLabel, null, false);
	}
	this.m_offset.setValueState(null);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.createDropdown = function(parent, containerName, dropdownName, labelText, addDropdownItems)
{
	let container = this.addElementContainer(parent, containerName, false, false);
	let label = container.addNewItemOfType(oFF.UiType.LABEL).setText(labelText);
	let dropdown = container.addNewItemOfType(oFF.UiType.DROPDOWN);
	label.setLabelFor(dropdown);
	addDropdownItems(dropdown);
	dropdown.setName(dropdownName);
	dropdown.setWidth(oFF.UiCssLength.create(oFF.FdComponentDateRangeDynamicLayout.ELEMENT_WIDTH));
	dropdown.setSelectedItemByIndex(0);
	return dropdown;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.createInput = function(parent, containerName, inputName, labelText, isLast)
{
	let container = this.addElementContainer(parent, containerName, isLast, true);
	let label = container.addNewItemOfType(oFF.UiType.LABEL).setText(labelText);
	let input = container.addNewItemOfType(oFF.UiType.INPUT);
	label.setLabelFor(input);
	input.setName(inputName);
	input.setWidth(oFF.UiCssLength.create(oFF.FdComponentDateRangeDynamicLayout.ELEMENT_WIDTH));
	input.setInputType(oFF.UiInputType.NUMBER);
	input.setValue("0");
	input.setShowValueStateMessage(false);
	return input;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getCurrentDateGranularityText = function(granularity)
{
	if (granularity.isQuarter())
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_QUARTER);
	}
	if (granularity.isMonth())
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_MONTH);
	}
	return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_CURRENT_YEAR);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getDescriptionText = function()
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let granularity = this.m_item.getGranularity();
	let description = oFF.FilterDialogI18nUtils.getDateRangeFormattedShortText(this.m_item.getDateRange(), this.m_highestGranularity, this.m_valueFormatter);
	if (oFF.notNull(granularity) && granularity.isCurrentDateUnit())
	{
		let currentDateDesc = oFF.XStringBuffer.create();
		if (this.m_item.getOffsetGranularity() !== null)
		{
			currentDateDesc.append(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TYPE_OFFSET)).append(" ");
		}
		return currentDateDesc.append(this.getCurrentDateGranularityText(granularity)).append(" (").append(description).append(")").toString();
	}
	return description;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getLookAheadText = function()
{
	return this.m_lookAhead.getValue();
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getLookBackText = function()
{
	return this.m_lookBack.getValue();
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getOffsetText = function()
{
	return this.m_offset.getValue();
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.getTypeDropdown = function()
{
	return this.m_type;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.hasUserInput = function()
{
	return true;
};
oFF.FdComponentDateRangeDynamicLayout.prototype.onChange = function(event)
{
	if (event.getControl() === this.m_upToPeriod)
	{
		this.m_item.setUpToCurrentPeriod(this.m_upToPeriod.isOn());
		this.m_lookAhead.setValue(oFF.XInteger.convertToString(this.m_item.getLookAhead()));
		this.m_lookAhead.setEnabled(!this.m_upToPeriod.isOn());
		this.m_dataChangedListener();
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.onEditingEnd = function(event)
{
	let control = event.getControl();
	if (control === this.m_lookBack)
	{
		let lookBack = oFF.XInteger.convertFromStringWithDefault(this.m_lookBack.getValue(), 0);
		this.m_item.setLookBack(lookBack);
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
	else if (control === this.m_lookAhead)
	{
		let lookAhead = oFF.XInteger.convertFromStringWithDefault(this.m_lookAhead.getValue(), 0);
		this.m_item.setLookAhead(lookAhead);
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
	else if (control === this.m_offset)
	{
		let offset = oFF.XInteger.convertFromStringWithDefault(this.m_offset.getValue(), 0);
		if (oFF.XString.isEqual(this.m_offsetDirection.getSelectedName(), "FilterDialogDynamicDateRangeOffsetDirectionBack"))
		{
			offset = offset * -1;
		}
		this.m_item.setOffset(offset);
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.onSelect = function(event)
{
	let control = event.getControl();
	if (control === this.m_type)
	{
		let showOffset = oFF.XString.isEqual(this.m_type.getSelectedName(), "FilterDialogDynamicDateRangeTypeOffset");
		this.m_offsetContainer.setVisible(showOffset);
		this.m_item.setOffsetGranularity(showOffset && this.m_offsetGranularity.getSelectedItem() !== null ? this.m_offsetGranularity.getSelectedItem().getCustomObject() : null);
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
	else if (control === this.m_granularity)
	{
		let granularity = this.m_granularity.getSelectedItem().getCustomObject();
		this.m_item.setGranularity(granularity);
		this.removeEmptyGranularity();
		this.m_lookBackAheadContainer.setVisible(true);
		let isCurrentDateUnit = granularity.isCurrentDateUnit();
		this.m_lookBack.getParent().setVisible(!isCurrentDateUnit);
		this.m_lookAhead.getParent().setVisible(!isCurrentDateUnit);
		this.m_mainErrorLabel.setVisible(!isCurrentDateUnit);
		this.updateUpToCurrentPeriodSwitchState();
		this.updateOffsetGranularityItems();
		if (this.m_item.getOffsetGranularity() !== null)
		{
			this.m_item.setOffsetGranularity(this.m_offsetGranularity.getSelectedItem().getCustomObject());
		}
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
	else if (control === this.m_offsetDirection)
	{
		this.m_item.setOffset(this.m_item.getOffset() * -1);
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
	else if (control === this.m_offsetGranularity)
	{
		this.m_item.setOffsetGranularity(this.m_offsetGranularity.getSelectedItem().getCustomObject());
		this.updateCurrentPeriodText();
		this.m_dataChangedListener();
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_item = null;
	this.m_dataChangedListener = null;
	this.m_highestGranularity = null;
	this.m_genesis = null;
	this.m_valueFormatter = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.removeEmptyGranularity = function()
{
	let item = this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityEmpty");
	if (oFF.notNull(item))
	{
		this.m_granularity.removeItem(item);
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.resizeComponent = function(size)
{
	let direction = size.getContentSize().isSmall() ? oFF.UiFlexDirection.COLUMN : oFF.UiFlexDirection.ROW;
	this.m_mainContainer.setDirection(direction);
	this.m_lookBackAheadContainer.setDirection(direction);
	this.m_offsetContainer.setDirection(direction);
	let smallSizeMargin = oFF.UiCssBoxEdges.create(direction === oFF.UiFlexDirection.COLUMN ? oFF.FdComponentDateRangeDynamicLayout.MARGIN_RIGHT_BOTTOM : oFF.FdComponentDateRangeDynamicLayout.MARGIN_RIGHT);
	this.m_lookBack.getParent().setMargin(smallSizeMargin);
	this.m_currentPeriodLabel.getParent().setMargin(smallSizeMargin);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.setAvailableGranularities = function(granularities)
{
	if (oFF.XCollectionUtils.hasElements(granularities))
	{
		if (!granularities.contains(oFF.DateRangeGranularity.DAY))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityDay"));
			this.m_highestGranularity = granularities.contains(oFF.DateRangeGranularity.MONTH) ? oFF.DateRangeGranularity.MONTH : granularities.contains(oFF.DateRangeGranularity.QUARTER) ? oFF.DateRangeGranularity.QUARTER : granularities.contains(oFF.DateRangeGranularity.HALF_YEAR) ? oFF.DateRangeGranularity.HALF_YEAR : oFF.DateRangeGranularity.YEAR;
		}
		if (!granularities.contains(oFF.DateRangeGranularity.MONTH))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityMonth"));
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityCurrentMonth"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.QUARTER))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityQuarter"));
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityCurrentQuarter"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.HALF_YEAR))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityHalfYear"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.YEAR) && this.m_granularity.getItems().size() > 1)
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityYear"));
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityCurrentYear"));
		}
		this.m_granularity.setSelectedItemByIndex(0);
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.showMainMessage = function(message, errorOnLookBack, errorOnLookAhead)
{
	this.clearMainMessage(false);
	oFF.FdLayoutUtils.updateErrorLabel(this.m_mainErrorLabel, message, true);
	if (errorOnLookBack)
	{
		this.m_lookBack.setValueState(oFF.UiValueState.ERROR);
	}
	if (errorOnLookAhead)
	{
		this.m_lookAhead.setValueState(oFF.UiValueState.ERROR);
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.showOffsetMessage = function(message)
{
	this.clearOffsetMessage(false);
	oFF.FdLayoutUtils.updateErrorLabel(this.m_offsetErrorLabel, message, true);
	this.m_offset.setValueState(oFF.UiValueState.ERROR);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.updateCurrentPeriodText = function()
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let hasOffset = this.m_item.getOffsetGranularity() !== null;
	this.m_upToPeriodLabel.setText(hasOffset ? localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_OFFSET_PERIOD) : localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_INCLUDE_UP_TO_CURRENT_PERIOD));
	this.m_currentPeriodLabel.setText(hasOffset ? localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_OFFSET_PERIOD) : localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_CURRENT_PERIOD));
	let granularity = this.m_granularity.getSelectedItem().getCustomObject();
	if (oFF.isNull(granularity))
	{
		return;
	}
	let periodText = oFF.XStringBuffer.create();
	if (granularity.isCurrentDateUnit())
	{
		granularity = this.m_highestGranularity;
	}
	if (granularity === oFF.DateRangeGranularity.YEAR)
	{
		periodText.append(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR));
	}
	else if (granularity === oFF.DateRangeGranularity.HALF_YEAR)
	{
		periodText.append(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_HALFYEAR));
	}
	else if (granularity === oFF.DateRangeGranularity.QUARTER)
	{
		periodText.append(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_QUARTER));
	}
	else if (granularity === oFF.DateRangeGranularity.MONTH)
	{
		periodText.append(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_MONTH));
	}
	else
	{
		periodText.append(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_DAY));
	}
	let dateRange = oFF.XDateRange.create(this.m_item.getDateRange().getDateTimeProvider()).withOffset(this.m_item.getOffsetGranularity(), this.m_item.getOffset());
	periodText.append(" (");
	let year = dateRange.getFromValue(oFF.DateRangeGranularity.YEAR);
	if (granularity === oFF.DateRangeGranularity.DAY)
	{
		periodText.append(oFF.FilterDialogI18nUtils.getDateText(year, 0, 0, dateRange.getFromValue(oFF.DateRangeGranularity.MONTH), dateRange.getFromValue(oFF.DateRangeGranularity.DAY)));
	}
	else if (granularity === oFF.DateRangeGranularity.MONTH)
	{
		periodText.append(oFF.FilterDialogI18nUtils.getDateText(year, 0, 0, dateRange.getFromValue(oFF.DateRangeGranularity.MONTH), 0));
	}
	else if (granularity === oFF.DateRangeGranularity.QUARTER)
	{
		periodText.append(oFF.FilterDialogI18nUtils.getDateText(year, 0, dateRange.getFromValue(oFF.DateRangeGranularity.QUARTER), 0, 0));
	}
	else if (granularity === oFF.DateRangeGranularity.HALF_YEAR)
	{
		periodText.append(oFF.FilterDialogI18nUtils.getDateText(year, dateRange.getFromValue(oFF.DateRangeGranularity.HALF_YEAR), 0, 0, 0));
	}
	else
	{
		periodText.append(oFF.FilterDialogI18nUtils.getDateText(year, 0, 0, 0, 0));
	}
	periodText.append(")");
	oFF.XObjectExt.release(dateRange);
	let text = periodText.toString();
	this.m_currentPeriod.setText(text);
	this.m_hiddenLabelForLookBack.setText(text);
	this.m_hiddenLabelForLookAhead.setText(text);
};
oFF.FdComponentDateRangeDynamicLayout.prototype.updateOffsetGranularityItems = function()
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let granularity = this.m_granularity.getSelectedItem().getCustomObject();
	let offsetGranularity = this.m_offsetGranularity.getSelectedItem() !== null ? this.m_offsetGranularity.getSelectedItem().getCustomObject() : null;
	this.m_offsetGranularity.clearItems();
	if (oFF.notNull(granularity))
	{
		this.m_offset.getParent().setVisible(true);
		if (this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityYear") !== null)
		{
			oFF.FdLayoutUtils.addDropdownItem(this.m_offsetGranularity, "FilterDialogDynamicDateRangeOffsetGranularityYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR), oFF.DateRangeGranularity.YEAR);
		}
		if (granularity.isHalfYear() || (granularity.isMonth() || granularity.isQuarter()) && this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityHalfYear") !== null)
		{
			oFF.FdLayoutUtils.addDropdownItem(this.m_offsetGranularity, "FilterDialogDynamicDateRangeOffsetGranularityHalfYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_HALFYEAR), oFF.DateRangeGranularity.HALF_YEAR);
		}
		if (granularity.isQuarter() || granularity.isMonth() && this.m_granularity.getItemByName("FilterDialogDynamicDateRangeGranularityQuarter") !== null)
		{
			oFF.FdLayoutUtils.addDropdownItem(this.m_offsetGranularity, "FilterDialogDynamicDateRangeOffsetGranularityQuarter", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_QUARTER), oFF.DateRangeGranularity.QUARTER);
		}
		if (granularity.isMonth())
		{
			oFF.FdLayoutUtils.addDropdownItem(this.m_offsetGranularity, "FilterDialogDynamicDateRangeOffsetGranularityMonth", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_MONTH), oFF.DateRangeGranularity.MONTH);
		}
		if (granularity.isDay())
		{
			oFF.FdLayoutUtils.addDropdownItem(this.m_offsetGranularity, "FilterDialogDynamicDateRangeOffsetGranularityDay", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_DAY), oFF.DateRangeGranularity.DAY);
		}
		let selectedItem = oFF.XCollectionUtils.findFirst(this.m_offsetGranularity.getItems(), (item) => {
			return item.getCustomObject() === offsetGranularity;
		});
		if (oFF.notNull(selectedItem))
		{
			this.m_offsetGranularity.setSelectedItem(selectedItem);
		}
		else
		{
			this.m_offsetGranularity.setSelectedItemByIndex(0);
		}
	}
	else
	{
		this.m_offset.getParent().setVisible(false);
	}
};
oFF.FdComponentDateRangeDynamicLayout.prototype.updateUpToCurrentPeriodSwitchState = function()
{
	let granularity = this.m_item.getGranularity();
	let isCurrentDateUnit = oFF.notNull(granularity) && granularity.isCurrentDateUnit();
	this.m_upToPeriod.setEnabled(!isCurrentDateUnit);
	this.m_upToPeriod.setOn(isCurrentDateUnit || this.m_item.isUpToCurrentPeriod());
};

oFF.FdComponentDateRangeFixedLayout = function() {};
oFF.FdComponentDateRangeFixedLayout.prototype = new oFF.XObject();
oFF.FdComponentDateRangeFixedLayout.prototype._ff_c = "FdComponentDateRangeFixedLayout";

oFF.FdComponentDateRangeFixedLayout.create = function(dataChangedListener, valueFormatter)
{
	let layout = new oFF.FdComponentDateRangeFixedLayout();
	layout.m_dataChangedListener = dataChangedListener;
	layout.m_valueFormatter = valueFormatter;
	return layout;
};
oFF.FdComponentDateRangeFixedLayout.prototype.m_dataChangedListener = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_dateFrom = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_dateTo = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_errorLabel = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_fromToContainer = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_granularity = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_granularityContainer = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_halfYearFrom = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_halfYearTo = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_item = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_monthFrom = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_monthTo = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_quarterFrom = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_quarterTo = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_rangeContainer = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_root = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_valueFormatter = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_yearFrom = null;
oFF.FdComponentDateRangeFixedLayout.prototype.m_yearTo = null;
oFF.FdComponentDateRangeFixedLayout.prototype.bindItem = function(item)
{
	this.m_item = item;
	let granularity = this.m_item.getGranularity();
	let granularityItem = oFF.notNull(granularity) ? oFF.XCollectionUtils.findFirst(this.m_granularity.getItems(), (dropdownItem) => {
		return dropdownItem.getCustomObject() === granularity;
	}) : null;
	if (oFF.notNull(granularityItem))
	{
		this.removeEmptyGranularity();
		this.m_granularity.setSelectedItem(granularityItem);
	}
	if (this.m_item.getYearFrom() === -1)
	{
		this.m_yearFrom.setSelectedItemByIndex(0);
	}
	else if (this.m_item.getYearFrom() !== 0)
	{
		this.setSelectedValue(this.m_yearFrom, this.m_item.getYearFrom());
	}
	if (this.m_item.getYearTo() === -1)
	{
		this.m_yearTo.setSelectedItemByIndex(0);
	}
	else if (this.m_item.getYearTo() !== 0)
	{
		this.setSelectedValue(this.m_yearTo, this.m_item.getYearTo());
	}
	let halfYearFrom = this.m_item.getHalfYearFrom();
	if (halfYearFrom === 1 || halfYearFrom === 2)
	{
		this.m_halfYearFrom.setSelectedName(oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeFromHalfYear", oFF.XInteger.convertToString(halfYearFrom)));
	}
	let halfYearTo = this.m_item.getHalfYearTo();
	if (halfYearTo === 1 || halfYearTo === 2)
	{
		this.m_halfYearTo.setSelectedName(oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeToHalfYear", oFF.XInteger.convertToString(halfYearTo)));
	}
	let quarterFrom = this.m_item.getQuarterFrom();
	if (quarterFrom >= 1 && quarterFrom <= 4)
	{
		this.m_quarterFrom.setSelectedName(oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeFromQuarter", oFF.XInteger.convertToString(quarterFrom)));
	}
	let quarterTo = this.m_item.getQuarterTo();
	if (quarterTo >= 1 && quarterTo <= 4)
	{
		this.m_quarterTo.setSelectedName(oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeToQuarter", oFF.XInteger.convertToString(quarterTo)));
	}
	let monthFrom = this.m_item.getMonthFrom();
	if (monthFrom >= 1 && monthFrom <= 12)
	{
		this.m_monthFrom.setSelectedName(oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeFromMonth", oFF.XInteger.convertToString(monthFrom)));
	}
	let monthTo = this.m_item.getMonthTo();
	if (monthTo >= 1 && monthTo <= 12)
	{
		this.m_monthTo.setSelectedName(oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeToMonth", oFF.XInteger.convertToString(monthTo)));
	}
	let fromDate = this.m_item.getDateFrom();
	this.m_dateFrom.setValue(oFF.isNull(fromDate) ? oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_FROM_START) : fromDate);
	let toDate = this.m_item.getDateTo();
	this.m_dateTo.setValue(oFF.isNull(toDate) ? oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TO_END) : toDate);
	this.updateElementsVisibility(this.m_granularity.getSelectedItem().getCustomObject());
	this.m_granularity.registerOnSelect(this);
	this.m_yearFrom.registerOnSelect(this);
	this.m_yearTo.registerOnSelect(this);
	this.m_halfYearFrom.registerOnSelect(this);
	this.m_halfYearTo.registerOnSelect(this);
	this.m_quarterFrom.registerOnSelect(this);
	this.m_quarterTo.registerOnSelect(this);
	this.m_monthFrom.registerOnSelect(this);
	this.m_monthTo.registerOnSelect(this);
	this.m_dateFrom.registerOnChange(this);
	this.m_dateTo.registerOnChange(this);
};
oFF.FdComponentDateRangeFixedLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	this.m_root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.ROW);
	this.m_root.setName("FilterDialogFixedDateRangeContainer");
	this.m_root.setWrap(oFF.UiFlexWrap.WRAP);
	this.m_granularityContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_granularityContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_granularityContainer.setName("FilterDialogFixedDateRangeGranularityContainer");
	this.m_granularityContainer.setMargin(oFF.UiCssBoxEdges.create("0 2rem 0 0"));
	let granularityLabel = this.m_granularityContainer.addNewItemOfType(oFF.UiType.LABEL);
	granularityLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_GRANULARITY));
	this.m_granularity = this.m_granularityContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	granularityLabel.setLabelFor(this.m_granularity);
	this.m_granularity.setName("FilterDialogFixedDateRangeGranularityDropdown");
	this.m_granularity.setWidth(oFF.UiCssLength.create("200px"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_granularity, "FilterDialogFixedDateRangeGranularityEmpty", "", null);
	oFF.FdLayoutUtils.addDropdownItem(this.m_granularity, "FilterDialogFixedDateRangeGranularityYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_YEAR), oFF.DateRangeGranularity.YEAR);
	oFF.FdLayoutUtils.addDropdownItem(this.m_granularity, "FilterDialogFixedDateRangeGranularityHalfYear", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_HALFYEAR), oFF.DateRangeGranularity.HALF_YEAR);
	oFF.FdLayoutUtils.addDropdownItem(this.m_granularity, "FilterDialogFixedDateRangeGranularityQuarter", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_QUARTER), oFF.DateRangeGranularity.QUARTER);
	oFF.FdLayoutUtils.addDropdownItem(this.m_granularity, "FilterDialogFixedDateRangeGranularityMonth", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_MONTH), oFF.DateRangeGranularity.MONTH);
	oFF.FdLayoutUtils.addDropdownItem(this.m_granularity, "FilterDialogFixedDateRangeGranularityDay", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_GRANULARITY_DAY), oFF.DateRangeGranularity.DAY);
	this.m_granularity.setSelectedItemByIndex(0);
	this.m_rangeContainer = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_rangeContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_rangeContainer.setName("FilterDialogFixedDateRangeRangeSelectionContainer");
	this.m_fromToContainer = this.m_rangeContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_fromToContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_fromToContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_fromToContainer.setName("FilterDialogFixedDateRangeFromToContainer");
	this.m_fromToContainer.setMargin(oFF.UiCssBoxEdges.create("1rem 0 0 0"));
	this.m_fromToContainer.setWrap(oFF.UiFlexWrap.WRAP);
	this.m_fromToContainer.addItem(this.createRangeFrom());
	this.m_fromToContainer.addItem(this.createRangeTo());
	this.m_errorLabel = oFF.FdLayoutUtils.createErrorLabel(genesis, "FilterDialogErrorLabel");
	this.m_rangeContainer.addItem(this.m_errorLabel);
};
oFF.FdComponentDateRangeFixedLayout.prototype.clearDropdownStates = function()
{
	this.m_yearFrom.removeCssClass("ffErrorState");
	this.m_halfYearFrom.removeCssClass("ffErrorState");
	this.m_quarterFrom.removeCssClass("ffErrorState");
	this.m_monthFrom.removeCssClass("ffErrorState");
	this.m_dateFrom.removeCssClass("ffErrorState");
	this.m_yearTo.removeCssClass("ffErrorState");
	this.m_halfYearTo.removeCssClass("ffErrorState");
	this.m_quarterTo.removeCssClass("ffErrorState");
	this.m_monthTo.removeCssClass("ffErrorState");
	this.m_dateTo.removeCssClass("ffErrorState");
};
oFF.FdComponentDateRangeFixedLayout.prototype.clearMessage = function()
{
	oFF.FdLayoutUtils.updateErrorLabel(this.m_errorLabel, null, false);
	this.clearDropdownStates();
};
oFF.FdComponentDateRangeFixedLayout.prototype.createRangeFrom = function()
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let rangeFromContainer = this.m_fromToContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	rangeFromContainer.setDirection(oFF.UiFlexDirection.ROW);
	rangeFromContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	rangeFromContainer.setName("FilterDialogFixedDateRangeFromContainer");
	rangeFromContainer.setMargin(oFF.UiCssBoxEdges.create("0 2rem 0 0"));
	let fromLabel = rangeFromContainer.addNewItemOfType(oFF.UiType.LABEL);
	fromLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_FROM));
	fromLabel.setMargin(oFF.UiCssBoxEdges.create("0 1rem 0 0"));
	this.m_yearFrom = rangeFromContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_yearFrom.setName("FilterDialogFixedDateRangeYearFromDropdown");
	this.m_yearFrom.setVisible(false);
	oFF.FdLayoutUtils.addDropdownItem(this.m_yearFrom, "FilterDialogFixedDateRangeFromYearStart", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_FROM_START), oFF.XIntegerValue.create(-1));
	this.m_halfYearFrom = rangeFromContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_halfYearFrom.setName("FilterDialogFixedDateRangeHalfYearFromDropdown");
	this.m_halfYearFrom.setVisible(false);
	this.m_halfYearFrom.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_halfYearFrom, "FilterDialogFixedDateRangeFromHalfYear1", localization.getText(oFF.FilterDialogI18n.I18N_FD_HALFYEAR1), oFF.XIntegerValue.create(1));
	oFF.FdLayoutUtils.addDropdownItem(this.m_halfYearFrom, "FilterDialogFixedDateRangeFromHalfYear2", localization.getText(oFF.FilterDialogI18n.I18N_FD_HALFYEAR2), oFF.XIntegerValue.create(2));
	this.m_quarterFrom = rangeFromContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_quarterFrom.setName("FilterDialogFixedDateRangeQuarterFromDropdown");
	this.m_quarterFrom.setVisible(false);
	this.m_quarterFrom.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterFrom, "FilterDialogFixedDateRangeFromQuarter1", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER1), oFF.XIntegerValue.create(1));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterFrom, "FilterDialogFixedDateRangeFromQuarter2", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER2), oFF.XIntegerValue.create(2));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterFrom, "FilterDialogFixedDateRangeFromQuarter3", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER3), oFF.XIntegerValue.create(3));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterFrom, "FilterDialogFixedDateRangeFromQuarter4", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER4), oFF.XIntegerValue.create(4));
	this.m_quarterFrom.setSelectedItemByIndex(0);
	this.m_monthFrom = rangeFromContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_monthFrom.setName("FilterDialogFixedDateRangeMonthFromDropdown");
	this.m_monthFrom.setVisible(false);
	this.m_monthFrom.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth1", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH1), oFF.XIntegerValue.create(1));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth2", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH2), oFF.XIntegerValue.create(2));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth3", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH3), oFF.XIntegerValue.create(3));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth4", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH4), oFF.XIntegerValue.create(4));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth5", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH5), oFF.XIntegerValue.create(5));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth6", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH6), oFF.XIntegerValue.create(6));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth7", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH7), oFF.XIntegerValue.create(7));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth8", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH8), oFF.XIntegerValue.create(8));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth9", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH9), oFF.XIntegerValue.create(9));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth10", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH10), oFF.XIntegerValue.create(10));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth11", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH11), oFF.XIntegerValue.create(11));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthFrom, "FilterDialogFixedDateRangeFromMonth12", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH12), oFF.XIntegerValue.create(12));
	this.m_monthFrom.setSelectedItemByIndex(0);
	this.m_dateFrom = rangeFromContainer.addNewItemOfType(oFF.UiType.DATE_PICKER);
	this.m_dateFrom.setName("FilterDialogFixedDateRangeDateFromPicker");
	this.m_dateFrom.setValueFormat(oFF.UiNumberFormatterCenter.DATE_VALUE_FORMAT);
	this.m_dateFrom.setDisplayFormat(oFF.UiNumberFormatterCenter.getCenter().getDateDisplayFormat());
	this.m_dateFrom.setWidth(oFF.UiCssLength.create("auto"));
	this.m_dateFrom.setVisible(false);
	return rangeFromContainer;
};
oFF.FdComponentDateRangeFixedLayout.prototype.createRangeTo = function()
{
	let localization = oFF.XLocalizationCenter.getCenter();
	let rangeToContainer = this.m_fromToContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	rangeToContainer.setDirection(oFF.UiFlexDirection.ROW);
	rangeToContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	rangeToContainer.setName("FilterDialogFixedDateRangeFromContainer");
	let toLabel = rangeToContainer.addNewItemOfType(oFF.UiType.LABEL);
	toLabel.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_TO));
	toLabel.setMargin(oFF.UiCssBoxEdges.create("0 1rem 0 0"));
	this.m_yearTo = rangeToContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_yearTo.setName("FilterDialogFixedDateRangeYearToDropdown");
	this.m_yearTo.setVisible(false);
	oFF.FdLayoutUtils.addDropdownItem(this.m_yearTo, "FilterDialogFixedDateRangeFromYearEnd", localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TO_END), oFF.XIntegerValue.create(-1));
	this.m_halfYearTo = rangeToContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_halfYearTo.setName("FilterDialogFixedDateRangeHalfYearToDropdown");
	this.m_halfYearTo.setVisible(false);
	this.m_halfYearTo.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_halfYearTo, "FilterDialogFixedDateRangeToHalfYear1", localization.getText(oFF.FilterDialogI18n.I18N_FD_HALFYEAR1), oFF.XIntegerValue.create(1));
	oFF.FdLayoutUtils.addDropdownItem(this.m_halfYearTo, "FilterDialogFixedDateRangeToHalfYear2", localization.getText(oFF.FilterDialogI18n.I18N_FD_HALFYEAR2), oFF.XIntegerValue.create(2));
	this.m_quarterTo = rangeToContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_quarterTo.setName("FilterDialogFixedDateRangeQuarterToDropdown");
	this.m_quarterTo.setVisible(false);
	this.m_quarterTo.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterTo, "FilterDialogFixedDateRangeToQuarter1", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER1), oFF.XIntegerValue.create(1));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterTo, "FilterDialogFixedDateRangeToQuarter2", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER2), oFF.XIntegerValue.create(2));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterTo, "FilterDialogFixedDateRangeToQuarter3", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER3), oFF.XIntegerValue.create(3));
	oFF.FdLayoutUtils.addDropdownItem(this.m_quarterTo, "FilterDialogFixedDateRangeToQuarter4", localization.getText(oFF.FilterDialogI18n.I18N_FD_QUARTER4), oFF.XIntegerValue.create(4));
	this.m_quarterTo.setSelectedItemByIndex(3);
	this.m_monthTo = rangeToContainer.addNewItemOfType(oFF.UiType.DROPDOWN);
	this.m_monthTo.setName("FilterDialogFixedDateRangeMonthToDropdown");
	this.m_monthTo.setVisible(false);
	this.m_monthTo.setMargin(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth1", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH1), oFF.XIntegerValue.create(1));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth2", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH2), oFF.XIntegerValue.create(2));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth3", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH3), oFF.XIntegerValue.create(3));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth4", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH4), oFF.XIntegerValue.create(4));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth5", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH5), oFF.XIntegerValue.create(5));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth6", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH6), oFF.XIntegerValue.create(6));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth7", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH7), oFF.XIntegerValue.create(7));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth8", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH8), oFF.XIntegerValue.create(8));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth9", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH9), oFF.XIntegerValue.create(9));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth10", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH10), oFF.XIntegerValue.create(10));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth11", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH11), oFF.XIntegerValue.create(11));
	oFF.FdLayoutUtils.addDropdownItem(this.m_monthTo, "FilterDialogFixedDateRangeToMonth12", localization.getText(oFF.FilterDialogI18n.I18N_FD_MONTH12), oFF.XIntegerValue.create(12));
	this.m_monthTo.setSelectedItemByIndex(11);
	this.m_dateTo = rangeToContainer.addNewItemOfType(oFF.UiType.DATE_PICKER);
	this.m_dateTo.setName("FilterDialogFixedDateRangeDateToPicker");
	this.m_dateTo.setValueFormat(oFF.UiNumberFormatterCenter.DATE_VALUE_FORMAT);
	this.m_dateTo.setDisplayFormat(oFF.UiNumberFormatterCenter.getCenter().getDateDisplayFormat());
	this.m_dateTo.setWidth(oFF.UiCssLength.create("auto"));
	this.m_dateTo.setVisible(false);
	return rangeToContainer;
};
oFF.FdComponentDateRangeFixedLayout.prototype.getDateInIsoFormat = function(dateValue, startEndI18nIdentifier)
{
	if (oFF.XString.isEqual(oFF.XString.toLowerCase(dateValue), oFF.XString.toLowerCase(oFF.XLocalizationCenter.getCenter().getText(startEndI18nIdentifier))))
	{
		return null;
	}
	else if (oFF.XDate.createDateSafe(dateValue) !== null)
	{
		return dateValue;
	}
	let date = oFF.UiNumberFormatterCenter.getCenter().parseFormattedDate(dateValue);
	return oFF.notNull(date) ? date.toIsoFormat() : dateValue;
};
oFF.FdComponentDateRangeFixedLayout.prototype.getDescriptionText = function()
{
	return oFF.FilterDialogI18nUtils.getDateRangeFormattedShortText(this.m_item.getDateRange(), null, this.m_valueFormatter);
};
oFF.FdComponentDateRangeFixedLayout.prototype.getGranularityDropdown = function()
{
	return this.m_granularity;
};
oFF.FdComponentDateRangeFixedLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdComponentDateRangeFixedLayout.prototype.hasUserInput = function()
{
	return true;
};
oFF.FdComponentDateRangeFixedLayout.prototype.onChange = function(event)
{
	if (event.getControl() === this.m_dateFrom)
	{
		this.m_item.setDateFrom(this.getDateInIsoFormat(event.getParameters().getStringByKey(oFF.UiEventParams.PARAM_VALUE), oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_FROM_START));
		this.m_dataChangedListener();
	}
	else if (event.getControl() === this.m_dateTo)
	{
		this.m_item.setDateTo(this.getDateInIsoFormat(event.getParameters().getStringByKey(oFF.UiEventParams.PARAM_VALUE), oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_VALUE_TO_END));
		this.m_dataChangedListener();
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.onSelect = function(event)
{
	let control = event.getControl();
	let granularity = this.m_granularity.getSelectedItem().getCustomObject();
	if (control === this.m_granularity)
	{
		this.removeEmptyGranularity();
		this.m_item.setGranularity(granularity);
		this.updateSecondaryDropdowns();
		this.updateElementsVisibility(granularity);
		this.m_dataChangedListener();
	}
	else if (control === this.m_yearFrom)
	{
		this.m_item.setYearFrom(control.getSelectedItem().getCustomObject().getInteger());
		this.updateSecondaryDropdowns();
		this.updateElementsVisibility(granularity);
		this.m_dataChangedListener();
	}
	else if (control === this.m_yearTo)
	{
		this.m_item.setYearTo(control.getSelectedItem().getCustomObject().getInteger());
		this.updateSecondaryDropdowns();
		this.updateElementsVisibility(granularity);
		this.m_dataChangedListener();
	}
	else if (control === this.m_halfYearFrom)
	{
		this.m_item.setHalfYearFrom(control.getSelectedItem().getCustomObject().getInteger());
		this.m_dataChangedListener();
	}
	else if (control === this.m_halfYearTo)
	{
		this.m_item.setHalfYearTo(control.getSelectedItem().getCustomObject().getInteger());
		this.m_dataChangedListener();
	}
	else if (control === this.m_quarterFrom)
	{
		this.m_item.setQuarterFrom(control.getSelectedItem().getCustomObject().getInteger());
		this.m_dataChangedListener();
	}
	else if (control === this.m_quarterTo)
	{
		this.m_item.setQuarterTo(control.getSelectedItem().getCustomObject().getInteger());
		this.m_dataChangedListener();
	}
	else if (control === this.m_monthFrom)
	{
		this.m_item.setMonthFrom(control.getSelectedItem().getCustomObject().getInteger());
		this.m_dataChangedListener();
	}
	else if (control === this.m_monthTo)
	{
		this.m_item.setMonthTo(control.getSelectedItem().getCustomObject().getInteger());
		this.m_dataChangedListener();
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_item = null;
	this.m_dataChangedListener = null;
	this.m_valueFormatter = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
};
oFF.FdComponentDateRangeFixedLayout.prototype.removeEmptyGranularity = function()
{
	let item = this.m_granularity.getItemByName("FilterDialogFixedDateRangeGranularityEmpty");
	if (oFF.notNull(item))
	{
		this.m_granularity.removeItem(item);
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.resizeComponent = function(size) {};
oFF.FdComponentDateRangeFixedLayout.prototype.setAvailableGranularities = function(granularities)
{
	if (oFF.XCollectionUtils.hasElements(granularities))
	{
		if (!granularities.contains(oFF.DateRangeGranularity.DAY))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogFixedDateRangeGranularityDay"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.MONTH))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogFixedDateRangeGranularityMonth"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.QUARTER))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogFixedDateRangeGranularityQuarter"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.HALF_YEAR))
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogFixedDateRangeGranularityHalfYear"));
		}
		if (!granularities.contains(oFF.DateRangeGranularity.YEAR) && this.m_granularity.getItems().size() > 1)
		{
			this.m_granularity.removeItem(this.m_granularity.getItemByName("FilterDialogFixedDateRangeGranularityYear"));
		}
		this.m_granularity.setSelectedItemByIndex(0);
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.setAvailableRange = function(minDate, maxDate)
{
	for (let i = minDate.getYear(); i <= maxDate.getYear(); i++)
	{
		let year = oFF.XInteger.convertToString(i);
		oFF.FdLayoutUtils.addDropdownItem(this.m_yearFrom, oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeFromYear", year), year, oFF.XIntegerValue.create(i));
		oFF.FdLayoutUtils.addDropdownItem(this.m_yearTo, oFF.XStringUtils.concatenate2("FilterDialogFixedDateRangeToYear", year), year, oFF.XIntegerValue.create(i));
	}
	this.m_yearFrom.setSelectedItemByIndex(1);
	this.m_yearTo.setSelectedItemByIndex(1);
	this.m_dateFrom.setMinDate(minDate.toIsoFormat());
	this.m_dateTo.setMinDate(minDate.toIsoFormat());
	this.m_dateFrom.setMaxDate(maxDate.toIsoFormat());
	this.m_dateTo.setMaxDate(maxDate.toIsoFormat());
	let currentLocalDate = oFF.XDate.createCurrentLocalDate();
	let showCurrentDateButton = oFF.XDateTimeUtils.compareDate(minDate, currentLocalDate) <= 0 && oFF.XDateTimeUtils.compareDate(maxDate, currentLocalDate) >= 0;
	this.m_dateFrom.setShowCurrentDateButton(showCurrentDateButton);
	this.m_dateTo.setShowCurrentDateButton(showCurrentDateButton);
};
oFF.FdComponentDateRangeFixedLayout.prototype.setSelectedValue = function(dropdown, value)
{
	let selectedValue = oFF.XInteger.convertToString(value);
	let dropdownItem = oFF.XCollectionUtils.findFirst(dropdown.getItems(), (uiElement) => {
		return uiElement.getCustomObject().getInteger() === value;
	});
	if (oFF.notNull(dropdownItem))
	{
		dropdown.setSelectedItem(dropdownItem);
	}
	else
	{
		let newDropdownItem = oFF.FdLayoutUtils.addDropdownItem(dropdown, null, selectedValue, oFF.XIntegerValue.create(value));
		dropdown.setSelectedItem(newDropdownItem);
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.showMessage = function(message, errorOnFrom, errorOnTo)
{
	this.clearDropdownStates();
	oFF.FdLayoutUtils.updateErrorLabel(this.m_errorLabel, message, true);
	let granularity = this.m_granularity.getSelectedItem().getCustomObject();
	if (errorOnFrom)
	{
		if (granularity === oFF.DateRangeGranularity.YEAR || granularity === oFF.DateRangeGranularity.QUARTER || granularity === oFF.DateRangeGranularity.MONTH || granularity === oFF.DateRangeGranularity.HALF_YEAR)
		{
			this.m_yearFrom.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.HALF_YEAR)
		{
			this.m_halfYearFrom.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.QUARTER)
		{
			this.m_quarterFrom.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.MONTH)
		{
			this.m_monthFrom.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.DAY)
		{
			this.m_dateFrom.addCssClass("ffErrorState");
		}
	}
	if (errorOnTo)
	{
		if (granularity === oFF.DateRangeGranularity.YEAR || granularity === oFF.DateRangeGranularity.QUARTER || granularity === oFF.DateRangeGranularity.MONTH || granularity === oFF.DateRangeGranularity.HALF_YEAR)
		{
			this.m_yearTo.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.HALF_YEAR)
		{
			this.m_halfYearTo.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.QUARTER)
		{
			this.m_quarterTo.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.MONTH)
		{
			this.m_monthTo.addCssClass("ffErrorState");
		}
		if (granularity === oFF.DateRangeGranularity.DAY)
		{
			this.m_dateTo.addCssClass("ffErrorState");
		}
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.updateElementsVisibility = function(granularity)
{
	if (oFF.notNull(granularity))
	{
		this.m_fromToContainer.setVisible(true);
		this.m_rangeContainer.addItem(this.m_errorLabel);
		let showHalfYear = granularity.isHalfYear();
		let showQuarter = granularity.isQuarter();
		let showMonth = granularity.isMonth();
		let showYear = granularity.isYear() || showQuarter || showMonth || showHalfYear;
		let showDatePicker = granularity.isDay();
		this.m_yearFrom.setVisible(showYear);
		this.m_yearTo.setVisible(showYear);
		this.m_halfYearFrom.setVisible(showHalfYear);
		this.m_halfYearTo.setVisible(showHalfYear);
		this.m_quarterFrom.setVisible(showQuarter);
		this.m_quarterTo.setVisible(showQuarter);
		this.m_monthFrom.setVisible(showMonth);
		this.m_monthTo.setVisible(showMonth);
		this.m_dateFrom.setVisible(showDatePicker);
		this.m_dateTo.setVisible(showDatePicker);
		let isNotFromStart = this.m_item.getYearFrom() !== -1;
		let isNotToEnd = this.m_item.getYearTo() !== -1;
		this.m_halfYearFrom.setEnabled(isNotFromStart);
		this.m_halfYearTo.setEnabled(isNotToEnd);
		this.m_quarterFrom.setEnabled(isNotFromStart);
		this.m_quarterTo.setEnabled(isNotToEnd);
		this.m_monthFrom.setEnabled(isNotFromStart);
		this.m_monthTo.setEnabled(isNotToEnd);
	}
	else
	{
		this.m_fromToContainer.setVisible(false);
		this.m_granularityContainer.addItem(this.m_errorLabel);
	}
};
oFF.FdComponentDateRangeFixedLayout.prototype.updateSecondaryDropdowns = function()
{
	if (this.m_item.getYearFrom() === -1)
	{
		if (this.m_item.getGranularity().isHalfYear())
		{
			this.m_item.setHalfYearFrom(1);
			this.m_halfYearFrom.setSelectedItemByIndex(0);
		}
		else if (this.m_item.getGranularity().isQuarter())
		{
			this.m_item.setQuarterFrom(1);
			this.m_quarterFrom.setSelectedItemByIndex(0);
		}
		else if (this.m_item.getGranularity().isMonth())
		{
			this.m_item.setMonthFrom(1);
			this.m_monthFrom.setSelectedItemByIndex(0);
		}
	}
	if (this.m_item.getYearTo() === -1)
	{
		if (this.m_item.getGranularity().isHalfYear())
		{
			this.m_item.setHalfYearTo(2);
			this.m_halfYearTo.setSelectedItemByIndex(1);
		}
		else if (this.m_item.getGranularity().isQuarter())
		{
			this.m_item.setQuarterTo(4);
			this.m_quarterTo.setSelectedItemByIndex(3);
		}
		else if (this.m_item.getGranularity().isMonth())
		{
			this.m_item.setMonthTo(12);
			this.m_monthTo.setSelectedItemByIndex(11);
		}
	}
};

oFF.FdComponentEndlessPagingLayout = function() {};
oFF.FdComponentEndlessPagingLayout.prototype = new oFF.FdComponentAbstractPagingLayout();
oFF.FdComponentEndlessPagingLayout.prototype._ff_c = "FdComponentEndlessPagingLayout";

oFF.FdComponentEndlessPagingLayout.create = function()
{
	return new oFF.FdComponentEndlessPagingLayout();
};
oFF.FdComponentEndlessPagingLayout.prototype.m_pagingBtn1 = null;
oFF.FdComponentEndlessPagingLayout.prototype.m_pagingBtn2 = null;
oFF.FdComponentEndlessPagingLayout.prototype.m_pagingBtn3 = null;
oFF.FdComponentEndlessPagingLayout.prototype.m_pagingButtons = null;
oFF.FdComponentEndlessPagingLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_pagingButtons = oFF.XList.create();
	let marginLeft = oFF.UiCssBoxEdges.create(oFF.FdComponentAbstractPagingLayout.MARGIN);
	this.addContainer(genesis);
	this.addPagingBtnPrev(genesis);
	this.m_pagingButtons.add(this.m_pagingBtnPrev);
	this.m_pagingBtn1 = this.m_container.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_pagingBtn1.setName("FilterDialogPagingBtn1");
	this.m_pagingBtn1.setMargin(marginLeft);
	this.m_pagingBtn1.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_pagingBtn1, genesis, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_PAGE)));
	this.m_pagingButtons.add(this.m_pagingBtn1);
	this.m_pagingBtn2 = this.m_container.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_pagingBtn2.setName("FilterDialogPagingBtn2");
	this.m_pagingBtn2.setMargin(marginLeft);
	this.m_pagingBtn2.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_pagingBtn2, genesis, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_PAGE)));
	this.m_pagingButtons.add(this.m_pagingBtn2);
	this.m_pagingBtn3 = this.m_container.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_pagingBtn3.setName("FilterDialogPagingBtn3");
	this.m_pagingBtn3.setMargin(marginLeft);
	this.m_pagingBtn3.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_container.addItem(oFF.FdLayoutUtils.createHiddenLabelFor(this.m_pagingBtn3, genesis, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_PAGE)));
	this.m_pagingButtons.add(this.m_pagingBtn3);
	this.addPagingBtnNext(genesis);
	this.m_pagingButtons.add(this.m_pagingBtnNext);
};
oFF.FdComponentEndlessPagingLayout.prototype.disableAllPagingButtons = function()
{
	oFF.XCollectionUtils.forEach(this.m_pagingButtons, (btn) => {
		btn.setEnabled(false);
	});
};
oFF.FdComponentEndlessPagingLayout.prototype.getNextEnabledPagingButton = function()
{
	return oFF.XStream.of(this.m_pagingButtons).filter((btn) => {
		return btn.isVisible() && btn.isEnabled();
	}).findAny();
};
oFF.FdComponentEndlessPagingLayout.prototype.getPagingBtn1 = function()
{
	return this.m_pagingBtn1;
};
oFF.FdComponentEndlessPagingLayout.prototype.getPagingBtn2 = function()
{
	return this.m_pagingBtn2;
};
oFF.FdComponentEndlessPagingLayout.prototype.getPagingBtn3 = function()
{
	return this.m_pagingBtn3;
};
oFF.FdComponentEndlessPagingLayout.prototype.registerOnPress = function(listener)
{
	this.m_pagingBtnPrev.registerOnPress(listener);
	this.m_pagingBtnNext.registerOnPress(listener);
	this.m_pagingBtn1.registerOnPress(listener);
	this.m_pagingBtn2.registerOnPress(listener);
	this.m_pagingBtn3.registerOnPress(listener);
};
oFF.FdComponentEndlessPagingLayout.prototype.releaseObject = function()
{
	oFF.FdComponentAbstractPagingLayout.prototype.releaseObject.call( this );
	this.m_pagingButtons = oFF.XObjectExt.release(this.m_pagingButtons);
};
oFF.FdComponentEndlessPagingLayout.prototype.setPagingBtn1Visible = function(visible, enabled)
{
	this.m_pagingBtn1.setVisible(visible);
	this.m_pagingBtn1.setEnabled(enabled);
};
oFF.FdComponentEndlessPagingLayout.prototype.setPagingBtn2Visible = function(visible, enabled)
{
	this.m_pagingBtn2.setVisible(visible);
	this.m_pagingBtn2.setEnabled(enabled);
};
oFF.FdComponentEndlessPagingLayout.prototype.setPagingBtn3Visible = function(visible, enabled)
{
	this.m_pagingBtn3.setVisible(visible);
	this.m_pagingBtn3.setEnabled(enabled);
};

oFF.FdComponentNavigationContainer = function() {};
oFF.FdComponentNavigationContainer.prototype = new oFF.FdComponentAbstractTable();
oFF.FdComponentNavigationContainer.prototype._ff_c = "FdComponentNavigationContainer";

oFF.FdComponentNavigationContainer.NAV_CONTAINER_SEARCH_PAGE = "SearchPage";
oFF.FdComponentNavigationContainer.create = function(tableBasedView, model)
{
	let obj = new oFF.FdComponentNavigationContainer();
	obj.setupTableComponent(model, oFF.FdComponentNavigationContainerLayout.create(), tableBasedView);
	return obj;
};
oFF.FdComponentNavigationContainer.prototype.m_activePage = null;
oFF.FdComponentNavigationContainer.prototype.addNavigationPage = function(parent, showHeader)
{
	let table = this.createTable(parent);
	this.m_activePage = this.getNavContainer().pushNewPage();
	this.m_activePage.setTitle(this.getPageTitle(parent));
	this.m_activePage.setShowHeader(showHeader);
	this.m_activePage.setCustomObject(table);
	this.m_activePage.setContent(table.getTableControl());
	return this.m_activePage;
};
oFF.FdComponentNavigationContainer.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	this.getNavContainer().registerOnBack(this);
	this.addNavigationPage(null, false);
};
oFF.FdComponentNavigationContainer.prototype.clearPages = function()
{
	let navContainer = this.getNavContainer();
	let pages = navContainer.getPages();
	for (let i = 0; i < pages.size(); i++)
	{
		oFF.XObjectExt.release(pages.get(i).getCustomObject());
	}
	navContainer.clearPages();
};
oFF.FdComponentNavigationContainer.prototype.createTable = function(parent)
{
	let responsiveTable = this.m_layout.createNewResponsiveTable(this.m_model.supportsSelectAll());
	this.m_uiTable = oFF.FdUiTable.createResponsiveTable(responsiveTable);
	this.m_uiTable.registerOnSelectionChange(this);
	this.m_uiTable.registerOnScrollLoad(this);
	this.m_uiTable.setBusy(true);
	this.m_uiTable.setCustomObject(parent);
	let navContainer = this.getNavContainer();
	if (navContainer.hasPages())
	{
		this.setSelectionMode(this.getTableFromPage(navContainer.getCurrentPage()).getTableSelectionMode());
	}
	return this.m_uiTable;
};
oFF.FdComponentNavigationContainer.prototype.getLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentNavigationContainer.prototype.getNavContainer = function()
{
	return this.m_layout.getNavContainer();
};
oFF.FdComponentNavigationContainer.prototype.getPageTitle = function(parent)
{
	if (oFF.isNull(parent))
	{
		return null;
	}
	return this.m_view.getMainPresentation().hasKeyPresentation() ? parent.getDisplayKey() : parent.getTextFormatted();
};
oFF.FdComponentNavigationContainer.prototype.getParentItem = function(table)
{
	return table.getCustomObject();
};
oFF.FdComponentNavigationContainer.prototype.getTableFromPage = function(page)
{
	return page.getCustomObject();
};
oFF.FdComponentNavigationContainer.prototype.isReloadRequired = function()
{
	return this.m_model.isInitial();
};
oFF.FdComponentNavigationContainer.prototype.onBack = function(event)
{
	if (this.m_view.isSearchActive())
	{
		this.m_view.clearSearch();
	}
	if (this.isReloadRequired())
	{
		this.refreshContent(false);
		return;
	}
	let navContainer = this.getNavContainer();
	if (navContainer.hasPages())
	{
		if (oFF.notNull(this.m_activePage))
		{
			oFF.XObjectExt.release(this.m_activePage.getCustomObject());
			this.m_activePage = oFF.XObjectExt.release(this.m_activePage);
		}
		this.m_activePage = navContainer.getCurrentPage();
		this.m_uiTable = this.getTableFromPage(navContainer.getCurrentPage());
		let selectedItems = this.m_model.getSelectedItems();
		oFF.XCollectionUtils.forEach(this.m_uiTable.getRows(), (row) => {
			row.setSelected(selectedItems.contains(row.getCustomObject()));
		});
		if (this.isPresentationUpdateNeeded(this.m_view.getSelectedPresentations().getKeysAsReadOnlyList()))
		{
			this.refreshContent(true);
		}
	}
};
oFF.FdComponentNavigationContainer.prototype.onPress = function(event)
{
	let control = event.getControl();
	let item = control.getCustomObject();
	if (item.hasChildren() && !this.m_view.isSearchActive())
	{
		this.addNavigationPage(item, true);
		this.updateColumns(this.m_view.getSelectedPresentations().getKeysAsReadOnlyList());
		this.m_view.onFetchChildren(item, 0, null, this.m_view, oFF.FdViewCustomIdentifier.creatForFetchChildrenByItem(item));
	}
};
oFF.FdComponentNavigationContainer.prototype.onProcessFinished = function(items, messages, customIdentifier)
{
	if (!this.m_view.isSearchActive())
	{
		let identifier = customIdentifier;
		if (identifier.getParentItem() !== this.getParentItem(this.m_uiTable))
		{
			oFF.XObjectExt.release(identifier);
			return;
		}
	}
	this.renderItems(items, this.m_view.getSelectedPresentations(), this.m_model.getSelectedItems());
	this.setBusy(false);
};
oFF.FdComponentNavigationContainer.prototype.onScrollLoad = function(event)
{
	if (this.m_uiTable.isBusy() || this.m_view.isSearchActive())
	{
		return;
	}
	let tableParent = this.getParentItem(this.m_uiTable);
	let loadedItems = oFF.notNull(tableParent) ? tableParent.getChildren() : this.m_model.getItems(0, 0);
	let totalRowCount = this.m_uiTable.getRows().size();
	if (loadedItems.size() > totalRowCount)
	{
		this.setBusy(true);
		this.m_view.onFetchChildren(tableParent, totalRowCount, null, this.m_view, oFF.FdViewCustomIdentifier.creatForFetchChildrenByItem(tableParent));
	}
};
oFF.FdComponentNavigationContainer.prototype.onSearchChange = function(isSearchActive, searchText)
{
	let page = this.getNavContainer().getCurrentPage();
	if (isSearchActive)
	{
		if (!oFF.XString.isEqual(page.getName(), oFF.FdComponentNavigationContainer.NAV_CONTAINER_SEARCH_PAGE))
		{
			page = this.addNavigationPage(null, true);
			page.setName(oFF.FdComponentNavigationContainer.NAV_CONTAINER_SEARCH_PAGE);
		}
		page.setTitle(oFF.XStringUtils.concatenate3("'", searchText, "'"));
		let table = this.getTableFromPage(page);
		table.clearRows();
		table.clearSelectedItems();
		this.updateColumns(this.m_view.getSelectedPresentations().getKeysAsReadOnlyList());
		oFF.FdComponentAbstractTable.prototype.onSearchChange.call( this , isSearchActive, searchText);
	}
	else if (oFF.XString.isEqual(page.getName(), oFF.FdComponentNavigationContainer.NAV_CONTAINER_SEARCH_PAGE))
	{
		if (this.isReloadRequired())
		{
			this.refreshContent(false);
		}
		else
		{
			this.getNavContainer().popPage();
		}
	}
};
oFF.FdComponentNavigationContainer.prototype.onSelectionCleared = function()
{
	let pages = this.getNavContainer().getPages();
	for (let i = 0; i < pages.size(); i++)
	{
		this.getTableFromPage(pages.get(i)).clearSelectedItems();
	}
	oFF.FdComponentAbstractTable.prototype.onSelectionCleared.call( this );
};
oFF.FdComponentNavigationContainer.prototype.parentNodesInSearchNeeded = function()
{
	return false;
};
oFF.FdComponentNavigationContainer.prototype.publishPresentations = function()
{
	oFF.FdComponentAbstractTable.prototype.publishPresentations.call( this );
	let pages = this.getNavContainer().getPages();
	for (let i = 0; i < pages.size(); i++)
	{
		let page = pages.get(i);
		page.setTitle(this.getPageTitle(this.getParentItem(this.getTableFromPage(page))));
	}
};
oFF.FdComponentNavigationContainer.prototype.refreshContent = function(refreshPresentationsOnly)
{
	if (this.isReloadRequired())
	{
		let selectionMode = this.m_uiTable.getTableSelectionMode();
		this.clearPages();
		this.addNavigationPage(null, false);
		this.setSelectionMode(selectionMode);
	}
	this.m_view.onRefreshTree(refreshPresentationsOnly, this.getParentItem(this.m_uiTable));
};
oFF.FdComponentNavigationContainer.prototype.releaseObject = function()
{
	this.clearPages();
	oFF.FdComponentAbstractTable.prototype.releaseObject.call( this );
};
oFF.FdComponentNavigationContainer.prototype.renderItems = function(items, presentations, selectedItems)
{
	this.updateColumns(presentations.getKeysAsReadOnlyList());
	if (oFF.notNull(items))
	{
		let size = this.m_view.isSearchActive() ? items.size() : oFF.XMath.min(items.size(), this.m_model.getChildNodesPageSize());
		for (let i = 0; i < size; i++)
		{
			let item = items.get(i);
			let row = this.m_uiTable.addNewRow();
			this.m_uiTable.addAllCells(row, this.createRowCells(row, item, presentations.getValuesAsReadOnlyList()));
			row.setCustomObject(item);
			row.setSelected(selectedItems.contains(item));
			row.setName(item.getName());
			if (item.hasChildren() && !this.m_view.isSearchActive())
			{
				let responsiveTableRow = row;
				responsiveTableRow.registerOnPress(this);
				this.m_uiTable.setListItemType(responsiveTableRow, oFF.UiListItemType.NAVIGATION);
			}
		}
	}
};

oFF.FdComponentNavigationContainerLayout = function() {};
oFF.FdComponentNavigationContainerLayout.prototype = new oFF.XObject();
oFF.FdComponentNavigationContainerLayout.prototype._ff_c = "FdComponentNavigationContainerLayout";

oFF.FdComponentNavigationContainerLayout.create = function()
{
	return new oFF.FdComponentNavigationContainerLayout();
};
oFF.FdComponentNavigationContainerLayout.prototype.m_genesis = null;
oFF.FdComponentNavigationContainerLayout.prototype.m_labelledByControl = null;
oFF.FdComponentNavigationContainerLayout.prototype.m_navContainer = null;
oFF.FdComponentNavigationContainerLayout.prototype.addLabelledBy = function(control)
{
	this.m_labelledByControl = control;
	oFF.XCollectionUtils.forEach(this.m_navContainer.getPages(), (page) => {
		page.getContent().addLabelledBy(control);
	});
};
oFF.FdComponentNavigationContainerLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_navContainer = genesis.newControl(oFF.UiType.NAVIGATION_CONTAINER);
	this.m_genesis = genesis;
};
oFF.FdComponentNavigationContainerLayout.prototype.createNewResponsiveTable = function(supportsSelectAll)
{
	let responsiveTable = oFF.FdComponentResponsiveTableLayout.create(null);
	responsiveTable.buildOlapDialogUi(this.m_genesis);
	responsiveTable.addLabelledBy(this.m_labelledByControl);
	responsiveTable.disableRowClickBehavior();
	responsiveTable.setSupportsSelectAll(supportsSelectAll);
	return responsiveTable;
};
oFF.FdComponentNavigationContainerLayout.prototype.getNavContainer = function()
{
	return this.m_navContainer;
};
oFF.FdComponentNavigationContainerLayout.prototype.getRoot = function()
{
	return this.m_navContainer;
};
oFF.FdComponentNavigationContainerLayout.prototype.getTable = function()
{
	return this.m_navContainer.getCurrentPage().getContent();
};
oFF.FdComponentNavigationContainerLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_genesis = null;
	this.m_navContainer = oFF.XObjectExt.release(this.m_navContainer);
	this.m_labelledByControl = null;
};
oFF.FdComponentNavigationContainerLayout.prototype.resizeComponent = function(size) {};

oFF.FdComponentPagingLayout = function() {};
oFF.FdComponentPagingLayout.prototype = new oFF.FdComponentAbstractPagingLayout();
oFF.FdComponentPagingLayout.prototype._ff_c = "FdComponentPagingLayout";

oFF.FdComponentPagingLayout.create = function()
{
	return new oFF.FdComponentPagingLayout();
};
oFF.FdComponentPagingLayout.prototype.m_label = null;
oFF.FdComponentPagingLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.addContainer(genesis);
	this.addPagingBtnPrev(genesis);
	this.m_label = this.m_container.addNewItemOfType(oFF.UiType.LABEL);
	this.m_label.setName("FilterDialogPagingLabel");
	this.m_label.setMargin(oFF.UiCssBoxEdges.create(oFF.FdComponentAbstractPagingLayout.MARGIN));
	this.addPagingBtnNext(genesis);
};
oFF.FdComponentPagingLayout.prototype.registerOnPress = function(listener)
{
	this.m_pagingBtnPrev.registerOnPress(listener);
	this.m_pagingBtnNext.registerOnPress(listener);
};
oFF.FdComponentPagingLayout.prototype.setPage = function(page, maxPages)
{
	if (page > 0 && maxPages > 1)
	{
		this.m_label.setText(oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder2(oFF.FilterDialogI18n.I18N_FD_CURRENTPAGE, oFF.XInteger.convertToString(page), oFF.XInteger.convertToString(maxPages)));
		this.m_container.setVisible(true);
	}
	else
	{
		this.m_container.setVisible(false);
	}
};

oFF.FdComponentResponsiveTable = function() {};
oFF.FdComponentResponsiveTable.prototype = new oFF.FdComponentAbstractTable();
oFF.FdComponentResponsiveTable.prototype._ff_c = "FdComponentResponsiveTable";

oFF.FdComponentResponsiveTable.create = function(tableBasedView, model, tableType)
{
	let obj = new oFF.FdComponentResponsiveTable();
	obj.setupResponsiveTableComponent(model, tableBasedView, tableType);
	return obj;
};
oFF.FdComponentResponsiveTable.prototype.m_isLazyLoading = false;
oFF.FdComponentResponsiveTable.prototype.m_paging = null;
oFF.FdComponentResponsiveTable.prototype.buildOlapDialogUi = function(genesis)
{
	if (oFF.notNull(this.m_paging))
	{
		this.m_paging.buildOlapDialogUi(genesis);
	}
	this.m_layout.buildOlapDialogUi(genesis);
	let layout = this.getTableLayout();
	layout.setSupportsSelectAll(this.m_model.supportsSelectAll());
	this.m_uiTable = oFF.FdUiTable.createResponsiveTable(layout);
	this.m_uiTable.registerOnSelectionChange(this);
	if (oFF.isNull(this.m_paging))
	{
		this.m_uiTable.registerOnScrollLoad(this);
	}
	this.m_uiTable.setBusy(true);
	this.m_model.registerOnPageChanged(() => {
		this.setBusy(true);
		this.refreshContent(false);
	});
};
oFF.FdComponentResponsiveTable.prototype.createCell = function(row, item, presentation, colIndex)
{
	if (colIndex === 0 && (item.getType() === oFF.FilterDialogValueType.USER || item.getType() === oFF.FilterDialogValueType.TEAM))
	{
		let userCell = this.m_uiTable.newCell(row, oFF.UiType.FLEX_LAYOUT);
		this.getTableLayout().addUserAvatar(userCell.getResponsiveTableCell(), item, item.getFormattedValueByPresentation(presentation), this.m_model.getPresentationsModel().getSelectedMainPresentation().getKeyPresentation() !== null);
		return userCell;
	}
	let cell = oFF.FdComponentAbstractTable.prototype.createCell.call( this , row, item, presentation, colIndex);
	this.updateCellExcludeState(cell.getResponsiveTableCell(), row, item);
	cell.getResponsiveTableCell().addCssClass("ffGdsFilterListItem");
	return cell;
};
oFF.FdComponentResponsiveTable.prototype.getTableLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentResponsiveTable.prototype.onScrollLoad = function(event)
{
	if (!this.m_uiTable.isBusy() && !this.m_view.isSearchActive() && this.m_model.hasNextPage())
	{
		this.setBusy(true);
		this.m_isLazyLoading = true;
		this.m_model.setPage(this.m_model.getPage() + 1);
	}
};
oFF.FdComponentResponsiveTable.prototype.onSelectionChange = function(event)
{
	let searchActive = this.m_view.isSearchActive();
	if (!searchActive && event.getParameters().getBooleanByKeyExt(oFF.UiEventParams.PARAM_SELECT_ALL, false))
	{
		this.m_view.addAllMembersToSelection();
		return;
	}
	else if (!searchActive && event.getParameters().getBooleanByKeyExt(oFF.UiEventParams.PARAM_DESELECT_ALL, false))
	{
		this.m_model.clearSelection();
		return;
	}
	oFF.FdComponentAbstractTable.prototype.onSelectionChange.call( this , event);
	this.m_uiTable.registerOnSelectionChange(null);
	let selection = this.m_model.getSelectedItems();
	oFF.XCollectionUtils.forEach(this.m_uiTable.getRows(), (row) => {
		row.setSelected(selection.contains(row.getCustomObject()));
	});
	this.m_uiTable.registerOnSelectionChange(this);
};
oFF.FdComponentResponsiveTable.prototype.refreshContent = function(refreshPresentationsOnly)
{
	this.m_view.onRefreshList(refreshPresentationsOnly, oFF.notNull(this.m_paging) || this.m_isLazyLoading);
};
oFF.FdComponentResponsiveTable.prototype.releaseObject = function()
{
	this.m_model.registerOnPageChanged(null);
	this.m_paging = oFF.XObjectExt.release(this.m_paging);
	oFF.FdComponentAbstractTable.prototype.releaseObject.call( this );
};
oFF.FdComponentResponsiveTable.prototype.renderItems = function(items, presentations, selectedItems)
{
	if (!this.m_isLazyLoading)
	{
		this.m_uiTable.clearRows();
		this.m_uiTable.clearSelectedItems();
		this.updateColumns(presentations.getKeysAsReadOnlyList());
		this.getTableLayout().scrollToTop();
	}
	this.m_isLazyLoading = false;
	let draggable = this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED);
	let size = oFF.notNull(items) ? items.size() : 0;
	for (let i = 0; i < size; i++)
	{
		let item = items.get(i);
		let row = this.m_uiTable.addNewRow();
		row.setCustomObject(item);
		row.setSelected(selectedItems.contains(item));
		row.setDraggable(draggable);
		this.m_uiTable.addAllCells(row, this.createRowCells(row, item, presentations.getValuesAsReadOnlyList()));
	}
};
oFF.FdComponentResponsiveTable.prototype.setBusy = function(busy)
{
	oFF.FdComponentAbstractTable.prototype.setBusy.call( this , busy);
	if (oFF.notNull(this.m_paging))
	{
		this.m_paging.setBusy(busy);
	}
};
oFF.FdComponentResponsiveTable.prototype.setupResponsiveTableComponent = function(model, tableBasedView, tableType)
{
	if (tableType === oFF.FdTableType.RESPONSIVE_TABLE_PAGING)
	{
		this.m_paging = model.getTotalPageCount() < 0 ? oFF.FdComponentEndlessPaging.create(model) : oFF.FdComponentPaging.create(model);
	}
	oFF.FdComponentAbstractTable.prototype.setupTableComponent.call( this , model, oFF.FdComponentResponsiveTableLayout.create(oFF.notNull(this.m_paging) ? this.m_paging.getLayout() : null), tableBasedView);
};
oFF.FdComponentResponsiveTable.prototype.updateCellExcludeState = function(cell, row, item)
{
	let isExcluded = row.isSelected() && this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED) && oFF.XCollectionUtils.contains(this.m_model.getSelectedItems(), (selected) => {
		return selected.isExcluded() && selected.isEqualTo(item);
	});
	cell.setTextDecoration(isExcluded ? oFF.UiCssTextDecoration.createByValues(oFF.UiTextDecorationLine.LINE_THROUGH, null, null) : null);
};
oFF.FdComponentResponsiveTable.prototype.updatePaging = function(forceDisablePaging)
{
	if (oFF.notNull(this.m_paging))
	{
		this.m_paging.updatePaging(forceDisablePaging || this.m_view.isSearchActive());
	}
};
oFF.FdComponentResponsiveTable.prototype.updateSelectionState = function(selection)
{
	oFF.XCollectionUtils.forEach(this.m_uiTable.getRows(), (tableRow) => {
		let item = tableRow.getCustomObject();
		tableRow.setSelected(selection.contains(item));
		if (item.getType() !== oFF.FilterDialogValueType.USER && item.getType() !== oFF.FilterDialogValueType.TEAM)
		{
			oFF.XCollectionUtils.forEach(tableRow.getResponsiveTableCells(), (cell) => {
				this.updateCellExcludeState(cell, tableRow, item);
			});
		}
	});
};

oFF.FdComponentResponsiveTableLayout = function() {};
oFF.FdComponentResponsiveTableLayout.prototype = new oFF.XObject();
oFF.FdComponentResponsiveTableLayout.prototype._ff_c = "FdComponentResponsiveTableLayout";

oFF.FdComponentResponsiveTableLayout.create = function(pagingLayout)
{
	let layout = new oFF.FdComponentResponsiveTableLayout();
	layout.m_pagingLayout = pagingLayout;
	return layout;
};
oFF.FdComponentResponsiveTableLayout.prototype.m_genesis = null;
oFF.FdComponentResponsiveTableLayout.prototype.m_pagingLayout = null;
oFF.FdComponentResponsiveTableLayout.prototype.m_responsiveTable = null;
oFF.FdComponentResponsiveTableLayout.prototype.m_root = null;
oFF.FdComponentResponsiveTableLayout.prototype.m_scrollContainer = null;
oFF.FdComponentResponsiveTableLayout.prototype.addLabelledBy = function(control)
{
	this.m_responsiveTable.addLabelledBy(control);
};
oFF.FdComponentResponsiveTableLayout.prototype.addUserAvatar = function(container, item, text, showIdsInHoverTable)
{
	container.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	if (item.getType() === oFF.FilterDialogValueType.TEAM)
	{
		let avatarWidget = oFF.UtAvatarWidget.create(this.m_genesis, item.getIcon(), oFF.UiAvatarColor.ACCENT_6, oFF.UiAvatarSize.XS, () => {
			let popoverTable = this.m_genesis.newControl(oFF.UiType.RESPONSIVE_TABLE);
			popoverTable.setName("FilterDialogUserPopoverTable");
			popoverTable.setWidth(oFF.UiCssLength.create("250px"));
			let column = popoverTable.addNewResponsiveTableColumn();
			let headerLabel = column.setNewHeader(oFF.UiType.LABEL);
			headerLabel.setText(showIdsInHoverTable ? item.getDisplayKey() : item.getText());
			let spinnerRow = popoverTable.addNewResponsiveTableRow();
			let spinnerRowContainer = spinnerRow.addNewResponsiveTableCellOfType(oFF.UiType.FLEX_LAYOUT);
			spinnerRowContainer.setJustifyContent(oFF.UiFlexJustifyContent.CENTER);
			spinnerRowContainer.addNewItemOfType(oFF.UiType.ACTIVITY_INDICATOR);
			item.getUsers(this.m_genesis.getUiManager().getProcess()).onThen((userResult) => {
				spinnerRowContainer.clearItems();
				spinnerRowContainer.setJustifyContent(oFF.UiFlexJustifyContent.START);
				for (let i = 0; i < userResult.size(); i++)
				{
					let userInTeam = userResult.get(i);
					let userContainer = spinnerRowContainer;
					if (i > 0)
					{
						userContainer = popoverTable.addNewResponsiveTableRow().addNewResponsiveTableCellOfType(oFF.UiType.FLEX_LAYOUT);
					}
					userContainer.addItem(this.createAvatar(userInTeam.getIcon(), oFF.UiAvatarColor.ACCENT_7));
					let userLabel = userContainer.addNewItemOfType(oFF.UiType.LABEL);
					userLabel.setText(showIdsInHoverTable || oFF.XStringUtils.isNullOrEmpty(userInTeam.getText()) ? userInTeam.getDisplayKey() : userInTeam.getText());
					userLabel.setAlignSelf(oFF.UiFlexAlignSelf.CENTER);
					userLabel.setMargin(oFF.UiCssBoxEdges.create("0 0 0 1rem"));
				}
			});
			return popoverTable;
		});
		avatarWidget.setName("FilterDialogTeamAvatar");
		this.setSizeOfAvatar(avatarWidget.getView());
		avatarWidget.setPopoverPlacement(oFF.UiPlacementType.BOTTOM);
		container.addItem(avatarWidget.getView());
	}
	else
	{
		let avatar = this.createAvatar(item.getIcon(), oFF.UiAvatarColor.ACCENT_7);
		avatar.setName("FilterDialogUserAvatar");
		container.addItem(avatar);
	}
	let textLabel = container.addNewItemOfType(oFF.UiType.LABEL);
	textLabel.addCssClass("ffGdsFilterListItem");
	textLabel.setText(text);
	textLabel.setMargin(oFF.UiCssBoxEdges.create("0 0 0 1rem"));
};
oFF.FdComponentResponsiveTableLayout.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_genesis = genesis;
	this.m_scrollContainer = genesis.newControl(oFF.UiType.SCROLL_CONTAINER);
	this.m_scrollContainer.setName("FilterDialogTableScrollContainer");
	this.m_root = this.m_scrollContainer;
	this.m_responsiveTable = this.m_scrollContainer.setNewContent(oFF.UiType.RESPONSIVE_TABLE);
	this.m_responsiveTable.setName("FilterDialogTable");
	this.m_responsiveTable.setFlex("auto");
	this.m_responsiveTable.setColumnResize(true);
	this.m_responsiveTable.addNewResponsiveTableColumn();
	this.m_responsiveTable.setIncludeItemInSelection(true);
	if (oFF.notNull(this.m_pagingLayout))
	{
		this.m_scrollContainer.useMaxHeight();
		let verticalContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
		verticalContainer.setName("FilterDialogTableContainer");
		verticalContainer.setDirection(oFF.UiFlexDirection.COLUMN);
		verticalContainer.useMaxWidth();
		verticalContainer.setMinHeight(oFF.UiCssLength.create("200px"));
		verticalContainer.setFlex("auto");
		this.m_root = verticalContainer;
		verticalContainer.addItem(this.m_scrollContainer);
		verticalContainer.addItem(this.m_pagingLayout.getRoot());
	}
};
oFF.FdComponentResponsiveTableLayout.prototype.createAvatar = function(icon, color)
{
	let avatar = this.m_genesis.newControl(oFF.UiType.AVATAR);
	avatar.setIcon(icon);
	avatar.setAvatarColor(color);
	avatar.setAvatarSize(oFF.UiAvatarSize.XS);
	this.setSizeOfAvatar(avatar);
	return avatar;
};
oFF.FdComponentResponsiveTableLayout.prototype.disableRowClickBehavior = function()
{
	this.m_responsiveTable.setIncludeItemInSelection(false);
};
oFF.FdComponentResponsiveTableLayout.prototype.getRoot = function()
{
	return this.m_root;
};
oFF.FdComponentResponsiveTableLayout.prototype.getTable = function()
{
	return this.m_responsiveTable;
};
oFF.FdComponentResponsiveTableLayout.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_genesis = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_pagingLayout = null;
};
oFF.FdComponentResponsiveTableLayout.prototype.resizeComponent = function(size) {};
oFF.FdComponentResponsiveTableLayout.prototype.scrollToTop = function()
{
	this.m_scrollContainer.scrollTo(0, 0, 0);
};
oFF.FdComponentResponsiveTableLayout.prototype.setSizeOfAvatar = function(avatar)
{
	avatar.setSize(oFF.UiSize.createByCss("1.5rem", "1.5rem"));
	avatar.setMinWidth(oFF.UiCssLength.create("1.5rem"));
};
oFF.FdComponentResponsiveTableLayout.prototype.setSupportsSelectAll = function(supportsSelectAll)
{
	if (!supportsSelectAll)
	{
		this.m_responsiveTable.addCssClass("hideSelectAll");
	}
};

oFF.FdComponentTreeTable = function() {};
oFF.FdComponentTreeTable.prototype = new oFF.FdComponentAbstractTable();
oFF.FdComponentTreeTable.prototype._ff_c = "FdComponentTreeTable";

oFF.FdComponentTreeTable.PLACEHOLDER_NAME = "TreeTablePlaceholderItem";
oFF.FdComponentTreeTable.create = function(tableBasedView, model)
{
	let obj = new oFF.FdComponentTreeTable();
	obj.setupTableComponent(model, oFF.FdComponentTreeTableLayout.create(), tableBasedView);
	return obj;
};
oFF.FdComponentTreeTable.prototype.m_isLazyLoading = false;
oFF.FdComponentTreeTable.prototype.addVisibleChildRowsToList = function(parent, startIndex, result, maxResultSize)
{
	if (parent.getUiType().isTypeOf(oFF.UiType.TREE_TABLE) || parent.isExpanded())
	{
		let children = parent.getTreeTableRows();
		for (let i = startIndex; i < children.size(); i++)
		{
			let childRow = children.get(i);
			result.add(childRow);
			if (result.size() >= maxResultSize)
			{
				return;
			}
			this.addVisibleChildRowsToList(childRow, 0, result, maxResultSize);
			if (result.size() >= maxResultSize)
			{
				return;
			}
		}
	}
};
oFF.FdComponentTreeTable.prototype.buildOlapDialogUi = function(genesis)
{
	this.m_layout.buildOlapDialogUi(genesis);
	this.m_uiTable = oFF.FdUiTable.createTreeTable(this.m_layout);
	this.m_uiTable.registerOnSelectionChange(this);
	this.m_uiTable.registerOnExpand(this);
	this.m_uiTable.registerOnCollapse(this);
	this.m_uiTable.registerOnScroll(this);
};
oFF.FdComponentTreeTable.prototype.createChildRows = function(parentRow, items, presentations, useLazyLoading)
{
	let childRows = oFF.XList.create();
	if (oFF.XCollectionUtils.hasElements(items))
	{
		let size = useLazyLoading ? oFF.XMath.min(items.size(), this.m_model.getChildNodesPageSize()) : items.size();
		for (let i = 0; i < size; i++)
		{
			childRows.add(this.createRow(parentRow.newTreeTableRow(), items.get(i), presentations, useLazyLoading));
		}
	}
	return childRows;
};
oFF.FdComponentTreeTable.prototype.createPlaceholderRow = function()
{
	let placeholderRow = this.m_uiTable.newRow();
	placeholderRow.setName(oFF.FdComponentTreeTable.PLACEHOLDER_NAME);
	let placeholderCell = placeholderRow.newCell();
	placeholderCell.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_LOADING));
	placeholderRow.addCell(placeholderCell);
	return placeholderRow;
};
oFF.FdComponentTreeTable.prototype.createRow = function(row, fdItem, presentations, useLazyLoading)
{
	this.m_uiTable.addAllCells(row, this.createRowCells(row, fdItem, presentations));
	row.setCustomObject(fdItem);
	row.setName(fdItem.getName());
	if (fdItem.hasChildren())
	{
		let childItems = fdItem.getChildren();
		let childrenAlreadyLoaded = oFF.XCollectionUtils.hasElements(childItems);
		if (childrenAlreadyLoaded)
		{
			row.addAllTreeTableRows(this.createChildRows(row, row.getCustomObject().getChildren(), presentations, useLazyLoading));
		}
		if (!childrenAlreadyLoaded || useLazyLoading && childItems.size() > this.m_model.getChildNodesPageSize())
		{
			row.addTreeTableRow(this.createPlaceholderRow());
		}
	}
	return row;
};
oFF.FdComponentTreeTable.prototype.fetchChildren = function(parent, offset)
{
	let additionalPresentationValues = this.m_model.getPresentationsModel().getAdditionalPresentationValues(false);
	this.m_view.onFetchChildren(parent.getCustomObject(), offset, additionalPresentationValues, this.m_view, oFF.FdViewCustomIdentifier.creatForFetchChildrenByRow(parent));
};
oFF.FdComponentTreeTable.prototype.getVisibleRows = function(eventParameters)
{
	let result = oFF.XList.create();
	let firstVisibleRow = this.m_uiTable.getFirstVisibleRow();
	if (oFF.isNull(firstVisibleRow))
	{
		return result;
	}
	result.add(firstVisibleRow);
	let visibleRowCount = eventParameters.getIntegerByKey(oFF.UiEventParams.PARAM_CONFIGURED_ROW_COUNT);
	let childStartIndex = 0;
	let currentRow = firstVisibleRow;
	while (oFF.notNull(currentRow) && result.size() < visibleRowCount)
	{
		this.addVisibleChildRowsToList(currentRow, childStartIndex, result, visibleRowCount);
		if (!currentRow.getUiType().isTypeOf(oFF.UiType.TREE_TABLE_ROW))
		{
			break;
		}
		let parent = currentRow.getParent();
		if (oFF.notNull(parent))
		{
			childStartIndex = parent.getIndexOfTreeTableRow(currentRow) + 1;
		}
		currentRow = parent;
	}
	return result;
};
oFF.FdComponentTreeTable.prototype.isPlaceholderRow = function(row)
{
	return oFF.XString.isEqual(row.getName(), oFF.FdComponentTreeTable.PLACEHOLDER_NAME);
};
oFF.FdComponentTreeTable.prototype.lazyLoadNodes = function(eventParameters)
{
	if (this.m_isLazyLoading || this.m_uiTable.isBusy())
	{
		return;
	}
	let visibleRows = this.getVisibleRows(eventParameters);
	for (let i = 0; i < visibleRows.size(); i++)
	{
		let row = visibleRows.get(i);
		if (this.isPlaceholderRow(row))
		{
			let parent = row.getParent();
			if (oFF.notNull(parent) && parent.getUiType().isTypeOf(oFF.UiType.TREE_TABLE_ROW))
			{
				this.setBusy(true);
				let offset = parent.getTreeTableRows().size() - 1;
				this.fetchChildren(parent, offset);
				return;
			}
			else if (!this.m_view.isSearchActive() && this.m_model.hasNextPage())
			{
				this.setBusy(true);
				this.m_model.setPage(this.m_model.getPage() + 1);
				this.m_isLazyLoading = true;
				this.m_uiTable.removeRow(row);
				this.renderItems(this.m_model.getItemsOnCurrentPage(), this.m_view.getSelectedPresentations(), this.m_model.getSelectedItems());
				this.setBusy(false);
				return;
			}
		}
	}
};
oFF.FdComponentTreeTable.prototype.onCollapse = function(event)
{
	this.lazyLoadNodes(event.getParameters());
};
oFF.FdComponentTreeTable.prototype.onExpand = function(event)
{
	let selectedRow = event.getAffectedItem();
	let childRows = selectedRow.getTreeTableRows();
	if (oFF.XCollectionUtils.hasElements(childRows))
	{
		let renderedChildRowCount = childRows.size();
		if (renderedChildRowCount === 1 && this.isPlaceholderRow(childRows.get(0)))
		{
			this.setBusy(true);
			this.fetchChildren(selectedRow, 0);
		}
		else
		{
			this.updateRowStates(childRows, 0, true);
		}
	}
};
oFF.FdComponentTreeTable.prototype.onProcessFinished = function(items, messages, customIdentifier)
{
	let identifier = customIdentifier;
	if (identifier.isFetchChildrenIdentifier())
	{
		let requestingRow = identifier.getParentRow();
		if (!oFF.XCollectionUtils.hasElements(items))
		{
			requestingRow.collapse();
		}
		else
		{
			let indexOfLastRow = requestingRow.getTreeTableRows().size() - 1;
			requestingRow.addAllTreeTableRows(this.createChildRows(requestingRow, items, this.m_view.getSelectedPresentations().getValuesAsReadOnlyList(), true));
			let childRows = requestingRow.getTreeTableRows();
			if (this.isPlaceholderRow(childRows.get(0)))
			{
				requestingRow.removeTreeTableRow(childRows.get(0));
			}
			if (this.isPlaceholderRow(childRows.get(indexOfLastRow)))
			{
				requestingRow.removeTreeTableRow(childRows.get(indexOfLastRow));
			}
			if (items.size() > this.m_model.getChildNodesPageSize())
			{
				requestingRow.addTreeTableRow(this.createPlaceholderRow());
			}
			this.updateRowStates(childRows, 0, true);
		}
		this.setBusy(false);
		oFF.XObjectExt.release(customIdentifier);
	}
};
oFF.FdComponentTreeTable.prototype.onScroll = function(event)
{
	this.lazyLoadNodes(event.getParameters());
};
oFF.FdComponentTreeTable.prototype.onSearchChange = function(isSearchActive, searchText)
{
	if (!isSearchActive)
	{
		this.m_model.setPage(0);
	}
	oFF.FdComponentAbstractTable.prototype.onSearchChange.call( this , isSearchActive, searchText);
};
oFF.FdComponentTreeTable.prototype.refreshContent = function(refreshPresentationsOnly)
{
	if (this.m_model.isInitial() || !refreshPresentationsOnly)
	{
		this.m_view.onRefreshTree(refreshPresentationsOnly, null);
		return;
	}
	this.publishPresentations();
};
oFF.FdComponentTreeTable.prototype.renderItems = function(items, presentations, selectedItems)
{
	if (!this.m_isLazyLoading)
	{
		this.m_uiTable.clearRows();
		this.m_uiTable.clearSelectedItems();
		this.updateColumns(presentations.getKeysAsReadOnlyList());
	}
	let useLazyLoading = !this.m_view.isSearchActive();
	let rows = oFF.XList.create();
	let size = oFF.notNull(items) ? items.size() : 0;
	for (let i = 0; i < size; i++)
	{
		let item = items.get(i);
		if (item.isRootNode())
		{
			rows.add(this.createRow(this.m_uiTable.newRow(), item, presentations.getValuesAsReadOnlyList(), useLazyLoading));
		}
	}
	if (useLazyLoading && this.m_model.hasNextPage())
	{
		rows.add(this.createPlaceholderRow());
	}
	this.m_uiTable.addAllRows(rows);
	let expandToLevel = this.m_view.isSearchActive() ? -1 : this.m_model.getDefaultExpandLevel();
	this.updateRowStates(oFF.XCollectionUtils.map(this.m_uiTable.getRows(), (row) => {
		return row;
	}), expandToLevel, false);
	if (rows.hasElements() && !this.m_isLazyLoading)
	{
		this.m_uiTable.setFirstVisibleRow(rows.get(0));
	}
	this.m_isLazyLoading = false;
};
oFF.FdComponentTreeTable.prototype.updateRowStates = function(rows, expandToLevel, updateAllSelectionStates)
{
	this.m_uiTable.registerOnSelectionChange(null);
	let selection = this.m_model.getSelectedItems();
	let size = rows.size();
	for (let i = 0; i < size; i++)
	{
		let row = rows.get(i);
		if (!this.isPlaceholderRow(row))
		{
			let fdItem = row.getCustomObject();
			if (updateAllSelectionStates || selection.contains(fdItem))
			{
				row.setSelected(selection.contains(fdItem));
			}
			if ((expandToLevel === -1 || fdItem.getValueHelpNode().getAbsoluteLevel() < expandToLevel) && oFF.XCollectionUtils.hasElements(fdItem.getChildren()))
			{
				row.expand();
			}
		}
	}
	this.m_uiTable.registerOnSelectionChange(this);
};
oFF.FdComponentTreeTable.prototype.updateRows = function(rows, presentations)
{
	this.updateTreeTableRows(oFF.XCollectionUtils.map(rows, (row) => {
		return row;
	}), presentations);
};
oFF.FdComponentTreeTable.prototype.updateTreeTableRows = function(rows, presentations)
{
	if (oFF.XCollectionUtils.hasElements(rows))
	{
		let size = rows.size();
		for (let i = 0; i < size; i++)
		{
			let row = rows.get(i);
			if (!this.isPlaceholderRow(row))
			{
				row.clearCells();
				this.m_uiTable.addAllCells(row, this.createRowCells(row, row.getCustomObject(), presentations));
				this.updateTreeTableRows(row.getTreeTableRows(), presentations);
			}
		}
	}
};

oFF.FdComponentTreeTableLayout = function() {};
oFF.FdComponentTreeTableLayout.prototype = new oFF.XObject();
oFF.FdComponentTreeTableLayout.prototype._ff_c = "FdComponentTreeTableLayout";

oFF.FdComponentTreeTableLayout.create = function()
{
	return new oFF.FdComponentTreeTableLayout();
};
oFF.FdComponentTreeTableLayout.prototype.m_treeTable = null;
oFF.FdComponentTreeTableLayout.prototype.addLabelledBy = function(control)
{
	this.m_treeTable.addLabelledBy(control);
};
oFF.FdComponentTreeTableLayout.prototype.buildOlapDialogUi = function(genesis)
{
	let autoRowMode = oFF.UiRowMode.createAuto();
	autoRowMode.setMinRowCount(2);
	this.m_treeTable = genesis.newControl(oFF.UiType.TREE_TABLE);
	this.m_treeTable.setName("FilterDialogTree");
	this.m_treeTable.setRowMode(autoRowMode);
	this.m_treeTable.setSelectionBehavior(oFF.UiSelectionBehavior.ROW);
	this.m_treeTable.setFlex("auto");
	this.m_treeTable.addNewColumn();
};
oFF.FdComponentTreeTableLayout.prototype.getRoot = function()
{
	return this.m_treeTable;
};
oFF.FdComponentTreeTableLayout.prototype.getTable = function()
{
	return this.m_treeTable;
};
oFF.FdComponentTreeTableLayout.prototype.releaseObject = function()
{
	this.m_treeTable = oFF.XObjectExt.release(this.m_treeTable);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FdComponentTreeTableLayout.prototype.resizeComponent = function(size) {};

oFF.OuHierarchyDialogI18n = function() {};
oFF.OuHierarchyDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuHierarchyDialogI18n.prototype._ff_c = "OuHierarchyDialogI18n";

oFF.OuHierarchyDialogI18n.DESCRIPTION_COLUMN_TEXT = "FF_SHIER_DIALOG_DESCRIPTION_COLUMN_TEXT";
oFF.OuHierarchyDialogI18n.FLAT_REPRESENTATION_ITEM_LABEL = "FF_SHIER_DIALOG_FLAT_REPRESENTATION_ITEM_LABEL";
oFF.OuHierarchyDialogI18n.HIERARCHY_LABEL = "FF_SHIER_DIALOG_HIERARCHY_LABEL";
oFF.OuHierarchyDialogI18n.ID_COLUMN_TEXT = "FF_SHIER_DIALOG_ID_COLUMN_TEXT";
oFF.OuHierarchyDialogI18n.NO_DIMENSION_ERROR_LABEL = "FF_SHIER_DIALOG_NO_DIMENSION_ERROR_LABEL";
oFF.OuHierarchyDialogI18n.SELECT = "FF_SHIER_DIALOG_SELECT";
oFF.OuHierarchyDialogI18n.TITLE = "FF_SHIER_DIALOG_TITLE";
oFF.OuHierarchyDialogI18n.staticSetup = function()
{
	let tmpProvider = new oFF.OuHierarchyDialogI18n();
	tmpProvider.setupProvider(oFF.OuSelectHierarchyDialog.DEFAULT_PROGRAM_NAME, true);
	tmpProvider.addText(oFF.OuHierarchyDialogI18n.TITLE, "Select Hierarchy");
	tmpProvider.addComment(oFF.OuHierarchyDialogI18n.TITLE, "#XTIT: Title of Select Hierarchy dialog");
	tmpProvider.addTextWithComment(oFF.OuHierarchyDialogI18n.SELECT, "Select", "#XBUT: Button text to confirm selection of a hierarchy");
	tmpProvider.addText(oFF.OuHierarchyDialogI18n.HIERARCHY_LABEL, "Hierarchy");
	tmpProvider.addComment(oFF.OuHierarchyDialogI18n.HIERARCHY_LABEL, "#XFLD: Label displayed beside drop down Hierarchy");
	tmpProvider.addText(oFF.OuHierarchyDialogI18n.FLAT_REPRESENTATION_ITEM_LABEL, "Flat presentation");
	tmpProvider.addComment(oFF.OuHierarchyDialogI18n.FLAT_REPRESENTATION_ITEM_LABEL, "#XMIT: String representing Flat presentation menu item");
	tmpProvider.addTextWithComment(oFF.OuHierarchyDialogI18n.ID_COLUMN_TEXT, "ID", "#XTIT: Table column title, short for Identifier");
	tmpProvider.addTextWithComment(oFF.OuHierarchyDialogI18n.DESCRIPTION_COLUMN_TEXT, "Description", "#XTIT: Table column title");
	tmpProvider.addText(oFF.OuHierarchyDialogI18n.NO_DIMENSION_ERROR_LABEL, "Dimension must be selected for hierarchy dialog to initialize.");
	tmpProvider.addComment(oFF.OuHierarchyDialogI18n.NO_DIMENSION_ERROR_LABEL, "#XMSG: Message displayed as error toast when dimension is not initialized");
	return tmpProvider;
};

oFF.LayoutDialogI18n = function() {};
oFF.LayoutDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.LayoutDialogI18n.prototype._ff_c = "LayoutDialogI18n";

oFF.LayoutDialogI18n.I18N_LD_ABOVE = "I18N_LD_ABOVE";
oFF.LayoutDialogI18n.I18N_LD_ABOVE_AND_BELOW = "I18N_LD_ABOVE_AND_BELOW";
oFF.LayoutDialogI18n.I18N_LD_ABOVE_AND_BELOW_SHORT = "I18N_LD_ABOVE_AND_BELOW_SHORT";
oFF.LayoutDialogI18n.I18N_LD_ALLOW_INPUT = "I18N_LD_ALLOW_INPUT";
oFF.LayoutDialogI18n.I18N_LD_BELOW = "I18N_LD_BELOW";
oFF.LayoutDialogI18n.I18N_LD_COLUMNS = "I18N_LD_COLUMNS";
oFF.LayoutDialogI18n.I18N_LD_COLUMN_LIMIT = "I18N_LD_COLUMN_LIMIT";
oFF.LayoutDialogI18n.I18N_LD_DISPLAY_HIERARCHICALLY = "I18N_LD_DISPLAY_HIERARCHICALLY";
oFF.LayoutDialogI18n.I18N_LD_FREE_AXIS = "I18N_LD_FREE_AXIS";
oFF.LayoutDialogI18n.I18N_LD_GRID_CONFIG = "I18N_LD_GRID_CONFIG";
oFF.LayoutDialogI18n.I18N_LD_HIDE_FREE = "I18N_LD_HIDE_FREE";
oFF.LayoutDialogI18n.I18N_LD_MOVE_BOTTOM = "I18N_LD_MOVE_BOTTOM";
oFF.LayoutDialogI18n.I18N_LD_MOVE_DOWN = "I18N_LD_MOVE_DOWN";
oFF.LayoutDialogI18n.I18N_LD_MOVE_TOP = "I18N_LD_MOVE_TOP";
oFF.LayoutDialogI18n.I18N_LD_MOVE_TO_COLUMNS = "I18N_LD_MOVE_TO_COLUMNS";
oFF.LayoutDialogI18n.I18N_LD_MOVE_TO_ROWS = "I18N_LD_MOVE_TO_ROWS";
oFF.LayoutDialogI18n.I18N_LD_MOVE_UP = "I18N_LD_MOVE_UP";
oFF.LayoutDialogI18n.I18N_LD_POSITION_OF_TOTALS = "I18N_LD_POSITION_OF_TOTALS";
oFF.LayoutDialogI18n.I18N_LD_PROPERTIES = "I18N_LD_PROPERTIES";
oFF.LayoutDialogI18n.I18N_LD_REMOVE_FROM_LAYOUT = "I18N_LD_REMOVE_FROM_LAYOUT";
oFF.LayoutDialogI18n.I18N_LD_ROWS = "I18N_LD_ROWS";
oFF.LayoutDialogI18n.I18N_LD_ROW_LIMIT = "I18N_LD_ROW_LIMIT";
oFF.LayoutDialogI18n.I18N_LD_SELECT_FILTER = "I18N_LD_SELECT_FILTER";
oFF.LayoutDialogI18n.I18N_LD_SHOW_FREE = "I18N_LD_SHOW_FREE";
oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_ALL_NULL = "I18N_LD_SUPPRESSION_ALL_NULL";
oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_ALL_ZERO = "I18N_LD_SUPPRESSION_ALL_ZERO";
oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_NONE = "I18N_LD_SUPPRESSION_NONE";
oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_TOTALS_ZERO = "I18N_LD_SUPPRESSION_TOTALS_ZERO";
oFF.LayoutDialogI18n.I18N_LD_TECHNICAL = "I18N_LD_TECHNICAL";
oFF.LayoutDialogI18n.I18N_LD_USE_DEFAULT_SETTING = "I18N_LD_USE_DEFAULT_SETTING";
oFF.LayoutDialogI18n.I18N_LD_ZERO_SUPPRESSION = "I18N_LD_ZERO_SUPPRESSION";
oFF.LayoutDialogI18n.LOCA_NAME = "LayoutDialogI18n";
oFF.LayoutDialogI18n.getLocalization = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName(oFF.LayoutDialogI18n.LOCA_NAME);
};
oFF.LayoutDialogI18n.staticSetup = function()
{
	let provider = new oFF.LayoutDialogI18n();
	provider.setupProvider(oFF.LayoutDialogI18n.LOCA_NAME, false);
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_COLUMNS, "Columns");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ROWS, "Rows");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_FREE_AXIS, "Free Axis");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_MOVE_TO_COLUMNS, "Move to Columns");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_MOVE_TO_ROWS, "Move to Rows");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_REMOVE_FROM_LAYOUT, "Remove From Layout");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_GRID_CONFIG, "Grid");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_COLUMN_LIMIT, "Column Limit");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ROW_LIMIT, "Row Limit");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ALLOW_INPUT, "Allow Input");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_DISPLAY_HIERARCHICALLY, "Display Hierarchically");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_PROPERTIES, "Properties");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_SELECT_FILTER, "Select Filter");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_TOTALS_ZERO, "Suppress if totals are zero");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_ALL_ZERO, "Suppress if all values are zero");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_ALL_NULL, "Suppress if all values are null");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_SUPPRESSION_NONE, "Don't suppress zeros");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_MOVE_BOTTOM, "Move Item to Bottom");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_MOVE_DOWN, "Move Down Item by 1");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_MOVE_UP, "Move Up Item by 1");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_MOVE_TOP, "Move Item to Top");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ZERO_SUPPRESSION, "Suppress Zeros/Nulls");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_USE_DEFAULT_SETTING, "Use Default Setting");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_POSITION_OF_TOTALS, "Position of Totals");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ABOVE, "Above");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ABOVE_AND_BELOW, "Above And Below");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_ABOVE_AND_BELOW_SHORT, "A + B");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_BELOW, "Below");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_TECHNICAL, "Show Technical Names");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_SHOW_FREE, "Show Dimensions on Free Axis");
	provider.addText(oFF.LayoutDialogI18n.I18N_LD_HIDE_FREE, "Hide Dimensions on Free Axis");
	return provider;
};

oFF.OuMeasureDimensionConfigDialogI18n = function() {};
oFF.OuMeasureDimensionConfigDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuMeasureDimensionConfigDialogI18n.prototype._ff_c = "OuMeasureDimensionConfigDialogI18n";

oFF.OuMeasureDimensionConfigDialogI18n.I18N_PROGRAM_TITLE = "FF_CONFIG_DIALOG_TITLE";
oFF.OuMeasureDimensionConfigDialogI18n.staticSetup = function()
{
	let provider = new oFF.OuMeasureDimensionConfigDialogI18n();
	provider.setupProvider(oFF.OuMeasureDimensionConfigDialog.DEFAULT_PROGRAM_NAME, false);
	provider.addComment(oFF.OuMeasureDimensionConfigDialogI18n.I18N_PROGRAM_TITLE, "#XTIT: The title of the dialog.");
	provider.addText(oFF.OuMeasureDimensionConfigDialogI18n.I18N_PROGRAM_TITLE, "Measure and Dimension Configuration");
	return provider;
};

oFF.OuQueryInformationDialogI18n = function() {};
oFF.OuQueryInformationDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuQueryInformationDialogI18n.prototype._ff_c = "OuQueryInformationDialogI18n";

oFF.OuQueryInformationDialogI18n.ANALYTIC_MODEL_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_ANALYTIC_MODEL_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.BW_QUERY_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_BW_QUERY_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.CALC_VIEW_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_CALC_VIEW_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.DATASPHERE_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_DATASPHERE_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.DIALOG_TITLE = "FF_QUERY_INFO_DIALOG_TITLE";
oFF.OuQueryInformationDialogI18n.FALLBACK_MODEL_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_FALLBACK_MODEL_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.GENERAL_TAB_DESC_LABEL = "FF_QUERY_INFO_DIALOG_GENERAL_TAB_DESC_LABEL";
oFF.OuQueryInformationDialogI18n.GENERAL_TAB_HEADER = "FF_QUERY_INFO_DIALOG_GENERAL_TAB_HEADER";
oFF.OuQueryInformationDialogI18n.GENERAL_TAB_NAME_LABEL = "FF_QUERY_INFO_DIALOG_GENERAL_TAB_NAME_LABEL";
oFF.OuQueryInformationDialogI18n.IBP_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_IBP_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.INFO_PROVIDER_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_INFO_PROVIDER_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_DATE_LABEL = "FF_QUERY_INFO_DIALOG_LAST_UPDATED_SECTION_DATE_LABEL";
oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_LAST_UPDATED_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.PINNED_TO_STORY_LINK_HEADER = "FF_QUERY_INFO_DIALOG_PINNED_TO_STORY_LINK_HEADER";
oFF.OuQueryInformationDialogI18n.PLANNING_MODEL_SECTION_HEADER = "FF_QUERY_INFO_DIALOG_PLANNING_MODEL_SECTION_HEADER";
oFF.OuQueryInformationDialogI18n.VARIABLES_NODE_TEXT = "FF_QUERY_INFO_DIALOG_VARIABLES_NODE_TEXT";
oFF.OuQueryInformationDialogI18n.VARIABLES_TAB_HEADER = "FF_QUERY_INFO_DIALOG_VARIABLES_TAB_HEADER";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GTE_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_GTE_TEMPLATE";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GT_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_GT_TEMPLATE";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LTE_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_LTE_TEMPLATE";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LT_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_LT_TEMPLATE";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NE_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_NE_TEMPLATE";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NOT_IN_RANGE_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_NOT_IN_RANGE_TEMPLATE";
oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_RANGE_TEMPLATE = "FF_QUERY_INFO_DIALOG_VARIABLE_VALUE_RANGE_TEMPLATE";
oFF.OuQueryInformationDialogI18n.staticSetup = function()
{
	let tmpProvider = new oFF.OuQueryInformationDialogI18n();
	tmpProvider.setupProvider(oFF.OuQueryInformationDialog.DEFAULT_PROGRAM_NAME, true);
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.DIALOG_TITLE, "Information");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.DIALOG_TITLE, "#XTIT: The title of the information dialog");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_HEADER, "General");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_HEADER, "#XFLD: General tab header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_NAME_LABEL, "Name:");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_NAME_LABEL, "#XFLD: Datasource name label");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_DESC_LABEL, "Description:");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_DESC_LABEL, "#XFLD: Datasource description label");
	tmpProvider.addTextWithComment(oFF.OuQueryInformationDialogI18n.DATASPHERE_SECTION_HEADER, "Datasphere", "#XTIT: Datasphere section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.BW_QUERY_SECTION_HEADER, "Query");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.BW_QUERY_SECTION_HEADER, "#XTIT: Query section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.IBP_SECTION_HEADER, "IBP model");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.IBP_SECTION_HEADER, "#XTIT: IBP view section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.CALC_VIEW_SECTION_HEADER, "HANA View");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.CALC_VIEW_SECTION_HEADER, "#XTIT: HANA view section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.ANALYTIC_MODEL_SECTION_HEADER, "Model (Analytic)");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.ANALYTIC_MODEL_SECTION_HEADER, "#XTIT: SAC Analytic model section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.PLANNING_MODEL_SECTION_HEADER, "Model (Planning)");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.PLANNING_MODEL_SECTION_HEADER, "#XTIT: SAC Planning model section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.FALLBACK_MODEL_SECTION_HEADER, "Model");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.FALLBACK_MODEL_SECTION_HEADER, "#XTIT: Fallback model section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.INFO_PROVIDER_SECTION_HEADER, "Information Provider");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.INFO_PROVIDER_SECTION_HEADER, "#XTIT: Info provider section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.PINNED_TO_STORY_LINK_HEADER, "Pinned to Story");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.PINNED_TO_STORY_LINK_HEADER, "#XTIT: Pinned to story section header");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_HEADER, "Last Data Update (UTC)");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_HEADER, "#XTIT: Last data update section header. Note - important to show to customer that it's UTC (customer incident).");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_DATE_LABEL, "Date:");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_DATE_LABEL, "#XFLD: Last updated label");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLES_TAB_HEADER, "Variables ({0})");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLES_TAB_HEADER, "#XTIT: Variables tab header, {0} is number of variables");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLES_NODE_TEXT, "{0} ({1})");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLES_NODE_TEXT, "#XTIT: Variable node title, {0} is variable name, {0} is number of variable values");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_RANGE_TEMPLATE, "[ ] {0} - {1}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_RANGE_TEMPLATE, "#XSEL: Range template, {0} is low, {1} is high");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GT_TEMPLATE, "> {0}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GT_TEMPLATE, "#XSEL: Greater than template, {0} is value");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GTE_TEMPLATE, ">= {0}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GTE_TEMPLATE, "#XSEL: Greater than or equal to template, {0} is value");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LT_TEMPLATE, "< {0}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LT_TEMPLATE, "#XSEL: Less than template, {0} is value");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LTE_TEMPLATE, "<= {0}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LTE_TEMPLATE, "#XSEL: Less than or equal to template, {0} is value");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NE_TEMPLATE, "\u2260 {0}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NE_TEMPLATE, "#XSEL: Not equal to template, {0} is value");
	tmpProvider.addText(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NOT_IN_RANGE_TEMPLATE, "![ ] {0} - {1}");
	tmpProvider.addComment(oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NOT_IN_RANGE_TEMPLATE, "#XSEL: Not in range template, {0} is low, {1} is high");
	return tmpProvider;
};

oFF.OuShareDialogI18n = function() {};
oFF.OuShareDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuShareDialogI18n.prototype._ff_c = "OuShareDialogI18n";

oFF.OuShareDialogI18n.ACCESS = "FF_SHARE_DIALOG_ACCESS";
oFF.OuShareDialogI18n.ACCESS_ERROR = "FF_SHARE_DIALOG_ACCESS_ERROR";
oFF.OuShareDialogI18n.ACCESS_TOOLTIP = "FF_SHARE_DIALOG_ACCESS_TOOLTIP";
oFF.OuShareDialogI18n.ADD_COMMENT = "FF_SHARE_DIALOG_ADD_COMMENT";
oFF.OuShareDialogI18n.ALL_USERS = "FF_SHARE_DIALOG_ALL_USERS";
oFF.OuShareDialogI18n.CLEAR_SELECTION_BUTTON = "FF_SHARE_DIALOG_CLEAR_SELECTION";
oFF.OuShareDialogI18n.COPY = "FF_SHARE_DIALOG_COPY";
oFF.OuShareDialogI18n.CUSTOM_ACCESS_TITLE = "FF_SHARE_DIALOG_CUSTOM_ACCESS_TITLE";
oFF.OuShareDialogI18n.CUSTOM_ACCESS_TYPE = "FF_SHARE_DIALOG_CUSTOM_ACCESS";
oFF.OuShareDialogI18n.DELETE = "FF_SHARE_DIALOG_DELETE";
oFF.OuShareDialogI18n.DELETE_COMMENT = "FF_SHARE_DIALOG_DELETE_COMMENT";
oFF.OuShareDialogI18n.DIALOG_TITLE = "FF_SHARE_DIALOG_TITLE";
oFF.OuShareDialogI18n.DISPLAY = "FF_SHARE_DIALOG_SORT_DISPLAY";
oFF.OuShareDialogI18n.DISPLAY_NAME = "FF_SHARE_DIALOG_DISPLAY_NAME";
oFF.OuShareDialogI18n.EDIT_ACCESS_TYPE = "FF_SHARE_DIALOG_EDIT_ACCESS";
oFF.OuShareDialogI18n.EMAIL_CHECKBOX_LABEL = "FF_SHARE_DIALOG_EMAIL_CHECKBOX";
oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR = "FF_SHARE_DIALOG_FETCH_MEMBER_ERROR";
oFF.OuShareDialogI18n.FILE_ERROR = "FF_SHARE_DIALOG_FILE_ERROR";
oFF.OuShareDialogI18n.FULL_ACCESS_TYPE = "FF_SHARE_DIALOG_FULL_ACCESS";
oFF.OuShareDialogI18n.ID = "FF_SHARE_DIALOG_ID";
oFF.OuShareDialogI18n.ID_AND_NAME = "FF_SHARE_DIALOG_ID_NAME";
oFF.OuShareDialogI18n.LINK_ERROR = "FF_SHARE_DIALOG_LINK_ERROR";
oFF.OuShareDialogI18n.LINK_SECTION_HEADER = "FF_SHARE_LINK_SECTION_HEADER";
oFF.OuShareDialogI18n.MEMBER_SELECTOR_TITLE = "FF_SHARE_DIALOG_MEMBER_SELECTOR_TITLE";
oFF.OuShareDialogI18n.MULTI_INPUT_HEADER = "FF_SHARE_DIALOG_MULTI_INPUT_HEADER";
oFF.OuShareDialogI18n.MULTI_INPUT_TOOLTIP = "FF_SHARE_DIALOG_MULTI_INPUT_TOOLTIP";
oFF.OuShareDialogI18n.NAME = "FF_SHARE_DIALOG_NAME";
oFF.OuShareDialogI18n.NEXT_PAGE = "FF_SHARE_DIALOG_NEXT_PAGE";
oFF.OuShareDialogI18n.NO_USER_ENTERED_ERROR = "FF_SHARE_DIALOG_NO_USER_ENTERED_ERROR";
oFF.OuShareDialogI18n.OF = "FF_SHARE_DIALOG_OF";
oFF.OuShareDialogI18n.OWNER = "FF_SHARE_DIALOG_OWNER";
oFF.OuShareDialogI18n.OWNER_ERROR = "FF_SHARE_DIALOG_OWNER_ERROR";
oFF.OuShareDialogI18n.PREVIOUS_PAGE = "FF_SHARE_DIALOG_PREVIOUS_PAGE";
oFF.OuShareDialogI18n.READ = "FF_SHARE_DIALOG_READ";
oFF.OuShareDialogI18n.SEARCH = "FF_SHARE_DIALOG_SEARCH";
oFF.OuShareDialogI18n.SELECTED_USERS = "FF_SHARE_DIALOG_SELECTED_USERS";
oFF.OuShareDialogI18n.SETTINGS = "FF_SHARE_DIALOG_SETTINGS";
oFF.OuShareDialogI18n.SHARE = "FF_SHARE_DIALOG_SHARE";
oFF.OuShareDialogI18n.SHARED_WITH_ALL_USERS = "FF_SHARE_DIALOG_SHARED_WITH_ALL_USERS";
oFF.OuShareDialogI18n.SHARED_WITH_TEAM = "FF_SHARE_DIALOG_SHARED_WITH_TEAM";
oFF.OuShareDialogI18n.SHARED_WITH_TEAMS = "FF_SHARE_DIALOG_SHARED_WITH_TEAMS";
oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_ALL_USERS = "FF_SHARE_DIALOG_SHARED_WITH_TEAMS_AND_ALL_USERS";
oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USER = "FF_SHARE_DIALOG_SHARED_WITH_TEAMS_AND_USER";
oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USERS = "FF_SHARE_DIALOG_SHARED_WITH_TEAMS_AND_USERS";
oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_ALL_USERS = "FF_SHARE_DIALOG_SHARED_WITH_TEAM_AND_ALL_USERS";
oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USER = "FF_SHARE_DIALOG_SHARED_WITH_TEAM_AND_USER";
oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USERS = "FF_SHARE_DIALOG_SHARED_WITH_TEAM_AND_USERS";
oFF.OuShareDialogI18n.SHARED_WITH_USER = "FF_SHARE_DIALOG_SHARED_WITH_USER";
oFF.OuShareDialogI18n.SHARED_WITH_USERS = "FF_SHARE_DIALOG_SHARED_WITH_USERS";
oFF.OuShareDialogI18n.SHARE_ERROR = "FF_SHARE_DIALOG_SHARE_ERROR";
oFF.OuShareDialogI18n.SHARE_SUCCESS = "FF_SHARE_DIALOG_SHARE_SUCCESS";
oFF.OuShareDialogI18n.SORT_ASCENDING = "FF_SHARE_DIALOG_SORT_ASCENDING";
oFF.OuShareDialogI18n.SORT_DEFAULT = "FF_SHARE_DIALOG_SORT_DEFAULT";
oFF.OuShareDialogI18n.SORT_DESCENDING = "FF_SHARE_DIALOG_SORT_DESCENDING";
oFF.OuShareDialogI18n.UPDATE = "FF_SHARE_DIALOG_UPDATE";
oFF.OuShareDialogI18n.USERS = "FF_SHARE_DIALOG_USERS";
oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE = "FF_SHARE_DIALOG_VIEW_ACCESS";
oFF.OuShareDialogI18n.VIEW_COMMENT = "FF_SHARE_DIALOG_VIEW_COMMENT";
oFF.OuShareDialogI18n.getCommonProvider = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName("CommonProvider");
};
oFF.OuShareDialogI18n.getProvider = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName("ShareDialog");
};
oFF.OuShareDialogI18n.staticSetup = function()
{
	let tmpProvider = new oFF.OuShareDialogI18n();
	tmpProvider.setupProvider(oFF.OuShareDialog.DEFAULT_PROGRAM_NAME, true);
	tmpProvider.addText(oFF.OuShareDialogI18n.DIALOG_TITLE, "Share Insight");
	tmpProvider.addComment(oFF.OuShareDialogI18n.DIALOG_TITLE, "#XHED: The title of the share dialog");
	tmpProvider.addText(oFF.OuShareDialogI18n.LINK_SECTION_HEADER, "Link:");
	tmpProvider.addComment(oFF.OuShareDialogI18n.LINK_SECTION_HEADER, "#XHED: Link");
	tmpProvider.addText(oFF.OuShareDialogI18n.MULTI_INPUT_HEADER, "Add Users or Teams:");
	tmpProvider.addComment(oFF.OuShareDialogI18n.MULTI_INPUT_HEADER, "#XFLD: The label of the multi input box");
	tmpProvider.addText(oFF.OuShareDialogI18n.MULTI_INPUT_TOOLTIP, "Add Users or Teams");
	tmpProvider.addComment(oFF.OuShareDialogI18n.MULTI_INPUT_TOOLTIP, "#XTOL: The tooltip of the multi input box");
	tmpProvider.addText(oFF.OuShareDialogI18n.ACCESS, "Access:");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ACCESS, "#XFLD: the label for the access dropdown");
	tmpProvider.addText(oFF.OuShareDialogI18n.ACCESS_TOOLTIP, "Access");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ACCESS_TOOLTIP, "#XTOL: the tooltip for the access dropdown button");
	tmpProvider.addText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE, "View");
	tmpProvider.addComment(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE, "#XMIT: Access type for dropdown");
	tmpProvider.addText(oFF.OuShareDialogI18n.EDIT_ACCESS_TYPE, "Edit");
	tmpProvider.addComment(oFF.OuShareDialogI18n.EDIT_ACCESS_TYPE, "#XMIT: Access type for dropdown");
	tmpProvider.addText(oFF.OuShareDialogI18n.FULL_ACCESS_TYPE, "Full Control");
	tmpProvider.addComment(oFF.OuShareDialogI18n.FULL_ACCESS_TYPE, "#XMIT: Access type for dropdown");
	tmpProvider.addText(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TYPE, "Custom...");
	tmpProvider.addComment(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TYPE, "#XMIT: Access type for dropdown");
	tmpProvider.addText(oFF.OuShareDialogI18n.EMAIL_CHECKBOX_LABEL, "Email new recipients");
	tmpProvider.addComment(oFF.OuShareDialogI18n.EMAIL_CHECKBOX_LABEL, "#XFLD: text for email checkbox");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARE, "Share");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARE, "#XBUT: share button");
	tmpProvider.addText(oFF.OuShareDialogI18n.NO_USER_ENTERED_ERROR, "Please enter or select an existing user.");
	tmpProvider.addComment(oFF.OuShareDialogI18n.NO_USER_ENTERED_ERROR, "#XTXT: error message when no user is entered");
	tmpProvider.addText(oFF.OuShareDialogI18n.SEARCH, "Search");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SEARCH, "#XFLD: Search input field");
	tmpProvider.addText(oFF.OuShareDialogI18n.NAME, "Name:");
	tmpProvider.addComment(oFF.OuShareDialogI18n.NAME, "#XCOL: Header for table column");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM, "Shared with 1 Team");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAM, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS, "Shared with {0} Teams");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_USER, "Shared with 1 User");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_USER, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_USERS, "Shared with {0} Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_USERS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_ALL_USERS, "Shared with All Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_ALL_USERS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USER, "Shared with 1 Team and 1 User");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USER, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USER, "Shared with {0} Teams and 1 User");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USER, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USERS, "Shared with 1 Team and {0} Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_USERS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_ALL_USERS, "Shared with 1 Team and All Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAM_AND_ALL_USERS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USERS, "Shared with {0} Teams and {1} Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_USERS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_ALL_USERS, "Shared with {0} Teams and All Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARED_WITH_TEAMS_AND_ALL_USERS, "#XFLD: Label for table of shared users/teams");
	tmpProvider.addText(oFF.OuShareDialogI18n.OWNER, "Owner");
	tmpProvider.addComment(oFF.OuShareDialogI18n.OWNER, "#XTXT: Owner access field");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARE_SUCCESS, "Sharing settings for the selected item(s) have been updated");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARE_SUCCESS, "#XTOL: share success text");
	tmpProvider.addText(oFF.OuShareDialogI18n.SHARE_ERROR, "Cannot share the content. Please check that it exists and that you have permission to share it.");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SHARE_ERROR, "#XMSG: Message shown backend error occurs and we are unable to share");
	tmpProvider.addText(oFF.OuShareDialogI18n.ACCESS_ERROR, "Can't fetch sharing information. Please try again....");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ACCESS_ERROR, "#XMSG: Message shown when failed to fetch sharing information when opening the sharing dialog");
	tmpProvider.addText(oFF.OuShareDialogI18n.SETTINGS, "Settings");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SETTINGS, "#XHED: settings table title");
	tmpProvider.addText(oFF.OuShareDialogI18n.SELECTED_USERS, "Selected Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SELECTED_USERS, "#XHED: selected user list title");
	tmpProvider.addText(oFF.OuShareDialogI18n.MEMBER_SELECTOR_TITLE, "Select Users and Teams");
	tmpProvider.addComment(oFF.OuShareDialogI18n.MEMBER_SELECTOR_TITLE, "#XHED: member selector popup title");
	tmpProvider.addText(oFF.OuShareDialogI18n.DISPLAY, "Display:");
	tmpProvider.addComment(oFF.OuShareDialogI18n.DISPLAY, "#XTXT: display type text");
	tmpProvider.addText(oFF.OuShareDialogI18n.ID_AND_NAME, "ID and Name");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ID_AND_NAME, "#XMIT: user display type");
	tmpProvider.addText(oFF.OuShareDialogI18n.ID, "ID");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ID, "#XMIT: user display type");
	tmpProvider.addText(oFF.OuShareDialogI18n.DISPLAY_NAME, "Name");
	tmpProvider.addComment(oFF.OuShareDialogI18n.DISPLAY_NAME, "#XMIT: user display type");
	tmpProvider.addText(oFF.OuShareDialogI18n.ALL_USERS, "All Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ALL_USERS, "#XTXT: all users text");
	tmpProvider.addText(oFF.OuShareDialogI18n.USERS, "Users");
	tmpProvider.addComment(oFF.OuShareDialogI18n.USERS, "#XTXT: users checkbox text");
	tmpProvider.addText(oFF.OuShareDialogI18n.CLEAR_SELECTION_BUTTON, "Clear selection");
	tmpProvider.addComment(oFF.OuShareDialogI18n.CLEAR_SELECTION_BUTTON, "#XBUT: clear all selected users button");
	tmpProvider.addText(oFF.OuShareDialogI18n.PREVIOUS_PAGE, "Previous Page");
	tmpProvider.addComment(oFF.OuShareDialogI18n.PREVIOUS_PAGE, "#XBUT: Previous Page Button text");
	tmpProvider.addText(oFF.OuShareDialogI18n.NEXT_PAGE, "Next Page");
	tmpProvider.addComment(oFF.OuShareDialogI18n.NEXT_PAGE, "#XBUT: Next Page Button text");
	tmpProvider.addText(oFF.OuShareDialogI18n.OF, "of");
	tmpProvider.addComment(oFF.OuShareDialogI18n.OF, "#XTXT: of");
	tmpProvider.addText(oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR, "There are no results for the searched member in the description section. It might be a fallback. Please try to search with ID.");
	tmpProvider.addComment(oFF.OuShareDialogI18n.FETCH_MEMBER_ERROR, "#XTOL: error fetching users message");
	tmpProvider.addText(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TITLE, "Set Custom Access");
	tmpProvider.addComment(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TITLE, "#XHED: Custom Access Popup Title");
	tmpProvider.addText(oFF.OuShareDialogI18n.READ, "Read");
	tmpProvider.addComment(oFF.OuShareDialogI18n.READ, "#XFLD: read access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.COPY, "Copy");
	tmpProvider.addComment(oFF.OuShareDialogI18n.COPY, "#XFLD: copy access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.VIEW_COMMENT, "View Comment");
	tmpProvider.addComment(oFF.OuShareDialogI18n.VIEW_COMMENT, "#XFLD: view comment access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.ADD_COMMENT, "Add Comment");
	tmpProvider.addComment(oFF.OuShareDialogI18n.ADD_COMMENT, "#XFLD: add comment access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.UPDATE, "Update");
	tmpProvider.addComment(oFF.OuShareDialogI18n.UPDATE, "#XFLD: update access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.DELETE, "Delete");
	tmpProvider.addComment(oFF.OuShareDialogI18n.DELETE, "#XFLD: delete access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.DELETE_COMMENT, "Delete Comment");
	tmpProvider.addComment(oFF.OuShareDialogI18n.DELETE_COMMENT, "#XFLD: delete comment access option");
	tmpProvider.addText(oFF.OuShareDialogI18n.SORT_ASCENDING, "Sort Ascending");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SORT_ASCENDING, "#XFLD: sort ascending option");
	tmpProvider.addText(oFF.OuShareDialogI18n.SORT_DESCENDING, "Sort Descending");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SORT_DESCENDING, "#XFLD: sort descending option");
	tmpProvider.addText(oFF.OuShareDialogI18n.SORT_DEFAULT, "Default");
	tmpProvider.addComment(oFF.OuShareDialogI18n.SORT_DEFAULT, "#XFLD: sort default option");
	tmpProvider.addText(oFF.OuShareDialogI18n.LINK_ERROR, "An error occurred when fetching the resource link");
	tmpProvider.addComment(oFF.OuShareDialogI18n.LINK_ERROR, "#XMSG: Message shown when failed to create link");
	tmpProvider.addText(oFF.OuShareDialogI18n.FILE_ERROR, "An error occurred when fetching the file");
	tmpProvider.addComment(oFF.OuShareDialogI18n.FILE_ERROR, "#XMSG: Message shown when failed to fetch file");
	tmpProvider.addText(oFF.OuShareDialogI18n.OWNER_ERROR, "An error occurred when fetching the owner of the resource");
	tmpProvider.addComment(oFF.OuShareDialogI18n.OWNER_ERROR, "#XMSG: Message shown when failed to fetch owner");
	return tmpProvider;
};

oFF.OuTopNDialogI18n = function() {};
oFF.OuTopNDialogI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuTopNDialogI18n.prototype._ff_c = "OuTopNDialogI18n";

oFF.OuTopNDialogI18n.BASED_ON_SECTION_TITLE = "FF_TOPN__BASED_ON_SECTION__TITLE";
oFF.OuTopNDialogI18n.INFORMATON_MESSAGE = "FF_TOPN__INFORMATION_MESSAGE";
oFF.OuTopNDialogI18n.MEASURES_INPUTFIELD_TITLE = "FF_TOPN__MEASURSES_INPUTFIELD__TITLE";
oFF.OuTopNDialogI18n.MEASURE_VALUE_VALIDATION_MESSAGE = "FF_TOPN__MEASURE_VALUE__VALIDATION_MESSAGE";
oFF.OuTopNDialogI18n.MEMBER_SELECTOR_DIALOG_TITLE = "FF_TOPN_MEMBER_SELECTOR_DIALOG_TITLE";
oFF.OuTopNDialogI18n.N_VALUE_TITLE = "FF_TOPN__N_VALUE__TITLE";
oFF.OuTopNDialogI18n.N_VALUE_VALIDATION_MESSAGE = "FF_TOPN__N_VALUE__VALIDATION_MESSAGE";
oFF.OuTopNDialogI18n.SELECT_MEASURE_DIALOG_TITLE = "FF_TOPN__SELECT_MEASURE_DIALOG__TITLE";
oFF.OuTopNDialogI18n.SETTINGS_SECTION_TITLE = "FF_TOPN__SETTINGS_SECTION__TITLE";
oFF.OuTopNDialogI18n.TITLE = "FF_TOPN__TITLE";
oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_BOTTOM_ELEMENT = "FF_TOPN__TOPBOTTOM_DROPDOWN__BOTTOM_ELEMENT";
oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TITLE = "FF_TOPN__TOPBOTTOM_DROPDOWN__TITLE";
oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TOP_ELEMENT = "FF_TOPN__TOPBOTTOM_DROPDOWN__TOP_ELEMENT";
oFF.OuTopNDialogI18n.staticSetup = function()
{
	let provider = new oFF.OuTopNDialogI18n();
	provider.setupProvider(oFF.OuTopNDialog.DEFAULT_PROGRAM_NAME, true);
	provider.addText(oFF.OuTopNDialogI18n.TITLE, "Top N");
	provider.addComment(oFF.OuTopNDialogI18n.TITLE, "#XTIT: The title of the dialog");
	provider.addText(oFF.OuTopNDialogI18n.INFORMATON_MESSAGE, "Creating a new Top N will overwrite the existing Top N");
	provider.addComment(oFF.OuTopNDialogI18n.INFORMATON_MESSAGE, "#XMSG: Warning message to user, displayed when a Top N condition already exists");
	provider.addText(oFF.OuTopNDialogI18n.SETTINGS_SECTION_TITLE, "Settings");
	provider.addComment(oFF.OuTopNDialogI18n.SETTINGS_SECTION_TITLE, "#XTIT: Settings section title");
	provider.addText(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TOP_ELEMENT, "Top");
	provider.addComment(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TOP_ELEMENT, "#XLST: Drop down list item");
	provider.addText(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_BOTTOM_ELEMENT, "Bottom");
	provider.addComment(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_BOTTOM_ELEMENT, "#XLST: Drop down list item");
	provider.addText(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TITLE, "Type");
	provider.addComment(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TITLE, "#XFLD: For drop down list");
	provider.addText(oFF.OuTopNDialogI18n.N_VALUE_TITLE, "Value");
	provider.addComment(oFF.OuTopNDialogI18n.N_VALUE_TITLE, "#XFLD: For input field");
	provider.addText(oFF.OuTopNDialogI18n.N_VALUE_VALIDATION_MESSAGE, "Should be an integer between 1 and 10000");
	provider.addComment(oFF.OuTopNDialogI18n.N_VALUE_VALIDATION_MESSAGE, "#XMSG: Validation error message for input field");
	provider.addText(oFF.OuTopNDialogI18n.BASED_ON_SECTION_TITLE, "Based on");
	provider.addComment(oFF.OuTopNDialogI18n.BASED_ON_SECTION_TITLE, "#XTIT: section title");
	provider.addText(oFF.OuTopNDialogI18n.SELECT_MEASURE_DIALOG_TITLE, "Select Measure");
	provider.addComment(oFF.OuTopNDialogI18n.SELECT_MEASURE_DIALOG_TITLE, "#XTIT: Title of dialog to select measure");
	provider.addText(oFF.OuTopNDialogI18n.MEASURES_INPUTFIELD_TITLE, "Select Measure");
	provider.addComment(oFF.OuTopNDialogI18n.MEASURES_INPUTFIELD_TITLE, "#XFLD: Input field to select measure");
	provider.addText(oFF.OuTopNDialogI18n.MEASURE_VALUE_VALIDATION_MESSAGE, "Select a measure to create a Top N.");
	provider.addComment(oFF.OuTopNDialogI18n.MEASURE_VALUE_VALIDATION_MESSAGE, "#XMSG: Validation error message for measureInput");
	provider.addText(oFF.OuTopNDialogI18n.MEMBER_SELECTOR_DIALOG_TITLE, "Select Measure");
	provider.addComment(oFF.OuTopNDialogI18n.MEMBER_SELECTOR_DIALOG_TITLE, "#XTIT: Title for member selector dialog");
	return provider;
};

oFF.VdDateValueController = function() {};
oFF.VdDateValueController.prototype = new oFF.VdAbstractValueController();
oFF.VdDateValueController.prototype._ff_c = "VdDateValueController";

oFF.VdDateValueController.create = function(context, configuration, controller, variableModel, value)
{
	let obj = new oFF.VdDateValueController();
	obj.setupControllerExt(context, configuration, controller, variableModel, value);
	return obj;
};
oFF.VdDateValueController.prototype.addValueSpecificInvisibleTexts = function()
{
	let invisibleVariableTitleText = this.m_parent.getView().getInvisibleVariableTitleText();
	let hasTwoDatePickers = this.m_view.getDatePicker2() !== oFF.UiContextDummy.getSingleton();
	this.m_view.getDropdown().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleDropdownText());
	this.m_view.getDatePicker1().addLabelledBy(invisibleVariableTitleText);
	if (hasTwoDatePickers)
	{
		this.m_view.getDatePicker2().addLabelledBy(invisibleVariableTitleText);
		this.m_view.getDatePicker1().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleFromText());
		this.m_view.getDatePicker2().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleToText());
	}
};
oFF.VdDateValueController.prototype.createView = function(isEmbedded)
{
	let variableType = this.getVarType();
	let uiManager = this.m_context.getUiManager();
	if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		return oFF.VdDateSingleView.create(uiManager);
	}
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		if (this.m_variableModel.isInterval())
		{
			return oFF.VdDateMultiView.create(uiManager, isEmbedded);
		}
		else
		{
			return oFF.VdDateSingleView.create(uiManager);
		}
	}
	throw oFF.XException.createIllegalArgumentException("Unable to create view for variable type");
};
oFF.VdDateValueController.prototype.getControl1 = function()
{
	return this.m_control1;
};
oFF.VdDateValueController.prototype.getControl2 = function()
{
	return this.m_control2;
};
oFF.VdDateValueController.prototype.isTheOtherDateValid = function(control)
{
	let theOtherDateValue = (control === this.getControl1() ? this.getControl2() : this.getControl1()).getValue();
	return !oFF.XStringUtils.isNullOrEmpty(theOtherDateValue) && oFF.XDate.createDateSafe(theOtherDateValue) !== null;
};
oFF.VdDateValueController.prototype.onChange = function(event)
{
	this.processVariable(event.getControl());
};
oFF.VdDateValueController.prototype.onInvalidValueState = function()
{
	let control1ValueState = this.m_control1.getValueState();
	let control2ValueState = this.m_control2.getValueState();
	if (oFF.notNull(control1ValueState) && control1ValueState.isEqualTo(oFF.UiValueState.ERROR))
	{
		this.m_control1.focus();
	}
	else if (oFF.notNull(control2ValueState) && control2ValueState.isEqualTo(oFF.UiValueState.ERROR))
	{
		this.m_control2.focus();
	}
};
oFF.VdDateValueController.prototype.onLiveChange = function(event)
{
	let control = event.getControl();
	let inputIndex = control === this.m_control1 ? 0 : control === this.m_control2 ? 1 : -1;
	if (inputIndex >= 0)
	{
		this.m_value.resetValueState(inputIndex);
	}
	this.setState(event.getControl(), oFF.VdControllerState.DIRTY);
	if (this.m_config.isMultiInputComponentEnabled() && this.m_parent.isEmbedded() && this.m_variableModel.isMandatory() && event.getParameters().getStringByKey(oFF.UiEventParams.PARAM_VALUE) === null)
	{
		control.setValue("");
		this.processVariable(control);
		if (this.m_variableModel.getValues().isEmpty() || this.m_variableModel.getValues().size() === 1 && !this.m_variableModel.getValues().get(0).isFilled())
		{
			this.m_variableModel.validateValues();
		}
	}
};
oFF.VdDateValueController.prototype.onValueStateChanged = function()
{
	this.m_control1.setValueState(this.m_value.getFirstValueState());
	this.m_control1.setValueStateText(this.m_value.getFirstValueStateText());
	this.m_control2.setValueState(this.m_value.getSecondValueState());
	this.m_control2.setValueStateText(this.m_value.getSecondValueStateText());
};
oFF.VdDateValueController.prototype.processVariable = function(control)
{
	this.processVariableInternal(control);
	if (oFF.notNull(this.m_value) && this.m_value.getOperator().getNumberOfParameters() > 1)
	{
		this.processVariableInternal(control === this.m_control1 ? this.m_control2 : this.m_control1);
	}
};
oFF.VdDateValueController.prototype.processVariableInternal = function(control)
{
	let index = control === this.m_control1 ? 0 : control === this.m_control2 ? 1 : -1;
	if (index < 0)
	{
		return;
	}
	let dateValue = control.getValue();
	if (oFF.XStringUtils.isNullOrEmpty(dateValue))
	{
		dateValue = null;
	}
	else if (oFF.XString.isEqual(dateValue, oFF.VdConstants.BW_NULL_OPERATOR))
	{
		dateValue = oFF.VdConstants.BW_NULL_DATE;
	}
	let item = oFF.FilterDialogValueFactory.createValueWithType(dateValue, null, null, oFF.XValueType.DATE);
	this.m_value.setOperand(index, item);
	if (!oFF.XStringUtils.isNullOrEmpty(dateValue) && oFF.XDate.createDateSafe(dateValue) === null)
	{
		if (this.m_config.isMultiInputComponentEnabled() && this.m_parent.isEmbedded() && this.m_variableModel.isMandatory())
		{
			this.m_value.setOperand(index, oFF.FilterDialogValueFactory.createValueWithType(null, null, null, oFF.XValueType.DATE));
		}
		this.m_value.setError(index, oFF.OuVariableDialogI18nLegacy.getProvider().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_DATE_VALIDATION));
	}
	else if (this.isTheOtherDateValid(control))
	{
		this.validateRange(index);
	}
	this.setState(control, oFF.VdControllerState.PROCESSED);
};
oFF.VdDateValueController.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_control1))
	{
		this.m_control1.registerOnChange(null);
		this.m_control1.registerOnLiveChange(null);
	}
	if (oFF.notNull(this.m_control2))
	{
		this.m_control2.registerOnChange(null);
		this.m_control2.registerOnLiveChange(null);
	}
	oFF.VdAbstractValueController.prototype.releaseObject.call( this );
};
oFF.VdDateValueController.prototype.setState = function(control, state)
{
	control.setCustomObject(state);
	this.notifyStateChange();
};
oFF.VdDateValueController.prototype.setupControllerExt = function(context, configuration, controller, variableModel, value)
{
	this.setupController(context, configuration, controller, variableModel, value);
	this.m_view.setDateValueFormat(oFF.VdConstants.DATE_VALUE_FORMAT);
	this.m_view.setDateDisplayFormat(configuration.getDateDisplayFormat());
	this.m_control1 = this.m_view.getDatePicker1();
	this.m_control1.setCustomObject(oFF.VdControllerState.PRISTINE);
	this.m_control1.registerOnChange(this);
	this.m_control1.registerOnLiveChange(this);
	this.m_control2 = this.m_view.getDatePicker2();
	this.m_control2.setCustomObject(oFF.VdControllerState.PRISTINE);
	this.m_control2.registerOnChange(this);
	this.m_control2.registerOnLiveChange(this);
};
oFF.VdDateValueController.prototype.validateRange = function(idx)
{
	if (this.m_value.isOperandSwitchRequired())
	{
		this.m_value.setError(idx, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_ERROR_MIN_GREATER_MAX));
	}
	else
	{
		this.m_value.resetValueState(idx);
	}
};

oFF.VdInputValueController = function() {};
oFF.VdInputValueController.prototype = new oFF.VdAbstractValueController();
oFF.VdInputValueController.prototype._ff_c = "VdInputValueController";

oFF.VdInputValueController.create = function(context, configuration, controller, variableModel, value)
{
	let obj = new oFF.VdInputValueController();
	obj.setupControllerExt(context, configuration, controller, variableModel, value);
	return obj;
};
oFF.VdInputValueController.prototype.addValueSpecificInvisibleTexts = function()
{
	let invisibleVariableTitleText = this.m_parent.getView().getInvisibleVariableTitleText();
	let hasTwoInputs = this.m_view.getInput2() !== oFF.UiContextDummy.getSingleton();
	this.m_view.getDropdown().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleDropdownText());
	this.m_view.getInput1().addLabelledBy(invisibleVariableTitleText);
	if (hasTwoInputs)
	{
		this.m_view.getInput2().addLabelledBy(invisibleVariableTitleText);
		this.m_view.getInput1().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleFromText());
		this.m_view.getInput2().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleToText());
	}
};
oFF.VdInputValueController.prototype.createView = function(isEmbedded)
{
	let variableType = this.getVarType();
	let uiManager = this.m_context.getUiManager();
	if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		return oFF.VdDropdownSingleView.create(uiManager);
	}
	if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		return oFF.VdInputSingleView.create(uiManager);
	}
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		if (this.m_variableModel.isInterval())
		{
			return oFF.VdInputMultiView.create(uiManager, isEmbedded);
		}
		else
		{
			return oFF.VdInputSingleView.create(uiManager);
		}
	}
	throw oFF.XException.createIllegalArgumentException("Unable to create view for variable type");
};
oFF.VdInputValueController.prototype.getInputField = function(index)
{
	if (index === 0)
	{
		return this.m_control1;
	}
	return this.m_control2;
};
oFF.VdInputValueController.prototype.onClearIconPress = function(control)
{
	let inputIndex = control === this.m_control1 ? 0 : control === this.m_control2 ? 1 : -1;
	if (inputIndex === 0)
	{
		if (this.m_variableModel.isInterval())
		{
			this.m_value.removeFirstOperand();
		}
		else
		{
			this.m_variableModel.removeValue(this.m_value);
		}
	}
	else if (inputIndex === 1)
	{
		this.m_value.removeSecondOperand();
		if (this.m_value.getFirstValueState() === oFF.UiValueState.ERROR && oFF.XStringUtils.isNullOrEmpty(this.m_view.getInput1().getValue()))
		{
			this.m_value.resetValueState(0);
		}
	}
};
oFF.VdInputValueController.prototype.onEditingBegin = function(event)
{
	this.m_focusedControl = event.getControl();
	let selectedText = this.m_focusedControl.getSelectedText();
	let isTextSelected = oFF.XStringUtils.isNotNullAndNotEmpty(selectedText);
	this.handleIdAndInfoMessage(false, isTextSelected);
};
oFF.VdInputValueController.prototype.onEditingEnd = function(event)
{
	let control = event.getControl();
	if (!control.isEditable())
	{
		this.m_focusedControl = null;
		return;
	}
	if (this.getControlState(control) !== oFF.VdControllerState.PROCESSED && (!this.m_config.isMultiInputComponentEnabled() || this.getControlState(control) === oFF.VdControllerState.DIRTY))
	{
		this.m_focusedControl = null;
		this.processVariableInternal(control, false);
	}
	else
	{
		this.clearIdAndInfoMessage();
	}
	this.m_focusedControl = null;
};
oFF.VdInputValueController.prototype.onEnter = function(event)
{
	this.processVariableInternal(event.getControl(), true);
};
oFF.VdInputValueController.prototype.onInvalidValueState = function()
{
	let control1ValueState = this.m_control1.getValueState();
	let control2ValueState = this.m_control2.getValueState();
	if (oFF.notNull(control1ValueState) && control1ValueState.isEqualTo(oFF.UiValueState.ERROR))
	{
		this.m_control1.focus();
	}
	else if (oFF.notNull(control2ValueState) && control2ValueState.isEqualTo(oFF.UiValueState.ERROR))
	{
		this.m_control2.focus();
	}
};
oFF.VdInputValueController.prototype.onLiveChange = function(event)
{
	let control = event.getControl();
	this.setState(control, oFF.VdControllerState.DIRTY);
	let inputVal = control.getValue();
	let inputIndex = control === this.m_control1 ? 0 : control === this.m_control2 ? 1 : -1;
	if (inputIndex >= 0)
	{
		this.m_value.resetValueState(inputIndex);
		if (inputIndex === 1 && this.m_value.getFirstValueState() === oFF.UiValueState.ERROR && oFF.XStringUtils.isNullOrEmpty(this.m_view.getInput1().getValue()))
		{
			this.m_value.resetValueState(0);
		}
	}
	if (this.getVarType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		this.m_variableModel.validateSimpleTypeInput(this.m_value, inputVal, inputIndex);
	}
	else if (this.m_config.isMultiInputComponentEnabled() && this.m_parent.isEmbedded() && this.m_variableModel.isMandatory() && oFF.XStringUtils.isNullOrEmpty(control.getValue()))
	{
		this.processVariable(control);
		if (this.m_variableModel.getValues().isEmpty() || this.m_variableModel.getValues().size() === 1 && !this.m_variableModel.getValues().get(0).isFilled())
		{
			this.m_variableModel.validateValues();
		}
	}
	let newValue = event.getParameters().getStringByKey("value");
	if (oFF.XStringUtils.isNullOrEmpty(newValue) && !control.isEditable())
	{
		this.onClearIconPress(control);
	}
};
oFF.VdInputValueController.prototype.onSearchDone = function(index)
{
	let input = this.getInputField(index);
	this.setState(input, oFF.VdControllerState.PROCESSED);
	if (!input.isReleased())
	{
		input.setBusy(false);
	}
};
oFF.VdInputValueController.prototype.onValueStateChanged = function()
{
	this.m_control1.setValueState(this.m_value.getFirstValueState());
	this.m_control1.setValueStateText(this.m_value.getFirstValueStateText());
	this.m_control2.setValueState(this.m_value.getSecondValueState());
	this.m_control2.setValueStateText(this.m_value.getSecondValueStateText());
};
oFF.VdInputValueController.prototype.processVariable = function(control)
{
	this.processVariableInternal(control, false);
};
oFF.VdInputValueController.prototype.processVariableInternal = function(control, isOnEnter)
{
	if (this.getControlState(control) === oFF.VdControllerState.PENDING || !control.isEditable())
	{
		return;
	}
	let isDirty = this.getControlState(control) === oFF.VdControllerState.DIRTY;
	this.setState(control, oFF.VdControllerState.PENDING);
	let inputIndex = control === this.m_control1 ? 0 : control === this.m_control2 ? 1 : -1;
	if (inputIndex >= 0)
	{
		let varType = this.getVarType();
		if (varType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
		{
			this.setSimpleTypeOperand(inputIndex, control, isOnEnter);
			this.setState(control, oFF.VdControllerState.PROCESSED);
		}
		else if (varType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let inputVal = control.getValue();
			let hasErrorState = this.m_value.getValueState(inputIndex) === oFF.UiValueState.ERROR;
			if (!isDirty && !hasErrorState && this.m_value.isOperandFilled(inputIndex))
			{
				let valueId = this.getDisplayValue(oFF.DialogLabelMode.KEY, this.m_value, inputIndex);
				if (!oFF.XStringUtils.isNullOrEmpty(valueId))
				{
					inputVal = valueId;
				}
			}
			if (oFF.XStringUtils.isNullOrEmpty(inputVal))
			{
				this.m_value.removeOperand(inputIndex);
				this.setState(control, oFF.VdControllerState.PROCESSED);
			}
			else if (this.validationShouldBeSkipped())
			{
				this.m_parent.setEnableAutoFocus(true);
				this.m_value.setOperand(inputIndex, oFF.FilterDialogValueFactory.createValue(null, inputVal, null));
				this.m_parent.setEnableAutoFocus(false);
				this.setState(control, oFF.VdControllerState.PROCESSED);
			}
			else
			{
				this.getInputField(inputIndex).setBusy(true);
				this.performValueSearch(inputIndex, inputVal);
			}
		}
	}
};
oFF.VdInputValueController.prototype.setSimpleTypeOperand = function(index, control, isOnEnter)
{
	if (isOnEnter)
	{
		this.m_parent.setEnableAutoFocus(true);
	}
	let key = oFF.XStringUtils.isNotNullAndNotEmpty(control.getValue()) ? control.getValue() : null;
	if (oFF.notNull(key) && this.m_variableModel.getVariable().getValueType().isTypeOf(oFF.XValueType.NUMBER))
	{
		let formatter = oFF.UiNumberFormatterCenter.getCenter();
		let parsedNumber = formatter.parseFormattedNumber(key);
		let formattedNumber = formatter.format(parsedNumber);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(formattedNumber))
		{
			this.m_value.setOperand(index, oFF.FilterDialogValueFactory.createValue(parsedNumber, formattedNumber, null));
			this.m_variableModel.validateSimpleType(this.m_value, index);
		}
		else
		{
			this.m_variableModel.validateSimpleTypeInput(this.m_value, key, index);
		}
	}
	else
	{
		this.m_value.setOperand(index, oFF.FilterDialogValueFactory.createValue(key, null, null));
		this.m_variableModel.validateSimpleType(this.m_value, index);
	}
	this.m_parent.setEnableAutoFocus(false);
};
oFF.VdInputValueController.prototype.setupControllerExt = function(context, configuration, controller, variableModel, value)
{
	this.setupController(context, configuration, controller, variableModel, value);
	this.m_control1 = this.m_view.getInput1();
	this.m_control1.setCustomObject(oFF.VdControllerState.PRISTINE);
	this.m_control1.registerOnEnter(this);
	this.m_control1.registerOnEditingBegin(this);
	this.m_control1.registerOnEditingEnd(this);
	this.m_control1.registerOnLiveChange(this);
	this.m_control2 = this.m_view.getInput2();
	this.m_control2.setCustomObject(oFF.VdControllerState.PRISTINE);
	this.m_control2.registerOnEnter(this);
	this.m_control2.registerOnEditingBegin(this);
	this.m_control2.registerOnEditingEnd(this);
	this.m_control2.registerOnLiveChange(this);
};
oFF.VdInputValueController.prototype.validationShouldBeSkipped = function()
{
	if (!this.m_variableModel.supportsValueHelp())
	{
		return true;
	}
	if (!this.m_config.isLinkedVariable(this.m_variableModel.getName()) && !this.m_variableModel.hasCheckTable())
	{
		return true;
	}
	return false;
};

oFF.VdMultiInputValueController = function() {};
oFF.VdMultiInputValueController.prototype = new oFF.VdAbstractValueController();
oFF.VdMultiInputValueController.prototype._ff_c = "VdMultiInputValueController";

oFF.VdMultiInputValueController.create = function(context, configuration, controller, variableModel)
{
	let obj = new oFF.VdMultiInputValueController();
	obj.setupControllerExt(context, configuration, controller, variableModel);
	return obj;
};
oFF.VdMultiInputValueController.prototype.m_values = null;
oFF.VdMultiInputValueController.prototype.addValue = function(value)
{
	let isValueInList = this.m_values.getByKey(value.getId()) !== null;
	if (value.isEmpty())
	{
		this.clearValues();
	}
	else if (!isValueInList)
	{
		this.m_values.put(value.getId(), value);
	}
	else
	{
		this.updateChipText(value);
	}
	if (value.isEmpty() || !isValueInList)
	{
		value.addValueStateListener(this);
	}
	this.m_value = value;
	this.m_renderer.setValue(value);
};
oFF.VdMultiInputValueController.prototype.addValueSpecificInvisibleTexts = function()
{
	this.m_view.getDropdown().addLabelledBy(this.m_parent.getMaster().getView().getInvisibleDropdownText());
	this.m_view.getInput1().addLabelledBy(this.m_parent.getView().getInvisibleVariableTitleText());
};
oFF.VdMultiInputValueController.prototype.clearValues = function()
{
	this.m_values = oFF.XLinkedHashMapByString.create();
	let multiInput = this.m_view.getInput1();
	multiInput.setValue("");
	multiInput.clearChips();
};
oFF.VdMultiInputValueController.prototype.createView = function(isEmbedded)
{
	return oFF.VdMultiInputSingleView.create(this.m_context.getUiManager(), isEmbedded);
};
oFF.VdMultiInputValueController.prototype.getValues = function()
{
	return this.m_values;
};
oFF.VdMultiInputValueController.prototype.isMultiInput = function()
{
	return true;
};
oFF.VdMultiInputValueController.prototype.isValueInList = function(operand)
{
	let operandId = operand.getKey();
	let valuesIterator = this.m_values.getIterator();
	while (valuesIterator.hasNext())
	{
		let currentValue = valuesIterator.next();
		let currentValueId = currentValue.getFirstOperand().getKey();
		if (oFF.XString.isEqual(operandId, currentValueId))
		{
			return true;
		}
	}
	return false;
};
oFF.VdMultiInputValueController.prototype.onEditingBegin = function(event)
{
	this.m_focusedControl = event.getControl();
	this.displayInfoMessage(false);
};
oFF.VdMultiInputValueController.prototype.onEditingEnd = function(event)
{
	let control = event.getControl();
	if (!control.isEditable())
	{
		this.m_focusedControl = null;
		return;
	}
	if (this.getControlState(control) !== oFF.VdControllerState.PROCESSED && this.getControlState(control) === oFF.VdControllerState.DIRTY)
	{
		this.processVariableInternal(control);
	}
	else
	{
		this.clearIdAndInfoMessage();
	}
	this.m_focusedControl = null;
};
oFF.VdMultiInputValueController.prototype.onEnter = function(event)
{
	this.processVariableInternal(event.getControl());
	this.displayInfoMessage(true);
};
oFF.VdMultiInputValueController.prototype.onInvalidValueState = function()
{
	let control1ValueState = this.m_control1.getValueState();
	if (oFF.notNull(control1ValueState) && control1ValueState.isEqualTo(oFF.UiValueState.ERROR))
	{
		this.m_control1.focus();
	}
};
oFF.VdMultiInputValueController.prototype.onLiveChange = function(event)
{
	let control = event.getControl();
	this.setState(control, oFF.VdControllerState.DIRTY);
	if (control === this.m_control1)
	{
		this.m_value.resetValueState(0);
	}
	if (this.m_parent.isEmbedded() && this.m_variableModel.isMandatory() && this.m_values.isEmpty() && oFF.XStringUtils.isNullOrEmpty(control.getValue()))
	{
		this.m_variableModel.validateValues();
	}
};
oFF.VdMultiInputValueController.prototype.onSearchDone = function(index)
{
	let input = this.m_control1;
	this.setState(input, oFF.VdControllerState.PROCESSED);
	if (!input.isReleased())
	{
		input.setBusy(false);
	}
};
oFF.VdMultiInputValueController.prototype.onValueStateChanged = function()
{
	this.m_control1.setValueState(this.m_value.getFirstValueState());
	this.m_control1.setValueStateText(this.m_value.getFirstValueStateText());
};
oFF.VdMultiInputValueController.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	let properties = customIdentifier;
	let searchedOnIndex = 0;
	let searchValue = properties.getStringByKey(this.SEARCH_VALUE);
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	if (extResult.hasErrors())
	{
		this.m_value.setError(searchedOnIndex, i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR));
	}
	else
	{
		let result = extResult.getData();
		if (oFF.XCollectionUtils.hasElements(result))
		{
			let operand = this.getBestFittingValueHelpResult(result, searchValue);
			if (!this.isValueInList(operand))
			{
				let newValue = oFF.VdValue.createValue(this.m_value.getOperator(), operand, null);
				if (this.shouldAddEmptyLine())
				{
					this.m_variableModel.setInputValue(null);
				}
				this.m_variableModel.addValue(newValue);
				this.m_parent.setEnableAutoFocus(false);
			}
		}
		else
		{
			this.m_value.setError(searchedOnIndex, i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_DOES_NOT_EXIST));
		}
	}
	this.onSearchDone(searchedOnIndex);
};
oFF.VdMultiInputValueController.prototype.processVariable = function(control)
{
	this.processVariableInternal(control);
};
oFF.VdMultiInputValueController.prototype.processVariableInternal = function(control)
{
	if (this.getControlState(control) === oFF.VdControllerState.PENDING || !control.isEditable())
	{
		return;
	}
	this.setState(control, oFF.VdControllerState.PENDING);
	let inputVal = control.getValue();
	let inputIndex = control === this.m_control1 ? 0 : -1;
	if (inputIndex === 0)
	{
		if (oFF.XStringUtils.isNullOrEmpty(inputVal))
		{
			this.setState(control, oFF.VdControllerState.PROCESSED);
		}
		else if (!this.m_variableModel.supportsValueHelp() || !this.m_config.isLinkedVariable(this.m_variableModel.getName()) && !this.m_variableModel.hasCheckTable())
		{
			this.m_parent.setEnableAutoFocus(true);
			let newValue = oFF.VdValue.createValue(this.m_value.getOperator(), oFF.FilterDialogValueFactory.createValue(null, inputVal, null), null);
			if (this.m_variableModel.isNewValue(newValue))
			{
				if (this.shouldAddEmptyLine())
				{
					this.m_variableModel.setInputValue(null);
				}
				this.m_variableModel.addValue(newValue);
			}
			this.m_parent.setEnableAutoFocus(false);
			this.setState(control, oFF.VdControllerState.PROCESSED);
		}
		else
		{
			this.m_control1.setBusy(true);
			this.performValueSearch(inputIndex, inputVal);
		}
	}
};
oFF.VdMultiInputValueController.prototype.releaseObject = function()
{
	oFF.VdAbstractValueController.prototype.releaseObject.call( this );
	let valuesIterator = this.m_values.getIterator();
	while (valuesIterator.hasNext())
	{
		let currentValue = valuesIterator.next();
		currentValue.removeValueStateListener(this);
	}
	this.m_values = null;
};
oFF.VdMultiInputValueController.prototype.removeValue = function(value)
{
	if (oFF.isNull(value))
	{
		return;
	}
	value.removeValueStateListener(this);
	this.m_values.remove(value.getId());
	let multiInput = this.m_view.getInput1();
	let chipName = this.m_renderer.generateChipName(value);
	let chipToRemove = multiInput.getChipByName(chipName);
	multiInput.removeChip(chipToRemove);
	if (this.m_values.isEmpty())
	{
		this.m_value = this.m_variableModel.createNewValue();
		if (this.m_variableModel.isInterval())
		{
			this.m_value.setOperator(value.getOperator());
		}
		this.m_renderer.setValue(this.m_value);
	}
	else
	{
		this.m_value = this.m_values.getValuesAsReadOnlyList().get(this.m_values.size() - 1);
		this.m_renderer.setValue(this.m_value);
	}
};
oFF.VdMultiInputValueController.prototype.setupControllerExt = function(context, configuration, controller, variableModel)
{
	this.m_values = oFF.XLinkedHashMapByString.create();
	this.setupController(context, configuration, controller, variableModel, null);
	this.m_control1 = this.m_view.getInput1();
	this.m_control1.setCustomObject(oFF.VdControllerState.PRISTINE);
	this.m_control1.registerOnEnter(this);
	this.m_control1.registerOnEditingBegin(this);
	this.m_control1.registerOnEditingEnd(this);
	this.m_control1.registerOnLiveChange(this);
	this.m_control1.registerOnChipUpdate(oFF.UiLambdaChipUpdateListener.create((tokenUpdateEvent) => {
		let removedChips = tokenUpdateEvent.getRemovedControls();
		oFF.XCollectionUtils.forEach(removedChips, (chip) => {
			let chipName = chip.getName();
			oFF.XStream.of(this.m_values).find((value) => {
				return oFF.XString.isEqual(chipName, this.m_renderer.generateChipName(value));
			}).ifPresent(this.m_variableModel.removeValue.bind(this.m_variableModel));
		});
		if (this.m_values.isEmpty())
		{
			if (this.m_parent.isEmbedded() && this.m_variableModel.isMandatory())
			{
				this.m_variableModel.validateValues();
			}
			else
			{
				this.m_value.resetValueState(0);
			}
		}
	}));
	this.m_control2 = oFF.UiContextDummy.getSingleton();
};
oFF.VdMultiInputValueController.prototype.shouldAddEmptyLine = function()
{
	return this.m_values.isEmpty() && this.m_variableModel.getInputValue() === this.m_value;
};
oFF.VdMultiInputValueController.prototype.updateChipText = function(value)
{
	let multiInput = this.m_view.getInput1();
	let newChipText = this.m_renderer.getDisplayValue(this.m_config.getLabelMode(), value, oFF.VdValue.FIRST);
	let chipName = this.m_renderer.generateChipName(value);
	let valueChip = multiInput.getChipByName(chipName);
	valueChip.setText(newChipText);
	valueChip.setTooltip(newChipText);
};

oFF.VdOptionValueController = function() {};
oFF.VdOptionValueController.prototype = new oFF.VdAbstractValueController();
oFF.VdOptionValueController.prototype._ff_c = "VdOptionValueController";

oFF.VdOptionValueController.create = function(context, configuration, controller, variableModel, value)
{
	let obj = new oFF.VdOptionValueController();
	obj.setupControllerExt(context, configuration, controller, variableModel, value);
	return obj;
};
oFF.VdOptionValueController.prototype.addValueSpecificInvisibleTexts = function() {};
oFF.VdOptionValueController.prototype.createView = function(isEmbedded)
{
	return oFF.VdDropdownSingleView.create(this.m_context.getUiManager());
};
oFF.VdOptionValueController.prototype.onSelect = function(event)
{
	this.processVariableInternal();
};
oFF.VdOptionValueController.prototype.processVariable = function(control)
{
	this.processVariableInternal();
};
oFF.VdOptionValueController.prototype.processVariableInternal = function()
{
	let item = this.m_control1.getSelectedItem();
	let itemName = item.getName();
	let itemText = this.m_variableModel.getValueType().isBoolean() ? null : item.getText();
	let first = oFF.FilterDialogValueFactory.createValue(itemName, null, itemText);
	this.m_value.setOperand(oFF.VdValue.FIRST, first);
};
oFF.VdOptionValueController.prototype.setupControllerExt = function(context, configuration, controller, variableModel, value)
{
	this.setupController(context, configuration, controller, variableModel, value);
	this.m_control1 = this.m_view.getDropdown();
	this.m_control1.registerOnSelect(this);
	this.m_control2 = oFF.UiContextDummy.getSingleton();
};

oFF.OuVariableDialogI18nLegacy = function() {};
oFF.OuVariableDialogI18nLegacy.prototype = new oFF.DfXLocalizationProvider();
oFF.OuVariableDialogI18nLegacy.prototype._ff_c = "OuVariableDialogI18nLegacy";

oFF.OuVariableDialogI18nLegacy.I18N_CANCEL = "BUTTON_CANCEL";
oFF.OuVariableDialogI18nLegacy.I18N_OK = "FIREFLY_DIALOGS_OK";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_CHANGE = "FIREFLY_DIALOGS_VARIANT_CANNOT_CHANGE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_DELETE = "FIREFLY_DIALOGS_VARIANT_CANNOT_DELETE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_SAVE = "FIREFLY_DIALOGS_VARIANT_CANNOT_SAVE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE = "FF_VD_VARIANT_DELETE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE_CONFIRMATION = "FIREFLY_DIALOGS_VARIANT_DELETE_CONFIRMATION";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT = "FF_VD_VARIANT_EDIT";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_ACCEPT = "FF_VD_VARIANT_EDIT_ACCEPT";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_CANCEL = "FF_VD_VARIANT_EDIT_CANCEL";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EMPTY = "FIREFLY_DIALOGS_VARIANT_EMPTY";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GENERATED_ID = "FIREFLY_DIALOGS_VARIANT_GENERATED_ID";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GLOBAL = "FIREFLY_DIALOGS_VARIANT_GLOBAL";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_MANAGE = "FIREFLY_DIALOGS_VARIANT_MANAGE_TITLE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME = "FIREFLY_DIALOGS_VARIANT_NAME";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_PLACEHOLDER = "FIREFLY_DIALOGS_VARIANT_NAME_PLACEHOLDER";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_REQUIRED = "FIREFLY_DIALOGS_VARIANT_NAME_REQUIRED";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_UNIQUE = "FIREFLY_DIALOGS_VARIANT_NAME_UNIQUE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NONE = "FIREFLY_DIALOGS_VARIANT_NONE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE = "FIREFLY_DIALOGS_VARIANT_OVERWRITE_CURRENT";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE_CONFIRMATION = "FIREFLY_DIALOGS_VARIANT_OVERWRITE_CONFIRMATION";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_PERSONAL = "FIREFLY_DIALOGS_VARIANT_PERSONAL";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CANCEL = "FIREFLY_DIALOGS_VARIANT_POPUP_CANCEL";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CLOSE = "FIREFLY_DIALOGS_VARIANT_POPUP_CLOSE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_DELETE = "FIREFLY_DIALOGS_VARIANT_POPUP_DELETE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_SAVE = "FIREFLY_DIALOGS_VARIANT_POPUP_SAVE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE = "FIREFLY_DIALOGS_VARIANT_SAVE_TITLE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_CURRENT = "FIREFLY_DIALOGS_VARIANT_SAVE_CURRENT";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_SUCCESS = "FIREFLY_DIALOGS_VARIANT_SAVE_SUCCESS";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME = "FIREFLY_DIALOGS_VARIANT_TECHNICAL_NAME";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_PLACEHOLDER = "FIREFLY_DIALOGS_VARIANT_TECHNICAL_NAME_PLACEHOLDER";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_REQUIRED = "FIREFLY_DIALOGS_VARIANT_TECHNICAL_NAME_REQUIRED";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_UNIQUE = "FIREFLY_DIALOGS_VARIANT_TECHNICAL_NAME_UNIQUE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TYPE = "FIREFLY_DIALOGS_VARIANT_TYPE";
oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_WARNING = "FIREFLY_DIALOGS_VARIANT_WARNING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_APPLY_VARIANT = "BW_USE_VARIANT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_APP_LEVEL = "REPORT_VARIABLES_OPTION_APPLICATION";
oFF.OuVariableDialogI18nLegacy.I18N_VD_CHART_LEVEL = "REPORT_VARIABLES_OPTION_CHART";
oFF.OuVariableDialogI18nLegacy.I18N_VD_CHOOSE_VARIANT = "BW_VARIANT_APPLY";
oFF.OuVariableDialogI18nLegacy.I18N_VD_CLEAR = "FF_VD_CLEAR";
oFF.OuVariableDialogI18nLegacy.I18N_VD_CLIPBOARD_INFO = "FIREFLY_DIALOGS_CLIPBOARD_INFO";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_MEMBERS_DESCRIPTION = "FF_VD_COLUMN_HEADER_MEMBERS_DESCRIPTION";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_VARIABLES = "FF_VD_COLUMN_HEADER_VARIABLES";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_BETWEEN_TEXT = "FIREFLY_DIALOGS_OPERATOR_BETWEEN_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_EQUAL_TEXT = "FIREFLY_DIALOGS_OPERATOR_EQUAL_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_EQUAL_TEXT = "FIREFLY_DIALOGS_OPERATOR_GREATER_EQUAL_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_TEXT = "FIREFLY_DIALOGS_OPERATOR_GREATER_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NOT_NULL = "REPORT_VARIABLES_OPERATOR_ISNOTNULL";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NULL = "REPORT_VARIABLES_OPERATOR_ISNULL";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_EQUAL_TEXT = "FIREFLY_DIALOGS_OPERATOR_LESS_EQUAL_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_TEXT = "FIREFLY_DIALOGS_OPERATOR_LESS_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_MATCH_TEXT = "FIREFLY_DIALOGS_OPERATOR_CONTAINS_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_BETWEEN_TEXT = "FIREFLY_DIALOGS_OPERATOR_NOT_BETWEEN_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_EQUAL_TEXT = "FIREFLY_DIALOGS_OPERATOR_NOT_EQUAL_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE = "DELETE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC = "REPORT_VARIABLES_DIALOG_FORCE_DYNAMIC_PROMPT_SETTING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC_DISABLED_LONG = "FF_VD_DISABLE_DYNAMIC_DISABLED_LONG";
oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_EXIT = "REPORT_VARIABLES_DIALOG_DISABLE_EXIT_VARIABLE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_FILTER_INFO = "REPORT_VARIABLES_DYNAMIC_FILTER_TIP_INFO_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_VARIABLE_INFO = "REPORT_VARIABLES_DYNAMIC_VARIABLE_TIP_INFO_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_EMPTY_CURRENCY_OPTION_TEXT = "FIREFLY_DIALOGS_EMPTY_CURRENCY_OPTION";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ENTER = "FIREFLY_DIALOGS_ENTER";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_DATE_VALIDATION = "REPORT_VARIABLES_DIALOG_VALIDATION_DATE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_MANDATORY_VAR = "REPORT_VARIABLES_DIALOG_VALIDATION_MANDATORY";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_NUMBER_VALIDATION = "REPORT_VARIABLES_DIALOG_VALIDATION_LONG";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_VALUE_MISSING = "FIREFLY_DIALOGS_ERROR_MSG_VALUE_MISSING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_QUERIES_IN_PROCESSING = "REPORT_VARIABLES_DIALOG_CAN_NOT_OPEN_QUERIES_IN_PROCESSING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_UNKNOWN_ERROR = "FIREFLY_DIALOGS_ERR_UNKNOWN_ERROR";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VAR_SUBMIT_IN_PROCESSING = "REPORT_VARIABLES_DIALOG_CAN_NOT_SUBMIT_QUERIES_IN_PROCESSING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR = "FIREFLY_DIALOGS_ERR_VH_SERVER_ERROR";
oFF.OuVariableDialogI18nLegacy.I18N_VD_FALSE = "FIREFLY_DIALOGS_FALSE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_APP = "REPORT_VARIABLES_DIALOG_FORCE_PROMPT_APPLICATION_SETTING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_DISABLED_LONG = "FF_VD_FORCE_PROMPT_DISABLED_LONG";
oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_PS = "REPORT_VARIABLES_DIALOG_FORCE_PROMPT_PLSQ_SETTING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY = "REPORT_VARIABLES_DIALOG_FORCE_PROMPT_SETTING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY_INFO = "REPORT_VARIABLES_DIALOG_FORCE_PROMPT_WARNING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NAME = "FIREFLY_DIALOGS_HIERARCHY_NAME";
oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NODE = "FIREFLY_DIALOGS_HIERARCHY_NODE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_ICON_INVISIBLE_TEXT = "FF_VD_ICON_INVISIBLE_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_INFORMATION_ICON_TOOLTIP = "FF_VD_INFORMATION_ICON_TOOLTIP";
oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_1_INVISIBLE_TEXT = "FF_VD_INPUT_1_INVISIBLE_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_2_INVISIBLE_TEXT = "FF_VD_INPUT_2_INVISIBLE_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_LINKED_VARIABLE_NO_RESULTS = "NO_DESCRIPTION_AVAILABLE_FOR_SEARCH";
oFF.OuVariableDialogI18nLegacy.I18N_VD_LINK_INFO_MESSAGE = "REPORT_VARIABLES_LINK_TIP_INFO_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_DOES_NOT_EXIST = "REPORT_VARIABLES_NO_DIM_MEM";
oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_ID = "FIREFLY_DIALOGS_MEMBER_ID";
oFF.OuVariableDialogI18nLegacy.I18N_VD_MISSING_LINK_WARNING = "LINK_VARIABLE_LINKS_INVALID";
oFF.OuVariableDialogI18nLegacy.I18N_VD_NEW_FORCE_PROMPT_PS = "NEW_REPORT_VARIABLES_DIALOG_FORCE_PROMPT_PLSQ_SETTING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE = "DIMENSION_HEADER_LABEL_EMPTY_STRING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VARIABLES = "REPORT_VARIABLES_INFO_NO_VARIABLES";
oFF.OuVariableDialogI18nLegacy.I18N_VD_NULL = "DIMENSION_HEADER_LABEL_NULL";
oFF.OuVariableDialogI18nLegacy.I18N_VD_NUMBER = "REPORT_VARIABLES_VALUETYPE_NUMBER";
oFF.OuVariableDialogI18nLegacy.I18N_VD_OPERATOR_DROPDOWN_INVISIBLE_TEXT = "FF_VD_OPERATOR_DROPDOWN_INVISIBLE_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_LONG = "FIREFLY_DIALOGS_SAVED_PROMPTS_FOR_DYNAMIC_LONG";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_SHORT = "FIREFLY_DIALOGS_SAVED_PROMPTS_FOR_DYNAMIC_SHORT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SELECT_MEMBER_FOR = "REPORT_VARIABLES_DIM_MEM_SELECT_TITLE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SET = "REPORT_VARIABLES_DIALOG_OKBUTTON_TEXT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_BTN = "FF_VD_SETTINGS_BTN";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_CLOSE = "FF_VD_SETTINGS_POPOVER_CLOSE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DEFAULT_VALUES_SECTION = "FF_VD_SETTINGS_POPOVER_DEFAULT_VALUES_SECTION";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DISPLAY_SECTION = "FF_VD_SETTINGS_POPOVER_DISPLAY_SECTION";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_FOR_ALL_PAGES = "REPORT_VARIABLES_OPTION_ALL_PAGES";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_FOR_CURRENT_PAGE = "REPORT_VARIABLES_OPTION_CURRENT_PAGE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES = "REPORT_VARIABLES_DIALOG_TITLE_SIMPLE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_FOR = "REPORT_VARIABLES_DIALOG_TITLE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_PS = "REPORT_VARIABLES_DIALOG_TITLE_PLSQ";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_MANDATORY_VARS_ONLY = "FIREFLY_DIALOGS_SHOW_MANDATORY_VARS_ONLY";
oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_VARIABLE_TECHNICAL_NAMES = "FIREFLY_DIALOGS_SHOW_VARIABLE_TECHNICAL_NAMES";
oFF.OuVariableDialogI18nLegacy.I18N_VD_STORY_LEVEL = "REPORT_VARIABLES_OPTION_STORY";
oFF.OuVariableDialogI18nLegacy.I18N_VD_STRING = "FIREFLY_DIALOGS_VALUE_TYPE_STRING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_TABLE_LEVEL = "REPORT_VARIABLES_OPTION_TABLE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_TEXT_VARIABLE_DISABLED = "REPORT_VARIABLES_TEXT_VAR_DISABLED";
oFF.OuVariableDialogI18nLegacy.I18N_VD_TRUE = "FIREFLY_DIALOGS_TRUE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NAME = "FIREFLY_DIALOGS_V2_HIERARCHY_NAME";
oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NODE = "FIREFLY_DIALOGS_V2_HIERARCHY_NODE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_MEMBER_ID = "FIREFLY_DIALOGS_V2_MEMBER_ID";
oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_STRING = "FIREFLY_DIALOGS_V2_VALUE_TYPE_STRING";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE = "FIREFLY_DIALOGS_VALUE_TYPE_DEFAULT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD = "FF_VD_VALUES_DISPLAY_DROPDOWN";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_DESC_ITEM = "FF_VD_VALUES_DISPLAY_DROPDOWN_DESCRIPTION_ITEM";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_DESC_ITEM = "FF_VD_VALUES_DISPLAY_DROPDOWN_ID_DESCRIPTION_ITEM";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_ITEM = "FF_VD_VALUES_DISPLAY_DROPDOWN_ID_ITEM";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE_HELP = "FIREFLY_DIALOGS_VALUE_HELP";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VARIABLE_VALUES_SET_TO = "FIREFLY_DIALOGS_VARIABLE_VALUES_SET_TO";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_DATE_VIEW_SELECT_DATE = "FIREFLY_DIALOGS_VH_MOBILE_DATE_VIEW_SELECT_DATE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_LIST_VIEW_SELECT = "FIREFLY_DIALOGS_VH_MOBILE_LIST_VIEW_SELECT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_NEXT_PAGE_TOOLTIP = "FIREFLY_DIALOGS_VH_MOBILE_OPERATOR_WORKFLOW_NEXT_PAGE_TOOLTIP";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_PREVIOUS_SELECTION = "FIREFLY_DIALOGS_VH_MOBILE_OPERATOR_WORKFLOW_PREVIOUS_SELECTION";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER = "FIREFLY_DIALOGS_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER1 = "FIREFLY_DIALOGS_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER1";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER2 = "FIREFLY_DIALOGS_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER2";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_OPERATOR = "FIREFLY_DIALOGS_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_OPERATOR";
oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_RANGE_DATE_VIEW_SELECT_DATE_RANGE = "FIREFLY_DIALOGS_VH_MOBILE_RANGE_DATE_VIEW_SELECT_DATE_RANGE";
oFF.OuVariableDialogI18nLegacy.I18N_VD_WARNING_MSG_NUMBER_FORMAT = "FIREFLY_DIALOGS_WARNING_NUMBER_FORMAT";
oFF.OuVariableDialogI18nLegacy.I18N_VD_WARN_VH_VALUES_NOT_FOUND = "FIREFLY_DIALOGS_WARN_VH_VALUES_NOT_FOUND";
oFF.OuVariableDialogI18nLegacy.getProvider = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName(oFF.VdVariableForm.COMPONENT_NAME);
};
oFF.OuVariableDialogI18nLegacy.staticSetup = function()
{
	let provider = new oFF.OuVariableDialogI18nLegacy();
	provider.setupProvider(oFF.VdVariableForm.COMPONENT_NAME, true);
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_OK, "#XBUT: Member selector ok button text");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_OK, "Ok");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_CANCEL, "#XBUT, 10: General text used in button to cancel from changes");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_CANCEL, "Cancel");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_CLEAR, "#XTOL: A button tooltip to clear all variable values.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CLEAR, "Clear");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES, "#XMSG, 100: General title of input variables dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES, "Set Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_FOR, "#XMSG, 100: Title of input variables dialog followed by the name of the model.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_FOR, "Set Variables for");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_PS, "#XMSG, 100: Title of input variables dialog for Planning Sequence.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_PS, "Set Variables for BPC Planning Sequence");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET, "#XMSG, 100: Text of ok button in input variable dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET, "Set");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE, "#XFLD, 20: Tooltip for a button to remove values");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DELETE, "Delete");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ENTER, "#XMSG: Placeholder text which value type to enter into an input field, e.g. 'Enter String'");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ENTER, "Enter {0}");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SELECT_MEMBER_FOR, "#XTIT, 40: Title of the select member dialog");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SELECT_MEMBER_FOR, "Select Member for {0}");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_ID, "#XMSG: Part of the placeholder text for an input that expects a dimension member id (\"Please enter Member ID\").");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_ID, "Member ID");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_MEMBER_ID, "#XMSG: Part of the placeholder text for an input that expects a dimension member id V2 (\"Please enter the ID for a member\").");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_MEMBER_ID, "the ID for a member");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NAME, "#XMSG: Placeholder text to enter a hierarchy name into an input field");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NAME, "Hierarchy Name");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NAME, "#XMSG: Placeholder text to enter a hierarchy name into an input field V2");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NAME, "the ID for a hierarchy");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NODE, "#XMSG: Placeholder text to enter a hierarchy node into an input field");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_HIERARCHY_NODE, "Hierarchy Node");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NODE, "#XMSG: Placeholder text to enter a hierarchy node into an input field V2");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_HIERARCHY_NODE, "the ID for a hierarchy node");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_STRING, "#XMSG: Value type of variable");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_STRING, "String");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_STRING, "#XMSG: Value type of variable V2");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_V2_STRING, "Text");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE, "#XMSG: Default value type of variable");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE, "Value");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_NUMBER, "#XMSG, 20: Value type of variable.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NUMBER, "Number");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_STORY_LEVEL, "#XMSG, 40: Option for story variables");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_STORY_LEVEL, "Use Story Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_APP_LEVEL, "#XMSG, 75: Option for analytic application variables");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_APP_LEVEL, "Use Analytic Application Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_CHART_LEVEL, "#XMSG, 40: Option for chart variables");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CHART_LEVEL, "Set Chart Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_TABLE_LEVEL, "#XMSG, 40: Option for table variables");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_TABLE_LEVEL, "Set Table Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY, "#XMSG: Label for the checkbox setting to show the variable dialog when viewers open the story.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY, "Automatically open prompt when story opens");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY_INFO, "#XMSG: Warning message for the Force Prompt setting");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_STORY_INFO, "This prompt will not show if all variables have been set by linked variables in other prompts.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_APP, "#XMSG, 120: Label for the checkbox setting to show the variable dialog when viewers open the analytic application.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_APP, "Automatically open prompt when analytic application opens");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_EXIT, "#XMSG: Label for the checkbox setting to disable exit variables in the variable dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_EXIT, "Keep last saved values for dynamic variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC, "#XMSG: Label for the checkbox setting to update the variable values automatically when viewers open the story.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC, "Disable Dynamic Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_PS, "#XMSG: Label for the checkbox setting to show the variable dialog when viewers trigger Planning Sequence.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_PS, "Automatically open prompt when planning sequence is triggered.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_NEW_FORCE_PROMPT_PS, "#XMSG: New label for the checkbox setting to show the variable dialog when viewers trigger Planning Sequence.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NEW_FORCE_PROMPT_PS, "Automatically open prompt when planning sequence is started.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_APPLY_VARIANT, "#XTIT, 25: Variables Dropdown title text for BW");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_APPLY_VARIANT, "Apply Variant");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_CHOOSE_VARIANT, "#XTIT, 50: Variables Dropdown no selection");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CHOOSE_VARIANT, "Choose variant to apply");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE_HELP, "#XMSG: Tooltip in the variable dialog for buttons opening the member selector");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUE_HELP, "Value Help");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_FILTER_INFO, "#XMSG, 100: Message that shows up when he/she hovers on a variable to see if there is a connected link.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_FILTER_INFO, "This variable is a BW dynamic filter.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_FOR_ALL_PAGES, "#XMSG, 40: Option for setting variables for all pages");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_FOR_ALL_PAGES, "Set for All Pages");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_FOR_CURRENT_PAGE, "#XMSG, 40: Option for setting variables for current page");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_FOR_CURRENT_PAGE, "Set for Current Page");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_CLIPBOARD_INFO, "#XMSG: Info text in the clipboard dialog describing the separation of interval values");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_CLIPBOARD_INFO, "Range values can be separated with comma or semicolon.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_NULL, "#XFLD, 30: represent null value as table row/column member");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NULL, "(Null)");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE, "#XFLD, 30: represent empty string as table row/column member");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VALUE, "(No Value)");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_LINK_INFO_MESSAGE, "#XMSG, 100: Message that shows up when he/she hovers on a variable to see if there is a connected link.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_LINK_INFO_MESSAGE, "This variable is linked with the following variables:");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_MANDATORY_VAR, "#XMSG, 100: Error text of variable input value validation.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_MANDATORY_VAR, "Please enter at least one member for {0}.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_VALUE_MISSING, "#XMSG: Error message indicating that a value is missing for a variable");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_VALUE_MISSING, "Value is missing");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_DOES_NOT_EXIST, "#XMSG, 40: Error message for dimension member does not exist");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MEMBER_DOES_NOT_EXIST, "Member ID does not exist.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_TEXT_VARIABLE_DISABLED, "#XMSG, 100: Message shown next to text variables on widget level.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_TEXT_VARIABLE_DISABLED, "Text variables can only be set on story level.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_NUMBER_VALIDATION, "#XMSG, 100: Error text of variable input value validation.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_NUMBER_VALIDATION, "Please input a decimal value.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_WARNING_MSG_NUMBER_FORMAT, "#XMSG: Warning meesage which indicates that the numeric user input will be formatted to the sac specified number format");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_WARNING_MSG_NUMBER_FORMAT, "The numeric value will be formatted to: {0}");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NULL, "#XMSG, 20: Operator display name");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NULL, "is null");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NOT_NULL, "#XMSG, 20: Operator display name");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NOT_NULL, "is not null");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_MATCH_TEXT, "#XMSG: comparison operator long text for contains pattern");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_MATCH_TEXT, "contains");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_EQUAL_TEXT, "#XMSG: comparison operator long text for '='");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_EQUAL_TEXT, "equal");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_EQUAL_TEXT, "#XMSG: comparison operator long text for '!='");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_EQUAL_TEXT, "not equal");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_TEXT, "#XMSG: comparison operator long text for '>'");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_TEXT, "greater than");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_EQUAL_TEXT, "#XMSG: comparison operator long text for '>='");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_EQUAL_TEXT, "greater than or equal");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_TEXT, "#XMSG: comparison operator long text for '<'");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_TEXT, "less than");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_EQUAL_TEXT, "#XMSG: comparison operator long text for '<='");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_EQUAL_TEXT, "less than or equal");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_BETWEEN_TEXT, "#XMSG: comparison operator long text for '[]'");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_BETWEEN_TEXT, "between");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_BETWEEN_TEXT, "#XMSG: comparison operator long text for '![]'");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_BETWEEN_TEXT, "not between");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_DATE_VALIDATION, "#XMSG, 100: Error text of variable input value validation.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERROR_MSG_DATE_VALIDATION, "Please enter a valid date.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_VARIABLE_INFO, "#XMSG, 150: Message that shows up when he/she hovers on a variable to see if there is a connected link.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DYNAMIC_VARIABLE_INFO, "This Dynamic Variable will be updated automatically, unless dynamic variables are disabled");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VARIABLES, "#XMSG, 100: Message show to user when there are variables.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_NO_VARIABLES, "There are no variables for this object.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_UNKNOWN_ERROR, "#XMSG: Error message indicating that an unexpected error occured during processing of variables.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_UNKNOWN_ERROR, "An unknown error has occurred.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR, "#XMSG: Error message indicating that the server responded with an error to a request with variable values.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VH_SERVER_ERROR, "A server error has occurred, and the values cannot be processed. Please try again later.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_WARN_VH_VALUES_NOT_FOUND, "#XMSG: Warning message indicating that a search for values was not complete.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_WARN_VH_VALUES_NOT_FOUND, "Some values could not be found and were not applied to the variable.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_SHORT, "#XMSG: Label for the checkbox setting to disable exit variables in the variable dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_SHORT, "Keep last saved values for dynamic variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_LONG, "#XMSG: Description in tooltip for the checkbox setting to disable exit variables in the variable dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SAVED_PROMPTS_FOR_DYNAMIC_LONG, "This option lets you use saved variables instead of Customer Exit, SAP Exit, SAP HANA Exit, or Authorization variables.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_MANDATORY_VARS_ONLY, "#XCKL: Label for the checkbox setting to show only mandatory variables in the dialog and hide the non-mandatory ones.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_MANDATORY_VARS_ONLY, "Show mandatory variables only");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_VARIABLE_TECHNICAL_NAMES, "#XCKL: Label for the checkbox setting to show variable technical names next to the variable titles.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SHOW_VARIABLE_TECHNICAL_NAMES, "Show variable technical names");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_LINKED_VARIABLE_NO_RESULTS, "#XFLD, 255: Indication that there are no results to a user performed search");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_LINKED_VARIABLE_NO_RESULTS, "There are no results for the searched member in the description section. It might be a fallback. Please try to search with ID.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_QUERIES_IN_PROCESSING, "#XTOL, 255: Notification message of blocking the variable dialog if submits are not yet finished");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_QUERIES_IN_PROCESSING, "Variable Dialog can not be open until submit is done.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VAR_SUBMIT_IN_PROCESSING, "#XTOL, 265: Notification message of blocking the variable dialog if submits are not yet finished");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ERR_VAR_SUBMIT_IN_PROCESSING, "Please wait until the ongoing variable submit is done.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_DATE_VIEW_SELECT_DATE, "#XMSG: Dialog title for the single date selection variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_DATE_VIEW_SELECT_DATE, "Select a date");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_RANGE_DATE_VIEW_SELECT_DATE_RANGE, "#XMSG: Dialog title for the range date selection variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_RANGE_DATE_VIEW_SELECT_DATE_RANGE, "Select a date range");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_LIST_VIEW_SELECT, "#XMSG: Dialog title for the list selection variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_LIST_VIEW_SELECT, "Select for {0}");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_OPERATOR, "#XMSG: Workflow page title for the operator selection in the operator workflow variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_OPERATOR, "Select Operator");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER, "#XMSG: Workflow page title for the single member selection in the operator workflow variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER, "Select Member");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER1, "#XMSG: Workflow page title for the first member selection in the operator workflow variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER1, "Select Member 1/2");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER2, "#XMSG: Workflow page title for the second member selection in the operator workflow variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_SELECT_MEMBER2, "Select Member 2/2");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_PREVIOUS_SELECTION, "#XMSG: Workflow page subtitle for the previous selected member display in the operator workflow variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_PREVIOUS_SELECTION, "Previous selection:");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_NEXT_PAGE_TOOLTIP, "#XMSG: Next page button tooltip in the operator workflow variable dialog mobile value help");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VH_MOBILE_OPERATOR_WORKFLOW_NEXT_PAGE_TOOLTIP, "Continue to next page");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_MISSING_LINK_WARNING, "#XMSG: message shown as member selector info text when variable links are no longer valid due to backend change");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_MISSING_LINK_WARNING, "Variable links associated with the current variable are no longer valid. The selected value will not be set to other linked variables.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VARIABLE_VALUES_SET_TO, "#XMSG: Warning shown in as a toast when variable values where changed by the backend.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VARIABLE_VALUES_SET_TO, "{0} values were changed by a server-side exit to:");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_EMPTY_CURRENCY_OPTION_TEXT, "#XMSG: Option that the user can pick so that currencies are not converted to a different currency.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_EMPTY_CURRENCY_OPTION_TEXT, "No Conversion");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_TRUE, "#XFLD: An entry in a dropdown for variables values of type boolean");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_TRUE, "True");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_FALSE, "#XFLD: An entry in a dropdown for variables values of type boolean");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FALSE, "False");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME, "#XFLD: The description of an input field where the user should enter the name of a variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME, "Name");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME, "#XFLD: The description of an input field where the user should enter the technical name of a variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME, "Technical Name");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TYPE, "#XFLD: The description of dropdown box where the user should pick the type of a variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TYPE, "Type");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_PERSONAL, "#XFLD: One of the variant types the user can pick, indicating the variant is only visible to him.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_PERSONAL, "Personal");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GLOBAL, "#XFLD: One of the variant types the user can pick, indicating the variant is visible for everybody.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GLOBAL, "Global");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GENERATED_ID, "#XFLD: Input field placeholder for the technical name, when it cannot be changed by the user.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GENERATED_ID, "Auto Generated");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_MANAGE, "#XTIT: The title of the popup where the user can modify variants.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_MANAGE, "Manage Variants");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE, "#XTIT: The title of the popup where the user can save a new variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE, "Save As Variant");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE, "#XBUT: A button with which the user can save the active variant and overwrite its values.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE, "Overwrite Variant with Current Settings");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_CURRENT, "#XBUT: A button with which the user can save the current values as a new variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_CURRENT, "Save Current Settings as New Variant");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_PLACEHOLDER, "#XMSG: A placeholder text for the variant name input field");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_PLACEHOLDER, "Enter name for variant");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_PLACEHOLDER, "#XMSG: A placeholder text for the variant technical name input field");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_PLACEHOLDER, "Enter technical name for variant");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_REQUIRED, "#XMSG: An error showing up when the user didn't enter a name for the variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_REQUIRED, "Name is required");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_REQUIRED, "#XMSG: An error showing up when the user didn't enter a technical name for the variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_REQUIRED, "Technical Name is required");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_UNIQUE, "#XMSG: An error showing up when the user entered a technical name that is already in use.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_UNIQUE, "Technical Name needs to be unique");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_UNIQUE, "#XMSG: An error showing up when the user entered a display name that is already in use.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_UNIQUE, "Name needs to be unique");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_SAVE, "#XMSG: A generic error when the server rejected saving a variant but stated no detailed reason.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_SAVE, "Variant could not be saved to due a server error.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_DELETE, "#XMSG: A generic error when the server rejected deleting a variant but stated no detailed reason.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_DELETE, "Variants could not be deleted to due a server error.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_CHANGE, "#XMSG: A generic error when the server rejected modifying a variant but stated no detailed reason.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_CHANGE, "Variants could not be modified to due a server error.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_SAVE, "#XBUT: The button to submit the popup dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_SAVE, "Save");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CANCEL, "#XBUT: The button to abort the popup dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CANCEL, "Cancel");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CLOSE, "#XBUT: The button to close the manage dialog.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CLOSE, "Done");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NONE, "#XTIT: An empty option in the variant dropdown, indicating no variant is selected.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NONE, "None");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_SUCCESS, "#XMSG: A toast message shown when a variant is successfully saved.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_SUCCESS, "Successfully saved variant.");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_WARNING, "#XTIT: The title of a dialog where the user is asked for confirmation.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_WARNING, "Warning");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE_CONFIRMATION, "#XMSG: The message of a dialog where the user is asked for deletion confirmation. Placeholder is the name of the variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE_CONFIRMATION, "Are you sure you want to delete \"{0}\"?");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE_CONFIRMATION, "#XMSG: The message of a dialog where the user is asked for overwrite confirmation. First placeholder is the scope of the variant (Personal/Global), second is the name of the variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_OVERWRITE_CONFIRMATION, "Are you sure you want to overwrite {0} variant \"{1}\"?");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_DELETE, "#XBUT: The button to confirm deleting a variant.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_DELETE, "Delete");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EMPTY, "#XMSG: Displayed when there are no variants to manage or all have been deleted.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EMPTY, "No variants available");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT, "#XTOL: A button tooltip to start editing a variant");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT, "Edit");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_ACCEPT, "#XTOL: A button tooltip to finish editing a variant");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_ACCEPT, "Accept");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_CANCEL, "#XTOL: A button tooltip to cancel editing a variant");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_CANCEL, "Cancel");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE, "#XTOL: A button tooltip to delete a variant");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE, "Delete");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DISPLAY_SECTION, "#XTIT: Title of the display section within the settings popover");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DISPLAY_SECTION, "Display");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_CLOSE, "#XBUT: Close button text within the settings popover");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_CLOSE, "Close");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_DISABLED_LONG, "#XMSG: information message to explain that the force prompt checkbox is disabled by a story setting");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_FORCE_PROMPT_DISABLED_LONG, "The variable prompt automatically opens when the story uses the setting \"Clear Variables and Use Server-Defined Values\".");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC_DISABLED_LONG, "#XMSG: information message to explain that the disable dynamic variables checkbox is disabled by a story setting");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_DISABLE_DYNAMIC_DISABLED_LONG, "The dynamic variables can't be used when the story uses the setting \"Clear Variables and Use Server-Defined Values\".");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD, "#XTIT: Title of the values display drop down.");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD, "Values Display");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_BTN, "XBUT: The settings popover button");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_BTN, "Settings");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_DESC_ITEM, "#XSEL: Description item in values display drop down");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_DESC_ITEM, "Description");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_ITEM, "#XSEL: ID item in values display drop down");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_ITEM, "ID");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_DESC_ITEM, "#XSEL: ID & Description item in values display drop down");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_VALUES_DISPLAY_DD_ID_DESC_ITEM, "ID and Description");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_OPERATOR_DROPDOWN_INVISIBLE_TEXT, "#XACT: The invisible text for the operator's drop down");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_OPERATOR_DROPDOWN_INVISIBLE_TEXT, "Operator");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_1_INVISIBLE_TEXT, "#XACT: The invisible text for the first input field");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_1_INVISIBLE_TEXT, "From");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_2_INVISIBLE_TEXT, "#XACT: The invisible text for the second input field");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INPUT_2_INVISIBLE_TEXT, "To");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DEFAULT_VALUES_SECTION, "#XTIT: Title of the default values section within the settings popover");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SETTINGS_POPOVER_DEFAULT_VALUES_SECTION, "Default Values");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_VARIABLES, "#XCOL: Column header for the variables column");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_VARIABLES, "Variables");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_MEMBERS_DESCRIPTION, "#XCOL: Column header for the members description column");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_COLUMN_HEADER_MEMBERS_DESCRIPTION, "Members Description");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_INFORMATION_ICON_TOOLTIP, "#XTOL: An icon tooltip to show information");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_INFORMATION_ICON_TOOLTIP, "Information");
	provider.addComment(oFF.OuVariableDialogI18nLegacy.I18N_VD_ICON_INVISIBLE_TEXT, "#XACT: The invisible text for an icon");
	provider.addText(oFF.OuVariableDialogI18nLegacy.I18N_VD_ICON_INVISIBLE_TEXT, "Button");
	return provider;
};

oFF.VdOrcaEntryPoint = function() {};
oFF.VdOrcaEntryPoint.prototype = new oFF.VdOrcaFacade();
oFF.VdOrcaEntryPoint.prototype._ff_c = "VdOrcaEntryPoint";

oFF.VdOrcaEntryPoint.createEntryPointDisplay = function(params, listener)
{
	let obj = new oFF.VdOrcaEntryPoint();
	obj.setupEntryPoint(params);
	obj.setDisplay(oFF.VdVariableDialog.createAsDisplay(obj.m_context, obj.m_config, listener));
	obj.setupController();
	return obj;
};
oFF.VdOrcaEntryPoint.createEntryPointToken = function(params)
{
	let obj = new oFF.VdOrcaEntryPoint();
	obj.setupEntryPoint(params);
	obj.setToken(oFF.VdVariableForm.createAsToken(obj.m_context, obj.m_config));
	obj.setupController();
	return obj;
};
oFF.VdOrcaEntryPoint.variableIsUsedInDynamicFilter = function(variable)
{
	if (!variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return false;
	}
	let dimVar = variable;
	return dimVar.isUsedInDynamicFilter() && dimVar.getDimension().getAxisType() !== oFF.AxisType.REPOSITORY;
};
oFF.VdOrcaEntryPoint.prototype.m_config = null;
oFF.VdOrcaEntryPoint.prototype.m_context = null;
oFF.VdOrcaEntryPoint.prototype.m_i18n = null;
oFF.VdOrcaEntryPoint.prototype.m_level = null;
oFF.VdOrcaEntryPoint.prototype.m_linkTooltips = null;
oFF.VdOrcaEntryPoint.prototype.m_params = null;
oFF.VdOrcaEntryPoint.prototype.m_readOnly = false;
oFF.VdOrcaEntryPoint.prototype.m_scenario = null;
oFF.VdOrcaEntryPoint.prototype.m_storyEditable = false;
oFF.VdOrcaEntryPoint.prototype.m_storyValues = null;
oFF.VdOrcaEntryPoint.prototype.m_title = null;
oFF.VdOrcaEntryPoint.prototype.m_variablesToDisplay = null;
oFF.VdOrcaEntryPoint.prototype.m_widgetValues = null;
oFF.VdOrcaEntryPoint.prototype.addDimensionDisplayInfoToConfig = function(config, variables)
{
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let dimName = variable.getDimension().getName();
			let isHana = oFF.notNull(this.m_params.queryManager) && this.m_params.queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA);
			let defaultDisplayInfo = isHana ? oFF.FilterDisplayInfo.DESCRIPTION : oFF.FilterDisplayInfo.QUERY_DEFAULT;
			config.addDimensionDisplayInfo(dimName, oFF.VdOrcaValueParser.mapOrcaDisplayInfo(dimName, this.m_params.dimensionDisplayInfo, defaultDisplayInfo));
		}
	}
};
oFF.VdOrcaEntryPoint.prototype.extractParams = function(variables)
{
	this.m_title = this.m_params.title;
	this.m_storyEditable = !!this.m_params.storyEditable;
	this.m_readOnly = !!this.m_params.readOnly;
	this.m_linkTooltips = this.m_params.linkTooltips;
	this.m_linkedVariableNames = this.m_linkTooltips.getKeysAsReadOnlyList();
	this.m_scenario = this.getScenario();
	this.m_level = this.getLevel();
	this.mergeVariableValues(variables);
	this.m_variablesToDisplay = oFF.XHashSetOfString.create();
	if (this.m_scenario === oFF.VdOrcaScenario.LINKED_VARIABLE && oFF.XCollectionUtils.hasElements(this.m_params.linkedVariables))
	{
		let linked = this.m_params.linkedVariables;
		for (let i = 0; i < linked.size(); i++)
		{
			let varName = linked.getStringAt(i);
			this.m_variablesToDisplay.add(varName);
		}
	}
	if (oFF.XCollectionUtils.hasElements(this.m_params.variablesToDisplay))
	{
		this.m_variablesToDisplay.addAll(this.m_params.variablesToDisplay);
	}
};
oFF.VdOrcaEntryPoint.prototype.getAnalyticVariableProcessor = function()
{
	if (oFF.notNull(this.m_params.analyticVarProcessor))
	{
		return this.m_params.analyticVarProcessor;
	}
	return this.m_params.queryManager;
};
oFF.VdOrcaEntryPoint.prototype.getItemWithSupplementsByKey = function(values, key)
{
	if (oFF.notNull(values))
	{
		for (let i = 0; i < values.size(); i++)
		{
			let value = values.get(i);
			if (this.isOperandWithKeyAndSupplements(value.getFirstOperand(), key))
			{
				return value.getFirstOperand();
			}
			if (this.isOperandWithKeyAndSupplements(value.getSecondOperand(), key))
			{
				return value.getSecondOperand();
			}
		}
	}
	return null;
};
oFF.VdOrcaEntryPoint.prototype.getLevel = function()
{
	if (this.m_params.isPlanningSequence)
	{
		return oFF.VdOrcaLevel.DEFAULT;
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_params.singleVariableKey))
	{
		return oFF.VdOrcaLevel.FILTER;
	}
	if (!!this.m_params.showChartVariables || !!this.m_params.preSetVariablesEditable || this.m_scenario !== oFF.VdOrcaScenario.STORY && !!this.m_params.isWidget)
	{
		return !!this.m_params.useTableMessage ? oFF.VdOrcaLevel.TABLE : oFF.VdOrcaLevel.CHART;
	}
	if (!!this.m_params.isWidget)
	{
		return oFF.VdOrcaLevel.EXPLORER;
	}
	return oFF.VdOrcaLevel.DEFAULT;
};
oFF.VdOrcaEntryPoint.prototype.getScenario = function()
{
	if (this.m_params.isPlanningSequence)
	{
		return oFF.VdOrcaScenario.PLANNING_SEQUENCE;
	}
	if (!!this.m_params.analyticApp)
	{
		return oFF.VdOrcaScenario.ANALYTIC_APP;
	}
	if (this.m_params.isPublication)
	{
		return oFF.VdOrcaScenario.SCHEDULING;
	}
	if (oFF.notNull(this.m_params.linkedVariables))
	{
		return oFF.VdOrcaScenario.LINKED_VARIABLE;
	}
	if (this.m_params.datasetVariablesEditable && this.m_params.preSetVariablesEditable)
	{
		return oFF.VdOrcaScenario.BOARD_ROOM;
	}
	return oFF.VdOrcaScenario.STORY;
};
oFF.VdOrcaEntryPoint.prototype.getStartValues = function()
{
	if (this.getUseWidgetInitialValue())
	{
		return this.m_widgetValues;
	}
	return this.m_storyValues;
};
oFF.VdOrcaEntryPoint.prototype.getTitle = function()
{
	if (this.m_scenario === oFF.VdOrcaScenario.PLANNING_SEQUENCE)
	{
		return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_PS);
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_title) && this.m_scenario !== oFF.VdOrcaScenario.LINKED_VARIABLE)
	{
		return oFF.XStringUtils.concatenate3(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES_FOR), " ", this.m_title);
	}
	return this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET_VARIABLES);
};
oFF.VdOrcaEntryPoint.prototype.getUseWidgetInitialValue = function()
{
	return this.m_level === oFF.VdOrcaLevel.EXPLORER || (!!this.m_params.isWidget || !!this.m_params.presetVariablesSelected) && oFF.XCollectionUtils.hasElements(this.m_params.preSetVariables);
};
oFF.VdOrcaEntryPoint.prototype.getVariableProcessorInternal = function()
{
	if (oFF.notNull(this.m_params.varProcessor))
	{
		return this.m_params.varProcessor;
	}
	return this.getAnalyticVariableProcessor();
};
oFF.VdOrcaEntryPoint.prototype.hasDynamicVariables = function()
{
	return this.m_vdController.hasDynamicVariables();
};
oFF.VdOrcaEntryPoint.prototype.isOperandWithKeyAndSupplements = function(operand, key)
{
	return oFF.notNull(operand) && oFF.XString.isEqual(key, operand.getKey()) && (operand.getDisplayKey() !== null || operand.getText() !== null);
};
oFF.VdOrcaEntryPoint.prototype.mergeVariableValues = function(variables)
{
	let variableProcessor = this.getVariableProcessorInternal();
	this.m_storyValues = oFF.VdOrcaValueParser.parseJsonToStartValues(this.m_params.datasetVariables, variableProcessor, this.m_linkedVariableNames);
	this.m_widgetValues = oFF.VdOrcaValueParser.parseJsonToStartValues(this.m_params.preSetVariables, variableProcessor, this.m_linkedVariableNames);
	let orcaFilterValues = oFF.VdOrcaValueParser.parseJsonToStartValues(this.m_params.filterVariables, variableProcessor, this.m_linkedVariableNames);
	let processorValues = oFF.VdImportExport.getValuesFromProcessor(variableProcessor);
	let dynamicFilterValues = oFF.VdImportExport.getDynamicFilterValuesFromProcessor(variableProcessor);
	if (oFF.isNull(this.m_storyValues))
	{
		if (this.m_scenario === oFF.VdOrcaScenario.LINKED_VARIABLE && oFF.notNull(this.m_widgetValues))
		{
			this.m_storyValues = this.m_widgetValues.createMapByStringCopy();
		}
		else
		{
			this.m_storyValues = processorValues;
		}
	}
	if (oFF.isNull(this.m_widgetValues))
	{
		this.m_widgetValues = oFF.XHashMapByString.create();
	}
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		let varName = variable.getName();
		let processorValuesByVariable = processorValues.getByKey(varName);
		if (oFF.notNull(orcaFilterValues) && orcaFilterValues.getByKey(varName) !== null && (this.m_level === oFF.VdOrcaLevel.CHART || this.m_level === oFF.VdOrcaLevel.TABLE) && oFF.VdOrcaEntryPoint.variableIsUsedInDynamicFilter(variable) && oFF.VdImportExport.useDynamicFilterForVariable(variable))
		{
			this.m_widgetValues.put(varName, orcaFilterValues.getByKey(varName));
		}
		else if (dynamicFilterValues.getByKey(varName) !== null && (this.m_level === oFF.VdOrcaLevel.CHART || this.m_level === oFF.VdOrcaLevel.TABLE) && oFF.VdOrcaEntryPoint.variableIsUsedInDynamicFilter(variable))
		{
			let dynamicFilterValue = dynamicFilterValues.getByKey(varName);
			this.updateValuesSupplements(dynamicFilterValue, this.m_storyValues.getByKey(varName), this.m_widgetValues.getByKey(varName));
			this.m_widgetValues.put(varName, dynamicFilterValue);
		}
		else
		{
			this.updateWidgetVariableValues(varName, processorValuesByVariable);
		}
	}
};
oFF.VdOrcaEntryPoint.prototype.onBeforeSubmit = function(values, valuesJson)
{
	if (oFF.notNull(this.m_params.queryManager))
	{
		let isHana = this.m_params.queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA);
		let dataSource = this.m_params.queryManager.getDataSource();
		let disablingExitVariables = isHana ? this.m_uiHelper.isDisablingDynamicVariables() : this.m_uiHelper.isDisablingExitVariables();
		oFF.XStream.of(this.getVariableProcessor().getOlapEnv().getAllAreaQueryManagerActive()).filter((qm1) => {
			return !qm1.getOlapComponentType().isEqualTo(oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER);
		}).filter((qm2) => {
			return qm2.getDataSource().isEqualTo(dataSource);
		}).forEach((qm3) => {
			qm3.setUseSavedPromptsForExitVariables(disablingExitVariables);
		});
	}
	this.getSubmitListener().onBeforeSubmit(values, valuesJson);
};
oFF.VdOrcaEntryPoint.prototype.releaseObject = function()
{
	this.m_params = null;
	this.m_scenario = null;
	this.m_level = null;
	this.m_context = oFF.XObjectExt.release(this.m_context);
	this.m_storyValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_storyValues);
	this.m_widgetValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_widgetValues);
	this.m_linkTooltips = oFF.XObjectExt.release(this.m_linkTooltips);
	this.m_variablesToDisplay = oFF.XObjectExt.release(this.m_variablesToDisplay);
	oFF.VdOrcaFacade.prototype.releaseObject.call( this );
};
oFF.VdOrcaEntryPoint.prototype.setupController = function()
{
	let linkedVariableNames = oFF.XList.create();
	if (this.m_params.linkTooltips.hasElements())
	{
		let linkVarManager = oFF.OrcaLinkVarManager.createWithController(this.m_vdController);
		if (this.m_params.linkVarSubmitHandling === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_DIRECT)
		{
			linkVarManager.activateSubmitLinked();
		}
		else if (this.m_params.linkVarSubmitHandling === oFF.OrcaLinkVarSubmitHandling.SUBMIT_LINKED_RECURSIVE)
		{
			linkVarManager.activateSubmitAll(this.m_params.linkVarHelper);
		}
		let keys = this.m_params.linkTooltips.getKeysAsIterator();
		while (keys.hasNext())
		{
			let varName = keys.next();
			let mainVariable = this.getVariableProcessorInternal().getVariable(varName);
			let linkage = this.m_params.linkage.getByKey(varName);
			if (oFF.isNull(linkage) || linkage.getSecondObject().size() !== this.m_params.linkTooltips.getByKey(varName).size())
			{
				linkVarManager.setHasMissingLink(mainVariable);
			}
			else
			{
				linkVarManager.addLinks(mainVariable, linkage.getSecondObject(), linkage.getFirstObject());
			}
		}
		let skipVariables = this.m_params.linkSkipSubmit.getIterator();
		while (skipVariables.hasNext())
		{
			let skip = skipVariables.next();
			let queryManager = skip.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				linkVarManager.setSkipSubmitOfLinkedQm(queryManager);
			}
		}
		this.m_vdController.setExternalStateHandler(linkVarManager);
		this.m_vdController.setValueHelpProcessorProvider(linkVarManager);
		linkedVariableNames = linkVarManager.getLinkedVariableNames();
	}
	if (this.m_params.isPlanningSequence)
	{
		let aProcessor = this.getAnalyticVariableProcessor();
		let aValues = oFF.isNull(aProcessor) ? oFF.XHashMapByString.create() : oFF.VdOrcaValueParser.parseJsonToStartValues(this.m_params.datasetVariables, aProcessor, this.m_linkedVariableNames);
		let synchronizer = oFF.VdOrcaPlanningSequenceHandler.create(this.m_vdController.getStateHandler(), aProcessor, aValues);
		this.m_vdController.setExternalStateHandler(synchronizer);
	}
	let uiConfig = oFF.VdOrcaUiHelperConfig.createConfig(this.m_scenario, this.m_level);
	let variableProcessorInternal = this.getVariableProcessorInternal();
	uiConfig.setUseBottomLevelVariables(this.getUseWidgetInitialValue());
	uiConfig.setStoryEditable(this.m_storyEditable);
	uiConfig.setReadOnly(this.m_readOnly);
	uiConfig.setForcePrompt(this.m_scenario === oFF.VdOrcaScenario.PLANNING_SEQUENCE ? !!this.m_params.forcePromptExec : !!this.m_params.forcePrompt);
	uiConfig.setShowVariantSection(!!this.m_params.showVariantSection);
	uiConfig.setTopLevelUsingDynamicVariables(this.m_params.isStoryUsingDynamicVariables);
	uiConfig.setBottomLevelUsingDynamicVariables(this.m_params.isWidgetUsingDynamicVariables);
	uiConfig.setDisableExit(!!this.m_params.disableExitVariables);
	uiConfig.setDisableVariablePersistenceOptions(this.m_params.disableVariablePersistenceOptions);
	uiConfig.setInfoText(this.m_params.infoText);
	uiConfig.setLinkedModelsText(this.m_params.linkedModelsText);
	uiConfig.setCustomStoryButtonText(this.m_params.customStoryButtonText);
	uiConfig.setBoardRoomParentLevelText(this.m_params.datasetVariablesButtonText);
	uiConfig.setBoardRoomChildLevelText(this.m_params.presetVariablesButtonText);
	uiConfig.setWidgetLevelWarnings(this.m_params.m_widgetLevelWarnings);
	uiConfig.setLinkTooltips(this.m_linkTooltips);
	uiConfig.setTopLevelValues(this.m_storyValues);
	uiConfig.setBottomLevelValues(this.m_widgetValues);
	let isAlignBwHanaDynamicVariablesToggleEnabled = variableProcessorInternal.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_ALIGN_BW_HANA_DYNAMIC_VARIABLES);
	let isVdV2ToggleEnabled = variableProcessorInternal.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_PHASE2);
	uiConfig.setAlignBwHanaDynamicVariables(isVdV2ToggleEnabled && isAlignBwHanaDynamicVariablesToggleEnabled);
	uiConfig.setShowExitVariableSection(this.m_scenario === oFF.VdOrcaScenario.SCHEDULING);
	uiConfig.setShowDynamicVariableSection(this.m_scenario === oFF.VdOrcaScenario.SCHEDULING);
	this.setupExt(oFF.VdOrcaUiHelper.createUiHelper(this.m_vdController, uiConfig), linkedVariableNames);
};
oFF.VdOrcaEntryPoint.prototype.setupEntryPoint = function(params)
{
	this.m_params = params;
	let variableProcessorInternal = this.getVariableProcessorInternal();
	let variables = variableProcessorInternal.getInputEnabledAndNonTechnicalVariables();
	this.extractParams(variables);
	let uiMgr = variableProcessorInternal.getApplication().getUiManager();
	let displayFactory = oFF.notNull(params.displayFactory) ? params.displayFactory : oFF.OlapUiDisplayFactory.createFactoryForDialog(uiMgr);
	this.m_context = oFF.OlapUiContext.createContext(uiMgr, displayFactory);
	this.m_i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	this.m_config = oFF.VdConfiguration.createConfig(this.getTitle(), variableProcessorInternal);
	this.m_config.setStartValues(this.getStartValues());
	this.m_config.setDateDisplayFormat(this.m_params.dateDisplayFormat);
	this.m_config.setVariablesToDisplay(this.m_variablesToDisplay);
	this.m_config.setTextVariablesEnabled(!this.m_level.isTypeOf(oFF.VdOrcaLevel.WIDGET));
	this.m_config.setAutoSubmitOnStartup(uiMgr.getSession().getEnvironment().getBooleanByKey(oFF.OrcaConstants.URL_PARAM_AUTO_SUBMIT));
	this.m_config.setLinkedVariableNames(this.m_linkedVariableNames);
	this.m_config.setImplicitSubmit(!this.m_params.isPublication);
	this.m_config.setStartValuesJson(oFF.VdValueFormat.SAC, null);
	this.m_config.setNewSettingsEnabled(this.m_level !== oFF.VdOrcaLevel.FILTER && variableProcessorInternal.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_MORE_SETTINGS));
	let isFilterLevel = this.m_level === oFF.VdOrcaLevel.FILTER;
	let isVdV2ToggleEnabled = variableProcessorInternal.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_PHASE2);
	let isVdV2EmbeddedToggleEnabled = variableProcessorInternal.getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.VD_REDESIGN_PHASE2_EMBEDDED);
	this.m_config.setSettingsPopoverEnabled(!isFilterLevel && (this.m_config.isSettingsPopoverEnabled() || isVdV2ToggleEnabled));
	if (isFilterLevel)
	{
		this.m_config.setGridLayoutEnabled(isVdV2EmbeddedToggleEnabled);
		this.m_config.setMultiInputComponentEnabled(isVdV2EmbeddedToggleEnabled);
	}
	else
	{
		this.m_config.setGridLayoutEnabled(this.m_config.isGridLayoutEnabled() || isVdV2ToggleEnabled);
		this.m_config.setMultiInputComponentEnabled(this.m_config.isMultiInputComponentEnabled() || isVdV2ToggleEnabled);
	}
	this.addDimensionDisplayInfoToConfig(this.m_config, variables);
	let isBw = oFF.isNull(this.m_params.queryManager) || this.m_params.queryManager.getSystemType().isTypeOf(oFF.SystemType.ABAP);
	this.m_config.setUseDatePicker(isBw);
	this.m_config.hideOperatorNotBetween(!isBw);
	oFF.VdOrcaFacade.configureVariantManagement(variableProcessorInternal, this.m_config);
};
oFF.VdOrcaEntryPoint.prototype.submit = function()
{
	this.m_vdController.attemptSubmit();
};
oFF.VdOrcaEntryPoint.prototype.updateValueSupplements = function(filterValue, operand, operandIndex, storyValues, widgetValues)
{
	let key = operand.getKey();
	if (oFF.notNull(key) && !operand.hasDisplayKey() && operand.getText() === null)
	{
		let item = this.getItemWithSupplementsByKey(widgetValues, key);
		if (oFF.isNull(item))
		{
			item = this.getItemWithSupplementsByKey(storyValues, key);
		}
		if (oFF.notNull(item))
		{
			filterValue.setOperand(operandIndex, item);
		}
	}
};
oFF.VdOrcaEntryPoint.prototype.updateValuesSupplements = function(filterValues, storyValues, widgetValues)
{
	for (let i = 0; i < filterValues.size(); i++)
	{
		let value = filterValues.get(i);
		this.updateValueSupplements(value, value.getFirstOperand(), oFF.VdValue.FIRST, storyValues, widgetValues);
		this.updateValueSupplements(value, value.getSecondOperand(), oFF.VdValue.SECOND, storyValues, widgetValues);
	}
};
oFF.VdOrcaEntryPoint.prototype.updateWidgetVariableValues = function(varName, processorValues)
{
	if (this.m_widgetValues.getByKey(varName) === null)
	{
		let storyValues = this.m_storyValues.getByKey(varName);
		if (oFF.notNull(storyValues))
		{
			this.m_widgetValues.put(varName, storyValues);
		}
		else if (oFF.notNull(processorValues))
		{
			this.m_storyValues.put(varName, processorValues);
			this.m_widgetValues.put(varName, processorValues);
		}
	}
};

oFF.OuDataProviderCreatorI18n = function() {};
oFF.OuDataProviderCreatorI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.OuDataProviderCreatorI18n.prototype._ff_c = "OuDataProviderCreatorI18n";

oFF.OuDataProviderCreatorI18n.ADDED_TO_DP_POOL_SUCCESS = "FF_DATA_PROVIDER_DIALOG_ADDED_TO_DP_POOL_SUCCESS";
oFF.OuDataProviderCreatorI18n.ADDED_TO_SHARED_SPACE_SUCCESS = "FF_DATA_PROVIDER_DIALOG_ADDED_TO_SHARED_SPACE_SUCCESS";
oFF.OuDataProviderCreatorI18n.ADD_TO_DP_POOL = "FF_DATA_PROVIDER_DIALOG_ADD_TO_DP_POOL";
oFF.OuDataProviderCreatorI18n.ADD_TO_SHARED_SPACE = "FF_DATA_PROVIDER_DIALOG_ADD_TO_SHARED_SPACE";
oFF.OuDataProviderCreatorI18n.DATA_SOURCE_LABEL = "FF_DATA_PROVIDER_DIALOG_DATA_SOURCE";
oFF.OuDataProviderCreatorI18n.DP_NAME = "FF_DATA_PROVIDER_DIALOG_DP_NAME";
oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_DP_POOL = "FF_DATA_PROVIDER_DIALOG_DP_NAME_ALREADY_EXISTS_IN_DP_POOL";
oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_SHARED_SPACE = "FF_DATA_PROVIDER_DIALOG_DP_NAME_ALREADY_EXISTS_IN_SHARED_SPACE";
oFF.OuDataProviderCreatorI18n.DP_POOL_NOT_FOUND = "FF_DATA_PROVIDER_DIALOG_DP_POOL_NOT_FOUND";
oFF.OuDataProviderCreatorI18n.MESSAGES = "FF_DATA_PROVIDER_DIALOG_MESSAGES";
oFF.OuDataProviderCreatorI18n.SELECT = "FF_DATA_PROVIDER_DIALOG_SELECT";
oFF.OuDataProviderCreatorI18n.SHARED_SPACE_NOT_FOUND = "FF_DATA_PROVIDER_DIALOG_SHARED_SPACE_NOT_FOUND";
oFF.OuDataProviderCreatorI18n.TITLE = "FF_DATA_PROVIDER_DIALOG_TITLE";
oFF.OuDataProviderCreatorI18n.staticSetup = function()
{
	let tmpProvider = new oFF.OuDataProviderCreatorI18n();
	tmpProvider.setupProvider(oFF.OuDataProviderCreator.DEFAULT_PROGRAM_NAME, true);
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.TITLE, "Create Data Provider");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.TITLE, "#XTIT: Title of Data Provider creation program");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.DATA_SOURCE_LABEL, "Data Source: ");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.DATA_SOURCE_LABEL, "#XFLD: Label displayed beside select data source button");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.SELECT, "Select");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.SELECT, "#XBUT: Text displayed on Data source selection button");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.MESSAGES, "Messages");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.MESSAGES, "#XTIT: Title for messages view");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.DP_NAME, "Data Provider name");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.DP_NAME, "#XFLD: Label displayed beside data provider name input");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.ADD_TO_SHARED_SPACE, "Add to Shared Data Space");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.ADD_TO_SHARED_SPACE, "#XCKL: Label for 'Add to shared Data Space' checkbox");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.ADD_TO_DP_POOL, "Add to Data Provider Pool");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.ADD_TO_DP_POOL, "#XCKL: Label for 'Add to Data Provider Pool' checkbox");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.ADDED_TO_SHARED_SPACE_SUCCESS, "Data provider added to Shared Data Space.");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.ADDED_TO_SHARED_SPACE_SUCCESS, "#XMSG: Success message shown when data provider is added to shared data space");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_SHARED_SPACE, "Data provider name already exists in Shared Data Space.");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_SHARED_SPACE, "#XMSG: Error message shown when data provider name already exists");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.SHARED_SPACE_NOT_FOUND, "Shared Data Space not found. Failed to add Data provider.");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.SHARED_SPACE_NOT_FOUND, "#XMSG: Error message shown when shared data space is not available");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.ADDED_TO_DP_POOL_SUCCESS, "Data provider added to Data Provider Pool.");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.ADDED_TO_DP_POOL_SUCCESS, "#XMSG: Success message shown when data provider is added to data provider pool");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_DP_POOL, "Data provider name already exists in Data Provider Pool.");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_DP_POOL, "#XMSG: Error message shown when data provider name already exists in pool");
	tmpProvider.addText(oFF.OuDataProviderCreatorI18n.DP_POOL_NOT_FOUND, "Data Provider Pool not found. Failed to add Data provider.");
	tmpProvider.addComment(oFF.OuDataProviderCreatorI18n.DP_POOL_NOT_FOUND, "#XMSG: Error message shown when data provider pool is not available");
	return tmpProvider;
};

oFF.OuQueryController = function() {};
oFF.OuQueryController.prototype = new oFF.XObject();
oFF.OuQueryController.prototype._ff_c = "OuQueryController";

oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER = "gdsQbExternalQm";
oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ = null;
oFF.OuQueryController.FIRST_QM_IDENTIFIER_OBJ = null;
oFF.OuQueryController.FIRST_TRIGGER_IDENTIFIER = "gdsQbFirstTrigger";
oFF.OuQueryController.INTERNAL_QM_IDENTIFIER_OBJ = null;
oFF.OuQueryController.INTERNAL_TRIGGER_IDENTIFIER = "gdsQbInternalTrigger";
oFF.OuQueryController.PAGING_ACTION_ID = "pagingAction";
oFF.OuQueryController.PAGING_ACTION_IDENTIFIER_OBJ = null;
oFF.OuQueryController.UNDO_REDO_ACTION_ID = "undoRedoActionTrigger";
oFF.OuQueryController.UNDO_REDO_ACTION_IDENTIFIER_OBJ = null;
oFF.OuQueryController.create = function(application)
{
	let newQueryController = new oFF.OuQueryController();
	newQueryController.setupQueryController(application);
	return newQueryController;
};
oFF.OuQueryController.staticSetup = function()
{
	oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ = oFF.XStringValue.create(oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER);
	oFF.OuQueryController.FIRST_QM_IDENTIFIER_OBJ = oFF.XStringValue.create(oFF.OuQueryController.FIRST_TRIGGER_IDENTIFIER);
	oFF.OuQueryController.INTERNAL_QM_IDENTIFIER_OBJ = oFF.XStringValue.create(oFF.OuQueryController.INTERNAL_TRIGGER_IDENTIFIER);
	oFF.OuQueryController.UNDO_REDO_ACTION_IDENTIFIER_OBJ = oFF.XStringValue.create(oFF.OuQueryController.UNDO_REDO_ACTION_ID);
	oFF.OuQueryController.PAGING_ACTION_IDENTIFIER_OBJ = oFF.XStringValue.create(oFF.OuQueryController.PAGING_ACTION_ID);
};
oFF.OuQueryController.prototype.m_activeResultSetContainer = null;
oFF.OuQueryController.prototype.m_application = null;
oFF.OuQueryController.prototype.m_autoSubmit = false;
oFF.OuQueryController.prototype.m_backendRequestFinishedProcedure = null;
oFF.OuQueryController.prototype.m_backendRequestStartedProcedure = null;
oFF.OuQueryController.prototype.m_busyStateChangedConsumer = null;
oFF.OuQueryController.prototype.m_canceledUpdate = false;
oFF.OuQueryController.prototype.m_clientInfo = null;
oFF.OuQueryController.prototype.m_clientInfoEnabled = false;
oFF.OuQueryController.prototype.m_columnsWindowFactor = 0;
oFF.OuQueryController.prototype.m_columnsWindowSize = 0;
oFF.OuQueryController.prototype.m_commercialMinusEnabled = false;
oFF.OuQueryController.prototype.m_controllerResetProcedure = null;
oFF.OuQueryController.prototype.m_criticalErrorConsumer = null;
oFF.OuQueryController.prototype.m_dataProvider = null;
oFF.OuQueryController.prototype.m_defaultQueryManagerSettings = null;
oFF.OuQueryController.prototype.m_disableExitVariables = false;
oFF.OuQueryController.prototype.m_dynamicFilterSerialisation = null;
oFF.OuQueryController.prototype.m_enableResultSetCache = false;
oFF.OuQueryController.prototype.m_forceInitialVariableDialog = false;
oFF.OuQueryController.prototype.m_forceRepoFormat = false;
oFF.OuQueryController.prototype.m_horizontalLazyLoad = false;
oFF.OuQueryController.prototype.m_implicitVariableHandling = false;
oFF.OuQueryController.prototype.m_inaRepoJson = null;
oFF.OuQueryController.prototype.m_initialDataSourceText = null;
oFF.OuQueryController.prototype.m_initialFilters = null;
oFF.OuQueryController.prototype.m_initialVariableDialogWasOpened = false;
oFF.OuQueryController.prototype.m_initialVariables = null;
oFF.OuQueryController.prototype.m_isBusy = false;
oFF.OuQueryController.prototype.m_isExternalDataProvider = false;
oFF.OuQueryController.prototype.m_isExternalQueryManager = false;
oFF.OuQueryController.prototype.m_isInitialVariableSubmitDone = false;
oFF.OuQueryController.prototype.m_isQueryManagerSetupFinished = false;
oFF.OuQueryController.prototype.m_isResetAction = false;
oFF.OuQueryController.prototype.m_maxColumnsLoad = 0;
oFF.OuQueryController.prototype.m_maxColumnsWindowSize = 0;
oFF.OuQueryController.prototype.m_maxRowsLoad = 0;
oFF.OuQueryController.prototype.m_maxRowsWindowSize = 0;
oFF.OuQueryController.prototype.m_messageConsumer = null;
oFF.OuQueryController.prototype.m_messageManager = null;
oFF.OuQueryController.prototype.m_modelJson = null;
oFF.OuQueryController.prototype.m_newDataProviderReadyConsumer = null;
oFF.OuQueryController.prototype.m_oldDataProviderToRelease = null;
oFF.OuQueryController.prototype.m_overrideAutoSubmitOnStartup = false;
oFF.OuQueryController.prototype.m_pendingResultUpdates = null;
oFF.OuQueryController.prototype.m_pendingUpdates = false;
oFF.OuQueryController.prototype.m_queryListener = null;
oFF.OuQueryController.prototype.m_queryListenerExternal = null;
oFF.OuQueryController.prototype.m_queryManager = null;
oFF.OuQueryController.prototype.m_queryModelDefaultTextsApplicator = null;
oFF.OuQueryController.prototype.m_queryStateChanged = null;
oFF.OuQueryController.prototype.m_renderingPauseEndListeners = null;
oFF.OuQueryController.prototype.m_rescheduled = false;
oFF.OuQueryController.prototype.m_responseOverrideTexts = null;
oFF.OuQueryController.prototype.m_resultEmptyListeners = null;
oFF.OuQueryController.prototype.m_resultListenerId = null;
oFF.OuQueryController.prototype.m_resultReadyListeners = null;
oFF.OuQueryController.prototype.m_rowsWindowFactor = 0;
oFF.OuQueryController.prototype.m_rowsWindowSize = 0;
oFF.OuQueryController.prototype.m_scheduleExportHelper = null;
oFF.OuQueryController.prototype.m_setupInterruptedConsumer = null;
oFF.OuQueryController.prototype.m_setupStepChangedConsumer = null;
oFF.OuQueryController.prototype.m_status = null;
oFF.OuQueryController.prototype.m_statusChangedConsumer = null;
oFF.OuQueryController.prototype.m_statusMessage = null;
oFF.OuQueryController.prototype.m_timeoutReschedule = null;
oFF.OuQueryController.prototype.m_timeoutResultSet = null;
oFF.OuQueryController.prototype.m_undoRedoCorrelationId = null;
oFF.OuQueryController.prototype.m_updatesPaused = false;
oFF.OuQueryController.prototype.m_useDpAutoFetch = false;
oFF.OuQueryController.prototype.m_variableDialog = null;
oFF.OuQueryController.prototype.m_variableDialogConfigSupplier = null;
oFF.OuQueryController.prototype._getDefaultQueryManagerSettings = function()
{
	return this.m_defaultQueryManagerSettings;
};
oFF.OuQueryController.prototype._hasBWResourceConstraintsError = function()
{
	return oFF.XStream.of(this.m_messageManager.getMessages()).find((message) => {
		return message.getCode() === oFF.ErrorCodes.BW_RESOURCE_CONSTRAINTS;
	}).isPresent();
};
oFF.OuQueryController.prototype._hasInaRepoJson = function()
{
	return oFF.notNull(this.m_inaRepoJson);
};
oFF.OuQueryController.prototype._hasModelJson = function()
{
	return oFF.notNull(this.m_modelJson);
};
oFF.OuQueryController.prototype._hasPendingResultSetUpdates = function()
{
	return oFF.notNull(this.m_pendingResultUpdates);
};
oFF.OuQueryController.prototype._isAutoSubmitEffective = function()
{
	if (!this.m_autoSubmit || this.getQueryManager() === null)
	{
		return false;
	}
	return this.getQueryManager().getModelCapabilities().supportsAutoVariableSubmit() || this.m_queryManager.isDirectVariableTransferEnabled();
};
oFF.OuQueryController.prototype._isExternalQm = function()
{
	return this.m_isExternalQueryManager || this.m_isExternalDataProvider;
};
oFF.OuQueryController.prototype._isInitialTile = function(data)
{
	return oFF.isNull(data) || data.getColumnMin() === 0 && data.getRowMin() === 0;
};
oFF.OuQueryController.prototype._isRriJumpTarget = function()
{
	let result = false;
	if (oFF.XObjectExt.isValidObject(this.m_queryManager))
	{
		let dataSource = this.m_queryManager.getDataSource();
		result = oFF.XStringUtils.isNotNullAndNotEmpty(dataSource.getRriName()) && oFF.XStringUtils.isNotNullAndNotEmpty(dataSource.getRriValue());
	}
	return result;
};
oFF.OuQueryController.prototype._notifyBackendRequestFinished = function()
{
	if (oFF.notNull(this.m_backendRequestFinishedProcedure))
	{
		this.m_backendRequestFinishedProcedure();
	}
};
oFF.OuQueryController.prototype._notifyBackendRequestStarted = function()
{
	if (oFF.notNull(this.m_backendRequestStartedProcedure))
	{
		this.m_backendRequestStartedProcedure();
	}
};
oFF.OuQueryController.prototype._notifyBusyStateChanged = function()
{
	if (oFF.notNull(this.m_busyStateChangedConsumer))
	{
		this.m_busyStateChangedConsumer(this);
	}
};
oFF.OuQueryController.prototype._notifyControllerReset = function()
{
	if (oFF.notNull(this.m_controllerResetProcedure))
	{
		this.m_controllerResetProcedure();
	}
};
oFF.OuQueryController.prototype._notifyCriticalError = function(criticalErrorType)
{
	if (oFF.notNull(this.m_criticalErrorConsumer))
	{
		this.m_criticalErrorConsumer(criticalErrorType);
	}
};
oFF.OuQueryController.prototype._notifyMessage = function(controllerMessage, details)
{
	if (oFF.notNull(this.m_messageConsumer))
	{
		this.m_messageConsumer(controllerMessage, details);
	}
};
oFF.OuQueryController.prototype._notifyNewDataProviderReady = function()
{
	if (oFF.notNull(this.m_newDataProviderReadyConsumer))
	{
		this.m_newDataProviderReadyConsumer(this.getDataProvider());
	}
};
oFF.OuQueryController.prototype._notifyQueryStateChanged = function()
{
	if (oFF.notNull(this.m_queryStateChanged))
	{
		this.m_queryStateChanged(this.getQueryManager());
	}
};
oFF.OuQueryController.prototype._notifyRenderingPauseEnd = function()
{
	oFF.XStream.of(this.m_renderingPauseEndListeners).forEach((consumer) => {
		consumer.onRenderingPauseEnd();
	});
};
oFF.OuQueryController.prototype._notifyResultEmpty = function()
{
	oFF.XStream.of(this.m_resultEmptyListeners).forEach((consumer) => {
		consumer.onResultEmpty();
	});
};
oFF.OuQueryController.prototype._notifyResultReady = function()
{
	oFF.XStream.of(this.m_resultReadyListeners).forEach((consumer) => {
		consumer.onResultReady();
	});
};
oFF.OuQueryController.prototype._notifySetupInterrupt = function(interruptKey)
{
	if (oFF.notNull(this.m_setupInterruptedConsumer))
	{
		this.m_setupInterruptedConsumer(interruptKey);
	}
};
oFF.OuQueryController.prototype._notifySetupStepChanged = function(setupStep)
{
	if (oFF.notNull(this.m_setupStepChangedConsumer))
	{
		this.m_setupStepChangedConsumer(setupStep);
	}
};
oFF.OuQueryController.prototype._notifyStatusChanged = function(status, message)
{
	if (oFF.notNull(this.m_statusChangedConsumer))
	{
		this.m_statusChangedConsumer(status, message);
	}
};
oFF.OuQueryController.prototype._processOnFirstQueryExecutedInternal = function()
{
	if (this._isAutoSubmitEffective() && !this.m_isInitialVariableSubmitDone)
	{
		this.m_isInitialVariableSubmitDone = true;
		this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_SUBMIT_DONE);
	}
};
oFF.OuQueryController.prototype._processOnGridCollectorFilledInternal = function(extResult, customIdentifier, syncCancelled)
{
	this._setBusyState(false);
	if (customIdentifier !== oFF.OuQueryController.PAGING_ACTION_IDENTIFIER_OBJ && this._isInitialTile(extResult.getData()))
	{
		if (customIdentifier !== oFF.OuQueryController.UNDO_REDO_ACTION_IDENTIFIER_OBJ)
		{
			this.getApplication().getProcess().notifyInterruptStepEnd();
		}
		if (extResult.hasErrors())
		{
			if (!this.m_canceledUpdate && !syncCancelled)
			{
				this.m_messageManager.addAllMessages(extResult);
				this._notifyResultEmpty();
				this._setStatus(oFF.OuQueryControllerStatus.SYNC_ERROR, null);
			}
			else
			{
				this._notifyResultReady();
			}
			if (this.getQueryManager().getConvenienceCommands().getOffsetRows() === 0)
			{
				this._notifyQueryStateChanged();
			}
		}
		else
		{
			this._notifyResultReady();
			if (this.getQueryManager().getConvenienceCommands().getOffsetRows() === 0)
			{
				this._notifyQueryStateChanged();
			}
			this._setStatus(oFF.OuQueryControllerStatus.IN_SYNC, null);
		}
	}
	else if (customIdentifier !== oFF.OuQueryController.PAGING_ACTION_IDENTIFIER_OBJ && !extResult.hasErrors())
	{
		this._setStatus(oFF.OuQueryControllerStatus.IN_SYNC, null);
	}
	if (!this.m_useDpAutoFetch)
	{
		let fetchEvt = this.m_dataProvider.getEventing().getEmitterForResultDataFetch().newTypedEvent();
		fetchEvt.addMessages(extResult);
		fetchEvt.setStep(oFF.OlapDataProviderResultDataFetchStep.ALL_DONE);
		fetchEvt.queue();
	}
	this.m_pendingUpdates = false;
	this.m_canceledUpdate = false;
};
oFF.OuQueryController.prototype._processOnQueryExecutedInternal = function(extResult, resultSetContainer, customIdentifier)
{
	this.setVariablesWinControl(false);
	this._notifyBackendRequestFinished();
	this.m_activeResultSetContainer = null;
	if (customIdentifier === oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ)
	{
		this.m_rescheduled = false;
		this.m_canceledUpdate = false;
		this.getQueryModel().getVisualizationManager().getGridCollector().processExecution(oFF.SyncType.NON_BLOCKING, this, this, this.getUniqueExecutionIdentifier());
	}
	if (!extResult.hasErrors())
	{
		if (resultSetContainer.getSyncState().isInSync() && !resultSetContainer.hasErrors())
		{
			let resultSet = resultSetContainer.getCursorResultSet();
			let state = resultSet.getState();
			if (!state.hasData())
			{
				if (!this.m_canceledUpdate)
				{
					this._notifyResultEmpty();
					if (state === oFF.ResultSetState.INVALID_VARIABLE_VALUES)
					{
						this._notifyMessage(oFF.OuQueryControllerMessage.INVALID_VARIABLE_VALUES, null);
					}
				}
			}
		}
	}
	if (!this.m_useDpAutoFetch)
	{
		let fetchEvt = this.m_dataProvider.getEventing().getEmitterForResultDataFetch().newTypedEvent();
		fetchEvt.addMessages(extResult);
		fetchEvt.setStep(oFF.OlapDataProviderResultDataFetchStep.QUERY_EXECUTED);
		fetchEvt.queue();
	}
};
oFF.OuQueryController.prototype._setAutoUpdatesEnabledInternal = function(enabled)
{
	if (this.m_useDpAutoFetch)
	{
		this.m_dataProvider.getResulting().setAutoFetchActive(enabled, null);
		return;
	}
	this.m_updatesPaused = !enabled;
	if (!this.m_updatesPaused)
	{
		if (this.m_pendingUpdates)
		{
			this._setBusyState(true);
			this.refreshDataSource();
		}
		else
		{
			this._notifyQueryStateChanged();
			this._notifyRenderingPauseEnd();
		}
		this.m_pendingUpdates = false;
	}
	else
	{
		this.cancelProcessing();
		this._notifyQueryStateChanged();
	}
};
oFF.OuQueryController.prototype._setBusyState = function(isBusy)
{
	let didBusyStateChange = this.m_isBusy !== isBusy;
	this.m_isBusy = isBusy;
	if (didBusyStateChange)
	{
		this._notifyBusyStateChanged();
	}
};
oFF.OuQueryController.prototype._setSetupFinished = function()
{
	this._setStatus(oFF.OuQueryControllerStatus.NOT_IN_SYNC, null);
	this.m_isQueryManagerSetupFinished = true;
};
oFF.OuQueryController.prototype._setSetupStarted = function()
{
	this._setStatus(oFF.OuQueryControllerStatus.SETUP_IN_PROGRESS, null);
	this.m_isQueryManagerSetupFinished = false;
	this.m_isInitialVariableSubmitDone = false;
};
oFF.OuQueryController.prototype._setStatus = function(status, message)
{
	let didStatusChange = this.m_status !== status;
	this.m_status = status;
	this.m_statusMessage = message;
	if (didStatusChange)
	{
		this._notifyStatusChanged(status, message);
	}
};
oFF.OuQueryController.prototype._updateQueryResultSetExt = function(forceUpdate)
{
	if (this.m_useDpAutoFetch)
	{
		if (forceUpdate)
		{
			this.getDataProvider().getResulting().fetchNewResultSet(null);
		}
		return;
	}
	if (this.getQueryManager() === null)
	{
		this._setStatus(oFF.OuQueryControllerStatus.STATE_ERROR, null);
		this._notifyCriticalError(oFF.OuQueryControllerCriticalErrorType.MISSING_QUERY_MANAGER);
		return;
	}
	oFF.XTimeout.clear(this.m_timeoutResultSet);
	this.m_timeoutResultSet = oFF.XTimeout.timeout(30, () => {
		if (!this.m_updatesPaused || forceUpdate)
		{
			this._setStatus(oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS, null);
			this.m_pendingUpdates = false;
			this._setBusyState(true);
			if ((this.isSyncActionProcessing() || this._hasPendingResultSetUpdates()) && !this.m_rescheduled)
			{
				this.rescheduleTableUpdate();
			}
			else
			{
				this.m_rescheduled = false;
				this.m_canceledUpdate = false;
				this.getQueryModel().getVisualizationManager().getSynchronizedGridCollector().processExecution(oFF.SyncType.NON_BLOCKING, this, this, this.getUniqueExecutionIdentifier());
			}
		}
		else
		{
			this._setStatus(oFF.OuQueryControllerStatus.NOT_IN_SYNC, null);
			this.m_pendingUpdates = true;
		}
	});
};
oFF.OuQueryController.prototype.activateUdhKeyIfPossible = function(universalDisplayHierarchy)
{
	if (oFF.notNull(universalDisplayHierarchy) && !universalDisplayHierarchy.isReleased())
	{
		universalDisplayHierarchy.setRequestUdhKey(true);
	}
};
oFF.OuQueryController.prototype.addModelFormulaExceptionsToFormulaExceptionManager = function(queryModel)
{
	let fem = queryModel.getFormulaExceptionManager();
	if (oFF.notNull(fem))
	{
		oFF.XStream.of(fem.getAllModelFormulaExceptions()).filter((fe) => {
			return fe.isActive() && !fem.containsKey(oFF.DfNameObject.getSafeName(fe));
		}).forEach((afe) => {
			fem.add(afe);
		});
	}
};
oFF.OuQueryController.prototype.applyComplexFilters = function()
{
	if (this.getQueryManager() === null || oFF.isNull(this.m_dynamicFilterSerialisation))
	{
		return;
	}
	let modelFormat = this.m_forceRepoFormat ? oFF.QModelFormat.INA_REPOSITORY : oFF.QModelFormat.INA_REPOSITORY_DELTA;
	let queryModel = this.getQueryModel();
	let filter = queryModel.getFilter();
	let dynamicFilter = filter.getDynamicFilter();
	let expression = oFF.QFactory.createFilterExpression(queryModel, filter);
	expression.deserializeFromElementExt(modelFormat, this.m_dynamicFilterSerialisation);
	expression.setPreserveOnRepoSerialization(true);
	let expressionRoot = expression.getFilterRootElement();
	if (oFF.isNull(expressionRoot))
	{
		return;
	}
	let dynamicRoot = dynamicFilter.getFilterRootElement();
	if (dynamicFilter.getModelCapabilities().supportsMultiComplexFilter())
	{
		if (expression.isCartesianProduct())
		{
			if (dynamicFilter.isComplexFilter())
			{
				dynamicFilter.getComplexRoot().add(dynamicRoot);
			}
			else
			{
				dynamicFilter.getCartesianProductWithDefault().addAll(expressionRoot);
			}
		}
		else
		{
			dynamicFilter.setComplexRoot(expressionRoot);
			dynamicFilter.getComplexRoot().add(dynamicRoot);
		}
	}
	else
	{
		let cartProduct = expression.isCartesianProduct() ? expressionRoot : oFF.QFilterUtil.convertComplexFilterToCartesianExt(expressionRoot, true);
		dynamicFilter.getCartesianProductWithDefault().addAll(cartProduct);
	}
	this.m_dynamicFilterSerialisation = null;
};
oFF.OuQueryController.prototype.applyFilterFromVariables = function(filters)
{
	let queryModel = this.getQueryModel();
	let dynamicFilter = queryModel.getFilter().getDynamicFilter();
	let keys = filters.getKeysAsIterator();
	while (keys.hasNext())
	{
		let dimName = keys.next();
		let variableFilter = filters.getByKey(dimName);
		let dimension = queryModel.getDimensionByName(dimName);
		let cartesianList = dynamicFilter.getCartesianListWithDefault(dimension);
		cartesianList.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, variableFilter.serializeToElement(oFF.QModelFormat.INA_REPOSITORY));
	}
};
oFF.OuQueryController.prototype.applyGeneralSetting = function(queryManager)
{
	this.applyUnitPositionSettings(queryManager.getConvenienceCommands());
	this.setDefaultPagingValues();
	let applicationSettings = queryManager.getQueryModel().getVisualizationManager().getApplicationSettings();
	applicationSettings.setMaxRows(this.getMaxRowsLoad());
	applicationSettings.setMaxColumns(this.getEffectiveMaxColumnsLoad());
	applicationSettings.setMinRowsFetch(this.getDefaultRowsWindowSize());
	applicationSettings.setMinColumnsFetch(this.getDefaultColumnsWindowSize());
	applicationSettings.setSupportCommentDocuments(this._getDefaultQueryManagerSettings() !== null && this._getDefaultQueryManagerSettings().isLoadCommentingDocuments());
	applicationSettings.setDerivePercentageFromShift(this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.HANA));
	oFF.XCollectionUtils.forEach(this.m_responseOverrideTexts.getKeysAsReadOnlyList(), (key) => {
		applicationSettings.putOverwriteText(key, this.m_responseOverrideTexts.getByKey(key));
	});
};
oFF.OuQueryController.prototype.applyInitialDataSourceText = function()
{
	if (oFF.notNull(this.m_initialDataSourceText))
	{
		this.setDataSourceText(this.m_initialDataSourceText);
		this.m_initialDataSourceText = null;
	}
};
oFF.OuQueryController.prototype.applyInitialFilters = function()
{
	if (oFF.notNull(this.m_initialFilters) && !this.m_initialFilters.isEmpty())
	{
		this.setFilters(this.m_initialFilters);
		this.m_initialFilters = null;
	}
};
oFF.OuQueryController.prototype.applyInitialPresentationAttributes = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		let cmd = queryManager.getConvenienceCommands();
		let dimensions = queryManager.getDimensionAccessor().getDimensions();
		for (let i = 0; i < dimensions.size(); i++)
		{
			let dimension = dimensions.get(i);
			cmd.refreshFieldContainerDisplayForDimension(dimension.getName(), null);
		}
	}
};
oFF.OuQueryController.prototype.applyInitialVariables = function()
{
	if (!this._isExternalQm() && oFF.notNull(this.m_initialVariables) && !this.m_initialVariables.isEmpty())
	{
		this.setVariables(this.m_initialVariables);
		this.m_initialVariables = null;
	}
};
oFF.OuQueryController.prototype.applyUnitPositionSettings = function(cmd)
{
	if (cmd.getModelCapabilities().supportsUniqueAxisProperties())
	{
		let queryModel = cmd.getQueryModel();
		let uniqueAxisProperties = queryModel.getReturnedUniqueAxisProperties();
		let leadingStructure = queryModel.isLeadingStructureAccount() ? queryModel.getAccountDimension() : queryModel.getMeasureDimension();
		if (oFF.notNull(uniqueAxisProperties) && !oFF.XCollectionUtils.hasElements(uniqueAxisProperties.getRowProperties()) && !oFF.XCollectionUtils.hasElements(uniqueAxisProperties.getColumnProperties()) && oFF.notNull(leadingStructure))
		{
			cmd.toggleUniqueAxisProperties(null, oFF.UniqueAxisPropertyType.UNIT_INDEX, true);
			cmd.toggleUniqueAxisProperties(null, oFF.UniqueAxisPropertyType.NUMERIC_SHIFT, true);
			cmd.toggleUniqueAxisProperties(null, oFF.UniqueAxisPropertyType.CELL_VALUE_TYPES, true);
		}
	}
};
oFF.OuQueryController.prototype.cancelPendingUpdates = function()
{
	if (oFF.notNull(this.m_pendingResultUpdates))
	{
		try
		{
			this.m_pendingResultUpdates.cancelSynchronization();
		}
		catch (t)
		{
			oFF.XLogger.println(oFF.XException.getStackTrace(t, 0));
		}
		this.m_pendingResultUpdates = null;
	}
};
oFF.OuQueryController.prototype.cancelProcessing = function()
{
	this.cancelPendingUpdates();
	this._setBusyState(false);
};
oFF.OuQueryController.prototype.checkCommercialMinus = function()
{
	let measureDimension = this.getQueryManager().getQueryModel().getMeasureDimension();
	if (oFF.notNull(measureDimension))
	{
		let memberList = measureDimension.getAllStructureMembers();
		for (let i = 0; i < memberList.size(); i++)
		{
			if (memberList.get(i).getSignPresentation() === oFF.SignPresentation.COMMERCIAL_MINUS && !this.m_commercialMinusEnabled)
			{
				memberList.get(i).resetToDefaultSignPresentation();
			}
		}
	}
};
oFF.OuQueryController.prototype.checkConsistencyForNewQueryManager = function(newQueryManager)
{
	if (oFF.notNull(newQueryManager) && newQueryManager.getQueryModel() !== null && newQueryManager.getQueryModel().getMeasureDimension() === null)
	{
		this._notifyMessage(oFF.OuQueryControllerMessage.QUERY_DOES_NOT_CONTAIN_MEASURES, null);
	}
};
oFF.OuQueryController.prototype.clearSuperfluousFilters = function(cartesianProduct)
{
	for (let i = cartesianProduct.size() - 1; i > -1; i--)
	{
		let cartesianChild = cartesianProduct.getCartesianChild(i);
		let dimension = cartesianChild.getDimension();
		let virtualRootNodeName = dimension.getVirtualRootNodeName();
		if (oFF.XCollectionUtils.size(cartesianChild) === 1 && oFF.XStringUtils.isNotNullAndNotEmpty(virtualRootNodeName) && oFF.XString.isEqual(virtualRootNodeName, cartesianChild.getCartesianElement(0).getLow().getString()))
		{
			cartesianProduct.removeAt(i);
		}
	}
};
oFF.OuQueryController.prototype.continueQueryManagerFinalization = function()
{
	if (!this._isExternalQm())
	{
		this.applyInitialPresentationAttributes();
		this.applyInitialFilters();
		this.applyInitialDataSourceText();
	}
	this.ensureReadOnly(this.getQueryManager());
	let queryModel = this.getQueryManager().getQueryModel();
	queryModel.getFilter().setConvertFiltersToFlatOnHierarchyChange(true);
	this._setSetupFinished();
	this.m_forceInitialVariableDialog = false;
	this._notifyNewDataProviderReady();
	this.m_dataProvider.getResulting().setAutoFetchActiveWithoutNewResult(this.m_useDpAutoFetch, null);
	if (oFF.notNull(this.m_oldDataProviderToRelease) && !this.m_oldDataProviderToRelease.isReleased())
	{
		let releaseConnection = this.m_dataProvider.getQueryManager() !== this.m_oldDataProviderToRelease.getQueryManager();
		this.m_oldDataProviderToRelease.getActions().getLifecycleActions().releaseDataProvider(releaseConnection);
		this.m_oldDataProviderToRelease = null;
	}
};
oFF.OuQueryController.prototype.createDataProviderForExistingQueryManager = function(queryManager)
{
	let dpMgr = this.getDataProviderManager();
	let config = oFF.OlapDataProviderConfiguration.createConfig(queryManager.getApplication(), queryManager.getDataSource());
	config.setDataProviderName(oFF.XStringUtils.concatenate2("DataAnalyzerProvider-", oFF.XGuid.getGuid()));
	config.setStartWithAutoFetch(false);
	if (oFF.notNull(dpMgr))
	{
		config.setExistingQueryManager(queryManager);
		return dpMgr.createDataProvider(config).onThenExt((dp) => {
			return oFF.OlapDataProviderUtil.getOlapDataProvider(dp);
		});
	}
	return oFF.OlapDataProviderFactory.createDataProviderFromQueryManager(queryManager, config);
};
oFF.OuQueryController.prototype.deRegisterRenderingPauseEndListener = function(renderingPauseEndListener)
{
	this.m_renderingPauseEndListeners.removeElement(renderingPauseEndListener);
};
oFF.OuQueryController.prototype.deRegisterResultEmptyListener = function(resultEmptyListener)
{
	this.m_resultEmptyListeners.removeElement(resultEmptyListener);
};
oFF.OuQueryController.prototype.deRegisterResultReadyListener = function(resultReadyListener)
{
	this.m_resultReadyListeners.removeElement(resultReadyListener);
};
oFF.OuQueryController.prototype.enableClientInfo = function()
{
	this.m_clientInfoEnabled = true;
};
oFF.OuQueryController.prototype.ensureReadOnly = function(queryManager)
{
	if (queryManager.isDataEntryEnabled())
	{
		queryManager.setDataEntryReadOnly(true);
	}
};
oFF.OuQueryController.prototype.executeRedo = function()
{
	this._setBusyState(true);
	oFF.XTimeout.timeout(30, () => {
		this._setStatus(oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS, null);
		this._notifyBackendRequestStarted();
		this.m_activeResultSetContainer = this.getQueryManager().getActiveResultSetContainer();
		this.getApplication().getUndoManager().processRedo(oFF.SyncType.NON_BLOCKING, this, null);
	});
};
oFF.OuQueryController.prototype.executeUndo = function()
{
	this._setBusyState(true);
	oFF.XTimeout.timeout(30, () => {
		this._setStatus(oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS, null);
		this._notifyBackendRequestStarted();
		this.m_activeResultSetContainer = this.getQueryManager().getActiveResultSetContainer();
		this.getApplication().getUndoManager().processUndo(oFF.SyncType.NON_BLOCKING, this, null);
	});
};
oFF.OuQueryController.prototype.finalizeQueryManagerSetup = function()
{
	this.simplifyDynamicFilter();
	this.updateMeasureBasedFilters();
	let queryModel = this.getQueryModel();
	let cmd = queryModel.getConvenienceCommands();
	let accountDimension = queryModel.getAccountDimension();
	if (oFF.notNull(accountDimension))
	{
		cmd.refreshFieldContainerDisplayForDimension(accountDimension.getName(), null);
	}
	let versionDimension = queryModel.getVersionDimension();
	if (oFF.notNull(versionDimension))
	{
		cmd.refreshFieldContainerDisplayForDimension(versionDimension.getName(), null);
	}
	let defaultSettings = this._getDefaultQueryManagerSettings();
	if (oFF.notNull(defaultSettings) && defaultSettings.isSetSynchronizedAxisReadModes())
	{
		queryModel.getRowsAxis().setReadModeAndSuppressionSynchronized(true);
		queryModel.getColumnsAxis().setReadModeAndSuppressionSynchronized(true);
	}
	let datasetEpmObject = this.getQueryModel().getDatasetEpmObject();
	let dataSource = this.m_queryManager.getDataSource();
	if (!this._isExternalQm() && dataSource.getType() === oFF.MetaObjectType.PLANNING && this.getQueryModel().getVersionDimension() !== null && oFF.notNull(datasetEpmObject) && queryModel.getPlanningMode() !== null && queryModel.getPlanningMode() !== oFF.PlanningMode.DISABLE_PLANNING)
	{
		this.setupPlanning(dataSource, datasetEpmObject);
	}
	else
	{
		this.continueQueryManagerFinalization();
	}
	this.m_inaRepoJson = null;
};
oFF.OuQueryController.prototype.getApplication = function()
{
	return this.m_application;
};
oFF.OuQueryController.prototype.getClientInfo = function()
{
	return this.m_clientInfo;
};
oFF.OuQueryController.prototype.getColumnsMaxLoad = function()
{
	return this.m_maxColumnsLoad;
};
oFF.OuQueryController.prototype.getColumnsWindowFactor = function()
{
	return this.m_columnsWindowFactor;
};
oFF.OuQueryController.prototype.getColumnsWindowSize = function()
{
	return this.m_columnsWindowSize;
};
oFF.OuQueryController.prototype.getDataProvider = function()
{
	return this.m_dataProvider;
};
oFF.OuQueryController.prototype.getDataProviderManager = function()
{
	let process = this.getProcess();
	if (oFF.isNull(process))
	{
		return null;
	}
	let dataApplication = process.findEntity(oFF.ProcessEntity.DATA_APPLICATION);
	return oFF.notNull(dataApplication) ? dataApplication.getDataProviderManager() : null;
};
oFF.OuQueryController.prototype.getDefaultColumnsWindowSize = function()
{
	return oFF.XMath.min(this.m_maxColumnsWindowSize, this.m_columnsWindowSize * this.m_columnsWindowFactor);
};
oFF.OuQueryController.prototype.getDefaultRowsWindowSize = function()
{
	return oFF.XMath.min(this.m_maxRowsWindowSize, this.m_rowsWindowSize * this.m_rowsWindowFactor);
};
oFF.OuQueryController.prototype.getDimensionMemberExitVariablesForFilters = function()
{
	let queryManager = this.getQueryManager();
	return oFF.XStream.of(queryManager.getVariables()).filter((variable) => {
		if (variable.isTechnicalVariable() || !variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			return false;
		}
		let dimVar = variable;
		return dimVar.isUsedInDynamicFilter() && (dimVar.isEnforcedDynamicValue() || !dimVar.isInputEnabled());
	}).map((variable2) => {
		return variable2;
	}).collect(oFF.XStreamCollector.toList());
};
oFF.OuQueryController.prototype.getEffectiveMaxColumnsLoad = function()
{
	return this.m_horizontalLazyLoad ? this.getMaxColumnsLoad() : this.getDefaultColumnsWindowSize();
};
oFF.OuQueryController.prototype.getExitAndDynamicVariableUpdatePromise = function()
{
	return oFF.XPromise.create((resolve, reject) => {
		if (this.m_disableExitVariables)
		{
			resolve(null);
			return;
		}
		this.getQueryManager().resetExitOrUpdateDynamicVariable(oFF.SyncType.NON_BLOCKING, oFF.QueryExecutionListenerLambda.createSingleUse((exitResult) => {
			resolve(null);
		}), null, true);
	});
};
oFF.OuQueryController.prototype.getInputEnabledVarsUsedInFilter = function()
{
	let queryManager = this.getQueryManager();
	return oFF.XStream.of(queryManager.getInputEnabledAndNonTechnicalVariables()).filter((variable) => {
		if (!variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			return false;
		}
		let dimVar = variable;
		return dimVar.isUsedInDynamicFilter();
	}).map((variable2) => {
		return variable2;
	}).collect(oFF.XStreamCollector.toList());
};
oFF.OuQueryController.prototype.getMaxColumnsLoad = function()
{
	return this.m_maxColumnsLoad;
};
oFF.OuQueryController.prototype.getMaxColumnsWindowSize = function()
{
	return this.m_maxColumnsWindowSize;
};
oFF.OuQueryController.prototype.getMaxRowsLoad = function()
{
	return this.m_maxRowsLoad;
};
oFF.OuQueryController.prototype.getMaxRowsWindowSize = function()
{
	return this.m_maxRowsWindowSize;
};
oFF.OuQueryController.prototype.getMessageManager = function()
{
	return this.m_messageManager;
};
oFF.OuQueryController.prototype.getProcess = function()
{
	let application = this.getApplication();
	return oFF.isNull(application) ? null : application.getProcess();
};
oFF.OuQueryController.prototype.getQueryManager = function()
{
	return this.m_queryManager;
};
oFF.OuQueryController.prototype.getQueryModel = function()
{
	return this.m_queryManager.getQueryModel();
};
oFF.OuQueryController.prototype.getQueryName = function()
{
	let prettyName = null;
	if (this.getQueryManager() !== null)
	{
		let queryModel = this.getQueryManager().getQueryModel();
		if (oFF.notNull(queryModel))
		{
			prettyName = queryModel.getUiNameWithFallback();
		}
		if (oFF.XStringUtils.isNullOrEmpty(prettyName))
		{
			prettyName = this.getQueryManager().getDataSource().getName();
		}
	}
	if (oFF.XStringUtils.isNullOrEmpty(prettyName))
	{
		prettyName = "Unknown Query";
	}
	return prettyName;
};
oFF.OuQueryController.prototype.getRelevantFiltersFromVariables = function()
{
	if (this.m_disableExitVariables && !this.m_initialVariableDialogWasOpened)
	{
		return oFF.XHashMapByString.create();
	}
	let variablesToPreserve = oFF.XList.create();
	if (this.m_initialVariableDialogWasOpened)
	{
		oFF.XCollectionUtils.addAllIfNotPresent(variablesToPreserve, this.getInputEnabledVarsUsedInFilter());
	}
	if (!this.m_disableExitVariables)
	{
		oFF.XCollectionUtils.addAllIfNotPresent(variablesToPreserve, this.getDimensionMemberExitVariablesForFilters());
	}
	let filters = oFF.XHashMapByString.create();
	let queryModel = this.getQueryModel();
	let dynamicFilter = queryModel.getFilter().getDynamicFilter();
	for (let i = 0; i < variablesToPreserve.size(); i++)
	{
		let dimVar = variablesToPreserve.get(i);
		let dimension = dimVar.getDimension();
		let cartesianList = dynamicFilter.getCartesianList(dimension);
		if (oFF.notNull(cartesianList))
		{
			filters.put(dimension.getName(), cartesianList.cloneOlapComponent(queryModel, null));
		}
	}
	return filters;
};
oFF.OuQueryController.prototype.getRowsWindowFactor = function()
{
	return this.m_rowsWindowFactor;
};
oFF.OuQueryController.prototype.getRowsWindowSize = function()
{
	return this.m_rowsWindowSize;
};
oFF.OuQueryController.prototype.getSession = function()
{
	return this.getProcess();
};
oFF.OuQueryController.prototype.getStatus = function()
{
	return this.m_status;
};
oFF.OuQueryController.prototype.getStatusMessage = function()
{
	return this.m_statusMessage;
};
oFF.OuQueryController.prototype.getUniqueExecutionIdentifier = function()
{
	return this._isExternalQm() ? oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ : oFF.OuQueryController.INTERNAL_QM_IDENTIFIER_OBJ;
};
oFF.OuQueryController.prototype.getVisualizationDefinitionForId = function(uuid)
{
	if (this.getQueryManager() !== null)
	{
		return this.getQueryManager().getQueryModel().getVisualizationManager().getOrCreateVisualisationDefinition(uuid, oFF.ProtocolBindingType.HIGH_CHART_PROTOCOL, oFF.SemanticBindingType.CHART);
	}
	return null;
};
oFF.OuQueryController.prototype.handleVariableSubmitCallback = function(result)
{
	if (result.hasErrors())
	{
		this._notifySetupInterrupt(oFF.OuQueryControllerContants.VARIABLE_SUBMIT_FAILED);
		this._setStatus(oFF.OuQueryControllerStatus.SETUP_ERROR, null);
		return;
	}
	this.loadSfx();
	this.loadRepoStateAfterClassicSubmit();
	this.finalizeQueryManagerSetup();
	this.m_isInitialVariableSubmitDone = true;
	this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_SUBMIT_DONE);
};
oFF.OuQueryController.prototype.hasPendingUpdates = function()
{
	return this.isSyncActionProcessing() || this.m_pendingUpdates;
};
oFF.OuQueryController.prototype.initQueryManagerFromDataSource = function(application, dataSource)
{
	this.m_messageManager = oFF.MessageManagerSimple.createMessageManager();
	if (oFF.isNull(dataSource))
	{
		this._setStatus(oFF.OuQueryControllerStatus.INIT_ERROR, null);
		this._notifyCriticalError(oFF.OuQueryControllerCriticalErrorType.MISSING_DATA_SOURCE);
		return;
	}
	this._setSetupStarted();
	this._notifyBackendRequestStarted();
	let serviceConfig = oFF.QueryServiceConfig.createWithDataSource(application, dataSource.getSystemName(), dataSource);
	if (this.m_clientInfoEnabled)
	{
		serviceConfig.getClientInfo().copyFrom(this.getClientInfo(), null);
	}
	serviceConfig.setIsExternalizedDynamicFilter(false);
	serviceConfig.setIsExternalizedNonVariableFilter(false);
	serviceConfig.processQueryManagerCreation(oFF.SyncType.NON_BLOCKING, this, null);
};
oFF.OuQueryController.prototype.initWithExistingDataProvider = function(dataProvider)
{
	this.m_messageManager = oFF.MessageManagerSimple.createMessageManager();
	this.m_modelJson = null;
	this.m_inaRepoJson = null;
	this.m_forceInitialVariableDialog = false;
	if (oFF.isNull(dataProvider))
	{
		this._setStatus(oFF.OuQueryControllerStatus.INIT_ERROR, null);
		this._notifyCriticalError(oFF.OuQueryControllerCriticalErrorType.MISSING_DATA_PROVIDER);
		return;
	}
	if (dataProvider.isReleased())
	{
		this._setStatus(oFF.OuQueryControllerStatus.INIT_ERROR, null);
		this._notifyCriticalError(oFF.OuQueryControllerCriticalErrorType.DATA_PROVIDER_RELEASED);
		return;
	}
	this._setSetupStarted();
	dataProvider.getOrCreateQueryManager().onThen((queryManager) => {
		this.setupNewQueryManager(queryManager, dataProvider, true);
	});
};
oFF.OuQueryController.prototype.isAutoUpdatesEnabled = function()
{
	if (this.m_useDpAutoFetch)
	{
		return oFF.notNull(this.m_dataProvider) && this.m_dataProvider.getResulting().isAutoFetchActive();
	}
	return !this.m_updatesPaused;
};
oFF.OuQueryController.prototype.isBusy = function()
{
	return this.m_isBusy;
};
oFF.OuQueryController.prototype.isEnabledResultSetCache = function()
{
	return this.m_enableResultSetCache;
};
oFF.OuQueryController.prototype.isHorizontalLazyLoad = function()
{
	return this.m_horizontalLazyLoad;
};
oFF.OuQueryController.prototype.isInitialVariableSubmitDone = function()
{
	return this.m_isInitialVariableSubmitDone;
};
oFF.OuQueryController.prototype.isOverrideAutoSubmitOnStartup = function()
{
	return this.m_overrideAutoSubmitOnStartup;
};
oFF.OuQueryController.prototype.isPauseUpdates = function()
{
	return this.m_updatesPaused;
};
oFF.OuQueryController.prototype.isQueryManagerSetupFinished = function()
{
	return this.m_isQueryManagerSetupFinished;
};
oFF.OuQueryController.prototype.isSyncActionProcessing = function()
{
	let optionalResultSetContainer = oFF.XOptional.getOptionalEnsureNotReleased(this.m_activeResultSetContainer);
	return optionalResultSetContainer.isPresent() && oFF.XConstantWithParent.isObjectTypeOf(optionalResultSetContainer.get().getSyncState(), oFF.SyncState.PROCESSING);
};
oFF.OuQueryController.prototype.loadRepoStateAfterClassicSubmit = function()
{
	if (oFF.isNull(this.m_inaRepoJson))
	{
		return;
	}
	let queryModel = this.getQueryModel();
	this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.BEFORE_QUERY_MODEL_DESERIALIZATION);
	let modelFormat = this.m_forceRepoFormat ? oFF.QModelFormat.INA_REPOSITORY : oFF.QModelFormat.INA_REPOSITORY_DELTA;
	let variableValues = queryModel.getVariableContainer().serializeToElement(modelFormat);
	let variablesFilter = this.getRelevantFiltersFromVariables();
	if (oFF.notNull(this.m_inaRepoJson))
	{
		queryModel.deserializeFromElementExt(modelFormat, this.m_inaRepoJson);
	}
	if (oFF.notNull(variableValues))
	{
		queryModel.getVariableContainer().deserializeFromElementExt(modelFormat, variableValues);
	}
	this.applyFilterFromVariables(variablesFilter);
	this.applyComplexFilters();
	this.checkCommercialMinus();
};
oFF.OuQueryController.prototype.loadRepoStateBeforeAutoSubmit = function()
{
	if (oFF.isNull(this.m_inaRepoJson))
	{
		return;
	}
	this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.BEFORE_QUERY_MODEL_DESERIALIZATION);
	let queryModel = this.getQueryModel();
	let modelFormat = this.m_forceRepoFormat ? oFF.QModelFormat.INA_REPOSITORY : oFF.QModelFormat.INA_REPOSITORY_DELTA;
	queryModel.deserializeFromElementExt(modelFormat, this.m_inaRepoJson);
	this.applyComplexFilters();
	this.checkCommercialMinus();
};
oFF.OuQueryController.prototype.loadSfx = function()
{
	if (oFF.notNull(this.m_modelJson))
	{
		this.getQueryModel().stopEventing();
		this.getQueryModel().deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, this.m_modelJson);
		this.getQueryModel().resumeEventing();
	}
};
oFF.OuQueryController.prototype.notifyDataProviderExternalModelChange = function()
{
	this.m_dataProvider.getEventing().getEmitterForModelChanges().newTypedEvent().queue();
};
oFF.OuQueryController.prototype.onAfterSubmit = function(success, extResult, values, valuesJson) {};
oFF.OuQueryController.prototype.onBeforeQueryExecuted = function(customIdentifier)
{
	this._setBusyState(true);
	this._setStatus(oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS, null);
	this._notifyBackendRequestStarted();
	let queryModel = this.getQueryModel();
	let visualizationManager = oFF.isNull(queryModel) ? null : queryModel.getVisualizationManager();
	let currentActiveVisualizationDefinition = oFF.isNull(visualizationManager) ? null : visualizationManager.getCurrentActiveVisualizationDefinition();
	if (oFF.notNull(visualizationManager) && !visualizationManager.areAllVisualizationContainersInSync() && oFF.notNull(currentActiveVisualizationDefinition) && !currentActiveVisualizationDefinition.hasValidVisualizationContainer())
	{
		this.resetPaging();
	}
	this.m_activeResultSetContainer = this.getQueryManager().getActiveResultSetContainer();
};
oFF.OuQueryController.prototype.onBeforeSubmit = function(values, valuesJson)
{
	oFF.VdImportExport.setValuesToProcessor(this.m_queryManager, values);
	this.m_variableDialog.close();
	if (!this.m_isQueryManagerSetupFinished)
	{
		this.finalizeQueryManagerSetup();
	}
	else
	{
		this.notifyDataProviderExternalModelChange();
	}
};
oFF.OuQueryController.prototype.onCancel = function()
{
	if (!this.m_isQueryManagerSetupFinished)
	{
		this._notifySetupInterrupt(oFF.OuQueryControllerContants.INITIAL_VARIABLES_NOT_SET);
		this._setStatus(oFF.OuQueryControllerStatus.SETUP_ERROR, null);
	}
};
oFF.OuQueryController.prototype.onCancelReinit = function()
{
	this.m_variableDialog.close();
	this.onCancel();
};
oFF.OuQueryController.prototype.onGridCollectorFilled = function(extResult, gridContainer, customIdentifier)
{
	this._processOnGridCollectorFilledInternal(extResult, customIdentifier, extResult.isSyncCanceled());
};
oFF.OuQueryController.prototype.onOk = function()
{
	this.loadSfx();
	if (!this.m_isQueryManagerSetupFinished)
	{
		this.loadRepoStateAfterClassicSubmit();
		this.finalizeQueryManagerSetup();
		if (!this.m_isInitialVariableSubmitDone)
		{
			this.m_isInitialVariableSubmitDone = true;
			this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_SUBMIT_DONE);
		}
	}
	else
	{
		this.notifyDataProviderExternalModelChange();
	}
};
oFF.OuQueryController.prototype.onProviderFetch = function(extResult, documentsServiceResponse, customIdentifier)
{
	this._notifyResultReady();
};
oFF.OuQueryController.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this._processOnQueryExecutedInternal(extResult, resultSetContainer, customIdentifier);
};
oFF.OuQueryController.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	if (extResult.hasErrors())
	{
		this.m_messageManager.addAllMessages(extResult);
		this._notifyCriticalError(oFF.OuQueryControllerCriticalErrorType.QUERY_MANAGER_CREATION_FAILED);
		this._setStatus(oFF.OuQueryControllerStatus.SETUP_ERROR, extResult.getSummary());
		if (oFF.UiCredentialsProviderHelper.hasAuthenticationFailed(this.m_messageManager.getMessages()))
		{
			this.throwSchedulingConnectionError(oFF.OuQueryControllerContants.AUTHENTICATION_FAILED);
			this._notifySetupInterrupt(oFF.OuQueryControllerContants.AUTHENTICATION_FAILED);
		}
		else if (this._hasBWResourceConstraintsError())
		{
			this.throwSchedulingConnectionError(oFF.OuQueryControllerContants.BW_RESOURCE_CONSTRAINTS);
			this._notifySetupInterrupt(oFF.OuQueryControllerContants.BW_RESOURCE_CONSTRAINTS);
		}
		else
		{
			this.throwSchedulingConnectionError(oFF.OuQueryControllerContants.COULD_NOT_OPEN_QUERY);
			this._notifySetupInterrupt(oFF.OuQueryControllerContants.COULD_NOT_OPEN_QUERY);
		}
		return;
	}
	if (extResult.hasWarnings())
	{
		this.m_messageManager.addAllMessages(extResult);
		this._notifyMessage(oFF.OuQueryControllerMessage.WARNING, oFF.MessageUtil.getMessageStringFromList(this.getMessageManager(), "Query Opened with warnings:"));
	}
	let newQueryManager = extResult.getData();
	this.checkConsistencyForNewQueryManager(newQueryManager);
	this.createDataProviderForExistingQueryManager(newQueryManager).onThen((dp) => {
		this.setupNewQueryManager(newQueryManager, dp, false);
	});
};
oFF.OuQueryController.prototype.onReinit = function(success, extResult) {};
oFF.OuQueryController.prototype.onResultFetchEvent = function(evt)
{
	if (evt.getStep() === oFF.OlapDataProviderResultDataFetchStep.FETCH_STARTED)
	{
		this._setStatus(oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS, null);
		this._setBusyState(true);
	}
	else if (evt.getStep() === oFF.OlapDataProviderResultDataFetchStep.QUERY_EXECUTED)
	{
		let resultSetContainer = this.m_queryManager.getActiveResultSetContainer();
		let messages = evt.getMessages();
		let result = oFF.ExtResult.create(resultSetContainer, messages);
		this._processOnQueryExecutedInternal(result, resultSetContainer, null);
	}
	else if (evt.getStep() === oFF.OlapDataProviderResultDataFetchStep.GRID_COLLECTED)
	{
		let identifier = null;
		if (oFF.XString.isEqual(evt.getCorrelationId(), this.m_undoRedoCorrelationId))
		{
			identifier = oFF.OuQueryController.UNDO_REDO_ACTION_IDENTIFIER_OBJ;
			this.m_undoRedoCorrelationId = null;
		}
		let tileCarrier = this.m_queryManager.getQueryModel().getVisualizationManager().getGridCollector().getRecentTileCarrier();
		let result = oFF.ExtResult.create(tileCarrier, evt.getMessages());
		this._processOnGridCollectorFilledInternal(result, identifier, false);
	}
};
oFF.OuQueryController.prototype.onServiceCreation = function(extResult, service, customIdentifier)
{
	if (extResult.isValid())
	{
		this.getQueryModel().setPlanningMode(oFF.PlanningMode.FOR_PRIVATE_VERSIONS_ONLY);
	}
	this.continueQueryManagerFinalization();
};
oFF.OuQueryController.prototype.presentInitialVariablesDialogIfNecessary = function()
{
	let variables = this.getQueryManager().getInputEnabledAndNonTechnicalVariables();
	if (!oFF.XCollectionUtils.hasElements(variables))
	{
		return false;
	}
	let foundNotSetMandatoryVar = oFF.XCollectionUtils.contains(variables, (variable) => {
		return variable.isMandatory() && variable.isEmpty();
	});
	if (this.m_forceInitialVariableDialog || foundNotSetMandatoryVar)
	{
		this.presentVariableDialog();
		this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_DIALOG_PRESENTED);
		this.m_isResetAction = false;
		this.m_initialVariableDialogWasOpened = true;
		return true;
	}
	let vdConfig = this.m_variableDialogConfigSupplier();
	if (vdConfig.isAutoSubmitOnStartup() && this.m_queryManager.isDirectVariableTransferEnabled())
	{
		return false;
	}
	if (!this._hasInaRepoJson() && !this._hasModelJson() && !this.m_isResetAction && !this._isRriJumpTarget())
	{
		this.presentVariableDialog();
		this.m_initialVariableDialogWasOpened = true;
		this._notifySetupStepChanged(oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_DIALOG_PRESENTED);
		return true;
	}
	return false;
};
oFF.OuQueryController.prototype.presentVariableDialog = function()
{
	oFF.XObjectExt.release(this.m_variableDialog);
	this.setVariablesWinControl(true);
	let config;
	if (oFF.notNull(this.m_variableDialogConfigSupplier))
	{
		config = this.m_variableDialogConfigSupplier();
	}
	else
	{
		config = oFF.VdConfiguration.createConfig(this.getQueryName(), this.getQueryManager());
	}
	if (this._isAutoSubmitEffective())
	{
		config.setImplicitSubmit(false);
		this.m_variableDialog = oFF.VdEntryPoint.createEntryPointWithConfig(config, null);
		this.m_variableDialog.getController().registerReinitListener(this);
		this.m_variableDialog.getController().registerSubmitListener(this);
	}
	else
	{
		this.m_variableDialog = oFF.VdEntryPoint.createEntryPointWithConfig(config, this);
	}
	this.m_variableDialog.open();
};
oFF.OuQueryController.prototype.putOverwriteText = function(key, text)
{
	this.m_responseOverrideTexts.put(key, text);
};
oFF.OuQueryController.prototype.refreshDataSource = function()
{
	this._updateQueryResultSetExt(true);
};
oFF.OuQueryController.prototype.refreshDataSourceIfNeeded = function()
{
	this._updateQueryResultSetExt(false);
};
oFF.OuQueryController.prototype.registerModelComponentChangedListener = function(modelComponent, modelComponentChangedListener)
{
	modelComponent.registerChangedListener(modelComponentChangedListener, null);
};
oFF.OuQueryController.prototype.registerRenderingPauseEndListener = function(renderingPauseEndListener)
{
	this.m_renderingPauseEndListeners.add(renderingPauseEndListener);
};
oFF.OuQueryController.prototype.registerResultEmptyListener = function(resultEmptyListener)
{
	this.m_resultEmptyListeners.add(resultEmptyListener);
};
oFF.OuQueryController.prototype.registerResultReadyListener = function(resultReadyListener)
{
	this.m_resultReadyListeners.add(resultReadyListener);
};
oFF.OuQueryController.prototype.releaseObject = function()
{
	oFF.XTimeout.clear(this.m_timeoutResultSet);
	oFF.XTimeout.clear(this.m_timeoutReschedule);
	this.m_activeResultSetContainer = null;
	this.m_pendingResultUpdates = null;
	if (oFF.notNull(this.m_queryManager))
	{
		this.m_queryManager.detachBeforeQueryExecutionListener(this);
		this.m_queryManager.detachQueryExecutedListener(this.m_queryListener);
		this.m_queryManager.detachQueryExecutedListener(this.m_queryListenerExternal);
	}
	if (oFF.notNull(this.m_dataProvider))
	{
		this.m_dataProvider.getEventing().getListenerForResultDataFetch().removeConsumerByUuid(this.m_resultListenerId);
	}
	if (!this._isExternalQm())
	{
		this.m_queryManager = oFF.XObjectExt.release(this.m_queryManager);
	}
	if (!this.m_isExternalDataProvider && oFF.notNull(this.m_dataProvider))
	{
		this.m_dataProvider.getActions().getLifecycleActions().releaseDataProvider(true);
	}
	this.m_queryManager = null;
	this.m_dataProvider = null;
	this.m_defaultQueryManagerSettings = null;
	this.m_resultEmptyListeners.clear();
	this.m_resultEmptyListeners = null;
	this.m_renderingPauseEndListeners.clear();
	this.m_renderingPauseEndListeners = null;
	this.m_newDataProviderReadyConsumer = null;
	this.m_controllerResetProcedure = null;
	this.m_queryStateChanged = null;
	this.m_busyStateChangedConsumer = null;
	this.m_messageConsumer = null;
	this.m_setupInterruptedConsumer = null;
	this.m_criticalErrorConsumer = null;
	this.m_backendRequestStartedProcedure = null;
	this.m_backendRequestFinishedProcedure = null;
	this.m_variableDialogConfigSupplier = null;
	this.m_queryModelDefaultTextsApplicator = null;
	this.m_variableDialog = oFF.XObjectExt.release(this.m_variableDialog);
	this.m_responseOverrideTexts = oFF.XObjectExt.release(this.m_responseOverrideTexts);
	this.m_application = null;
	this.m_clientInfo = oFF.XObjectExt.release(this.m_clientInfo);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OuQueryController.prototype.requestTableTileIfNeeded = function(tableDefinition, visualizationProvidedListener, rowStart, rowEnd, colStart, colEnd)
{
	let result = false;
	let tableContainer = oFF.isNull(tableDefinition) ? null : tableDefinition.getActiveTableContainer();
	let rsContainer = this.getQueryManager().getActiveResultSetContainer();
	if (!this.m_pendingUpdates && this.getStatus() !== oFF.OuQueryControllerStatus.NOT_IN_SYNC && oFF.notNull(tableContainer) && oFF.notNull(rsContainer))
	{
		result = tableContainer.processTileVisualization(oFF.SyncType.NON_BLOCKING, visualizationProvidedListener, null, oFF.QueryExecutionListenerLambda.createSingleUse((syncAction) => {
			this._processOnQueryExecutedInternal(syncAction, syncAction.getData(), oFF.OuQueryController.PAGING_ACTION_IDENTIFIER_OBJ);
		}), oFF.OuQueryController.PAGING_ACTION_IDENTIFIER_OBJ, rowStart, rowEnd, colStart, colEnd);
	}
	return result;
};
oFF.OuQueryController.prototype.rescheduleTableUpdate = function()
{
	this.cancelPendingUpdates();
	let nullListener = null;
	this.m_pendingResultUpdates = oFF.OuLambdaSyncAction.create(this.getApplication().getSession(), nullListener, () => {
		this.m_canceledUpdate = true;
		this.m_rescheduled = true;
		this.refreshDataSource();
		this.m_rescheduled = false;
		return oFF.XBooleanValue.create(true);
	}, 1000);
	this.m_pendingResultUpdates.attachListener(oFF.OuLambdaSyncListener.create((mc, res) => {
		if (!mc.hasErrors())
		{
			this.m_pendingResultUpdates = null;
		}
		return oFF.XBooleanValue.create(true);
	}), oFF.ListenerType.SYNC_LISTENER, null);
	oFF.XTimeout.clear(this.m_timeoutReschedule);
	this.m_timeoutReschedule = oFF.XTimeout.timeout(30, () => {
		this.m_pendingResultUpdates.processSyncAction(oFF.SyncType.NON_BLOCKING, null, null);
	});
};
oFF.OuQueryController.prototype.reset = function()
{
	if (!this._isExternalQm() && oFF.notNull(this.m_dataProvider))
	{
		this.m_dataProvider.getActions().getLifecycleActions().releaseDataProvider(true);
	}
	this.m_dataProvider = null;
	this.m_queryManager = null;
	this.m_defaultQueryManagerSettings = null;
	this.m_isExternalQueryManager = false;
	this.m_isBusy = false;
	this._setStatus(oFF.OuQueryControllerStatus.INITIAL, "Controller reset");
	this._notifyControllerReset();
};
oFF.OuQueryController.prototype.resetPaging = function()
{
	let cmd = this.getQueryManager().getConvenienceCommands();
	cmd.setOffsetRows(0);
	let initialRowWindowsSize = this.getDefaultRowsWindowSize();
	let initialColumnWindowSize = this.getDefaultColumnsWindowSize();
	if (initialRowWindowsSize > 0)
	{
		cmd.setMaxRows(initialRowWindowsSize);
	}
	cmd.setOffsetColumns(0);
	if (initialColumnWindowSize > 0)
	{
		cmd.setMaxColumns(initialColumnWindowSize);
	}
};
oFF.OuQueryController.prototype.resetToDataSource = function(dataSource, inaRepoStructure)
{
	this.m_isResetAction = true;
	this.setForceInitialVariableDialog(false);
	this.setInaRepoJson(inaRepoStructure);
	this.initQueryManagerFromDataSource(this.m_queryManager.getApplication(), dataSource);
};
oFF.OuQueryController.prototype.resumeSetup = function()
{
	if (!this.isQueryManagerSetupFinished())
	{
		this.presentInitialVariablesDialogIfNecessary();
	}
};
oFF.OuQueryController.prototype.setAutoUpdatesEnabled = function(enabled)
{
	this._setAutoUpdatesEnabledInternal(enabled);
};
oFF.OuQueryController.prototype.setBackendRequestFinishedProcedure = function(procedure)
{
	this.m_backendRequestFinishedProcedure = procedure;
};
oFF.OuQueryController.prototype.setBackendRequestStartedProcedure = function(procedure)
{
	this.m_backendRequestStartedProcedure = procedure;
};
oFF.OuQueryController.prototype.setBusyStateChangeConsumer = function(consumer)
{
	this.m_busyStateChangedConsumer = consumer;
};
oFF.OuQueryController.prototype.setColumnsWindowFactor = function(columnsWindowFactor)
{
	this.m_columnsWindowFactor = columnsWindowFactor;
};
oFF.OuQueryController.prototype.setColumnsWindowSize = function(columnsWindowSize)
{
	this.m_columnsWindowSize = columnsWindowSize;
};
oFF.OuQueryController.prototype.setCommercialMinusEnabled = function(commercialMinusEnabled)
{
	this.m_commercialMinusEnabled = commercialMinusEnabled;
};
oFF.OuQueryController.prototype.setComplexFilters = function(dynamicFilterSerialisation)
{
	this.m_dynamicFilterSerialisation = dynamicFilterSerialisation;
};
oFF.OuQueryController.prototype.setControllerResetProcedure = function(procedure)
{
	this.m_controllerResetProcedure = procedure;
};
oFF.OuQueryController.prototype.setCriticalErrorConsumer = function(consumer)
{
	this.m_criticalErrorConsumer = consumer;
};
oFF.OuQueryController.prototype.setDataProviderAutoFetch = function(autoFetch)
{
	this.m_useDpAutoFetch = autoFetch;
};
oFF.OuQueryController.prototype.setDataSourceText = function(dataSourceText)
{
	if (oFF.isNull(dataSourceText))
	{
		return;
	}
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		this.m_initialDataSourceText = dataSourceText;
	}
	else
	{
		let queryModel = this.getQueryManager().getQueryModel();
		queryModel.setText(dataSourceText);
	}
};
oFF.OuQueryController.prototype.setDefaultAccountHierarchy = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return;
	}
	let accountDimension = queryManager.getQueryModel().getAccountDimension();
	if (oFF.notNull(accountDimension))
	{
		let accountHierarchyName = accountDimension.getDefaultHierarchyName();
		let accountHierarchies = accountDimension.getHierarchies();
		if (oFF.XStringUtils.isNullOrEmpty(accountHierarchyName) && oFF.notNull(accountHierarchies) && oFF.XCollectionUtils.hasElements(accountHierarchies.getObjects()))
		{
			accountHierarchyName = accountHierarchies.getObjects().get(0).getHierarchyName();
		}
		accountDimension.setHierarchyName(accountHierarchyName);
		accountDimension.setHierarchyActive(true);
	}
};
oFF.OuQueryController.prototype.setDefaultPagingValues = function()
{
	this.m_rowsWindowSize = 50;
	this.m_columnsWindowSize = 20;
	this.m_maxRowsWindowSize = 10000;
	this.m_maxColumnsWindowSize = 50;
	this.m_rowsWindowFactor = 3;
	this.m_columnsWindowFactor = 3;
	this.m_maxRowsLoad = -1;
	this.m_maxColumnsLoad = 150;
};
oFF.OuQueryController.prototype.setDefaultQmSettings = function(queryManager)
{
	if (oFF.notNull(queryManager))
	{
		let cmd = queryManager.getConvenienceCommands();
		let versionDimension = this.getQueryModel().getVersionDimension();
		if (oFF.notNull(versionDimension) && queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA))
		{
			cmd.moveDimensionToAxis(versionDimension.getName(), oFF.AxisType.COLUMNS);
			let defaultVersionMemberValue = versionDimension.getDefaultMemberValue();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultVersionMemberValue))
			{
				cmd.addSingleMemberFilterByDimension(versionDimension, defaultVersionMemberValue, oFF.ComparisonOperator.EQUAL);
			}
			if (oFF.isNull(this.m_inaRepoJson))
			{
				cmd.refreshFieldContainerDisplayForDimension(versionDimension.getName(), oFF.FieldContainerDisplay.TEXT);
			}
		}
		let defaultQmSettings = this._getDefaultQueryManagerSettings();
		if (oFF.notNull(defaultQmSettings))
		{
			let measureDimension = queryManager.getQueryModel().getMeasureDimension();
			let accountDimension = queryManager.getQueryModel().getAccountDimension();
			let isHana = queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA);
			let isBW = queryManager.getSystemType().isTypeOf(oFF.SystemType.BW);
			if (isHana && oFF.notNull(measureDimension))
			{
				let setupDefaultMeasureStructureFilter = defaultQmSettings.isCreateHanaDefaultMeasureFilter();
				let setupDefaultMeasureStructureAttributes = defaultQmSettings.isSetupHanaDefaultMeasureAttributes();
				this.setupDefaultStructureSettingsForHana(cmd, measureDimension, setupDefaultMeasureStructureFilter, setupDefaultMeasureStructureAttributes);
				if (oFF.notNull(accountDimension))
				{
					this.setDefaultAccountHierarchy(queryManager);
					this.setupDefaultStructureSettingsForHana(cmd, accountDimension, setupDefaultMeasureStructureFilter, setupDefaultMeasureStructureAttributes);
					cmd.refreshFieldContainerDisplayForDimension(accountDimension.getName(), null);
					cmd.moveDimensionToAxis(accountDimension.getName(), oFF.isNull(versionDimension) ? oFF.AxisType.COLUMNS : oFF.AxisType.ROWS);
					let defaultAccountMemberValue = accountDimension.getDefaultMemberValue();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultAccountMemberValue))
					{
						cmd.addSingleMemberFilterByDimension(accountDimension, defaultAccountMemberValue, oFF.ComparisonOperator.EQUAL);
					}
					if (setupDefaultMeasureStructureFilter && !this.getQueryModel().hasUserDefinedMeasures())
					{
						cmd.moveDimensionToAxis(measureDimension.getName(), oFF.AxisType.FREE);
					}
				}
			}
			let dimensions;
			let i;
			let dimension;
			if (isHana && (defaultQmSettings.isPreActivateHanaDefaultHierarchy() || defaultQmSettings.isSetDefaultHanaTotalAlignmentTop()))
			{
				dimensions = queryManager.getDimensionAccessor().getDimensions();
				if (defaultQmSettings.isPreActivateHanaDefaultHierarchy())
				{
					for (i = 0; i < dimensions.size(); i++)
					{
						dimension = dimensions.get(i);
						if (dimension.supportsHierarchy() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getDefaultHierarchyName()) && oFF.XStringUtils.isNullOrEmpty(dimension.getHierarchyName()))
						{
							cmd.setDimensionHierarchy(dimension.getName(), dimension.getDefaultHierarchyName(), true, dimension.getInitialDrillLevel());
							cmd.refreshFieldContainerDisplayForDimension(dimension.getName(), oFF.FieldContainerDisplay.TEXT);
						}
					}
				}
				if (defaultQmSettings.isSetDefaultHanaTotalAlignmentTop())
				{
					for (i = 0; i < dimensions.size(); i++)
					{
						dimension = dimensions.get(i);
						if (dimension.supportsResultAlignment())
						{
							cmd.alignTotals(oFF.QModelLevel.DIMENSIONS, dimension.getName(), oFF.ResultAlignment.TOP);
						}
					}
				}
			}
			if (isHana && defaultQmSettings.isSetDefaultHanaTotalAlignmentTop())
			{
				cmd.alignTotalsWithPriority(oFF.QModelLevel.AXES, oFF.AxisType.ROWS.getName(), oFF.ResultAlignment.TOP, 0);
				cmd.alignTotalsWithPriority(oFF.QModelLevel.AXES, oFF.AxisType.COLUMNS.getName(), oFF.ResultAlignment.TOP, 0);
				cmd.alignTotals(oFF.QModelLevel.QUERY, null, oFF.ResultAlignment.TOP);
			}
			if (isBW && defaultQmSettings.isSetupBwDefaultKeyTypes())
			{
				dimensions = queryManager.getDimensionAccessor().getDimensions();
				for (i = 0; i < dimensions.size(); i++)
				{
					dimension = dimensions.get(i);
					oFF.FieldContainerPresentationHelper.enforceKeyDisplayForDimension(dimension, oFF.FieldContainerKeyDisplay.EXTERNAL_KEY, true);
					oFF.FieldContainerPresentationHelper.applyDefaultClientTextFields(dimension);
				}
			}
			if (defaultQmSettings.isSetAxisNodeAlignmentInherit())
			{
				queryManager.getQueryModel().getRowsAxis().setLowerLevelNodeAlignment(oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS);
				queryManager.getQueryModel().getColumnsAxis().setLowerLevelNodeAlignment(oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS);
			}
		}
	}
};
oFF.OuQueryController.prototype.setDefaultQueryManagerSettings = function(defaultQmSettings)
{
	this.m_defaultQueryManagerSettings = defaultQmSettings;
};
oFF.OuQueryController.prototype.setEnabledResultSetCache = function(enabledResultSetCache)
{
	this.m_enableResultSetCache = enabledResultSetCache;
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.getQueryServiceConfig().enableResultSetCache(enabledResultSetCache);
	}
};
oFF.OuQueryController.prototype.setExitVariablesWinControl = function(winControl)
{
	let queryManager = this.getQueryManager();
	queryManager.stopEventing();
	let variables = queryManager.getVariables();
	oFF.XStream.of(variables).filter((variable) => {
		return variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
	}).filter((variable2) => {
		return variable2.isDynamicOrExitVariable();
	}).map((normalVar) => {
		return normalVar;
	}).forEach((dimVar) => {
		dimVar.setWinControlInAutoSubmit(winControl);
	});
	queryManager.resumeEventing();
};
oFF.OuQueryController.prototype.setFilter = function(dimName, valueList, useExclude)
{
	if (this.updateFilter(dimName, valueList, null, useExclude))
	{
		this.refreshDataSourceIfNeeded();
	}
};
oFF.OuQueryController.prototype.setFilters = function(filters)
{
	if (oFF.isNull(filters) || filters.isEmpty())
	{
		return;
	}
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		this.m_initialFilters = filters;
	}
	else
	{
		let updatedFilters = oFF.XCollectionUtils.filter(filters, (f) => {
			return this.updateFilter(f.getDimensionId(), f.getMemberIds(), f.getHierarchyName(), f.shouldUseExclude());
		});
		if (updatedFilters.size() > 0)
		{
			this.refreshDataSourceIfNeeded();
		}
	}
};
oFF.OuQueryController.prototype.setForceDeserializeWithRepoFormat = function(forceRepoFormat)
{
	this.m_forceRepoFormat = forceRepoFormat;
};
oFF.OuQueryController.prototype.setForceInitialVariableDialog = function(force)
{
	this.m_forceInitialVariableDialog = force;
};
oFF.OuQueryController.prototype.setHorizontalLazyLoad = function(horizontalLazyLoad)
{
	this.m_horizontalLazyLoad = horizontalLazyLoad;
};
oFF.OuQueryController.prototype.setImplicitVariableHandling = function(implicitVariableHandling)
{
	this.m_implicitVariableHandling = implicitVariableHandling;
};
oFF.OuQueryController.prototype.setInaRepoJson = function(inaRepoJson)
{
	this.m_inaRepoJson = inaRepoJson;
};
oFF.OuQueryController.prototype.setMaxColumnsLoad = function(maxColumnsLoad)
{
	this.m_maxColumnsLoad = maxColumnsLoad;
};
oFF.OuQueryController.prototype.setMaxColumnsWindowSize = function(maxColumnsWindowSize)
{
	this.m_maxColumnsWindowSize = maxColumnsWindowSize;
};
oFF.OuQueryController.prototype.setMaxRowsLoad = function(maxRowsLoad)
{
	this.m_maxRowsLoad = maxRowsLoad;
};
oFF.OuQueryController.prototype.setMaxRowsWindowSize = function(maxRowsWindowSize)
{
	this.m_maxRowsWindowSize = maxRowsWindowSize;
};
oFF.OuQueryController.prototype.setMessageConsumer = function(consumer)
{
	this.m_messageConsumer = consumer;
};
oFF.OuQueryController.prototype.setModelJson = function(modelJson)
{
	this.m_modelJson = modelJson;
};
oFF.OuQueryController.prototype.setNewDataProviderReadyConsumer = function(consumer)
{
	this.m_newDataProviderReadyConsumer = consumer;
};
oFF.OuQueryController.prototype.setQueryModelDefaultTextsApplicator = function(queryModelDefaultTextsApplicator)
{
	this.m_queryModelDefaultTextsApplicator = queryModelDefaultTextsApplicator;
};
oFF.OuQueryController.prototype.setQueryStateChangedConsumer = function(consumer)
{
	this.m_queryStateChanged = consumer;
};
oFF.OuQueryController.prototype.setRowsWindowFactor = function(rowsWindowFactor)
{
	this.m_rowsWindowFactor = rowsWindowFactor;
};
oFF.OuQueryController.prototype.setRowsWindowSize = function(rowsWindowSize)
{
	this.m_rowsWindowSize = rowsWindowSize;
};
oFF.OuQueryController.prototype.setSetupInterruptedConsumer = function(consumer)
{
	this.m_setupInterruptedConsumer = consumer;
};
oFF.OuQueryController.prototype.setSetupStepChangedConsumer = function(consumer)
{
	this.m_setupStepChangedConsumer = consumer;
};
oFF.OuQueryController.prototype.setStatusChangedConsumer = function(consumer)
{
	this.m_statusChangedConsumer = consumer;
};
oFF.OuQueryController.prototype.setSuppressExitVariables = function(disable)
{
	this.m_disableExitVariables = disable;
};
oFF.OuQueryController.prototype.setUseAutoSubmit = function(autoSubmit)
{
	this.m_autoSubmit = autoSubmit;
};
oFF.OuQueryController.prototype.setVariable = function(varName, valueList)
{
	if (this.updateVariable(varName, valueList) && this.isQueryManagerSetupFinished())
	{
		this.submitManualVariables();
	}
};
oFF.OuQueryController.prototype.setVariableDialogConfigSupplier = function(supplier)
{
	this.m_variableDialogConfigSupplier = supplier;
};
oFF.OuQueryController.prototype.setVariables = function(variables)
{
	if (oFF.isNull(variables) || variables.isEmpty())
	{
		return;
	}
	let queryManager = this.getQueryManager();
	if (oFF.isNull(queryManager))
	{
		this.m_initialVariables = variables;
	}
	else
	{
		let processorState = queryManager.getVariableProcessorState();
		if (oFF.notNull(this.m_inaRepoJson) && processorState === oFF.VariableProcessorState.CHANGEABLE_STARTUP && !this.m_forceInitialVariableDialog)
		{
			this.m_forceInitialVariableDialog = true;
			this.m_overrideAutoSubmitOnStartup = true;
		}
		let updatedVariables = oFF.XCollectionUtils.filter(variables, (v) => {
			return this.updateVariable(v.getId(), v.getValues());
		});
		if (updatedVariables.size() > 0 && this.isQueryManagerSetupFinished())
		{
			this.submitManualVariables();
		}
	}
};
oFF.OuQueryController.prototype.setVariablesWinControl = function(winControl)
{
	let queryManager = this.getQueryManager();
	queryManager.stopEventing();
	let variables = queryManager.getVariables();
	oFF.XStream.of(variables).filter((variable) => {
		return variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
	}).filter((variable2) => {
		return !variable2.isHierarchyInfoVariableForExplicitlyInactivatedHierarchy();
	}).map((normalVar) => {
		return normalVar;
	}).forEach((dimVar) => {
		dimVar.setWinControlInAutoSubmit(winControl);
	});
	queryManager.resumeEventing();
};
oFF.OuQueryController.prototype.setupDefaultStructureSettingsForHana = function(cmd, structureDimension, setupDefaultMeasureStructureFilter, setupDefaultMeasureAttributes)
{
	if (oFF.XCollectionUtils.hasElements(structureDimension.getAllStructureMembers()) && setupDefaultMeasureStructureFilter && !oFF.XCollectionUtils.hasElements(structureDimension.getFilter()))
	{
		let nonHiddenStructureMembers = oFF.XStream.of(structureDimension.getAllStructureMembers()).filter((sm) => {
			return sm.getResultVisibility() === null || !sm.getResultVisibility().isTypeOf(oFF.ResultVisibility.HIDDEN);
		}).collect(oFF.XStreamCollector.toList());
		if (oFF.XCollectionUtils.hasElements(nonHiddenStructureMembers))
		{
			cmd.addSingleMeasureFilter(nonHiddenStructureMembers.get(0).getName());
		}
	}
	if (setupDefaultMeasureAttributes)
	{
		cmd.refreshFieldContainerDisplayForDimension(structureDimension.getName(), oFF.FieldContainerDisplay.TEXT);
	}
};
oFF.OuQueryController.prototype.setupNewQueryManager = function(queryManager, dataProvider, isExternal)
{
	if (oFF.notNull(queryManager))
	{
		if (oFF.notNull(this.m_queryManager) && !this.m_queryManager.isReleased() && this._isExternalQm())
		{
			this.m_queryManager.detachBeforeQueryExecutionListener(this);
			this.m_queryManager.detachQueryExecutedListener(this);
		}
		if (oFF.notNull(this.m_dataProvider) && !this.m_isExternalDataProvider)
		{
			this.m_oldDataProviderToRelease = this.m_dataProvider;
		}
		this.m_queryManager = queryManager;
		this.m_dataProvider = dataProvider;
		this.m_isExternalQueryManager = isExternal;
		this.m_isExternalDataProvider = isExternal;
		if (this.m_useDpAutoFetch)
		{
			this.m_resultListenerId = this.m_dataProvider.getEventing().getListenerForResultDataFetch().addConsumer(this.onResultFetchEvent.bind(this));
		}
		if (this.supportsResultSetCache())
		{
			this.m_enableResultSetCache = true;
			this.m_queryManager.getQueryServiceConfig().enableResultSetCache(this.isEnabledResultSetCache());
		}
		if (this.m_queryManager.getModelCapabilities().supportsUdhKey())
		{
			let udhs = this.getQueryModel().getUniversalDisplayHierarchies();
			this.activateUdhKeyIfPossible(udhs.getByAxisType(oFF.AxisType.ROWS));
			this.activateUdhKeyIfPossible(udhs.getByAxisType(oFF.AxisType.COLUMNS));
		}
		if (isExternal)
		{
			this.m_queryListenerExternal = oFF.QueryExecutionListenerLambda.createSingleUse((rsA) => {
				this._processOnQueryExecutedInternal(rsA, rsA.getData(), oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ);
			});
			queryManager.attachQueryExecutedListener(this.m_queryListenerExternal, oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ);
			queryManager.getQueryModel().getVisualizationManager().attachResultSetCollectorListener(this, oFF.OuQueryController.EXTERNAL_QM_IDENTIFIER_OBJ);
		}
		this.m_queryListener = oFF.QueryExecutionListenerLambda.createSingleUse((rsA) => {
			this._processOnFirstQueryExecutedInternal();
		});
		queryManager.attachQueryExecutedListener(this.m_queryListener, oFF.OuQueryController.FIRST_QM_IDENTIFIER_OBJ);
		queryManager.attachBeforeQueryExecutionListener(this, null);
		if (queryManager.getConvenienceCommands().isBw())
		{
			queryManager.setDataRefreshEnabled(oFF.ActionChoice.ON);
			queryManager.getInitSettings().setIsExternalizedDynamicFilter(false);
			queryManager.getInitSettings().setIsExternalizedNonVariableFilter(false);
		}
		queryManager.getTagging().put(oFF.QStateConstants.TAG_UNDO_INCLUDE, "true");
		queryManager.getApplication().getUndoManager().reset();
		queryManager.disableReturnedDataSelection(oFF.ReturnedDataSelection.CELL_EXPLAIN);
		queryManager.setValidateLocalFormulaMembers(true);
		if (!this.m_disableExitVariables)
		{
			this.setExitVariablesWinControl(true);
		}
		this.loadSfx();
		if (!this._isExternalQm())
		{
			this.setDefaultQmSettings(this.getQueryManager());
		}
		this.applyGeneralSetting(this.getQueryManager());
		if (oFF.notNull(this.m_queryModelDefaultTextsApplicator))
		{
			this.m_queryModelDefaultTextsApplicator(this.getQueryModel());
		}
		if (oFF.notNull(this.m_inaRepoJson))
		{
			let modelFormat = this.m_forceRepoFormat ? oFF.QModelFormat.INA_REPOSITORY : oFF.QModelFormat.INA_REPOSITORY_DELTA;
			if (this._isAutoSubmitEffective())
			{
				this.loadRepoStateBeforeAutoSubmit();
			}
			else
			{
				queryManager.getQueryModel().getVariableContainer().deserializeFromElementExt(modelFormat, this.m_inaRepoJson);
			}
		}
		this.addModelFormulaExceptionsToFormulaExceptionManager(queryManager.getQueryModel());
		this.ensureReadOnly(this.getQueryManager());
		if (!this.m_implicitVariableHandling)
		{
			this.finalizeQueryManagerSetup();
			return;
		}
		this.getExitAndDynamicVariableUpdatePromise().onFinally(() => {
			this.applyInitialVariables();
			if (!this.presentInitialVariablesDialogIfNecessary())
			{
				if (this._isAutoSubmitEffective())
				{
					this.finalizeQueryManagerSetup();
				}
				else
				{
					queryManager.submitVariables(oFF.SyncType.NON_BLOCKING, oFF.VariableProcessorCallbackLambda.createSingleUse((result) => {
						this.handleVariableSubmitCallback(result);
					}), null);
				}
			}
		});
	}
};
oFF.OuQueryController.prototype.setupPlanning = function(dataSource, datasetEpmObject)
{
	let planningServiceConfig = oFF.OlapApiModule.SERVICE_TYPE_PLANNING.createServiceConfig(this.getApplication());
	planningServiceConfig.setSystemName(dataSource.getSystemName());
	let planningServiceProperties = planningServiceConfig.getProperties();
	planningServiceProperties.put(oFF.PlanningConstants.PLANNING_SCHEMA, datasetEpmObject.getSchemaName());
	planningServiceProperties.put(oFF.PlanningConstants.PLANNING_MODEL, datasetEpmObject.getEpmModelName());
	planningServiceProperties.putString(oFF.PlanningConstants.PLANNING_MODEL_BEHAVIOUR, oFF.PlanningModelBehaviour.STANDARD.toString());
	planningServiceProperties.putString(oFF.PlanningConstants.PERSISTENCE_TYPE, oFF.PlanningPersistenceType.AUTO.toString());
	planningServiceProperties.putBoolean(oFF.PlanningConstants.WITH_SHARED_VERSIONS, true);
	let userProfile = this.getApplication().getProcess().getUserProfile();
	let sacUserName = oFF.XStringUtils.concatenate3(userProfile.getTenantId(), "_", userProfile.getName());
	planningServiceProperties.putString(oFF.PlanningConstants.BACKEND_USER_NAME, sacUserName);
	planningServiceConfig.processServiceCreation(oFF.SyncType.NON_BLOCKING, this, null);
};
oFF.OuQueryController.prototype.setupQueryController = function(application)
{
	if (oFF.isNull(application))
	{
		throw oFF.XException.createRuntimeException("Application is required to create a new query controller instance!");
	}
	this.m_application = application;
	this.m_resultEmptyListeners = oFF.XList.create();
	this.m_resultReadyListeners = oFF.XList.create();
	this.m_renderingPauseEndListeners = oFF.XList.create();
	this.m_isExternalQueryManager = false;
	this.m_isBusy = false;
	this.m_status = oFF.OuQueryControllerStatus.INITIAL;
	this.m_defaultQueryManagerSettings = null;
	this.m_responseOverrideTexts = oFF.XHashMapByString.create();
	this.m_overrideAutoSubmitOnStartup = false;
	this.m_clientInfo = oFF.XClientInfo.createWithParent(application.getClientInfo());
	this.m_scheduleExportHelper = oFF.SuExportScheduleHelper.create(application.getProcess());
};
oFF.OuQueryController.prototype.simplifyDynamicFilter = function()
{
	let queryModel = this.m_queryManager.getQueryModel();
	let dynamicFilter = queryModel.getFilter().getDynamicFilter();
	if (dynamicFilter.isComplexFilter())
	{
		oFF.ComplexFilterSeparationUtil.isolateTupleFiltersIntoSeparateLayers(queryModel);
		oFF.ComplexFilterSeparationUtil.isolateComplexFilters(queryModel);
		oFF.ComplexFilterSeparationUtil.isolateCartesianFilterIntersectsIntoSeparateLayers(queryModel, true);
		if (dynamicFilter.getComplexRoot() !== null)
		{
			let cartesianProduct = oFF.QFilterUtil.convertComplexFilterToCartesian(dynamicFilter.getComplexRoot());
			if (oFF.isNull(cartesianProduct))
			{
				this._notifyMessage(oFF.OuQueryControllerMessage.FILTER_NOT_FULLY_SUPPORTED, null);
			}
			else
			{
				dynamicFilter.setCartesianProduct(cartesianProduct);
			}
		}
	}
	if (dynamicFilter.getCartesianProduct() !== null)
	{
		this.clearSuperfluousFilters(dynamicFilter.getCartesianProduct());
	}
};
oFF.OuQueryController.prototype.submitManualVariables = function()
{
	this._setBusyState(true);
	this.getQueryManager().submitVariables(this.getApplication().getDefaultSyncType(), oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		this.refreshDataSource();
	}), null);
};
oFF.OuQueryController.prototype.supportsResultSetCache = function()
{
	return oFF.notNull(this.m_queryManager) && this.m_queryManager.getModelCapabilities().supportsResultSetCache();
};
oFF.OuQueryController.prototype.throwSchedulingConnectionError = function(errorMessage)
{
	if (oFF.XString.containsString(this.getProcess().getNetworkLocation().getUrl(), "dataanalyzer"))
	{
		this.m_scheduleExportHelper.postStatusNotificationWithData(oFF.SuExportScheduleHelper.EXPORT_CONNECTION_NAME, errorMessage, oFF.SuExportScheduleNotificationType.ERROR, this.getApplication().getConnectionPool().getAllOpenConnections().get(0).getSystemName());
	}
};
oFF.OuQueryController.prototype.undoRedoActionFinished = function(extResult, undoSupport, customIdentifier)
{
	if (this.m_useDpAutoFetch)
	{
		this.m_undoRedoCorrelationId = oFF.XGuid.getGuid();
		let modelEvt = this.m_dataProvider.getEventing().getEmitterForModelChanges().newTypedEvent();
		modelEvt.setCorrelationId(this.m_undoRedoCorrelationId);
		modelEvt.queue();
	}
	else
	{
		this.getQueryModel().getVisualizationManager().getGridCollector().processExecution(oFF.SyncType.NON_BLOCKING, this, this, oFF.OuQueryController.UNDO_REDO_ACTION_IDENTIFIER_OBJ);
	}
};
oFF.OuQueryController.prototype.updateFilter = function(dimName, valueList, hierarchyName, useExclude)
{
	if (oFF.isNull(dimName))
	{
		return false;
	}
	let dimension = this.getQueryManager().getQueryModel().getDimensionByName(dimName);
	let filterIsSet = false;
	if (oFF.notNull(dimension))
	{
		this.getQueryManager().getConvenienceCommands().clearFiltersByDimension(dimension);
		if (oFF.notNull(valueList) && valueList.size() > 0)
		{
			let dynamicFilter = this.getQueryManager().getQueryModel().getFilter().getDynamicFilter();
			oFF.XCollectionUtils.forEach(valueList, (val) => {
				let filterOp = dynamicFilter.addSingleMemberFilterByDimension(dimension, val, oFF.ComparisonOperator.EQUAL);
				filterOp.setSetSign(useExclude ? oFF.SetSign.EXCLUDING : oFF.SetSign.INCLUDING);
				if (oFF.notNull(hierarchyName))
				{
					filterOp.setHierarchyName(hierarchyName);
				}
			});
			if (oFF.notNull(hierarchyName) && dynamicFilter.getCartesianProduct() !== null && dynamicFilter.getCartesianProduct().getCartesianListByDimensionName(dimName) !== null)
			{
				let cartesianList = dynamicFilter.getCartesianProduct().getCartesianListByDimensionName(dimName);
				cartesianList.setHierarchyName(hierarchyName);
				let fieldMetadata = dimension.getHierarchyKeyField().getMetadata();
				if (oFF.notNull(fieldMetadata))
				{
					cartesianList.setFieldMetadata(fieldMetadata);
				}
			}
			filterIsSet = true;
		}
	}
	return filterIsSet;
};
oFF.OuQueryController.prototype.updateMeasureBasedFilters = function()
{
	let queryModel = this.m_queryManager.getQueryModel();
	if (queryModel.getModelCapabilities().supportsFilterMeasureBased())
	{
		oFF.XStream.of(queryModel.getFilter().getLinkedFilters()).map((linkedFilter) => {
			return linkedFilter.getFilterRootElement();
		}).filter((filterRoot) => {
			return oFF.notNull(filterRoot) && filterRoot.getComponentType() === oFF.FilterComponentType.FILTER_MEASURE_BASED;
		}).forEach((mbf) => {
			mbf.setLinkQueryFilter(true);
		});
	}
};
oFF.OuQueryController.prototype.updateVariable = function(varName, valueList)
{
	if (oFF.isNull(varName))
	{
		return false;
	}
	let variableIsSet = false;
	let variable = this.getQueryManager().getVariable(varName);
	if (oFF.notNull(variable))
	{
		variable.clear();
		if (oFF.notNull(valueList) && valueList.size() > 0)
		{
			let variableType = variable.getVariableType();
			if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
			{
				let dimVar = variable;
				let memberFilter = dimVar.getMemberFilter();
				oFF.XCollectionUtils.forEach(valueList, (val) => {
					let filterEle = memberFilter.addNewCartesianElement();
					filterEle.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
					filterEle.setSetSign(oFF.SetSign.INCLUDING);
					filterEle.getLow().setString(val);
				});
				variableIsSet = true;
			}
			else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
			{
				let optionVariable = variable;
				if (optionVariable.supportsMultipleValues())
				{
					oFF.XCollectionUtils.forEach(valueList, (val) => {
						optionVariable.addOptionByName(val);
					});
				}
				else
				{
					optionVariable.setOptionByName(valueList.get(0));
				}
				variableIsSet = true;
			}
			else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
			{
				let simpleVariable = variable;
				if (simpleVariable.supportsMultipleValues())
				{
					oFF.XCollectionUtils.forEach(valueList, (val) => {
						simpleVariable.addValueByString(val);
					});
				}
				else
				{
					simpleVariable.setValueByString(valueList.get(0));
				}
				variableIsSet = true;
			}
		}
	}
	return variableIsSet;
};

oFF.OuCalcDatasourceHandlerUAMAccount = function() {};
oFF.OuCalcDatasourceHandlerUAMAccount.prototype = new oFF.OuCalcDatasourceHandlerModelAccount();
oFF.OuCalcDatasourceHandlerUAMAccount.prototype._ff_c = "OuCalcDatasourceHandlerUAMAccount";

oFF.OuCalcDatasourceHandlerUAMAccount._createUAM = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandlerUAMAccount();
	handler.setupInternal(queryModel, calcStructure, false);
	oFF.XObjectExt.assertTrueExt(calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider only support account structures");
	return handler;
};
oFF.OuCalcDatasourceHandlerUAMAccount.createUAMPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandlerUAMAccount();
	oFF.XObjectExt.assertTrueExt(calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider only support account structures");
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandlerUAMAccount.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProviderUAMAccount._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandlerUAMAccount.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProviderUAMAccount.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.OuCalcDatasourceHandlerUAMMeasure = function() {};
oFF.OuCalcDatasourceHandlerUAMMeasure.prototype = new oFF.OuCalcDatasourceHandlerModelMeasure();
oFF.OuCalcDatasourceHandlerUAMMeasure.prototype._ff_c = "OuCalcDatasourceHandlerUAMMeasure";

oFF.OuCalcDatasourceHandlerUAMMeasure._createUAM = function(queryModel, calcStructure)
{
	let handler = new oFF.OuCalcDatasourceHandlerUAMMeasure();
	handler.setupInternal(queryModel, calcStructure, false);
	oFF.XObjectExt.assertTrue(queryModel.hasUserDefinedMeasures());
	oFF.XObjectExt.assertTrueExt(!calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider handles the measures structure in acquired models");
	return handler;
};
oFF.OuCalcDatasourceHandlerUAMMeasure.createUAMPromise = function(queryModel, calcStructure, useClientQueryObjectsStorage)
{
	let handler = new oFF.OuCalcDatasourceHandlerUAMMeasure();
	oFF.XObjectExt.assertTrue(queryModel.hasUserDefinedMeasures());
	oFF.XObjectExt.assertTrueExt(!calcStructure.getDimensionType().isEqualTo(oFF.DimensionType.ACCOUNT), "This provider handles the measures structure in acquired models");
	return handler.setupInternalPromise(queryModel, calcStructure, useClientQueryObjectsStorage);
};
oFF.OuCalcDatasourceHandlerUAMMeasure.prototype.getDatasource = function()
{
	return oFF.notNull(this.m_datasource) ? this.m_datasource : oFF.FeDatasourceMetadataProviderUAMMeasure._create(this.m_queryModel, this.m_calcStructure);
};
oFF.OuCalcDatasourceHandlerUAMMeasure.prototype.getDatasourcePromise = function()
{
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(this.m_datasource);
	}
	else
	{
		return oFF.FeDatasourceMetadataProviderUAMMeasure.createPromise(this.m_queryModel, this.m_calcStructure, this.m_useClientQueryObjectsStorage);
	}
};

oFF.FdController = function() {};
oFF.FdController.prototype = new oFF.XObject();
oFF.FdController.prototype._ff_c = "FdController";

oFF.FdController.IDENTIFIER_INITIAL_LOAD = "IdentifierInitialLoad";
oFF.FdController.IDENTIFIER_INITIAL_LOAD_RANGE = "IdentifierInitialLoadRange";
oFF.FdController.IDENTIFIER_INITIAL_SEARCH = "IdentifierInitialSearch";
oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES = "IdentifierLoadAttributes";
oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES_AND_REFRESH = "IdentifierLoadAttributesAndRefresh";
oFF.FdController.IDENTIFIER_PRELOAD = "IdentifierPreload";
oFF.FdController.IDENTIFIER_PRELOAD_SELECTION = "IdentifierPreloadSelection";
oFF.FdController.IDENTIFIER_REFRESH = "IdentifierRefresh";
oFF.FdController.IDENTIFIER_RELOAD = "IdentifierReload";
oFF.FdController.IDENTIFIER_SELECT_ALL = "IdentifierSelectAll";
oFF.FdController.create = function(program)
{
	let obj = new oFF.FdController();
	obj.setupController(program);
	return obj;
};
oFF.FdController.prototype.m_initialData = null;
oFF.FdController.prototype.m_initialMessages = null;
oFF.FdController.prototype.m_initialSetupRequirements = null;
oFF.FdController.prototype.m_loadAllStartPage = 0;
oFF.FdController.prototype.m_messagePoster = null;
oFF.FdController.prototype.m_model = null;
oFF.FdController.prototype.m_preloadStartPage = 0;
oFF.FdController.prototype.m_program = null;
oFF.FdController.prototype.m_view = null;
oFF.FdController.prototype.addInitialMessages = function(messages)
{
	if (oFF.notNull(messages) && oFF.XCollectionUtils.hasElements(messages.getMessages()))
	{
		if (oFF.isNull(this.m_initialMessages))
		{
			this.m_initialMessages = oFF.MessageManagerSimple.createMessageManager();
		}
		this.m_initialMessages.addAllMessages(messages);
	}
};
oFF.FdController.prototype.cancelSelection = function()
{
	this.closeDialog(true, null);
};
oFF.FdController.prototype.checkSelectionValid = function(selection)
{
	let selectionRequired = this.m_model.getConfig().isSelectionRequired();
	let selectionValid = this.m_view.validate(selectionRequired);
	if (selectionRequired && !oFF.XCollectionUtils.hasElements(selection))
	{
		this.postMessage(oFF.UiMessageType.ERROR, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_SELECTION_REQUIRED));
		return false;
	}
	return selectionValid;
};
oFF.FdController.prototype.closeDialog = function(isCancel, selection)
{
	if (!this.isReleased())
	{
		if (!isCancel && !this.checkSelectionValid(selection))
		{
			return false;
		}
		let config = this.m_model.getConfig();
		if (isCancel)
		{
			if (config.getCloseListener() !== null)
			{
				config.getCloseListener().onFilterDialogCancel();
			}
		}
		else
		{
			let settings = oFF.FdSettings.create(this.m_model);
			if (config.getBeforeFilterChangeListener() !== null)
			{
				config.getBeforeFilterChangeListener().onBeforeChange(settings);
			}
			if (config.getCloseListener() !== null)
			{
				config.getCloseListener().onFilterDialogOk(oFF.FdItemFactory.asFdValueList(selection), settings);
			}
		}
		this.releaseObject();
	}
	return true;
};
oFF.FdController.prototype.confirmSelection = function()
{
	let selectedItems = this.m_model.getSelectedItems();
	if (this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_ADVANCED))
	{
		let selectedItemsSorted = oFF.XList.create();
		oFF.XCollectionUtils.addAll(selectedItemsSorted, oFF.XCollectionUtils.filter(selectedItems, (item1) => {
			return item1.getFdComparisonOperator().isIncluding();
		}));
		oFF.XCollectionUtils.addAll(selectedItemsSorted, oFF.XCollectionUtils.filter(selectedItems, (item2) => {
			return !item2.getFdComparisonOperator().isIncluding();
		}));
		selectedItems = selectedItemsSorted;
	}
	return this.closeDialog(false, selectedItems);
};
oFF.FdController.prototype.fetchChildren = function(node, offset, amount, presentations, listener, customIdentifier)
{
	this.m_model.getHierarchyModel().fetchChildren(node, offset, amount, presentations, listener, customIdentifier);
};
oFF.FdController.prototype.getAdditionalPresentations = function()
{
	let isHierarchicalValueHelp = this.m_model.getHierarchyModel().isHierarchical();
	let isTreeViewDesktop = isHierarchicalValueHelp && !this.m_program.getUiManager().getDeviceInfo().isMobile();
	return this.m_model.getPresentationsModel().getAdditionalPresentationValues(!isTreeViewDesktop);
};
oFF.FdController.prototype.getMessagePoster = function()
{
	if (oFF.isNull(this.m_messagePoster))
	{
		this.m_messagePoster = oFF.UiMessageCenter.createMessageCenter(this.m_program.getGenesis());
	}
	return this.m_messagePoster;
};
oFF.FdController.prototype.getModel = function()
{
	return this.m_model;
};
oFF.FdController.prototype.getNextPageWithoutItemsLoaded = function(currentPage)
{
	for (let i = 1; i <= this.m_model.getConfig().getListPreloadPageCount(); i++)
	{
		if (!oFF.XCollectionUtils.hasElements(this.m_model.getItemsByPage(currentPage + i)))
		{
			return currentPage + i;
		}
	}
	return -1;
};
oFF.FdController.prototype.getProgram = function()
{
	return this.m_program;
};
oFF.FdController.prototype.isReloadRequired = function(item, requiredPresentations)
{
	return oFF.isNull(item) || oFF.XCollectionUtils.hasElements(this.m_model.getMissingPresentations(oFF.XCollectionUtils.singletonList(item), requiredPresentations));
};
oFF.FdController.prototype.loadAndSelectAllMembers = function(presentations)
{
	if (this.m_model.supportsSelectAll())
	{
		let currentMaxPage = this.m_model.getPageCount();
		let itemsOnLastPage = this.m_model.getItemsByPage(currentMaxPage - 1);
		if (oFF.notNull(itemsOnLastPage) && itemsOnLastPage.size() >= this.m_model.getConfig().getListPageSize() && this.m_loadAllStartPage === -1)
		{
			this.m_loadAllStartPage = currentMaxPage;
			this.m_model.processData(currentMaxPage, -1, presentations, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_SELECT_ALL));
		}
		else
		{
			this.onProcessFinished(oFF.XList.create(), null, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_SELECT_ALL));
		}
	}
};
oFF.FdController.prototype.loadSuggestions = function(text, listener)
{
	this.m_model.loadSuggestions(text, listener);
};
oFF.FdController.prototype.onAfterOpen = function(event)
{
	this.setupInitialRequirements();
	if (this.m_initialSetupRequirements.contains(oFF.FdController.IDENTIFIER_INITIAL_LOAD))
	{
		this.requestData();
		if (this.isReleased())
		{
			return;
		}
		this.m_model.getHierarchyModel().processHierarchies();
	}
	if (this.m_initialSetupRequirements.contains(oFF.FdController.IDENTIFIER_INITIAL_SEARCH))
	{
		let searchPresentations = this.m_model.getConfig().isShowSimplifiedSearch() ? null : this.m_model.getPresentationsModel().getDefaultSearchPresentation().getFilterableValues();
		this.search(this.m_model.getInitialSearchValue(), searchPresentations, this.getAdditionalPresentations(), true, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_INITIAL_SEARCH));
		this.m_model.getHierarchyModel().processHierarchies();
	}
	if (this.m_initialSetupRequirements.contains(oFF.FdController.IDENTIFIER_INITIAL_LOAD_RANGE))
	{
		this.m_model.processDataRange(this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_INITIAL_LOAD_RANGE));
	}
	this.onInitialLoadFinished(null, null);
};
oFF.FdController.prototype.onError = function(messages, customIdentifier)
{
	if (oFF.notNull(customIdentifier))
	{
		if (oFF.XString.isEqual(customIdentifier.toString(), oFF.FdController.IDENTIFIER_INITIAL_LOAD) && this.m_model.getConfig().getContentType().isVariableValueHelp() && this.m_model.isSystemTypeHana() && this.m_model.getReadMode() === oFF.OlapUiReadMode.BOOKED)
		{
			if (!this.m_model.supportsReadMode(oFF.OlapUiReadMode.MASTER))
			{
				let supportedReadModes = oFF.XList.create();
				supportedReadModes.add(oFF.OlapUiReadMode.BOOKED);
				supportedReadModes.add(oFF.OlapUiReadMode.MASTER);
				this.m_model.initReadMode(oFF.OlapUiReadMode.MASTER, oFF.OlapUiReadMode.MASTER, supportedReadModes);
			}
			else
			{
				this.m_model.setReadMode(oFF.OlapUiReadMode.MASTER);
			}
			this.requestData();
			return;
		}
		else if (oFF.XString.isEqual(customIdentifier.toString(), oFF.FdController.IDENTIFIER_PRELOAD))
		{
			this.m_preloadStartPage = -1;
		}
		else if (oFF.XString.isEqual(customIdentifier.toString(), oFF.FdController.IDENTIFIER_SELECT_ALL))
		{
			this.m_loadAllStartPage = -1;
		}
	}
	if (oFF.isNull(this.m_view))
	{
		this.postMessages(messages);
		this.m_program.terminate();
	}
	else
	{
		this.m_view.onError(messages, customIdentifier);
	}
};
oFF.FdController.prototype.onInitialLoadFinished = function(loadIdentifier, messages)
{
	if (!this.isReleased() && oFF.isNull(this.m_view))
	{
		this.addInitialMessages(messages);
		this.m_initialSetupRequirements.removeElement(loadIdentifier);
		if (this.m_initialSetupRequirements.isEmpty())
		{
			this.m_view = oFF.FdView.createView(this, this.m_model, this.m_program.getGenesis(), () => {
				this.onViewTypeChanged();
			});
			this.m_view.publishMembersList(oFF.notNull(this.m_initialData) ? this.m_initialData : this.m_model.getItemsOnCurrentPage(), this.m_initialMessages);
			this.m_program.onViewCreated(this.m_view.getInitialFocusControl());
			this.m_program.onDialogStartupFinished();
		}
	}
};
oFF.FdController.prototype.onProcessFinished = function(items, messages, customIdentifier)
{
	let processType = customIdentifier.toString();
	if (!this.isReleased() && oFF.notNull(items))
	{
		let selectedItems = this.m_model.getSelectedItems();
		switch (processType)
		{
			case oFF.FdController.IDENTIFIER_INITIAL_LOAD:
				this.m_model.addItems(items, 0);
				if (oFF.XCollectionUtils.hasElements(selectedItems))
				{
					if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.RANGE))
					{
						this.m_initialSetupRequirements.add(oFF.FdController.IDENTIFIER_PRELOAD_SELECTION);
					}
					this.m_model.syncSelectionListWithKnownItems(selectedItems, items, null, false, false, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_PRELOAD_SELECTION));
				}
				this.m_initialData = this.m_model.getItemsOnCurrentPage();
				this.onInitialLoadFinished(oFF.FdController.IDENTIFIER_INITIAL_LOAD, messages);
				break;

			case oFF.FdController.IDENTIFIER_INITIAL_SEARCH:
				if (oFF.XCollectionUtils.hasElements(selectedItems))
				{
					this.m_model.syncSelectionListWithKnownItems(selectedItems, items, null, false, false, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_PRELOAD_SELECTION));
				}
				this.m_initialData = items;
				this.onInitialLoadFinished(oFF.FdController.IDENTIFIER_INITIAL_SEARCH, messages);
				break;

			case oFF.FdController.IDENTIFIER_INITIAL_LOAD_RANGE:
				this.m_model.getRangeModel().setRange(items);
				if (oFF.XCollectionUtils.hasElements(selectedItems) && !this.m_model.getRangeModel().isInputValueTypeNumeric() && !this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.LIST))
				{
					this.m_initialSetupRequirements.add(oFF.FdController.IDENTIFIER_PRELOAD_SELECTION);
					this.m_model.syncSelectionListWithKnownItems(selectedItems, this.m_model.getItems(0, -1), null, false, false, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_PRELOAD_SELECTION));
				}
				this.onInitialLoadFinished(oFF.FdController.IDENTIFIER_INITIAL_LOAD_RANGE, messages);
				break;

			case oFF.FdController.IDENTIFIER_REFRESH:
				this.m_view.publishMembersList(items, messages);
				break;

			case oFF.FdController.IDENTIFIER_RELOAD:
				this.m_model.addItems(items, 0);
				this.m_view.publishMembersList(this.m_model.getItemsOnCurrentPage(), messages);
				break;

			case oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES:
				this.m_view.publishPresentations();
				break;

			case oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES_AND_REFRESH:
				this.m_view.publishMembersList(this.m_model.getItemsOnCurrentPage(), messages);
				break;

			case oFF.FdController.IDENTIFIER_PRELOAD:
				this.m_model.addItems(items, this.m_preloadStartPage);
				this.m_preloadStartPage = -1;
				break;

			case oFF.FdController.IDENTIFIER_PRELOAD_SELECTION:
				if (oFF.notNull(this.m_view))
				{
					this.m_model.updateSelection();
				}
				else
				{
					this.onInitialLoadFinished(oFF.FdController.IDENTIFIER_PRELOAD_SELECTION, null);
				}
				break;

			case oFF.FdController.IDENTIFIER_SELECT_ALL:
				this.m_model.addItems(items, this.m_loadAllStartPage);
				this.m_loadAllStartPage = -1;
				this.m_model.selectAll();
				break;

			default:
		}
	}
};
oFF.FdController.prototype.onResize = function(event)
{
	if (oFF.notNull(this.m_view))
	{
		this.m_view.onResize(-1, event.getOffsetWidth());
	}
};
oFF.FdController.prototype.onViewTypeChanged = function()
{
	if (!this.reloadDataRequired(this.m_model.getPresentationsModel().getAdditionalPresentationValues(true)))
	{
		this.m_view.publishMembersList(this.m_model.getItemsOnCurrentPage(), null);
		this.m_program.onViewCreated(this.m_view.getInitialFocusControl());
	}
};
oFF.FdController.prototype.openValueHelp = function(defaultSelection, useCurrentHierarchy, listener, customIdentifier)
{
	this.m_model.openValueHelp(defaultSelection, useCurrentHierarchy, listener, customIdentifier);
};
oFF.FdController.prototype.postMessage = function(messageType, text)
{
	this.getMessagePoster().postMessage(messageType, text, this.m_program.getName());
};
oFF.FdController.prototype.postMessages = function(messages)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	if (this.m_model.isSystemTypeHana() && oFF.OlapUiMessageCenter.getInaErrorCode(messages) === 42522)
	{
		let noValuesMsg = localization.getText(oFF.FilterDialogI18n.I18N_FD_ERR_NO_VALUES_FOR_MANDATORY_VARIABLES);
		this.postMessage(oFF.UiMessageType.WARNING, noValuesMsg);
	}
	else
	{
		let msg = oFF.OlapUiMessageCenter.getInaErrorMessage(messages, localization.getText(oFF.FilterDialogI18n.I18N_FD_ERR_VH_SERVER_ERROR));
		this.postMessage(oFF.UiMessageType.ERROR, msg);
	}
};
oFF.FdController.prototype.refreshList = function(presentations, refreshAttributesOnly, currentPageOnly)
{
	if (this.reloadDataRequired(presentations))
	{
		return;
	}
	let items = currentPageOnly ? this.m_model.getItemsOnCurrentPage() : this.m_model.getItems(0, this.m_model.getPage());
	if (oFF.XCollectionUtils.hasElements(items))
	{
		let missingPresentations = this.m_model.getMissingPresentations(items, presentations);
		if (oFF.XCollectionUtils.hasElements(missingPresentations))
		{
			let identifier = oFF.XStringValue.create(refreshAttributesOnly ? oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES : oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES_AND_REFRESH);
			this.m_model.loadMissingPresentations(this.m_model.getItems(0, -1), missingPresentations, this, identifier);
		}
		else
		{
			this.onProcessFinished(items, null, oFF.XStringValue.create(refreshAttributesOnly ? oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES : oFF.FdController.IDENTIFIER_REFRESH));
		}
		if (this.m_model.supportsPreloading() && this.m_preloadStartPage === -1)
		{
			this.m_preloadStartPage = this.getNextPageWithoutItemsLoaded(this.m_model.getPage());
			if (this.m_preloadStartPage > 1)
			{
				this.m_model.preloadNextPages(this.m_preloadStartPage, presentations, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_PRELOAD));
			}
		}
	}
	else
	{
		this.onProcessFinished(oFF.XList.create(), null, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_REFRESH));
	}
};
oFF.FdController.prototype.refreshTree = function(presentations, refreshAttributesOnly, parentNode)
{
	if (this.reloadDataRequired(presentations))
	{
		return;
	}
	let identifier = oFF.XStringValue.create(refreshAttributesOnly ? oFF.FdController.IDENTIFIER_LOAD_ATTRIBUTES : oFF.FdController.IDENTIFIER_REFRESH);
	let items = oFF.notNull(parentNode) ? parentNode.getChildren() : this.m_model.getItemsOnCurrentPage();
	let missingPresentations = this.m_model.getMissingPresentations(items, presentations);
	if (oFF.XCollectionUtils.hasElements(missingPresentations))
	{
		this.m_model.loadMissingPresentations(items, missingPresentations, this, identifier);
		return;
	}
	this.onProcessFinished(oFF.notNull(items) ? items : oFF.XList.create(), null, identifier);
};
oFF.FdController.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_program = null;
	this.m_view = oFF.XObjectExt.release(this.m_view);
	this.m_model = oFF.XObjectExt.release(this.m_model);
	this.m_initialSetupRequirements = oFF.XObjectExt.release(this.m_initialSetupRequirements);
	this.m_initialMessages = oFF.XObjectExt.release(this.m_initialMessages);
	this.m_messagePoster = oFF.XObjectExt.release(this.m_messagePoster);
	this.m_initialData = oFF.XObjectExt.release(this.m_initialData);
};
oFF.FdController.prototype.reloadDataRequired = function(presentations)
{
	let reloadRequired = false;
	if (this.m_model.isInitial() && this.m_model.supportsValueHelp())
	{
		if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.LIST) && this.m_view.getCurrentViewType() === oFF.FilterDialogViewType.LIST)
		{
			let isHierarchical = this.m_model.getHierarchyModel().isHierarchical();
			let pageCount = isHierarchical ? -1 : this.m_model.getConfig().getListPreloadPageCount();
			let isTreeViewDesktop = isHierarchical && !this.m_program.getUiManager().getDeviceInfo().isMobile();
			this.m_model.processData(0, pageCount, isTreeViewDesktop ? this.m_model.getPresentationsModel().getAdditionalPresentationValues(false) : presentations, this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_RELOAD));
			reloadRequired = true;
		}
		this.m_preloadStartPage = -1;
	}
	return reloadRequired;
};
oFF.FdController.prototype.requestData = function()
{
	let isHierarchicalValueHelp = this.m_model.getHierarchyModel().isHierarchical();
	let preloadPages = isHierarchicalValueHelp ? -1 : this.m_model.getConfig().getListPreloadPageCount();
	this.m_model.processData(0, preloadPages, this.getAdditionalPresentations(), this, oFF.XStringValue.create(oFF.FdController.IDENTIFIER_INITIAL_LOAD));
};
oFF.FdController.prototype.search = function(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier)
{
	this.m_model.search(searchPattern, searchPresentations, presentations, loadParentNodes, listener, customIdentifier);
};
oFF.FdController.prototype.setupController = function(program)
{
	this.m_program = program;
	this.m_preloadStartPage = -1;
	this.m_loadAllStartPage = -1;
	this.m_model = oFF.FdModel.createExt(program.getFdConfig(), program.getUiManager().getDeviceInfo().isMobile(), program.getProcess(), this);
	this.m_model.getPresentationsModel().registerOnPresentationsChange(() => {
		this.m_view.publishAvailablePresentations();
	});
};
oFF.FdController.prototype.setupInitialRequirements = function()
{
	this.m_initialSetupRequirements = oFF.XList.create();
	let viewTypes = this.m_model.getViewTypes();
	if (viewTypes.contains(oFF.FilterDialogViewType.LIST))
	{
		this.m_initialSetupRequirements.add(oFF.XStringUtils.isNullOrEmpty(this.m_model.getInitialSearchValue()) ? oFF.FdController.IDENTIFIER_INITIAL_LOAD : oFF.FdController.IDENTIFIER_INITIAL_SEARCH);
	}
	if (viewTypes.contains(oFF.FilterDialogViewType.RANGE))
	{
		this.m_initialSetupRequirements.add(oFF.FdController.IDENTIFIER_INITIAL_LOAD_RANGE);
	}
};

oFF.FdComparisonOperator = function() {};
oFF.FdComparisonOperator.prototype = new oFF.XConstant();
oFF.FdComparisonOperator.prototype._ff_c = "FdComparisonOperator";

oFF.FdComparisonOperator.BETWEEN = null;
oFF.FdComparisonOperator.EQUAL = null;
oFF.FdComparisonOperator.EXCLUDING_GREATER_EQUAL = null;
oFF.FdComparisonOperator.EXCLUDING_GREATER_THAN = null;
oFF.FdComparisonOperator.EXCLUDING_LESS_EQUAL = null;
oFF.FdComparisonOperator.EXCLUDING_LESS_THAN = null;
oFF.FdComparisonOperator.GREATER_EQUAL = null;
oFF.FdComparisonOperator.GREATER_THAN = null;
oFF.FdComparisonOperator.IS_NOT_NULL = null;
oFF.FdComparisonOperator.IS_NULL = null;
oFF.FdComparisonOperator.LESS_EQUAL = null;
oFF.FdComparisonOperator.LESS_THAN = null;
oFF.FdComparisonOperator.NOT_BETWEEN = null;
oFF.FdComparisonOperator.NOT_EQUAL = null;
oFF.FdComparisonOperator.s_allOperators = null;
oFF.FdComparisonOperator.s_lookup = null;
oFF.FdComparisonOperator.createComparisonOperator = function(originComparisonOperator, name, isIncluding, i18nKeyDescription, i18nKeyRangeDescription, sign)
{
	let newConstant = new oFF.FdComparisonOperator();
	newConstant._setupInternal(name);
	newConstant.m_originComparisonOperator = originComparisonOperator;
	newConstant.m_including = isIncluding;
	newConstant.m_i18nKeyDescription = i18nKeyDescription;
	newConstant.m_i18nKeyRangeDescription = i18nKeyRangeDescription;
	newConstant.m_sign = sign;
	oFF.FdComparisonOperator.s_allOperators.add(newConstant);
	oFF.FdComparisonOperator.s_lookup.put(name, newConstant);
	return newConstant;
};
oFF.FdComparisonOperator.createUnsupportedExcludeComparisonOperator = function(originComparisonOperator, i18nKeyDescription, i18nKeyRangeDescription, sign)
{
	let newConstant = new oFF.FdComparisonOperator();
	newConstant._setupInternal(oFF.XStringUtils.concatenate2("NOT_", originComparisonOperator.getName()));
	newConstant.m_originComparisonOperator = originComparisonOperator;
	newConstant.m_including = false;
	newConstant.m_i18nKeyDescription = i18nKeyDescription;
	newConstant.m_i18nKeyRangeDescription = i18nKeyRangeDescription;
	newConstant.m_sign = sign;
	return newConstant;
};
oFF.FdComparisonOperator.getAllOperators = function(withExcludingOperators, withEqualOperator, withNotEqualOperator, withNullOperators)
{
	if (withExcludingOperators && withEqualOperator && withNotEqualOperator && withNullOperators)
	{
		return oFF.FdComparisonOperator.s_allOperators.createListCopy();
	}
	return oFF.XCollectionUtils.filter(oFF.FdComparisonOperator.s_allOperators, (operator) => {
		return (withExcludingOperators || operator.isIncluding()) && (!operator.isEqualOperator() || withEqualOperator && operator === oFF.FdComparisonOperator.EQUAL || withNotEqualOperator && operator === oFF.FdComparisonOperator.NOT_EQUAL) && (withNullOperators || !operator.isNullOperator());
	});
};
oFF.FdComparisonOperator.getByOriginalOperator = function(originalOperator)
{
	return oFF.XCollectionUtils.findFirst(oFF.FdComparisonOperator.s_allOperators, (operator) => {
		return operator.getOriginOperator() === originalOperator;
	});
};
oFF.FdComparisonOperator.lookup = function(name)
{
	return oFF.FdComparisonOperator.s_lookup.getByKey(name);
};
oFF.FdComparisonOperator.staticSetup = function()
{
	oFF.FdComparisonOperator.s_allOperators = oFF.XList.create();
	oFF.FdComparisonOperator.s_lookup = oFF.XHashMapByString.create();
	oFF.FdComparisonOperator.EQUAL = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.EQUAL, oFF.ComparisonOperator.EQUAL.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_EQUAL, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_EQUAL, "=");
	oFF.FdComparisonOperator.NOT_EQUAL = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.NOT_EQUAL, oFF.ComparisonOperator.NOT_EQUAL.getName(), false, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_EQUAL, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_EQUAL, "\u2260");
	oFF.FdComparisonOperator.GREATER_THAN = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.GREATER_THAN, oFF.ComparisonOperator.GREATER_THAN.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_GREATER, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_GREATER, ">");
	oFF.FdComparisonOperator.GREATER_EQUAL = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.GREATER_EQUAL, oFF.ComparisonOperator.GREATER_EQUAL.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_GREATER_EQUAL, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_GREATER_EQUAL, ">=");
	oFF.FdComparisonOperator.LESS_THAN = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.LESS_THAN, oFF.ComparisonOperator.LESS_THAN.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_LESS, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_LESS, "<");
	oFF.FdComparisonOperator.LESS_EQUAL = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.LESS_EQUAL, oFF.ComparisonOperator.LESS_EQUAL.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_LESS_EQUAL, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_LESS_EQUAL, "<=");
	oFF.FdComparisonOperator.BETWEEN = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.BETWEEN, oFF.ComparisonOperator.BETWEEN.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_BETWEEN, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_BETWEEN, "[ ]");
	oFF.FdComparisonOperator.NOT_BETWEEN = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.NOT_BETWEEN, oFF.ComparisonOperator.NOT_BETWEEN.getName(), false, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_BETWEEN, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_BETWEEN, "![ ]");
	oFF.FdComparisonOperator.IS_NULL = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.IS_NULL, oFF.ComparisonOperator.IS_NULL.getName(), true, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NULL, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NULL, "");
	oFF.FdComparisonOperator.IS_NOT_NULL = oFF.FdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.IS_NULL, "IS_NOT_NULL", false, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NOT_NULL, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_IS_NOT_NULL, "");
	oFF.FdComparisonOperator.EXCLUDING_GREATER_THAN = oFF.FdComparisonOperator.createUnsupportedExcludeComparisonOperator(oFF.ComparisonOperator.GREATER_THAN, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_GREATER, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER, ">");
	oFF.FdComparisonOperator.EXCLUDING_GREATER_EQUAL = oFF.FdComparisonOperator.createUnsupportedExcludeComparisonOperator(oFF.ComparisonOperator.GREATER_EQUAL, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_GREATER_EQUAL, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_GREATER_EQUAL, ">=");
	oFF.FdComparisonOperator.EXCLUDING_LESS_THAN = oFF.FdComparisonOperator.createUnsupportedExcludeComparisonOperator(oFF.ComparisonOperator.LESS_THAN, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_LESS, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS, "<");
	oFF.FdComparisonOperator.EXCLUDING_LESS_EQUAL = oFF.FdComparisonOperator.createUnsupportedExcludeComparisonOperator(oFF.ComparisonOperator.LESS_EQUAL, oFF.FilterDialogI18n.I18N_FD_COMPARISON_OPERATOR_NOT_LESS_EQUAL, oFF.FilterDialogI18n.I18N_FD_RANGES_HEADER_OPERATOR_NOT_LESS_EQUAL, "<=");
};
oFF.FdComparisonOperator.prototype.m_i18nKeyDescription = null;
oFF.FdComparisonOperator.prototype.m_i18nKeyRangeDescription = null;
oFF.FdComparisonOperator.prototype.m_including = false;
oFF.FdComparisonOperator.prototype.m_originComparisonOperator = null;
oFF.FdComparisonOperator.prototype.m_sign = null;
oFF.FdComparisonOperator.prototype.getLongText = function()
{
	return oFF.XLocalizationCenter.getCenter().getText(this.m_i18nKeyDescription);
};
oFF.FdComparisonOperator.prototype.getOriginOperator = function()
{
	return this.m_originComparisonOperator;
};
oFF.FdComparisonOperator.prototype.getRangeText = function(low, high)
{
	if (this.getOriginOperator().getNumberOfParameters() < 2)
	{
		return oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(this.m_i18nKeyRangeDescription, oFF.notNull(low) ? low : "");
	}
	return oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder2(this.m_i18nKeyRangeDescription, oFF.notNull(low) ? low : "", oFF.notNull(high) ? high : "");
};
oFF.FdComparisonOperator.prototype.getSign = function()
{
	return this.m_sign;
};
oFF.FdComparisonOperator.prototype.getWithExcludedState = function(excluded)
{
	if (this.isEqualOperator())
	{
		return excluded ? oFF.FdComparisonOperator.NOT_EQUAL : oFF.FdComparisonOperator.EQUAL;
	}
	if (this === oFF.FdComparisonOperator.BETWEEN || this === oFF.FdComparisonOperator.NOT_BETWEEN)
	{
		return excluded ? oFF.FdComparisonOperator.NOT_BETWEEN : oFF.FdComparisonOperator.BETWEEN;
	}
	if (this === oFF.FdComparisonOperator.LESS_THAN || this === oFF.FdComparisonOperator.EXCLUDING_LESS_THAN)
	{
		return excluded ? oFF.FdComparisonOperator.EXCLUDING_LESS_THAN : oFF.FdComparisonOperator.LESS_THAN;
	}
	if (this === oFF.FdComparisonOperator.LESS_EQUAL || this === oFF.FdComparisonOperator.EXCLUDING_LESS_EQUAL)
	{
		return excluded ? oFF.FdComparisonOperator.EXCLUDING_LESS_EQUAL : oFF.FdComparisonOperator.LESS_EQUAL;
	}
	if (this === oFF.FdComparisonOperator.GREATER_THAN || this === oFF.FdComparisonOperator.EXCLUDING_GREATER_THAN)
	{
		return excluded ? oFF.FdComparisonOperator.EXCLUDING_GREATER_THAN : oFF.FdComparisonOperator.GREATER_THAN;
	}
	if (this === oFF.FdComparisonOperator.GREATER_EQUAL || this === oFF.FdComparisonOperator.EXCLUDING_GREATER_EQUAL)
	{
		return excluded ? oFF.FdComparisonOperator.EXCLUDING_GREATER_EQUAL : oFF.FdComparisonOperator.GREATER_EQUAL;
	}
	if (this.isNullOperator())
	{
		return excluded ? oFF.FdComparisonOperator.IS_NOT_NULL : oFF.FdComparisonOperator.IS_NULL;
	}
	return this;
};
oFF.FdComparisonOperator.prototype.isBetweenOperator = function()
{
	return this === oFF.FdComparisonOperator.BETWEEN || this === oFF.FdComparisonOperator.NOT_BETWEEN;
};
oFF.FdComparisonOperator.prototype.isEqualOperator = function()
{
	return this === oFF.FdComparisonOperator.EQUAL || this === oFF.FdComparisonOperator.NOT_EQUAL;
};
oFF.FdComparisonOperator.prototype.isIncluding = function()
{
	return this.m_including;
};
oFF.FdComparisonOperator.prototype.isNullOperator = function()
{
	return this === oFF.FdComparisonOperator.IS_NULL || this === oFF.FdComparisonOperator.IS_NOT_NULL;
};

oFF.FdDynamicDateRangeItem = function() {};
oFF.FdDynamicDateRangeItem.prototype = new oFF.FdAbstractDateRangeItem();
oFF.FdDynamicDateRangeItem.prototype._ff_c = "FdDynamicDateRangeItem";

oFF.FdDynamicDateRangeItem.create = function(dateRange)
{
	let item = new oFF.FdDynamicDateRangeItem();
	item.setupDynamicDateRange(dateRange);
	return item;
};
oFF.FdDynamicDateRangeItem.prototype.m_lookAhead = 0;
oFF.FdDynamicDateRangeItem.prototype.m_lookBack = 0;
oFF.FdDynamicDateRangeItem.prototype.m_offset = 0;
oFF.FdDynamicDateRangeItem.prototype.m_offsetGranularity = null;
oFF.FdDynamicDateRangeItem.prototype.m_upToCurrentPeriod = false;
oFF.FdDynamicDateRangeItem.prototype.getDateRange = function()
{
	if (oFF.isNull(this.m_granularity))
	{
		return null;
	}
	return oFF.XDateRange.create(this.m_dateTimeProvider).withOffset(this.getOffsetGranularity(), this.getOffset()).withLookBack(this.m_granularity, this.getLookBack()).withLookAhead(this.m_granularity, this.getLookAhead()).withGranularity(this.m_granularity, this.isUpToCurrentPeriod());
};
oFF.FdDynamicDateRangeItem.prototype.getLookAhead = function()
{
	return this.m_lookAhead;
};
oFF.FdDynamicDateRangeItem.prototype.getLookBack = function()
{
	return this.m_lookBack;
};
oFF.FdDynamicDateRangeItem.prototype.getOffset = function()
{
	return this.m_offset;
};
oFF.FdDynamicDateRangeItem.prototype.getOffsetGranularity = function()
{
	return this.m_offsetGranularity;
};
oFF.FdDynamicDateRangeItem.prototype.getText = function()
{
	return oFF.FilterDialogI18nUtils.getDateRangeText(this.getDateRange(), null);
};
oFF.FdDynamicDateRangeItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC;
};
oFF.FdDynamicDateRangeItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdAbstractDateRangeItem.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	return this.m_lookBack === otherItem.getLookBack() && this.m_lookAhead === otherItem.getLookAhead() && this.m_upToCurrentPeriod === otherItem.isUpToCurrentPeriod() && this.m_offsetGranularity === otherItem.getOffsetGranularity() && (oFF.isNull(this.m_offsetGranularity) || this.m_offset === otherItem.getOffset());
};
oFF.FdDynamicDateRangeItem.prototype.isUpToCurrentPeriod = function()
{
	return this.m_upToCurrentPeriod;
};
oFF.FdDynamicDateRangeItem.prototype.releaseObject = function()
{
	oFF.FdAbstractDateRangeItem.prototype.releaseObject.call( this );
	this.m_offsetGranularity = null;
};
oFF.FdDynamicDateRangeItem.prototype.setLookAhead = function(lookAhead)
{
	if (!this.m_upToCurrentPeriod && lookAhead >= 0)
	{
		this.m_lookAhead = lookAhead;
	}
};
oFF.FdDynamicDateRangeItem.prototype.setLookBack = function(lookBack)
{
	if (lookBack >= 0)
	{
		this.m_lookBack = lookBack;
	}
};
oFF.FdDynamicDateRangeItem.prototype.setOffset = function(offset)
{
	this.m_offset = offset;
};
oFF.FdDynamicDateRangeItem.prototype.setOffsetGranularity = function(offsetGranularity)
{
	this.m_offsetGranularity = offsetGranularity;
};
oFF.FdDynamicDateRangeItem.prototype.setUpToCurrentPeriod = function(upToCurrentPeriod)
{
	this.m_upToCurrentPeriod = upToCurrentPeriod;
	if (this.m_upToCurrentPeriod)
	{
		this.m_lookAhead = 0;
	}
};
oFF.FdDynamicDateRangeItem.prototype.setupDynamicDateRange = function(dateRange)
{
	if (oFF.notNull(dateRange))
	{
		this.m_dateTimeProvider = dateRange.getDateTimeProvider();
		this.setGranularity(dateRange.getGranularity() !== null ? dateRange.getGranularity() : oFF.DateRangeGranularity.YEAR);
		this.m_upToCurrentPeriod = dateRange.isUpToCurrentPeriod();
		let offset = dateRange.getOffset();
		if (oFF.notNull(offset))
		{
			this.m_offsetGranularity = offset.getFirstObject();
			this.m_offset = offset.getSecondObject().getInteger();
		}
		let lookBack = dateRange.getLookBack();
		if (oFF.notNull(lookBack) && lookBack.getFirstObject() === this.getGranularity())
		{
			this.m_lookBack = lookBack.getSecondObject().getInteger();
		}
		let lookAhead = dateRange.getLookAhead();
		if (oFF.notNull(lookAhead) && lookAhead.getFirstObject() === this.getGranularity())
		{
			this.m_lookAhead = lookAhead.getSecondObject().getInteger();
		}
	}
};
oFF.FdDynamicDateRangeItem.prototype.toString = function()
{
	if (oFF.isNull(this.m_granularity))
	{
		return "";
	}
	let buffer = oFF.XStringBuffer.create();
	buffer.appendObject(this.m_granularity);
	if (!this.m_granularity.isCurrentDateUnit())
	{
		buffer.append(" [").appendInt(this.m_lookBack).append("/").appendInt(this.m_lookAhead).append("]");
	}
	if (oFF.notNull(this.m_offsetGranularity))
	{
		buffer.append(" [Offset: ").appendObject(this.m_offsetGranularity).append("/").appendInt(this.m_offset).append("]");
	}
	if (this.m_upToCurrentPeriod)
	{
		buffer.append(" [UpToCurrentPeriod]");
	}
	return buffer.toString();
};

oFF.FdFixedDateRangeItem = function() {};
oFF.FdFixedDateRangeItem.prototype = new oFF.FdAbstractDateRangeItem();
oFF.FdFixedDateRangeItem.prototype._ff_c = "FdFixedDateRangeItem";

oFF.FdFixedDateRangeItem.create = function(min, max, granularity, dateTimeProvider)
{
	let item = new oFF.FdFixedDateRangeItem();
	item.setupFixedDateRangeItem(min, max, granularity, dateTimeProvider);
	return item;
};
oFF.FdFixedDateRangeItem.prototype.m_dateFrom = null;
oFF.FdFixedDateRangeItem.prototype.m_dateTo = null;
oFF.FdFixedDateRangeItem.prototype.m_halfYearFrom = 0;
oFF.FdFixedDateRangeItem.prototype.m_halfYearTo = 0;
oFF.FdFixedDateRangeItem.prototype.m_monthFrom = 0;
oFF.FdFixedDateRangeItem.prototype.m_monthTo = 0;
oFF.FdFixedDateRangeItem.prototype.m_quarterFrom = 0;
oFF.FdFixedDateRangeItem.prototype.m_quarterTo = 0;
oFF.FdFixedDateRangeItem.prototype.m_yearFrom = 0;
oFF.FdFixedDateRangeItem.prototype.m_yearTo = 0;
oFF.FdFixedDateRangeItem.prototype.getDateFrom = function()
{
	return this.m_dateFrom;
};
oFF.FdFixedDateRangeItem.prototype.getDateRange = function()
{
	if (oFF.isNull(this.m_granularity))
	{
		return null;
	}
	let dateFrom = null;
	let dateTo = null;
	if (this.m_granularity.isYear() || this.m_granularity.isHalfYear() || this.m_granularity.isQuarter() || this.m_granularity.isMonth())
	{
		if (this.getYearFrom() !== -1)
		{
			let monthFrom = 1;
			if (this.m_granularity.isMonth())
			{
				monthFrom = this.getMonthFrom();
			}
			else if (this.m_granularity.isQuarter())
			{
				monthFrom = oFF.DateRangeGranularityMapper.convertQuarterToMonthLowerBound(this.getQuarterFrom());
			}
			else if (this.m_granularity.isHalfYear())
			{
				monthFrom = oFF.DateRangeGranularityMapper.convertHalfYearToMonthLowerBound(this.getHalfYearFrom());
			}
			dateFrom = oFF.XDate.createDateWithValues(this.getYearFrom(), monthFrom, 1);
		}
		if (this.getYearTo() !== -1)
		{
			let monthTo = 12;
			if (this.m_granularity.isMonth())
			{
				monthTo = this.getMonthTo();
			}
			else if (this.m_granularity.isQuarter())
			{
				monthTo = oFF.DateRangeGranularityMapper.convertQuarterToMonthUpperBound(this.getQuarterTo());
			}
			else if (this.m_granularity.isHalfYear())
			{
				monthTo = oFF.DateRangeGranularityMapper.convertHalfYearToMonthUpperBound(this.getHalfYearTo());
			}
			dateTo = oFF.XDate.createDateWithValues(this.m_yearTo, monthTo, oFF.XGregorianCalendar.create().getDaysInMonth(this.m_yearTo, monthTo));
		}
	}
	else if (this.m_granularity.isDay())
	{
		dateFrom = oFF.notNull(this.m_dateFrom) ? oFF.XDate.createDateSafe(this.m_dateFrom) : null;
		dateTo = oFF.notNull(this.m_dateTo) ? oFF.XDate.createDateSafe(this.m_dateTo) : null;
	}
	return oFF.XDateRange.create(this.m_dateTimeProvider).withFixDates(dateFrom, dateTo).withGranularity(this.m_granularity, false);
};
oFF.FdFixedDateRangeItem.prototype.getDateTo = function()
{
	return this.m_dateTo;
};
oFF.FdFixedDateRangeItem.prototype.getHalfYearFrom = function()
{
	return this.m_halfYearFrom;
};
oFF.FdFixedDateRangeItem.prototype.getHalfYearTo = function()
{
	return this.m_halfYearTo;
};
oFF.FdFixedDateRangeItem.prototype.getMonthFrom = function()
{
	return this.m_monthFrom;
};
oFF.FdFixedDateRangeItem.prototype.getMonthTo = function()
{
	return this.m_monthTo;
};
oFF.FdFixedDateRangeItem.prototype.getQuarterFrom = function()
{
	return this.m_quarterFrom;
};
oFF.FdFixedDateRangeItem.prototype.getQuarterTo = function()
{
	return this.m_quarterTo;
};
oFF.FdFixedDateRangeItem.prototype.getText = function()
{
	return oFF.FilterDialogI18nUtils.getDateRangeText(this.getDateRange(), null);
};
oFF.FdFixedDateRangeItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.DATE_RANGE_FIXED;
};
oFF.FdFixedDateRangeItem.prototype.getYearFrom = function()
{
	return this.m_yearFrom;
};
oFF.FdFixedDateRangeItem.prototype.getYearTo = function()
{
	return this.m_yearTo;
};
oFF.FdFixedDateRangeItem.prototype.isEqualTo = function(other)
{
	if (!oFF.FdAbstractDateRangeItem.prototype.isEqualTo.call( this , other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let otherItem = other;
	if (this.m_granularity === oFF.DateRangeGranularity.YEAR)
	{
		return otherItem.getYearFrom() === this.getYearFrom() && otherItem.getYearTo() === this.getYearTo();
	}
	if (this.m_granularity === oFF.DateRangeGranularity.HALF_YEAR)
	{
		return otherItem.getHalfYearFrom() === this.getHalfYearFrom() && otherItem.getHalfYearTo() === this.getHalfYearTo();
	}
	if (this.m_granularity === oFF.DateRangeGranularity.QUARTER)
	{
		return otherItem.getYearFrom() === this.getYearFrom() && otherItem.getYearTo() === this.getYearTo() && otherItem.getQuarterFrom() === this.getQuarterFrom() && otherItem.getQuarterTo() === this.getQuarterTo();
	}
	if (this.m_granularity === oFF.DateRangeGranularity.MONTH)
	{
		return otherItem.getYearFrom() === this.getYearFrom() && otherItem.getYearTo() === this.getYearTo() && otherItem.getMonthFrom() === this.getMonthFrom() && otherItem.getMonthTo() === this.getMonthTo();
	}
	if (this.m_granularity === oFF.DateRangeGranularity.DAY)
	{
		return oFF.XString.isEqual(otherItem.getDateFrom(), this.getDateFrom()) && oFF.XString.isEqual(otherItem.getDateTo(), this.getDateTo());
	}
	return false;
};
oFF.FdFixedDateRangeItem.prototype.releaseObject = function()
{
	oFF.FdAbstractDateRangeItem.prototype.releaseObject.call( this );
	this.m_dateFrom = null;
	this.m_dateTo = null;
};
oFF.FdFixedDateRangeItem.prototype.setDateFrom = function(dateFrom)
{
	this.m_dateFrom = dateFrom;
};
oFF.FdFixedDateRangeItem.prototype.setDateTo = function(dateTo)
{
	this.m_dateTo = dateTo;
};
oFF.FdFixedDateRangeItem.prototype.setHalfYearFrom = function(halfYearFrom)
{
	this.m_halfYearFrom = halfYearFrom;
};
oFF.FdFixedDateRangeItem.prototype.setHalfYearTo = function(halfYearTo)
{
	this.m_halfYearTo = halfYearTo;
};
oFF.FdFixedDateRangeItem.prototype.setMonthFrom = function(monthFrom)
{
	this.m_monthFrom = monthFrom;
};
oFF.FdFixedDateRangeItem.prototype.setMonthTo = function(monthTo)
{
	this.m_monthTo = monthTo;
};
oFF.FdFixedDateRangeItem.prototype.setQuarterFrom = function(quarterFrom)
{
	this.m_quarterFrom = quarterFrom;
};
oFF.FdFixedDateRangeItem.prototype.setQuarterTo = function(quarterTo)
{
	this.m_quarterTo = quarterTo;
};
oFF.FdFixedDateRangeItem.prototype.setYearFrom = function(yearFrom)
{
	this.m_yearFrom = yearFrom;
};
oFF.FdFixedDateRangeItem.prototype.setYearTo = function(yearTo)
{
	this.m_yearTo = yearTo;
};
oFF.FdFixedDateRangeItem.prototype.setupFixedDateRangeItem = function(min, max, granularity, dateTimeProvider)
{
	this.m_dateTimeProvider = dateTimeProvider;
	this.m_granularity = oFF.notNull(granularity) ? granularity : oFF.DateRangeGranularity.YEAR;
	if (oFF.notNull(min))
	{
		this.m_yearFrom = min.getYear();
		this.m_halfYearFrom = oFF.DateRangeGranularityMapper.convertMonthToHalfYear(min.getMonthOfYear());
		this.m_quarterFrom = min.getQuarterOfYear();
		this.m_monthFrom = min.getMonthOfYear();
		this.m_dateFrom = min.toIsoFormat();
	}
	else
	{
		this.m_yearFrom = -1;
		this.m_halfYearFrom = 1;
		this.m_quarterFrom = 1;
		this.m_monthFrom = 1;
	}
	if (oFF.notNull(max))
	{
		this.m_yearTo = max.getYear();
		this.m_halfYearTo = oFF.DateRangeGranularityMapper.convertMonthToHalfYear(max.getMonthOfYear());
		this.m_quarterTo = max.getQuarterOfYear();
		this.m_monthTo = max.getMonthOfYear();
		this.m_dateTo = max.toIsoFormat();
	}
	else
	{
		this.m_yearTo = -1;
		this.m_halfYearTo = 2;
		this.m_quarterTo = 4;
		this.m_monthTo = 12;
	}
};
oFF.FdFixedDateRangeItem.prototype.toString = function()
{
	if (oFF.isNull(this.m_granularity))
	{
		return "";
	}
	let buffer = oFF.XStringBuffer.create();
	buffer.append("Granularity: ").appendObject(this.m_granularity);
	if (this.m_granularity.isYear())
	{
		buffer.append(" [").appendInt(this.m_yearFrom).append(" - ").appendInt(this.m_yearTo).append("]");
	}
	else if (this.m_granularity.isHalfYear())
	{
		buffer.append(" [").appendInt(this.m_halfYearFrom).append(" - ").appendInt(this.m_halfYearTo).append("]");
	}
	else if (this.m_granularity.isQuarter())
	{
		buffer.append(" [").appendInt(this.m_yearFrom).append("/").appendInt(this.m_quarterFrom).append(" - ").appendInt(this.m_yearTo).append("/").appendInt(this.m_quarterTo).append("]");
	}
	else if (this.m_granularity.isMonth())
	{
		buffer.append(" [").appendInt(this.m_yearFrom).append("/").appendInt(this.m_monthFrom).append(" - ").appendInt(this.m_yearTo).append("/").appendInt(this.m_monthTo).append("]");
	}
	else if (this.m_granularity.isDay())
	{
		buffer.append(" [").append(this.m_dateFrom).append(" - ").append(this.m_dateTo).append("]");
	}
	return buffer.toString();
};

oFF.FdTeamItem = function() {};
oFF.FdTeamItem.prototype = new oFF.FdAbstractUserTeamItem();
oFF.FdTeamItem.prototype._ff_c = "FdTeamItem";

oFF.FdTeamItem.create = function(name, text, icon)
{
	let item = new oFF.FdTeamItem();
	item.setupUserTeamItem(name, text, icon);
	return item;
};
oFF.FdTeamItem.createWithAttributes = function(attributes)
{
	return oFF.FdTeamItem.create(attributes.getStringByKey(oFF.XFileAttribute.NAME), attributes.getStringByKey(oFF.XFileAttribute.DISPLAY_NAME), attributes.getStringByKey(oFF.XFileAttribute.ICON));
};
oFF.FdTeamItem.prototype.m_usersInTeam = null;
oFF.FdTeamItem.prototype.getDisplayName = function(name)
{
	let split = oFF.XStringTokenizer.splitString(name, ":");
	if (oFF.XCollectionUtils.size(split) > 2)
	{
		split.removeAt(1);
		return oFF.XCollectionUtils.join(split, ": ");
	}
	return name;
};
oFF.FdTeamItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.TEAM;
};
oFF.FdTeamItem.prototype.getUsers = function(process)
{
	if (oFF.notNull(this.m_usersInTeam))
	{
		return oFF.XPromise.resolve(this.m_usersInTeam);
	}
	return oFF.XPromise.create((resolve, reject) => {
		let fetchUsersTeams = oFF.OuFetchUsersTeams.create(oFF.XLocalizationCenter.getCenter());
		fetchUsersTeams.getUsersInTeam(this.getKey(), process).onThen((result) => {
			this.m_usersInTeam = oFF.XCollectionUtils.map(result.getData().getCachedChildFiles(), (user) => {
				return oFF.FdUserItem.createWithAttributes(user.getAttributes());
			});
			resolve(this.m_usersInTeam);
			oFF.XObjectExt.release(fetchUsersTeams);
		});
	});
};
oFF.FdTeamItem.prototype.releaseObject = function()
{
	oFF.FdAbstractUserTeamItem.prototype.releaseObject.call( this );
	this.m_usersInTeam = oFF.XObjectExt.release(this.m_usersInTeam);
};

oFF.FdUserItem = function() {};
oFF.FdUserItem.prototype = new oFF.FdAbstractUserTeamItem();
oFF.FdUserItem.prototype._ff_c = "FdUserItem";

oFF.FdUserItem.create = function(name, text, icon)
{
	let item = new oFF.FdUserItem();
	item.setupUserTeamItem(name, text, icon);
	return item;
};
oFF.FdUserItem.createWithAttributes = function(attributes)
{
	return oFF.FdUserItem.create(attributes.getStringByKey(oFF.XFileAttribute.NAME), attributes.getStringByKey(oFF.XFileAttribute.DISPLAY_NAME), attributes.getStringByKey(oFF.XFileAttribute.ICON));
};
oFF.FdUserItem.prototype.getDisplayName = function(name)
{
	return name;
};
oFF.FdUserItem.prototype.getType = function()
{
	return oFF.FilterDialogValueType.USER;
};

oFF.FdFeature = function() {};
oFF.FdFeature.prototype = new oFF.XConstant();
oFF.FdFeature.prototype._ff_c = "FdFeature";

oFF.FdFeature.CLIPBOARD = null;
oFF.FdFeature.EQUAL_IN_RANGE_VIEW = null;
oFF.FdFeature.EXCLUDE = null;
oFF.FdFeature.EXCLUDE_ADVANCED = null;
oFF.FdFeature.EXCLUDE_IN_RANGE_VIEW = null;
oFF.FdFeature.EXTENDED_READMODE = null;
oFF.FdFeature.HIERARCHY_CHANGE = null;
oFF.FdFeature.NOT_EQUAL_IN_RANGE_VIEW = null;
oFF.FdFeature.NULL_IN_RANGE_VIEW = null;
oFF.FdFeature.RANGES_IN_HIERARCHY = null;
oFF.FdFeature.staticSetup = function()
{
	oFF.FdFeature.CLIPBOARD = oFF.XConstant.setupName(new oFF.FdFeature(), "Clipboard");
	oFF.FdFeature.EXCLUDE = oFF.XConstant.setupName(new oFF.FdFeature(), "Exclude");
	oFF.FdFeature.EXCLUDE_ADVANCED = oFF.XConstant.setupName(new oFF.FdFeature(), "ExcludeAdvanced");
	oFF.FdFeature.EXCLUDE_IN_RANGE_VIEW = oFF.XConstant.setupName(new oFF.FdFeature(), "ExcludeInRangeView");
	oFF.FdFeature.RANGES_IN_HIERARCHY = oFF.XConstant.setupName(new oFF.FdFeature(), "RangesInHierarchy");
	oFF.FdFeature.EQUAL_IN_RANGE_VIEW = oFF.XConstant.setupName(new oFF.FdFeature(), "EqualInRangeView");
	oFF.FdFeature.NOT_EQUAL_IN_RANGE_VIEW = oFF.XConstant.setupName(new oFF.FdFeature(), "NotEqualInRangeView");
	oFF.FdFeature.NULL_IN_RANGE_VIEW = oFF.XConstant.setupName(new oFF.FdFeature(), "NullInRangeView");
	oFF.FdFeature.HIERARCHY_CHANGE = oFF.XConstant.setupName(new oFF.FdFeature(), "HierarchyChange");
	oFF.FdFeature.EXTENDED_READMODE = oFF.XConstant.setupName(new oFF.FdFeature(), "ExtendedReadMode");
};

oFF.FdContentProviderValueHelpDimension = function() {};
oFF.FdContentProviderValueHelpDimension.prototype = new oFF.FdContentProviderValueHelp();
oFF.FdContentProviderValueHelpDimension.prototype._ff_c = "FdContentProviderValueHelpDimension";

oFF.FdContentProviderValueHelpDimension.create = function(model)
{
	let contentProvider = new oFF.FdContentProviderValueHelpDimension();
	contentProvider.setupContentProvider(model);
	return contentProvider;
};
oFF.FdContentProviderValueHelpDimension.prototype.applyCustomMembers = function(result, listenerProxy)
{
	let dimension = this.getDimension();
	if (dimension.getQueryModel() !== null && dimension === dimension.getQueryModel().getAccountDimension())
	{
		let customMembers = dimension.getCustomStructureMembers();
		let properties = listenerProxy.getProperties();
		let searchPattern = properties.getStringByKey(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_PATTERN);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(searchPattern))
		{
			let searchOnKey = properties.getBooleanByKey(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_KEY);
			let searchOnText = properties.getBooleanByKey(oFF.FdContentProviderValueHelp.PARAM_VALUE_HELP_SEARCH_ON_TEXT);
			customMembers = oFF.XStream.of(customMembers).filter((cm) => {
				return searchOnKey && oFF.XString.containsString(cm.getName(), searchPattern) || searchOnText && oFF.XString.containsString(cm.getText(), searchPattern);
			}).collect(oFF.XStreamCollector.toListOfNameObject());
		}
		let resultMemberNames = oFF.XCollectionUtils.map(result, (node) => {
			return node.getDimensionMember().getName();
		});
		oFF.XStream.of(customMembers).filter((customMember1) => {
			return !resultMemberNames.contains(customMember1.getName()) && customMember1.getResultVisibility() !== oFF.ResultVisibility.HIDDEN;
		}).forEach((customMember2) => {
			result.add(oFF.QFactory.createMeasureHelpNodeExt(customMember2.getName(), customMember2, oFF.DrillState.LEAF));
		});
	}
	return oFF.FdContentProviderValueHelp.prototype.applyCustomMembers.call( this , result, listenerProxy);
};
oFF.FdContentProviderValueHelpDimension.prototype.createProgramRunner = function()
{
	let dimension = this.getDimension();
	let queryManager = dimension.getQueryManager();
	return oFF.FilterDialogProgramRunnerFactory.createForDimension(queryManager.getProcess(), queryManager, dimension.getName(), this.m_configuration.getTitle());
};
oFF.FdContentProviderValueHelpDimension.prototype.getDimension = function()
{
	return this.m_configuration.getDimension();
};
oFF.FdContentProviderValueHelpDimension.prototype.getSupportedComparisonOperators = function(forceFlat)
{
	let dimension = this.getDimension();
	let field = forceFlat ? dimension.getFlatKeyField() : dimension.getSelectorKeyField();
	return this.getSupportedComparisonOperatorsByFilterCapability(dimension.getFilterCapabilities().getFilterCapabilitiesByField(field));
};
oFF.FdContentProviderValueHelpDimension.prototype.getSupportedViewTypes = function()
{
	let dimension = this.getDimension();
	let supportedTypes = oFF.XList.create();
	if (this.m_configuration.isOfferListView() && oFF.FilterDialogViewType.LIST.isSupportedByDim(dimension))
	{
		supportedTypes.add(oFF.FilterDialogViewType.LIST);
	}
	if (this.m_configuration.isOfferRangeView() && oFF.FilterDialogViewType.RANGE.isSupportedByDim(dimension))
	{
		supportedTypes.add(oFF.FilterDialogViewType.RANGE);
	}
	return oFF.XCollectionUtils.hasElements(supportedTypes) ? supportedTypes : oFF.XCollectionUtils.singletonList(oFF.FilterDialogViewType.LIST);
};
oFF.FdContentProviderValueHelpDimension.prototype.processData = function(startPage, endPage, presentations, listener, customIdentifier)
{
	let dimension = this.getDimension();
	if (dimension.getQueryModel() !== null && dimension === dimension.getQueryModel().getAccountDimension())
	{
		let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP);
		this.m_valueHelpProcessor.processValueHelp(0, -1, -1, this.getFieldsFromPresentationValues(presentations), this.m_readMode, this, listenerProxy);
		return;
	}
	oFF.FdContentProviderValueHelp.prototype.processData.call( this , startPage, endPage, presentations, listener, customIdentifier);
};
oFF.FdContentProviderValueHelpDimension.prototype.processDataRange = function(listener, customIdentifier)
{
	let dimension = this.getDimension();
	let valueType = this.m_model.getRangeModel().getInputValueType();
	if (oFF.FilterDialogViewType.RANGE.isSupportedByDim(dimension) && oFF.notNull(valueType) && (valueType.isDateTime() || valueType.isNumber() && dimension.getModelCapabilities().supportsResultSetInterval()))
	{
		let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP_RANGE);
		this.m_valueHelpProcessor.processDataRange(this, listenerProxy);
		return;
	}
	listener.onProcessFinished(oFF.XList.create(), null, customIdentifier);
};
oFF.FdContentProviderValueHelpDimension.prototype.processHierarchies = function()
{
	let dimension = this.getDimension();
	if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.LIST) && this.m_configuration.isOfferHierarchyChange() && dimension.supportsHierarchy() && !dimension.isDisplayHierarchyFixInFilter())
	{
		oFF.FdContentProviderHierarchyCatalog.createWithoutModelReference(dimension).processFetchHierarchyNames((fetchedHierarchies) => {
			if (!this.isReleased())
			{
				this.m_model.getHierarchyModel().setHierarchies(fetchedHierarchies);
			}
		}, this.m_model.getSessionData(), this.m_configuration.getContentType());
	}
};
oFF.FdContentProviderValueHelpDimension.prototype.setReadMode = function(readMode)
{
	if (this.m_readMode !== readMode && oFF.notNull(readMode))
	{
		oFF.FdContentProviderValueHelp.prototype.setReadMode.call( this , readMode);
		this.m_valueHelpProcessor.setIgnoreQueryDynamicFilter(this.m_readMode !== oFF.OlapUiReadMode.QUERY_DEFAULT && this.m_readMode !== oFF.OlapUiReadMode.BOOKED_CASCADING);
	}
};
oFF.FdContentProviderValueHelpDimension.prototype.setupModel = function()
{
	oFF.FdContentProviderValueHelp.prototype.setupModel.call( this );
	let dimension = this.getDimension();
	if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.RANGE))
	{
		let rangeModel = this.m_model.getRangeModel();
		let keyField = this.getDimension().getFlatKeyField();
		let valueType = oFF.QFilterUtil.supportsDateRangeFilter(keyField) ? oFF.XValueType.DATE : keyField.getValueType();
		if (valueType === oFF.XValueType.DATE)
		{
			let supportedDateGranularities;
			if (keyField.getValueType().isDateBased())
			{
				supportedDateGranularities = oFF.XList.create();
				supportedDateGranularities.add(oFF.DateRangeGranularity.YEAR);
				supportedDateGranularities.add(oFF.DateRangeGranularity.QUARTER);
				supportedDateGranularities.add(oFF.DateRangeGranularity.MONTH);
				supportedDateGranularities.add(oFF.DateRangeGranularity.DAY);
			}
			else
			{
				supportedDateGranularities = oFF.HierarchyLevelType.getAllDateRangeGranularities(dimension);
			}
			if (oFF.XCollectionUtils.hasElements(supportedDateGranularities))
			{
				rangeModel.setDateRangeGranularities(supportedDateGranularities);
				let dateTimeProvider = dimension.getProcess().getDateTimeProvider();
				let highestGranularity = supportedDateGranularities.get(supportedDateGranularities.size() - 1);
				let selectedItems = this.m_model.getSelectedItems();
				for (let i = 0; i < selectedItems.size(); i++)
				{
					this.m_model.setSelectedItemAt(i, oFF.FdItemFactory.convertRangeToDateRangeItem(selectedItems.get(i), highestGranularity, dateTimeProvider));
				}
			}
		}
		rangeModel.setDateTimeProvider(dimension.getQueryModel().getProcess().getDateTimeProvider());
		rangeModel.setInfoText(dimension.isCompound() ? oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_INFO_ON_COMPOUND_DIMENSION) : null);
		rangeModel.setInputValueType(valueType);
		rangeModel.setSupportsFixedAndDynamicDateRange(true);
		this.updateSupportedComparisonOperators();
	}
	if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.LIST))
	{
		if (this.m_configuration.isOfferHierarchyChange() && dimension.supportsHierarchy())
		{
			this.m_model.setFeatureEnabled(oFF.FdFeature.HIERARCHY_CHANGE, true);
			let hierarchyModel = this.m_model.getHierarchyModel();
			let activeHierarchy = this.getHierarchyName();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(activeHierarchy))
			{
				let hierarchies = dimension.getHierarchies();
				let existingHierarchyItem = oFF.notNull(hierarchies) ? oFF.XCollectionUtils.findFirst(hierarchies.getObjects(), (hierarchyItem) => {
					return oFF.XString.isEqual(hierarchyItem.getHierarchyName(), activeHierarchy);
				}) : null;
				let hierarchyText = oFF.notNull(existingHierarchyItem) ? oFF.FdContentProviderHierarchyCatalog.getHierarchyTextFromCatalogItem(existingHierarchyItem) : null;
				if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyText))
				{
					let hierarchyNames = oFF.XHashMapByString.create();
					hierarchyNames.put(activeHierarchy, hierarchyText);
					hierarchyModel.setHierarchies(hierarchyNames);
				}
			}
		}
	}
};
oFF.FdContentProviderValueHelpDimension.prototype.setupProcessor = function(externalProcessor)
{
	this.m_valueHelpProcessor = oFF.notNull(externalProcessor) ? externalProcessor : oFF.OlapUiValueHelpDimension.create(this.getDimension());
	if (!oFF.XString.isEqual(this.m_valueHelpProcessor.getHierarchyName(), this.m_configuration.getHierarchy()) || oFF.XStringUtils.isNotNullAndNotEmpty(this.m_configuration.getHierarchy()) && !this.m_valueHelpProcessor.isHierarchicalValueHelp())
	{
		this.m_valueHelpProcessor.setHierarchyName(this.m_configuration.getHierarchy());
	}
};
oFF.FdContentProviderValueHelpDimension.prototype.setupReadMode = function()
{
	oFF.FdContentProviderValueHelp.prototype.setupReadMode.call( this );
	this.m_valueHelpProcessor.setIgnoreQueryDynamicFilter(this.m_readMode !== oFF.OlapUiReadMode.QUERY_DEFAULT && this.m_readMode !== oFF.OlapUiReadMode.BOOKED_CASCADING);
};
oFF.FdContentProviderValueHelpDimension.prototype.setupSessionBasedSettings = function()
{
	let dimension = this.getDimension();
	this.m_model.setSessionData(oFF.FdSessionBasedSettings.createByQuery(dimension.getQueryManager(), this.m_configuration.getContentType(), dimension));
};
oFF.FdContentProviderValueHelpDimension.prototype.supportsQueryDefaultReadMode = function(contextType, systemType)
{
	return this.getDimension().getReadModeDefault(contextType) !== null && systemType.isTypeOf(oFF.SystemType.ABAP);
};
oFF.FdContentProviderValueHelpDimension.prototype.supportsReadModeBookedCascading = function(contextType)
{
	return this.supportsReadMode(contextType, oFF.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE) && this.m_configuration.isOfferReadModeExtendedSettings();
};

oFF.FdContentProviderValueHelpVariable = function() {};
oFF.FdContentProviderValueHelpVariable.prototype = new oFF.FdContentProviderValueHelp();
oFF.FdContentProviderValueHelpVariable.prototype._ff_c = "FdContentProviderValueHelpVariable";

oFF.FdContentProviderValueHelpVariable.create = function(model)
{
	let contentProvider = new oFF.FdContentProviderValueHelpVariable();
	contentProvider.setupContentProvider(model);
	return contentProvider;
};
oFF.FdContentProviderValueHelpVariable.prototype.createProgramRunner = function()
{
	let variable = this.getVariable();
	let queryManager = variable.getQueryManager();
	return oFF.FilterDialogProgramRunnerFactory.createForVariable(queryManager.getProcess(), queryManager, variable, this.m_configuration.getTitle());
};
oFF.FdContentProviderValueHelpVariable.prototype.getContextType = function(systemType)
{
	return oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.ABAP) ? oFF.QContextType.VARIABLE : oFF.FdContentProviderValueHelp.prototype.getContextType.call( this , systemType);
};
oFF.FdContentProviderValueHelpVariable.prototype.getDimension = function()
{
	return this.getVariable().getDimension();
};
oFF.FdContentProviderValueHelpVariable.prototype.getSupportedComparisonOperators = function(forceFlat)
{
	return this.getSupportedComparisonOperatorsByFilterCapability(this.getVariable().getFilterCapability());
};
oFF.FdContentProviderValueHelpVariable.prototype.getSupportedViewTypes = function()
{
	let variable = this.getVariable();
	let supportedTypes = oFF.XList.create();
	if (this.m_configuration.isOfferListView() && oFF.FilterDialogViewType.LIST.isSupportedByVar(variable))
	{
		supportedTypes.add(oFF.FilterDialogViewType.LIST);
	}
	if (this.m_configuration.isOfferRangeView() && oFF.FilterDialogViewType.RANGE.isSupportedByVar(variable))
	{
		supportedTypes.add(oFF.FilterDialogViewType.RANGE);
	}
	return oFF.XCollectionUtils.hasElements(supportedTypes) ? supportedTypes : oFF.XCollectionUtils.singletonList(oFF.FilterDialogViewType.LIST);
};
oFF.FdContentProviderValueHelpVariable.prototype.getVariable = function()
{
	return this.m_configuration.getVariable();
};
oFF.FdContentProviderValueHelpVariable.prototype.isUseResultSetTextField = function()
{
	return this.isSystemTypeBW() && this.m_configuration.getTextUsageType() === oFF.FilterDialogTextUsageType.RESULTSET_TEXT;
};
oFF.FdContentProviderValueHelpVariable.prototype.processDataRange = function(listener, customIdentifier)
{
	let variable = this.getVariable();
	if (oFF.FilterDialogViewType.RANGE.isSupportedByVar(variable) && this.m_model.getRangeModel().isInputValueTypeNumeric() && variable.getDimension().getModelCapabilities().supportsResultSetInterval())
	{
		let listenerProxy = oFF.FdValueHelpListenerProxy.create(listener, customIdentifier, oFF.FdContentProviderValueHelp.VALUE_HELP_RANGE);
		this.m_valueHelpProcessor.processDataRange(this, listenerProxy);
		return;
	}
	listener.onProcessFinished(oFF.XList.create(), null, customIdentifier);
};
oFF.FdContentProviderValueHelpVariable.prototype.processHierarchies = function() {};
oFF.FdContentProviderValueHelpVariable.prototype.setupModel = function()
{
	oFF.FdContentProviderValueHelp.prototype.setupModel.call( this );
	if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.LIST))
	{
		let systemType = this.getSystemType(this.getDimension());
		if (oFF.notNull(systemType) && systemType.isTypeOf(oFF.SystemType.ABAP) && !this.m_model.isMobile() && (oFF.UiConfigurationCenter.getCenter().isActive("SIMPLIFY_VARIABLE_CHANGE") || this.getDimension().getSession().hasFeatureByName(oFF.OlapUiFeatureToggle.MEMBERSELECTOR_STORY_FILTER_OPTIMIZATION_FOR_DESKTOP)))
		{
			this.m_valueHelpProcessor.setDefaultDrillLevelEnabled(true);
			this.m_model.setDefaultExpandLevel(this.getDimension().getDefaultInitialDrillLevel());
		}
	}
	if (this.m_model.getViewTypes().contains(oFF.FilterDialogViewType.RANGE))
	{
		let rangeModel = this.m_model.getRangeModel();
		rangeModel.setInputValueType(this.getVariable().getValueType());
		rangeModel.setSupportsFixedAndDynamicDateRange(false);
		this.updateSupportedComparisonOperators();
	}
};
oFF.FdContentProviderValueHelpVariable.prototype.setupProcessor = function(externalProcessor)
{
	this.m_valueHelpProcessor = oFF.notNull(externalProcessor) ? externalProcessor : oFF.OlapUiValueHelpVariable.create(this.getVariable());
};
oFF.FdContentProviderValueHelpVariable.prototype.setupSessionBasedSettings = function()
{
	this.m_model.setSessionData(oFF.FdSessionBasedSettings.createByQuery(this.getDimension().getQueryManager(), this.m_configuration.getContentType(), this.getVariable()));
};
oFF.FdContentProviderValueHelpVariable.prototype.supportsQueryDefaultReadMode = function(contextType, systemType)
{
	return false;
};
oFF.FdContentProviderValueHelpVariable.prototype.supportsReadModeBookedCascading = function(contextType)
{
	return false;
};
oFF.FdContentProviderValueHelpVariable.prototype.supportsReadModeSwitch = function(systemType)
{
	return oFF.FdContentProviderValueHelp.prototype.supportsReadModeSwitch.call( this , systemType) && !this.getVariable().getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NAME_VARIABLE);
};

oFF.FdComponentDateRange = function() {};
oFF.FdComponentDateRange.prototype = new oFF.FdComponentAbstractRange();
oFF.FdComponentDateRange.prototype._ff_c = "FdComponentDateRange";

oFF.FdComponentDateRange.create = function(model, item)
{
	let component = new oFF.FdComponentDateRange();
	component.setupDateRange(model, item, false);
	return component;
};
oFF.FdComponentDateRange.createEmpty = function(model)
{
	let component = new oFF.FdComponentDateRange();
	component.setupDateRange(model, null, true);
	return component;
};
oFF.FdComponentDateRange.prototype.m_currentRangeDataComponent = null;
oFF.FdComponentDateRange.prototype.m_dynamicRangeDataComponent = null;
oFF.FdComponentDateRange.prototype.m_fixedRangeDataComponent = null;
oFF.FdComponentDateRange.prototype.m_genesis = null;
oFF.FdComponentDateRange.prototype.m_startWithEmptyRange = false;
oFF.FdComponentDateRange.prototype.buildOlapDialogUi = function(genesis)
{
	oFF.FdComponentAbstractRange.prototype.buildOlapDialogUi.call( this , genesis);
	this.m_genesis = genesis;
	this.updateDataComponent();
};
oFF.FdComponentDateRange.prototype.createDateRangeItem = function(itemType)
{
	let rangeModel = this.m_model.getRangeModel();
	let dateTimeProvider = rangeModel.getDateTimeProvider();
	let rangeItem;
	if (itemType === oFF.FilterDialogValueType.DATE_RANGE_FIXED)
	{
		let min = this.m_model.getRangeModel().getMin();
		let max = this.m_model.getRangeModel().getMax();
		rangeItem = oFF.FdFixedDateRangeItem.create(min, max, null, rangeModel.getDateTimeProvider());
	}
	else
	{
		rangeItem = oFF.FdDynamicDateRangeItem.create(oFF.XDateRange.create(dateTimeProvider));
	}
	if (this.m_startWithEmptyRange)
	{
		rangeItem.setGranularity(null);
	}
	return rangeItem;
};
oFF.FdComponentDateRange.prototype.getDateRangeLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentDateRange.prototype.getFocusControl = function()
{
	return this.m_currentRangeDataComponent.getFocusControl();
};
oFF.FdComponentDateRange.prototype.getItem = function()
{
	return this.m_currentRangeDataComponent.getItem();
};
oFF.FdComponentDateRange.prototype.isEmpty = function()
{
	return this.m_currentRangeDataComponent.isEmpty();
};
oFF.FdComponentDateRange.prototype.onDataChanged = function(isLiveChange)
{
	oFF.FdComponentAbstractRange.prototype.onDataChanged.call( this , isLiveChange);
	this.updateRangeText();
};
oFF.FdComponentDateRange.prototype.onSelectionChange = function(event)
{
	let itemType = event.getSelectedItem().getCustomObject();
	let item = null;
	if (itemType === oFF.FilterDialogValueType.DATE_RANGE_FIXED)
	{
		item = oFF.notNull(this.m_fixedRangeDataComponent) ? this.m_fixedRangeDataComponent.getItem() : null;
	}
	else if (itemType === oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC)
	{
		item = oFF.notNull(this.m_dynamicRangeDataComponent) ? this.m_dynamicRangeDataComponent.getItem() : null;
	}
	this.replaceItem(oFF.notNull(item) ? item : this.createDateRangeItem(itemType));
	this.updateDataComponent();
	this.onDataChanged(false);
};
oFF.FdComponentDateRange.prototype.releaseObject = function()
{
	oFF.FdComponentAbstractRange.prototype.releaseObject.call( this );
	this.m_fixedRangeDataComponent = oFF.XObjectExt.release(this.m_fixedRangeDataComponent);
	this.m_dynamicRangeDataComponent = oFF.XObjectExt.release(this.m_dynamicRangeDataComponent);
	this.m_currentRangeDataComponent = null;
	this.m_genesis = null;
};
oFF.FdComponentDateRange.prototype.setupDateRange = function(model, item, startWithEmptyRange)
{
	this.setupComponent(model, oFF.FdComponentDateRangeLayout.create(this));
	this.m_startWithEmptyRange = startWithEmptyRange;
	this.m_item = item;
	if (oFF.isNull(this.m_item))
	{
		this.m_item = this.createDateRangeItem(this.m_model.getRangeModel().getMin() !== null ? oFF.FilterDialogValueType.DATE_RANGE_FIXED : oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC);
	}
};
oFF.FdComponentDateRange.prototype.updateDataComponent = function()
{
	if (this.m_item.getType() === oFF.FilterDialogValueType.DATE_RANGE_FIXED)
	{
		if (oFF.isNull(this.m_fixedRangeDataComponent))
		{
			this.m_fixedRangeDataComponent = oFF.FdComponentDateRangeFixed.create(this.m_model, this.m_item, () => {
				this.onDataChanged(false);
			});
			this.m_fixedRangeDataComponent.buildOlapDialogUi(this.m_genesis);
		}
		this.getDateRangeLayout().setTypeLayout(this.m_fixedRangeDataComponent.getLayout(), true);
		this.m_currentRangeDataComponent = this.m_fixedRangeDataComponent;
	}
	else if (this.m_item.getType() === oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC)
	{
		if (oFF.isNull(this.m_dynamicRangeDataComponent))
		{
			this.m_dynamicRangeDataComponent = oFF.FdComponentDateRangeDynamic.create(this.m_model, this.m_item, () => {
				this.onDataChanged(false);
			});
			this.m_dynamicRangeDataComponent.buildOlapDialogUi(this.m_genesis);
		}
		this.getDateRangeLayout().setTypeLayout(this.m_dynamicRangeDataComponent.getLayout(), false);
		this.m_currentRangeDataComponent = this.m_dynamicRangeDataComponent;
	}
};
oFF.FdComponentDateRange.prototype.validate = function(showValidationMessages)
{
	return this.m_currentRangeDataComponent.validate(showValidationMessages);
};

oFF.FdComponentDateRangeLayout = function() {};
oFF.FdComponentDateRangeLayout.prototype = new oFF.FdComponentAbstractRangeLayout();
oFF.FdComponentDateRangeLayout.prototype._ff_c = "FdComponentDateRangeLayout";

oFF.FdComponentDateRangeLayout.create = function(typeChangeListener)
{
	let layout = new oFF.FdComponentDateRangeLayout();
	layout.m_typeChangeListener = typeChangeListener;
	return layout;
};
oFF.FdComponentDateRangeLayout.prototype.m_size = null;
oFF.FdComponentDateRangeLayout.prototype.m_typeChangeListener = null;
oFF.FdComponentDateRangeLayout.prototype.m_typeLayout = null;
oFF.FdComponentDateRangeLayout.prototype.m_typeSB = null;
oFF.FdComponentDateRangeLayout.prototype.addContent = function(container)
{
	let localization = oFF.XLocalizationCenter.getCenter();
	container.setDirection(oFF.UiFlexDirection.COLUMN);
	container.setAlignItems(oFF.UiFlexAlignItems.START);
	this.m_typeSB = container.addNewItemOfType(oFF.UiType.SEGMENTED_BUTTON);
	this.m_typeSB.setName("FilterDialogDateRangeTypeButton");
	this.m_typeSB.setMargin(oFF.UiCssBoxEdges.create("0 0 1rem 0"));
	this.m_typeSB.registerOnSelectionChange(this.m_typeChangeListener);
	let typeFixedBtn = this.m_typeSB.addNewItem();
	typeFixedBtn.setName("FilterDialogDateRangeTypeButtonFixed");
	typeFixedBtn.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_FIXED));
	typeFixedBtn.setCustomObject(oFF.FilterDialogValueType.DATE_RANGE_FIXED);
	let typeDynamicBtn = this.m_typeSB.addNewItem();
	typeDynamicBtn.setName("FilterDialogDateRangeTypeButtonDynamic");
	typeDynamicBtn.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_DATE_RANGE_DYNAMIC));
	typeDynamicBtn.setCustomObject(oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC);
};
oFF.FdComponentDateRangeLayout.prototype.getDescriptionText = function()
{
	return oFF.notNull(this.m_typeLayout) ? this.m_typeLayout.getDescriptionText() : "";
};
oFF.FdComponentDateRangeLayout.prototype.hasUserInput = function()
{
	return oFF.notNull(this.m_typeLayout) && this.m_typeLayout.hasUserInput();
};
oFF.FdComponentDateRangeLayout.prototype.releaseObject = function()
{
	oFF.FdComponentAbstractRangeLayout.prototype.releaseObject.call( this );
	this.m_typeChangeListener = null;
	this.m_typeLayout = null;
	this.m_size = null;
	this.m_typeSB = oFF.XObjectExt.release(this.m_typeSB);
};
oFF.FdComponentDateRangeLayout.prototype.resizeComponent = function(size)
{
	this.m_size = size;
	if (oFF.notNull(this.m_typeLayout))
	{
		this.m_typeLayout.resizeComponent(size);
	}
};
oFF.FdComponentDateRangeLayout.prototype.setTypeLayout = function(typeLayout, isFixedRange)
{
	if (this.m_typeSB.getSelectedName() === null)
	{
		this.m_typeSB.setSelectedName(isFixedRange ? "FilterDialogDateRangeTypeButtonFixed" : "FilterDialogDateRangeTypeButtonDynamic");
	}
	if (oFF.notNull(this.m_typeLayout))
	{
		this.getContentContainer().removeItem(this.m_typeLayout.getRoot());
	}
	this.m_typeLayout = typeLayout;
	if (oFF.notNull(this.m_size))
	{
		this.m_typeLayout.resizeComponent(this.m_size);
	}
	this.getContentContainer().addItem(this.m_typeLayout.getRoot());
};

oFF.FdComponentRange = function() {};
oFF.FdComponentRange.prototype = new oFF.FdComponentAbstractRange();
oFF.FdComponentRange.prototype._ff_c = "FdComponentRange";

oFF.FdComponentRange.create = function(model, item)
{
	let component = new oFF.FdComponentRange();
	component.setupComponent(model, oFF.FdComponentRangeLayout.create());
	component.m_item = item;
	return component;
};
oFF.FdComponentRange.prototype.buildOlapDialogUi = function(genesis)
{
	oFF.FdComponentAbstractRange.prototype.buildOlapDialogUi.call( this , genesis);
	let rangeModel = this.m_model.getRangeModel();
	let supportedOperators = rangeModel.getSupportedComparisonOperators();
	let showExclude = this.m_model.isFeatureEnabled(oFF.FdFeature.EXCLUDE_IN_RANGE_VIEW);
	let showEqual = this.m_model.isFeatureEnabled(oFF.FdFeature.EQUAL_IN_RANGE_VIEW);
	let showNotEqual = this.m_model.isFeatureEnabled(oFF.FdFeature.NOT_EQUAL_IN_RANGE_VIEW);
	let showNull = this.m_model.isFeatureEnabled(oFF.FdFeature.NULL_IN_RANGE_VIEW);
	let availableOperators = oFF.FdComparisonOperator.getAllOperators(showExclude, showEqual, showNotEqual, showNull);
	let operators = oFF.XCollectionUtils.filter(availableOperators, (operator) => {
		return supportedOperators.contains(operator);
	});
	if (oFF.isNull(this.m_item))
	{
		if (operators.contains(oFF.FdComparisonOperator.BETWEEN) || operators.contains(oFF.FdComparisonOperator.NOT_BETWEEN))
		{
			this.m_item = oFF.FdRangeItem.create(oFF.FdSimpleItem.create(null, null, null), oFF.FdSimpleItem.create(null, null, null), !operators.contains(oFF.FdComparisonOperator.BETWEEN));
		}
		else
		{
			this.m_item = oFF.FdSimpleItem.create(null, null, null);
			this.m_item.setFdComparisonOperator(operators.hasElements() ? operators.get(0) : oFF.FdComparisonOperator.EQUAL);
		}
	}
	let operator = this.m_item.getFdComparisonOperator();
	if (this.m_item.isNull())
	{
		operator = this.m_item.isExcluded() ? oFF.FdComparisonOperator.IS_NOT_NULL : oFF.FdComparisonOperator.IS_NULL;
	}
	if (!operators.contains(operator))
	{
		operators.add(operator);
	}
	let layout = this.getRangeLayout();
	layout.addOperators(operators, operator);
	layout.getComparisonOperatorCombobox().registerOnSelectionChange(this);
	oFF.XObjectExt.release(operators);
	layout.getInput1().registerOnEditingEnd(this);
	layout.getInput1().registerOnLiveChange(this);
	layout.getInput2().registerOnEditingEnd(this);
	layout.getInput2().registerOnLiveChange(this);
	this.updateFields();
	this.validate(true);
	layout.setEnabled(operator.isIncluding() || operator === oFF.FdComparisonOperator.NOT_BETWEEN || operator === oFF.FdComparisonOperator.NOT_EQUAL || operator === oFF.FdComparisonOperator.IS_NOT_NULL);
};
oFF.FdComponentRange.prototype.formatValue = function(value)
{
	return this.isValueTypeNumeric() ? oFF.UiNumberFormatterCenter.getCenter().format(value) : value;
};
oFF.FdComponentRange.prototype.getFocusControl = function()
{
	if (oFF.notNull(this.m_layout))
	{
		let layout = this.getRangeLayout();
		let input1 = layout.getInput1();
		let input2 = layout.getInput2();
		let input1VisibleAndEditable = input1.isVisible() && input1.isEditable();
		let input2VisibleAndEditable = input2.isVisible() && input2.isEditable();
		if (!input1VisibleAndEditable && !input2VisibleAndEditable)
		{
			return layout.getComparisonOperatorCombobox();
		}
		if (input2VisibleAndEditable && oFF.XStringUtils.isNotNullAndNotEmpty(input1.getValue()) && oFF.XStringUtils.isNullOrEmpty(input2.getValue()))
		{
			return input2;
		}
		else if (input1.isEditable())
		{
			return input1;
		}
		else if (input2VisibleAndEditable)
		{
			return input2;
		}
	}
	return null;
};
oFF.FdComponentRange.prototype.getItemText = function(item)
{
	if (!this.isValueTypeNumeric())
	{
		let text = item.getText();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
		{
			return this.formatValue(text);
		}
	}
	let displayKey = item.getDisplayKey();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(displayKey))
	{
		return this.formatValue(displayKey);
	}
	return this.formatValue(item.getKey());
};
oFF.FdComponentRange.prototype.getPlaceholderLow = function()
{
	let operator = this.m_item.getFdComparisonOperator();
	if (operator === oFF.FdComparisonOperator.LESS_THAN || operator === oFF.FdComparisonOperator.LESS_EQUAL)
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MAX);
	}
	else if (operator === oFF.FdComparisonOperator.EQUAL)
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_EQUAL);
	}
	else if (operator === oFF.FdComparisonOperator.NOT_EQUAL)
	{
		return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_NOT_EQUAL);
	}
	return oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MIN);
};
oFF.FdComponentRange.prototype.getRangeLayout = function()
{
	return this.m_layout;
};
oFF.FdComponentRange.prototype.getTooltipLow = function()
{
	let operator = this.m_item.getFdComparisonOperator();
	let rangeNumber = oFF.XInteger.convertToString(this.getRangeNumber());
	if (operator === oFF.FdComparisonOperator.LESS_THAN || operator === oFF.FdComparisonOperator.LESS_EQUAL)
	{
		return oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MAX, rangeNumber);
	}
	else if (operator === oFF.FdComparisonOperator.EQUAL)
	{
		return oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_EQUAL, rangeNumber);
	}
	else if (operator === oFF.FdComparisonOperator.NOT_EQUAL)
	{
		return oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_NOT_EQUAL, rangeNumber);
	}
	return oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MIN, rangeNumber);
};
oFF.FdComponentRange.prototype.isEmpty = function()
{
	let layout = this.getRangeLayout();
	return layout.getInput1().isVisible() && oFF.XStringUtils.isNullOrEmpty(layout.getInput1().getValue()) && (!this.isRangeItem() || oFF.XStringUtils.isNullOrEmpty(layout.getInput2().getValue()));
};
oFF.FdComponentRange.prototype.isRangeItem = function()
{
	return this.m_item.getType() === oFF.FilterDialogValueType.RANGE;
};
oFF.FdComponentRange.prototype.isValueTypeNumeric = function()
{
	return this.m_model.getRangeModel().isInputValueTypeNumeric();
};
oFF.FdComponentRange.prototype.onEditingEnd = function(event)
{
	let layout = this.getRangeLayout();
	layout.clearMessage();
	let input1 = layout.getInput1();
	let input2 = layout.getInput2();
	let input = event.getControl();
	if (input === input1)
	{
		this.setInputTextToItem(input1);
		input1.setValue(this.getItemText(this.m_item.getLowItem()));
	}
	if (input === input2)
	{
		this.setInputTextToItem(input2);
		input2.setValue(this.getItemText(this.m_item.getHighItem()));
	}
	this.updateRangeText();
	this.onDataChanged(false);
	let input1Valid = false;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(input1.getValue()))
	{
		input1Valid = this.validateInput(input1, true);
	}
	if (this.isRangeItem() && oFF.XStringUtils.isNotNullAndNotEmpty(input2.getValue()) && this.validateInput(input2, true) && input1Valid)
	{
		this.validateRange(true);
	}
};
oFF.FdComponentRange.prototype.onLiveChange = function(event)
{
	this.onDataChanged(true);
};
oFF.FdComponentRange.prototype.onSelectionChange = function(event)
{
	let layout = this.getRangeLayout();
	let comparisonOperatorDropdown = layout.getComparisonOperatorCombobox();
	let selectedItem = comparisonOperatorDropdown.getSelectedItem();
	comparisonOperatorDropdown.setTooltip(selectedItem.getText());
	let operator = selectedItem.getCustomObject();
	if (operator.isNullOperator())
	{
		this.replaceItem(oFF.FdSimpleItem.createNull(operator === oFF.FdComparisonOperator.IS_NOT_NULL));
	}
	else if (this.m_item.isNull())
	{
		this.replaceItem(oFF.FdSimpleItem.create(null, null, null));
	}
	let isRangeOperator = operator === oFF.FdComparisonOperator.BETWEEN || operator === oFF.FdComparisonOperator.NOT_BETWEEN;
	if (isRangeOperator && !this.isRangeItem())
	{
		this.replaceItem(oFF.FdRangeItem.create(this.m_item, oFF.FdSimpleItem.create(null, null, null), operator === oFF.FdComparisonOperator.NOT_BETWEEN));
	}
	else if (!isRangeOperator && this.isRangeItem())
	{
		this.m_item.getLowItem().setFdComparisonOperator(operator);
		this.replaceItem(this.m_item.getLowItem());
	}
	else if (!operator.isNullOperator())
	{
		this.m_item.setFdComparisonOperator(operator);
	}
	layout.clearMessage();
	this.updateUI();
	this.focus();
};
oFF.FdComponentRange.prototype.parseFormattedValue = function(value, defaultValue)
{
	let rangeModel = this.m_model.getRangeModel();
	if (rangeModel.isInputValueTypeNumeric())
	{
		let formatted = oFF.UiNumberFormatterCenter.getCenter().parseFormattedNumber(value);
		let valueType = rangeModel.getInputValueType();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(formatted) && (valueType !== oFF.XValueType.INTEGER && valueType !== oFF.XValueType.LONG && valueType !== oFF.XValueType.NUMC || !oFF.XString.containsString(formatted, ".")))
		{
			return formatted;
		}
		return oFF.XStringUtils.isNotNullAndNotEmpty(value) ? defaultValue : null;
	}
	return oFF.XStringUtils.isNotNullAndNotEmpty(value) ? value : null;
};
oFF.FdComponentRange.prototype.setInputTextToItem = function(input)
{
	let layout = this.getRangeLayout();
	if (input === layout.getInput1())
	{
		let text1 = input.getValue();
		let value1 = this.parseFormattedValue(text1, text1);
		let item1 = oFF.FdSimpleItem.create(value1, value1, null);
		if (this.isRangeItem())
		{
			if (!this.m_item.getLowItem().isEqualTo(item1))
			{
				this.m_item.setLow(item1);
			}
		}
		else
		{
			item1.setFdComparisonOperator(this.m_item.getFdComparisonOperator());
			if (!item1.isEqualTo(this.m_item))
			{
				this.replaceItem(item1);
			}
		}
		return item1;
	}
	if (input === layout.getInput2() && this.isRangeItem())
	{
		let text2 = input.getValue();
		let value2 = this.parseFormattedValue(text2, text2);
		let item2 = oFF.FdSimpleItem.create(value2, value2, null);
		if (!this.m_item.getHighItem().isEqualTo(item2))
		{
			this.m_item.setHigh(item2);
		}
		return item2;
	}
	return null;
};
oFF.FdComponentRange.prototype.showMessage = function(i18nKey, input, isError, showValidationMessages)
{
	if (showValidationMessages)
	{
		this.getRangeLayout().showMessage(oFF.XLocalizationCenter.getCenter().getText(i18nKey), input, isError);
	}
	return !isError;
};
oFF.FdComponentRange.prototype.updateFields = function()
{
	let isRangeItem = this.isRangeItem();
	let layout = this.getRangeLayout();
	layout.setInputVisibility(!this.m_item.isNull(), true, isRangeItem, true);
	layout.setInputText(this.getItemText(this.m_item.getLowItem()), this.getPlaceholderLow(), this.getTooltipLow(), isRangeItem ? this.getItemText(this.m_item.getHighItem()) : null, oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_PLACEHOLDER_MAX), oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.FilterDialogI18n.I18N_FD_RANGES_TOOLTIP_MAX, oFF.XInteger.convertToString(this.getRangeNumber())));
};
oFF.FdComponentRange.prototype.updateUI = function()
{
	this.updateFields();
	this.updateRangeText();
	this.onDataChanged(false);
};
oFF.FdComponentRange.prototype.validate = function(showValidationMessages)
{
	let layout = this.getRangeLayout();
	if (showValidationMessages)
	{
		layout.clearMessage();
	}
	if (showValidationMessages && this.isEmpty() || this.m_item.isNull())
	{
		return true;
	}
	let validationInput1 = this.validateInput(layout.getInput1(), showValidationMessages);
	let validationInput2 = !this.isRangeItem() || this.validateInput(layout.getInput2(), showValidationMessages) && validationInput1 && this.validateRange(showValidationMessages);
	return validationInput1 && validationInput2;
};
oFF.FdComponentRange.prototype.validateInput = function(input, showValidationMessages)
{
	if (oFF.XStringUtils.isNullOrEmpty(input.getValue()))
	{
		return this.showMessage(this.isValueTypeNumeric() ? oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_ENTER_NUMBER : oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_ENTER_VALUE, input, true, showValidationMessages);
	}
	if (this.isValueTypeNumeric())
	{
		let parsedNumber = this.parseFormattedValue(input.getValue(), null);
		if (oFF.isNull(parsedNumber))
		{
			return this.showMessage(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_NOT_VALID, input, true, showValidationMessages);
		}
		let rangeModel = this.m_model.getRangeModel();
		let minValue = rangeModel.getMin();
		let maxValue = rangeModel.getMax();
		if (oFF.notNull(minValue) && oFF.notNull(maxValue) && showValidationMessages)
		{
			let number = oFF.XDouble.convertFromString(parsedNumber);
			let min = oFF.XDouble.convertFromString(minValue.getStringRepresentation());
			let max = oFF.XDouble.convertFromString(maxValue.getStringRepresentation());
			if (number < min || number > max)
			{
				return this.showMessage(oFF.FilterDialogI18n.I18N_FD_RANGES_WARN_VALUE_OUTSIDE_RANGE, input, false, true);
			}
		}
	}
	return true;
};
oFF.FdComponentRange.prototype.validateRange = function(showValidationMessages)
{
	if (this.isValueTypeNumeric())
	{
		let layout = this.getRangeLayout();
		let value1 = oFF.XDouble.convertFromString(this.parseFormattedValue(layout.getInput1().getValue(), null));
		let value2 = oFF.XDouble.convertFromString(this.parseFormattedValue(layout.getInput2().getValue(), null));
		if (value1 > value2)
		{
			return this.showMessage(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_MIN_GREATER_MAX, null, true, showValidationMessages);
		}
	}
	return true;
};

oFF.FdComponentRangeLayout = function() {};
oFF.FdComponentRangeLayout.prototype = new oFF.FdComponentAbstractRangeLayout();
oFF.FdComponentRangeLayout.prototype._ff_c = "FdComponentRangeLayout";

oFF.FdComponentRangeLayout.create = function()
{
	return new oFF.FdComponentRangeLayout();
};
oFF.FdComponentRangeLayout.prototype.m_betweenLabelContainer = null;
oFF.FdComponentRangeLayout.prototype.m_comparisonOperatorCombobox = null;
oFF.FdComponentRangeLayout.prototype.m_input1 = null;
oFF.FdComponentRangeLayout.prototype.m_input2 = null;
oFF.FdComponentRangeLayout.prototype.m_operatorContainer = null;
oFF.FdComponentRangeLayout.prototype.m_rangeContentContainer = null;
oFF.FdComponentRangeLayout.prototype.addContent = function(container)
{
	let componentWidth = oFF.UiCssLength.create("225px");
	let columnContainer = container.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	columnContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	columnContainer.useMaxWidth();
	this.m_rangeContentContainer = columnContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_rangeContentContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_operatorContainer = this.m_rangeContentContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_operatorContainer.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_operatorContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_operatorContainer.setName("FilterDialogRangeOperatorColumn");
	this.m_operatorContainer.setPadding(oFF.UiCssBoxEdges.create("0 1rem 0 0"));
	this.m_operatorContainer.setWidth(componentWidth);
	this.m_operatorContainer.setMinWidth(componentWidth);
	let operatorLabel = this.m_operatorContainer.addNewItemOfType(oFF.UiType.LABEL);
	operatorLabel.setName("FilterDialogRangeOperatorLabel");
	operatorLabel.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_SELECT_OPERATOR));
	operatorLabel.setHeight(oFF.UiCssLength.create("1rem"));
	this.m_comparisonOperatorCombobox = this.m_operatorContainer.addNewItemOfType(oFF.UiType.COMBO_BOX);
	this.m_comparisonOperatorCombobox.setName("FilterDialogRangeOperator");
	this.m_comparisonOperatorCombobox.useMaxWidth();
	operatorLabel.setLabelFor(this.m_comparisonOperatorCombobox);
	let inputColumn = this.m_rangeContentContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputColumn.setDirection(oFF.UiFlexDirection.COLUMN);
	inputColumn.setWrap(oFF.UiFlexWrap.NO_WRAP);
	inputColumn.setName("FilterDialogRangeInputColumn");
	inputColumn.useMaxWidth();
	inputColumn.addNewItemOfType(oFF.UiType.LABEL).setText("");
	let inputInnerContainer = inputColumn.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	inputInnerContainer.setDirection(oFF.UiFlexDirection.ROW);
	inputInnerContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	inputInnerContainer.setName("FilterDialogRangeInputContainer");
	inputInnerContainer.useMaxWidth();
	this.m_input1 = inputInnerContainer.addNewItemOfType(oFF.UiType.INPUT);
	this.m_input1.setName("FilterDialogRangeInput1");
	this.m_input1.setMinWidth(oFF.UiCssLength.create("100px"));
	this.m_input1.setMaxWidth(componentWidth);
	this.m_input1.setFlex("1");
	this.m_input1.setShowValueStateMessage(false);
	this.m_betweenLabelContainer = inputInnerContainer.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_betweenLabelContainer.setDirection(oFF.UiFlexDirection.ROW);
	this.m_betweenLabelContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_betweenLabelContainer.setWrap(oFF.UiFlexWrap.NO_WRAP);
	this.m_betweenLabelContainer.setName("FilterDialogRangeInputLabelContainer");
	this.m_betweenLabelContainer.setMinWidth(oFF.UiCssLength.create("25px"));
	this.m_betweenLabelContainer.setPadding(oFF.UiCssBoxEdges.create("0 0.5rem"));
	let betweenLabel = this.m_betweenLabelContainer.addNewItemOfType(oFF.UiType.LABEL);
	betweenLabel.setName("FilterDialogRangeInputLabel");
	betweenLabel.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_BETWEEN_LABEL));
	betweenLabel.setMinWidth(oFF.UiCssLength.create("25px"));
	this.m_input2 = inputInnerContainer.addNewItemOfType(oFF.UiType.INPUT);
	this.m_input2.setName("FilterDialogRangeInput2");
	this.m_input2.setMinWidth(oFF.UiCssLength.create("100px"));
	this.m_input2.setMaxWidth(componentWidth);
	this.m_input2.setFlex("1");
	this.m_input2.setShowValueStateMessage(false);
	this.addErrorLabel(inputColumn);
};
oFF.FdComponentRangeLayout.prototype.addOperators = function(operators, selectedOperator)
{
	this.m_comparisonOperatorCombobox.clearItems();
	if (oFF.XCollectionUtils.contains(operators, (op1) => {
		return op1.isIncluding();
	}) && oFF.XCollectionUtils.contains(operators, (op2) => {
		return !op2.isIncluding();
	}))
	{
		let genesis = this.m_comparisonOperatorCombobox.getUiManager().getGenesis();
		if (oFF.isNull(genesis))
		{
			genesis = this.m_comparisonOperatorCombobox.getUiManager().getFreeGenesis();
		}
		let localization = oFF.XLocalizationCenter.getCenter();
		let groupIncluding = genesis.newControl(oFF.UiType.DROPDOWN_GROUP_ITEM);
		groupIncluding.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_RANGES_OPERATOR_INCLUDING));
		this.m_comparisonOperatorCombobox.addItem(groupIncluding);
		oFF.XStream.of(operators).filter((operator) => {
			return operator.isIncluding();
		}).forEach((incOperator) => {
			oFF.FdLayoutUtils.addDropdownItem(this.m_comparisonOperatorCombobox, incOperator.getName(), incOperator.getLongText(), incOperator);
		});
		let groupExcluding = genesis.newControl(oFF.UiType.DROPDOWN_GROUP_ITEM);
		groupExcluding.setText(localization.getText(oFF.FilterDialogI18n.I18N_FD_RANGES_OPERATOR_EXCLUDING));
		this.m_comparisonOperatorCombobox.addItem(groupExcluding);
		oFF.XStream.of(operators).filter((operator) => {
			return !operator.isIncluding();
		}).forEach((excOperator) => {
			oFF.FdLayoutUtils.addDropdownItem(this.m_comparisonOperatorCombobox, excOperator.getName(), excOperator.getLongText(), excOperator);
		});
	}
	else
	{
		oFF.XCollectionUtils.forEach(operators, (operator) => {
			oFF.FdLayoutUtils.addDropdownItem(this.m_comparisonOperatorCombobox, operator.getName(), operator.getLongText(), operator);
		});
	}
	this.m_comparisonOperatorCombobox.setSelectedName(selectedOperator.getName());
	this.m_comparisonOperatorCombobox.setTooltip(this.m_comparisonOperatorCombobox.getSelectedItem().getText());
};
oFF.FdComponentRangeLayout.prototype.clearMessage = function()
{
	oFF.FdComponentAbstractRangeLayout.prototype.clearMessage.call( this );
	this.m_input1.setValueState(null);
	this.m_input2.setValueState(null);
};
oFF.FdComponentRangeLayout.prototype.getComparisonOperatorCombobox = function()
{
	return this.m_comparisonOperatorCombobox;
};
oFF.FdComponentRangeLayout.prototype.getDescriptionText = function()
{
	let operator = this.m_comparisonOperatorCombobox.getSelectedItem().getCustomObject();
	let showRangeText = oFF.XStringUtils.isNotNullAndNotEmpty(this.m_input1.getValue()) && (operator.getOriginOperator().getNumberOfParameters() < 2 || oFF.XStringUtils.isNotNullAndNotEmpty(this.m_input2.getValue()));
	return showRangeText ? operator.getRangeText(this.m_input1.getValue(), this.m_input2.getValue()) : operator.getLongText();
};
oFF.FdComponentRangeLayout.prototype.getInput1 = function()
{
	return this.m_input1;
};
oFF.FdComponentRangeLayout.prototype.getInput2 = function()
{
	return this.m_input2;
};
oFF.FdComponentRangeLayout.prototype.hasUserInput = function()
{
	let input1Visible = this.m_input1.isVisible();
	let input2Visible = this.m_input2.isVisible();
	return input1Visible && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_input1.getValue()) || input2Visible && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_input2.getValue()) || !input1Visible && !input2Visible;
};
oFF.FdComponentRangeLayout.prototype.releaseObject = function()
{
	oFF.FdComponentAbstractRangeLayout.prototype.releaseObject.call( this );
	this.m_rangeContentContainer = oFF.XObjectExt.release(this.m_rangeContentContainer);
	this.m_operatorContainer = oFF.XObjectExt.release(this.m_operatorContainer);
	this.m_comparisonOperatorCombobox = oFF.XObjectExt.release(this.m_comparisonOperatorCombobox);
	this.m_input1 = oFF.XObjectExt.release(this.m_input1);
	this.m_input2 = oFF.XObjectExt.release(this.m_input2);
	this.m_betweenLabelContainer = oFF.XObjectExt.release(this.m_betweenLabelContainer);
};
oFF.FdComponentRangeLayout.prototype.resizeComponent = function(size)
{
	oFF.FdComponentAbstractRangeLayout.prototype.resizeComponent.call( this , size);
	this.m_operatorContainer.setPadding(size.getContentSize().isLarge() ? oFF.UiCssBoxEdges.create("0 1rem 0 0") : null);
	this.m_rangeContentContainer.setDirection(size.getContentSize().isLarge() ? oFF.UiFlexDirection.ROW : oFF.UiFlexDirection.COLUMN);
};
oFF.FdComponentRangeLayout.prototype.setEnabled = function(enabled)
{
	this.m_comparisonOperatorCombobox.setEnabled(enabled);
	this.m_input1.setEnabled(enabled);
	this.m_input2.setEnabled(enabled);
};
oFF.FdComponentRangeLayout.prototype.setInputText = function(text1, placeholder1, tooltip1, text2, placeholder2, tooltip2)
{
	this.m_input1.setValue(text1);
	this.m_input1.setPlaceholder(placeholder1);
	this.m_input1.setTooltip(tooltip1);
	this.m_input2.setValue(text2);
	this.m_input2.setPlaceholder(placeholder2);
	this.m_input2.setTooltip(tooltip2);
};
oFF.FdComponentRangeLayout.prototype.setInputVisibility = function(input1Visible, input1Editable, input2Visible, input2Editable)
{
	this.m_input1.setVisible(input1Visible);
	this.m_input1.setEditable(input1Editable);
	this.m_betweenLabelContainer.setVisible(input2Visible);
	this.m_input2.setVisible(input2Visible);
	this.m_input2.setEditable(input2Editable);
};
oFF.FdComponentRangeLayout.prototype.showMessage = function(message, onControl, isError)
{
	oFF.FdComponentAbstractRangeLayout.prototype.showMessage.call( this , message, onControl, isError);
	oFF.FdLayoutUtils.announceErrorMessage(message);
	let valueState = isError ? oFF.UiValueState.ERROR : oFF.UiValueState.WARNING;
	if (oFF.isNull(onControl) || onControl === this.m_input1)
	{
		this.m_input1.setValueState(valueState);
	}
	if (oFF.isNull(onControl) || onControl === this.m_input2)
	{
		this.m_input2.setValueState(valueState);
	}
};

oFF.FdLayoutSize = function() {};
oFF.FdLayoutSize.prototype = new oFF.XConstant();
oFF.FdLayoutSize.prototype._ff_c = "FdLayoutSize";

oFF.FdLayoutSize.DESKTOP_LARGE = null;
oFF.FdLayoutSize.DESKTOP_MEDIUM = null;
oFF.FdLayoutSize.DESKTOP_SMALL = null;
oFF.FdLayoutSize.MOBILE_MEDIUM = null;
oFF.FdLayoutSize.MOBILE_SMALL = null;
oFF.FdLayoutSize.SELECTION_CONTAINER_ADJUSTMENT = 250;
oFF.FdLayoutSize.createLayoutSize = function(name, minWidth)
{
	let layoutSize = oFF.XConstant.setupName(new oFF.FdLayoutSize(), name);
	layoutSize.m_minWidth = minWidth;
	return layoutSize;
};
oFF.FdLayoutSize.get = function(deviceInfo, contentWidth, dialogWidth, selectionContainerAvailable)
{
	let fdWidth = dialogWidth > 0 ? dialogWidth : oFF.FdLayoutSize.DESKTOP_LARGE.m_minWidth;
	if (!selectionContainerAvailable)
	{
		fdWidth = fdWidth + oFF.FdLayoutSize.SELECTION_CONTAINER_ADJUSTMENT;
	}
	let fdContentWidth = contentWidth > 0 && contentWidth + oFF.FdLayoutSize.SELECTION_CONTAINER_ADJUSTMENT <= fdWidth ? contentWidth + oFF.FdLayoutSize.SELECTION_CONTAINER_ADJUSTMENT : fdWidth;
	return oFF.FdSize.create(oFF.FdLayoutSize.getSize(deviceInfo, fdContentWidth), oFF.FdLayoutSize.getSize(deviceInfo, fdWidth));
};
oFF.FdLayoutSize.getSize = function(deviceInfo, width)
{
	if (deviceInfo.isMobile())
	{
		return width >= oFF.FdLayoutSize.MOBILE_MEDIUM.m_minWidth ? oFF.FdLayoutSize.MOBILE_MEDIUM : oFF.FdLayoutSize.MOBILE_SMALL;
	}
	return width >= oFF.FdLayoutSize.DESKTOP_LARGE.m_minWidth ? oFF.FdLayoutSize.DESKTOP_LARGE : (width >= oFF.FdLayoutSize.DESKTOP_MEDIUM.m_minWidth ? oFF.FdLayoutSize.DESKTOP_MEDIUM : oFF.FdLayoutSize.DESKTOP_SMALL);
};
oFF.FdLayoutSize.staticSetup = function()
{
	oFF.FdLayoutSize.MOBILE_SMALL = oFF.FdLayoutSize.createLayoutSize("s", 0);
	oFF.FdLayoutSize.MOBILE_MEDIUM = oFF.FdLayoutSize.createLayoutSize("m", 700);
	oFF.FdLayoutSize.DESKTOP_SMALL = oFF.FdLayoutSize.createLayoutSize("s", 0);
	oFF.FdLayoutSize.DESKTOP_MEDIUM = oFF.FdLayoutSize.createLayoutSize("m", 710);
	oFF.FdLayoutSize.DESKTOP_LARGE = oFF.FdLayoutSize.createLayoutSize("l", 860);
};
oFF.FdLayoutSize.prototype.m_minWidth = 0;
oFF.FdLayoutSize.prototype.isLarge = function()
{
	return this === oFF.FdLayoutSize.DESKTOP_LARGE;
};
oFF.FdLayoutSize.prototype.isMedium = function()
{
	return this === oFF.FdLayoutSize.MOBILE_MEDIUM || this === oFF.FdLayoutSize.DESKTOP_MEDIUM;
};
oFF.FdLayoutSize.prototype.isMobile = function()
{
	return this === oFF.FdLayoutSize.MOBILE_SMALL || this === oFF.FdLayoutSize.MOBILE_MEDIUM;
};
oFF.FdLayoutSize.prototype.isSmall = function()
{
	return this === oFF.FdLayoutSize.MOBILE_SMALL || this === oFF.FdLayoutSize.DESKTOP_SMALL;
};

oFF.FdTableType = function() {};
oFF.FdTableType.prototype = new oFF.XConstant();
oFF.FdTableType.prototype._ff_c = "FdTableType";

oFF.FdTableType.NAVIGATION_CONTAINER = null;
oFF.FdTableType.RESPONSIVE_TABLE_LAZY_LOADING = null;
oFF.FdTableType.RESPONSIVE_TABLE_PAGING = null;
oFF.FdTableType.TREE_TABLE = null;
oFF.FdTableType.getLayoutType = function(hasChildren, isMobile)
{
	if (hasChildren)
	{
		return isMobile ? oFF.FdTableType.NAVIGATION_CONTAINER : oFF.FdTableType.TREE_TABLE;
	}
	return isMobile ? oFF.FdTableType.RESPONSIVE_TABLE_LAZY_LOADING : oFF.FdTableType.RESPONSIVE_TABLE_PAGING;
};
oFF.FdTableType.staticSetup = function()
{
	oFF.FdTableType.RESPONSIVE_TABLE_PAGING = oFF.XConstant.setupName(new oFF.FdTableType(), "ResponsiveTablePaging");
	oFF.FdTableType.RESPONSIVE_TABLE_LAZY_LOADING = oFF.XConstant.setupName(new oFF.FdTableType(), "ResponsiveTableLazyLoading");
	oFF.FdTableType.TREE_TABLE = oFF.XConstant.setupName(new oFF.FdTableType(), "TreeTable");
	oFF.FdTableType.NAVIGATION_CONTAINER = oFF.XConstant.setupName(new oFF.FdTableType(), "NavigationContainer");
};
oFF.FdTableType.prototype.isTreeLayout = function()
{
	return this === oFF.FdTableType.TREE_TABLE || this === oFF.FdTableType.NAVIGATION_CONTAINER;
};

oFF.OuCustomAccessPopup = function() {};
oFF.OuCustomAccessPopup.prototype = new oFF.UtFormPopup();
oFF.OuCustomAccessPopup.prototype._ff_c = "OuCustomAccessPopup";

oFF.OuCustomAccessPopup.createCustomAccessPopup = function(genesis, currentAccess, onFinished)
{
	let newPopup = new oFF.OuCustomAccessPopup();
	newPopup.setupCustomAccessPopup(genesis, currentAccess, onFinished);
	return newPopup;
};
oFF.OuCustomAccessPopup.prototype.m_commoni18n = null;
oFF.OuCustomAccessPopup.prototype.m_customAccessJson = null;
oFF.OuCustomAccessPopup.prototype.m_editTree = null;
oFF.OuCustomAccessPopup.prototype.m_editTreeItem = null;
oFF.OuCustomAccessPopup.prototype.m_fullTree = null;
oFF.OuCustomAccessPopup.prototype.m_fullTreeItem = null;
oFF.OuCustomAccessPopup.prototype.m_viewTree = null;
oFF.OuCustomAccessPopup.prototype.m_viewTreeItem = null;
oFF.OuCustomAccessPopup.prototype.addItemToTree = function(itemText, id, tree)
{
	let treeItem = tree.addNewItem();
	treeItem.setText(itemText);
	treeItem.setName(id);
	return treeItem;
};
oFF.OuCustomAccessPopup.prototype.buildPopupContent = function(genesis)
{
	oFF.UtFormPopup.prototype.buildPopupContent.call( this , genesis);
	let m_root = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_viewTree = this.getGenesis().newControl(oFF.UiType.TREE);
	m_root.addItem(this.m_viewTree);
	this.m_viewTree.setSelectionMode(oFF.UiSelectionMode.MULTI_SELECT);
	this.m_viewTree.setExpanded(true);
	this.m_viewTree.setFlex("auto");
	this.m_viewTreeItem = this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE), "view", this.m_viewTree);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.READ), "read", this.m_viewTreeItem);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.COPY), "copy", this.m_viewTreeItem);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.VIEW_COMMENT), "commentView", this.m_viewTreeItem);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.ADD_COMMENT), "commentAdd", this.m_viewTreeItem);
	this.m_editTree = this.getGenesis().newControl(oFF.UiType.TREE);
	m_root.addItem(this.m_editTree);
	this.m_editTree.setSelectionMode(oFF.UiSelectionMode.MULTI_SELECT);
	this.m_editTree.setExpanded(true);
	this.m_editTree.setFlex("auto");
	this.m_editTreeItem = this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.EDIT_ACCESS_TYPE), "edit", this.m_editTree);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.UPDATE), "update", this.m_editTreeItem);
	this.m_fullTree = this.getGenesis().newControl(oFF.UiType.TREE);
	m_root.addItem(this.m_fullTree);
	this.m_fullTree.setSelectionMode(oFF.UiSelectionMode.MULTI_SELECT);
	this.m_fullTree.setExpanded(true);
	this.m_fullTree.setFlex("auto");
	this.m_fullTreeItem = this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.FULL_ACCESS_TYPE), "fullAccess", this.m_fullTree);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.DELETE), "delete", this.m_fullTreeItem);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.DELETE_COMMENT), "commentDelete", this.m_fullTreeItem);
	this.addItemToTree(this.getLocalization().getText(oFF.OuShareDialogI18n.SHARE), "share", this.m_fullTreeItem);
	if (oFF.notNull(this.m_customAccessJson))
	{
		this.setCurrentStateFromJson(this.m_customAccessJson);
	}
	this.m_viewTree.registerOnSelectionChange(this);
	this.m_editTree.registerOnSelectionChange(this);
	this.m_fullTree.registerOnSelectionChange(this);
	genesis.setRoot(m_root);
};
oFF.OuCustomAccessPopup.prototype.checkAllChildrenSelected = function(tree)
{
	let treeParent = tree.getItem(0);
	let count = 0;
	let children = treeParent.getItems();
	for (let i = 0; i < children.size(); i++)
	{
		let child = children.get(i);
		if (child.isSelected())
		{
			count++;
		}
	}
	treeParent.setSelected(count === children.size());
};
oFF.OuCustomAccessPopup.prototype.configurePopup = function(dialog)
{
	let submitButton = this.addButton(oFF.UiButtonType.PRIMARY, this.m_commoni18n.getText(oFF.XCommonI18n.OK), "sys-enter-2", (controlEvent) => {
		this.submit();
	});
	submitButton.setIcon(null);
	submitButton.setText(this.m_commoni18n.getText(oFF.XCommonI18n.OK));
	submitButton.setMinWidth(oFF.UiCssLength.create("0"));
	let cancelButton = this.addButton(oFF.UiButtonType.DEFAULT, this.m_commoni18n.getText(oFF.XCommonI18n.CANCEL), "sys-cancel-2", (controlEvent) => {
		this.setCustomAccessNull();
		this.close();
	});
	cancelButton.setIcon(null);
	cancelButton.setText(this.m_commoni18n.getText(oFF.XCommonI18n.CANCEL));
	dialog.setName("CustomAccessPopup");
	dialog.setTitle(this.getLocalization().getText(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TITLE));
	dialog.setSize(oFF.UiSize.createByCss("28em", "30.5em"));
	dialog.setResizable(false);
};
oFF.OuCustomAccessPopup.prototype.createselectedItemJson = function()
{
	let jsonStruct = oFF.PrFactory.createStructure();
	let viewAccess = this.m_viewTreeItem.getItems();
	let editAccess = this.m_editTreeItem.getItems();
	let fullAccess = this.m_fullTreeItem.getItems();
	let viewJson = this.getAccessValuesAsJson(viewAccess);
	viewJson.putString("id", this.m_viewTreeItem.getName());
	viewJson.putString("text", this.m_viewTreeItem.getText());
	viewJson.putBoolean("selected", this.m_viewTreeItem.isSelected());
	viewJson.putBoolean("visible", true);
	let editJson = this.getAccessValuesAsJson(editAccess);
	editJson.putString("id", this.m_editTreeItem.getName());
	editJson.putString("text", this.m_editTreeItem.getText());
	editJson.putBoolean("selected", this.m_editTreeItem.isSelected());
	editJson.putBoolean("visible", true);
	let fullJson = this.getAccessValuesAsJson(fullAccess);
	fullJson.putString("id", this.m_fullTreeItem.getName());
	fullJson.putString("text", this.m_fullTreeItem.getText());
	fullJson.putBoolean("selected", this.m_fullTreeItem.isSelected());
	fullJson.putBoolean("visible", true);
	jsonStruct.put("0", viewJson);
	jsonStruct.put("1", editJson);
	jsonStruct.put("2", fullJson);
	return jsonStruct;
};
oFF.OuCustomAccessPopup.prototype.getAccessValuesAsJson = function(accessTreeItems)
{
	let accessJson = oFF.PrFactory.createStructure();
	for (let i = 0; i < accessTreeItems.size(); i++)
	{
		let innerJson = oFF.PrFactory.createStructure();
		let item = accessTreeItems.get(i);
		innerJson.putString("id", item.getName());
		innerJson.putString("text", item.getText());
		innerJson.putBoolean("selected", item.isSelected());
		innerJson.putBoolean("visible", true);
		accessJson.put(oFF.XInteger.convertToString(i), innerJson);
	}
	return accessJson;
};
oFF.OuCustomAccessPopup.prototype.onSelectionChange = function(event)
{
	let item = event.getSelectedItem();
	let isSelected = event.getSelectedItem().isSelected();
	let id = event.getSelectedItem().getName();
	switch (id)
	{
		case "view":
			if (isSelected)
			{
				this.setAllTreeItems(this.m_viewTree, true);
			}
			else
			{
				this.setAllTreeItems(this.m_viewTree, false);
				this.setAllTreeItems(this.m_editTree, false);
				this.setAllTreeItems(this.m_fullTree, false);
			}
			break;

		case "edit":
			if (isSelected)
			{
				this.setAllTreeItems(this.m_viewTree, true);
				this.setAllTreeItems(this.m_editTree, true);
			}
			else
			{
				this.setAllTreeItems(this.m_editTree, false);
				this.setAllTreeItems(this.m_fullTree, false);
			}
			break;

		case "fullAccess":
			if (isSelected)
			{
				this.setAllTreeItems(this.m_viewTree, true);
				this.setAllTreeItems(this.m_editTree, true);
				this.setAllTreeItems(this.m_fullTree, true);
			}
			else
			{
				this.setAllTreeItems(this.m_fullTree, false);
			}
			break;

		case "read":
			if (isSelected)
			{
				item.setSelected(true);
			}
			else
			{
				this.setAllTreeItems(this.m_viewTree, false);
				this.setAllTreeItems(this.m_editTree, false);
				this.setAllTreeItems(this.m_fullTree, false);
			}
			break;

		case "copy":
			if (isSelected)
			{
				item.setSelected(true);
				let read = item.getParent().getItem(0);
				read.setSelected(true);
			}
			else
			{
				item.setSelected(false);
			}
			break;

		case "commentView":
			if (isSelected)
			{
				item.setSelected(true);
				let read = item.getParent().getItem(0);
				read.setSelected(true);
			}
			else
			{
				item.setSelected(false);
			}
			break;

		case "commentAdd":
			if (isSelected)
			{
				item.setSelected(true);
				let read = item.getParent().getItem(0);
				read.setSelected(true);
				let viewComment = item.getParent().getItem(2);
				viewComment.setSelected(true);
			}
			else
			{
				item.setSelected(false);
			}
			break;

		case "update":
			if (isSelected)
			{
				let read = this.m_viewTreeItem.getItemByName("read");
				read.setSelected(true);
			}
			this.setAllTreeItems(this.m_editTree, isSelected);
			break;

		case "share":
			if (isSelected)
			{
				let read = this.m_viewTreeItem.getItemByName("read");
				read.setSelected(true);
			}
			item.setSelected(isSelected);
			break;

		case "delete":
			if (isSelected)
			{
				let read = this.m_viewTreeItem.getItemByName("read");
				read.setSelected(true);
			}
			item.setSelected(isSelected);
			break;

		case "commentDelete":
			if (isSelected)
			{
				let read = this.m_viewTreeItem.getItemByName("read");
				read.setSelected(true);
				let viewComment = this.m_viewTreeItem.getItemByName("commentView");
				viewComment.setSelected(true);
			}
			item.setSelected(isSelected);
			break;
	}
	this.checkAllChildrenSelected(this.m_viewTree);
	this.checkAllChildrenSelected(this.m_fullTree);
};
oFF.OuCustomAccessPopup.prototype.releaseObject = function()
{
	this.m_customAccessJson = oFF.XObjectExt.release(this.m_customAccessJson);
	this.m_viewTree = oFF.XObjectExt.release(this.m_viewTree);
	this.m_editTree = oFF.XObjectExt.release(this.m_editTree);
	this.m_fullTree = oFF.XObjectExt.release(this.m_fullTree);
	this.m_viewTreeItem = oFF.XObjectExt.release(this.m_viewTreeItem);
	this.m_editTreeItem = oFF.XObjectExt.release(this.m_editTreeItem);
	this.m_fullTreeItem = oFF.XObjectExt.release(this.m_fullTreeItem);
	oFF.UtFormPopup.prototype.releaseObject.call( this );
};
oFF.OuCustomAccessPopup.prototype.setAllTreeItems = function(tree, isSelected)
{
	let treeParent = tree.getItem(0);
	treeParent.setSelected(isSelected);
	let children = treeParent.getItems();
	for (let i = 0; i < children.size(); i++)
	{
		let child = children.get(i);
		child.setSelected(isSelected);
	}
};
oFF.OuCustomAccessPopup.prototype.setCurrentStateFromJson = function(currentSelectedJson)
{
	for (let i = 0; i < currentSelectedJson.size(); i++)
	{
		let parentJson = currentSelectedJson.getStructureByKey(oFF.XInteger.convertToString(i));
		switch (i)
		{
			case 0:
				this.m_viewTreeItem.setSelected(parentJson.getBooleanByKey("selected"));
				let children = this.m_viewTreeItem.getItems();
				for (let j = 0; j < children.size(); j++)
				{
					let selected = parentJson.getStructureByKey(oFF.XInteger.convertToString(j)).getBooleanByKey("selected");
					let child = children.get(j);
					child.setSelected(selected);
				}
				break;

			case 1:
				this.m_editTreeItem.setSelected(parentJson.getBooleanByKey("selected"));
				let editChildren = this.m_editTreeItem.getItems();
				for (let j = 0; j < editChildren.size(); j++)
				{
					let selected = parentJson.getStructureByKey(oFF.XInteger.convertToString(j)).getBooleanByKey("selected");
					let child = editChildren.get(j);
					child.setSelected(selected);
				}
				break;

			case 2:
				this.m_fullTreeItem.setSelected(parentJson.getBooleanByKey("selected"));
				let fullChildren = this.m_fullTreeItem.getItems();
				for (let j = 0; j < fullChildren.size(); j++)
				{
					let selected = parentJson.getStructureByKey(oFF.XInteger.convertToString(j)).getBooleanByKey("selected");
					let child = fullChildren.get(j);
					child.setSelected(selected);
				}
				break;

			default:
				break;
		}
	}
	this.checkAllChildrenSelected(this.m_viewTree);
	this.checkAllChildrenSelected(this.m_editTree);
	this.checkAllChildrenSelected(this.m_fullTree);
};
oFF.OuCustomAccessPopup.prototype.setCustomAccessNull = function()
{
	let submitConsumer = this.getSubmitConsumer();
	if (oFF.notNull(submitConsumer))
	{
		submitConsumer(null);
	}
};
oFF.OuCustomAccessPopup.prototype.setupCustomAccessPopup = function(genesis, currentAccess, submitConsumer)
{
	this.setSubmitConsumer(submitConsumer);
	this.m_customAccessJson = currentAccess;
	this.m_commoni18n = oFF.OuShareDialogI18n.getCommonProvider();
	this.setupPopup(genesis);
};
oFF.OuCustomAccessPopup.prototype.submit = function()
{
	let submitConsumer = this.getSubmitConsumer();
	if (oFF.notNull(submitConsumer))
	{
		this.m_customAccessJson = this.createselectedItemJson();
		submitConsumer(this.m_customAccessJson);
	}
	this.close();
};

oFF.OuShareUserTeamSelectorPopup = function() {};
oFF.OuShareUserTeamSelectorPopup.prototype = new oFF.UtFormPopup();
oFF.OuShareUserTeamSelectorPopup.prototype._ff_c = "OuShareUserTeamSelectorPopup";

oFF.OuShareUserTeamSelectorPopup.createShareMemberSelectorPopup = function(genesis, listOfUsers, onFinished, owner, workspaceId)
{
	let newPopup = new oFF.OuShareUserTeamSelectorPopup();
	newPopup.setupMemberSelectorPopup(genesis, listOfUsers, onFinished, owner, workspaceId);
	return newPopup;
};
oFF.OuShareUserTeamSelectorPopup.prototype.m_commoni18n = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_currentSelectedUsers = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_mainContainer = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_owner = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_previousSearch = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_searchPanel = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_searchValue = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_selectedUsers = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_selectionList = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_shareUserTeamSelectionList = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_shareUserTeamTable = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_table = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_tableFooter = null;
oFF.OuShareUserTeamSelectorPopup.prototype.m_totalMembers = 0;
oFF.OuShareUserTeamSelectorPopup.prototype.m_totalTeams = 0;
oFF.OuShareUserTeamSelectorPopup.prototype.m_workspace = null;
oFF.OuShareUserTeamSelectorPopup.prototype.addItemToSplitter = function(splitter, content)
{
	let item = splitter.addNewItem();
	item.setContent(content);
	return item;
};
oFF.OuShareUserTeamSelectorPopup.prototype.buildPopupContent = function(genesis)
{
	oFF.UtFormPopup.prototype.buildPopupContent.call( this , genesis);
	let root = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	root.setHeight(oFF.UiCssLength.create("100%"));
	root.setWidth(oFF.UiCssLength.create("100%"));
	this.m_mainContainer = root.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	this.m_mainContainer.setWidth(oFF.UiCssLength.create("80%"));
	this.m_mainContainer.setMinWidth(oFF.UiCssLength.create("38%"));
	this.m_mainContainer.useMaxSpace();
	this.m_searchPanel = oFF.OuShareUserTeamSearchPanel.create(this, this.m_mainContainer);
	this.m_shareUserTeamSelectionList = oFF.OuShareUserTeamSelectionList.create(this);
	this.m_selectionList = this.m_shareUserTeamSelectionList.buildList(root);
	this.m_shareUserTeamTable = oFF.OuShareUserTeamTable.create(this, this.m_mainContainer, this.m_owner, this.m_workspace);
	this.m_table = this.m_shareUserTeamTable.buildTable();
	this.m_tableFooter = this.m_shareUserTeamTable.getTableFooter();
	let RightSplitter = genesis.newControl(oFF.UiType.INTERACTIVE_SPLITTER);
	let selectionContainer = this.m_shareUserTeamSelectionList.getSelectionContainer();
	RightSplitter.setOrientation(oFF.UiOrientation.HORIZONTAL);
	RightSplitter.addCssClass("ffCalculationsDialog-FormulaEditor-BottomLeftLayout");
	RightSplitter.setEnableReordering(false);
	this.addItemToSplitter(RightSplitter, this.m_mainContainer);
	let memberSelector = this.addItemToSplitter(RightSplitter, selectionContainer);
	memberSelector.setWidth(oFF.UiCssLength.create("35%"));
	memberSelector.setMinWidth(oFF.UiCssLength.create("25%"));
	root.addItem(RightSplitter);
	genesis.setRoot(root);
};
oFF.OuShareUserTeamSelectorPopup.prototype.changeUserDisplayNameOrId = function(tableRows, userView)
{
	if (oFF.XString.isEqual(userView, "IdAndDisplay"))
	{
		if (this.m_table.getResponsiveTableColumns().size() === 1)
		{
			let column = this.m_table.addNewResponsiveTableColumn();
			column.addCssClass("ffShareDialogReTableLastColumn");
			this.m_table.getResponsiveTableColumn(0).removeCssClass("ffShareDialogReTableLastColumn");
		}
	}
	else
	{
		if (this.m_table.getResponsiveTableColumns().size() > 1)
		{
			let column = this.m_table.getResponsiveTableColumn(1);
			this.m_table.removeResponsiveTableColumn(column);
			this.m_table.getResponsiveTableColumn(0).addCssClass("ffShareDialogReTableLastColumn");
		}
	}
	for (let i = 0; i < tableRows.size(); i++)
	{
		let userRow = tableRows.get(i);
		let userCell = userRow.getResponsiveTableCell(0);
		let label = userCell.getItems().get(1);
		let user = label.getTooltip();
		let idText = oFF.XStringUtils.concatenate2(this.getLocalization().getText(oFF.OuShareDialogI18n.ID), ": ");
		let afterId = oFF.XStringTokenizer.splitString(user, idText).get(1);
		let displayText = oFF.XStringUtils.concatenate3(" ", this.getLocalization().getText(oFF.OuShareDialogI18n.DISPLAY_NAME), ": ");
		let idAndDisplay = oFF.XStringTokenizer.splitString(afterId, displayText);
		let id = idAndDisplay.get(0);
		let displayName = idAndDisplay.get(1);
		if (oFF.XString.isEqual(userView, "IdAndDisplay"))
		{
			label.setText(id);
			let newCell = userRow.addNewResponsiveTableCellOfType(oFF.UiType.VERTICAL_LAYOUT);
			let newLabel = this.getGenesis().newControl(oFF.UiType.LABEL).setText(displayName);
			newCell.addItem(newLabel);
		}
		else if (oFF.XString.isEqual(userView, "Id"))
		{
			label.setText(id);
		}
		else
		{
			label.setText(displayName);
		}
	}
	for (let i = 0; i < this.m_selectionList.getItems().size(); i++)
	{
		let userItem = this.m_selectionList.getItems().get(i);
		let user = userItem.getName();
		let idAndDisplay = oFF.XStringTokenizer.splitString(user, ",");
		let id = idAndDisplay.get(0);
		if (oFF.XStringTokenizer.splitString(id, ":").size() > 2)
		{
			let idSplit = oFF.XStringTokenizer.splitString(id, ":");
			id = oFF.XStringUtils.concatenate3(idSplit.get(0), ": ", idSplit.get(2));
		}
		let displayName = idAndDisplay.get(1);
		let label = userItem.getContent().getItems().get(0);
		if (oFF.XString.isEqual(userView, "IdAndDisplay"))
		{
			label.setText(oFF.XStringUtils.concatenate4(id, " (", displayName, ")"));
		}
		else if (oFF.XString.isEqual(userView, "Id"))
		{
			label.setText(id);
		}
		else
		{
			label.setText(displayName);
		}
	}
};
oFF.OuShareUserTeamSelectorPopup.prototype.configurePopup = function(dialog)
{
	let submitBtn = this.addButton(oFF.UiButtonType.PRIMARY, this.m_commoni18n.getText(oFF.XCommonI18n.OK), "sys-enter-2", (controlEvent) => {
		this.submit();
	});
	submitBtn.setIcon(null);
	submitBtn.setText(this.m_commoni18n.getText(oFF.XCommonI18n.OK));
	submitBtn.setMinWidth(oFF.UiCssLength.create("0"));
	let cancelBtn = this.addButton(oFF.UiButtonType.DEFAULT, this.m_commoni18n.getText(oFF.XCommonI18n.CANCEL), "sys-cancel-2", (controlEvent) => {
		this.close();
	});
	cancelBtn.setIcon(null);
	cancelBtn.setText(this.m_commoni18n.getText(oFF.XCommonI18n.CANCEL));
	dialog.setName("ShareMemberSelectorPopup");
	dialog.setTitle(this.getLocalization().getText(oFF.OuShareDialogI18n.MEMBER_SELECTOR_TITLE));
	dialog.setSize(oFF.UiSize.createByCss("64rem", "28rem"));
	dialog.setResizable(true);
};
oFF.OuShareUserTeamSelectorPopup.prototype.createNewSelectionListItem = function(text, tooltip, name, customObject, genesis)
{
	let labelContainer = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	let label = labelContainer.addNewItemOfType(oFF.UiType.LABEL);
	label.setText(text);
	label.addCssClass("sapMSLITitle");
	let listItem = genesis.newControl(oFF.UiType.CUSTOM_LIST_ITEM);
	listItem.setCustomObject(customObject);
	listItem.setName(name);
	listItem.setContent(labelContainer);
	listItem.setPadding(oFF.UiCssBoxEdges.create("0 5px"));
	listItem.setTooltip(tooltip);
	return listItem;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getCurrentSelectedUsers = function()
{
	return this.m_currentSelectedUsers;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getLocalizationProvider = function()
{
	return this.getLocalization();
};
oFF.OuShareUserTeamSelectorPopup.prototype.getSearchPanel = function()
{
	return this.m_searchPanel;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getSearchValue = function()
{
	return this.m_searchValue;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getSelectedUsers = function()
{
	return this.m_selectedUsers;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getSelectionList = function()
{
	return this.m_selectionList;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getShareUserTeamSelectionList = function()
{
	return this.m_shareUserTeamSelectionList;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getTable = function()
{
	return this.m_table;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getTotalMembers = function()
{
	return this.m_totalMembers;
};
oFF.OuShareUserTeamSelectorPopup.prototype.getTotalTeams = function()
{
	return this.m_totalTeams;
};
oFF.OuShareUserTeamSelectorPopup.prototype.handleSearch = function(controlEvent)
{
	if (oFF.notNull(controlEvent))
	{
		let didPressClearButton = controlEvent.getParameters().getBooleanByKeyExt(oFF.UiEventParams.PARAM_CLEAR_BUTTON_PRESSED, false);
		let searchText = controlEvent.getParameters().getStringByKeyExt(oFF.UiEventParams.PARAM_SEARCH_TEXT, "");
		if (oFF.XString.isEqual(searchText, ""))
		{
			searchText = controlEvent.getParameters().getStringByKeyExt("value", "");
		}
		if (!oFF.XString.isEqual(this.m_previousSearch, searchText))
		{
			if (!didPressClearButton && !oFF.XStringUtils.isNullOrEmpty(searchText))
			{
				this.m_selectedUsers = this.m_selectionList.getItems();
				this.m_table.clearResponsiveTableRows();
				this.m_mainContainer.removeItem(this.m_tableFooter);
				this.m_searchValue = searchText;
				this.m_shareUserTeamTable.addAllUsersToTable();
			}
			else
			{
				let selectedItems = this.m_table.getSelectedItems();
				let listContent = oFF.XList.create();
				let size = selectedItems.size();
				for (let i = 0; i < size; i++)
				{
					let item = selectedItems.get(i);
					let cell = item.getResponsiveTableCell(0);
					let label = cell.getItems().get(1);
					let idText = oFF.XStringUtils.concatenate2(this.getLocalization().getText(oFF.OuShareDialogI18n.ID), ": ");
					let afterId = oFF.XStringTokenizer.splitString(label.getTooltip(), idText).get(1);
					let displayNameText = oFF.XStringUtils.concatenate3(" ", this.getLocalization().getText(oFF.OuShareDialogI18n.DISPLAY_NAME), ": ");
					let idAndDisplay = oFF.XStringTokenizer.splitString(afterId, displayNameText);
					let id = idAndDisplay.get(0);
					let name = label.getName();
					let user = oFF.XList.create();
					user.add(id);
					user.add(name);
					listContent.add(user);
				}
				this.m_currentSelectedUsers = listContent;
				this.m_table.clearResponsiveTableRows();
				this.m_searchValue = null;
				this.m_mainContainer.removeItem(this.m_tableFooter);
				this.m_shareUserTeamTable.addAllUsersToTable();
			}
			this.m_previousSearch = searchText;
		}
	}
};
oFF.OuShareUserTeamSelectorPopup.prototype.releaseObject = function()
{
	this.m_commoni18n = oFF.XObjectExt.release(this.m_commoni18n);
	this.m_table = oFF.XObjectExt.release(this.m_table);
	this.m_tableFooter = oFF.XObjectExt.release(this.m_tableFooter);
	this.m_selectionList = oFF.XObjectExt.release(this.m_selectionList);
	this.m_mainContainer = oFF.XObjectExt.release(this.m_mainContainer);
	this.m_currentSelectedUsers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_currentSelectedUsers);
	this.m_selectedUsers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_selectedUsers);
	this.m_searchPanel = oFF.XObjectExt.release(this.m_searchPanel);
	this.m_shareUserTeamTable = oFF.XObjectExt.release(this.m_shareUserTeamTable);
	this.m_shareUserTeamSelectionList = oFF.XObjectExt.release(this.m_shareUserTeamSelectionList);
	oFF.UtFormPopup.prototype.releaseObject.call( this );
};
oFF.OuShareUserTeamSelectorPopup.prototype.setDialogBusy = function(busy)
{
	this.setBusy(busy);
};
oFF.OuShareUserTeamSelectorPopup.prototype.setSearchValue = function(m_searchValue)
{
	this.m_searchValue = m_searchValue;
};
oFF.OuShareUserTeamSelectorPopup.prototype.setSelectedUsers = function(m_selectedUsers)
{
	this.m_selectedUsers = m_selectedUsers;
};
oFF.OuShareUserTeamSelectorPopup.prototype.setSelectionList = function(m_selectionList)
{
	this.m_selectionList = m_selectionList;
};
oFF.OuShareUserTeamSelectorPopup.prototype.setTotalMembers = function(m_totalMembers)
{
	this.m_totalMembers = m_totalMembers;
};
oFF.OuShareUserTeamSelectorPopup.prototype.setTotalTeams = function(m_totalTeams)
{
	this.m_totalTeams = m_totalTeams;
};
oFF.OuShareUserTeamSelectorPopup.prototype.setupMemberSelectorPopup = function(genesis, listOfUsers, submitConsumer, owner, workspaceId)
{
	this.setSubmitConsumer(submitConsumer);
	this.m_commoni18n = oFF.OuShareDialogI18n.getCommonProvider();
	this.m_currentSelectedUsers = listOfUsers;
	this.m_owner = owner;
	this.m_workspace = workspaceId;
	this.setupPopup(genesis);
};
oFF.OuShareUserTeamSelectorPopup.prototype.submit = function()
{
	let submitConsumer = this.getSubmitConsumer();
	if (oFF.notNull(submitConsumer))
	{
		let selectedUsers = this.m_selectionList.getItems();
		let selectedUserJson = oFF.PrFactory.createStructure();
		let listToAdd = oFF.XList.create();
		for (let i = 0; i < selectedUsers.size(); i++)
		{
			let userSelected = selectedUsers.get(i);
			let user = oFF.XList.create();
			user.add(userSelected.getName());
			user.add(userSelected.getTooltip());
			listToAdd.add(user);
		}
		selectedUserJson.put("selectedUsers", listToAdd);
		submitConsumer(selectedUserJson);
	}
	this.close();
};

oFF.VdComparisonOperator = function() {};
oFF.VdComparisonOperator.prototype = new oFF.XConstant();
oFF.VdComparisonOperator.prototype._ff_c = "VdComparisonOperator";

oFF.VdComparisonOperator.BETWEEN = null;
oFF.VdComparisonOperator.EQUAL = null;
oFF.VdComparisonOperator.GREATER_EQUAL = null;
oFF.VdComparisonOperator.GREATER_THAN = null;
oFF.VdComparisonOperator.IS_NOT_NULL = null;
oFF.VdComparisonOperator.IS_NULL = null;
oFF.VdComparisonOperator.LESS_EQUAL = null;
oFF.VdComparisonOperator.LESS_THAN = null;
oFF.VdComparisonOperator.MATCH = null;
oFF.VdComparisonOperator.NOT_BETWEEN = null;
oFF.VdComparisonOperator.NOT_EQUAL = null;
oFF.VdComparisonOperator.UNDEFINED = null;
oFF.VdComparisonOperator.s_lookup = null;
oFF.VdComparisonOperator.createComparisonOperator = function(originComparisonOperator, name, shortText, i18nShort, i18nLong, longTextSeparator)
{
	let newConstant = new oFF.VdComparisonOperator();
	newConstant._setupInternal(name);
	newConstant.m_originComparisonOperator = originComparisonOperator;
	newConstant.m_shortText = shortText;
	newConstant.m_i18nShortText = i18nShort;
	newConstant.m_i18nLongText = i18nLong;
	newConstant.m_longTextSeparator = longTextSeparator;
	oFF.VdComparisonOperator.s_lookup.put(name, newConstant);
	return newConstant;
};
oFF.VdComparisonOperator.lookup = function(name, isExcluding)
{
	let operator = oFF.VdComparisonOperator.lookupExt(name, isExcluding);
	if (operator === oFF.VdComparisonOperator.MATCH)
	{
		return null;
	}
	return operator;
};
oFF.VdComparisonOperator.lookupExt = function(name, isExcluding)
{
	if (isExcluding)
	{
		if (oFF.XString.isEqual(name, oFF.ComparisonOperator.IS_NULL.getName()))
		{
			return oFF.VdComparisonOperator.IS_NOT_NULL;
		}
		if (oFF.XString.isEqual(name, oFF.ComparisonOperator.EQUAL.getName()))
		{
			return oFF.VdComparisonOperator.NOT_EQUAL;
		}
		if (oFF.XString.isEqual(name, oFF.ComparisonOperator.BETWEEN.getName()))
		{
			return oFF.VdComparisonOperator.NOT_BETWEEN;
		}
		return null;
	}
	return oFF.VdComparisonOperator.s_lookup.getByKey(name);
};
oFF.VdComparisonOperator.staticSetup = function()
{
	oFF.VdComparisonOperator.s_lookup = oFF.XHashMapByString.create();
	oFF.VdComparisonOperator.UNDEFINED = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.UNDEFINED, oFF.ComparisonOperator.UNDEFINED.getName(), null, null, null, null);
	oFF.VdComparisonOperator.IS_NULL = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.IS_NULL, oFF.ComparisonOperator.IS_NULL.getName(), null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NULL, null, null);
	oFF.VdComparisonOperator.IS_NOT_NULL = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.IS_NULL, "IS_NOT_NULL", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_IS_NOT_NULL, null, null);
	oFF.VdComparisonOperator.EQUAL = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.EQUAL, oFF.ComparisonOperator.EQUAL.getName(), "=", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_EQUAL_TEXT, "      ");
	oFF.VdComparisonOperator.NOT_EQUAL = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.NOT_EQUAL, oFF.ComparisonOperator.NOT_EQUAL.getName(), "\u2260", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_EQUAL_TEXT, "      ");
	oFF.VdComparisonOperator.GREATER_THAN = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.GREATER_THAN, oFF.ComparisonOperator.GREATER_THAN.getName(), ">", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_TEXT, "      ");
	oFF.VdComparisonOperator.GREATER_EQUAL = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.GREATER_EQUAL, oFF.ComparisonOperator.GREATER_EQUAL.getName(), ">=", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_GREATER_EQUAL_TEXT, "    ");
	oFF.VdComparisonOperator.LESS_THAN = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.LESS_THAN, oFF.ComparisonOperator.LESS_THAN.getName(), "<", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_TEXT, "      ");
	oFF.VdComparisonOperator.LESS_EQUAL = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.LESS_EQUAL, oFF.ComparisonOperator.LESS_EQUAL.getName(), "<=", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_LESS_EQUAL_TEXT, "    ");
	oFF.VdComparisonOperator.BETWEEN = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.BETWEEN, oFF.ComparisonOperator.BETWEEN.getName(), "[ ]", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_BETWEEN_TEXT, "     ");
	oFF.VdComparisonOperator.NOT_BETWEEN = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.NOT_BETWEEN, oFF.ComparisonOperator.NOT_BETWEEN.getName(), "![ ]", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_NOT_BETWEEN_TEXT, "    ");
	oFF.VdComparisonOperator.MATCH = oFF.VdComparisonOperator.createComparisonOperator(oFF.ComparisonOperator.MATCH, oFF.ComparisonOperator.MATCH.getName(), "*", null, oFF.OuVariableDialogI18nLegacy.I18N_VD_COMPARISON_OPERATOR_MATCH_TEXT, "      ");
};
oFF.VdComparisonOperator.prototype.m_i18nLongText = null;
oFF.VdComparisonOperator.prototype.m_i18nShortText = null;
oFF.VdComparisonOperator.prototype.m_longTextSeparator = null;
oFF.VdComparisonOperator.prototype.m_originComparisonOperator = null;
oFF.VdComparisonOperator.prototype.m_shortText = null;
oFF.VdComparisonOperator.prototype.getLongText = function()
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	return oFF.notNull(this.m_i18nLongText) ? oFF.XStringUtils.concatenate3(this.getShortText(), this.m_longTextSeparator, i18n.getText(this.m_i18nLongText)) : this.getShortText();
};
oFF.VdComparisonOperator.prototype.getNumberOfParameters = function()
{
	return this.m_originComparisonOperator.getNumberOfParameters();
};
oFF.VdComparisonOperator.prototype.getOriginOperator = function()
{
	return this.m_originComparisonOperator;
};
oFF.VdComparisonOperator.prototype.getShortText = function()
{
	if (oFF.notNull(this.m_i18nShortText))
	{
		let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
		return i18n.getText(this.m_i18nShortText);
	}
	return this.m_shortText;
};
oFF.VdComparisonOperator.prototype.isNullOperator = function()
{
	return this === oFF.VdComparisonOperator.IS_NULL || this === oFF.VdComparisonOperator.IS_NOT_NULL;
};

oFF.VdValueFormat = function() {};
oFF.VdValueFormat.prototype = new oFF.XConstant();
oFF.VdValueFormat.prototype._ff_c = "VdValueFormat";

oFF.VdValueFormat.DATA_QUERY_MODEL = null;
oFF.VdValueFormat.SAC = null;
oFF.VdValueFormat.s_lookup = null;
oFF.VdValueFormat.create = function(name, parser)
{
	let obj = new oFF.VdValueFormat();
	obj._setupInternal(name);
	obj.m_parser = parser;
	oFF.VdValueFormat.s_lookup.put(name, obj);
	return obj;
};
oFF.VdValueFormat.lookup = function(name)
{
	return oFF.VdValueFormat.s_lookup.getByKey(name);
};
oFF.VdValueFormat.staticSetup = function()
{
	oFF.VdValueFormat.s_lookup = oFF.XHashMapByString.create();
	oFF.VdValueFormat.SAC = oFF.VdValueFormat.create("sac", oFF.VdOrcaValueParser.createParser());
	oFF.VdValueFormat.DATA_QUERY_MODEL = oFF.VdValueFormat.create("dataQueryModel", oFF.VdUqmValueParser.createParser());
};
oFF.VdValueFormat.prototype.m_parser = null;
oFF.VdValueFormat.prototype.getParser = function()
{
	return this.m_parser;
};

oFF.VdControllerState = function() {};
oFF.VdControllerState.prototype = new oFF.XConstant();
oFF.VdControllerState.prototype._ff_c = "VdControllerState";

oFF.VdControllerState.DIRTY = null;
oFF.VdControllerState.PENDING = null;
oFF.VdControllerState.PRISTINE = null;
oFF.VdControllerState.PROCESSED = null;
oFF.VdControllerState.create = function(name, priority)
{
	let state = oFF.XConstant.setupName(new oFF.VdControllerState(), name);
	state.m_priority = priority;
	return state;
};
oFF.VdControllerState.getHigherPriority = function(first, second)
{
	return first.getPriority() <= second.getPriority() ? first : second;
};
oFF.VdControllerState.isCompleted = function(state)
{
	return state === oFF.VdControllerState.PRISTINE || state === oFF.VdControllerState.PROCESSED;
};
oFF.VdControllerState.staticSetup = function()
{
	oFF.VdControllerState.PENDING = oFF.VdControllerState.create("pending", 1);
	oFF.VdControllerState.DIRTY = oFF.VdControllerState.create("dirty", 2);
	oFF.VdControllerState.PROCESSED = oFF.VdControllerState.create("processed", 3);
	oFF.VdControllerState.PRISTINE = oFF.VdControllerState.create("pristine", 4);
};
oFF.VdControllerState.prototype.m_priority = 0;
oFF.VdControllerState.prototype.getPriority = function()
{
	return this.m_priority;
};

oFF.VdVariantPopupBase = function() {};
oFF.VdVariantPopupBase.prototype = new oFF.UtFormPopup();
oFF.VdVariantPopupBase.prototype._ff_c = "VdVariantPopupBase";

oFF.VdVariantPopupBase.COMPONENT_NAME = "VariantPopup";
oFF.VdVariantPopupBase.INPUT_FLEX = "2 0 200px";
oFF.VdVariantPopupBase.PROPERY_NAME = "variantName";
oFF.VdVariantPopupBase.PROPERY_SCOPE = "variantScope";
oFF.VdVariantPopupBase.PROPERY_TEXT = "variantText";
oFF.VdVariantPopupBase.SCOPE_FLEX = "1 0 120px";
oFF.VdVariantPopupBase.TITLE_SECTION = "titleSection";
oFF.VdVariantPopupBase.prototype.m_i18n = null;
oFF.VdVariantPopupBase.prototype.m_invisible_nameLabel = null;
oFF.VdVariantPopupBase.prototype.m_invisible_scopeLabel = null;
oFF.VdVariantPopupBase.prototype.m_invisible_textLabel = null;
oFF.VdVariantPopupBase.prototype.m_manager = null;
oFF.VdVariantPopupBase.prototype.m_processor = null;
oFF.VdVariantPopupBase.prototype.s_sectionId = 0;
oFF.VdVariantPopupBase.prototype.addTitleSection = function()
{
	if (this.getGenesis().getUiManager().getDeviceInfo().isSmartphone())
	{
		return null;
	}
	let titleSection = this.addFormSection(oFF.VdVariantPopupBase.TITLE_SECTION, null, true);
	if (this.getGenesis().getUiManager().getDeviceInfo().isTablet())
	{
		titleSection.setFlex("0 0 auto");
	}
	let textLabel = titleSection.addFormLabel(null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME), null);
	textLabel.setRequired(true);
	textLabel.setFlex(oFF.VdVariantPopupBase.INPUT_FLEX);
	let scopeLabel = titleSection.addFormLabel(null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TYPE), null);
	scopeLabel.setFlex(oFF.VdVariantPopupBase.SCOPE_FLEX);
	let nameLabel = titleSection.addFormLabel(null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME), null);
	nameLabel.setRequired(true);
	nameLabel.setFlex(oFF.VdVariantPopupBase.INPUT_FLEX);
	this.m_invisible_textLabel = this.getDialog().getContent().addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisible_textLabel.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME));
	this.m_invisible_scopeLabel = this.getDialog().getContent().addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisible_scopeLabel.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TYPE));
	this.m_invisible_nameLabel = this.getDialog().getContent().addNewItemOfType(oFF.UiType.INVISIBLE_TEXT);
	this.m_invisible_nameLabel.setText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME));
	return titleSection;
};
oFF.VdVariantPopupBase.prototype.addVariantSectionBase = function(name, text, scope)
{
	let sectionName = oFF.XStringUtils.concatenate2("variantSection", oFF.XInteger.convertToString(this.s_sectionId));
	this.s_sectionId++;
	let section = this.addFormSection(sectionName, null, true);
	section.addCssClass("ffVariantSection");
	section.showSectionMarkerDuringValidation(false);
	let deviceInfo = this.getGenesis().getUiManager().getDeviceInfo();
	if (deviceInfo.isTablet() || deviceInfo.isSmartphone())
	{
		section.setFlex("0 0 auto");
	}
	let textItem = section.addInput(oFF.VdVariantPopupBase.PROPERY_TEXT, text, null);
	textItem.setPlaceholder(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_PLACEHOLDER));
	textItem.setRequired(true);
	textItem.setFlex(oFF.VdVariantPopupBase.INPUT_FLEX);
	textItem.setCustomRequiredText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_REQUIRED));
	textItem.addLabelledBy(this.m_invisible_textLabel);
	let scopeItem = section.addDropdown(oFF.VdVariantPopupBase.PROPERY_SCOPE, scope.getName(), null, this.getVariantScopes(), false);
	scopeItem.setFlex(oFF.VdVariantPopupBase.SCOPE_FLEX);
	scopeItem.setValueChangedConsumer((key, newValue) => {
		this.onScopeChange(section, scopeItem);
	});
	scopeItem.addLabelledBy(this.m_invisible_scopeLabel);
	let nameItem = section.addInput(oFF.VdVariantPopupBase.PROPERY_NAME, name, null);
	nameItem.setPlaceholder(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_PLACEHOLDER));
	nameItem.setRequired(true);
	nameItem.setFlex(oFF.VdVariantPopupBase.INPUT_FLEX);
	nameItem.setCustomRequiredText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_REQUIRED));
	nameItem.setEditable(false);
	nameItem.addLabelledBy(this.m_invisible_nameLabel);
	this.updateNameItem(section, name, scope);
	return section;
};
oFF.VdVariantPopupBase.prototype.configurePopup = function(dialog)
{
	oFF.UtFormPopup.prototype.configurePopup.call( this , dialog);
	dialog.addCssClass("ffVariantPopup");
	dialog.setWidth(oFF.UiCssLength.create("720px"));
	this.setSubmitButtonIcon(null);
	this.setSubmitButtonText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_SAVE));
	this.setCancelButtonIcon(null);
	this.setCancelButtonText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CANCEL));
};
oFF.VdVariantPopupBase.prototype.getVariantScopes = function()
{
	let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
	let tmpTypeMap = oFF.XHashMapByString.create();
	tmpTypeMap.put(oFF.Scope.USER.getName(), i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_PERSONAL));
	tmpTypeMap.put(oFF.Scope.GLOBAL.getName(), i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GLOBAL));
	return tmpTypeMap;
};
oFF.VdVariantPopupBase.prototype.onScopeChange = function(section, scopeItem)
{
	let scope = oFF.Scope.lookupByName(scopeItem.getValue().getStringRepresentation());
	let personal = scope === oFF.Scope.USER;
	this.updateNameItem(section, null, scope);
	let nameItem = section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME);
	nameItem.setEditable(!personal);
};
oFF.VdVariantPopupBase.prototype.releaseObject = function()
{
	this.m_manager = null;
	this.m_processor = null;
	this.m_i18n = null;
	this.m_invisible_textLabel = null;
	this.m_invisible_scopeLabel = null;
	this.m_invisible_nameLabel = null;
	oFF.UtFormPopup.prototype.releaseObject.call( this );
};
oFF.VdVariantPopupBase.prototype.setupPopupBase = function(manager, processor)
{
	this.m_manager = manager;
	this.m_processor = processor;
	this.m_i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
};
oFF.VdVariantPopupBase.prototype.showGeneralErrorMessage = function(overallResult, defaultMsg)
{
	let uiContext = this.m_manager.getUiContext();
	let msg = oFF.OlapUiMessageCenter.getInaErrorMessage(overallResult, defaultMsg);
	uiContext.getMessageCenter().postMessage(oFF.UiMessageType.ERROR, msg, oFF.VdVariantPopupBase.COMPONENT_NAME);
};
oFF.VdVariantPopupBase.prototype.updateNameItem = function(section, name, scope)
{
	let isUserScope = scope === oFF.Scope.USER;
	let displayName = isUserScope ? this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_GENERATED_ID) : name;
	let nameItem = section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME);
	nameItem.setValue(oFF.XStringValue.create(displayName));
	if (isUserScope)
	{
		nameItem.addCssClass("VdVariantNameInputAutoGenerated");
	}
	else
	{
		nameItem.removeCssClass("VdVariantNameInputAutoGenerated");
	}
	nameItem.setValid();
};
oFF.VdVariantPopupBase.prototype.updateSectionTexts = function(section, name, text, scope)
{
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT).setValue(oFF.XStringValue.create(text));
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_SCOPE).setValue(oFF.XStringValue.create(scope.getName()));
	this.updateNameItem(section, name, scope);
};
oFF.VdVariantPopupBase.prototype.validateDisplayName = function(formItem, ignoreVariant)
{
	let variants = this.m_processor.getVariableVariants();
	let userInput = formItem.getValue().getStringRepresentation();
	if (oFF.isNull(ignoreVariant) || !oFF.XString.isEqual(oFF.XString.toLowerCase(userInput), oFF.XString.toLowerCase(ignoreVariant.getText())))
	{
		let duplicate = oFF.XStream.of(variants).anyMatch((variant) => {
			return oFF.XString.isEqual(oFF.XString.toLowerCase(variant.getText()), oFF.XString.toLowerCase(userInput));
		});
		if (duplicate)
		{
			let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
			formItem.setInvalid(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_NAME_UNIQUE));
			return false;
		}
	}
	formItem.setValid();
	return true;
};
oFF.VdVariantPopupBase.prototype.validateTechnicalName = function(formItem, ignoreVariant)
{
	let variants = this.m_processor.getVariableVariants();
	let userInput = formItem.getValue().getStringRepresentation();
	if (oFF.isNull(ignoreVariant) || !oFF.XString.isEqual(oFF.XString.toLowerCase(userInput), oFF.XString.toLowerCase(ignoreVariant.getName())))
	{
		let duplicate = oFF.XStream.of(variants).anyMatch((variant) => {
			return oFF.XString.isEqual(oFF.XString.toLowerCase(variant.getName()), oFF.XString.toLowerCase(userInput));
		});
		if (duplicate)
		{
			let i18n = oFF.OuVariableDialogI18nLegacy.getProvider();
			formItem.setInvalid(i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_TECHNICAL_NAME_UNIQUE));
			return false;
		}
	}
	formItem.setValid();
	return true;
};

oFF.VdVhMobileListItem = function() {};
oFF.VdVhMobileListItem.prototype = new oFF.DfNameTextObject();
oFF.VdVhMobileListItem.prototype._ff_c = "VdVhMobileListItem";

oFF.VdVhMobileListItem.VIEW_NAME = "vhMobileList";
oFF.VdVhMobileListItem.create = function(name, text, customObject)
{
	if (oFF.XStringUtils.isNullOrEmpty(name))
	{
		throw oFF.XException.createRuntimeException("Name is required for a VdVhMobileListItem instance!");
	}
	let obj = new oFF.VdVhMobileListItem();
	obj.setupWithNameText(name, text);
	obj.setupInternal(customObject);
	return obj;
};
oFF.VdVhMobileListItem.prototype.m_customObject = null;
oFF.VdVhMobileListItem.prototype.getCustomObject = function()
{
	return this.m_customObject;
};
oFF.VdVhMobileListItem.prototype.releaseObject = function()
{
	this.m_customObject = null;
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.VdVhMobileListItem.prototype.setupInternal = function(customObject)
{
	this.m_customObject = customObject;
};

oFF.OuQueryControllerCriticalErrorType = function() {};
oFF.OuQueryControllerCriticalErrorType.prototype = new oFF.XConstant();
oFF.OuQueryControllerCriticalErrorType.prototype._ff_c = "OuQueryControllerCriticalErrorType";

oFF.OuQueryControllerCriticalErrorType.DATA_PROVIDER_RELEASED = null;
oFF.OuQueryControllerCriticalErrorType.MISSING_DATA_PROVIDER = null;
oFF.OuQueryControllerCriticalErrorType.MISSING_DATA_SOURCE = null;
oFF.OuQueryControllerCriticalErrorType.MISSING_QUERY_MANAGER = null;
oFF.OuQueryControllerCriticalErrorType.QUERY_MANAGER_CREATION_FAILED = null;
oFF.OuQueryControllerCriticalErrorType.QUERY_MANAGER_RELEASED = null;
oFF.OuQueryControllerCriticalErrorType.staticSetup = function()
{
	oFF.OuQueryControllerCriticalErrorType.MISSING_DATA_SOURCE = oFF.XConstant.setupName(new oFF.OuQueryControllerCriticalErrorType(), "MissingDataSource");
	oFF.OuQueryControllerCriticalErrorType.QUERY_MANAGER_CREATION_FAILED = oFF.XConstant.setupName(new oFF.OuQueryControllerCriticalErrorType(), "QueryManagerCreationFailed");
	oFF.OuQueryControllerCriticalErrorType.MISSING_QUERY_MANAGER = oFF.XConstant.setupName(new oFF.OuQueryControllerCriticalErrorType(), "MissingQueryManager");
	oFF.OuQueryControllerCriticalErrorType.QUERY_MANAGER_RELEASED = oFF.XConstant.setupName(new oFF.OuQueryControllerCriticalErrorType(), "QueryManagerReleased");
	oFF.OuQueryControllerCriticalErrorType.MISSING_DATA_PROVIDER = oFF.XConstant.setupName(new oFF.OuQueryControllerCriticalErrorType(), "MissingDataProvider");
	oFF.OuQueryControllerCriticalErrorType.DATA_PROVIDER_RELEASED = oFF.XConstant.setupName(new oFF.OuQueryControllerCriticalErrorType(), "DataProviderReleased");
};

oFF.OuQueryControllerMessage = function() {};
oFF.OuQueryControllerMessage.prototype = new oFF.XConstant();
oFF.OuQueryControllerMessage.prototype._ff_c = "OuQueryControllerMessage";

oFF.OuQueryControllerMessage.ERROR = null;
oFF.OuQueryControllerMessage.FILTER_NOT_FULLY_SUPPORTED = null;
oFF.OuQueryControllerMessage.INVALID_VARIABLE_VALUES = null;
oFF.OuQueryControllerMessage.QUERY_DOES_NOT_CONTAIN_MEASURES = null;
oFF.OuQueryControllerMessage.WARNING = null;
oFF.OuQueryControllerMessage.createWithNameAndType = function(name, messageType)
{
	let tmpConstant = oFF.XConstant.setupName(new oFF.OuQueryControllerMessage(), name);
	tmpConstant._setMessageType(messageType);
	return tmpConstant;
};
oFF.OuQueryControllerMessage.staticSetup = function()
{
	oFF.OuQueryControllerMessage.WARNING = oFF.OuQueryControllerMessage.createWithNameAndType("Warning", oFF.UiMessageType.WARNING);
	oFF.OuQueryControllerMessage.ERROR = oFF.OuQueryControllerMessage.createWithNameAndType("Error", oFF.UiMessageType.ERROR);
	oFF.OuQueryControllerMessage.QUERY_DOES_NOT_CONTAIN_MEASURES = oFF.OuQueryControllerMessage.createWithNameAndType("QueryDoesNotContainMeasures", oFF.UiMessageType.WARNING);
	oFF.OuQueryControllerMessage.FILTER_NOT_FULLY_SUPPORTED = oFF.OuQueryControllerMessage.createWithNameAndType("FilterNotFullySupported", oFF.UiMessageType.WARNING);
	oFF.OuQueryControllerMessage.INVALID_VARIABLE_VALUES = oFF.OuQueryControllerMessage.createWithNameAndType("InvalidVariableValues", oFF.UiMessageType.ERROR);
};
oFF.OuQueryControllerMessage.prototype.m_messageType = null;
oFF.OuQueryControllerMessage.prototype._setMessageType = function(messageType)
{
	this.m_messageType = messageType;
	if (oFF.isNull(this.m_messageType))
	{
		this.m_messageType = oFF.UiMessageType.INFORMATION;
	}
};
oFF.OuQueryControllerMessage.prototype.getMessageType = function()
{
	return this.m_messageType;
};

oFF.OuQueryControllerSetupStep = function() {};
oFF.OuQueryControllerSetupStep.prototype = new oFF.XConstant();
oFF.OuQueryControllerSetupStep.prototype._ff_c = "OuQueryControllerSetupStep";

oFF.OuQueryControllerSetupStep.BEFORE_QUERY_MODEL_DESERIALIZATION = null;
oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_DIALOG_PRESENTED = null;
oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_SUBMIT_DONE = null;
oFF.OuQueryControllerSetupStep.staticSetup = function()
{
	oFF.OuQueryControllerSetupStep.BEFORE_QUERY_MODEL_DESERIALIZATION = oFF.XConstant.setupName(new oFF.OuQueryControllerSetupStep(), "BeforeQueryModelDeserialization");
	oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_DIALOG_PRESENTED = oFF.XConstant.setupName(new oFF.OuQueryControllerSetupStep(), "InitialVariableDialogPresented");
	oFF.OuQueryControllerSetupStep.INITIAL_VARIABLE_SUBMIT_DONE = oFF.XConstant.setupName(new oFF.OuQueryControllerSetupStep(), "VariablesSubmitted");
};

oFF.OuQueryControllerStatus = function() {};
oFF.OuQueryControllerStatus.prototype = new oFF.XConstant();
oFF.OuQueryControllerStatus.prototype._ff_c = "OuQueryControllerStatus";

oFF.OuQueryControllerStatus.INITIAL = null;
oFF.OuQueryControllerStatus.INIT_ERROR = null;
oFF.OuQueryControllerStatus.IN_SYNC = null;
oFF.OuQueryControllerStatus.NOT_IN_SYNC = null;
oFF.OuQueryControllerStatus.SETUP_ERROR = null;
oFF.OuQueryControllerStatus.SETUP_IN_PROGRESS = null;
oFF.OuQueryControllerStatus.STATE_ERROR = null;
oFF.OuQueryControllerStatus.SYNC_ERROR = null;
oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS = null;
oFF.OuQueryControllerStatus.staticSetup = function()
{
	oFF.OuQueryControllerStatus.INITIAL = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "Initial");
	oFF.OuQueryControllerStatus.INIT_ERROR = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "InitError");
	oFF.OuQueryControllerStatus.SETUP_IN_PROGRESS = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "SetupInProgress");
	oFF.OuQueryControllerStatus.SETUP_ERROR = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "SetupError");
	oFF.OuQueryControllerStatus.SYNC_IN_PROGRESS = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "SyncInProgress");
	oFF.OuQueryControllerStatus.NOT_IN_SYNC = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "NotInSync");
	oFF.OuQueryControllerStatus.IN_SYNC = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "InSync");
	oFF.OuQueryControllerStatus.SYNC_ERROR = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "SyncError");
	oFF.OuQueryControllerStatus.STATE_ERROR = oFF.XConstant.setupName(new oFF.OuQueryControllerStatus(), "StateError");
};

oFF.OuInventoryView = function() {};
oFF.OuInventoryView.prototype = new oFF.DfUiContentView();
oFF.OuInventoryView.prototype._ff_c = "OuInventoryView";

oFF.OuInventoryView.DEFAULT_LOCAL_STORAGE_PREFIX = "OuInventoryView";
oFF.OuInventoryView.LOCAL_STORAGE_DEFAULT_DIMENSION_GROUP_PRESENTATION = "DimensionGroupPresentationDefault";
oFF.OuInventoryView.LOCAL_STORAGE_DIMENSION_GROUP_PRESENTATION = "DimensionGroupPresentation";
oFF.OuInventoryView.UI_CONTEXT = "Gds.Qb.Builder.ContextMenu";
oFF.OuInventoryView.applyIfNotReleased = function(object, value, consumer)
{
	if (oFF.notNull(object) && !object.isReleased())
	{
		consumer(object, value);
	}
};
oFF.OuInventoryView.compareLabels = function(first, second, sortDirection)
{
	let firstText = first.getText();
	let secondText = second.getText();
	let direction = sortDirection === oFF.XSortDirection.DESCENDING ? -1 : 1;
	return oFF.XIntegerValue.create(oFF.XString.compare(firstText, secondText) * direction);
};
oFF.OuInventoryView.createView = function(process, genesis, configuration)
{
	let obj = new oFF.OuInventoryView();
	obj.m_process = process;
	obj.m_config = configuration;
	obj.initView(genesis);
	return obj;
};
oFF.OuInventoryView.getLocalStorageDefaultGroupPresentationKey = function()
{
	return oFF.XStringUtils.concatenate3(oFF.OuInventoryView.DEFAULT_LOCAL_STORAGE_PREFIX, "_", oFF.OuInventoryView.LOCAL_STORAGE_DEFAULT_DIMENSION_GROUP_PRESENTATION);
};
oFF.OuInventoryView.getLocalStorageGroupPresentationKey = function()
{
	return oFF.XStringUtils.concatenate3(oFF.OuInventoryView.DEFAULT_LOCAL_STORAGE_PREFIX, "_", oFF.OuInventoryView.LOCAL_STORAGE_DIMENSION_GROUP_PRESENTATION);
};
oFF.OuInventoryView.getLocalizationProvider = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName(oFF.OuInventoryViewI18n.PROVIDER_NAME);
};
oFF.OuInventoryView.isEditableFormula = function(member)
{
	if (!member.getMemberType().isTypeOf(oFF.MemberType.FORMULA))
	{
		return false;
	}
	let formula = member.getDimensionMember();
	return formula.isEditable() && formula.getFormulaText().isPresent() && oFF.XStringUtils.isNotNullAndNotEmpty(formula.getFormulaText().get());
};
oFF.OuInventoryView.isPieOrDonutActive = function(dim)
{
	let pieOrDonutOnMeasure = false;
	let queryModel = dim.getQueryModel();
	let currentActiveVisualizationDefinition = queryModel.getVisualizationManager().getCurrentActiveVisualizationDefinition();
	if (oFF.notNull(currentActiveVisualizationDefinition) && currentActiveVisualizationDefinition.getProtocolBindingType() !== null && currentActiveVisualizationDefinition.getProtocolBindingType().isTypeOf(oFF.ProtocolBindingType.ABSTRACT_CHART_PROTOCOL) && (!queryModel.isUniversalAccountModel() || dim.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT)))
	{
		pieOrDonutOnMeasure = currentActiveVisualizationDefinition.isSingleMeasureChartType() && (dim.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE || dim.getDimensionType() === oFF.DimensionType.ACCOUNT);
	}
	return pieOrDonutOnMeasure;
};
oFF.OuInventoryView.moveDimensionToAxis = function(dim, selectedAxis)
{
	if (dim.getAxisType() !== selectedAxis)
	{
		let perfTool = oFF.UiPerformanceCenter.getCenter();
		perfTool.startMeasure("[Dragonfly][Select Dimension]");
		let cc = dim.getConvenienceCommands();
		let axisChanged = dim.getAxisType() !== selectedAxis;
		cc.moveDimensionToAxis(dim.getName(), selectedAxis);
		if (axisChanged)
		{
			dim.getConvenienceCommands().moveSortToPosition(oFF.SortType.ABSTRACT_DIMENSION_SORT, dim.getName(), 0);
		}
	}
};
oFF.OuInventoryView.openFilterDialogWithCallback = function(dim, onSubmit, onCancel)
{
	let title = oFF.XLocalizationCenter.getCenter().getTextWithPlaceholder(oFF.OuInventoryViewI18n.NAV_FILTER_DIALOG_TITLE, dim.getText());
	oFF.QueryDesignerUtils.openSingleMemberFilterDialog(dim.getApplication(), title, dim, oFF.FilterDialogLambdaCloseListener.create(onSubmit, onCancel));
};
oFF.OuInventoryView.setStructurePanelName = function(dim, panel)
{
	if (dim.isMeasureStructure())
	{
		panel.addCssClass("ffGdsQbNavigationPanelMeasure");
	}
	else if (dim.isStructure())
	{
		panel.addCssClass("ffGdsQbNavigationPanelSecondStructure");
	}
	else if (dim.getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		panel.addCssClass("ffGdsQbNavigationPanelAccount");
	}
};
oFF.OuInventoryView.updateIcons = function(dim, icons)
{
	let rowIcon = icons.getRowIcon();
	rowIcon.setPressed(dim.getAxisType() === oFF.AxisType.ROWS);
	let colIcon = icons.getColumnIcon();
	colIcon.setPressed(dim.getAxisType() === oFF.AxisType.COLUMNS);
};
oFF.OuInventoryView.updateMasterCheckbox = function(dimView)
{
	let dim = dimView.getDimension();
	if (dimView.getSelectAll() === null)
	{
		return;
	}
	let oneChecked = false;
	let allChecked = true;
	let commands = dim.getConvenienceCommands();
	let posNegPair = commands.getMemberVisibilityByFilter(dim);
	let memberComponents = dimView.getAllChildren();
	for (let i = 0; i < memberComponents.size(); i++)
	{
		let memberComponent = memberComponents.get(i);
		if (!memberComponent.getRoot().isVisible())
		{
			continue;
		}
		let member = memberComponent.getNode().getDimensionMember();
		let visible = commands.isMemberVisibleByFilter(member, posNegPair.getFirstObject(), posNegPair.getSecondObject());
		oneChecked = oneChecked || visible;
		allChecked = allChecked && visible;
	}
	let allCb = dimView.getSelectAll().getCheckbox();
	allCb.setChecked(oneChecked);
	allCb.setPartiallyChecked(!allChecked);
	allCb.setEnabled(!oFF.OuInventoryView.isPieOrDonutActive(dim));
};
oFF.OuInventoryView.prototype.m_config = null;
oFF.OuInventoryView.prototype.m_dataProvider = null;
oFF.OuInventoryView.prototype.m_dimViews = null;
oFF.OuInventoryView.prototype.m_dimensionList = null;
oFF.OuInventoryView.prototype.m_dimensionSortDirection = null;
oFF.OuInventoryView.prototype.m_dropReceiver = null;
oFF.OuInventoryView.prototype.m_expansionReceiver = null;
oFF.OuInventoryView.prototype.m_groupPresentation = null;
oFF.OuInventoryView.prototype.m_isQueryManagerSet = false;
oFF.OuInventoryView.prototype.m_lifecycleConsumerId = null;
oFF.OuInventoryView.prototype.m_main = null;
oFF.OuInventoryView.prototype.m_memberMap = null;
oFF.OuInventoryView.prototype.m_menuButton = null;
oFF.OuInventoryView.prototype.m_modelChangeListenerId = null;
oFF.OuInventoryView.prototype.m_modelStateListenerId = null;
oFF.OuInventoryView.prototype.m_onChange = null;
oFF.OuInventoryView.prototype.m_panelExpansion = null;
oFF.OuInventoryView.prototype.m_panelExpansionPreSearch = null;
oFF.OuInventoryView.prototype.m_presentation = null;
oFF.OuInventoryView.prototype.m_process = null;
oFF.OuInventoryView.prototype.m_queryManager = null;
oFF.OuInventoryView.prototype.m_renderedWithTable = false;
oFF.OuInventoryView.prototype.m_root = null;
oFF.OuInventoryView.prototype.m_searchField = null;
oFF.OuInventoryView.prototype.m_searchInProgress = false;
oFF.OuInventoryView.prototype.m_searchWrapper = null;
oFF.OuInventoryView.prototype.m_structureSortDirections = null;
oFF.OuInventoryView.prototype.m_structureViews = null;
oFF.OuInventoryView.prototype._onDimListItemFocusIn = function(dimView, iconContainer)
{
	return (event) => {
		if (this.m_config.isShowDimensionMoreButton() && this.m_config.getMenuProvider() !== null)
		{
			let dim = dimView.getDimension();
			if (dimView.getMoreBtn() === oFF.UiContextDummy.getSingleton())
			{
				let menuButton = iconContainer.insertNewItemOfType(oFF.UiType.BUTTON, 0);
				menuButton.addCssClass("ffGdsQbNavigationPanelDimensionMenuButton");
				menuButton.setIcon("overflow");
				menuButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
				menuButton.setTooltip(oFF.OuInventoryView.getLocalizationProvider().getText(oFF.OlapUiCommonI18n.COMMON_MORE));
				menuButton.registerOnPress(oFF.UiLambdaPressListener.create((pressEvt) => {
					this.m_config.getMenuProvider().showDimMenuWithAction(oFF.OuInventoryView.UI_CONTEXT, pressEvt, dim, (ny1) => {
						oFF.OuInventoryView.applyIfNotReleased(menuButton, "ffGdsQbNavigationPanelDimensionMenuButtonForceVisible", (a, b) => {
							a.addCssClass(b);
						});
					}, (ny2) => {
						oFF.OuInventoryView.applyIfNotReleased(menuButton, "ffGdsQbNavigationPanelDimensionMenuButtonForceVisible", (c, d) => {
							c.removeCssClass(d);
						});
					});
				}));
				dimView.setMoreBtn(menuButton);
			}
			this.checkMoreButton(dim, dimView.getMoreBtn());
		}
	};
};
oFF.OuInventoryView.prototype.addAttributesToDimItem = function(dimView, attributeViews)
{
	let attributeList = this.getGenesis().newControl(oFF.UiType.LIST);
	attributeList.addCssClass("ffGdsQbNavigationPanelDimensionAttributesList");
	attributeList.setShowNoData(false);
	attributeList.addAllItems(oFF.XCollectionUtils.map(attributeViews, (view) => {
		return view.getRoot();
	}));
	dimView.setChildrenList(attributeList);
	dimView.setChildrenViews(attributeViews);
	this.configureDimPanelForChildren(dimView);
};
oFF.OuInventoryView.prototype.addAxisButtons = function(iconContainer, dim, dimView)
{
	if (!this.m_renderedWithTable)
	{
		let dummy = oFF.UiContextDummy.getSingleton();
		dimView.setRowIcon(dummy);
		dimView.setColIcon(dummy);
	}
	else
	{
		let i18n = oFF.OuInventoryView.getLocalizationProvider();
		let rowButton = iconContainer.addNewItemOfType(oFF.UiType.TOGGLE_BUTTON);
		rowButton.addCssClass("ffGdsQbNavigationPanelRowButton");
		rowButton.setIcon("table-row");
		rowButton.setTooltip(i18n.getText(oFF.OlapUiCommonI18n.AXIS_ROWS));
		rowButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
		rowButton.setEnabled(dim.supportsAxis(oFF.AxisType.ROWS));
		dimView.setRowIcon(rowButton);
		let colButton = iconContainer.addNewItemOfType(oFF.UiType.TOGGLE_BUTTON);
		colButton.addCssClass("ffGdsQbNavigationPanelColumnButton");
		colButton.setIcon("table-column");
		colButton.setTooltip(i18n.getText(oFF.OlapUiCommonI18n.AXIS_COLUMNS));
		colButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
		colButton.setEnabled(dim.supportsAxis(oFF.AxisType.COLUMNS));
		dimView.setColIcon(colButton);
		rowButton.registerOnPress(oFF.UiLambdaPressListener.create((evt1) => {
			this.toggleDimensionAxis(dim, oFF.AxisType.ROWS);
			rowButton.setPressed(dim.getAxisType() === oFF.AxisType.ROWS);
		}));
		colButton.registerOnPress(oFF.UiLambdaPressListener.create((evt2) => {
			this.toggleDimensionAxis(dim, oFF.AxisType.COLUMNS);
			colButton.setPressed(dim.getAxisType() === oFF.AxisType.COLUMNS);
		}));
	}
};
oFF.OuInventoryView.prototype.addChildrenToDimView = function(dimView)
{
	let magicPanel = dimView.getPanel();
	let children = dimView.getChildrenViews();
	let groupedDims = dimView.getDimensionViews();
	let childrenList = dimView.getChildrenList();
	let dimensionList = dimView.getDimensionList();
	if (oFF.XCollectionUtils.hasElements(children) && oFF.XCollectionUtils.hasElements(groupedDims))
	{
		let listFlex = this.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
		listFlex.setDirection(oFF.UiFlexDirection.COLUMN);
		listFlex.useMaxSpace();
		listFlex.addItem(childrenList);
		listFlex.addItem(dimensionList);
		magicPanel.setPanelContent(listFlex);
	}
	else if (oFF.XCollectionUtils.hasElements(children))
	{
		magicPanel.setPanelContent(childrenList);
	}
	else
	{
		magicPanel.setPanelContent(dimensionList);
	}
	let itemCount = children.size() + groupedDims.size();
	magicPanel.setContentHeightInRem(itemCount * 2);
};
oFF.OuInventoryView.prototype.addDimensionsToDimItem = function(dimView, groupedDimViews)
{
	let dimList = this.getGenesis().newControl(oFF.UiType.LIST);
	dimList.addCssClass("ffGdsQbNavigationPanelDimensionGroupList");
	dimList.setShowNoData(false);
	dimList.addAllItems(oFF.XCollectionUtils.map(groupedDimViews, (view) => {
		let itemRoot = view.getListItemRoot();
		itemRoot.addCssClass("ffGdsQbNavigationPanelGroupedDimension");
		return itemRoot;
	}));
	dimView.setDimensionList(dimList);
	dimView.setDimensionViews(groupedDimViews);
	this.configureDimPanelForChildren(dimView);
};
oFF.OuInventoryView.prototype.addPanel = function(panel)
{
	if (oFF.notNull(panel))
	{
		this.m_main.addItem(panel);
	}
};
oFF.OuInventoryView.prototype.buildAttributeView = function(attribute)
{
	let attributeView = this.buildCheckboxItem("ffGdsQbNavigationPanelAttribute", true, (checkbox) => {
		this.handleAttributeChange(checkbox, attribute);
	});
	attributeView.setAttribute(attribute);
	let item = attributeView.getRoot();
	item.setDraggable(true);
	item.setTag(this.m_config.getDragElementTag());
	item.setCustomObject(attributeView);
	item.registerOnDragStart(oFF.UiLambdaDragStartListener.create((dragEvt) => {
		this.notifyDragStartModel(attribute);
	}));
	item.registerOnDragEnd(oFF.UiLambdaDragEndListener.create((dragEndEvt) => {
		this.notifyDragEnd();
	}));
	if (this.m_config.getMenuProvider() !== null && this.m_config.isRightClickContextMenuForAttributeEnabled())
	{
		item.registerOnContextMenu(oFF.UiLambdaContextMenuListener.create((evt) => {
			this.m_config.getMenuProvider().showAttributeMenu(oFF.OuInventoryView.UI_CONTEXT, evt, attribute);
		}));
	}
	let attributeLabel = attributeView.getLabel();
	attributeLabel.addCssClass("ffGdsQbNavigationPanelAttributeLabel");
	attributeLabel.setFontStyle(oFF.UiFontStyle.ITALIC);
	return attributeView;
};
oFF.OuInventoryView.prototype.buildAttributeViews = function(attributes)
{
	let attributeViews = oFF.XList.create();
	if (!oFF.XCollectionUtils.hasElements(attributes))
	{
		return attributeViews;
	}
	for (let i = 0; i < attributes.size(); i++)
	{
		let attribute = attributes.get(i);
		let attributeView = this.buildAttributeView(attribute);
		attributeViews.add(attributeView);
	}
	return attributeViews;
};
oFF.OuInventoryView.prototype.buildCalculationButton = function(dimension)
{
	if (this.isCalculationsEnabled(dimension))
	{
		let root = this.getGenesis().newControl(oFF.UiType.CUSTOM_LIST_ITEM);
		root.addCssClass("ffGdsQbNavigationPanelCalculationsSection");
		let flex = root.setNewContent(oFF.UiType.FLEX_LAYOUT);
		flex.setMinHeight(oFF.UiCssLength.create("2rem"));
		flex.setDirection(oFF.UiFlexDirection.ROW);
		flex.setAlignItems(oFF.UiFlexAlignItems.CENTER);
		let icon = flex.addNewItemOfType(oFF.UiType.ICON);
		icon.addCssClass("ffGdsQbNavigationPanelCalculationsIcon");
		icon.setPadding(oFF.UiCssBoxEdges.create("0.5rem"));
		icon.setIcon("fpa/new-calculation");
		icon.setColor(oFF.UiColor.create("#0070b1"));
		icon.setEnabled(false);
		let labelText = oFF.OuInventoryView.getLocalizationProvider().getText(oFF.OuInventoryViewI18n.NAV_CREATE_CALCULATION);
		let link = flex.addNewItemOfType(oFF.UiType.LINK);
		link.addCssClass("ffGdsQbNavigationPanelCalculationsLink");
		link.setText(labelText);
		link.setTooltip(labelText);
		link.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
			this.openCalculationDialog(dimension, oFF.XOptional.empty(), link);
		}));
		let calculationLink = oFF.OuInventoryCalculationLink.create(root);
		let structureView = this.m_structureViews.getByKey(dimension.getName());
		structureView.getChildrenList().insertItem(root, 0);
		structureView.setCalculationsLink(calculationLink);
	}
};
oFF.OuInventoryView.prototype.buildCalculationControls = function(memberView, member)
{
	if (!this.m_config.isCalculationsEnabled() || !oFF.OuInventoryView.isEditableFormula(member))
	{
		return;
	}
	let structureMember = member;
	let i18n = oFF.OuInventoryView.getLocalizationProvider();
	let headerLayout = memberView.getHeaderLayout();
	let buttonLayout = this.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
	buttonLayout.setFlex("1 1 auto");
	buttonLayout.setDirection(oFF.UiFlexDirection.ROW);
	buttonLayout.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	buttonLayout.setJustifyContent(oFF.UiFlexJustifyContent.END);
	buttonLayout.addNewItemOfType(oFF.UiType.SPACER);
	let deleteButton = buttonLayout.addNewItemOfType(oFF.UiType.BUTTON);
	deleteButton.addCssClass("ffGdsQbNavigationPanelFormulaDeleteButton");
	deleteButton.setIcon("delete");
	deleteButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	deleteButton.setTooltip(i18n.getText(oFF.OuInventoryViewI18n.NAV_DELETE_CALCULATION));
	deleteButton.registerOnPress(oFF.UiLambdaPressListener.create((evt1) => {
		this.handleCalculationDeletion(structureMember);
	}));
	let popoverIcon = oFF.OuDesignerFormulaPopoverIcon.create(this.getGenesis(), structureMember, oFF.MessageManagerSimple.createMessageManager());
	popoverIcon.getView().setVisible(false);
	buttonLayout.addItem(popoverIcon.getView());
	memberView.setPopoverIcon(popoverIcon);
	let formulaButton = buttonLayout.addNewItemOfType(oFF.UiType.BUTTON);
	formulaButton.addCssClass("ffGdsQbNavigationPanelFormulaEditButton");
	formulaButton.setIcon("fpa/formula");
	formulaButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	formulaButton.setTooltip(i18n.getText(oFF.OuInventoryViewI18n.NAV_EDIT_CALCULATION));
	formulaButton.registerOnPress(oFF.UiLambdaPressListener.create((evt2) => {
		this.openCalculationDialog(structureMember.getDimension(), oFF.XOptional.of(structureMember.getName()), formulaButton);
	}));
	headerLayout.addItem(buttonLayout);
	let dimName = member.getDimension().getName();
	this.m_structureViews.getByKey(dimName).addCalculation(memberView);
};
oFF.OuInventoryView.prototype.buildCheckboxItem = function(cssClass, asLeaf, checkboxAction)
{
	let listItem = this.getGenesis().newControl(oFF.UiType.CUSTOM_LIST_ITEM);
	listItem.setListItemType(oFF.UiListItemType.INACTIVE);
	listItem.addCssClass("ffGdsQbNavigationPanelCheckboxItem");
	listItem.addCssClass(cssClass);
	let checkBox = this.getGenesis().newControl(oFF.UiType.CHECKBOX);
	let label = this.getGenesis().newControl(oFF.UiType.LABEL);
	label.addCssClass(oFF.OuDimensionPanelList.LABEL_CSS_CLASS_NAME);
	label.setMargin(oFF.UiCssBoxEdges.create("0"));
	label.setLabelFor(checkBox);
	let itemView = oFF.OuDesignerListItem.createForNavPanel(listItem, label, checkBox);
	checkBox.registerOnChange(oFF.UiLambdaChangeListener.create((evt1) => {
		checkboxAction(itemView);
	}));
	listItem.registerOnKeyDown(oFF.UiLambdaKeyDownListener.create((evt2) => {
		if (oFF.XString.isEqual(evt2.getParameters().getByKey(oFF.UiEventParams.PARAM_CODE), "Space"))
		{
			checkBox.setChecked(!checkBox.isChecked());
			checkboxAction(itemView);
		}
	}));
	if (asLeaf)
	{
		let header = this.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
		header.addCssClass("ffGdsQbNavigationPanelCheckboxItemHeader");
		header.setOverflow(oFF.UiOverflow.HIDDEN);
		header.setDirection(oFF.UiFlexDirection.ROW);
		header.setAlignItems(oFF.UiFlexAlignItems.CENTER);
		header.addItem(checkBox);
		header.addItem(label);
		listItem.setContent(header);
		itemView.setHeaderLayout(header);
		itemView.setPanel(oFF.UiContextDummy.getSingleton());
		itemView.setChildrenList(oFF.UiContextDummy.getSingleton());
	}
	else
	{
		let panel = listItem.setNewContent(oFF.UiType.PANEL);
		panel.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
		panel.addCssClass("ffGdsQbNavigationPanelMemberPanel");
		panel.addCssClass("ffGdsQbFoldable");
		panel.setMinHeight(oFF.UiCssLength.create("0"));
		panel.setBackgroundDesign(oFF.UiBackgroundDesign.TRANSPARENT);
		panel.setExpandable(true);
		let toolbar = panel.setNewHeaderToolbar();
		toolbar.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
		toolbar.addCssClass("ffGdsQbNavigationPanelCheckboxItemHeader");
		toolbar.addItem(checkBox);
		toolbar.addItem(label);
		let list = panel.setNewContent(oFF.UiType.LIST);
		list.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
		list.addCssClass("ffGdsQbNavigationPanelMemberChildrenList");
		list.setShowNoData(false);
		itemView.setHeaderLayout(toolbar);
		itemView.setPanel(panel);
		itemView.setChildrenList(list);
	}
	return itemView;
};
oFF.OuInventoryView.prototype.buildDimItem = function(dim)
{
	let dimView = this.buildDimItemBase();
	dimView.setDimension(dim);
	dimView.setCheckbox(oFF.UiContextDummy.getSingleton());
	if (!this.m_renderedWithTable && this.isChartDefinitionActiveOnQueryManager() && this.m_config.isChartingPhase2Enabled())
	{
		let checkBox = this.getGenesis().newControl(oFF.UiType.CHECKBOX);
		dimView.getHeader().insertItem(checkBox, 0);
		dimView.setCheckbox(checkBox);
		let chartDefinition = this.getQueryManager().getQueryModel().getVisualizationManager().getCurrentActiveVisualizationDefinition();
		let chartType = chartDefinition.getChartSetting().getChartType();
		let feed = chartType.getFeedForQueryModelAxis(dim.getAxisType());
		checkBox.setChecked(oFF.notNull(feed));
		checkBox.registerOnChange(oFF.UiLambdaChangeListener.create((evt1) => {
			let checkbox = evt1.getControl();
			let axis = !checkbox.isChecked() ? dim.getAxisType() : oFF.AxisType.ROWS;
			this.toggleDimensionAxis(dim, axis);
		}));
	}
	let listItem = dimView.getListItemRoot();
	listItem.setDraggable(true);
	listItem.setTag(this.m_config.getDragElementTag());
	listItem.setCustomObject(dimView);
	listItem.registerOnDragStart(oFF.UiLambdaDragStartListener.create((dragStartEvt) => {
		this.notifyDragStartModel(dim);
	}));
	listItem.registerOnDragEnd(oFF.UiLambdaDragEndListener.create((dragEndEvt) => {
		this.notifyDragEnd();
	}));
	if (this.m_config.getMenuProvider() !== null && (this.m_config.isRightClickContextMenuForDimensionEnabled() || this.m_config.isShowDimensionMoreButton()))
	{
		listItem.registerOnContextMenu(oFF.UiLambdaContextMenuListener.create((evt) => {
			this.m_config.getMenuProvider().showDimMenu(oFF.OuInventoryView.UI_CONTEXT, evt, dim);
		}));
	}
	let iconContainer = dimView.getIconContainer().addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	iconContainer.addCssClass("ffGdsQbNavigationPanelDimensionButtons");
	iconContainer.setDirection(oFF.UiFlexDirection.ROW);
	iconContainer.setFlex("0 0 auto");
	iconContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	let listItemContext = listItem;
	listItemContext.registerOnHover(oFF.UiLambdaHoverListener.create(this._onDimListItemFocusIn(dimView, iconContainer)));
	listItemContext.registerOnEditingBegin(oFF.UiLambdaEditingBeginListener.create(this._onDimListItemFocusIn(dimView, iconContainer)));
	this.addAxisButtons(iconContainer, dim, dimView);
	let attributes = this.getFilteredAttributes(dim);
	let attributeViews = this.buildAttributeViews(attributes);
	if (oFF.XCollectionUtils.hasElements(attributeViews))
	{
		this.addAttributesToDimItem(dimView, attributeViews);
	}
	return dimView;
};
oFF.OuInventoryView.prototype.buildDimItemBase = function()
{
	let dimView = oFF.OuDesignerDimension.createEmpty();
	let header = this.getGenesis().newControl(oFF.UiType.TOOLBAR);
	header.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	header.addCssClass("ffGdsQbNavigationPanelDimensionHeader");
	header.setBorderWidth(oFF.UiCssBoxEdges.create("0"));
	header.setToolbarDesign(oFF.UiToolbarDesign.TRANSPARENT);
	dimView.setHeader(header);
	let label = header.addNewItemOfType(oFF.UiType.LABEL);
	label.addCssClass(oFF.OuDimensionPanelList.LABEL_CSS_CLASS_NAME);
	label.setMargin(oFF.UiCssBoxEdges.create("0"));
	dimView.setLabel(label);
	header.addNewItemOfType(oFF.UiType.SPACER);
	let listItem = this.getGenesis().newControl(oFF.UiType.CUSTOM_LIST_ITEM);
	listItem.addCssClass("ffGdsQbNavigationPanelDimension");
	listItem.addCssClass("ffGdsQbNavigationPanelDimensionNoChildren");
	listItem.addCssClass("sapMTB-Transparent-CTX");
	listItem.setCustomObject(dimView);
	listItem.setContent(header);
	dimView.setListItemRoot(listItem);
	dimView.setChildrenList(oFF.UiContextDummy.getSingleton());
	dimView.setChildrenViews(oFF.XList.create());
	dimView.setDimensionList(oFF.UiContextDummy.getSingleton());
	dimView.setDimensionViews(oFF.XList.create());
	return dimView;
};
oFF.OuInventoryView.prototype.buildDimensionsMenu = function(hasGroups)
{
	return oFF.UiLambdaPressListener.create((evt) => {
		let viewMenu = this.getGenesis().newControl(oFF.UiType.MENU);
		let provider = oFF.OuInventoryView.getLocalizationProvider();
		if (this.m_config.isShowGroupPresentationMenu() && hasGroups)
		{
			let flatItem = viewMenu.addNewItem();
			flatItem.addCssClass("ffGdsQbNavigationDimGroupPresentationFlat");
			flatItem.setText(provider.getText(oFF.OuInventoryViewI18n.NAV_DIM_MENU_GROUPS_FLAT));
			flatItem.setIcon(this.m_groupPresentation !== oFF.OuInventoryViewGroupPresentation.FLAT ? "accept" : null);
			flatItem.registerOnPress(oFF.UiLambdaPressListener.create((evt1) => {
				if (this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.FLAT)
				{
					this.setGroupPresentation(oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED);
				}
				else
				{
					this.setGroupPresentation(oFF.OuInventoryViewGroupPresentation.FLAT);
				}
				this.m_menuButton.focus();
			}));
			if (this.m_config.isShowGroupExpandCollapseOptions())
			{
				let expandItem = viewMenu.addNewItem();
				expandItem.addCssClass("ffGdsQbNavigationDimGroupPresentationExpanded");
				expandItem.setText(provider.getText(oFF.OuInventoryViewI18n.NAV_DIM_MENU_GROUPS_EXPANDED));
				expandItem.setIcon(this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.ALL_EXPANDED ? "accept" : null);
				expandItem.setEnabled(this.m_groupPresentation !== oFF.OuInventoryViewGroupPresentation.FLAT);
				expandItem.setSectionStart(true);
				expandItem.registerOnPress(oFF.UiLambdaPressListener.create((evt2) => {
					this.setGroupPresentation(oFF.OuInventoryViewGroupPresentation.ALL_EXPANDED);
					this.m_menuButton.focus();
				}));
				let collapseItem = viewMenu.addNewItem();
				collapseItem.addCssClass("ffGdsQbNavigationDimGroupPresentationCollapsed");
				collapseItem.setText(provider.getText(oFF.OuInventoryViewI18n.NAV_DIM_MENU_GROUPS_COLLAPSED));
				collapseItem.setIcon(this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED ? "accept" : null);
				collapseItem.setEnabled(this.m_groupPresentation !== oFF.OuInventoryViewGroupPresentation.FLAT);
				collapseItem.registerOnPress(oFF.UiLambdaPressListener.create((evt3) => {
					this.setGroupPresentation(oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED);
					this.m_menuButton.focus();
				}));
			}
		}
		let sortMenu = oFF.OuInventoryViewSortMenu.create(viewMenu);
		sortMenu.addCssClass("ffGdsQbNavigationDimSort");
		sortMenu.setConsumer(this.setDimensionSorting.bind(this));
		sortMenu.update(this.m_dimensionSortDirection);
		viewMenu.openAt(evt.getControl());
	});
};
oFF.OuInventoryView.prototype.buildDimensionsPanel = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_dimViews);
	this.m_dimViews.clear();
	let dimPanel = this.buildMainPanel(oFF.OuInventoryViewI18n.NAV_DIMENSIONS, oFF.OuInventoryView.getLocalizationProvider().getText(oFF.OuInventoryViewI18n.NAV_DIMENSIONS));
	dimPanel.addCssClass("ffGdsQbNavigationPanelDimensions");
	this.m_dimensionList = dimPanel.setNewContent(oFF.UiType.LIST);
	this.m_dimensionList.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	this.m_dimensionList.addCssClass("ffGdsQbNavigationPanelDimensionsList");
	let dimensionGroupInfo = oFF.QDimensionUtil.getDimensionGroupInfoFilteredWithoutStructures(this.m_queryManager);
	if (this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.FLAT)
	{
		this.buildDimensionsPanelFlat();
	}
	else
	{
		let rootLevelViews = this.buildDimensionsPanelRecursive(dimensionGroupInfo);
		this.m_dimensionList.addAllItems(oFF.XCollectionUtils.map(rootLevelViews, (view) => {
			return view.getListItemRoot();
		}));
	}
	if (this.m_dimViews.isEmpty())
	{
		this.m_dimensionList = oFF.UiContextDummy.getSingleton();
		return null;
	}
	let hasGroups = oFF.XCollectionUtils.contains(dimensionGroupInfo, (groupInfo) => {
		return !groupInfo.getChildren().isEmpty();
	});
	let header = dimPanel.getHeaderToolbar();
	header.addNewItemOfType(oFF.UiType.SPACER);
	this.m_menuButton = header.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_menuButton.addCssClass("ffGdsQbNavigationPanelDimensionsMenuButton");
	this.m_menuButton.setIcon("overflow");
	this.m_menuButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	this.m_menuButton.setTooltip(oFF.OuInventoryView.getLocalizationProvider().getText(oFF.OlapUiCommonI18n.COMMON_MORE));
	this.m_menuButton.registerOnPress(this.buildDimensionsMenu(hasGroups));
	return dimPanel;
};
oFF.OuInventoryView.prototype.buildDimensionsPanelFlat = function()
{
	let dimensions = this.m_queryManager.getQueryModel().getDimensions();
	for (let i = 0; i < dimensions.size(); i++)
	{
		let dim = dimensions.get(i);
		if (!oFF.QDimensionUtil.isStructureLike(dim) && oFF.QDimensionUtil.shouldDimensionBeShownForRowsOrColumns(dim, true))
		{
			let dimView = this.buildDimItem(dim);
			this.m_dimensionList.addItem(dimView.getListItemRoot());
			this.m_dimViews.add(dimView);
		}
	}
};
oFF.OuInventoryView.prototype.buildDimensionsPanelRecursive = function(groupInfos)
{
	let result = oFF.XList.create();
	for (let i = 0; i < groupInfos.size(); i++)
	{
		let groupInfo = groupInfos.get(i);
		let view;
		if (groupInfo.isDimension())
		{
			let dim = this.m_queryManager.getQueryModel().getDimensionByName(groupInfo.getInternalName());
			view = this.buildDimItem(dim);
		}
		else
		{
			view = this.buildDimItemBase();
			view.setName(oFF.XStringUtils.concatenate2("OuInventoryView.", groupInfo.getDisplayName()));
			view.setDisplayName(groupInfo.getDisplayName());
			view.setDisplayText(groupInfo.getDisplayText());
			view.getListItemRoot().addCssClass("ffGdsQbNavigationPanelGroup");
		}
		let children = groupInfo.getChildren();
		let childViews = this.buildDimensionsPanelRecursive(children);
		if (oFF.XCollectionUtils.hasElements(childViews))
		{
			this.addDimensionsToDimItem(view, childViews);
		}
		this.m_dimViews.add(view);
		result.add(view);
	}
	return result;
};
oFF.OuInventoryView.prototype.buildMainPanel = function(name, text)
{
	let panel = this.getGenesis().newControl(oFF.UiType.PANEL);
	panel.addCssClass("ffGdsQbFoldable");
	panel.addCssClass("ffGdsQbNavigationPanelMainPanel");
	panel.setTag(name);
	panel.setBackgroundDesign(oFF.UiBackgroundDesign.TRANSPARENT);
	panel.registerOnCollapse(oFF.UiLambdaCollapseListener.create((evt1) => {
		this.m_panelExpansion.putBoolean(name, false);
	}));
	panel.registerOnExpand(oFF.UiLambdaExpandListener.create((evt2) => {
		this.m_panelExpansion.putBoolean(name, true);
	}));
	panel.setExpandable(true);
	panel.setExpanded(this.m_panelExpansion.getBooleanByKeyExt(name, true));
	let header = panel.setNewHeaderToolbar();
	header.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	header.addCssClass("ffGdsQbNavigationPanelMainPanelHeaderToolbar");
	let title = header.addNewItemOfType(oFF.UiType.TITLE);
	title.setText(text);
	title.setTooltip(text);
	title.setTitleStyle(oFF.UiTitleLevel.H_5);
	title.setTitleLevel(oFF.UiTitleLevel.H_5);
	title.setMargin(oFF.UiCssBoxEdges.create("0"));
	header.addNewItemOfType(oFF.UiType.SPACER);
	return panel;
};
oFF.OuInventoryView.prototype.buildMemberView = function(node)
{
	let member = node.getDimensionMember();
	let memberView = this.buildCheckboxItem("ffGdsQbNavigationPanelMember", !node.hasChildren(), this.handleMemberToggle.bind(this));
	memberView.setNode(node);
	let memberItem = memberView.getRoot();
	if (member.getMemberType().isTypeOf(oFF.MemberType.MEASURE) && this.m_config.getMenuProvider() !== null && this.m_config.isRightClickContextMenuForMemberEnabled())
	{
		memberItem.registerOnContextMenu(oFF.UiLambdaContextMenuListener.create((evt) => {
			this.m_config.getMenuProvider().showMemberMenu(oFF.OuInventoryView.UI_CONTEXT, evt, member, node, null, null);
		}));
	}
	this.buildCalculationControls(memberView, member);
	memberItem.setDraggable(true);
	memberItem.setTag(this.m_config.getDragElementTag());
	memberItem.setCustomObject(memberView);
	memberItem.registerOnDragStart(oFF.UiLambdaDragStartListener.create((dragStartEvt) => {
		this.notifyDragStartModel(node);
	}));
	memberItem.registerOnDragEnd(oFF.UiLambdaDragEndListener.create((dragEndEvt) => {
		this.notifyDragEnd();
	}));
	return memberView;
};
oFF.OuInventoryView.prototype.buildMemberViewRecursive = function(structureView, node)
{
	let member = node.getDimensionMember();
	let memberView = this.buildMemberView(node);
	if (node.hasChildren())
	{
		structureView.setMemberHierarchy(true);
		let children = node.getChildren();
		for (let i = 0; i < children.size(); i++)
		{
			let child = children.get(i);
			memberView.addChild(this.buildMemberViewRecursive(structureView, child));
		}
		let panel = memberView.getPanel();
		let expanded = this.m_panelExpansion.getBooleanByKeyExt(member.getName(), false);
		panel.setExpanded(expanded);
		panel.registerOnExpand(oFF.UiLambdaExpandListener.create((expandEvt) => {
			this.m_panelExpansion.putBoolean(member.getName(), true);
		}));
		panel.registerOnCollapse(oFF.UiLambdaCollapseListener.create((collapseEvt) => {
			this.m_panelExpansion.putBoolean(member.getName(), false);
		}));
	}
	return memberView;
};
oFF.OuInventoryView.prototype.buildPanelContent = function()
{
	this.clearContent();
	this.m_renderedWithTable = this.isTableVisualizationActiveOnQueryManager();
	let queryModel = this.m_queryManager.getQueryModel();
	this.addPanel(this.buildStructurePanel(queryModel.getAccountDimension()));
	this.addPanel(this.buildStructurePanel(queryModel.getMeasureDimension()));
	this.addPanel(this.buildStructurePanel(queryModel.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE)));
	this.addPanel(this.buildDimensionsPanel());
	this.updateControls();
};
oFF.OuInventoryView.prototype.buildStructureMembers = function(structureView, panel, members)
{
	let dim = structureView.getDimension();
	let i18n = oFF.OuInventoryView.getLocalizationProvider();
	let list = panel.setNewContent(oFF.UiType.LIST);
	list.addCssClass("ffGdsQbNavigationPanelStructureMemberList");
	list.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	structureView.setChildrenList(list);
	if (members.size() > 1)
	{
		let selectAll = this.buildCheckboxItem("ffGdsQbNavigationPanelSelectAll", true, (checkbox) => {
			this.handleSelectAll(checkbox, dim);
		});
		let selectAllRoot = selectAll.getRoot();
		selectAllRoot.setTag(oFF.OuInventoryViewI18n.NAV_SELECT_ALL);
		let labelText = i18n.getText(oFF.OuInventoryViewI18n.NAV_SELECT_ALL);
		let selectAllLabel = selectAll.getLabel();
		selectAllLabel.setText(labelText);
		selectAllLabel.setTooltip(labelText);
		selectAllLabel.setFontWeight(oFF.UiFontWeight.BOLD);
		list.addItem(selectAllRoot);
		selectAll.getCheckbox().setEnabled(!oFF.OuInventoryView.isPieOrDonutActive(dim));
		structureView.setSelectAll(selectAll);
	}
	for (let i = 0; i < members.size(); i++)
	{
		let node = members.get(i);
		if (node.getParentNode() === null)
		{
			structureView.addChild(this.buildMemberViewRecursive(structureView, node));
		}
	}
};
oFF.OuInventoryView.prototype.buildStructureMenu = function(structureView, container)
{
	let dim = structureView.getDimension();
	let iconContainer = container.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	iconContainer.setDirection(oFF.UiFlexDirection.ROW);
	iconContainer.setFlex("0 0 auto");
	iconContainer.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	let menuButton = iconContainer.addNewItemOfType(oFF.UiType.BUTTON);
	menuButton.addCssClass("ffGdsQbNavigationPanelStructureMenuButton");
	menuButton.setIcon("overflow");
	menuButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	menuButton.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
		let viewMenu = this.getGenesis().newControl(oFF.UiType.MENU);
		let sortMenu = oFF.OuInventoryViewSortMenu.create(viewMenu);
		sortMenu.addCssClass("ffGdsQbNavigationStructureSort");
		sortMenu.setConsumer((sortDirection) => {
			this.setStructureSorting(structureView, sortDirection);
		});
		sortMenu.update(this.m_structureSortDirections.getByKey(dim.getName()));
		viewMenu.openAt(evt.getControl());
	}));
	this.addAxisButtons(iconContainer, dim, structureView);
};
oFF.OuInventoryView.prototype.buildStructurePanel = function(dim)
{
	if (oFF.isNull(dim))
	{
		return null;
	}
	let members = this.getMembersByDimension(dim);
	if (!oFF.XCollectionUtils.hasElements(members))
	{
		return null;
	}
	let structureView = oFF.OuInventoryStructure.createView(dim);
	this.m_structureViews.add(structureView);
	let panel = this.buildMainPanel(dim.getName(), this.getStructureDisplayText(dim));
	panel.addCssClass("ffGdsQbNavigationPanelStructurePanel");
	oFF.OuInventoryView.setStructurePanelName(dim, panel);
	structureView.setPanel(panel);
	let header = panel.getHeaderToolbar();
	header.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
	header.addCssClass("ffGdsQbNavigationPanelDimensionHeader");
	header.addCssClass("ffGdsQbNavigationPanelStructurePanelHeader");
	header.setDraggable(true);
	header.setTag(this.m_config.getDragElementTag());
	header.setCustomObject(structureView);
	header.registerOnDragStart(oFF.UiLambdaDragStartListener.create((dragEvt) => {
		this.notifyDragStartModel(dim);
	}));
	header.registerOnDragEnd(oFF.UiLambdaDragEndListener.create((dragEndEvt) => {
		this.notifyDragEnd();
	}));
	structureView.setHeader(header);
	this.buildStructureMenu(structureView, header);
	this.buildStructureMembers(structureView, panel, members);
	this.buildCalculationButton(dim);
	if (!this.m_structureSortDirections.containsKey(dim.getName()))
	{
		let isSecondStructure = dim.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE;
		let direction = isSecondStructure || structureView.hasMemberHierarchy() ? oFF.XSortDirection.NONE : oFF.XSortDirection.ASCENDING;
		this.m_structureSortDirections.put(dim.getName(), direction);
	}
	return panel;
};
oFF.OuInventoryView.prototype.buildViewUi = function(genesis)
{
	this.m_root = genesis.newRoot(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.useMaxSpace();
	this.m_root.addCssClass("ffGdsQbNavigationView");
	this.m_searchWrapper = this.m_root.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_searchWrapper.addCssClass("ffGdsQbNavigationPanelSearchContainer");
	this.m_searchWrapper.setPadding(oFF.UiCssBoxEdges.create("0 0.375rem"));
	this.m_searchWrapper.setFlex("0 0 auto");
	this.m_searchWrapper.setAlignItems(oFF.UiFlexAlignItems.CENTER);
	this.m_searchField = this.m_searchWrapper.addNewItemOfType(oFF.UiType.SEARCH_FIELD);
	this.m_searchField.registerOnSearch(oFF.UiLambdaSearchListener.create((evt1) => {
		this.doSearch(this.m_searchField.getValue());
	}));
	this.m_searchField.registerOnLiveChange(oFF.UiLambdaLiveChangeWithDebounceListener.create((evt2) => {
		if (oFF.XString.size(this.m_searchField.getValue()) !== 1)
		{
			this.doSearch(this.m_searchField.getValue());
		}
	}, 350));
	let content = this.m_root.addNewItemOfType(oFF.UiType.SCROLL_CONTAINER);
	content.useMaxHeight();
	this.m_main = content.setNewContent(oFF.UiType.FLEX_LAYOUT);
	this.m_main.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_main.setHeight(oFF.UiCssLength.AUTO);
	this.m_main.addCssClass("ffGdsQbNavigationViewMainContainer");
	this.setQueryManager(null);
};
oFF.OuInventoryView.prototype.checkMemberMapInSync = function(newMemberMap)
{
	if (oFF.isNull(this.m_memberMap) || this.m_memberMap.size() !== newMemberMap.size())
	{
		return false;
	}
	if (this.m_renderedWithTable !== this.isTableVisualizationActiveOnQueryManager())
	{
		return false;
	}
	let keys = this.m_memberMap.getKeysAsReadOnlyList();
	for (let i = 0; i < keys.size(); i++)
	{
		let key = keys.get(i);
		let oldMembers = this.m_memberMap.getByKey(key);
		let newMembers = newMemberMap.getByKey(key);
		if (oFF.isNull(newMembers) || oldMembers.size() !== newMembers.size())
		{
			return false;
		}
		for (let j = 0; j < oldMembers.size(); j++)
		{
			let oldMember = oldMembers.get(j);
			let newMember = newMembers.get(j);
			let oldDimensionMember = oldMember.getDimensionMember();
			let newDimensionMember = newMember.getDimensionMember();
			let oldText = this.m_presentation.getDisplayValueByType(oldDimensionMember);
			let newText = this.m_presentation.getDisplayValueByType(newDimensionMember);
			if (!oFF.XString.isEqual(oldText, newText))
			{
				return false;
			}
			if (oldMember.getChildCount() !== newMember.getChildCount())
			{
				return false;
			}
			if (oldDimensionMember.getMemberType().isTypeOf(oFF.MemberType.FORMULA) && newDimensionMember.getMemberType().isTypeOf(oFF.MemberType.FORMULA))
			{
				let oldCustomMeasureNames = oldMember.getDimensionMember().getCustomMeasureNames();
				let newCustomMeasureNames = newMember.getDimensionMember().getCustomMeasureNames();
				if (oldCustomMeasureNames.isPresent() && newCustomMeasureNames.isPresent() && !oFF.XListUtils.isListEquals(oldCustomMeasureNames.get(), newCustomMeasureNames.get()))
				{
					return false;
				}
			}
		}
	}
	return true;
};
oFF.OuInventoryView.prototype.checkMoreButton = function(dim, menuButton)
{
	if (menuButton === oFF.UiContextDummy.getSingleton())
	{
		return;
	}
	if (this.m_config.getMenuProvider() === null)
	{
		menuButton.setVisible(false);
		return;
	}
	this.m_config.getMenuProvider().hasDimMenu(oFF.OuInventoryView.UI_CONTEXT, dim, (result) => {
		if (oFF.XObjectExt.isValidObject(menuButton))
		{
			menuButton.setVisible(result.getBoolean());
		}
	});
};
oFF.OuInventoryView.prototype.clearContent = function()
{
	this.m_main.clearItems();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_dimViews);
	this.m_dimViews.clear();
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_structureViews);
	this.m_structureViews.clear();
	this.m_panelExpansionPreSearch = null;
	this.m_searchInProgress = false;
	this.m_searchField.setValue(null);
};
oFF.OuInventoryView.prototype.clearUiState = function()
{
	this.m_panelExpansion.clear();
	this.m_structureSortDirections.clear();
};
oFF.OuInventoryView.prototype.configureDimPanelForChildren = function(dimView)
{
	let magicPanel = dimView.getPanel();
	if (oFF.isNull(magicPanel))
	{
		magicPanel = oFF.OuMagicPanel.create(this.getGenesis());
		let panel = magicPanel.getView();
		panel.removeAttribute(oFF.UtUi5AttributeConstants.FAST_NAV_GROUP);
		panel.addCssClass("ffGdsQbNavigationPanelMemberPanel");
		panel.setHeaderToolbar(dimView.getHeader());
		magicPanel.setExpandable(true);
		dimView.getListItemRoot().setContent(panel);
		dimView.getListItemRoot().removeCssClass("ffGdsQbNavigationPanelDimensionNoChildren");
		dimView.getListItemRoot().addCssClass("ffGdsQbNavigationPanelDimensionWithChildren");
		dimView.setPanel(magicPanel);
		let isGroup = dimView.isGroup();
		let expanded = this.m_panelExpansion.getBooleanByKeyExt(dimView.getName(), false);
		if (isGroup && this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.ALL_EXPANDED)
		{
			expanded = true;
		}
		if (expanded)
		{
			this.addChildrenToDimView(dimView);
			magicPanel.setExpanded(expanded);
		}
		magicPanel.setOnCollapse(() => {
			if (this.m_searchInProgress)
			{
				return;
			}
			this.m_panelExpansion.putBoolean(dimView.getName(), false);
			if (isGroup && this.m_groupPresentation !== oFF.OuInventoryViewGroupPresentation.MIXED)
			{
				this.setGroupPresentation(oFF.OuInventoryViewGroupPresentation.MIXED);
			}
		});
		magicPanel.setOnExpand(() => {
			if (this.m_searchInProgress)
			{
				return;
			}
			this.m_panelExpansion.putBoolean(dimView.getName(), true);
			if (isGroup && this.m_groupPresentation !== oFF.OuInventoryViewGroupPresentation.MIXED)
			{
				this.setGroupPresentation(oFF.OuInventoryViewGroupPresentation.MIXED);
			}
		});
	}
	this.addChildrenToDimView(dimView);
};
oFF.OuInventoryView.prototype.destroyView = function()
{
	this.unobserveDataProviderEvents();
	this.m_main = oFF.XObjectExt.release(this.m_main);
	this.m_process = null;
	this.m_searchWrapper = null;
	this.m_searchField = null;
	this.m_menuButton = null;
	this.m_dimensionList = null;
	this.m_presentation = null;
	this.m_dimensionSortDirection = null;
	this.m_structureSortDirections = oFF.XObjectExt.release(this.m_structureSortDirections);
	this.m_groupPresentation = null;
	this.m_config = null;
	this.m_onChange = null;
	this.m_dimViews = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dimViews);
	this.m_structureViews = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_structureViews);
	this.m_panelExpansion = oFF.XObjectExt.release(this.m_panelExpansion);
	this.m_queryManager = null;
	this.m_memberMap = oFF.XObjectExt.release(this.m_memberMap);
	this.m_root = oFF.XObjectExt.release(this.m_root);
};
oFF.OuInventoryView.prototype.doSearch = function(searchText)
{
	let isEmpty = oFF.XStringUtils.isNullOrEmpty(searchText);
	if (!isEmpty)
	{
		this.m_searchInProgress = true;
		if (oFF.isNull(this.m_panelExpansionPreSearch))
		{
			this.m_panelExpansionPreSearch = this.m_panelExpansion.serialize();
		}
		this.forceMainPanelsExpansion();
		for (let i = 0; i < this.m_dimViews.size(); i++)
		{
			let dimView = this.m_dimViews.get(i);
			let childVisible = this.doSearchChildren(searchText, dimView.getChildrenViews());
			childVisible = childVisible || this.doSearchDimensions(searchText, dimView.getDimensionViews());
			if (dimView.getDimension() === null && !childVisible)
			{
				dimView.getListItemRoot().setVisible(false);
			}
			else
			{
				let dimText = dimView.getLabel().getText();
				let visible = oFF.XStringUtils.containsString(dimText, searchText, true);
				if (visible && !childVisible)
				{
					dimView.getListItemRoot().removeCssClass("ffGdsQbNavigationPanelDimensionWithChildren");
					dimView.getListItemRoot().addCssClass("ffGdsQbNavigationPanelDimensionNoChildren");
				}
				dimView.getListItemRoot().setVisible(visible || childVisible);
			}
			let magicPanel = dimView.getPanel();
			if (oFF.notNull(magicPanel))
			{
				let panel = magicPanel.getView();
				panel.setAnimated(false);
				magicPanel.setExpandable(childVisible);
				magicPanel.setExpanded(childVisible);
			}
		}
		for (let j = 0; j < this.m_structureViews.size(); j++)
		{
			let structView = this.m_structureViews.get(j);
			let memberVisible = this.doSearchChildren(searchText, structView.getDirectChildren());
			if (structView.getSelectAll() !== null)
			{
				structView.getSelectAll().getRoot().setVisible(memberVisible);
				if (memberVisible)
				{
					oFF.OuInventoryView.updateMasterCheckbox(structView);
				}
			}
		}
	}
	else if (this.m_searchInProgress)
	{
		this.m_searchInProgress = false;
		this.m_panelExpansion.clear();
		this.m_panelExpansion.deserialize(this.m_panelExpansionPreSearch);
		this.m_panelExpansionPreSearch = null;
		this.buildPanelContent();
	}
};
oFF.OuInventoryView.prototype.doSearchChildren = function(searchText, children)
{
	if (!oFF.XCollectionUtils.hasElements(children))
	{
		return false;
	}
	let anyoneVisible = false;
	for (let i = 0; i < children.size(); i++)
	{
		let childView = children.get(i);
		let memberText = childView.getLabel().getText();
		let visible = oFF.XStringUtils.containsString(memberText, searchText, true);
		let childVisible = this.doSearchChildren(searchText, childView.getDirectChildren());
		childView.getRoot().setVisible(visible || childVisible);
		let panel = childView.getPanel();
		panel.setAnimated(false);
		panel.setExpandable(childVisible);
		panel.setExpanded(childVisible);
		panel.setAnimated(true);
		anyoneVisible = anyoneVisible || visible || childVisible;
	}
	return anyoneVisible;
};
oFF.OuInventoryView.prototype.doSearchDimensions = function(searchText, dimViews)
{
	if (!oFF.XCollectionUtils.hasElements(dimViews))
	{
		return false;
	}
	let anyoneVisible = false;
	for (let i = 0; i < dimViews.size(); i++)
	{
		let dimView = dimViews.get(i);
		let memberText = dimView.getLabel().getText();
		let visible = oFF.XStringUtils.containsString(memberText, searchText, true);
		let childVisible = this.doSearchChildren(searchText, dimView.getChildrenViews());
		childVisible = childVisible || this.doSearchDimensions(searchText, dimView.getDimensionViews());
		dimView.getListItemRoot().setVisible(visible || childVisible);
		let magicPanel = dimView.getPanel();
		if (oFF.notNull(magicPanel))
		{
			let panel = magicPanel.getView();
			panel.setAnimated(false);
			magicPanel.setExpandable(childVisible);
			magicPanel.setExpanded(childVisible);
			panel.setAnimated(true);
		}
		anyoneVisible = anyoneVisible || visible || childVisible;
	}
	return anyoneVisible;
};
oFF.OuInventoryView.prototype.fetchMembersAndBuildUi = function()
{
	this.m_root.setBusy(true);
	let queryModel = this.m_queryManager.getQueryModel();
	let structures = oFF.QueryDesignerUtils.getStructureDimensions(queryModel);
	let memberPromise = oFF.QueryDesignerUtils.getMembersOfDimensions(structures);
	memberPromise.onThen((newMemberMap) => {
		let filtered = this.filterAllMembersForUi(newMemberMap);
		if (!this.checkMemberMapInSync(filtered))
		{
			this.clearContent();
		}
		this.m_memberMap = filtered;
	}).onCatch((error) => {
		this.m_memberMap = oFF.XHashMapByString.create();
	});
	memberPromise.onFinally(() => {
		this.m_root.setBusy(false);
		this.m_isQueryManagerSet = true;
		try
		{
			if (!this.m_main.hasItems())
			{
				this.buildPanelContent();
			}
			else
			{
				this.updateControls();
			}
		}
		catch (err)
		{
			let strip = this.getGenesis().newRoot(oFF.UiType.MESSAGE_STRIP);
			strip.setMessageType(oFF.UiMessageType.ERROR);
			strip.setText(oFF.XException.getMessage(err));
			oFF.XLogger.printError(oFF.XException.getStackTrace(err, 0));
		}
	});
};
oFF.OuInventoryView.prototype.filterAllMembersForUi = function(members)
{
	let filteredMembers = oFF.XHashMapByString.create();
	oFF.XCollectionUtils.mapEntries(members, (key, value) => {
		filteredMembers.put(key, this.filterMembersForUi(value));
	});
	return filteredMembers;
};
oFF.OuInventoryView.prototype.filterMembersForUi = function(members)
{
	return oFF.XStream.of(members).filter((node) => {
		let member = node.getDimensionMember();
		if (member.getResultVisibility() === oFF.ResultVisibility.HIDDEN)
		{
			return false;
		}
		if (member.getDimension().isStructure())
		{
			let structureMember = member;
			let dateTimeCell = structureMember.getCellValueType() === null || !structureMember.getCellValueType().isDateTime();
			return this.isTableVisualizationActiveOnQueryManager() || dateTimeCell;
		}
		return true;
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.OuInventoryView.prototype.forceMainPanelsExpansion = function()
{
	let items = this.m_main.getItems();
	for (let i = 0; i < items.size(); i++)
	{
		let item = items.get(i);
		item.setAnimated(false);
		item.setExpanded(true);
		item.setAnimated(true);
	}
};
oFF.OuInventoryView.prototype.getCurrentlyIncludedMembers = function(dim)
{
	let allMembers = this.getMembersByDimension(dim);
	if (!oFF.XCollectionUtils.hasElements(allMembers))
	{
		return oFF.XListOfNameObject.create();
	}
	let currentlyIncludedMemberNames = this.m_queryManager.getConvenienceCommands().getVisibleMembers(dim, allMembers);
	return oFF.XStream.ofString(currentlyIncludedMemberNames).map((member) => {
		return allMembers.getByKey(member.getString());
	}).filterNullValues().collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.OuInventoryView.prototype.getDataProvider = function()
{
	return this.m_dataProvider;
};
oFF.OuInventoryView.prototype.getFilteredAttributes = function(dim)
{
	if (!this.m_renderedWithTable)
	{
		return oFF.XList.create();
	}
	if (dim.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED)
	{
		return oFF.XList.create();
	}
	return oFF.XCollectionUtils.filter(dim.getAttributes(), (a) => {
		let isGeo = a.getKeyField() === dim.getGeoShapeField();
		return a !== dim.getMainAttribute() && !isGeo;
	});
};
oFF.OuInventoryView.prototype.getLeadingStructure = function()
{
	let queryModel = this.m_queryManager.getQueryModel();
	if (queryModel.isLeadingStructureAccount())
	{
		return queryModel.getAccountDimension();
	}
	return queryModel.getMeasureDimension();
};
oFF.OuInventoryView.prototype.getMembersByDimension = function(dim)
{
	let nodes = this.m_memberMap.getByKey(dim.getName());
	if (!oFF.XCollectionUtils.hasElements(nodes))
	{
		return oFF.XListOfNameObject.create();
	}
	return nodes;
};
oFF.OuInventoryView.prototype.getQueryManager = function()
{
	return this.m_queryManager;
};
oFF.OuInventoryView.prototype.getStructureDisplayText = function(dim)
{
	let localizationProvider = oFF.OuInventoryView.getLocalizationProvider();
	let dimensionType = dim.getDimensionType();
	if (dimensionType === oFF.DimensionType.ACCOUNT)
	{
		return localizationProvider.getText(oFF.OlapUiCommonI18n.COMMON_ACCOUNT);
	}
	if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE)
	{
		return localizationProvider.getText(oFF.OlapUiCommonI18n.COMMON_MEASURES);
	}
	if (dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
	{
		if (this.m_process.hasFeature(oFF.FeatureToggleOlap.USE_ORIGINAL_STRUCTURE_TEXT_IN_UI) && oFF.XStringUtils.isNotNullAndNotEmpty(dim.getOriginalText()))
		{
			return dim.getOriginalText();
		}
		return localizationProvider.getText(oFF.OlapUiCommonI18n.COMMON_STRUCTURE);
	}
	return null;
};
oFF.OuInventoryView.prototype.handleAttributeChange = function(listItem, attribute)
{
	let checkbox = listItem.getCheckbox();
	if (oFF.isNull(checkbox))
	{
		return;
	}
	let cc = attribute.getConvenienceCommands();
	let dim = attribute.getDimension();
	if (checkbox.isChecked())
	{
		this.implicitlyMoveDimensionIfNecessary(dim);
		cc.addAttributeToResultSet(dim.getName(), attribute.getName());
	}
	else
	{
		cc.removeAttributeFromResultSet(dim.getName(), attribute.getName());
	}
	this.notifyDimExpansion(dim.getName());
	this.notifyChangeListeners();
};
oFF.OuInventoryView.prototype.handleCalculationDeletion = function(structureMember)
{
	let dimension = structureMember.getDimension();
	dimension.queueEventing();
	let includedMembers = this.getCurrentlyIncludedMembers(dimension);
	if (includedMembers.containsKey(structureMember.getName()))
	{
		oFF.FeFormulaCustomMeasureUtil.deleteCustomMeasures(structureMember.getName(), dimension);
		includedMembers.removeElement(includedMembers.getByKey(structureMember.getName()));
		if (includedMembers.size() === 0)
		{
			this.implicitlyMoveDimensionIfNecessary(dimension);
		}
	}
	dimension.removeMeasure(structureMember.getName());
	let i18n = oFF.OuInventoryView.getLocalizationProvider();
	let toast = i18n.getTextWithPlaceholder(oFF.OuInventoryViewI18n.NAV_CALCULATION_DELETION_INFO, structureMember.getText());
	let messageCenter = this.m_config.getMessageCenter();
	if (oFF.notNull(messageCenter))
	{
		messageCenter.showSuccessToast(toast);
	}
	else
	{
		oFF.XLogger.println(toast);
	}
	this.validateFormulaExceptionsAfterCalculationDeletion(structureMember);
	this.validateOtherFormulasAfterCalculationDeletion(structureMember);
	this.validateFiltersAfterCalculationDeletion(structureMember);
	dimension.resumeEventing();
	this.notifyChangeListeners();
};
oFF.OuInventoryView.prototype.handleMemberDeselect = function(listItem, node, includedNodes)
{
	let dim = node.getDimension();
	let cc = dim.getConvenienceCommands();
	let dimName = dim.getName();
	if (!oFF.QueryDesignerUtils.canBeRemoved(dim) && !cc.isDimensionOnRowsOrColumns(dimName))
	{
		this.openFilterDialogAndNotifyAfter(dim, () => {
			listItem.getCheckbox().setChecked(true);
		});
	}
	else
	{
		includedNodes.removeElement(node);
		oFF.XCollectionUtils.forEach(listItem.getAllChildren(), (mi) => {
			includedNodes.removeElement(mi.getNode());
		});
		let allMembers = this.getMembersByDimension(dim);
		oFF.QueryDesignerUtils.setFilterForDimension(dim, allMembers, includedNodes);
		this.notifyMemberExpansion(dimName, node.getDimensionMember().getName());
		this.notifyDimExpansion(dimName);
		this.notifyChangeListeners();
	}
};
oFF.OuInventoryView.prototype.handleMemberSelect = function(listItem, node, includedNodes)
{
	let dim = node.getDimension();
	if (oFF.OuInventoryView.isPieOrDonutActive(dim))
	{
		includedNodes.clear();
	}
	if (!includedNodes.containsKey(node.getName()))
	{
		includedNodes.add(node);
	}
	oFF.XCollectionUtils.forEach(listItem.getAllChildren(), (me) => {
		let childNode = me.getNode();
		if (!includedNodes.containsKey(childNode.getDimensionMember().getName()))
		{
			includedNodes.add(childNode);
		}
	});
	if (includedNodes.size() > 1)
	{
		this.implicitlyMoveDimensionIfNecessary(dim);
	}
	let allMembers = this.getMembersByDimension(dim);
	oFF.QueryDesignerUtils.setFilterForDimension(dim, allMembers, includedNodes);
	let dimName = dim.getName();
	this.notifyMemberExpansion(dimName, node.getDimensionMember().getName());
	this.notifyDimExpansion(dimName);
	this.notifyChangeListeners();
};
oFF.OuInventoryView.prototype.handleMemberToggle = function(listItem)
{
	if (oFF.isNull(listItem) || listItem.getNode() === null || listItem.getNode().getDimensionMember() === null)
	{
		return;
	}
	let node = listItem.getNode();
	let member = node.getDimensionMember();
	let includedMembers = this.getCurrentlyIncludedMembers(member.getDimension());
	if (!includedMembers.containsKey(member.getName()))
	{
		let perfTool = oFF.UiPerformanceCenter.getCenter();
		perfTool.startMeasure("[Dragonfly][Select Measure]");
		this.handleMemberSelect(listItem, node, includedMembers);
	}
	else
	{
		this.handleMemberDeselect(listItem, node, includedMembers);
	}
};
oFF.OuInventoryView.prototype.handleNewCalculation = function(includedMembers, newMember, isFromExisting)
{
	if (oFF.notNull(newMember))
	{
		let calcName = newMember.getName();
		let dimension = newMember.getDimension();
		let newMemberNode = oFF.QFactory.createMeasureHelpNode(calcName, newMember);
		if (!includedMembers.containsKey(calcName) && !isFromExisting)
		{
			includedMembers.add(newMemberNode);
		}
		if (includedMembers.size() > 1)
		{
			this.implicitlyMoveDimensionIfNecessary(dimension);
		}
		let membersByDimension = this.m_memberMap.getByKey(dimension.getName());
		let allMembers = oFF.XCollectionUtils.createListOfNameObjectCopy(membersByDimension);
		if (membersByDimension.containsKey(calcName))
		{
			allMembers.removeElement(allMembers.getByKey(calcName));
		}
		allMembers.add(newMemberNode);
		this.m_memberMap.put(dimension.getName(), allMembers);
		oFF.QueryDesignerUtils.setFilterForDimension(dimension, allMembers, includedMembers);
	}
	this.notifyChangeListeners();
};
oFF.OuInventoryView.prototype.handleSelectAll = function(listItem, dimension)
{
	let checkbox = listItem.getCheckbox();
	if (oFF.isNull(checkbox))
	{
		return;
	}
	if (checkbox.isChecked())
	{
		let perfTool = oFF.UiPerformanceCenter.getCenter();
		perfTool.startMeasure("[Dragonfly][Select All Measures]");
	}
	let checked = checkbox.isChecked();
	let cc = dimension.getConvenienceCommands();
	if (!oFF.QueryDesignerUtils.canBeAggregated(dimension) && !cc.isDimensionOnRowsOrColumns(dimension.getName()))
	{
		if (!checked)
		{
			this.openFilterDialogAndNotifyAfter(dimension, () => {
				checkbox.setChecked(true);
			});
			return;
		}
		this.implicitlyMoveDimensionIfNecessary(dimension);
	}
	let memberViews = this.m_structureViews.getByKey(dimension.getName()).getAllChildren();
	let includedMembers = this.getCurrentlyIncludedMembers(dimension);
	for (let i = 0; i < memberViews.size(); i++)
	{
		let memberView = memberViews.get(i);
		if (!memberView.getRoot().isVisible())
		{
			continue;
		}
		let node = memberView.getNode();
		if (checked && !includedMembers.containsKey(node.getDimensionMember().getName()))
		{
			includedMembers.add(node);
		}
		else if (!checked && includedMembers.containsKey(node.getDimensionMember().getName()))
		{
			includedMembers.removeElement(node);
		}
	}
	let allMembers = this.getMembersByDimension(dimension);
	oFF.QueryDesignerUtils.setFilterForDimension(dimension, allMembers, includedMembers);
	this.notifyChangeListeners();
};
oFF.OuInventoryView.prototype.implicitlyMoveDimensionIfNecessary = function(dim)
{
	let cc = dim.getConvenienceCommands();
	if (!cc.isDimensionOnRowsOrColumns(dim.getName()))
	{
		let measureDimension = dim.getQueryModel().getMeasureDimension();
		if (oFF.notNull(measureDimension) && measureDimension !== dim)
		{
			oFF.OuInventoryView.moveDimensionToAxis(dim, oFF.QueryDesignerUtils.getOppositeAxis(measureDimension.getAxisType()));
		}
		else
		{
			let axisToMove = this.m_renderedWithTable ? oFF.AxisType.COLUMNS : oFF.AxisType.ROWS;
			oFF.OuInventoryView.moveDimensionToAxis(dim, axisToMove);
		}
	}
};
oFF.OuInventoryView.prototype.isCalculationsEnabled = function(dimension)
{
	if (!this.m_config.isCalculationsEnabled())
	{
		return false;
	}
	if (!this.m_config.isCalculationsOnSecondaryStructEnabled())
	{
		if (dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE)
		{
			return false;
		}
		else
		{
			return this.m_queryManager.getQueryModel().isUniversalAccountModel() || dimension === this.getLeadingStructure();
		}
	}
	else
	{
		return !(this.isLegacyAccountModel() && dimension.isMeasureStructure());
	}
};
oFF.OuInventoryView.prototype.isChartDefinitionActiveOnQueryManager = function()
{
	let currentActiveVisualizationDefinition = this.getQueryManager().getQueryModel().getVisualizationManager().getCurrentActiveVisualizationDefinition();
	return oFF.notNull(currentActiveVisualizationDefinition) && currentActiveVisualizationDefinition.getSemanticBindingType().isTypeOf(oFF.SemanticBindingType.CHART);
};
oFF.OuInventoryView.prototype.isLegacyAccountModel = function()
{
	return this.m_queryManager.getQueryModel().isAccountModel() && !this.m_queryManager.getQueryModel().hasUserDefinedMeasures();
};
oFF.OuInventoryView.prototype.isTableVisualizationActiveOnQueryManager = function()
{
	let currentActiveVisualizationDefinition = this.getQueryManager().getQueryModel().getVisualizationManager().getCurrentActiveVisualizationDefinition();
	let tableShowing = oFF.isNull(currentActiveVisualizationDefinition) || currentActiveVisualizationDefinition.getProtocolBindingType() === oFF.ProtocolBindingType.SAC_TABLE_GRID;
	return tableShowing;
};
oFF.OuInventoryView.prototype.notifyChangeListeners = function()
{
	if (oFF.notNull(this.m_onChange))
	{
		this.m_onChange(null);
	}
	else if (oFF.notNull(this.m_dataProvider))
	{
		this.m_dataProvider.getEventing().notifyExternalModelChange(null);
	}
};
oFF.OuInventoryView.prototype.notifyDimExpansion = function(dimName)
{
	if (oFF.notNull(this.m_expansionReceiver))
	{
		this.m_expansionReceiver.expandDimension(dimName);
	}
};
oFF.OuInventoryView.prototype.notifyDragEnd = function()
{
	if (oFF.notNull(this.m_dropReceiver))
	{
		this.m_dropReceiver.dragEnd();
	}
};
oFF.OuInventoryView.prototype.notifyDragStartModel = function(model)
{
	if (oFF.notNull(this.m_dropReceiver))
	{
		this.m_dropReceiver.dragStartModelComponent(model);
	}
};
oFF.OuInventoryView.prototype.notifyMemberExpansion = function(dimName, memberName)
{
	if (oFF.notNull(this.m_expansionReceiver))
	{
		this.m_expansionReceiver.expandMember(dimName, memberName);
	}
};
oFF.OuInventoryView.prototype.observeDataProviderEvents = function()
{
	if (oFF.notNull(this.m_dataProvider))
	{
		this.m_lifecycleConsumerId = this.m_dataProvider.getEventing().getListenerForLifecycle().addConsumer(this.onLifecycleChangeEvent.bind(this));
		this.m_modelChangeListenerId = this.m_dataProvider.getEventing().getListenerForModelChanges().addConsumer(this.onModelChangeEvent.bind(this));
		this.m_modelStateListenerId = this.m_dataProvider.getEventing().getListenerForModelState().addConsumer(this.onModelStateChangeEvent.bind(this));
	}
};
oFF.OuInventoryView.prototype.onLifecycleChangeEvent = function(evt)
{
	if (evt.getNewState() === oFF.DataProviderLifecycle.RELEASED)
	{
		this.setDataProvider(null);
	}
	else if (evt.getNewState() === oFF.DataProviderLifecycle.DISCONNECTED)
	{
		this.setQueryManager(null);
	}
	else if (evt.getNewState() === oFF.DataProviderLifecycle.CONNECTED)
	{
		if (this.m_queryManager !== this.m_dataProvider.getQueryManager())
		{
			this.setQueryManager(this.m_dataProvider.getQueryManager());
		}
	}
};
oFF.OuInventoryView.prototype.onModelChangeEvent = function(evt)
{
	this.updateUi();
};
oFF.OuInventoryView.prototype.onModelStateChangeEvent = function(evt)
{
	if (evt.getNewState() === oFF.OlapDataProviderModelState.QUERY)
	{
		this.updateUi();
	}
};
oFF.OuInventoryView.prototype.openCalculationDialog = function(dimension, editCalcName, clickedItem)
{
	let includedMembers = this.getCurrentlyIncludedMembers(dimension);
	oFF.FormulaEditorNativeModule.getInstance();
	let prgStartData = oFF.ProgramStartData.create();
	prgStartData.putXObject(oFF.DfOuDialogProgram.PRG_DATA_QUERY_MANAGER, this.getQueryManager());
	prgStartData.putXObject(oFF.OuCalcCalculationsDialog.PRG_DATA_LISTENER_CLOSE, oFF.OuCalcCalculationsDialogLambdaCloseListener.create((newMember) => {
		clickedItem.focus();
		this.handleNewCalculation(includedMembers, newMember, editCalcName.isPresent());
	}));
	let runner = oFF.ProgramRunner.createRunner(this.m_config.getApplication().getProcess(), oFF.OuCalcCalculationsDialog.DEFAULT_PROGRAM_NAME);
	runner.setProgramStartData(prgStartData);
	runner.setStringArgument(oFF.OuCalcCalculationsDialog.PARAM_DIMENSION_NAME, dimension.getName());
	runner.setBooleanArgument(oFF.OuCalcCalculationsDialog.PARAM_GEN_AI_ENABLED, this.m_config.isCalculationsGenAiEnabled());
	if (editCalcName.isPresent())
	{
		runner.setStringArgument(oFF.OuCalcCalculationsDialog.PARAM_CALCULATION_NAME, editCalcName.get());
	}
	runner.setListArgument(oFF.OuCalcCalculationsDialog.PARAM_FORMULA_ITEMS, oFF.PrList.create().addAllStrings(oFF.OuDesignerViewConfiguration.getFormulaItems()));
	runner.runProgram();
};
oFF.OuInventoryView.prototype.openFilterDialogAndNotifyAfter = function(dim, onCancel)
{
	oFF.OuInventoryView.openFilterDialogWithCallback(dim, (selection) => {
		this.notifyChangeListeners();
	}, onCancel);
};
oFF.OuInventoryView.prototype.orderChildren = function(structureView)
{
	let structure = structureView.getDimension();
	let sortDirection = this.m_structureSortDirections.getByKey(structure.getName());
	if (sortDirection === oFF.XSortDirection.NONE)
	{
		return;
	}
	let itemComparator = oFF.XComparatorLambda.create((first, second) => {
		return oFF.OuInventoryView.compareLabels(first.getLabel(), second.getLabel(), sortDirection);
	});
	let members = structureView.getDirectChildren();
	if (oFF.XCollectionUtils.hasElements(members))
	{
		let orderedMembers = oFF.XCollectionUtils.createListCopy(members);
		orderedMembers.sortByComparator(itemComparator);
		let memberList = structureView.getChildrenList();
		memberList.clearItems();
		if (structureView.getCalculationsLink() !== null)
		{
			memberList.addItem(structureView.getCalculationsLink().getRoot());
		}
		if (structureView.getSelectAll() !== null)
		{
			memberList.addItem(structureView.getSelectAll().getRoot());
		}
		memberList.addAllItems(oFF.XCollectionUtils.map(orderedMembers, (m) => {
			return m.getRoot();
		}));
	}
};
oFF.OuInventoryView.prototype.orderDimensions = function()
{
	if (!oFF.XCollectionUtils.hasElements(this.m_dimViews) || this.m_dimensionSortDirection === oFF.XSortDirection.NONE)
	{
		return;
	}
	let dimViewComparator = oFF.XComparatorLambda.create((first, second) => {
		return oFF.OuInventoryView.compareLabels(first.getLabel(), second.getLabel(), this.m_dimensionSortDirection);
	});
	let itemComparator = oFF.XComparatorLambda.create((first, second) => {
		return oFF.OuInventoryView.compareLabels(first.getLabel(), second.getLabel(), this.m_dimensionSortDirection);
	});
	let dimensions = oFF.XStream.of(this.m_dimensionList.getItems()).map((item) => {
		return item.getCustomObject();
	}).collect(oFF.XStreamCollector.toList());
	dimensions.sortByComparator(dimViewComparator);
	this.m_dimensionList.clearItems();
	this.m_dimensionList.addAllItems(oFF.XCollectionUtils.map(dimensions, (d) => {
		return d.getListItemRoot();
	}));
	for (let i = 0; i < this.m_dimViews.size(); i++)
	{
		let dimView = this.m_dimViews.get(i);
		let attributes = dimView.getChildrenViews();
		if (oFF.XCollectionUtils.hasElements(attributes))
		{
			let orderedAttributes = oFF.XCollectionUtils.createListCopy(attributes);
			orderedAttributes.sortByComparator(itemComparator);
			let attributeList = dimView.getChildrenList();
			attributeList.clearItems();
			attributeList.addAllItems(oFF.XCollectionUtils.map(orderedAttributes, (a) => {
				return a.getRoot();
			}));
		}
		let groupedDimList = dimView.getDimensionList();
		if (oFF.notNull(groupedDimList) && groupedDimList.getNumberOfItems() > 0)
		{
			let groupedDimViews = dimView.getDimensionViews();
			let orderedDimViews = oFF.XCollectionUtils.createListCopy(groupedDimViews);
			orderedDimViews.sortByComparator(dimViewComparator);
			groupedDimList.clearItems();
			groupedDimList.addAllItems(oFF.XCollectionUtils.map(orderedDimViews, (g) => {
				return g.getListItemRoot();
			}));
		}
	}
};
oFF.OuInventoryView.prototype.setDataProvider = function(dataProvider)
{
	this.unobserveDataProviderEvents();
	this.m_dataProvider = dataProvider;
	this.observeDataProviderEvents();
	this.setQueryManager(oFF.notNull(this.m_dataProvider) ? this.m_dataProvider.getQueryManager() : null);
};
oFF.OuInventoryView.prototype.setDimensionSorting = function(direction)
{
	this.m_dimensionSortDirection = direction;
	if (direction === oFF.XSortDirection.NONE)
	{
		this.buildPanelContent();
		return;
	}
	this.orderDimensions();
};
oFF.OuInventoryView.prototype.setDropReceiver = function(receiver)
{
	this.m_dropReceiver = receiver;
};
oFF.OuInventoryView.prototype.setExpansionForGroups = function(expanded)
{
	for (let i = 0; i < this.m_dimViews.size(); i++)
	{
		let dimView = this.m_dimViews.get(i);
		if (dimView.isGroup())
		{
			this.m_panelExpansion.putBoolean(dimView.getName(), expanded);
		}
	}
};
oFF.OuInventoryView.prototype.setExpansionReceiver = function(receiver)
{
	this.m_expansionReceiver = receiver;
};
oFF.OuInventoryView.prototype.setGroupPresentation = function(presentation)
{
	let localStorage = this.m_process.getLocalStorage();
	let key = oFF.OuInventoryView.getLocalStorageGroupPresentationKey();
	this.m_groupPresentation = presentation;
	if (this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.FLAT)
	{
		localStorage.putString(key, oFF.OuInventoryViewGroupPresentation.FLAT.getName());
		this.buildPanelContent();
	}
	else if (this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.ALL_EXPANDED)
	{
		localStorage.putString(key, oFF.OuInventoryViewGroupPresentation.ALL_EXPANDED.getName());
		this.setExpansionForGroups(true);
		this.buildPanelContent();
	}
	else if (this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED)
	{
		localStorage.putString(key, oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED.getName());
		this.setExpansionForGroups(false);
		this.buildPanelContent();
	}
	else if (this.m_groupPresentation === oFF.OuInventoryViewGroupPresentation.MIXED)
	{
		localStorage.removeKey(key);
	}
};
oFF.OuInventoryView.prototype.setInvalidThreshold = function(message)
{
	this.m_config.getMessageCenter().showWarningToast(message);
	oFF.UiFramework.currentFramework().announce(message, oFF.UiAriaLiveMode.ASSERTIVE);
};
oFF.OuInventoryView.prototype.setOnChange = function(onChange)
{
	this.m_onChange = onChange;
};
oFF.OuInventoryView.prototype.setPresentation = function(presentationType)
{
	this.m_presentation = presentationType;
	this.updateAllLabels();
	this.updateSorting();
};
oFF.OuInventoryView.prototype.setQueryManager = function(queryManager)
{
	this.clearUiState();
	this.clearContent();
	this.m_queryManager = queryManager;
	this.m_searchWrapper.setVisible(oFF.notNull(this.m_queryManager));
	if (oFF.isNull(this.m_queryManager))
	{
		this.m_main.addNewItemOfType(oFF.UiType.LIST);
		return;
	}
	this.m_isQueryManagerSet = false;
	this.fetchMembersAndBuildUi();
};
oFF.OuInventoryView.prototype.setSorting = function(sortDirection)
{
	let newSorting;
	if (sortDirection === oFF.XSortDirection.DISABLED)
	{
		newSorting = oFF.XSortDirection.NONE;
	}
	else if (sortDirection === oFF.XSortDirection.DEFAULT_VALUE)
	{
		newSorting = oFF.XSortDirection.ASCENDING;
	}
	else
	{
		newSorting = sortDirection;
	}
	this.m_dimensionSortDirection = newSorting;
	oFF.XCollectionUtils.forEach(this.m_structureViews, (structureView) => {
		this.m_structureSortDirections.put(structureView.getDimension().getName(), newSorting);
	});
	if (newSorting === oFF.XSortDirection.NONE)
	{
		this.buildPanelContent();
		return;
	}
	this.updateSorting();
};
oFF.OuInventoryView.prototype.setStructureSorting = function(structureView, direction)
{
	this.m_structureSortDirections.put(structureView.getDimension().getName(), direction);
	if (direction === oFF.XSortDirection.NONE)
	{
		this.buildPanelContent();
		return;
	}
	this.orderChildren(structureView);
};
oFF.OuInventoryView.prototype.setupView = function()
{
	this.m_dimViews = oFF.XListOfNameObject.create();
	this.m_structureViews = oFF.XListOfNameObject.create();
	this.m_panelExpansion = oFF.XProperties.create();
	this.m_presentation = this.m_config.getDefaultPresentation();
	this.m_dimensionSortDirection = oFF.XSortDirection.ASCENDING;
	this.m_structureSortDirections = oFF.XHashMapByString.create();
	let defaultGroupPresentation;
	if (this.m_config.getDefaultGroupPresentation() !== null)
	{
		defaultGroupPresentation = this.m_config.getDefaultGroupPresentation();
	}
	else
	{
		defaultGroupPresentation = oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED;
	}
	this.m_groupPresentation = defaultGroupPresentation;
	if (this.m_config.isShowGroupPresentationMenu())
	{
		let localStorage = this.m_process.getLocalStorage();
		let defaultGroupPresentationKey = oFF.OuInventoryView.getLocalStorageDefaultGroupPresentationKey();
		let lastDefaultString = localStorage.getStringByKeyExt(defaultGroupPresentationKey, oFF.OuInventoryViewGroupPresentation.ALL_COLLAPSED.getName());
		if (oFF.XString.isEqual(defaultGroupPresentation.getName(), lastDefaultString))
		{
			let groupPresentationString = localStorage.getStringByKey(oFF.OuInventoryView.getLocalStorageGroupPresentationKey());
			this.m_groupPresentation = oFF.OuInventoryViewGroupPresentation.lookup(groupPresentationString);
		}
		localStorage.putString(defaultGroupPresentationKey, defaultGroupPresentation.getName());
	}
};
oFF.OuInventoryView.prototype.toggleDimensionAxis = function(dim, selectedAxis)
{
	if (dim.getAxisType() !== selectedAxis)
	{
		oFF.OuInventoryView.moveDimensionToAxis(dim, selectedAxis);
		this.notifyChangeListeners();
		return;
	}
	if (oFF.QueryDesignerUtils.canBeRemoved(dim))
	{
		oFF.QueryDesignerUtils.removeDimension(dim);
		this.notifyChangeListeners();
	}
	else
	{
		oFF.OuInventoryView.openFilterDialogWithCallback(dim, (selection) => {
			oFF.QueryDesignerUtils.removeDimension(dim);
			this.notifyChangeListeners();
		}, null);
	}
};
oFF.OuInventoryView.prototype.unobserveDataProviderEvents = function()
{
	if (oFF.XObjectExt.isValidObject(this.m_dataProvider))
	{
		this.m_dataProvider.getEventing().getListenerForLifecycle().removeConsumerByUuid(this.m_lifecycleConsumerId);
		this.m_dataProvider.getEventing().getListenerForModelChanges().removeConsumerByUuid(this.m_modelChangeListenerId);
		this.m_dataProvider.getEventing().getListenerForModelState().removeConsumerByUuid(this.m_modelStateListenerId);
	}
};
oFF.OuInventoryView.prototype.updateAllCheckboxes = function()
{
	for (let i = 0; i < this.m_dimViews.size(); i++)
	{
		let dimView = this.m_dimViews.get(i);
		let dim = dimView.getDimension();
		if (oFF.isNull(dim))
		{
			continue;
		}
		let resultSetAttributes = dim.getResultSetAttributes();
		let attributes = dimView.getChildrenViews();
		for (let k = 0; k < attributes.size(); k++)
		{
			let treeItemView = attributes.get(k);
			let attribute = treeItemView.getAttribute();
			treeItemView.getCheckbox().setChecked(resultSetAttributes.contains(attribute));
		}
	}
	for (let j = 0; j < this.m_structureViews.size(); j++)
	{
		let structureView = this.m_structureViews.get(j);
		oFF.OuInventoryView.updateMasterCheckbox(structureView);
		let structure = structureView.getDimension();
		let visibleMembers = this.getQueryManager().getConvenienceCommands().getVisibleMembers(structure, this.getMembersByDimension(structure));
		this.updateMemberCheckbox(visibleMembers, structureView.getDirectChildren(), null, false);
	}
};
oFF.OuInventoryView.prototype.updateAllIcons = function()
{
	for (let i = 0; i < this.m_dimViews.size(); i++)
	{
		let dimView = this.m_dimViews.get(i);
		let dim = dimView.getDimension();
		if (oFF.notNull(dim))
		{
			oFF.OuInventoryView.updateIcons(dim, dimView);
			let visible = oFF.AxisType.isAxisVisible(dim.getAxisType());
			this.checkMoreButton(dim, dimView.getMoreBtn());
			dimView.getCheckbox().setChecked(visible);
			let groupedDimViews = dimView.getDimensionViews();
			if (!visible && oFF.XCollectionUtils.hasElements(groupedDimViews))
			{
				let partiallyVisible = oFF.XStream.of(groupedDimViews).find((dimV) => {
					return oFF.AxisType.isAxisVisible(dimV.getDimension().getAxisType());
				}).isPresent();
				dimView.getCheckbox().setChecked(partiallyVisible);
				dimView.getCheckbox().setPartiallyChecked(partiallyVisible);
			}
		}
	}
	for (let j = 0; j < this.m_structureViews.size(); j++)
	{
		let structView = this.m_structureViews.get(j);
		let structure = structView.getDimension();
		oFF.OuInventoryView.updateIcons(structure, structView);
	}
};
oFF.OuInventoryView.prototype.updateAllLabels = function()
{
	let textToShow;
	for (let i = 0; i < this.m_dimViews.size(); i++)
	{
		let dimView = this.m_dimViews.get(i);
		let dimension = dimView.getDimension();
		if (oFF.isNull(dimension))
		{
			let displayName = dimView.getDisplayName();
			let displayText = dimView.getDisplayText();
			textToShow = this.m_presentation.composeDisplayStrings(displayName, displayText);
		}
		else
		{
			textToShow = this.m_presentation.getDisplayValueByType(dimension);
		}
		dimView.setText(textToShow);
		this.updateListItemLabels(dimView.getChildrenViews());
	}
	for (let j = 0; j < this.m_structureViews.size(); j++)
	{
		let structView = this.m_structureViews.get(j);
		this.updateListItemLabels(structView.getAllChildren());
	}
};
oFF.OuInventoryView.prototype.updateCalculations = function()
{
	for (let i = 0; i < this.m_structureViews.size(); i++)
	{
		let structureView = this.m_structureViews.get(i);
		let calculations = structureView.getCalculations();
		for (let j = 0; j < calculations.size(); j++)
		{
			let calcView = calculations.get(j);
			let calcMember = calcView.getNode().getDimensionMember();
			let popoverIcon = calcView.getPopoverIcon();
			let messageManager = oFF.OuDesignerFormulaHelper.validateFormula(calcMember);
			popoverIcon.setMessageManager(messageManager);
			popoverIcon.getView().setVisible(messageManager.hasErrors() || messageManager.hasWarnings());
		}
	}
};
oFF.OuInventoryView.prototype.updateControls = function()
{
	this.updateAllLabels();
	this.updateAllCheckboxes();
	this.updateAllIcons();
	this.updateCalculations();
	this.updateSorting();
	if (this.m_searchInProgress)
	{
		this.doSearch(this.m_searchField.getValue());
	}
};
oFF.OuInventoryView.prototype.updateListItemLabels = function(members)
{
	for (let i = 0; i < members.size(); i++)
	{
		let memberComponent = members.get(i);
		let member = memberComponent.getModelComponent();
		let textToShow = this.m_presentation.getDisplayValueByType(member);
		memberComponent.getLabel().setText(textToShow);
		memberComponent.getLabel().setTooltip(textToShow);
	}
};
oFF.OuInventoryView.prototype.updateMemberCheckbox = function(visibleMembers, itemViews, parent, disabled)
{
	let atLeastOneChecked = false;
	for (let i = 0; i < itemViews.size(); i++)
	{
		let itemView = itemViews.get(i);
		let selfVisible = visibleMembers.contains(itemView.getNode().getName());
		let disableChildren = disabled;
		if (oFF.notNull(parent))
		{
			let parentVisible = visibleMembers.contains(parent.getNode().getName());
			disableChildren = disableChildren || parentVisible && !selfVisible;
		}
		let atLeastOneChildChecked = this.updateMemberCheckbox(visibleMembers, itemView.getDirectChildren(), itemView, disableChildren);
		let checkbox = itemView.getCheckbox();
		checkbox.setChecked(selfVisible || atLeastOneChildChecked);
		checkbox.setPartiallyChecked(!selfVisible && atLeastOneChildChecked);
		checkbox.setEnabled(!disabled);
		atLeastOneChecked = atLeastOneChecked || selfVisible || atLeastOneChildChecked;
	}
	return atLeastOneChecked;
};
oFF.OuInventoryView.prototype.updateSorting = function()
{
	for (let i = 0; i < this.m_structureViews.size(); i++)
	{
		this.orderChildren(this.m_structureViews.get(i));
	}
	this.orderDimensions();
};
oFF.OuInventoryView.prototype.updateUi = function()
{
	if (!oFF.XObjectExt.isValidObject(this.m_queryManager) || !oFF.XObjectExt.isValidObject(this.m_queryManager.getQueryModel()) || !this.m_isQueryManagerSet)
	{
		return;
	}
	this.fetchMembersAndBuildUi();
};
oFF.OuInventoryView.prototype.validateFiltersAfterCalculationDeletion = function(deletedMember)
{
	let i18n = oFF.OuInventoryView.getLocalizationProvider();
	let isAccountDimension = deletedMember.getDimension().getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT);
	let filter = this.m_queryManager.getQueryModel().getFilter();
	let linkedFilters = filter.getLinkedFilters();
	oFF.XCollectionUtils.mapEntries(linkedFilters, (filterKey, filterExpression) => {
		let filterElement = filterExpression.getFilterRootElement();
		if (oFF.notNull(filterElement) && filterElement.getOlapComponentType() === oFF.FilterComponentType.FILTER_MEASURE_BASED)
		{
			let mbf = filterElement;
			let memberName = oFF.FilterDialogMBFUtils.getMemberName(mbf);
			if (oFF.XString.isEqual(memberName, deletedMember.getName()))
			{
				filter.linkFilter(filterKey, null);
				let memberDescription = deletedMember.getDisplayDescription();
				let message = i18n.getTextWithPlaceholder2(isAccountDimension ? oFF.OuInventoryViewI18n.NAV_CALCULATION_DELETED_FILTER_DELETED_ACCOUNT : oFF.OuInventoryViewI18n.NAV_CALCULATION_DELETED_FILTER_DELETED_MEASURE, memberDescription, memberDescription);
				this.m_config.getMessageCenter().showWarningToast(message);
				oFF.UiFramework.currentFramework().announce(message, oFF.UiAriaLiveMode.ASSERTIVE);
			}
		}
	});
};
oFF.OuInventoryView.prototype.validateFormulaExceptionsAfterCalculationDeletion = function(deletedMember)
{
	let formulaExceptionManager = this.m_queryManager.getQueryModel().getFormulaExceptionManager();
	if (!oFF.XCollectionUtils.hasElements(formulaExceptionManager))
	{
		return;
	}
	let i18n = oFF.OuInventoryView.getLocalizationProvider();
	for (let i = 0; i < formulaExceptionManager.size(); i++)
	{
		let formulaException = formulaExceptionManager.get(i);
		let baseMeasure = formulaException.getBaseMeasure();
		if (oFF.notNull(baseMeasure) && oFF.XString.isEqual(baseMeasure.getName(), deletedMember.getName()))
		{
			let message = i18n.getTextWithPlaceholder2(oFF.OuInventoryViewI18n.NAV_THRESHOLD_INVALID_INFO_MISSING_CALC, formulaException.getText(), deletedMember.getName());
			this.setInvalidThreshold(message);
		}
		else if (oFF.notNull(baseMeasure) && baseMeasure.getMemberType().isTypeOf(oFF.MemberType.FORMULA))
		{
			let msgs = oFF.OuDesignerFormulaHelper.validateFormula(baseMeasure);
			if (msgs.hasErrors() || msgs.hasWarnings())
			{
				let message = i18n.getTextWithPlaceholder2(oFF.OuInventoryViewI18n.NAV_THRESHOLD_INVALID_INFO_INVALID_CALC, formulaException.getText(), baseMeasure.getName());
				this.setInvalidThreshold(message);
			}
		}
	}
};
oFF.OuInventoryView.prototype.validateOtherFormulasAfterCalculationDeletion = function(deletedMember)
{
	let i18n = oFF.OuInventoryView.getLocalizationProvider();
	let dim = deletedMember.getDimension();
	let members = this.getMembersByDimension(dim);
	for (let i = 0; i < members.size(); i++)
	{
		let member = members.get(i).getDimensionMember();
		if (!member.getMemberType().isTypeOf(oFF.MemberType.FORMULA) || oFF.XString.isEqual(member.getName(), deletedMember.getName()))
		{
			continue;
		}
		let structureMember = member;
		let result = oFF.OuDesignerFormulaHelper.validateFormulaAndExtractDisplayableText(structureMember);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(result))
		{
			this.m_config.getMessageCenter().showWarningToast(result);
			let message = i18n.getTextWithPlaceholder(oFF.OuInventoryViewI18n.NAV_CALCULATION_INVALID_ANNOUNCE_UPDATE, structureMember.getText());
			oFF.UiFramework.currentFramework().announce(message, oFF.UiAriaLiveMode.ASSERTIVE);
		}
	}
};

oFF.OuCalcDetailsAreaValueRetriever = function() {};
oFF.OuCalcDetailsAreaValueRetriever.prototype = new oFF.OuCalcCommandPluginWithSharedSpace();
oFF.OuCalcDetailsAreaValueRetriever.prototype._ff_c = "OuCalcDetailsAreaValueRetriever";

oFF.OuCalcDetailsAreaValueRetriever.GET_ID_ACTION = "GetID";
oFF.OuCalcDetailsAreaValueRetriever.GET_NAME_ACTION = "GetName";
oFF.OuCalcDetailsAreaValueRetriever.PLUGIN_NAME = "CalculationsDetailsAreaRetriever";
oFF.OuCalcDetailsAreaValueRetriever.getCalculationIDCommand = function()
{
	return oFF.XStringUtils.concatenate3(oFF.OuCalcDetailsAreaValueRetriever.PLUGIN_NAME, ".", oFF.OuCalcDetailsAreaValueRetriever.GET_ID_ACTION);
};
oFF.OuCalcDetailsAreaValueRetriever.getCalculationNameCommand = function()
{
	return oFF.XStringUtils.concatenate3(oFF.OuCalcDetailsAreaValueRetriever.PLUGIN_NAME, ".", oFF.OuCalcDetailsAreaValueRetriever.GET_NAME_ACTION);
};
oFF.OuCalcDetailsAreaValueRetriever.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.OTHER;
};
oFF.OuCalcDetailsAreaValueRetriever.prototype.getPluginName = function()
{
	return oFF.OuCalcDetailsAreaValueRetriever.PLUGIN_NAME;
};
oFF.OuCalcDetailsAreaValueRetriever.prototype.registerActions = function(commandController)
{
	commandController.registerAction(oFF.OuCalcDetailsAreaValueRetriever.GET_NAME_ACTION, (commandContext, customObject) => {
		let value = this.getSharedDataSpace().getStringByKey(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_NAME);
		return oFF.XPromise.resolve(oFF.XStringValue.create(value));
	});
	commandController.registerAction(oFF.OuCalcDetailsAreaValueRetriever.GET_ID_ACTION, (commandContext, customObject) => {
		let value = this.getSharedDataSpace().getStringByKey(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID);
		return oFF.XPromise.resolve(oFF.XStringValue.create(value));
	});
};

oFF.OuCalcCodeEditorValueRetriever = function() {};
oFF.OuCalcCodeEditorValueRetriever.prototype = new oFF.OuCalcCommandPluginWithSharedSpace();
oFF.OuCalcCodeEditorValueRetriever.prototype._ff_c = "OuCalcCodeEditorValueRetriever";

oFF.OuCalcCodeEditorValueRetriever.GET_CONTENTS = "GetContents";
oFF.OuCalcCodeEditorValueRetriever.PLUGIN_NAME = "CodeEditorValueRetriever";
oFF.OuCalcCodeEditorValueRetriever.getContentsCommand = function()
{
	return oFF.XStringUtils.concatenate3(oFF.OuCalcCodeEditorValueRetriever.PLUGIN_NAME, ".", oFF.OuCalcCodeEditorValueRetriever.GET_CONTENTS);
};
oFF.OuCalcCodeEditorValueRetriever.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.OTHER;
};
oFF.OuCalcCodeEditorValueRetriever.prototype.getPluginName = function()
{
	return oFF.OuCalcCodeEditorValueRetriever.PLUGIN_NAME;
};
oFF.OuCalcCodeEditorValueRetriever.prototype.registerActions = function(commandController)
{
	commandController.registerAction(oFF.OuCalcCodeEditorValueRetriever.GET_CONTENTS, (commandContext, customObject) => {
		let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
		return oFF.XPromise.resolve(formula);
	});
};

oFF.OuDataProviderVariableDialogAction = function() {};
oFF.OuDataProviderVariableDialogAction.prototype = new oFF.DfOlapDataProviderAction();
oFF.OuDataProviderVariableDialogAction.prototype._ff_c = "OuDataProviderVariableDialogAction";

oFF.OuDataProviderVariableDialogAction.ACTION_NAME = "openVariableDialog";
oFF.OuDataProviderVariableDialogAction.create = function()
{
	let obj = new oFF.OuDataProviderVariableDialogAction();
	obj.setupAction();
	return obj;
};
oFF.OuDataProviderVariableDialogAction.prototype.m_actionResult = null;
oFF.OuDataProviderVariableDialogAction.prototype.m_resolve = null;
oFF.OuDataProviderVariableDialogAction.prototype.m_vdPromise = null;
oFF.OuDataProviderVariableDialogAction.prototype.doAction = function(dataProvider)
{
	if (oFF.notNull(this.m_vdPromise) && !this.m_vdPromise.isSettled())
	{
		return this.m_vdPromise;
	}
	let parameters = this.getParameters();
	let title = parameters.get(0);
	let otherArguments = parameters.size() >= 2 ? oFF.PrUtils.deserialize(parameters.get(1)) : null;
	this.m_actionResult = this.newActionResult();
	this.m_vdPromise = oFF.XPromise.create((resolve, reject) => {
		this.m_resolve = resolve;
		let process = dataProvider.getApplication().getProcess();
		let runner = oFF.ProgramRunner.createRunner(process, oFF.VdProgram.PROGRAM_NAME);
		let queryManager = dataProvider.getQueryManager();
		let autoSubmitEffective = dataProvider.isAutoSubmitEffective();
		runner.setAllArguments(otherArguments);
		runner.setStringArgument(oFF.VdProgram.ARG_TITLE, title);
		runner.setStringArgument(oFF.VdProgram.ARG_DATA_PROVIDER_NAME, dataProvider.getName());
		runner.setBooleanArgument(oFF.VdProgram.ARG_IMPLICIT_SUBMIT, !autoSubmitEffective);
		if (autoSubmitEffective)
		{
			this.setVariablesWinControl(queryManager, true);
			oFF.QueryExecutionListenerLambda.createAndAttach(queryManager, (result) => {
				this.setVariablesWinControl(queryManager, false);
			}, true);
		}
		runner.setProgramTerminatedConsumer(this.onVdProgramTerminated.bind(this));
		runner.runProgram();
	});
	return this.m_vdPromise;
};
oFF.OuDataProviderVariableDialogAction.prototype.getName = function()
{
	return oFF.OuDataProviderVariableDialogAction.ACTION_NAME;
};
oFF.OuDataProviderVariableDialogAction.prototype.onVdProgramTerminated = function(exitData)
{
	let dialogActionResult = oFF.OuDataProviderVariableDialogActionResult.create();
	if (exitData.getBooleanByKey(oFF.VdProgram.EXIT_DATA_WORKFLOW_DONE))
	{
		dialogActionResult.setDialogSubmitted(true);
		this.m_actionResult.getChangesBase().addChangedEventType(oFF.OlapDataProviderEventType.MODEL_CHANGE);
	}
	this.m_actionResult.setReturnValue(dialogActionResult);
	this.m_resolve(this.m_actionResult);
};
oFF.OuDataProviderVariableDialogAction.prototype.releaseObject = function()
{
	this.m_resolve = null;
	this.m_vdPromise = null;
	this.m_actionResult = null;
	oFF.DfOlapDataProviderAction.prototype.releaseObject.call( this );
};
oFF.OuDataProviderVariableDialogAction.prototype.setTypedParameters = function(title, otherArguments)
{
	let parameters = oFF.XList.create();
	parameters.add(title);
	parameters.add(oFF.notNull(otherArguments) ? oFF.PrUtils.serialize(otherArguments, false, false, -1) : null);
	this.setParameters(parameters);
};
oFF.OuDataProviderVariableDialogAction.prototype.setVariablesWinControl = function(queryManager, winControl)
{
	queryManager.stopEventing();
	let variables = queryManager.getVariables();
	oFF.XStream.of(variables).filter((variable) => {
		return variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
	}).filter((variable2) => {
		return !variable2.isHierarchyInfoVariableForExplicitlyInactivatedHierarchy();
	}).map((normalVar) => {
		return normalVar;
	}).forEach((dimVar) => {
		dimVar.setWinControlInAutoSubmit(winControl);
	});
	queryManager.resumeEventing();
};
oFF.OuDataProviderVariableDialogAction.prototype.setupAction = function()
{
	oFF.DfOlapDataProviderAction.prototype.setupAction.call( this );
};

oFF.FdReadMode = function() {};
oFF.FdReadMode.prototype = new oFF.OlapUiReadMode();
oFF.FdReadMode.prototype._ff_c = "FdReadMode";

oFF.FdReadMode.DIMENSION_RELATIONSHIPS = null;
oFF.FdReadMode.staticFdReadModeSetup = function()
{
	oFF.FdReadMode.DIMENSION_RELATIONSHIPS = oFF.OlapUiReadMode.create("dimensionRelationships", oFF.QMemberReadMode.REL_MASTER);
};

oFF.FdComponentValueHelpRange = function() {};
oFF.FdComponentValueHelpRange.prototype = new oFF.FdComponentRange();
oFF.FdComponentValueHelpRange.prototype._ff_c = "FdComponentValueHelpRange";

oFF.FdComponentValueHelpRange.INVALID_ITEM_MARKER = "invalidItem";
oFF.FdComponentValueHelpRange.SUGGESTION_SELECT_EVENT_WAITING_TIME = 100;
oFF.FdComponentValueHelpRange.SUGGESTION_TIMEOUT_LONG = 800;
oFF.FdComponentValueHelpRange.SUGGESTION_TIMEOUT_SHORT = 300;
oFF.FdComponentValueHelpRange.createValueHelpRange = function(model, item, controller, loadSuggestions)
{
	let component = new oFF.FdComponentValueHelpRange();
	component.setupComponent(model, oFF.FdComponentValueHelpRangeLayout.createValueHelpLayout());
	component.m_item = item;
	component.m_controller = controller;
	component.m_loadSuggestions = loadSuggestions;
	return component;
};
oFF.FdComponentValueHelpRange.prototype.m_controller = null;
oFF.FdComponentValueHelpRange.prototype.m_loadSuggestions = null;
oFF.FdComponentValueHelpRange.prototype.m_suggestionTimeoutId = null;
oFF.FdComponentValueHelpRange.prototype.areSuggestionsValidForInput = function(items, input, suggestionsText)
{
	if (!oFF.XCollectionUtils.hasElements(items) || input.isReleased() || this.isInputValid(input))
	{
		return false;
	}
	return oFF.XString.isEqual(input.getValue(), suggestionsText);
};
oFF.FdComponentValueHelpRange.prototype.buildOlapDialogUi = function(genesis)
{
	oFF.FdComponentRange.prototype.buildOlapDialogUi.call( this , genesis);
	let layout = this.getValueHelpRangeLayout();
	let input1 = layout.getInput1();
	let input2 = layout.getInput2();
	let openValueHelpWithHierarchy = this.m_model.isFeatureEnabled(oFF.FdFeature.RANGES_IN_HIERARCHY);
	input1.registerOnValueHelpRequest(oFF.UiLambdaValueHelpRequestListener.create((e1) => {
		this.m_controller.openValueHelp(this.validateInput(layout.getInput1(), false) ? this.m_item.getLowItem() : null, openValueHelpWithHierarchy, oFF.FdDataLoadedLambdaListener.create((items1, messages1) => {
			this.onValueHelpDialogClosed(items1, e1.getControl());
		}, null), null);
	}));
	input2.registerOnValueHelpRequest(oFF.UiLambdaValueHelpRequestListener.create((e2) => {
		this.m_controller.openValueHelp(this.validateInput(layout.getInput2(), false) ? this.m_item.getHighItem() : null, openValueHelpWithHierarchy, oFF.FdDataLoadedLambdaListener.create((items2, messages2) => {
			this.onValueHelpDialogClosed(items2, e2.getControl());
		}, null), null);
	}));
	input1.registerOnLiveChange(oFF.UiLambdaLiveChangeListener.create((e3) => {
		this.onLiveChange(e3);
	}));
	input2.registerOnLiveChange(oFF.UiLambdaLiveChangeListener.create((e4) => {
		this.onLiveChange(e4);
	}));
	input1.registerOnSuggestionSelect(oFF.UiLambdaSuggestionSelectListener.create((e5) => {
		this.onItemSelected(e5.getSelectedItem().getCustomObject(), e5.getControl());
	}));
	input2.registerOnSuggestionSelect(oFF.UiLambdaSuggestionSelectListener.create((e6) => {
		this.onItemSelected(e6.getSelectedItem().getCustomObject(), e6.getControl());
	}));
};
oFF.FdComponentValueHelpRange.prototype.clearSuggestionTimeout = function()
{
	oFF.XTimeout.clear(this.m_suggestionTimeoutId);
	this.m_suggestionTimeoutId = null;
};
oFF.FdComponentValueHelpRange.prototype.getItemText = function(item)
{
	let presentation = this.m_model.getPresentationsModel().getSelectedMainPresentation();
	if (oFF.notNull(presentation))
	{
		let primaryValue = item.getFormattedValueByPresentation(presentation.getPrimaryValue());
		let secondary = presentation.getSecondaryValue();
		let secondaryValue = oFF.notNull(secondary) ? item.getFormattedValueByPresentation(secondary) : null;
		return this.m_model.getConfig().getValueFormatter().format(primaryValue, secondaryValue);
	}
	return oFF.FdComponentRange.prototype.getItemText.call( this , item);
};
oFF.FdComponentValueHelpRange.prototype.getValueHelpRangeLayout = function()
{
	return this.getLayout();
};
oFF.FdComponentValueHelpRange.prototype.isInputValid = function(input)
{
	let item = input === this.getValueHelpRangeLayout().getInput1() ? this.m_item.getLowItem() : this.m_item.getHighItem();
	return oFF.notNull(item) && !item.getProperties().containsKey(oFF.FdComponentValueHelpRange.INVALID_ITEM_MARKER);
};
oFF.FdComponentValueHelpRange.prototype.onEditingEnd = function(event)
{
	this.clearSuggestionTimeout();
	this.updateRangeText();
	this.onDataChanged(false);
	let input = event.getControl();
	let value = input.getValue();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(value) && !this.isInputValid(input))
	{
		input.setBusy(true);
		oFF.XTimeout.timeout(oFF.FdComponentValueHelpRange.SUGGESTION_SELECT_EVENT_WAITING_TIME, () => {
			if (!input.isReleased() && input.isBusy())
			{
				this.m_loadSuggestions(value, oFF.FdDataLoadedLambdaListener.create((items, messages) => {
					if (!input.isReleased() && input.isBusy())
					{
						if (this.areSuggestionsValidForInput(items, input, value))
						{
							let validateOnText = this.m_model.getPresentationsModel().getSelectedMainPresentation().hasTextPresentation();
							oFF.XStream.of(items).find((item) => {
								return oFF.XString.isEqual(item.getDisplayKey(), value) || (validateOnText && oFF.XString.isEqual(item.getText(), value));
							}).ifPresent((matchingItem) => {
								this.onItemSelected(matchingItem, input);
							});
						}
						if (input.isBusy())
						{
							this.validateOnEditingEnd(event.getControl());
						}
					}
				}, null));
			}
		});
	}
	else
	{
		this.validateOnEditingEnd(event.getControl());
	}
};
oFF.FdComponentValueHelpRange.prototype.onItemSelected = function(item, customIdentifier)
{
	let layout = this.getValueHelpRangeLayout();
	if (customIdentifier === layout.getInput1())
	{
		if (this.isRangeItem())
		{
			this.m_item.setLow(item);
		}
		else
		{
			item.setFdComparisonOperator(this.m_item.getFdComparisonOperator());
			this.replaceItem(item);
		}
	}
	else if (customIdentifier === layout.getInput2())
	{
		this.m_item.setHigh(item);
	}
	this.updateUI();
	this.validateOnEditingEnd(customIdentifier);
};
oFF.FdComponentValueHelpRange.prototype.onLiveChange = function(event)
{
	oFF.FdComponentRange.prototype.onLiveChange.call( this , event);
	let input = event.getControl();
	this.getValueHelpRangeLayout().clearSuggestions(input);
	let suggestionTimeoutActive = oFF.notNull(this.m_suggestionTimeoutId);
	this.clearSuggestionTimeout();
	let item = this.setInputTextToItem(input);
	item.getProperties().putBoolean(oFF.FdComponentValueHelpRange.INVALID_ITEM_MARKER, true);
	let text = input.getValue();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		let suggestionTimeout = suggestionTimeoutActive ? oFF.FdComponentValueHelpRange.SUGGESTION_TIMEOUT_LONG : oFF.FdComponentValueHelpRange.SUGGESTION_TIMEOUT_SHORT;
		this.m_suggestionTimeoutId = oFF.XTimeout.timeout(suggestionTimeout, () => {
			this.m_suggestionTimeoutId = null;
			this.m_loadSuggestions(text, oFF.FdDataLoadedLambdaListener.create((items, messages) => {
				if (!input.isBusy() && this.areSuggestionsValidForInput(items, input, text))
				{
					this.getValueHelpRangeLayout().showSuggestions(input, items);
				}
			}, null));
		});
	}
};
oFF.FdComponentValueHelpRange.prototype.onValueHelpDialogClosed = function(items, customIdentifier)
{
	if (oFF.notNull(items))
	{
		if (items.hasElements())
		{
			this.onItemSelected(items.get(0), customIdentifier);
		}
		else
		{
			this.onItemSelected(oFF.FdSimpleItem.create(null, null, null), customIdentifier);
		}
	}
};
oFF.FdComponentValueHelpRange.prototype.releaseObject = function()
{
	oFF.FdComponentRange.prototype.releaseObject.call( this );
	this.m_controller = null;
	this.m_loadSuggestions = null;
	this.clearSuggestionTimeout();
};
oFF.FdComponentValueHelpRange.prototype.validateInput = function(input, showValidationMessages)
{
	return oFF.FdComponentRange.prototype.validateInput.call( this , input, showValidationMessages) && this.validateValueHelpItem(input, showValidationMessages);
};
oFF.FdComponentValueHelpRange.prototype.validateOnEditingEnd = function(inputEditingEnded)
{
	let layout = this.getValueHelpRangeLayout();
	let input1 = layout.getInput1();
	let input2 = layout.getInput2();
	let validationInput1 = oFF.XStringUtils.isNullOrEmpty(input1.getValue()) || (oFF.FdComponentRange.prototype.validateInput.call( this , input1, true) && this.validateValueHelpItem(input1, true));
	let validationInput2 = oFF.XStringUtils.isNullOrEmpty(input2.getValue()) || (oFF.FdComponentRange.prototype.validateInput.call( this , input2, true) && this.validateValueHelpItem(input2, true));
	if (validationInput1 && validationInput2)
	{
		layout.clearMessage();
	}
	else if (validationInput1)
	{
		input1.setValueState(null);
	}
	else if (validationInput2)
	{
		input2.setValueState(null);
	}
	inputEditingEnded.setBusy(false);
};
oFF.FdComponentValueHelpRange.prototype.validateValueHelpItem = function(input, showValidationMessages)
{
	if (!this.isInputValid(input))
	{
		if (showValidationMessages)
		{
			this.getValueHelpRangeLayout().showMessage(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_RANGES_ERROR_NOT_VALID), input, true);
		}
		return false;
	}
	return true;
};

oFF.FdComponentValueHelpRangeLayout = function() {};
oFF.FdComponentValueHelpRangeLayout.prototype = new oFF.FdComponentRangeLayout();
oFF.FdComponentValueHelpRangeLayout.prototype._ff_c = "FdComponentValueHelpRangeLayout";

oFF.FdComponentValueHelpRangeLayout.createValueHelpLayout = function()
{
	return new oFF.FdComponentValueHelpRangeLayout();
};
oFF.FdComponentValueHelpRangeLayout.prototype.addContent = function(container)
{
	oFF.FdComponentRangeLayout.prototype.addContent.call( this , container);
	this.updateInputField(this.getInput1());
	this.updateInputField(this.getInput2());
};
oFF.FdComponentValueHelpRangeLayout.prototype.clearSuggestions = function(input)
{
	input.clearSuggestions();
	input.closeSuggestions();
};
oFF.FdComponentValueHelpRangeLayout.prototype.showSuggestions = function(input, suggestedItems)
{
	this.clearSuggestions(input);
	if (oFF.XCollectionUtils.hasElements(suggestedItems))
	{
		let suggestions = oFF.XList.create();
		oFF.XCollectionUtils.forEach(suggestedItems, (item) => {
			let suggestionItem = this.m_genesis.newControl(oFF.UiType.DROPDOWN_ITEM);
			let displayKey = oFF.XStringUtils.nullToEmpty(item.getDisplayKey());
			if (item.hasText())
			{
				let text = item.getText();
				suggestionItem.setText(oFF.XStringUtils.abbreviate(text, 50));
				suggestionItem.setAdditionalText(displayKey);
				suggestionItem.setTooltip(oFF.notNull(text) ? oFF.XStringUtils.concatenate3(text, " - ", displayKey) : displayKey);
			}
			else
			{
				suggestionItem.setText(displayKey);
				suggestionItem.setTooltip(displayKey);
			}
			suggestionItem.setName(displayKey);
			suggestionItem.setCustomObject(item);
			suggestions.add(suggestionItem);
		});
		input.addAllSuggestions(suggestions);
		input.showSuggestions();
	}
};
oFF.FdComponentValueHelpRangeLayout.prototype.updateInputField = function(input)
{
	input.setMaxWidth(null);
	input.setShowValueHelp(true);
	input.setFilterSuggests(false);
};

oFF.OuSelectHierarchyListView = function() {};
oFF.OuSelectHierarchyListView.prototype = new oFF.SuTableViewBase();
oFF.OuSelectHierarchyListView.prototype._ff_c = "OuSelectHierarchyListView";

oFF.OuSelectHierarchyListView.DESCRIPTION_COLUMN_NAME = "OuSelectHierarchyListViewDescription";
oFF.OuSelectHierarchyListView.ID_COLUMN_NAME = "OuSelectHierarchyListViewId";
oFF.OuSelectHierarchyListView.create = function(i18n, dataProvider)
{
	let view = new oFF.OuSelectHierarchyListView();
	view.m_dataProvider = dataProvider;
	view.m_i18n = i18n;
	view.m_selectedHierarchyName = null;
	view.m_paginatorEnabled = true;
	return view;
};
oFF.OuSelectHierarchyListView.prototype.m_dimension = null;
oFF.OuSelectHierarchyListView.prototype.m_i18n = null;
oFF.OuSelectHierarchyListView.prototype.m_selectedHierarchyName = null;
oFF.OuSelectHierarchyListView.prototype.m_utils = null;
oFF.OuSelectHierarchyListView.prototype.addNewTableRow = function(data)
{
	let hierarchyName = data.getHierarchyName();
	let hierarchyDescription = this.getHierarchyDescription(data);
	let hierarchyTooltip = oFF.QueryPresentationUtils.DESCRIPTION_AND_ID.composeDisplayStrings(hierarchyName, hierarchyDescription);
	let tableRow = oFF.SuTableViewBase.prototype.addNewTableRow.call( this , data);
	tableRow.setName(hierarchyName);
	tableRow.setTooltip(hierarchyTooltip);
	let descCell = tableRow.addNewResponsiveTableCell();
	descCell.setText(hierarchyDescription);
	let idCell = tableRow.addNewResponsiveTableCell();
	idCell.setText(hierarchyName);
	return tableRow;
};
oFF.OuSelectHierarchyListView.prototype.buildColumn = function(text, name, isVisible)
{
	let column = this.m_table.addNewResponsiveTableColumn();
	column.setNewHeader(oFF.UiType.LABEL).setText(text);
	column.setName(name);
	column.setVisible(isVisible);
};
oFF.OuSelectHierarchyListView.prototype.buildColumns = function()
{
	let i18n = oFF.XLocalizationCenter.getCenter();
	this.buildColumn(i18n.getText(oFF.OuHierarchyDialogI18n.DESCRIPTION_COLUMN_TEXT), oFF.OuSelectHierarchyListView.DESCRIPTION_COLUMN_NAME, true);
	this.buildColumn(i18n.getText(oFF.OuHierarchyDialogI18n.ID_COLUMN_TEXT), oFF.OuSelectHierarchyListView.ID_COLUMN_NAME, true);
};
oFF.OuSelectHierarchyListView.prototype.calculateListViewHeight = function()
{
	let maxTableHeightInRems = (this.m_dataProvider.getMaxItems() + 1) * 2;
	let viewHeightInRems = maxTableHeightInRems + 2 + 0.1;
	return oFF.UiCssLength.createExt(viewHeightInRems, oFF.UiCssSizeUnit.REM);
};
oFF.OuSelectHierarchyListView.prototype.enableSorting = function(enable) {};
oFF.OuSelectHierarchyListView.prototype.getHierarchyDescription = function(catItem)
{
	return this.getUtils().getHierarchyDescription(catItem);
};
oFF.OuSelectHierarchyListView.prototype.getTableRows = function()
{
	let rows = oFF.XList.create();
	let list = this.m_dataProvider.get();
	if (oFF.notNull(list))
	{
		let iterator = list.getIterator();
		while (oFF.notNull(iterator) && iterator.hasNext())
		{
			let datasource = iterator.next();
			let newRow = this.addNewTableRow(datasource);
			rows.add(newRow);
		}
	}
	return rows;
};
oFF.OuSelectHierarchyListView.prototype.getUtils = function()
{
	if (oFF.isNull(this.m_utils))
	{
		this.m_utils = oFF.OuSelectHierarchyDialogUtils.create(this.m_i18n, this.m_dimension);
	}
	return this.m_utils;
};
oFF.OuSelectHierarchyListView.prototype.layoutView = function(viewControl)
{
	viewControl.setName("ffOuSelectHierarchyListView");
	viewControl.addCssClass("ffOuSelectHierarchyListView");
	viewControl.useMaxSpace();
	viewControl.setHeight(this.calculateListViewHeight());
	oFF.SuTableViewBase.prototype.layoutView.call( this , viewControl);
	this.m_table.registerOnAfterRender(oFF.UiLambdaAfterRenderListener.create(this.onAfterRender.bind(this)));
	this.updateUI();
};
oFF.OuSelectHierarchyListView.prototype.onAfterRender = function(event)
{
	this.m_table.setSelectedName(this.m_selectedHierarchyName);
};
oFF.OuSelectHierarchyListView.prototype.onDataFetched = function() {};
oFF.OuSelectHierarchyListView.prototype.setSelectedItem = function(item)
{
	this.m_selectedHierarchyName = item.getHierarchyName();
};
oFF.OuSelectHierarchyListView.prototype.updateColumnSetting = function(columnId, isVisible) {};

oFF.VdVariantManagePopup = function() {};
oFF.VdVariantManagePopup.prototype = new oFF.VdVariantPopupBase();
oFF.VdVariantManagePopup.prototype._ff_c = "VdVariantManagePopup";

oFF.VdVariantManagePopup.ACCEPT = "variantAccept";
oFF.VdVariantManagePopup.BUTTON_FLEX = "0 0 32px";
oFF.VdVariantManagePopup.CANCEL = "variantCancel";
oFF.VdVariantManagePopup.DELETE = "variantDelete";
oFF.VdVariantManagePopup.EDIT = "variantEdit";
oFF.VdVariantManagePopup.createManagePopup = function(manager, genesis, processor, onFinished)
{
	let newPopup = new oFF.VdVariantManagePopup();
	newPopup.setupManagePopup(manager, genesis, processor, onFinished);
	return newPopup;
};
oFF.VdVariantManagePopup.prototype.m_currentModel = null;
oFF.VdVariantManagePopup.prototype.m_onFinished = null;
oFF.VdVariantManagePopup.prototype.addEmptySection = function()
{
	let emptySection = this.addFormSection(null, null, true);
	let emptyLabel = emptySection.addFormLabel(null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EMPTY), null);
	emptyLabel.setTextAlign(oFF.UiTextAlign.CENTER);
};
oFF.VdVariantManagePopup.prototype.addVariantSection = function(variant)
{
	let currentName = variant.getName();
	let currentText = variant.getText();
	let currentScope = variant.getScope();
	let section = this.addVariantSectionBase(currentName, currentText, currentScope);
	section.setCustomObject(variant);
	let textItem = section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT);
	textItem.setCustomValidator((txt) => {
		this.validateDisplayName(txt, variant);
	});
	let nameItem = section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME);
	nameItem.setCustomValidator((nme) => {
		this.validateTechnicalName(nme, variant);
	});
	section.addFormButton(oFF.VdVariantManagePopup.ACCEPT, null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_ACCEPT), "accept", () => {
		section.validate();
		if (section.isValid())
		{
			this.modifyVariant(section);
			section.focus();
		}
		else
		{
			this.shake();
		}
	}).setFlex(oFF.VdVariantManagePopup.BUTTON_FLEX);
	section.addFormButton(oFF.VdVariantManagePopup.CANCEL, null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT_CANCEL), "cancel", () => {
		this.cancelEdit(section);
		this.setEditMode(section, false);
		section.focus();
	}).setFlex(oFF.VdVariantManagePopup.BUTTON_FLEX);
	section.addFormButton(oFF.VdVariantManagePopup.EDIT, null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_EDIT), "edit", () => {
		this.setEditMode(section, true);
		section.focus();
	}).setFlex(oFF.VdVariantManagePopup.BUTTON_FLEX);
	section.addFormButton(oFF.VdVariantManagePopup.DELETE, null, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE), "delete", () => {
		this.openDeleteConfirmation(section);
	}).setFlex(oFF.VdVariantManagePopup.BUTTON_FLEX);
	section.addFormLabel(null, null, null).setFlex("0 0 0");
	this.setEditMode(section, false);
};
oFF.VdVariantManagePopup.prototype.buildPopupContent = function(genesis)
{
	oFF.VdVariantPopupBase.prototype.buildPopupContent.call( this , genesis);
	let root = genesis.getRoot();
	root.setMinHeight(oFF.UiCssLength.create("60px"));
	root.setBusy(true);
};
oFF.VdVariantManagePopup.prototype.cancelEdit = function(section)
{
	let structure = this.m_currentModel.getStructureByKey(section.getName());
	let oldName = structure.getStringByKey(oFF.VdVariantPopupBase.PROPERY_NAME);
	let oldText = structure.getStringByKey(oFF.VdVariantPopupBase.PROPERY_TEXT);
	let oldScope = structure.getStringByKey(oFF.VdVariantPopupBase.PROPERY_SCOPE);
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT).setValue(oFF.XStringValue.create(oldText));
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_SCOPE).setValue(oFF.XStringValue.create(oldScope));
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME).setValue(oFF.XStringValue.create(oldName));
	section.setValid();
};
oFF.VdVariantManagePopup.prototype.configurePopup = function(dialog)
{
	oFF.VdVariantPopupBase.prototype.configurePopup.call( this , dialog);
	dialog.setName("VdVariantManagePopup");
	dialog.setTitle(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_MANAGE));
	this.setReadOnly();
	this.setCancelButtonIcon(null);
	this.setCancelButtonText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CLOSE));
};
oFF.VdVariantManagePopup.prototype.modifyVariant = function(section)
{
	let variant = section.getCustomObject();
	let newText = section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT).getValue().getStringRepresentation();
	let newName = section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME).getValue().getStringRepresentation();
	let newScope = oFF.Scope.lookupByName(section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_SCOPE).getValue().getStringRepresentation());
	if (oFF.XString.isEqual(variant.getText(), newText) && variant.getScope() === newScope && (oFF.XString.isEqual(variant.getName(), newName) || newScope === oFF.Scope.USER))
	{
		this.setEditMode(section, false);
		return;
	}
	variant.setText(newText);
	variant.setScope(newScope);
	variant.setName(newName);
	this.setBusy(true);
	this.m_processor.saveVariableVariant(variant, oFF.OlapUiValueHelpAbstract.s_syncType, oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		this.setBusy(false);
		if (extResult.hasErrors())
		{
			this.showGeneralErrorMessage(extResult, oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_CHANGE);
			this.shake();
		}
		else
		{
			this.updateSectionTexts(section, variant.getName(), variant.getText(), variant.getScope());
			this.m_currentModel.put(section.getName(), oFF.PrUtils.deepCopyElement(section.getValue()));
			this.setEditMode(section, false);
		}
	}), null);
};
oFF.VdVariantManagePopup.prototype.onPopupClosed = function(controlEvent)
{
	oFF.VdVariantPopupBase.prototype.onPopupClosed.call( this , controlEvent);
	if (oFF.notNull(this.m_onFinished))
	{
		this.m_onFinished();
	}
	oFF.XObjectExt.release(this);
};
oFF.VdVariantManagePopup.prototype.onPopupOpened = function(controlEvent)
{
	oFF.VdVariantPopupBase.prototype.onPopupOpened.call( this , controlEvent);
	this.m_processor.transferVariables(oFF.OlapUiValueHelpAbstract.s_syncType, oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		this.getGenesis().getRoot().setBusy(false);
		this.updateVariantSections();
		this.m_currentModel = oFF.PrUtils.createDeepCopy(this.getJsonModel());
	}), null);
};
oFF.VdVariantManagePopup.prototype.openDeleteConfirmation = function(section)
{
	let variantName = section.getCustomObject().getText();
	let title = this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_WARNING);
	let text = this.m_i18n.getTextWithPlaceholder(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_DELETE_CONFIRMATION, variantName);
	let confirmPopup = oFF.UtConfirmPopup.create(this.getGenesis(), title, text);
	confirmPopup.setConfirmButtonIcon(null);
	confirmPopup.setConfirmButtonText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_DELETE));
	confirmPopup.setCancelButtonIcon(null);
	confirmPopup.setCancelButtonText(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_POPUP_CANCEL));
	confirmPopup.setConfirmProcedure(() => {
		this.removeVariant(section);
	});
	confirmPopup.open();
};
oFF.VdVariantManagePopup.prototype.releaseObject = function()
{
	this.m_onFinished = null;
	oFF.VdVariantPopupBase.prototype.releaseObject.call( this );
};
oFF.VdVariantManagePopup.prototype.removeVariant = function(section)
{
	this.setBusy(true);
	let variant = section.getCustomObject();
	this.m_processor.deleteVariableVariant(variant, oFF.OlapUiValueHelpAbstract.s_syncType, oFF.VariableProcessorCallbackLambda.createSingleUse((extResult) => {
		this.setBusy(false);
		if (extResult.hasErrors())
		{
			this.showGeneralErrorMessage(extResult, oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_DELETE);
			this.shake();
		}
		else
		{
			this.removeFormItemByKey(section.getName());
			let allFormItems = this.getAllFormItems();
			if (allFormItems.size() === 1 && oFF.XString.isEqual(allFormItems.get(0).getName(), oFF.VdVariantPopupBase.TITLE_SECTION))
			{
				this.clearFormItems();
				this.addEmptySection();
			}
		}
	}), null);
};
oFF.VdVariantManagePopup.prototype.setEditMode = function(section, editMode)
{
	let variant = section.getCustomObject();
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT).setEditable(editMode);
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_SCOPE).setEditable(editMode);
	section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME).setEditable(editMode && variant.getScope() !== oFF.Scope.USER);
	section.getFormControlByName(oFF.VdVariantManagePopup.ACCEPT).setVisible(editMode);
	section.getFormControlByName(oFF.VdVariantManagePopup.CANCEL).setVisible(editMode);
	section.getFormControlByName(oFF.VdVariantManagePopup.EDIT).setVisible(!editMode);
	section.getFormControlByName(oFF.VdVariantManagePopup.DELETE).setVisible(!editMode);
};
oFF.VdVariantManagePopup.prototype.setupManagePopup = function(manager, genesis, processor, onFinished)
{
	this.setupPopupBase(manager, processor);
	this.m_onFinished = onFinished;
	this.setupPopup(genesis);
};
oFF.VdVariantManagePopup.prototype.updateVariantSections = function()
{
	this.clearFormItems();
	let variants = this.m_processor.getVariableVariants();
	if (!oFF.XCollectionUtils.hasElements(variants))
	{
		this.addEmptySection();
		return;
	}
	let titleSection = this.addTitleSection();
	if (oFF.notNull(titleSection))
	{
		titleSection.addFormLabel(null, null, null).setFlex(oFF.VdVariantManagePopup.BUTTON_FLEX);
		titleSection.addFormLabel(null, null, null).setFlex(oFF.VdVariantManagePopup.BUTTON_FLEX);
	}
	oFF.XStream.of(variants).filter((usr1) => {
		return usr1.getScope() === oFF.Scope.USER;
	}).sorted(oFF.VdVariantComparator.getInstance()).forEach((usr2) => {
		this.addVariantSection(usr2);
	});
	oFF.XStream.of(variants).filter((gbl1) => {
		return gbl1.getScope() === oFF.Scope.GLOBAL;
	}).sorted(oFF.VdVariantComparator.getInstance()).forEach((gbl2) => {
		this.addVariantSection(gbl2);
	});
	oFF.XStream.of(this.getAllFormItems()).filter((formItem) => {
		return !oFF.XString.isEqual(formItem.getKey(), oFF.VdVariantPopupBase.TITLE_SECTION);
	}).findAny().ifPresent((item) => {
		item.focus();
	});
};

oFF.VdVariantSavePopup = function() {};
oFF.VdVariantSavePopup.prototype = new oFF.VdVariantPopupBase();
oFF.VdVariantSavePopup.prototype._ff_c = "VdVariantSavePopup";

oFF.VdVariantSavePopup.createSavePopup = function(manager, genesis, processor, onFinished)
{
	let newPopup = new oFF.VdVariantSavePopup();
	newPopup.setupSavePopup(manager, genesis, processor, onFinished);
	return newPopup;
};
oFF.VdVariantSavePopup.prototype.m_done = false;
oFF.VdVariantSavePopup.prototype.m_onFinished = null;
oFF.VdVariantSavePopup.prototype.m_savedVariant = null;
oFF.VdVariantSavePopup.prototype.m_section = null;
oFF.VdVariantSavePopup.prototype.buildPopupContent = function(genesis)
{
	oFF.VdVariantPopupBase.prototype.buildPopupContent.call( this , genesis);
	this.addTitleSection();
	this.m_section = this.addVariantSectionBase(null, null, oFF.Scope.USER);
	let textItem = this.m_section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT);
	textItem.setCustomValidator((txt) => {
		if (!this.m_done)
		{
			this.validateDisplayName(txt, null);
		}
	});
	let nameItem = this.m_section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_NAME);
	nameItem.setCustomValidator((nme) => {
		if (!this.m_done)
		{
			this.validateTechnicalName(nme, null);
		}
	});
};
oFF.VdVariantSavePopup.prototype.configurePopup = function(dialog)
{
	oFF.VdVariantPopupBase.prototype.configurePopup.call( this , dialog);
	dialog.setName("VdVariantSavePopup");
	dialog.setTitle(this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE));
	this.setAfterOpenConsumer((form2) => {
		this.m_section.getFormItemByKey(oFF.VdVariantPopupBase.PROPERY_TEXT).focus();
	});
	this.setBeforeSubmitPredicate((form1) => {
		return this.saveNewVariant();
	});
	this.setCloseProcedure(() => {
		this.m_onFinished(null);
	});
};
oFF.VdVariantSavePopup.prototype.onPopupClosed = function(controlEvent)
{
	oFF.VdVariantPopupBase.prototype.onPopupClosed.call( this , controlEvent);
	if (oFF.notNull(this.m_onFinished))
	{
		this.m_onFinished(this.m_savedVariant);
	}
	oFF.XObjectExt.release(this);
};
oFF.VdVariantSavePopup.prototype.onPopupOpened = function(controlEvent) {};
oFF.VdVariantSavePopup.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.setBusy(false);
	if (extResult.hasErrors())
	{
		this.showGeneralErrorMessage(extResult, this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_CANNOT_SAVE));
		this.shake();
	}
	else
	{
		this.m_done = true;
		this.m_savedVariant = customIdentifier;
		this.showSuccessMessage();
		this.submit();
	}
};
oFF.VdVariantSavePopup.prototype.releaseObject = function()
{
	this.m_onFinished = null;
	oFF.VdVariantPopupBase.prototype.releaseObject.call( this );
};
oFF.VdVariantSavePopup.prototype.saveNewVariant = function()
{
	if (this.m_done)
	{
		return true;
	}
	this.validate();
	if (!this.isValid())
	{
		this.shake();
		return false;
	}
	this.setBusy(true);
	let newVariantData = this.m_section.getValue();
	let name = newVariantData.getStringByKey(oFF.VdVariantPopupBase.PROPERY_NAME);
	let text = newVariantData.getStringByKey(oFF.VdVariantPopupBase.PROPERY_TEXT);
	let scope = oFF.Scope.lookupByName(newVariantData.getStringByKey(oFF.VdVariantPopupBase.PROPERY_SCOPE));
	let dataSource = this.m_processor.getDataSource();
	let variant = oFF.QFactory.createVariableVariant(dataSource, name, text, scope);
	this.m_processor.saveVariableVariant(variant, oFF.OlapUiValueHelpAbstract.s_syncType, this, variant);
	return false;
};
oFF.VdVariantSavePopup.prototype.setupSavePopup = function(manager, genesis, processor, onFinished)
{
	this.setupPopupBase(manager, processor);
	this.m_onFinished = onFinished;
	this.setupPopup(genesis);
};
oFF.VdVariantSavePopup.prototype.showSuccessMessage = function()
{
	let uiContext = this.m_manager.getUiContext();
	let msg = this.m_i18n.getText(oFF.OuVariableDialogI18nLegacy.I18N_VARIANT_SAVE_SUCCESS);
	uiContext.getMessageCenter().postMessage(oFF.UiMessageType.SUCCESS, msg, oFF.VdVariantPopupBase.COMPONENT_NAME);
};

oFF.OuCalcDetailsAreaPlugin = function() {};
oFF.OuCalcDetailsAreaPlugin.prototype = new oFF.OuCalcComponentPluginWithSharedSpace();
oFF.OuCalcDetailsAreaPlugin.prototype._ff_c = "OuCalcDetailsAreaPlugin";

oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID = "calculations.id";
oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_NAME = "calculations.name";
oFF.OuCalcDetailsAreaPlugin.ID_VALID_REGEXP = "^[a-zA-Z][a-zA-Z0-9_]*$";
oFF.OuCalcDetailsAreaPlugin.PLUGIN_NAME = "DetailsAreaPlugin";
oFF.OuCalcDetailsAreaPlugin.VALIDATION_STATE = "com.sap.ff.calculations.plugins.calculations.OuCalcDetailsAreaPlugin.ValidationState";
oFF.OuCalcDetailsAreaPlugin.prototype.m_detailsAreaView = null;
oFF.OuCalcDetailsAreaPlugin.prototype.m_eventListener = null;
oFF.OuCalcDetailsAreaPlugin.prototype.m_genesis = null;
oFF.OuCalcDetailsAreaPlugin.prototype.m_preferences = null;
oFF.OuCalcDetailsAreaPlugin.prototype.buildPluginUi = function(genesis)
{
	this.m_genesis = oFF.XObjectExt.assertNotNull(genesis);
};
oFF.OuCalcDetailsAreaPlugin.prototype.destroyPlugin = function()
{
	this.m_detailsAreaView = oFF.XObjectExt.release(this.m_detailsAreaView);
	this.m_eventListener = oFF.XObjectExt.release(this.m_eventListener);
	this.m_genesis = null;
	oFF.OuCalcComponentPluginWithSharedSpace.prototype.destroyPlugin.call( this );
};
oFF.OuCalcDetailsAreaPlugin.prototype.getAllMemberIds = function(datasource, initialData)
{
	if (!initialData.isEdit())
	{
		return datasource.getAllMemberIds();
	}
	let membersIds = oFF.XList.create();
	membersIds.addAll(datasource.getAllMemberIds());
	membersIds.removeElement(initialData.getName());
	return membersIds.getValuesAsReadOnlyList();
};
oFF.OuCalcDetailsAreaPlugin.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.SYSTEM;
};
oFF.OuCalcDetailsAreaPlugin.prototype.getPluginName = function()
{
	return oFF.OuCalcDetailsAreaPlugin.PLUGIN_NAME;
};
oFF.OuCalcDetailsAreaPlugin.prototype.notifyValidationState = function(isValid)
{
	if (this.m_preferences.isValidationEnabled())
	{
		this.getSharedDataSpace().putBoolean(oFF.OuCalcDetailsAreaPlugin.VALIDATION_STATE, isValid);
	}
};
oFF.OuCalcDetailsAreaPlugin.prototype.setupInterViewsCommunication = function()
{
	this.m_eventListener = oFF.OuCalcEventListenerManager.create(this.getNotificationCenter());
	this.m_detailsAreaView.addOnIdChangeConsumer((detailsAreaView) => {
		this.getSharedDataSpace().putString(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID, detailsAreaView.getId());
		this.notifyValidationState(!detailsAreaView.hasErrors());
	});
	this.m_detailsAreaView.addOnNameChangeConsumer((detailsAreaView) => {
		this.getSharedDataSpace().putString(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_NAME, detailsAreaView.getName());
		this.notifyValidationState(!detailsAreaView.hasErrors());
	});
	this.m_eventListener.onControlFocused((component) => {
		if (component.isTypeOf(oFF.OuCalcUiComponent.DETAILS_PANEL))
		{
			this.m_detailsAreaView.focus();
		}
	});
	this.m_eventListener.onInitialDataSet((initialData) => {
		this.getSharedDataSpace().putString(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID, initialData.getName());
		this.getSharedDataSpace().putString(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_NAME, initialData.getDescription());
		this.m_detailsAreaView.setInitialData(initialData.getName(), initialData.getDescription());
	});
};
oFF.OuCalcDetailsAreaPlugin.prototype.setupPlugin = function(controller)
{
	controller.getLocalNotificationCenter().addObserverForName(oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME, (notificationData) => {
		let initialData = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_INITIAL_DATA);
		let datasource = notificationData.getXObjectByKey(oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY);
		this.m_preferences = notificationData.getXObjectByKeyExt(oFF.OuCalcCalculations.FORMULA_PREFERENCES, oFF.FePreferences.createDefault());
		this.getSharedDataSpace().putString(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID, initialData.getName());
		this.getSharedDataSpace().putString(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_NAME, initialData.getDescription());
		let validator = oFF.FeCalculationValidator.createEmpty();
		if (this.m_preferences.isValidationEnabled())
		{
			validator = initialData.isEdit() ? oFF.FeCalculationValidator.createOnlyName(256) : oFF.FeCalculationValidator.create(256, oFF.OuCalcDetailsAreaPlugin.ID_VALID_REGEXP, this.getAllMemberIds(datasource, initialData));
		}
		this.m_detailsAreaView = oFF.OuCalcDetailsAreaView.create(validator, initialData.getName(), initialData.getDescription(), initialData.isEdit());
		this.m_detailsAreaView.renderView(this.m_genesis);
		this.notifyValidationState(!this.m_detailsAreaView.hasErrors());
		this.m_genesis.setRoot(this.m_detailsAreaView.getView());
		this.setupInterViewsCommunication();
	});
	return oFF.OuCalcComponentPluginWithSharedSpace.prototype.setupPlugin.call( this , controller);
};

oFF.OuCalcAssistancePluginV2 = function() {};
oFF.OuCalcAssistancePluginV2.prototype = new oFF.OuCalcComponentPluginWithSharedSpace();
oFF.OuCalcAssistancePluginV2.prototype._ff_c = "OuCalcAssistancePluginV2";

oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED = "com.sap.ff.notification.calculations.assistancePanelCollapsed.v2";
oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_ASSISTANCE_PANEL_COLLAPSED_DATA = "collapsed";
oFF.OuCalcAssistancePluginV2.FE_NOTIFICATION_EXPLAIN = "com.sap.ff.calculations.notification.assistance.ai.explain";
oFF.OuCalcAssistancePluginV2.FE_SELECTED_FORMULA_ITEM = "com.sap.ff.dataSpace.calculations.selectedFormulaItem.v2";
oFF.OuCalcAssistancePluginV2.PANEL_INITIAL_STATE_COLLAPSED = false;
oFF.OuCalcAssistancePluginV2.PLUGIN_NAME = "AssistancePluginV2";
oFF.OuCalcAssistancePluginV2.prototype.m_activityTracking = null;
oFF.OuCalcAssistancePluginV2.prototype.m_assistanceView = null;
oFF.OuCalcAssistancePluginV2.prototype.m_datasource = null;
oFF.OuCalcAssistancePluginV2.prototype.m_eventManager = null;
oFF.OuCalcAssistancePluginV2.prototype.m_feConfiguration = null;
oFF.OuCalcAssistancePluginV2.prototype.m_formulaItems = null;
oFF.OuCalcAssistancePluginV2.prototype.m_genesis = null;
oFF.OuCalcAssistancePluginV2.prototype.m_initialData = null;
oFF.OuCalcAssistancePluginV2.prototype.m_preferences = null;
oFF.OuCalcAssistancePluginV2.prototype.m_variableManager = null;
oFF.OuCalcAssistancePluginV2.prototype.buildPluginUi = function(genesis)
{
	this.m_genesis = oFF.XObjectExt.assertNotNull(genesis);
};
oFF.OuCalcAssistancePluginV2.prototype.buildUi = function()
{
	this.m_eventManager = oFF.OuCalcEventManager.create(this.getNotificationCenter());
	let translationParser = oFF.OuCalcTranslationParser.create(this.m_preferences, this.m_feConfiguration.getStructureMemberName(), this.m_feConfiguration.stringsSupported());
	if (this.m_preferences.isGenAiEnabled())
	{
		let parser = oFF.FeParserInternal.create(this.m_datasource, this.m_formulaItems.getFunctions(), this.m_formulaItems.getOperators(), this.m_feConfiguration, this.m_preferences, this.m_variableManager);
		let presentation = oFF.FeFormulaPresentation.create(this.m_preferences.isCommaDecimalSeparator());
		this.m_assistanceView = oFF.OuCalcAssistanceViewV2.createWithAI(this.m_initialData, translationParser, parser, presentation, this.getGenAiService(), this.m_activityTracking);
	}
	else
	{
		this.m_assistanceView = oFF.OuCalcAssistanceViewV2.create(translationParser);
	}
	this.m_assistanceView.renderView(this.m_genesis);
	if (!this.m_preferences.isGenAiEnabled())
	{
		this.setCollapsed(oFF.OuCalcAssistancePluginV2.PANEL_INITIAL_STATE_COLLAPSED);
	}
	else
	{
		this.m_assistanceView.setSelectedPanelByIndex(oFF.OuCalcAssistanceViewV2.AI_PANEL_INDEX);
	}
	if (this.m_preferences.isGenAiEnabled())
	{
		this.m_assistanceView.addOnAddFormulaConsumers((formula) => {
			this.m_eventManager.getEmitter().fireSetFormula(formula);
		});
		this.m_assistanceView.addOnSelectionChangeConsumer((selectedItemName, source) => {
			this.m_activityTracking.recordAiAssistantToggle(oFF.XString.isEqual(oFF.OuCalcAssistanceViewV2.AI_PANEL_ITEM, selectedItemName), source);
		});
		this.m_assistanceView.addOnExplainFormulaConsumers((running) => {
			this.m_eventManager.getEmitter().fireExplainFormulaRunning(running.getBoolean());
		});
	}
	this.initFromDataSpace();
	this.registerOnDataSpaceUpdate();
	this.setupNotificationsListener();
	this.m_assistanceView.addOnCollapseConsumer((collapsed) => {
		this.fireCollapsed(collapsed.getBoolean());
	});
	this.m_genesis.setRoot(this.m_assistanceView.getView());
};
oFF.OuCalcAssistancePluginV2.prototype.destroyPlugin = function()
{
	this.m_assistanceView = oFF.XObjectExt.release(this.m_assistanceView);
	this.m_eventManager = oFF.XObjectExt.release(this.m_eventManager);
	this.m_genesis = null;
	this.m_preferences = null;
	this.m_feConfiguration = null;
	this.m_datasource = null;
	this.m_formulaItems = null;
	this.m_initialData = null;
	oFF.OuCalcComponentPluginWithSharedSpace.prototype.destroyPlugin.call( this );
};
oFF.OuCalcAssistancePluginV2.prototype.fireCollapsed = function(collapsed)
{
	this.m_eventManager.getEmitter().fireAssistancePanelCollapsed(collapsed);
};
oFF.OuCalcAssistancePluginV2.prototype.getGenAiService = function()
{
	let useMockedService = this.getProcess().getEnvironment().getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_ENHANCED_USE_MOCKED_SERVICE, false);
	return useMockedService ? oFF.FeGenAiServiceMocked.create() : oFF.FeGenAiServiceImpl.create(this.getProcess(), this.m_datasource, this.m_formulaItems, this.m_preferences.isCommaDecimalSeparator());
};
oFF.OuCalcAssistancePluginV2.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.SYSTEM;
};
oFF.OuCalcAssistancePluginV2.prototype.getPluginName = function()
{
	return oFF.OuCalcAssistancePluginV2.PLUGIN_NAME;
};
oFF.OuCalcAssistancePluginV2.prototype.initFromDataSpace = function()
{
	this.setDocumentationFromDataSpace(false);
};
oFF.OuCalcAssistancePluginV2.prototype.registerOnDataSpaceUpdate = function()
{
	this.getSharedDataSpace().addChangeConsumer((key) => {
		switch (key)
		{
			case oFF.OuCalcAssistancePluginV2.FE_SELECTED_FORMULA_ITEM:
				this.setDocumentationFromDataSpace(true);
				break;
		}
	});
};
oFF.OuCalcAssistancePluginV2.prototype.setCollapsed = function(collapsed)
{
	this.m_assistanceView.setCollapsed(collapsed);
};
oFF.OuCalcAssistancePluginV2.prototype.setDocumentationFromDataSpace = function(openPanel)
{
	this.m_assistanceView.generateDocumentation(this.getSharedDataSpace().getStringByKey(oFF.OuCalcAssistancePluginV2.FE_SELECTED_FORMULA_ITEM));
	if (openPanel && !this.m_assistanceView.isCollapsed())
	{
		this.m_assistanceView.setSelectedPanelByIndex(oFF.OuCalcAssistanceViewV2.FUNCTION_HELP_PANEL_INDEX);
	}
};
oFF.OuCalcAssistancePluginV2.prototype.setupNotificationsListener = function()
{
	this.m_eventManager.getListener().onAssistancePanelCollapsed((collapsed) => {
		this.setCollapsed(collapsed.getBoolean());
	});
	this.m_eventManager.getListener().onFormulaExplain((formulaText) => {
		this.m_assistanceView.performExplain(formulaText);
	});
};
oFF.OuCalcAssistancePluginV2.prototype.setupPlugin = function(controller)
{
	controller.getLocalNotificationCenter().addObserverForName(oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME, (notificationData) => {
		this.m_preferences = notificationData.getXObjectByKeyExt(oFF.OuCalcCalculations.FORMULA_PREFERENCES, oFF.FePreferences.createDefault());
		this.m_feConfiguration = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FE_CONFIGURATION);
		this.m_datasource = notificationData.getXObjectByKey(oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY);
		this.m_formulaItems = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_ITEMS_PROVIDER_NOTIFICATION_KEY);
		this.m_initialData = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_INITIAL_DATA);
		this.m_activityTracking = notificationData.getXObjectByKey(oFF.OuCalcCalculations.ACTIVITY_TRACKING);
		this.m_variableManager = notificationData.getXObjectByKey(oFF.OuCalcCalculations.VARIABLE_MANAGER);
		this.buildUi();
		this.m_assistanceView.setCustomMode(notificationData.getStringByKey(oFF.OuCalcCalculations.FE_MODE_NAME));
	});
	return oFF.OuCalcComponentPluginWithSharedSpace.prototype.setupPlugin.call( this , controller);
};

oFF.OuCalcCodeEditorPlugin = function() {};
oFF.OuCalcCodeEditorPlugin.prototype = new oFF.OuCalcComponentPluginWithSharedSpace();
oFF.OuCalcCodeEditorPlugin.prototype._ff_c = "OuCalcCodeEditorPlugin";

oFF.OuCalcCodeEditorPlugin.DEFAULT_FORMULA_INDEX = 0;
oFF.OuCalcCodeEditorPlugin.EMPTY_FORMULA = "";
oFF.OuCalcCodeEditorPlugin.FE_FORMULA = "fe.formula";
oFF.OuCalcCodeEditorPlugin.FE_FORMULA_ERRORS = "fe.assistance.formula.errors";
oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_CODE_EDITOR_VALUE_SET = "com.sap.ff.calculations.notification.codeeditor.value.set";
oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_FORMULA_REVALIDATE = "com.sap.ff.calculations.notification.formula.revalidate";
oFF.OuCalcCodeEditorPlugin.FE_NOTIFICATION_GEN_AI_EXPLAIN_RUNNING = "com.sap.ff.calculations.notification.genai.explain.running";
oFF.OuCalcCodeEditorPlugin.PLUGIN_NAME = "CodeEditorPlugin";
oFF.OuCalcCodeEditorPlugin.prototype.m_codeEditorView = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_ctrlSpaceHandler = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_currentToken = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_cursorIndex = 0;
oFF.OuCalcCodeEditorPlugin.prototype.m_datasource = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_eventManager = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_feConfiguration = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_formulaContext = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_formulaItems = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_formulaPresentation = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_genesis = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_hintGenerator = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_initialData = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_memberSelectorHandler = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_preferences = null;
oFF.OuCalcCodeEditorPlugin.prototype.m_variableManager = null;
oFF.OuCalcCodeEditorPlugin.prototype.addGenAiListeners = function()
{
	let genAiService = this.getGenAiService();
	this.m_codeEditorView.addOnExplainPressConsumers((obj2) => {
		let formulaText = this.m_codeEditorView.getSelectedText();
		if (oFF.XStringUtils.isNullOrEmpty(formulaText))
		{
			let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
			formulaText = formula.getText();
		}
		this.m_eventManager.getEmitter().fireExplainFormula(formulaText);
	});
	this.m_codeEditorView.addOnGenerationPressConsumer((description) => {
		this.m_codeEditorView.setBusy(true);
		genAiService.generateFormula(description).onThen((formulaText) => {
			this.m_codeEditorView.setFormula(oFF.FeFormula.create(formulaText, this.m_formulaPresentation));
		}).onCatch((error) => {
			this.m_genesis.showErrorToast(oFF.XStringUtils.concatenate2("Error while generating formula: ", error.getText()));
		}).onFinally(() => {
			this.m_codeEditorView.setBusy(false);
		});
	});
};
oFF.OuCalcCodeEditorPlugin.prototype.areMessageCollectionEquals = function(messagesA, messagesB)
{
	if (oFF.isNull(messagesA) && oFF.isNull(messagesB))
	{
		return true;
	}
	if (oFF.isNull(messagesA) || oFF.isNull(messagesB))
	{
		return false;
	}
	if (messagesA.getMessages().size() !== messagesB.getMessages().size())
	{
		return false;
	}
	if (!oFF.XString.isEqual(messagesA.getSummary(), messagesB.getSummary()))
	{
		return false;
	}
	for (let i = 0; i < messagesA.getMessages().size(); i++)
	{
		let msgA = messagesA.getMessages().get(i);
		let msgB = messagesB.getMessages().get(i);
		if (!msgA.isEqualTo(msgB))
		{
			return false;
		}
		if (!oFF.XString.isEqual(msgA.getText(), msgB.getText()))
		{
			return false;
		}
	}
	return true;
};
oFF.OuCalcCodeEditorPlugin.prototype.buildPluginUi = function(genesis)
{
	this.m_genesis = oFF.XObjectExt.assertNotNull(genesis);
};
oFF.OuCalcCodeEditorPlugin.prototype.buildUi = function()
{
	this.m_codeEditorView = oFF.OuCalcCodeEditorViewV2.create(this.m_formulaPresentation, this.m_preferences);
	this.m_codeEditorView.setOnChange((formula) => {
		this.getSharedDataSpace().putXObject(oFF.OuCalcCodeEditorPlugin.FE_FORMULA, formula);
		this.runValidations(formula, this.m_datasource);
		this.extractTokens(formula);
	});
	this.m_codeEditorView.setOnCursorChange((cursorPosition) => {
		let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
		if (formula.isEmpty())
		{
			this.m_cursorIndex = oFF.OuCalcCodeEditorPlugin.DEFAULT_FORMULA_INDEX;
		}
		else
		{
			this.m_cursorIndex = oFF.FeCursorHelper.getCursorIndex(formula.getText(), cursorPosition.getRow(), cursorPosition.getColumn());
			this.setCurrentFunction();
		}
		this.setCustomCompletion();
	});
	this.m_codeEditorView.renderView(this.m_genesis);
	this.m_codeEditorView.setFormula(this.m_initialData.getFormula());
	this.m_codeEditorView.addOnFunctionHelpPressConsumer((collapsed) => {
		this.m_eventManager.getEmitter().fireAssistancePanelCollapsed(collapsed.getBoolean());
	});
	this.m_codeEditorView.setCtrlSpacePressedProcedure(() => {
		let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
		let cursorIndexBeforeCtrlSpace = this.m_cursorIndex;
		this.m_ctrlSpaceHandler.handle(formula, this.m_currentToken, (updatedFormula) => {
			this.m_codeEditorView.setFormula(updatedFormula);
		}, (updatedCursorPosition) => {
			this.m_codeEditorView.setCursorPosition(updatedCursorPosition);
		}, (busy) => {
			this.m_codeEditorView.setBusyNonBlocking(busy.getBoolean());
		}, () => {
			this.setupHintGenerator();
			if (cursorIndexBeforeCtrlSpace === this.m_cursorIndex)
			{
				this.setCustomCompletion();
				this.m_codeEditorView.openHintsList();
			}
		});
	});
	this.m_codeEditorView.setFunctionHelpPressed(!oFF.OuCalcAssistancePluginV2.PANEL_INITIAL_STATE_COLLAPSED);
	if (this.m_preferences.isGenAiEnabled())
	{
		this.addGenAiListeners();
	}
	this.m_genesis.setRoot(this.m_codeEditorView.getView());
	this.m_cursorIndex = oFF.OuCalcCodeEditorPlugin.DEFAULT_FORMULA_INDEX;
	this.setCustomCompletion();
	this.registerKeyboardHandlerModule();
	this.m_codeEditorView.addKeyboardHandlerToEditorFromModule();
};
oFF.OuCalcCodeEditorPlugin.prototype.currentFormulaItemExists = function(currentFunctionName)
{
	let fit = this.m_formulaItems.getFunctions().getIterator();
	while (fit.hasNext())
	{
		let fi = fit.next();
		if (oFF.XString.isEqual(fi.getDisplayName(), currentFunctionName.get().getMetadata().getName()))
		{
			return true;
		}
	}
	return false;
};
oFF.OuCalcCodeEditorPlugin.prototype.destroyPlugin = function()
{
	this.m_codeEditorView = oFF.XObjectExt.release(this.m_codeEditorView);
	this.m_ctrlSpaceHandler = oFF.XObjectExt.release(this.m_ctrlSpaceHandler);
	this.m_datasource = null;
	this.m_formulaItems = null;
	this.m_initialData = null;
	this.m_preferences = null;
	this.m_feConfiguration = null;
	this.m_formulaPresentation = null;
	this.m_memberSelectorHandler = null;
	this.m_formulaContext = oFF.XObjectExt.release(this.m_formulaContext);
	this.m_hintGenerator = oFF.XObjectExt.release(this.m_hintGenerator);
	this.m_genesis = null;
	this.m_currentToken = null;
	this.m_eventManager = oFF.XObjectExt.release(this.m_eventManager);
	oFF.OuCalcComponentPluginWithSharedSpace.prototype.destroyPlugin.call( this );
};
oFF.OuCalcCodeEditorPlugin.prototype.extractTokens = function(formula)
{
	if (!formula.isEmpty())
	{
		this.m_formulaContext.extractTokens(formula);
	}
	else
	{
		this.m_formulaContext.resetTokens();
	}
};
oFF.OuCalcCodeEditorPlugin.prototype.getCurrentToken = function()
{
	let currentToken = this.m_formulaContext.getTokenAtPosition(this.m_cursorIndex);
	if (currentToken.isPresent())
	{
		return currentToken.get();
	}
	let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
	let formulaText = formula.isEmpty() ? oFF.OuCalcCodeEditorPlugin.EMPTY_FORMULA : formula.getText();
	let dataTypes = oFF.XList.create();
	dataTypes.add(oFF.FeDataType.ANY);
	let contextStart = 0;
	let contextEnd = oFF.XString.size(formulaText);
	return oFF.FeTokenBuilder.create().setTokenType(oFF.FeTokenType.GENERIC).setDataTypes(dataTypes).setText(formulaText).setContextStart(contextStart).setContextEnd(contextEnd).setStart(contextStart).setEnd(contextEnd).build();
};
oFF.OuCalcCodeEditorPlugin.prototype.getGenAiService = function()
{
	let useMockedService = this.getProcess().getEnvironment().getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_ENHANCED_USE_MOCKED_SERVICE, false);
	return useMockedService ? oFF.FeGenAiServiceMocked.create() : oFF.FeGenAiServiceImpl.create(this.getProcess(), this.m_datasource, this.m_formulaItems, this.m_preferences.isCommaDecimalSeparator());
};
oFF.OuCalcCodeEditorPlugin.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.SYSTEM;
};
oFF.OuCalcCodeEditorPlugin.prototype.getPluginName = function()
{
	return oFF.OuCalcCodeEditorPlugin.PLUGIN_NAME;
};
oFF.OuCalcCodeEditorPlugin.prototype.getUiFormulaItemsProvider = function()
{
	return oFF.FeFormulaItemsProvider.createNonDeprecatedFormulaItemsProvider(this.m_formulaItems);
};
oFF.OuCalcCodeEditorPlugin.prototype.isDimensionToken = function()
{
	return oFF.notNull(this.m_currentToken) && this.m_currentToken.getTokenType().isEqualTo(oFF.FeTokenType.DIMENSION);
};
oFF.OuCalcCodeEditorPlugin.prototype.isDimensionTokenWithExpectedDimensionMember = function()
{
	return this.isDimensionToken() && this.m_currentToken.getDataTypes().contains(oFF.FeDataType.DIMENSION_MEMBER);
};
oFF.OuCalcCodeEditorPlugin.prototype.isDimensionTokenWithExpectedHierarchy = function()
{
	return this.isDimensionToken() && this.m_currentToken.getDataTypes().contains(oFF.FeDataType.HIERARCHY);
};
oFF.OuCalcCodeEditorPlugin.prototype.registerKeyboardHandlerModule = function()
{
	oFF.FeKeyboardHandler.register();
	oFF.FeKeyboardHandler.getInstance().setContext(this.m_formulaContext);
};
oFF.OuCalcCodeEditorPlugin.prototype.runValidations = function(formula, datasource)
{
	if (!this.m_preferences.isValidationEnabled())
	{
		return oFF.MessageManagerSimple.createMessageManager();
	}
	let calcId = this.getSharedDataSpace().getStringByKey(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID);
	let calcName = this.getSharedDataSpace().getStringByKey(oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_NAME);
	let parser = oFF.FeParserInternal.create(datasource, this.m_formulaItems.getFunctions(), this.m_formulaItems.getOperators(), this.m_feConfiguration, this.m_preferences, this.m_variableManager);
	let messages = parser.validate(formula.cloneWithDetails(oFF.FeFormulaDetails.create(calcId, calcName)));
	this.updateFormulaErrors(messages);
	return messages;
};
oFF.OuCalcCodeEditorPlugin.prototype.setCurrentFunction = function()
{
	let currentFunctionName = this.m_formulaContext.getFunctionItemAtPosition(this.m_cursorIndex);
	if (currentFunctionName.isPresent() && this.currentFormulaItemExists(currentFunctionName))
	{
		this.getSharedDataSpace().putString(oFF.OuCalcAssistancePluginV2.FE_SELECTED_FORMULA_ITEM, currentFunctionName.get().getMetadata().getName());
	}
};
oFF.OuCalcCodeEditorPlugin.prototype.setCustomCompletion = function()
{
	this.m_currentToken = this.getCurrentToken();
	let completions = oFF.PrFactory.createList();
	if (!this.isDimensionTokenWithExpectedDimensionMember())
	{
		let hints = this.m_hintGenerator.generate(this.m_currentToken);
		for (let i = 0; i < hints.size(); i++)
		{
			completions.add(hints.get(i).getJson());
		}
	}
	this.m_codeEditorView.setCustomCompleterJson(completions);
	if (completions.isEmpty() || this.m_feConfiguration.isHierarchyLoadEnabled() && this.isDimensionTokenWithExpectedHierarchy())
	{
		this.m_codeEditorView.disableAutoCompletions();
	}
	else
	{
		this.m_codeEditorView.enableAutoCompletions();
	}
};
oFF.OuCalcCodeEditorPlugin.prototype.setCustomMode = function(mode)
{
	this.m_codeEditorView.setCustomMode(mode);
};
oFF.OuCalcCodeEditorPlugin.prototype.setupHintGenerator = function()
{
	let hintProviders = oFF.XList.create();
	hintProviders.add(oFF.OuCalcFunctionHintProvider.create(this.getUiFormulaItemsProvider().getFunctions(), this.m_formulaPresentation));
	hintProviders.add(oFF.OuCalcOperatorHintProvider.create(this.getUiFormulaItemsProvider().getOperators()));
	let sortedUsableMeasures = oFF.XStream.of(this.m_datasource.getAllUsableMeasures()).sorted(oFF.XComparatorLambda.create((m1, m2) => {
		let m1Key = oFF.XString.toLowerCase(oFF.XStringUtils.concatenate2(m1.getDescription(), m1.getAlias()));
		let m2Key = oFF.XString.toLowerCase(oFF.XStringUtils.concatenate2(m2.getDescription(), m2.getAlias()));
		return oFF.XIntegerValue.create(oFF.XString.compare(m1Key, m2Key));
	})).collect(oFF.XStreamCollector.toList());
	if (this.m_preferences.isVariableSupportEnabled())
	{
		hintProviders.add(oFF.OuCalcVariablesHintProvider.create(this.m_variableManager.getVariables()));
	}
	hintProviders.add(oFF.OuCalcMeasureHintProvider.create(sortedUsableMeasures, this.m_preferences.isModelPrefixEnabled()));
	let sortedUsableAlternateMeasures = oFF.XStream.of(this.m_datasource.getAllUsableAlternateMeasures()).sorted(oFF.XComparatorLambda.create((m1, m2) => {
		let m1Key = oFF.XString.toLowerCase(oFF.XStringUtils.concatenate2(m1.getDescription(), m1.getAlias()));
		let m2Key = oFF.XString.toLowerCase(oFF.XStringUtils.concatenate2(m2.getDescription(), m2.getAlias()));
		return oFF.XIntegerValue.create(oFF.XString.compare(m1Key, m2Key));
	})).collect(oFF.XStreamCollector.toList());
	hintProviders.add(oFF.OuCalcAlternateMeasureHintProvider.create(sortedUsableAlternateMeasures, this.m_preferences.isModelPrefixEnabled()));
	let sortedUsableDimensions = oFF.XStream.of(this.m_datasource.getAllUsableDimensions()).sorted(oFF.XComparatorLambda.create((d1, d2) => {
		let d1Key = oFF.XString.toLowerCase(oFF.XStringUtils.concatenate2(d1.getDescription(), d1.getId()));
		let d2Key = oFF.XString.toLowerCase(oFF.XStringUtils.concatenate2(d2.getDescription(), d2.getId()));
		return oFF.XIntegerValue.create(oFF.XString.compare(d1Key, d2Key));
	})).collect(oFF.XStreamCollector.toList());
	hintProviders.add(oFF.OuCalcDimensionHintProvider.create(sortedUsableDimensions, sortedUsableMeasures, this.m_feConfiguration, this.m_preferences.isModelPrefixEnabled()));
	hintProviders.add(oFF.OuCalcHierarchyHintProvider.create(sortedUsableDimensions, this.m_feConfiguration, this.m_preferences.isModelPrefixEnabled()));
	if (this.m_feConfiguration.dimensionsSupported())
	{
		hintProviders.add(oFF.OuCalcPropertyHintProvider.create(sortedUsableDimensions, this.m_feConfiguration, this.m_preferences.isModelPrefixEnabled()));
		if (oFF.FeFeatureToggle.isActive(oFF.FeFeatureToggle.DATEDIFF))
		{
			hintProviders.add(oFF.OuCalcDateGranularityHintProvider.create());
		}
	}
	this.m_hintGenerator = oFF.OuCalcHintGenerator.create(hintProviders);
};
oFF.OuCalcCodeEditorPlugin.prototype.setupInterViewsCommunication = function()
{
	this.m_eventManager = oFF.OuCalcEventManager.create(this.getNotificationCenter());
	this.getSharedDataSpace().addChangeConsumer((key) => {
		switch (key)
		{
			case oFF.OuCalcCodeEditorPlugin.FE_FORMULA_ERRORS:
				this.m_codeEditorView.updateError(this.getSharedDataSpace().getXObjectByKey(key));
				break;

			case oFF.OuCalcDetailsAreaPlugin.CALCULATIONS_ID:
				let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
				this.runValidations(formula, this.m_datasource);
				break;
		}
	});
	this.m_eventManager.getListener().onFormulaItemChosen((formulaItem) => {
		this.m_codeEditorView.insertText(formulaItem);
	});
	this.m_eventManager.getListener().onInitialDataSet((initialData) => {
		this.m_codeEditorView.setFormula(initialData.getFormula());
	});
	this.m_eventManager.getListener().onValidationMessageSet((messageCollection) => {
		this.updateFormulaErrors(messageCollection);
	});
	this.m_eventManager.getListener().onAssistancePanelCollapsed((collapsed) => {
		this.m_codeEditorView.setFunctionHelpPressed(!collapsed.getBoolean());
	});
	this.m_eventManager.getListener().onFormulaSet((formula) => {
		this.m_codeEditorView.setFormula(oFF.FeFormula.create(formula, this.m_formulaPresentation));
	});
	this.m_eventManager.getListener().onExplainFormulaRunning((running) => {
		this.m_codeEditorView.setExplainFormulaEnabled(!running.getBoolean());
	});
	this.m_eventManager.getListener().onFormulaRevalidation(() => {
		let formula = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA);
		this.runValidations(formula, this.m_datasource);
	});
};
oFF.OuCalcCodeEditorPlugin.prototype.setupPlugin = function(controller)
{
	controller.getLocalNotificationCenter().addObserverForName(oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME, (notificationData) => {
		this.m_datasource = notificationData.getXObjectByKey(oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY);
		this.m_formulaItems = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_ITEMS_PROVIDER_NOTIFICATION_KEY);
		this.m_initialData = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_INITIAL_DATA);
		this.m_preferences = notificationData.getXObjectByKeyExt(oFF.OuCalcCalculations.FORMULA_PREFERENCES, oFF.FePreferences.createDefault());
		this.m_feConfiguration = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FE_CONFIGURATION);
		this.m_formulaPresentation = oFF.FeFormulaPresentation.create(this.m_preferences.isCommaDecimalSeparator());
		this.m_memberSelectorHandler = notificationData.getXObjectByKey(oFF.OuCalcCalculations.MEMBER_SELECTOR_HANDLER_KEY);
		this.m_ctrlSpaceHandler = oFF.OuCalcCtrlSpaceHandler.create(this.m_datasource, this.m_memberSelectorHandler, this.m_preferences, this.m_feConfiguration, this.m_formulaPresentation);
		this.m_variableManager = notificationData.getXObjectByKey(oFF.OuCalcCalculations.VARIABLE_MANAGER);
		this.getSharedDataSpace().putXObject(oFF.OuCalcCodeEditorPlugin.FE_FORMULA, this.m_initialData.getFormula());
		this.setupHintGenerator();
		this.setupInterViewsCommunication();
		this.buildUi();
		this.setCustomMode(notificationData.getStringByKey(oFF.OuCalcCalculations.FE_MODE_NAME));
		this.runValidations(this.m_initialData.getFormula(), this.m_datasource);
	});
	this.m_formulaContext = oFF.FeContext.create();
	return oFF.OuCalcComponentPluginWithSharedSpace.prototype.setupPlugin.call( this , controller);
};
oFF.OuCalcCodeEditorPlugin.prototype.updateFormulaErrors = function(messages)
{
	let messagesCurrent = this.getSharedDataSpace().getXObjectByKey(oFF.OuCalcCodeEditorPlugin.FE_FORMULA_ERRORS);
	if (!this.areMessageCollectionEquals(messagesCurrent, messages))
	{
		this.getSharedDataSpace().putXObject(oFF.OuCalcCodeEditorPlugin.FE_FORMULA_ERRORS, messages);
	}
};

oFF.OuCalcFormulaElementListPlugin = function() {};
oFF.OuCalcFormulaElementListPlugin.prototype = new oFF.OuCalcComponentPluginWithSharedSpace();
oFF.OuCalcFormulaElementListPlugin.prototype._ff_c = "OuCalcFormulaElementListPlugin";

oFF.OuCalcFormulaElementListPlugin.FE_CHOSEN_DISPLAY_OPTION = "fe.chosen.display.option";
oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_CHOSEN_FORMULA_ITEM = "fe.notification.chosen.formula.item";
oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_CHOSEN_FORMULA_ITEM_DATA = "formula.item";
oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED = "com.sap.ff.notification.calculations.itemListPanelCollapsed";
oFF.OuCalcFormulaElementListPlugin.FE_NOTIFICATION_ITEM_LIST_PANEL_COLLAPSED_DATA = "collapsed";
oFF.OuCalcFormulaElementListPlugin.PANEL_INITIAL_STATE_COLLAPSED = false;
oFF.OuCalcFormulaElementListPlugin.PLUGIN_NAME = "FormulaElementListPlugin";
oFF.OuCalcFormulaElementListPlugin.prototype.m_datasource = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_eventEmitter = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_feConfiguration = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_formulaElementListView = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_formulaItems = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_genesis = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_preferences = null;
oFF.OuCalcFormulaElementListPlugin.prototype.m_variableManager = null;
oFF.OuCalcFormulaElementListPlugin.prototype.buildPluginUi = function(genesis)
{
	this.m_genesis = oFF.XObjectExt.assertNotNull(genesis);
};
oFF.OuCalcFormulaElementListPlugin.prototype.buildUi = function()
{
	this.m_formulaElementListView = oFF.OuCalcFormulaElementListView.create(this.m_formulaItems, this.m_datasource, this.m_feConfiguration, this.m_preferences, this.m_variableManager);
	this.m_formulaElementListView.renderView(this.m_genesis);
	this.m_genesis.setRoot(this.m_formulaElementListView.getView());
	this.setCollapsed(oFF.OuCalcFormulaElementListPlugin.PANEL_INITIAL_STATE_COLLAPSED);
};
oFF.OuCalcFormulaElementListPlugin.prototype.destroyPlugin = function()
{
	this.m_eventEmitter = oFF.XObjectExt.release(this.m_eventEmitter);
	this.m_formulaElementListView = oFF.XObjectExt.release(this.m_formulaElementListView);
	this.m_datasource = null;
	this.m_formulaItems = null;
	this.m_genesis = null;
	this.m_feConfiguration = null;
	this.m_preferences = null;
	this.m_variableManager = null;
	oFF.OuCalcComponentPluginWithSharedSpace.prototype.destroyPlugin.call( this );
};
oFF.OuCalcFormulaElementListPlugin.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.SYSTEM;
};
oFF.OuCalcFormulaElementListPlugin.prototype.getPluginName = function()
{
	return oFF.OuCalcFormulaElementListPlugin.PLUGIN_NAME;
};
oFF.OuCalcFormulaElementListPlugin.prototype.setCollapsed = function(collapsed)
{
	this.m_formulaElementListView.setCollapsed(collapsed);
};
oFF.OuCalcFormulaElementListPlugin.prototype.setupInterViewsCommunication = function()
{
	this.m_eventEmitter = oFF.OuCalcEventEmitterManager.create(this.getNotificationCenter());
	this.m_formulaElementListView.addOnDisplayOptionPressedConsumer((displayOption) => {
		this.getSharedDataSpace().putXObject(oFF.OuCalcFormulaElementListPlugin.FE_CHOSEN_DISPLAY_OPTION, displayOption);
		this.m_formulaElementListView.setDisplayType(displayOption);
	});
	this.m_formulaElementListView.addOnSelectFormulaItemConsumer((selectedFormulaItem) => {
		this.getSharedDataSpace().putString(oFF.OuCalcAssistancePluginV2.FE_SELECTED_FORMULA_ITEM, selectedFormulaItem);
	});
	this.m_formulaElementListView.addOnSelectConsumer((memberName) => {
		this.m_eventEmitter.fireFormulaItemChosen(memberName);
	});
	this.m_formulaElementListView.addOnCollapseConsumer((collapsed) => {
		this.m_eventEmitter.fireListItemPanelCollapsed(collapsed.getBoolean());
	});
	if (this.m_preferences.isVariableSupportEnabled())
	{
		this.m_formulaElementListView.addOnVariablesUpdatedProcedure(() => {
			this.m_eventEmitter.fireFormulaRevalidation();
		});
	}
};
oFF.OuCalcFormulaElementListPlugin.prototype.setupPlugin = function(controller)
{
	controller.getLocalNotificationCenter().addObserverForName(oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME, (notificationData) => {
		let formulaItems = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_ITEMS_PROVIDER_NOTIFICATION_KEY);
		this.m_datasource = notificationData.getXObjectByKey(oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY);
		this.m_formulaItems = oFF.FeFormulaItemsProvider.createNonDeprecatedFormulaItemsProvider(formulaItems);
		this.m_feConfiguration = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FE_CONFIGURATION);
		this.m_preferences = notificationData.getXObjectByKeyExt(oFF.OuCalcCalculations.FORMULA_PREFERENCES, oFF.FePreferences.createDefault());
		this.m_variableManager = notificationData.getXObjectByKey(oFF.OuCalcCalculations.VARIABLE_MANAGER);
		this.buildUi();
		this.setupInterViewsCommunication();
	});
	return oFF.OuCalcComponentPluginWithSharedSpace.prototype.setupPlugin.call( this , controller);
};

oFF.OuCalculationPlugin = function() {};
oFF.OuCalculationPlugin.prototype = new oFF.OuCalcComponentPluginWithSharedSpace();
oFF.OuCalculationPlugin.prototype._ff_c = "OuCalculationPlugin";

oFF.OuCalculationPlugin.LEFT_PANEL_INITIAL_STATE_COLLAPSED = false;
oFF.OuCalculationPlugin.PLUGIN_NAME = "CalculationPlugin";
oFF.OuCalculationPlugin.RIGHT_PANEL_INITIAL_STATE_COLLAPSED = false;
oFF.OuCalculationPlugin.prototype.m_activityTracking = null;
oFF.OuCalculationPlugin.prototype.m_calculations = null;
oFF.OuCalculationPlugin.prototype.m_datasource = null;
oFF.OuCalculationPlugin.prototype.m_eventManager = null;
oFF.OuCalculationPlugin.prototype.m_formulaItems = null;
oFF.OuCalculationPlugin.prototype.m_genesis = null;
oFF.OuCalculationPlugin.prototype.m_initialData = null;
oFF.OuCalculationPlugin.prototype.m_memberSelectorHandler = null;
oFF.OuCalculationPlugin.prototype.m_preferences = null;
oFF.OuCalculationPlugin.prototype.m_uiConfiguration = null;
oFF.OuCalculationPlugin.prototype.m_variableManager = null;
oFF.OuCalculationPlugin.prototype.m_view = null;
oFF.OuCalculationPlugin.prototype.buildPluginUi = function(genesis)
{
	this.m_genesis = oFF.XObjectExt.assertNotNull(genesis);
};
oFF.OuCalculationPlugin.prototype.buildUi = function()
{
	this.m_view = oFF.OuCalcCalculationsView.create(this.m_uiConfiguration.getSinglePluginConfig().getLeftPanelWidth(), this.m_uiConfiguration.getSinglePluginConfig().getRightPanelWidth(), oFF.OuCalculationPlugin.LEFT_PANEL_INITIAL_STATE_COLLAPSED, oFF.OuCalculationPlugin.RIGHT_PANEL_INITIAL_STATE_COLLAPSED, this.m_preferences);
	this.m_view.renderView(this.m_genesis);
	this.m_view.getView().addCssClass("ffOuCalculationPluginView");
	this.m_genesis.setRoot(this.m_view.getView());
	this.m_uiConfiguration = this.createUIConfigurationBuilder(this.m_view.getContentWrapperMap()).build();
	this.createCalculationsApplication().onThen((calcApi) => {
		this.m_calculations = calcApi;
		this.registerOnCalculationUiEvents();
		this.m_calculations.startup();
	});
};
oFF.OuCalculationPlugin.prototype.createCalculationsApplication = function()
{
	return oFF.OuCalcCalculations.createExt(this.m_datasource, this.m_formulaItems, this.m_uiConfiguration, this.m_initialData, this.m_preferences, this.m_memberSelectorHandler, this.getProcess(), this.m_activityTracking, this.m_variableManager);
};
oFF.OuCalculationPlugin.prototype.createUIConfigurationBuilder = function(areaMap)
{
	let uiConfigurationBuilder = oFF.OuCalcUIConfigurationBuilder.create();
	let detailsPanelConfig = oFF.OuCalcDetailsPanelConfigBuilder.create();
	detailsPanelConfig.setAnchorTag(areaMap.getByKey(oFF.OuCalcUiComponent.DETAILS_PANEL));
	let codeEditorPanelConfig = oFF.OuCalcCodeEditorPanelConfigBuilder.create();
	codeEditorPanelConfig.setAnchorTag(areaMap.getByKey(oFF.OuCalcUiComponent.CODE_EDITOR));
	let formulaItemListPanelConfigBuilder = oFF.OuCalcFormulaItemListPanelConfigBuilder.create();
	formulaItemListPanelConfigBuilder.setAnchorTag(areaMap.getByKey(oFF.OuCalcUiComponent.FORMULA_ELEMENTS_PANEL));
	if (this.m_uiConfiguration.getFormulaItemsListPanelRenderConfig().getWidth() !== null)
	{
		formulaItemListPanelConfigBuilder.setWidth(this.m_uiConfiguration.getFormulaItemsListPanelRenderConfig().getWidth());
	}
	let assistancePanelConfigBuilder = oFF.OuCalcAssistancePanelConfigBuilder.create();
	assistancePanelConfigBuilder.setAnchorTag(areaMap.getByKey(oFF.OuCalcUiComponent.ASSISTANCE_PANEL));
	if (this.m_uiConfiguration.getAssistancePanelRenderConfig().getWidth() !== null)
	{
		assistancePanelConfigBuilder.setWidth(this.m_uiConfiguration.getAssistancePanelRenderConfig().getWidth());
	}
	uiConfigurationBuilder.addDetailsPanelConfig(detailsPanelConfig.build());
	uiConfigurationBuilder.addCodeEditorPanelConfig(codeEditorPanelConfig.build());
	uiConfigurationBuilder.addFormulaElementListPanelConfig(formulaItemListPanelConfigBuilder.build());
	uiConfigurationBuilder.addAssistancePanelConfig(assistancePanelConfigBuilder.build());
	return uiConfigurationBuilder;
};
oFF.OuCalculationPlugin.prototype.destroyPlugin = function()
{
	this.m_preferences = null;
	this.m_uiConfiguration = null;
	this.m_genesis = null;
	this.m_eventManager = oFF.XObjectExt.release(this.m_eventManager);
	oFF.OuCalcComponentPluginWithSharedSpace.prototype.destroyPlugin.call( this );
};
oFF.OuCalculationPlugin.prototype.getPluginCategory = function()
{
	return oFF.HuPluginCategory.SYSTEM;
};
oFF.OuCalculationPlugin.prototype.getPluginName = function()
{
	return oFF.OuCalculationPlugin.PLUGIN_NAME;
};
oFF.OuCalculationPlugin.prototype.registerOnCalculationUiEvents = function()
{
	this.m_calculations.registerOnUiEvent((eventData) => {
		this.m_view.onCalculationUiEvents(eventData.getName(), eventData.getObject());
	});
};
oFF.OuCalculationPlugin.prototype.setupPlugin = function(controller)
{
	controller.getLocalNotificationCenter().addObserverForName(oFF.OuCalcCalculations.CONFIGURATION_DATA_NOTIFICATION_NAME, (notificationData) => {
		this.m_uiConfiguration = notificationData.getXObjectByKey(oFF.OuCalcCalculations.UI_CONFIGURATION_PROVIDER_NOTIFICATION_KEY);
		this.m_preferences = notificationData.getXObjectByKeyExt(oFF.OuCalcCalculations.FORMULA_PREFERENCES, oFF.FePreferences.createDefault());
		this.m_formulaItems = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_ITEMS_PROVIDER_NOTIFICATION_KEY);
		this.m_datasource = notificationData.getXObjectByKey(oFF.OuCalcCalculations.DATASOURCE_PROVIDER_NOTIFICATION_KEY);
		this.m_initialData = notificationData.getXObjectByKey(oFF.OuCalcCalculations.FORMULA_INITIAL_DATA);
		this.m_memberSelectorHandler = notificationData.getXObjectByKey(oFF.OuCalcCalculations.MEMBER_SELECTOR_HANDLER_KEY);
		this.m_variableManager = notificationData.getXObjectByKey(oFF.OuCalcCalculations.VARIABLE_MANAGER);
		this.m_activityTracking = notificationData.getXObjectByKey(oFF.OuCalcCalculations.ACTIVITY_TRACKING);
		this.buildUi();
	});
	return oFF.OuCalcComponentPluginWithSharedSpace.prototype.setupPlugin.call( this , controller);
};

oFF.OuDataProviderCreator = function() {};
oFF.OuDataProviderCreator.prototype = new oFF.DfUiProgram();
oFF.OuDataProviderCreator.prototype._ff_c = "OuDataProviderCreator";

oFF.OuDataProviderCreator.BUTTON_CREATE = "DataProviderCreator_CreateBtn";
oFF.OuDataProviderCreator.BUTTON_DATA_SOURCE = "DataProviderCreator_SelectDataSourceBtn";
oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_DP_POOL = "DataProviderCreator_AddToDPPoolChkBox";
oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_SHARED_SPACE = "DataProviderCreator_AddToSharedSpaceChkBox";
oFF.OuDataProviderCreator.DEFAULT_PROGRAM_NAME = "DataProviderCreator";
oFF.OuDataProviderCreator.INPUT_DP_NAME = "DataProviderCreator_DPNameInput";
oFF.OuDataProviderCreator.LABEL_DATA_SOURCE = "DataProviderCreator_DataSourceLbl";
oFF.OuDataProviderCreator.PRG_DATA_APPLICATION = "application";
oFF.OuDataProviderCreator.PRG_DATA_CREATED_DATA_PROVIDERS = "createdDataProviders";
oFF.OuDataProviderCreator.createRunnerForContainerType = function(parentProcess, containerType)
{
	let tmpRunner = oFF.ProgramRunner.createRunner(parentProcess, oFF.OuDataProviderCreator.DEFAULT_PROGRAM_NAME);
	tmpRunner.setContainerType(containerType);
	return tmpRunner;
};
oFF.OuDataProviderCreator.prototype.m_addToDPPoolChkBox = null;
oFF.OuDataProviderCreator.prototype.m_addToSharedSpaceChkBox = null;
oFF.OuDataProviderCreator.prototype.m_app = null;
oFF.OuDataProviderCreator.prototype.m_createBtn = null;
oFF.OuDataProviderCreator.prototype.m_createdDataProviders = null;
oFF.OuDataProviderCreator.prototype.m_dataProvider = null;
oFF.OuDataProviderCreator.prototype.m_dataSourceLabel = null;
oFF.OuDataProviderCreator.prototype.m_dpNameInput = null;
oFF.OuDataProviderCreator.prototype.m_form = null;
oFF.OuDataProviderCreator.prototype.m_mainLayout = null;
oFF.OuDataProviderCreator.prototype.m_messagesLayout = null;
oFF.OuDataProviderCreator.prototype.m_selectDataSourceBtn = null;
oFF.OuDataProviderCreator.prototype.m_selectedDataSource = null;
oFF.OuDataProviderCreator.prototype._addToSharedSpace = function(dpName, messagesWithType)
{
	let addToSharedSpaceValue = this.m_form.getJsonModel().getBooleanByKey(oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_SHARED_SPACE);
	if (addToSharedSpaceValue)
	{
		let sharedDataSpace = this.getProcessSharedDataSpace(oFF.OuDataProviderCommandPlugin.DEFAULT_SHARED_SPACE_NAME);
		if (oFF.notNull(sharedDataSpace))
		{
			let sharedStorage = sharedDataSpace.getXObjectByKey(oFF.OuDataProviderCommandPlugin.SPACE_STORAGE);
			if (oFF.notNull(sharedStorage))
			{
				if (sharedStorage.getActiveDataProviders().containsKey(dpName))
				{
					messagesWithType.put(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.DP_NAME_ALREADY_EXISTS_IN_SHARED_SPACE), oFF.UiMessageType.ERROR);
				}
				else
				{
					sharedStorage.putActiveDataProvider(dpName, this.m_dataProvider);
					messagesWithType.put(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.ADDED_TO_SHARED_SPACE_SUCCESS), oFF.UiMessageType.SUCCESS);
				}
			}
		}
		else
		{
			messagesWithType.put(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.SHARED_SPACE_NOT_FOUND), oFF.UiMessageType.ERROR);
		}
	}
};
oFF.OuDataProviderCreator.prototype._buildLayoutUi = function()
{
	this.m_form = oFF.UiForm.create(this.getGenesis());
	let dataSourceText = this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.DATA_SOURCE_LABEL);
	this.m_dataSourceLabel = this.m_form.addFormLabel(oFF.OuDataProviderCreator.LABEL_DATA_SOURCE, dataSourceText, dataSourceText);
	let selectBtnText = this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.SELECT);
	this.m_selectDataSourceBtn = this.m_form.addFormButton(oFF.OuDataProviderCreator.BUTTON_DATA_SOURCE, selectBtnText, selectBtnText, null, this._chooseDataSource.bind(this));
	this.m_selectDataSourceBtn.setButtonType(oFF.UiButtonType.ATTENTION);
	let dataProviderNameText = this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.DP_NAME);
	this.m_dpNameInput = this.m_form.addInput(oFF.OuDataProviderCreator.INPUT_DP_NAME, null, dataProviderNameText);
	this.m_dpNameInput.setRequired(true);
	this.m_dpNameInput.setLabelFontWeight(oFF.UiFontWeight.BOLD);
	let updateUiStateBiConsumer = (key, value) => {
		this._updateUiState();
	};
	this.m_dpNameInput.setValueChangedConsumer(updateUiStateBiConsumer);
	let addToSharedSpaceText = this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.ADD_TO_SHARED_SPACE);
	this.m_addToSharedSpaceChkBox = this.m_form.addCheckbox(oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_SHARED_SPACE, false, addToSharedSpaceText);
	this.m_addToSharedSpaceChkBox.setEnabled(false);
	this.m_addToSharedSpaceChkBox.setValueChangedConsumer(updateUiStateBiConsumer);
	let addToDPPoolText = this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.ADD_TO_DP_POOL);
	this.m_addToDPPoolChkBox = this.m_form.addCheckbox(oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_DP_POOL, true, addToDPPoolText);
	this.m_addToDPPoolChkBox.setEnabled(false);
	this.m_addToDPPoolChkBox.setValue(oFF.XBooleanValue.create(true));
	this.m_addToDPPoolChkBox.setValueChangedConsumer(updateUiStateBiConsumer);
	let createText = this.getLocalization().getText(oFF.XCommonI18n.CREATE);
	this.m_createBtn = this.m_form.addFormButton(oFF.OuDataProviderCreator.BUTTON_CREATE, createText, createText, null, this._onCreatePressed.bind(this));
	this.m_createBtn.setEnabled(false);
	let view = this.m_form.getView();
	view.setPadding(oFF.UiCssBoxEdges.create("1rem"));
	this.m_mainLayout.addItem(view);
	let messagesTitle = this.m_mainLayout.addNewItemOfType(oFF.UiType.TITLE);
	messagesTitle.setText(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.MESSAGES)).setPadding(oFF.UiCssBoxEdges.create("0.25rem 1rem"));
	this.m_messagesLayout = this.m_mainLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	this.m_messagesLayout.setDirection(oFF.UiFlexDirection.COLUMN).setPadding(oFF.UiCssBoxEdges.create("0.125rem 1rem")).setHeight(oFF.UiCssLength.create("5.5rem")).setOverflow(oFF.UiOverflow.AUTO);
};
oFF.OuDataProviderCreator.prototype._chooseDataSource = function()
{
	this.m_selectedDataSource = null;
	this.m_dataSourceLabel.setText(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.DATA_SOURCE_LABEL));
	this.m_selectDataSourceBtn.setButtonType(oFF.UiButtonType.ATTENTION);
	this.m_dpNameInput.setValue(null);
	this.m_createBtn.setEnabled(false);
	this.m_messagesLayout.clearItems();
	let prgStartData = oFF.ProgramStartData.create();
	prgStartData.putXObject(oFF.AuDatasourcePicker.PRG_DATA_LISTENER, this);
	prgStartData.putXObject(oFF.AuDatasourcePicker.PRG_DATA_APPLICATION, this.getApplication());
	let dspDlg = oFF.ProgramRunner.createRunner(this.getProcess(), oFF.AuDatasourcePicker.DEFAULT_PROGRAM_NAME);
	dspDlg.setStringArgument(oFF.AuDatasourcePicker.PARAM_SYSTEM, null);
	dspDlg.setProgramStartData(prgStartData);
	dspDlg.runProgram();
};
oFF.OuDataProviderCreator.prototype._getDataProviderName = function()
{
	return this.m_form.getJsonModel().getStringByKey(oFF.OuDataProviderCreator.INPUT_DP_NAME);
};
oFF.OuDataProviderCreator.prototype._onCreatePressed = function()
{
	this.m_messagesLayout.clearItems();
	let strip = this.m_messagesLayout.addNewItemOfType(oFF.UiType.MESSAGE_STRIP);
	strip.setText("Processing").setMessageType(oFF.UiMessageType.INFORMATION).setShowIcon(true).setShowCloseButton(false).setMargin(oFF.UiCssBoxEdges.create("0.25rem 0rem"));
	let messagesWithType = oFF.XHashMapByString.create();
	let dpName = this._getDataProviderName();
	if (oFF.notNull(this.m_selectedDataSource) && oFF.XStringUtils.isNotNullAndNotEmpty(dpName))
	{
		if (oFF.isNull(this.m_app))
		{
			this.m_app = oFF.ApplicationFactory.createApplication(this.getProcess().getKernel().getProcess());
		}
		let config = oFF.OlapDataProviderConfiguration.createConfig(this.m_app, this.m_selectedDataSource);
		config.setDataProviderName(dpName);
		config.setShouldAddToDataProviderPool(this.m_form.getJsonModel().getBooleanByKey(oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_DP_POOL));
		let dataApplication = this.getProcess().findEntity(oFF.ProcessEntity.DATA_APPLICATION);
		let createDpPromise;
		if (oFF.notNull(dataApplication))
		{
			let dpManager = dataApplication.getDataProviderManager();
			createDpPromise = dpManager.createDataProvider(config).onThenExt((dataProvider) => {
				return oFF.OlapDataProviderOlapAccess.getOlapInterface(dataProvider);
			});
		}
		else
		{
			createDpPromise = oFF.OlapDataProviderFactory.createDataProviderFromSource(config);
		}
		createDpPromise.onThen((dataProvider) => {
			this.m_dataProvider = dataProvider;
			this._addToSharedSpace(dpName, messagesWithType);
			this.m_createdDataProviders.add(dataProvider);
			let messageKeys = messagesWithType.getKeysAsReadOnlyList();
			this.m_messagesLayout.clearItems();
			oFF.XCollectionUtils.forEach(messageKeys, (msgKey) => {
				let createStrip = this.m_messagesLayout.addNewItemOfType(oFF.UiType.MESSAGE_STRIP);
				createStrip.setText(msgKey).setMessageType(messagesWithType.getByKey(msgKey)).setShowIcon(true).setShowCloseButton(false).setMargin(oFF.UiCssBoxEdges.create("0.25rem 0rem"));
			});
		}).onCatch((error) => {
			strip.setText(error.getText()).setMessageType(oFF.UiMessageType.ERROR);
		});
	}
};
oFF.OuDataProviderCreator.prototype._updateUiState = function()
{
	let isDpNameSet = this._getDataProviderName() !== null;
	this.m_addToSharedSpaceChkBox.setEnabled(isDpNameSet);
	this.m_addToDPPoolChkBox.setEnabled(isDpNameSet);
	let isAddToSharedSpaceChecked = this.m_form.getJsonModel().getBooleanByKey(oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_SHARED_SPACE);
	let isAddToDPPoolChecked = this.m_form.getJsonModel().getBooleanByKey(oFF.OuDataProviderCreator.CHECKBOX_ADD_TO_DP_POOL);
	this.m_createBtn.setEnabled(isDpNameSet && oFF.notNull(this.m_selectedDataSource) && (isAddToSharedSpaceChecked || isAddToDPPoolChecked));
};
oFF.OuDataProviderCreator.prototype.buildUi = function(genesis)
{
	this.setTitle(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.TITLE));
	this.m_mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT).setDirection(oFF.UiFlexDirection.COLUMN).setPadding(oFF.UiCssBoxEdges.create("0.5rem 1rem"));
	this._buildLayoutUi();
	genesis.setRoot(this.m_mainLayout);
};
oFF.OuDataProviderCreator.prototype.getDialogButtons = function(genesis)
{
	let closeBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	closeBtn.setText("Close");
	closeBtn.setButtonType(oFF.UiButtonType.PRIMARY);
	closeBtn.registerOnPress(oFF.UiLambdaPressListener.create((event) => {
		let exitData = oFF.ProgramExitData.create();
		if (oFF.notNull(this.m_dataProvider))
		{
			exitData.putXObject(oFF.OuDataProviderCreator.PRG_DATA_CREATED_DATA_PROVIDERS, this.m_createdDataProviders);
		}
		this.terminateWithExitData(exitData);
	}));
	let tmpList = oFF.XList.create();
	tmpList.add(closeBtn);
	return tmpList;
};
oFF.OuDataProviderCreator.prototype.getProgramName = function()
{
	return oFF.OuDataProviderCreator.DEFAULT_PROGRAM_NAME;
};
oFF.OuDataProviderCreator.prototype.newProgram = function()
{
	let prg = new oFF.OuDataProviderCreator();
	prg.setup();
	return prg;
};
oFF.OuDataProviderCreator.prototype.onContainerAfterOpen = function()
{
	if (oFF.notNull(this.m_selectDataSourceBtn))
	{
		this.m_selectDataSourceBtn.focus();
	}
};
oFF.OuDataProviderCreator.prototype.onDatasourceSelected = function(dataSource)
{
	this.m_selectedDataSource = dataSource;
	this.m_dataSourceLabel.setText(oFF.XStringUtils.concatenate3(this.getLocalization().getText(oFF.OuDataProviderCreatorI18n.DATA_SOURCE_LABEL), " ", dataSource.getName()));
	this.m_selectDataSourceBtn.setButtonType(oFF.UiButtonType.SUCCESS);
};
oFF.OuDataProviderCreator.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuDataProviderCreator.prototype.processArguments = function(args) {};
oFF.OuDataProviderCreator.prototype.processConfiguration = function(configuration) {};
oFF.OuDataProviderCreator.prototype.releaseObject = function()
{
	this.m_app = null;
	this.m_selectedDataSource = null;
	this.m_dataProvider = null;
	this.m_createdDataProviders.clear();
	this.m_createdDataProviders = oFF.XObjectExt.release(this.m_createdDataProviders);
	this.m_dataSourceLabel = oFF.XObjectExt.release(this.m_dataSourceLabel);
	this.m_selectDataSourceBtn = oFF.XObjectExt.release(this.m_selectDataSourceBtn);
	this.m_dpNameInput = oFF.XObjectExt.release(this.m_dpNameInput);
	this.m_addToSharedSpaceChkBox = oFF.XObjectExt.release(this.m_addToSharedSpaceChkBox);
	this.m_addToDPPoolChkBox = oFF.XObjectExt.release(this.m_addToDPPoolChkBox);
	this.m_createBtn = oFF.XObjectExt.release(this.m_createBtn);
	this.m_form = oFF.XObjectExt.release(this.m_form);
	this.m_messagesLayout = oFF.XObjectExt.release(this.m_messagesLayout);
	this.m_mainLayout = oFF.XObjectExt.release(this.m_mainLayout);
	oFF.DfUiProgram.prototype.releaseObject.call( this );
};
oFF.OuDataProviderCreator.prototype.setupProgram = function()
{
	if (this.getStartData() !== null)
	{
		this.m_app = this.getStartData().getXObjectByKey(oFF.OuDataProviderCreator.PRG_DATA_APPLICATION);
	}
	this.m_createdDataProviders = oFF.XList.create();
	return null;
};

oFF.OuInventoryProgram = function() {};
oFF.OuInventoryProgram.prototype = new oFF.DfUiProgram();
oFF.OuInventoryProgram.prototype._ff_c = "OuInventoryProgram";

oFF.OuInventoryProgram.PARAM_DATA_PROVIDER_NAME = "dataProviderName";
oFF.OuInventoryProgram.PROGRAM_NAME = "Inventory";
oFF.OuInventoryProgram.prototype.m_dataProviderCreatedId = null;
oFF.OuInventoryProgram.prototype.m_dataProviderName = null;
oFF.OuInventoryProgram.prototype.m_dataProviderReleasedId = null;
oFF.OuInventoryProgram.prototype.m_view = null;
oFF.OuInventoryProgram.prototype.buildUi = function(genesis)
{
	let config = oFF.OuInventoryViewConfiguration.createInventoryViewConfig(this.getApplication());
	this.m_view = oFF.OuInventoryView.createView(this.getProcess(), genesis, config);
	if (oFF.notNull(this.m_dataProviderName))
	{
		this.setDataProviderFromApplication();
		this.observeDataProviderManagerChanges();
	}
	genesis.setRoot(this.m_view.getView());
};
oFF.OuInventoryProgram.prototype.getDataApplication = function()
{
	return this.getProcess().findEntity(oFF.ProcessEntity.DATA_APPLICATION);
};
oFF.OuInventoryProgram.prototype.getProgramName = function()
{
	return oFF.OuInventoryProgram.PROGRAM_NAME;
};
oFF.OuInventoryProgram.prototype.newProgram = function()
{
	let program = new oFF.OuInventoryProgram();
	program.setup();
	return program;
};
oFF.OuInventoryProgram.prototype.observeDataProviderManagerChanges = function()
{
	let dpMgr = this.getDataApplication().getDataProviderManager();
	this.m_dataProviderCreatedId = dpMgr.getDataProviderCreatedListener().addConsumer(this.onDataProviderManagerChanged.bind(this));
	this.m_dataProviderReleasedId = dpMgr.getDataProviderReleasingListener().addConsumer(this.onDataProviderManagerChanged.bind(this));
};
oFF.OuInventoryProgram.prototype.onDataProviderManagerChanged = function(dataProvider)
{
	if (oFF.XString.isEqual(dataProvider.getName(), this.m_dataProviderName))
	{
		this.setDataProviderFromApplication();
	}
};
oFF.OuInventoryProgram.prototype.prepareProgramMetadata = function(metadata)
{
	metadata.addParameter(oFF.OuInventoryProgram.PARAM_DATA_PROVIDER_NAME, "The name of the data provider to use.");
};
oFF.OuInventoryProgram.prototype.processArguments = function(args)
{
	this.m_dataProviderName = this.getArgumentStructure().getStringByKey(oFF.OuInventoryProgram.PARAM_DATA_PROVIDER_NAME);
};
oFF.OuInventoryProgram.prototype.processConfiguration = function(configuration) {};
oFF.OuInventoryProgram.prototype.releaseObject = function()
{
	this.m_dataProviderName = null;
	this.m_view = oFF.XObjectExt.release(this.m_view);
	this.unobserveDataProviderManagerChanges();
	oFF.DfUiProgram.prototype.releaseObject.call( this );
};
oFF.OuInventoryProgram.prototype.setDataProviderFromApplication = function()
{
	let dpMgr = this.getDataApplication().getDataProviderManager();
	let dataProvider = oFF.OlapDataProviderOlapAccess.getOlapInterface(dpMgr.getDataProvider(this.m_dataProviderName));
	this.m_view.setDataProvider(oFF.OlapDataProviderOlapAccess.getOlapInterface(dataProvider));
	this.m_view.updateUi();
};
oFF.OuInventoryProgram.prototype.setupProgram = function()
{
	return null;
};
oFF.OuInventoryProgram.prototype.unobserveDataProviderManagerChanges = function()
{
	let dpMgr = this.getDataApplication().getDataProviderManager();
	dpMgr.getDataProviderCreatedListener().removeConsumerByUuid(this.m_dataProviderCreatedId);
	dpMgr.getDataProviderReleasingListener().removeConsumerByUuid(this.m_dataProviderReleasedId);
};

oFF.AuDatasourcePicker = function() {};
oFF.AuDatasourcePicker.prototype = new oFF.DfUiDialogProgram();
oFF.AuDatasourcePicker.prototype._ff_c = "AuDatasourcePicker";

oFF.AuDatasourcePicker.DEFAULT_PROGRAM_NAME = "DatasourcePicker";
oFF.AuDatasourcePicker.DS_PICKER_RECENT_KEY = "dspRecent";
oFF.AuDatasourcePicker.DS_PICKER_RECENT_KEY_2 = "dspRecent2";
oFF.AuDatasourcePicker.MAX_RECENT_RECORDS = 15;
oFF.AuDatasourcePicker.PAGE_SIZE = 25;
oFF.AuDatasourcePicker.PARAM_SYSTEM = "system";
oFF.AuDatasourcePicker.PRG_DATA_APPLICATION = "application";
oFF.AuDatasourcePicker.PRG_DATA_LISTENER = "listener";
oFF.AuDatasourcePicker.prototype.m_app = null;
oFF.AuDatasourcePicker.prototype.m_cancelBtn = null;
oFF.AuDatasourcePicker.prototype.m_currentCatalogManager = null;
oFF.AuDatasourcePicker.prototype.m_currentData = null;
oFF.AuDatasourcePicker.prototype.m_currentPage = 0;
oFF.AuDatasourcePicker.prototype.m_left = null;
oFF.AuDatasourcePicker.prototype.m_listener = null;
oFF.AuDatasourcePicker.prototype.m_objectTypeDd = null;
oFF.AuDatasourcePicker.prototype.m_querySearch = null;
oFF.AuDatasourcePicker.prototype.m_queryTbl = null;
oFF.AuDatasourcePicker.prototype.m_recentTbl = null;
oFF.AuDatasourcePicker.prototype.m_right = null;
oFF.AuDatasourcePicker.prototype.m_root = null;
oFF.AuDatasourcePicker.prototype.m_startSystemName = null;
oFF.AuDatasourcePicker.prototype.m_systemDd = null;
oFF.AuDatasourcePicker.prototype.m_systemTypeDd = null;
oFF.AuDatasourcePicker.prototype.m_systemsByType = null;
oFF.AuDatasourcePicker.prototype.buildCatalogHeader = function(parentLayout)
{
	let header = parentLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	header.setJustifyContent(oFF.UiFlexJustifyContent.START);
	header.setAlignContent(oFF.UiFlexAlignContent.CENTER);
	let systemTypeHeader = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	systemTypeHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	systemTypeHeader.setMargin(oFF.UiCssBoxEdges.create("5px"));
	systemTypeHeader.setFlex("1 0 auto");
	let systemTypeLbl = systemTypeHeader.addNewItemOfType(oFF.UiType.LABEL);
	systemTypeLbl.setText("System Type:");
	this.m_systemTypeDd = systemTypeHeader.addNewItemOfType(oFF.UiType.COMBO_BOX);
	this.m_systemTypeDd.registerOnSelectionChange(this);
	let systemHeader = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	systemHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	systemHeader.setMargin(oFF.UiCssBoxEdges.create("5px"));
	systemHeader.setFlex("1 0 auto");
	let systemLbl = systemHeader.addNewItemOfType(oFF.UiType.LABEL);
	systemLbl.setText("System:");
	this.m_systemDd = systemHeader.addNewItemOfType(oFF.UiType.COMBO_BOX);
	this.m_systemDd.registerOnSelectionChange(this);
	let objectTypeHeader = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	objectTypeHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	objectTypeHeader.setMargin(oFF.UiCssBoxEdges.create("5px"));
	objectTypeHeader.setFlex("1 0 auto");
	let objectTypeLbl = objectTypeHeader.addNewItemOfType(oFF.UiType.LABEL);
	objectTypeLbl.setText("Object Type:");
	this.m_objectTypeDd = objectTypeHeader.addNewItemOfType(oFF.UiType.COMBO_BOX);
	this.m_objectTypeDd.registerOnSelectionChange(this);
	let iterator = oFF.MetaObjectType.getAll();
	while (iterator.hasNext())
	{
		let objectType = iterator.next();
		let item = this.m_objectTypeDd.addNewItem();
		item.setName(objectType.getName());
		item.setText(objectType.getCamelCaseName());
		item.setCustomObject(objectType);
	}
	let searchHeader = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	searchHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	searchHeader.setMargin(oFF.UiCssBoxEdges.create("5px"));
	searchHeader.setFlex("1 0 auto");
	let searchLbl = searchHeader.addNewItemOfType(oFF.UiType.LABEL);
	searchLbl.setText("Search:");
	this.m_querySearch = searchHeader.addNewItemOfType(oFF.UiType.SEARCH_FIELD);
	this.m_querySearch.registerOnSearch(this);
	this.m_querySearch.setName("DataSourcePickerSearch");
};
oFF.AuDatasourcePicker.prototype.buildCatalogUi = function(catalogTab)
{
	catalogTab.setText(this.getLocalization().getText(oFF.AuDatasourcePickerI18n.CATALOG));
	let catalogContent = catalogTab.setNewContent(oFF.UiType.FLEX_LAYOUT);
	catalogContent.setDirection(oFF.UiFlexDirection.COLUMN);
	this.buildCatalogHeader(catalogContent);
	let autoRowMode = oFF.UiRowMode.createAuto();
	autoRowMode.setMinRowCount(2);
	this.m_queryTbl = catalogContent.addNewItemOfType(oFF.UiType.TABLE);
	this.m_queryTbl.setName("DataSourcePickerTable");
	this.m_queryTbl.setFlex("auto");
	this.m_queryTbl.setTableSelectionMode(oFF.UiTableSelectionMode.SINGLE);
	this.m_queryTbl.setSelectionBehavior(oFF.UiSelectionBehavior.ROW);
	this.m_queryTbl.setRowMode(autoRowMode);
	this.m_queryTbl.addNewColumn().setTitle("Name");
	this.m_queryTbl.addNewColumn().setTitle("Description");
	this.m_queryTbl.registerOnSelectionChange(this);
	let footer = catalogContent.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	footer.setJustifyContent(oFF.UiFlexJustifyContent.CENTER);
	this.m_left = footer.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_left.setIcon("navigation-left-arrow");
	this.m_left.setPadding(oFF.UiCssBoxEdges.create("4px"));
	this.m_left.registerOnPress(this);
	this.m_right = footer.addNewItemOfType(oFF.UiType.BUTTON);
	this.m_right.setIcon("navigation-right-arrow");
	this.m_right.setPadding(oFF.UiCssBoxEdges.create("4px"));
	this.m_right.registerOnPress(this);
};
oFF.AuDatasourcePicker.prototype.buildRecentUi = function(recentTab)
{
	recentTab.setText(this.getLocalization().getText(oFF.AuDatasourcePickerI18n.RECENT));
	let recentContent = recentTab.setNewContent(oFF.UiType.FLEX_LAYOUT);
	recentContent.setDirection(oFF.UiFlexDirection.COLUMN);
	let autoRowMode = oFF.UiRowMode.createAuto();
	autoRowMode.setMinRowCount(2);
	this.m_recentTbl = recentContent.addNewItemOfType(oFF.UiType.TABLE);
	this.m_recentTbl.setFlex("auto");
	this.m_recentTbl.setTableSelectionMode(oFF.UiTableSelectionMode.SINGLE);
	this.m_recentTbl.setSelectionBehavior(oFF.UiSelectionBehavior.ROW);
	this.m_recentTbl.setRowMode(autoRowMode);
	this.m_recentTbl.addNewColumn().setTitle("Name");
	this.m_recentTbl.addNewColumn().setTitle("Description");
	this.m_recentTbl.addNewColumn().setTitle("Type");
	this.m_recentTbl.registerOnSelectionChange(this);
	this.m_recentTbl.setName("DataSourcePickerTable");
	let bottomLine = recentContent.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	bottomLine.setDirection(oFF.UiFlexDirection.ROW);
	let deleteBtn = bottomLine.addNewItemOfType(oFF.UiType.BUTTON);
	deleteBtn.setIcon("delete");
	let confirmBtn = bottomLine.addNewItemOfType(oFF.UiType.BUTTON);
	confirmBtn.setIcon("accept");
	confirmBtn.setVisible(false);
	confirmBtn.setMargin(oFF.UiCssBoxEdges.create("0 5px 0 0"));
	let cancelBtn = bottomLine.addNewItemOfType(oFF.UiType.BUTTON);
	cancelBtn.setIcon("cancel");
	cancelBtn.setVisible(false);
	deleteBtn.registerOnPress(oFF.UiLambdaPressListener.create((evt1) => {
		deleteBtn.setVisible(false);
		confirmBtn.setVisible(true);
		cancelBtn.setVisible(true);
		this.m_recentTbl.setTableSelectionMode(oFF.UiTableSelectionMode.MULTI_TOGGLE);
		this.m_recentTbl.registerOnSelectionChange(null);
	}));
	let listener = oFF.UiLambdaPressListener.create((evt2) => {
		deleteBtn.setVisible(true);
		confirmBtn.setVisible(false);
		cancelBtn.setVisible(false);
		if (evt2.getControl() === confirmBtn)
		{
			let selectedItems = this.m_recentTbl.getSelectedItems();
			for (let i = 0; i < selectedItems.size(); i++)
			{
				this.m_recentTbl.removeRow(selectedItems.get(i));
			}
		}
		this.m_recentTbl.setTableSelectionMode(oFF.UiTableSelectionMode.SINGLE);
		this.m_recentTbl.registerOnSelectionChange(this);
	});
	confirmBtn.registerOnPress(listener);
	cancelBtn.registerOnPress(listener);
	this.loadRecent();
};
oFF.AuDatasourcePicker.prototype.buildUi = function(genesis)
{
	this.m_root = genesis.newRoot(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
	this.m_root.useMaxSpace();
	this.m_root.setPadding(oFF.UiCssBoxEdges.create("10px"));
	let strip = this.m_root.addNewItemOfType(oFF.UiType.ICON_TAB_BAR);
	this.buildCatalogUi(strip.addNewItem());
	this.buildRecentUi(strip.addNewItem());
	let startSystemDescription = this.m_app.getSystemLandscape().getSystemDescription(this.m_startSystemName);
	this.fillSystemTypes();
	if (oFF.notNull(startSystemDescription))
	{
		this.m_systemTypeDd.setSelectedName(startSystemDescription.getSystemType().getName());
	}
	this.fillSystems();
	if (oFF.notNull(startSystemDescription))
	{
		this.m_systemDd.setSelectedName(startSystemDescription.getSystemName());
	}
	this.fillQueries();
};
oFF.AuDatasourcePicker.prototype.createCatalogManager = function()
{
	let systemTypeName = this.m_systemTypeDd.getSelectedName();
	let systems = this.m_systemsByType.getByKey(systemTypeName);
	if (oFF.isNull(systems))
	{
		return;
	}
	let systemName = this.m_systemDd.getSelectedName();
	let system = this.findSystem(systems, systemName);
	if (oFF.isNull(system))
	{
		return;
	}
	let serviceConfig = oFF.OlapCatalogApiModule.SERVICE_TYPE_OLAP_CATALOG.createServiceConfig(this.m_app);
	serviceConfig.setSystemName(systemName);
	this.m_queryTbl.setBusy(true);
	serviceConfig.processOlapCatalogManagerCreation(oFF.SyncType.NON_BLOCKING, this, null);
};
oFF.AuDatasourcePicker.prototype.fillQueries = function()
{
	this.m_querySearch.setEnabled(false);
	this.m_left.setEnabled(false);
	this.m_right.setEnabled(false);
	this.m_currentPage = 0;
	this.m_queryTbl.clearRows();
	oFF.XObjectExt.release(this.m_currentCatalogManager);
	let systemName = this.m_systemDd.getSelectedName();
	if (oFF.XStringUtils.isNullOrEmpty(systemName))
	{
		return;
	}
	this.createCatalogManager();
};
oFF.AuDatasourcePicker.prototype.fillSystemTypes = function()
{
	this.m_systemTypeDd.clearItems();
	this.m_systemTypeDd.addNewItem();
	let systemTypeNames = this.m_systemsByType.getKeysAsReadOnlyList();
	for (let i = 0; i < systemTypeNames.size(); i++)
	{
		let systemTypeName = systemTypeNames.get(i);
		let item = this.m_systemTypeDd.addNewItem();
		item.setName(systemTypeName).setText(systemTypeName);
	}
};
oFF.AuDatasourcePicker.prototype.fillSystems = function()
{
	this.m_systemDd.setEnabled(false);
	this.m_systemDd.clearItems();
	this.m_objectTypeDd.setEnabled(false);
	this.m_objectTypeDd.clearItems();
	this.m_systemDd.setSelectedItem(this.m_systemDd.addNewItem());
	let systemTypeName = this.m_systemTypeDd.getSelectedName();
	if (oFF.XStringUtils.isNullOrEmpty(systemTypeName))
	{
		return;
	}
	let systems = this.m_systemsByType.getByKey(systemTypeName);
	for (let i = 0; i < systems.size(); i++)
	{
		let system = systems.get(i);
		let systemItem = this.m_systemDd.addNewItem();
		systemItem.setName(system.getName()).setText(system.getName());
	}
	let systemType = oFF.SystemType.lookup(systemTypeName);
	let objectTypes = this.getPossibleObjectType(systemType);
	for (let j = 0; j < objectTypes.size(); j++)
	{
		let objectType = objectTypes.get(j);
		let objectItem = this.m_objectTypeDd.addNewItem();
		objectItem.setName(objectType.getName()).setText(objectType.getCamelCaseName());
		objectItem.setCustomObject(objectType);
	}
	this.m_objectTypeDd.setSelectedName(objectTypes.get(0).getName());
	this.m_systemDd.setEnabled(true);
	this.m_objectTypeDd.setEnabled(true);
};
oFF.AuDatasourcePicker.prototype.findSystem = function(systems, systemName)
{
	for (let i = 0; i < systems.size(); i++)
	{
		let system = systems.get(i);
		if (oFF.XString.isEqual(systemName, system.getName()))
		{
			return system;
		}
	}
	return null;
};
oFF.AuDatasourcePicker.prototype.getDialogButtons = function(genesis)
{
	this.m_cancelBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_cancelBtn.setName("DataSourcePickerCancel");
	this.m_cancelBtn.setText("Cancel");
	this.m_cancelBtn.registerOnPress(this);
	let tmpList = oFF.XList.create();
	tmpList.add(this.m_cancelBtn);
	return tmpList;
};
oFF.AuDatasourcePicker.prototype.getPossibleObjectType = function(systemType)
{
	let result = oFF.XList.create();
	if (systemType.isTypeOf(oFF.SystemType.ABAP))
	{
		result.add(oFF.MetaObjectType.QUERY);
		result.add(oFF.MetaObjectType.CDS_PROJECTION_VIEW);
		result.add(oFF.MetaObjectType.DEFAULT_REPORT_QUERY);
		result.add(oFF.MetaObjectType.DEFAULT_PLAN_QUERY);
		result.add(oFF.MetaObjectType.FILTER);
		if (systemType === oFF.SystemType.BPCE || systemType === oFF.SystemType.BPCS)
		{
			result.add(oFF.MetaObjectType.PLANNING_FUNCTION);
			result.add(oFF.MetaObjectType.PLANNING_SEQUENCE);
		}
	}
	else if (systemType.isTypeOf(oFF.SystemType.HANA))
	{
		if (systemType.isTypeOf(oFF.SystemType.ABAP_MDS))
		{
			result.add(oFF.MetaObjectType.QUERY);
		}
		else
		{
			result.add(oFF.MetaObjectType.DBVIEW);
			result.add(oFF.MetaObjectType.PLANNING);
			result.add(oFF.MetaObjectType.INA_MODEL);
		}
	}
	else if (systemType.isTypeOf(oFF.SystemType.VIRTUAL_INA))
	{
		result.add(oFF.MetaObjectType.DBVIEW);
	}
	else if (systemType.isTypeOf(oFF.SystemType.UNV) || systemType.isTypeOf(oFF.SystemType.UQAS))
	{
		result.add(oFF.MetaObjectType.UNX);
	}
	else
	{
		let iterator = oFF.MetaObjectType.getAll();
		while (iterator.hasNext())
		{
			result.add(iterator.next());
		}
	}
	return result;
};
oFF.AuDatasourcePicker.prototype.getProgramName = function()
{
	return oFF.AuDatasourcePicker.DEFAULT_PROGRAM_NAME;
};
oFF.AuDatasourcePicker.prototype.isSACInternalSystem = function(systemDescription)
{
	let systemProperties = systemDescription.getProperties();
	if (oFF.isNull(systemProperties))
	{
		return false;
	}
	if (!systemProperties.isValueDefined(oFF.ConnectionParameters.FPA_IS_CONNECTED))
	{
		return false;
	}
	let isConnected = systemProperties.getBooleanByKey(oFF.ConnectionParameters.FPA_IS_CONNECTED);
	let hasConnectionType = systemProperties.isValueDefined(oFF.ConnectionParameters.FPA_CONNECTION_TYPE);
	return isConnected && !hasConnectionType;
};
oFF.AuDatasourcePicker.prototype.loadRecent = function()
{
	this.m_recentTbl.clearRows();
	let recentString = this.getProcess().getLocalStorage().getStringByKey(oFF.AuDatasourcePicker.DS_PICKER_RECENT_KEY);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(recentString))
	{
		this.loadRecentOld(recentString);
		return;
	}
	recentString = this.getProcess().getLocalStorage().getStringByKey(oFF.AuDatasourcePicker.DS_PICKER_RECENT_KEY_2);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(recentString))
	{
		let importer = oFF.QInAImportFactory.createForRepository(this.getApplication(), null);
		let datasourceList = oFF.JsonParserFactory.createFromSafeString(recentString).asList();
		for (let j = 0; j < datasourceList.size(); j++)
		{
			let datasourceStruct = datasourceList.get(j).asStructure();
			let dataSource = importer.importDataSource(datasourceStruct);
			if (oFF.isNull(dataSource))
			{
				continue;
			}
			let row = this.m_recentTbl.addNewRow();
			row.addNewCell().setText(dataSource.getSystemName());
			row.addNewCell().setText(dataSource.getName());
			row.addNewCell().setText(dataSource.getType().getCamelCaseName());
			row.setCustomObject(dataSource);
		}
	}
};
oFF.AuDatasourcePicker.prototype.loadRecentOld = function(recentString)
{
	let entries = oFF.XStringTokenizer.splitString(recentString, ";");
	for (let i = 0; i < entries.size(); i++)
	{
		let entry = oFF.XStringTokenizer.splitString(entries.get(i), ",");
		if (oFF.isNull(entry) || entry.size() < 2)
		{
			continue;
		}
		let system = entry.get(0);
		let fullQualifiedName = entry.get(1);
		if (oFF.XStringUtils.isNullOrEmpty(system) || oFF.XStringUtils.isNullOrEmpty(fullQualifiedName))
		{
			continue;
		}
		let dataSource = oFF.QFactory.createDataSourceWithFqn(fullQualifiedName);
		dataSource.setSystemName(system);
		if (dataSource.getType() === null)
		{
			continue;
		}
		let row = this.m_recentTbl.addNewRow();
		row.addNewCell().setText(system);
		row.addNewCell().setText(dataSource.getName());
		row.addNewCell().setText(dataSource.getType().getCamelCaseName());
		row.setCustomObject(dataSource);
	}
	this.getProcess().getLocalStorage().removeKey(oFF.AuDatasourcePicker.DS_PICKER_RECENT_KEY);
};
oFF.AuDatasourcePicker.prototype.newProgram = function()
{
	let prg = new oFF.AuDatasourcePicker();
	prg.setup();
	return prg;
};
oFF.AuDatasourcePicker.prototype.onOlapCatalogManagerCreated = function(extResult, olapCatalogManager, customIdentifier)
{
	this.m_queryTbl.setBusy(false);
	if (extResult.hasErrors())
	{
		this.showError(extResult.getSummary());
		return;
	}
	this.m_currentCatalogManager = extResult.getData();
	this.m_currentCatalogManager.setResultMaxSize(oFF.AuDatasourcePicker.PAGE_SIZE + 1);
	let selectedItem = this.m_objectTypeDd.getSelectedItem();
	if (oFF.notNull(selectedItem))
	{
		this.m_currentCatalogManager.setSelectedType(selectedItem.getCustomObject());
	}
	this.processFetch();
	this.m_querySearch.setEnabled(true);
};
oFF.AuDatasourcePicker.prototype.onOlapCatalogResult = function(extResult, result, customIdentifier)
{
	this.m_queryTbl.setBusy(false);
	if (extResult.hasErrors())
	{
		this.showError(extResult.getSummary());
		return;
	}
	this.m_currentData = extResult.getData().getObjectsList();
	this.updateTable();
};
oFF.AuDatasourcePicker.prototype.onPress = function(event)
{
	let control = event.getControl();
	if (control === this.m_left)
	{
		this.m_currentPage = this.m_currentPage - 1;
		this.processFetch();
	}
	else if (control === this.m_right)
	{
		this.m_currentPage = this.m_currentPage + 1;
		this.processFetch();
	}
	else if (control === this.m_cancelBtn)
	{
		this.saveRecent(null);
		this.exitNow(0);
	}
};
oFF.AuDatasourcePicker.prototype.onSearch = function(event)
{
	let control = event.getControl();
	if (control === this.m_querySearch)
	{
		this.m_currentPage = 0;
		this.processFetch();
	}
};
oFF.AuDatasourcePicker.prototype.onSelectionChange = function(event)
{
	let control = event.getControl();
	let selectedItem = control.getSelectedItem();
	if (control === this.m_queryTbl)
	{
		let catalogItem = selectedItem.getCustomObject();
		let dataSource = oFF.QFactory.createDataSource();
		dataSource.setSystemName(this.m_systemDd.getSelectedName());
		dataSource.setType(catalogItem.getType());
		dataSource.setEnvironmentName(catalogItem.getEnvironmentName());
		dataSource.setSchemaName(catalogItem.getSchemaName());
		dataSource.setPackageName(catalogItem.getPackageName());
		dataSource.setObjectName(catalogItem.getObjectName());
		this.saveRecent(dataSource);
		if (oFF.notNull(this.m_listener))
		{
			this.m_listener.onDatasourceSelected(dataSource);
		}
		this.exitNow(0);
	}
	else if (control === this.m_recentTbl)
	{
		let selectedDatasource = selectedItem.getCustomObject();
		this.saveRecent(selectedDatasource);
		if (oFF.notNull(this.m_listener))
		{
			this.m_listener.onDatasourceSelected(selectedDatasource);
		}
		this.exitNow(0);
	}
	else if (control === this.m_systemTypeDd)
	{
		this.fillSystems();
		this.fillQueries();
	}
	else if (control === this.m_systemDd)
	{
		this.fillQueries();
	}
	else if (control === this.m_objectTypeDd && oFF.notNull(this.m_currentCatalogManager))
	{
		let objectType = selectedItem.getCustomObject();
		this.m_currentCatalogManager.setSelectedType(objectType);
		this.processFetch();
	}
};
oFF.AuDatasourcePicker.prototype.prepareProgramMetadata = function(metadata)
{
	metadata.addParameter(oFF.AuDatasourcePicker.PARAM_SYSTEM, "The system that was picked earlier.");
};
oFF.AuDatasourcePicker.prototype.processArguments = function(args)
{
	let prgArgs = this.getArguments();
	this.m_startSystemName = prgArgs.getStringByKeyExt(oFF.AuDatasourcePicker.PARAM_SYSTEM, null);
	if (this.getStartData() !== null)
	{
		this.m_app = this.getStartData().getXObjectByKey(oFF.AuDatasourcePicker.PRG_DATA_APPLICATION);
		this.m_listener = this.getStartData().getXObjectByKey(oFF.AuDatasourcePicker.PRG_DATA_LISTENER);
	}
};
oFF.AuDatasourcePicker.prototype.processConfiguration = function(configuration) {};
oFF.AuDatasourcePicker.prototype.processFetch = function()
{
	this.m_currentCatalogManager.setSearchFilter(null);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_querySearch.getValue()))
	{
		let searchString = oFF.XStringUtils.concatenate3("*", this.m_querySearch.getValue(), "*");
		this.m_currentCatalogManager.setSearchFilter(searchString);
		this.m_currentCatalogManager.setSearchOnName(true);
	}
	this.m_currentCatalogManager.setResultOffset(this.m_currentPage * oFF.AuDatasourcePicker.PAGE_SIZE);
	this.m_queryTbl.setBusy(true);
	this.m_currentCatalogManager.processGetResult(oFF.SyncType.NON_BLOCKING, this, null);
};
oFF.AuDatasourcePicker.prototype.releaseObject = function()
{
	this.m_systemsByType = oFF.XObjectExt.release(this.m_systemsByType);
	this.m_currentCatalogManager = oFF.XObjectExt.release(this.m_currentCatalogManager);
	this.m_currentData = oFF.XObjectExt.release(this.m_currentData);
	this.m_startSystemName = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	this.m_systemTypeDd = null;
	this.m_systemDd = null;
	this.m_querySearch = null;
	this.m_queryTbl = null;
	this.m_left = null;
	this.m_right = null;
	this.m_recentTbl = null;
	this.m_cancelBtn = null;
	this.m_listener = null;
	oFF.DfUiDialogProgram.prototype.releaseObject.call( this );
};
oFF.AuDatasourcePicker.prototype.saveRecent = function(newDatasource)
{
	let exporter = oFF.QInAExportFactory.createForRepository(this.getApplication(), null);
	let list = oFF.PrList.create();
	let datasources = oFF.XList.create();
	if (oFF.notNull(newDatasource))
	{
		list.add(exporter.exportDataSource(newDatasource, false));
		datasources.add(newDatasource);
	}
	let rows = this.m_recentTbl.getRows();
	for (let i = 0; i < rows.size() && i < oFF.AuDatasourcePicker.MAX_RECENT_RECORDS - 1; i++)
	{
		let row = rows.get(i);
		let datasource = row.getCustomObject();
		if (datasources.contains(datasource))
		{
			continue;
		}
		list.add(exporter.exportDataSource(datasource, false));
		datasources.add(datasource);
	}
	let result = oFF.PrUtils.serialize(list, false, false, 0);
	this.getProcess().getLocalStorage().putString(oFF.AuDatasourcePicker.DS_PICKER_RECENT_KEY_2, result);
};
oFF.AuDatasourcePicker.prototype.setupProgram = function()
{
	if (oFF.isNull(this.m_app))
	{
		this.m_app = this.getApplication();
	}
	this.m_systemsByType = oFF.XHashMapByString.create();
	let systemLandscape = this.getProcess().getSystemLandscape();
	let systemIt = systemLandscape.getSystemNames().getIterator();
	while (systemIt.hasNext())
	{
		let systemName = systemIt.next();
		let systemDescription = systemLandscape.getSystemDescription(systemName);
		let systemTypeName = systemDescription.getSystemType().getName();
		let systems = this.m_systemsByType.getByKey(systemTypeName);
		if (!this.isSACInternalSystem(systemDescription))
		{
			if (oFF.isNull(systems))
			{
				systems = oFF.XList.create();
				this.m_systemsByType.put(systemTypeName, systems);
			}
			systems.add(systemDescription);
		}
	}
	oFF.XObjectExt.release(systemIt);
	return null;
};
oFF.AuDatasourcePicker.prototype.showError = function(msg)
{
	this.getGenesis().showErrorToast(msg);
};
oFF.AuDatasourcePicker.prototype.updatePageButtons = function()
{
	this.m_left.setEnabled(this.m_currentPage > 0);
	this.m_right.setEnabled(this.m_currentData.size() > oFF.AuDatasourcePicker.PAGE_SIZE);
};
oFF.AuDatasourcePicker.prototype.updateTable = function()
{
	this.m_queryTbl.clearRows();
	for (let i = 0; i < this.m_currentData.size(); i++)
	{
		if (i >= oFF.AuDatasourcePicker.PAGE_SIZE)
		{
			break;
		}
		let catalogItem = this.m_currentData.get(i);
		let row = this.m_queryTbl.addNewRow();
		row.addNewCell().setText(catalogItem.getName());
		row.addNewCell().setText(catalogItem.getText());
		row.setCustomObject(catalogItem);
	}
	this.updatePageButtons();
};

oFF.OuShareDialog = function() {};
oFF.OuShareDialog.prototype = new oFF.DfUiDialogProgram();
oFF.OuShareDialog.prototype._ff_c = "OuShareDialog";

oFF.OuShareDialog.DEFAULT_PROGRAM_NAME = "ShareDialog";
oFF.OuShareDialog.prototype.m_access = null;
oFF.OuShareDialog.prototype.m_accessButton = null;
oFF.OuShareDialog.prototype.m_accessPanel = null;
oFF.OuShareDialog.prototype.m_accessType = null;
oFF.OuShareDialog.prototype.m_customAccess = null;
oFF.OuShareDialog.prototype.m_fetchUsersTeams = null;
oFF.OuShareDialog.prototype.m_file = null;
oFF.OuShareDialog.prototype.m_generalLayout = null;
oFF.OuShareDialog.prototype.m_isSearch = false;
oFF.OuShareDialog.prototype.m_isSelectAll = false;
oFF.OuShareDialog.prototype.m_link = null;
oFF.OuShareDialog.prototype.m_mainCustomAccess = null;
oFF.OuShareDialog.prototype.m_owner = null;
oFF.OuShareDialog.prototype.m_panelAccessMenuButton = null;
oFF.OuShareDialog.prototype.m_panelLayout = null;
oFF.OuShareDialog.prototype.m_selectedUsers = null;
oFF.OuShareDialog.prototype.m_table = null;
oFF.OuShareDialog.prototype.m_tableAccessMenuButton = null;
oFF.OuShareDialog.prototype.m_userTeamsMultiInput = null;
oFF.OuShareDialog.prototype.m_workspace = null;
oFF.OuShareDialog.prototype.buildGeneralLayout = function(genesis)
{
	this.m_generalLayout = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	this.m_generalLayout.setHeight(oFF.UiCssLength.create("60%"));
	this.buildLinkSection();
	this.m_generalLayout.setFlex("1 0 auto");
	let header = this.m_generalLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	header.setMargin(oFF.UiCssBoxEdges.create("0 1rem"));
	header.setJustifyContent(oFF.UiFlexJustifyContent.START);
	header.setAlignContent(oFF.UiFlexAlignContent.CENTER);
	let userTeamsHeader = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	userTeamsHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	userTeamsHeader.setFlex("1 0 78%");
	let userTeamsLabel = userTeamsHeader.addNewItemOfType(oFF.UiType.LABEL);
	userTeamsLabel.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.MULTI_INPUT_HEADER));
	this.m_userTeamsMultiInput = userTeamsHeader.addNewItemOfType(oFF.UiType.MULTI_INPUT);
	userTeamsLabel.setLabelFor(this.m_userTeamsMultiInput);
	this.m_userTeamsMultiInput.setValueHelpIcon("fpa/person");
	this.m_userTeamsMultiInput.setTooltip(this.getLocalization().getText(oFF.OuShareDialogI18n.MULTI_INPUT_TOOLTIP));
	this.m_userTeamsMultiInput.setValueStateText(this.getLocalization().getText(oFF.OuShareDialogI18n.NO_USER_ENTERED_ERROR));
	this.m_userTeamsMultiInput.setShowSuggestion(true);
	this.m_userTeamsMultiInput.registerOnLiveChange(oFF.UiLambdaLiveChangeWithDebounceListener.create((controlEvent) => {
		if (oFF.notNull(controlEvent))
		{
			let searchText = controlEvent.getParameters().getStringByKey("value");
			this.m_userTeamsMultiInput.clearSuggestions();
			if (!oFF.XStringUtils.isNullOrEmpty(searchText))
			{
				this.searchAllUsers(0, 1000, searchText, this.m_workspace).onThen((result) => {
					let users = result.getChildFiles();
					if (!users.isEmpty())
					{
						oFF.XCollectionUtils.forEach(users, (user) => {
							if (!oFF.XString.isEqual(user.getAttributes().getStringByKey(oFF.XFileAttribute.NAME), this.m_owner))
							{
								let userValue = oFF.FilterDialogValueFactory.createUserValueByFile(user);
								if (!oFF.XCollectionUtils.contains(this.m_userTeamsMultiInput.getChips(), (chip) => {
									return userValue.isEqualTo(chip.getCustomObject());
								}))
								{
									this.m_userTeamsMultiInput.addNewSuggestion().setText(userValue.getText()).setName(userValue.getDisplayKey()).setCustomObject(userValue);
								}
							}
						});
					}
				}).onFinally(() => {
					this.searchAllTeams(0, 1000, searchText, this.m_workspace).onThen((result) => {
						let teams = result.getChildFiles();
						if (!teams.isEmpty())
						{
							oFF.XCollectionUtils.forEach(teams, (team) => {
								let teamValue = oFF.FilterDialogValueFactory.createTeamValueByFile(team);
								if (!oFF.XCollectionUtils.contains(this.m_userTeamsMultiInput.getChips(), (chip) => {
									return teamValue.isEqualTo(chip.getCustomObject());
								}))
								{
									this.m_userTeamsMultiInput.addNewSuggestion().setText(teamValue.getText()).setName(teamValue.getDisplayKey()).setCustomObject(teamValue);
								}
							});
						}
					}).onFinally(() => {
						if (!this.m_userTeamsMultiInput.getSuggestions().isEmpty())
						{
							this.m_userTeamsMultiInput.setValueState(oFF.UiValueState.NONE);
							this.m_userTeamsMultiInput.showSuggestions();
						}
						else
						{
							this.m_userTeamsMultiInput.setValueState(oFF.UiValueState.ERROR);
						}
					});
				});
			}
		}
	}, 500));
	this.m_userTeamsMultiInput.registerOnSuggestionSelect(oFF.UiLambdaSuggestionSelectListener.create((controlEvent) => {
		let text = controlEvent.getSelectedItem().getText();
		let customObject = controlEvent.getSelectedItem().getCustomObject();
		oFF.XStream.of(this.m_userTeamsMultiInput.getChips()).filter((chip) => {
			return oFF.XString.isEqual(chip.getText(), text);
		}).forEach((selectedChip) => {
			this.updateChip(selectedChip, customObject);
		});
	}));
	this.m_userTeamsMultiInput.registerOnValueHelpRequest(oFF.UiLambdaValueHelpRequestListener.create((control) => {
		let runner = oFF.FilterDialogProgramRunnerFactory.createForUserAndTeam(this.getProcess(), this.getLocalization().getText(oFF.OuShareDialogI18n.MEMBER_SELECTOR_TITLE), this.m_workspace, this.m_owner);
		let filterDialogConfig = oFF.PrFactory.createStructure();
		filterDialogConfig.putString(oFF.FilterDialog.PARAM_SELECTION_MODE, oFF.UiSelectionMode.MULTI_SELECT.getName());
		runner.setConfigStructure(filterDialogConfig);
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_DEFAULT_SELECTION, oFF.XCollectionUtils.map(this.m_userTeamsMultiInput.getChips(), (chip) => {
			return chip.getCustomObject();
		}));
		runner.getProgramStartData().putXObject(oFF.FilterDialog.PRG_DATA_LISTENER_CLOSE, oFF.FilterDialogLambdaCloseListener.create((selection) => {
			this.m_userTeamsMultiInput.clearChips();
			oFF.XCollectionUtils.forEach(selection, (selectedUser) => {
				this.updateChip(this.m_userTeamsMultiInput.addNewChip(), selectedUser);
			});
			if (this.m_userTeamsMultiInput.getChips().hasElements())
			{
				this.m_userTeamsMultiInput.setBorderColor(oFF.UiColor.GREY);
			}
		}, null));
		runner.runProgram();
	}));
	let accessHeader = header.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	accessHeader.setDirection(oFF.UiFlexDirection.COLUMN);
	accessHeader.setMargin(oFF.UiCssBoxEdges.create("0 0 0 1rem"));
	accessHeader.setFlex("1 0 15%");
	let accessLabel = accessHeader.addNewItemOfType(oFF.UiType.LABEL);
	accessLabel.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.ACCESS));
	this.m_accessButton = genesis.newControl(oFF.UiType.MENU_BUTTON);
	this.m_accessButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	accessLabel.setLabelFor(this.m_accessButton);
	accessHeader.addItem(this.m_accessButton);
	this.m_accessType = genesis.newControl(oFF.UiType.MENU);
	this.m_accessButton.setMenu(this.m_accessType);
	this.m_accessButton.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE));
	this.m_accessButton.setName("view");
	this.m_accessButton.addCssClass("ffShareDialogAccessMenu");
	let checkboxLayout = this.m_generalLayout.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	checkboxLayout.setMargin(oFF.UiCssBoxEdges.create("0.2rem 0.5rem"));
	let emailCheckbox = checkboxLayout.addNewItemOfType(oFF.UiType.CHECKBOX);
	emailCheckbox.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.EMAIL_CHECKBOX_LABEL));
	let buttonLayout = this.m_generalLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	header.setJustifyContent(oFF.UiFlexJustifyContent.START);
	buttonLayout.setMargin(oFF.UiCssBoxEdges.create("0 1rem 1rem 1rem"));
	let shareButtonLayout = buttonLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	shareButtonLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	let shareButton = shareButtonLayout.addNewItemOfType(oFF.UiType.DIALOG_BUTTON);
	shareButton.setVisible(true);
	shareButton.setButtonType(oFF.UiButtonType.PRIMARY);
	shareButton.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.SHARE));
	shareButton.registerOnPress(oFF.UiLambdaPressListener.create((event) => {
		let usersToShare = this.m_userTeamsMultiInput.getChips();
		if (usersToShare.isEmpty())
		{
			this.m_userTeamsMultiInput.setBorderColor(oFF.UiColor.RED);
		}
		else
		{
			let access = oFF.XFileAccessState.create();
			let fileAccess = this.m_access.getXFileAccess(this.m_accessButton.getName(), this.m_customAccess);
			for (let i = 0; i < usersToShare.size(); i++)
			{
				for (let j = 0; j < fileAccess.size(); j++)
				{
					access.setUserAccess(usersToShare.get(i).getCustomObject().getKey(), fileAccess.get(j), true);
				}
			}
			this.setBusy(true);
			this.shareFile(access, emailCheckbox.isChecked(), false);
		}
	}));
	let cancelButtonLayout = buttonLayout.addNewItemOfType(oFF.UiType.FLEX_LAYOUT);
	cancelButtonLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	let cancelButton = cancelButtonLayout.addNewItemOfType(oFF.UiType.DIALOG_BUTTON);
	cancelButton.setText(this.getLocalization().getText(oFF.XCommonI18n.CANCEL));
	cancelButton.setVisible(true);
	cancelButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.terminate();
	}));
	cancelButton.setButtonType(oFF.UiButtonType.TRANSPARENT);
	cancelButton.setPadding(oFF.UiCssBoxEdges.create("0 0 0 0.5rem"));
	this.m_accessPanel = oFF.OuShareDialogAccessPanel.create(this, true);
	return this.m_generalLayout;
};
oFF.OuShareDialog.prototype.buildLinkSection = function()
{
	let sectionLayout = this.m_generalLayout.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	sectionLayout.setMargin(oFF.UiCssBoxEdges.create("1rem"));
	let sectionHeader = sectionLayout.addNewItemOfType(oFF.UiType.LABEL);
	sectionHeader.setName("linkHeader");
	sectionHeader.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.LINK_SECTION_HEADER));
	let itemText = sectionLayout.addNewItemOfType(oFF.UiType.LABEL);
	sectionHeader.setLabelFor(itemText);
	itemText.setName("shareURL");
	itemText.setWrapping(true);
	itemText.setText(this.m_link);
	this.setContainerSize(oFF.UiSize.createByCss("43rem", "auto"));
};
oFF.OuShareDialog.prototype.buildUi = function(genesis)
{
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	this.setTitle(this.getLocalization().getText(oFF.OuShareDialogI18n.DIALOG_TITLE));
	mainLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	mainLayout.setJustifyContent(oFF.UiFlexJustifyContent.SPACE_AROUND);
	mainLayout.addItem(this.buildGeneralLayout(genesis));
	this.m_accessType.setName("MainAccess");
	this.fillAccessTypes(this.m_accessType);
	genesis.setRoot(mainLayout);
};
oFF.OuShareDialog.prototype.createMenuItem = function(menu, accessType)
{
	let accessTypeText = accessType.getStringByKey("text");
	let accessTypeName = accessType.getStringByKey("name");
	let item = this.getGenesis().newControl(oFF.UiType.MENU_ITEM);
	menu.addItem(item);
	item.setName(accessTypeName).setText(accessTypeText);
	if (oFF.XString.isEqual(accessTypeName, "view") && oFF.XString.isEqual(menu.getName(), "MainAccess"))
	{
		item.setIcon("fpa/completed");
	}
	return item;
};
oFF.OuShareDialog.prototype.fillAccessTypes = function(menu)
{
	menu.clearItems();
	let accessTypes = oFF.XList.create();
	let viewAccess = oFF.PrFactory.createStructure();
	viewAccess.putString("text", this.getLocalization().getText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE));
	viewAccess.putString("name", "view");
	accessTypes.add(viewAccess);
	let editAccess = oFF.PrFactory.createStructure();
	editAccess.putString("text", this.getLocalization().getText(oFF.OuShareDialogI18n.EDIT_ACCESS_TYPE));
	editAccess.putString("name", "edit");
	accessTypes.add(editAccess);
	let fullAccess = oFF.PrFactory.createStructure();
	fullAccess.putString("text", this.getLocalization().getText(oFF.OuShareDialogI18n.FULL_ACCESS_TYPE));
	fullAccess.putString("name", "full");
	accessTypes.add(fullAccess);
	let customStruct = oFF.PrFactory.createStructure();
	customStruct.putString("text", this.getLocalization().getText(oFF.OuShareDialogI18n.CUSTOM_ACCESS_TYPE));
	customStruct.putString("name", "custom");
	accessTypes.add(customStruct);
	if (oFF.XString.isEqual(menu.getName(), "MainAccess"))
	{
		for (let i = 0; i < accessTypes.size(); i++)
		{
			let item = this.createMenuItem(menu, accessTypes.get(i));
			item.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
				for (let j = 0; j < menu.getItems().size(); j++)
				{
					let menuItem = menu.getItems().get(j);
					menuItem.setIcon("");
				}
				item.setIcon("fpa/completed");
				this.m_accessButton.setText(item.getText());
				this.m_accessButton.setName(item.getName());
				if (oFF.XString.isEqual(item.getName(), "custom"))
				{
					this.openCustomAccessDialog(this.m_mainCustomAccess, (customAccess) => {
						if (oFF.notNull(customAccess))
						{
							this.m_customAccess = customAccess;
							this.m_mainCustomAccess = customAccess;
						}
						else
						{
							item.setIcon("");
							let menuItem = menu.getItems().get(0);
							menuItem.setIcon("fpa/completed");
							this.m_accessButton.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.VIEW_ACCESS_TYPE));
							this.m_accessButton.setName("view");
						}
					});
				}
			}));
		}
	}
	else if (oFF.XString.isEqual(menu.getName(), "selectedUsersTable"))
	{
		for (let i = 0; i < accessTypes.size(); i++)
		{
			let item = this.createMenuItem(menu, accessTypes.get(i));
			item.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
				this.m_panelAccessMenuButton.setVisible(false);
				let accessValue = item.getName();
				let selectedRows = this.m_table.getSelectedItems();
				if (oFF.XString.isEqual(accessValue, "custom"))
				{
					this.openCustomAccessDialog(null, (customAccess) => {
						if (oFF.notNull(customAccess))
						{
							let listToAdd = oFF.XList.create();
							for (let j = 0; j < selectedRows.size(); j++)
							{
								listToAdd.add(selectedRows.get(j).getResponsiveTableCell(0).getName());
							}
							let userAccessMap = oFF.XFileAccessState.create();
							let fileAccess = this.m_access.getXFileAccess(accessValue, customAccess);
							for (let k = 0; k < listToAdd.size(); k++)
							{
								for (let j = 0; j < fileAccess.size(); j++)
								{
									userAccessMap.setUserAccess(listToAdd.get(k), fileAccess.get(j), true);
								}
							}
							this.m_isSearch = false;
							this.setBusy(true);
							this.shareFile(userAccessMap, false, this.m_isSelectAll);
						}
					});
				}
				else
				{
					let listToAdd = oFF.XList.create();
					for (let j = 0; j < selectedRows.size(); j++)
					{
						listToAdd.add(selectedRows.get(j).getResponsiveTableCell(0).getName());
					}
					let access = oFF.XFileAccessState.create();
					let fileAccess = this.m_access.getXFileAccess(accessValue, this.m_customAccess);
					for (let k = 0; k < listToAdd.size(); k++)
					{
						for (let j = 0; j < fileAccess.size(); j++)
						{
							access.setUserAccess(listToAdd.get(k), fileAccess.get(j), true);
						}
					}
					this.m_isSearch = false;
					this.setBusy(true);
					this.shareFile(access, false, this.m_isSelectAll);
				}
			}));
		}
	}
	else
	{
		for (let i = 0; i < accessTypes.size(); i++)
		{
			let item = this.createMenuItem(menu, accessTypes.get(i));
			item.registerOnPress(oFF.UiLambdaPressListener.create((evt) => {
				let accessUpdate = item.getName();
				if (oFF.XString.isEqual(accessUpdate, "custom"))
				{
					let userAccessList = this.m_accessPanel.getUserAccessList();
					let userName = item.getKey();
					let accessNum = 0;
					for (let j = 0; j < userAccessList.size() - 1; j++)
					{
						let user = userAccessList.getStructureAt(j).getStringByKey("id");
						if (oFF.XString.isEqual(userName, user))
						{
							accessNum = userAccessList.getStructureAt(j).getIntegerByKey("access");
						}
					}
					let customAccess = this.m_access.createJsonFromAccessNum(accessNum);
					this.openCustomAccessDialog(customAccess, (customAccessTableRow) => {
						if (oFF.notNull(customAccessTableRow))
						{
							this.m_customAccess = customAccessTableRow;
							let userAccessMap = oFF.XFileAccessState.create();
							let fileAccess = this.m_access.getXFileAccess(accessUpdate, this.m_customAccess);
							for (let j = 0; j < fileAccess.size(); j++)
							{
								userAccessMap.setUserAccess(userName, fileAccess.get(j), true);
							}
							this.setBusy(true);
							this.shareFile(userAccessMap, false, false);
							this.m_tableAccessMenuButton.setText(item.getText());
							this.m_tableAccessMenuButton.setName(item.getName());
						}
					});
				}
				else
				{
					let userName = item.getKey();
					let access = oFF.XFileAccessState.create();
					let fileAccess = this.m_access.getXFileAccess(accessUpdate, this.m_customAccess);
					for (let j = 0; j < fileAccess.size(); j++)
					{
						access.setUserAccess(userName, fileAccess.get(j), true);
					}
					this.setBusy(true);
					this.shareFile(access, false, false);
					this.m_tableAccessMenuButton.setText(item.getText());
					this.m_tableAccessMenuButton.setName(item.getName());
				}
				let items = this.m_tableAccessMenuButton.getMenu().getItems();
				for (let j = 0; j < items.size(); j++)
				{
					let menuItem = items.get(j);
					if (oFF.XString.isEqual(menuItem.getText(), this.m_tableAccessMenuButton.getText()))
					{
						menuItem.setIcon("fpa/completed");
					}
					else
					{
						menuItem.setIcon("");
					}
				}
			}));
		}
		let menuItems = menu.getItems();
		for (let j = 0; j < menuItems.size(); j++)
		{
			let menuItem = menuItems.get(j);
			if (oFF.XString.isEqual(menuItem.getText(), this.m_tableAccessMenuButton.getText()))
			{
				menuItem.setIcon("fpa/completed");
			}
			else
			{
				menuItem.setIcon("");
			}
		}
	}
};
oFF.OuShareDialog.prototype.getAccessRights = function(offset, maxUsers, searchValue, isInitialiseShareDialog)
{
	let query = this.m_file.newFileQuery();
	query.setSearchValue(searchValue);
	query.setOffset(offset);
	query.setMaxItems(maxUsers);
	return oFF.XPromise.create((resolve, reject) => {
		this.m_file.processFetchAccessRights(oFF.SyncType.NON_BLOCKING, oFF.XLambdaFileFetchAccessRightsListener.create((result, metadata) => {
			if ((oFF.notNull(result)) && !result.hasErrors())
			{
				resolve(result.getData().getAttributes());
			}
			else
			{
				if (isInitialiseShareDialog)
				{
					this.getGenesis().showErrorToast(this.getLocalization().getText(oFF.OuShareDialogI18n.ACCESS_ERROR));
					this.terminate();
				}
			}
		}), null, query);
	});
};
oFF.OuShareDialog.prototype.getContainerName = function()
{
	return oFF.OuShareDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuShareDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss("43rem", "auto");
};
oFF.OuShareDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	let closeBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	closeBtn.setText(this.getLocalization().getText(oFF.XCommonI18n.CLOSE));
	closeBtn.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.terminate();
	}));
	dialogButtons.add(closeBtn);
	return dialogButtons;
};
oFF.OuShareDialog.prototype.getFile = function()
{
	return this.m_file;
};
oFF.OuShareDialog.prototype.getGeneralLayout = function()
{
	return this.m_generalLayout;
};
oFF.OuShareDialog.prototype.getIsSearch = function()
{
	return this.m_isSearch;
};
oFF.OuShareDialog.prototype.getIsSelectAll = function()
{
	return this.m_isSelectAll;
};
oFF.OuShareDialog.prototype.getOwner = function()
{
	return this.m_owner;
};
oFF.OuShareDialog.prototype.getPanelLayout = function()
{
	return this.m_panelLayout;
};
oFF.OuShareDialog.prototype.getProgramName = function()
{
	return oFF.OuShareDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuShareDialog.prototype.getProgramStartData = function()
{
	return this.getStartData();
};
oFF.OuShareDialog.prototype.getShareDialogLocalization = function()
{
	return this.getLocalization();
};
oFF.OuShareDialog.prototype.getTable = function()
{
	return this.m_table;
};
oFF.OuShareDialog.prototype.getTableAccessMenuButton = function()
{
	return this.m_tableAccessMenuButton;
};
oFF.OuShareDialog.prototype.isResizeAllowed = function()
{
	return true;
};
oFF.OuShareDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuShareDialog();
	prg.setup();
	return prg;
};
oFF.OuShareDialog.prototype.openCustomAccessDialog = function(currentAccess, onAccessSet)
{
	let genesis = this.getGenesis();
	oFF.OuCustomAccessPopup.createCustomAccessPopup(genesis, currentAccess, onAccessSet).open();
};
oFF.OuShareDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuShareDialog.prototype.processArguments = function(args)
{
	if (args.containsKey(oFF.OuShareDialogConstants.ARG_LINK))
	{
		this.m_link = args.getStringByKey(oFF.OuShareDialogConstants.ARG_LINK);
	}
	else
	{
		this.m_link = null;
	}
	if (args.containsKey(oFF.OuShareDialogConstants.ARG_FILE))
	{
		let filePath = args.getStringByKey(oFF.OuShareDialogConstants.ARG_FILE);
		this.m_file = oFF.XFile.createWithVars(this.getProcess(), filePath);
	}
	else
	{
		this.m_file = null;
	}
	if (args.containsKey(oFF.OuShareDialogConstants.ARG_WORKSPACE))
	{
		this.m_workspace = args.getStringByKey(oFF.OuShareDialogConstants.ARG_WORKSPACE);
	}
	if (args.containsKey(oFF.OuShareDialogConstants.ARG_OWNER))
	{
		this.m_owner = args.getStringByKey(oFF.OuShareDialogConstants.ARG_OWNER);
	}
	else
	{
		this.m_owner = null;
	}
};
oFF.OuShareDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuShareDialog.prototype.releaseObject = function()
{
	this.m_panelLayout = oFF.XObjectExt.release(this.m_panelLayout);
	this.m_userTeamsMultiInput = oFF.XObjectExt.release(this.m_userTeamsMultiInput);
	this.m_accessType = oFF.XObjectExt.release(this.m_accessType);
	this.m_panelAccessMenuButton = oFF.XObjectExt.release(this.m_panelAccessMenuButton);
	this.m_selectedUsers = oFF.XObjectExt.release(this.m_selectedUsers);
	this.m_table = oFF.XObjectExt.release(this.m_table);
	this.m_generalLayout = oFF.XObjectExt.release(this.m_generalLayout);
	this.m_tableAccessMenuButton = oFF.XObjectExt.release(this.m_tableAccessMenuButton);
	this.m_accessButton = oFF.XObjectExt.release(this.m_accessButton);
	this.m_customAccess = oFF.XObjectExt.release(this.m_customAccess);
	this.m_mainCustomAccess = oFF.XObjectExt.release(this.m_mainCustomAccess);
	this.m_access = oFF.XObjectExt.release(this.m_access);
	this.m_fetchUsersTeams = oFF.XObjectExt.release(this.m_fetchUsersTeams);
	this.m_accessPanel = oFF.XObjectExt.release(this.m_accessPanel);
	oFF.DfUiDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuShareDialog.prototype.resizeDialog = function(width, height)
{
	this.setContainerSize(oFF.UiSize.createByCss(width, height));
};
oFF.OuShareDialog.prototype.searchAllTeams = function(offset, maxUsers, searchValue, workspace)
{
	return oFF.XPromise.create((resolve, reject) => {
		let process = this.getGenesis().getUiManager().getProcess();
		this.m_fetchUsersTeams.getTeams(process, offset, maxUsers, searchValue, oFF.XSortDirection.NONE, workspace).onThen((result) => {
			let resultset = result.getData().getCachedChildrenResultset();
			resolve(resultset);
		}).onCatch((error) => {
			this.getGenesis().showErrorToast(error.getText());
		});
	});
};
oFF.OuShareDialog.prototype.searchAllUsers = function(offset, maxLimit, searchValue, workspace)
{
	return oFF.XPromise.create((resolve, reject) => {
		let process = this.getGenesis().getUiManager().getProcess();
		this.m_fetchUsersTeams.getUsers(process, offset, maxLimit, searchValue, oFF.XSortDirection.NONE, workspace).onThen((result) => {
			let resultset = result.getData().getCachedChildrenResultset();
			resolve(resultset);
		}).onCatch((error) => {
			this.getGenesis().showErrorToast(error.getText());
		});
	});
};
oFF.OuShareDialog.prototype.setDialogBusy = function(busy)
{
	this.setBusy(busy);
};
oFF.OuShareDialog.prototype.setFile = function(m_file)
{
	this.m_file = m_file;
};
oFF.OuShareDialog.prototype.setIsSearch = function(m_isSearch)
{
	this.m_isSearch = m_isSearch;
};
oFF.OuShareDialog.prototype.setIsSelectAll = function(m_isSelectAll)
{
	this.m_isSelectAll = m_isSelectAll;
};
oFF.OuShareDialog.prototype.setOwner = function(m_owner)
{
	this.m_owner = m_owner;
};
oFF.OuShareDialog.prototype.setPanelAccessMenuButton = function(m_panelAccessMenuButton)
{
	this.m_panelAccessMenuButton = m_panelAccessMenuButton;
};
oFF.OuShareDialog.prototype.setPanelLayout = function(m_panelLayout)
{
	this.m_panelLayout = m_panelLayout;
};
oFF.OuShareDialog.prototype.setTable = function(m_table)
{
	this.m_table = m_table;
};
oFF.OuShareDialog.prototype.setTableAccessMenuButton = function(m_tableAccessMenuButton)
{
	this.m_tableAccessMenuButton = m_tableAccessMenuButton;
};
oFF.OuShareDialog.prototype.setupProgram = function()
{
	if (oFF.isNull(this.m_file))
	{
		return oFF.XPromise.reject(oFF.XError.create(this.getLocalization().getText(oFF.OuShareDialogI18n.FILE_ERROR)));
	}
	else if (oFF.isNull(this.m_link))
	{
		return oFF.XPromise.reject(oFF.XError.create(this.getLocalization().getText(oFF.OuShareDialogI18n.LINK_ERROR)));
	}
	else if (oFF.isNull(this.m_owner))
	{
		return oFF.XPromise.reject(oFF.XError.create(this.getLocalization().getText(oFF.OuShareDialogI18n.OWNER_ERROR)));
	}
	let splitLink = oFF.XStringTokenizer.splitString(this.m_link, "=");
	let resourceId = splitLink.get(splitLink.size() - 1);
	this.m_file.getAttributesForChanges().putString(oFF.XFileAttribute.UNIQUE_ID, resourceId);
	this.m_access = oFF.OuShareDialogAccess.create();
	this.m_fetchUsersTeams = oFF.OuFetchUsersTeams.create(this.getLocalization());
	return null;
};
oFF.OuShareDialog.prototype.shareFile = function(accessState, sendEmail, isAllUsersWithExistingAccess)
{
	return oFF.XPromise.create((resolve, reject) => {
		this.m_file.processShare(oFF.SyncType.NON_BLOCKING, oFF.XLambdaFileShareListener.create((result) => {
			if ((oFF.notNull(result)) && !result.hasErrors())
			{
				resolve(result.getData().getAttributes());
				let successToast = this.getGenesis().newControl(oFF.UiType.TOAST);
				successToast.setMessageType(oFF.UiMessageType.NONE);
				successToast.setText(this.getLocalization().getText(oFF.OuShareDialogI18n.SHARE_SUCCESS));
				successToast.setBackgroundColor(oFF.UiColor.createByRgba(47, 60, 72, 1.0));
				successToast.setFontColor(oFF.UiColor.WHITE);
				successToast.open();
				this.m_accessPanel = oFF.OuShareDialogAccessPanel.create(this, false);
				this.m_userTeamsMultiInput.clearChips();
				this.setBusy(false);
			}
			else
			{
				this.setBusy(false);
				this.getGenesis().showErrorToast(this.getLocalization().getText(oFF.OuShareDialogI18n.SHARE_ERROR));
			}
		}), null, accessState, sendEmail, isAllUsersWithExistingAccess);
	});
};
oFF.OuShareDialog.prototype.updateChip = function(chip, value)
{
	chip.setName(value.getDisplayKey());
	chip.setText(oFF.XStringUtils.concatenate4(value.getText(), " (", value.getDisplayKey(), ")"));
	chip.setCustomObject(value);
};

oFF.OuCalcCalculationsDialog = function() {};
oFF.OuCalcCalculationsDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuCalcCalculationsDialog.prototype._ff_c = "OuCalcCalculationsDialog";

oFF.OuCalcCalculationsDialog.DEFAULT_PROGRAM_NAME = "CalculationsDialog";
oFF.OuCalcCalculationsDialog.DIALOG_CONTENT_HEIGHT = "100%";
oFF.OuCalcCalculationsDialog.DIALOG_HEIGHT_DEFAULT = "60vh";
oFF.OuCalcCalculationsDialog.DIALOG_HEIGHT_VIEWPORT_BIG_NEW = "62rem";
oFF.OuCalcCalculationsDialog.DIALOG_HEIGHT_VIEWPORT_SMALL_NEW = "90%";
oFF.OuCalcCalculationsDialog.DIALOG_WIDTH_DEFAULT = "66vw";
oFF.OuCalcCalculationsDialog.DIALOG_WIDTH_VIEWPORT_BIG_NEW = "96rem";
oFF.OuCalcCalculationsDialog.DIALOG_WIDTH_VIEWPORT_SMALL_NEW = "90%";
oFF.OuCalcCalculationsDialog.PARAM_CALCULATION_NAME = "calculationName";
oFF.OuCalcCalculationsDialog.PARAM_CLIENT_QUERY_OBJECTS_STORAGE_ENABLED = "clientQueryObjectsStorageEnabled";
oFF.OuCalcCalculationsDialog.PARAM_DETAILS_ENABLED = "detailsEnabled";
oFF.OuCalcCalculationsDialog.PARAM_DIMENSION_NAME = "dimensionName";
oFF.OuCalcCalculationsDialog.PARAM_FORMULA_ITEMS = "formulaItems";
oFF.OuCalcCalculationsDialog.PARAM_GEN_AI_ENABLED = "genAiEnabled";
oFF.OuCalcCalculationsDialog.PARAM_MODEL_PREFIX_ENABLED = "modelPrefixEnabled";
oFF.OuCalcCalculationsDialog.PARAM_VALIDATION_ENABLED = "validationEnabled";
oFF.OuCalcCalculationsDialog.PARAM_VARIABLES_ENABLED = "variablesEnabled";
oFF.OuCalcCalculationsDialog.PRG_DATA_ACTIVITY_TRACKING = "activityTracking";
oFF.OuCalcCalculationsDialog.PRG_DATA_DATA_PROVIDER = "dataProvider";
oFF.OuCalcCalculationsDialog.PRG_DATA_DATA_SOURCE_HANDLER = "dataSourceHandler";
oFF.OuCalcCalculationsDialog.PRG_DATA_LISTENER_CLOSE = "closeListener";
oFF.OuCalcCalculationsDialog.PRG_DATA_LISTENER_CLOSE_TEXT = "closeListenerText";
oFF.OuCalcCalculationsDialog.PRG_VARIABLE_MANAGER = "variableManager";
oFF.OuCalcCalculationsDialog.TEST_VARIABLE_CREATOR_DIALOG_NAME = "CalculationVariableCreatorDialog";
oFF.OuCalcCalculationsDialog.TEST_VARIABLE_CREATOR_LISTENER = "variableCreatorListenerClose";
oFF.OuCalcCalculationsDialog.TEST_VARIABLE_CREATOR_VARIABLE = "variableCreatorVariable";
oFF.OuCalcCalculationsDialog.VIEWPORT_SMALL_HEIGHT = 1050;
oFF.OuCalcCalculationsDialog.VIEWPORT_SMALL_WIDTH = 1680;
oFF.OuCalcCalculationsDialog.prototype.m_activityTracking = null;
oFF.OuCalcCalculationsDialog.prototype.m_calculationName = null;
oFF.OuCalcCalculationsDialog.prototype.m_calculations = null;
oFF.OuCalcCalculationsDialog.prototype.m_datasource = null;
oFF.OuCalcCalculationsDialog.prototype.m_datasourceHandler = null;
oFF.OuCalcCalculationsDialog.prototype.m_dimensionName = null;
oFF.OuCalcCalculationsDialog.prototype.m_formulaItemNames = null;
oFF.OuCalcCalculationsDialog.prototype.m_isClientQueryObjectsStorageEnabled = false;
oFF.OuCalcCalculationsDialog.prototype.m_okButton = null;
oFF.OuCalcCalculationsDialog.prototype.m_okButtonListener = null;
oFF.OuCalcCalculationsDialog.prototype.m_okButtonListenerText = null;
oFF.OuCalcCalculationsDialog.prototype.m_preferences = null;
oFF.OuCalcCalculationsDialog.prototype.m_variableManager = null;
oFF.OuCalcCalculationsDialog.prototype.m_view = null;
oFF.OuCalcCalculationsDialog.prototype.m_viewportWidth = 0.0;
oFF.OuCalcCalculationsDialog.prototype.buildUi = function(genesis)
{
	this.setInitialControlToFocus(null);
	this.setTitle(this.generateTitle());
	this.m_view = genesis.newRoot(oFF.UiType.CONTENT_WRAPPER);
	this.m_view.setHeight(oFF.UiCssLength.create(oFF.OuCalcCalculationsDialog.DIALOG_CONTENT_HEIGHT));
	this.m_view.useMaxWidth();
	this.m_view.useMaxSpace();
	this.m_view.addCssClass("ffOuCalcCalculationsDialogContainerView");
	this.createCalculationsApplication().onThen((calcApi) => {
		this.m_calculations = calcApi;
		this.m_calculations.startup().onThen(this.onAfterStartup.bind(this));
	});
};
oFF.OuCalcCalculationsDialog.prototype.createCalculationsApplication = function()
{
	let formulaItemsBuilder = oFF.FeFormulaItemsProviderBuilder.create();
	if (this.getStartData() === null)
	{
		throw oFF.XException.createRuntimeException("No start data found");
	}
	let formulaItems = oFF.XList.create();
	if (!this.getProcess().getEnvironment().getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_SHOW_ALL_FORMULA_ITEMS, false))
	{
		if (this.m_formulaItemNames.isEmpty())
		{
			this.logWarning("No formula items given to show. Please provide a list of String literals in parameter 'formulaItems' to continue.");
		}
		formulaItems = oFF.FeFormulaItemsFactory.create(this.m_datasource.getDatasourceType(), this.m_datasource.getStructureType()).getRequestedSupportedFormulaItems(this.m_formulaItemNames);
		if (formulaItems.isEmpty())
		{
			this.logWarning3("No supported formula items match the given formula names in parameter 'formulaItems'.", oFF.XStringUtils.concatenate2("Datasource: ", this.m_datasource.getDatasourceType().getName()), oFF.XStringUtils.concatenate2("Given 'formulaItems': ", this.m_formulaItemNames.toString()));
		}
	}
	else
	{
		formulaItems = oFF.FeFormulaItemsFactory.create(this.m_datasource.getDatasourceType(), this.m_datasource.getStructureType()).getAllSupportedFormulaItems();
	}
	formulaItemsBuilder.addAll(formulaItems);
	let memberSelectorHandler = this.getQueryManager() === null ? oFF.OuCalcMemberSelectorHandler.createNull() : oFF.OuCalcMemberSelectorHandler.create(this.getProcess(), this.getQueryManager().getQueryModel(), oFF.FeDatasourceMetadataProviderInternalImpl.create(this.m_datasource), this.m_preferences);
	let initialDataBuilder = oFF.OuCalcInitialDataBuilder.create(this.m_datasource, oFF.FeFormulaPresentation.create(this.m_preferences.isCommaDecimalSeparator()));
	if (oFF.notNull(this.m_calculationName))
	{
		initialDataBuilder.setCalculationName(this.m_calculationName);
	}
	return oFF.OuCalcCalculations.createExt(this.m_datasource, formulaItemsBuilder.build(), this.createUiConfiguration(), initialDataBuilder.build(), this.m_preferences, memberSelectorHandler, this.getProcess(), this.m_activityTracking, this.m_variableManager);
};
oFF.OuCalcCalculationsDialog.prototype.createUiConfiguration = function()
{
	let isBigViewport = this.m_viewportWidth > oFF.OuCalcCalculationsDialog.VIEWPORT_SMALL_WIDTH;
	let leftPanelWidth = isBigViewport ? oFF.OuCalcCalculationsDialogViewConstants.V2_PANEL_ITEM_LEFT_WIDTH_BIG_VIEWPORT : oFF.OuCalcCalculationsDialogViewConstants.V2_PANEL_ITEM_LEFT_WIDTH_SMALL_VIEWPORT;
	let rightPanelWidth = isBigViewport ? oFF.OuCalcCalculationsDialogViewConstants.V2_PANEL_ITEM_RIGHT_WIDTH_BIG_VIEWPORT : oFF.OuCalcCalculationsDialogViewConstants.V2_PANEL_ITEM_RIGHT_WIDTH_SMALL_VIEWPORT;
	let builder = oFF.OuCalcUIConfigurationBuilder.create();
	let singlePanelBuilder = oFF.OuCalcSinglePluginConfigBuilder.create();
	singlePanelBuilder.setLeftPanelWidth(leftPanelWidth);
	singlePanelBuilder.setRightPanelWidth(rightPanelWidth);
	singlePanelBuilder.setAnchorTag(this.m_view);
	builder.addSinglePanelConfig(singlePanelBuilder.build());
	return builder.build();
};
oFF.OuCalcCalculationsDialog.prototype.enableFeFeatureToggles = function()
{
	if (this.getProcess().getEnvironment().getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_ENABLE_ALL_FEATURE_TOGGLES, false))
	{
		oFF.FeFeatureToggle.enableAll();
	}
	let serializedFeatureToggles = this.getProcess().getEnvironment().getStringByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_FEATURE_TOGGLES, "");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(serializedFeatureToggles))
	{
		let featureToggles = oFF.XStringTokenizer.splitString(serializedFeatureToggles, ",");
		for (let i = 0; i < featureToggles.size(); i++)
		{
			let featureToggle = oFF.FeFeatureToggle.lookup(oFF.XString.trim(featureToggles.get(i)));
			if (oFF.notNull(featureToggle))
			{
				oFF.FeFeatureToggle.enable(featureToggle);
			}
		}
	}
};
oFF.OuCalcCalculationsDialog.prototype.generateButtonText = function()
{
	let i18nKey = oFF.XCommonI18n.CREATE;
	if (oFF.notNull(this.m_calculationName))
	{
		i18nKey = oFF.XCommonI18n.OK;
	}
	return this.getLocalization().getText(i18nKey);
};
oFF.OuCalcCalculationsDialog.prototype.generateTitle = function()
{
	let i18nKey = oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_CREATE;
	if (oFF.notNull(this.m_calculationName))
	{
		i18nKey = oFF.OuCalcCalculationsDialogI18n.DIALOG_TITLE_EDIT;
	}
	return this.getLocalization().getText(i18nKey);
};
oFF.OuCalcCalculationsDialog.prototype.getContainerCssClass = function()
{
	return "ffOuCalcCalculationsDialog";
};
oFF.OuCalcCalculationsDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss(oFF.OuCalcCalculationsDialog.DIALOG_WIDTH_DEFAULT, oFF.OuCalcCalculationsDialog.DIALOG_HEIGHT_DEFAULT);
};
oFF.OuCalcCalculationsDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	this.m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_okButton.setText(this.generateButtonText());
	this.m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okButton.registerOnPress(oFF.UiLambdaPressListener.create((event) => {
		this.onOkPressed();
	}));
	this.m_okButton.setName("CalculationsDialog-OkButton");
	this.m_okButton.setEnabled(false);
	dialogButtons.add(this.m_okButton);
	let m_cancelButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	m_cancelButton.setText(this.getLocalization().getText(oFF.XCommonI18n.CANCEL));
	m_cancelButton.registerOnPress(oFF.UiLambdaPressListener.create((event2) => {
		this.notifyCancelPressed();
		this.terminate();
	}));
	m_cancelButton.setName("CalculationsDialog-CancelButton");
	dialogButtons.add(m_cancelButton);
	return dialogButtons;
};
oFF.OuCalcCalculationsDialog.prototype.getProgramName = function()
{
	return oFF.OuCalcCalculationsDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuCalcCalculationsDialog.prototype.initDatasourceHandler = function()
{
	if (oFF.notNull(this.m_datasourceHandler))
	{
		this.m_datasource = this.m_datasourceHandler.getDatasource();
		return oFF.XPromise.resolve(oFF.XBooleanValue.create(true));
	}
	if (oFF.notNull(this.m_datasource))
	{
		return oFF.XPromise.resolve(oFF.XBooleanValue.create(true));
	}
	return oFF.XPromise.create((resolve, reject) => {
		let measureDimension = oFF.notNull(this.m_dimensionName) ? this.getQueryManager().getQueryModel().getDimensionByName(this.m_dimensionName) : this.getQueryManager().getQueryModel().getMeasureDimension();
		oFF.XObjectExt.assertNotNullExt(measureDimension, oFF.XStringUtils.concatenate3("dimension name '", this.m_dimensionName, "' not found!"));
		oFF.OuCalcDatasourceHandlerFactory.createPromise(this.getQueryManager().getQueryModel(), measureDimension, this.m_isClientQueryObjectsStorageEnabled).onThen((datasourceHandler) => {
			this.m_datasourceHandler = datasourceHandler;
			this.m_datasourceHandler.getDatasourcePromise().onThen((datasource) => {
				this.m_datasource = datasourceHandler.getDatasource();
			});
		}).onFinally(() => {
			resolve(oFF.XBooleanValue.create(true));
		});
	});
};
oFF.OuCalcCalculationsDialog.prototype.isResizeAllowed = function()
{
	return true;
};
oFF.OuCalcCalculationsDialog.prototype.linkButtonToValidationState = function()
{
	this.m_calculations.registerOnValidationStateChange((state) => {
		this.m_okButton.setEnabled(state.getBoolean());
	});
};
oFF.OuCalcCalculationsDialog.prototype.logExt = function(layer, severity, code, message)
{
	oFF.DfOuDialogProgram.prototype.logExt.call( this , layer, severity, code, oFF.XStringUtils.concatenate3(oFF.OuCalcCalculationsDialog.DEFAULT_PROGRAM_NAME, ": ", (oFF.notNull(message) ? message : "No error given")));
};
oFF.OuCalcCalculationsDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuCalcCalculationsDialog();
	prg.setup();
	return prg;
};
oFF.OuCalcCalculationsDialog.prototype.onAfterStartup = function(iHuCommandExecutorIXReadOnlyList)
{
	this.linkButtonToValidationState();
	this.m_calculations.focusComponent(oFF.OuCalcUiComponent.DETAILS_PANEL);
};
oFF.OuCalcCalculationsDialog.prototype.onOkPressed = function()
{
	if (this.m_calculations.calculationIsValid().getBoolean())
	{
		let getStringMetadata = oFF.XPromiseList.create();
		getStringMetadata.add(this.m_calculations.retrieveFormulaString());
		getStringMetadata.add(this.m_calculations.getId());
		getStringMetadata.add(this.m_calculations.getName());
		oFF.XPromise.all(getStringMetadata).onThen((stringResult) => {
			let formulaTextOptional = stringResult.get(0);
			let calculationIdOptional = stringResult.get(1);
			let calculationNameOptional = stringResult.get(2);
			if (!formulaTextOptional.isPresent())
			{
				throw oFF.XException.createRuntimeException("Missing formula text");
			}
			else if (!calculationIdOptional.isPresent())
			{
				throw oFF.XException.createRuntimeException("Missing ID for calculation");
			}
			this.setBusy(true);
			this.m_calculations.createCalculation().onThen((calculationResponse) => {
				this.setBusy(false);
				let calculationId = calculationIdOptional.get();
				let calculationDesc = calculationNameOptional.isPresent() ? calculationNameOptional.get() : calculationId;
				if (oFF.notNull(this.m_okButtonListenerText))
				{
					this.m_okButtonListenerText.accept(this.m_preferences.isDetailsEnabled() ? calculationId : null, this.m_preferences.isDetailsEnabled() ? calculationDesc : null, formulaTextOptional.get());
				}
				let eventType = oFF.notNull(this.m_calculationName) ? oFF.CalculationDialogUsageTracking.UPDATE_EVENT : oFF.CalculationDialogUsageTracking.CREATE_EVENT;
				this.m_activityTracking.recordDialogClose(eventType, this.m_datasource.getDatasourceType().getName(), this.m_datasource.getStructureType(), formulaTextOptional.get());
				if (oFF.notNull(this.m_okButtonListener) && oFF.notNull(this.m_datasourceHandler))
				{
					let formulaMeasure = this.m_datasourceHandler.createCalculation(calculationId, calculationDesc, this.m_calculationName, calculationResponse, formulaTextOptional.get());
					if (oFF.FeFeatureToggle.isActive(oFF.FeFeatureToggle.VARIABLE_SUPPORT) && oFF.notNull(this.m_variableManager))
					{
						oFF.FeVariableReplacer.replaceVariablesInCalculation(formulaMeasure, this.m_variableManager.getVariables());
					}
					this.notifyOkPressed();
					this.m_okButtonListener.onOkButton(formulaMeasure);
				}
				this.terminate();
			}).onCatch(this.onOkPressedError.bind(this));
		}).onCatch(this.onOkPressedError.bind(this));
	}
};
oFF.OuCalcCalculationsDialog.prototype.onOkPressedError = function(error)
{
	this.logError(error.getText());
	this.getGenesis().showErrorToast(error.getText());
	this.setBusy(false);
};
oFF.OuCalcCalculationsDialog.prototype.openVariableCreatorDialog = function(variable, variableConsumer)
{
	let prgStartData = oFF.ProgramStartData.create();
	if (oFF.notNull(variable))
	{
		prgStartData.putXObject(oFF.OuCalcCalculationsDialog.TEST_VARIABLE_CREATOR_VARIABLE, variable);
	}
	prgStartData.putXObject(oFF.OuCalcCalculationsDialog.TEST_VARIABLE_CREATOR_LISTENER, oFF.OuCalcVariableCreatorDialogLambdaCloseListener.create(variableConsumer));
	let runner = oFF.ProgramRunner.createRunner(this.getProcess(), oFF.OuCalcCalculationsDialog.TEST_VARIABLE_CREATOR_DIALOG_NAME);
	runner.setProgramStartData(prgStartData);
	runner.runProgram();
};
oFF.OuCalcCalculationsDialog.prototype.prepareProgramMetadata = function(metadata)
{
	metadata.addParameter(oFF.OuCalcCalculationsDialog.PARAM_DIMENSION_NAME, "The dimension name");
	metadata.addParameter(oFF.OuCalcCalculationsDialog.PARAM_CALCULATION_NAME, "The calculation name");
	metadata.addParameterList(oFF.OuCalcCalculationsDialog.PARAM_FORMULA_ITEMS, "The formula items");
	metadata.addParameter(oFF.OuCalcCalculationsDialog.PARAM_GEN_AI_ENABLED, "If Gen AI enabled");
	metadata.addParameter(oFF.OuCalcCalculationsDialog.PARAM_VARIABLES_ENABLED, "If variables are enabled");
	metadata.addParameter(oFF.OuCalcCalculationsDialog.PARAM_CLIENT_QUERY_OBJECTS_STORAGE_ENABLED, "Whether to use client query objects storage");
};
oFF.OuCalcCalculationsDialog.prototype.processArguments = function(args)
{
	this.m_dimensionName = args.getStringByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_DIMENSION_NAME, null);
	let isValidationEnabled = args.getBooleanByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_VALIDATION_ENABLED, true);
	let isModelPrefixEnabledDefault = this.getProcess().getEnvironment().getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_MODEL_PREFIX_ENABLED_DEFAULT, false);
	let isModelPrefixEnabled = args.getBooleanByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_MODEL_PREFIX_ENABLED, isModelPrefixEnabledDefault);
	let isDetailsEnabled = args.getBooleanByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_DETAILS_ENABLED, true);
	let isGenAiEnabled = args.getBooleanByKey(oFF.OuCalcCalculationsDialog.PARAM_GEN_AI_ENABLED);
	let isTestVariablesEnabled = this.getProcess().getEnvironment().getBooleanByKeyExt(oFF.XEnvironmentConstants.FIREFLY_FORMULA_EDITOR_TEST_VARIABLES, false);
	let isVariableSupportEnabled = args.getBooleanByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_VARIABLES_ENABLED, isTestVariablesEnabled);
	this.m_isClientQueryObjectsStorageEnabled = args.getBooleanByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_CLIENT_QUERY_OBJECTS_STORAGE_ENABLED, false);
	this.m_preferences = oFF.FePreferences.createWithUserProfile(this.getProcess().getUserProfile(), isValidationEnabled, isModelPrefixEnabled, isDetailsEnabled, isGenAiEnabled, isVariableSupportEnabled);
	this.m_calculationName = args.getStringByKeyExt(oFF.OuCalcCalculationsDialog.PARAM_CALCULATION_NAME, null);
	this.m_datasourceHandler = this.getStartData().getXObjectByKey(oFF.OuCalcCalculationsDialog.PRG_DATA_DATA_SOURCE_HANDLER);
	if (oFF.isNull(this.m_datasourceHandler))
	{
		this.m_datasource = this.getStartData().getXObjectByKey(oFF.OuCalcCalculationsDialog.PRG_DATA_DATA_PROVIDER);
	}
	if (isVariableSupportEnabled)
	{
		let mockVariableManager = null;
		if (isTestVariablesEnabled)
		{
			mockVariableManager = oFF.FeMockStoryVariableManager.create((onVariableCreated) => {
				this.openVariableCreatorDialog(null, onVariableCreated);
			}, (variable, onVariableUpdated) => {
				this.openVariableCreatorDialog(variable, onVariableUpdated);
			});
		}
		this.m_variableManager = this.getStartData().getXObjectByKeyExt(oFF.OuCalcCalculationsDialog.PRG_VARIABLE_MANAGER, mockVariableManager);
		oFF.XObjectExt.assertNotNullExt(this.m_variableManager, "Variable manager must not be null when variable support is enabled");
	}
	let formulaItems = args.getListByKey(oFF.OuCalcCalculationsDialog.PARAM_FORMULA_ITEMS);
	this.m_formulaItemNames = oFF.XStream.of(formulaItems).filter((f1) => {
		return f1.isString();
	}).collect(oFF.XStreamCollector.toListOfString((formulaItem) => {
		return formulaItem.asString().getString();
	}));
};
oFF.OuCalcCalculationsDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuCalcCalculationsDialog.prototype.releaseObject = function()
{
	this.m_okButtonListener = null;
	this.m_okButtonListenerText = null;
	this.m_calculations.shutdown();
	this.m_calculations = null;
	this.m_okButton = null;
	this.m_datasourceHandler = oFF.XObjectExt.release(this.m_datasourceHandler);
	this.m_datasource = oFF.XObjectExt.release(this.m_datasource);
	this.m_calculationName = null;
	this.m_formulaItemNames = oFF.XObjectExt.release(this.m_formulaItemNames);
	this.m_view = oFF.XObjectExt.release(this.m_view);
	this.m_activityTracking = oFF.XObjectExt.release(this.m_activityTracking);
	oFF.DfOuDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuCalcCalculationsDialog.prototype.setContainerSizeByViewport = function()
{
	return oFF.UiFramework.currentFramework().getViewportSize().onThenExt((size) => {
		if (oFF.notNull(size))
		{
			let width = size.getWidth();
			let height = size.getHeight();
			this.m_viewportWidth = width.getValue();
			let dialogWidthBig = oFF.OuCalcCalculationsDialog.DIALOG_WIDTH_VIEWPORT_BIG_NEW;
			let dialogHeightBig = oFF.OuCalcCalculationsDialog.DIALOG_HEIGHT_VIEWPORT_BIG_NEW;
			let dialogWidthSmall = oFF.OuCalcCalculationsDialog.DIALOG_WIDTH_VIEWPORT_SMALL_NEW;
			let dialogHeightSmall = oFF.OuCalcCalculationsDialog.DIALOG_HEIGHT_VIEWPORT_SMALL_NEW;
			let dialogWidth = oFF.UiCssLength.create(width.getValue() <= oFF.OuCalcCalculationsDialog.VIEWPORT_SMALL_WIDTH ? dialogWidthSmall : dialogWidthBig);
			let dialogHeight = oFF.UiCssLength.create(height.getValue() <= oFF.OuCalcCalculationsDialog.VIEWPORT_SMALL_HEIGHT ? dialogHeightSmall : dialogHeightBig);
			this.setContainerSize(oFF.UiSize.createExt(dialogWidth, dialogHeight));
		}
		return oFF.XBooleanValue.create(true);
	}).onCatch((error) => {
		this.logError(error.getText());
	});
};
oFF.OuCalcCalculationsDialog.prototype.setupProgram = function()
{
	if (this.getStartData() !== null)
	{
		this.m_okButtonListenerText = this.getStartData().getXObjectByKey(oFF.OuCalcCalculationsDialog.PRG_DATA_LISTENER_CLOSE_TEXT);
		this.m_okButtonListener = this.getStartData().getXObjectByKey(oFF.OuCalcCalculationsDialog.PRG_DATA_LISTENER_CLOSE);
	}
	this.m_activityTracking = this.getStartData().getXObjectByKeyExt(oFF.OuCalcCalculationsDialog.PRG_DATA_ACTIVITY_TRACKING, oFF.OuCalculationActivityTracking.create(this.getProcess(), this.m_preferences));
	this.enableFeFeatureToggles();
	return oFF.FeFeatureToggle.load(this.getProcess()).onThenPromise((success) => {
		let setupProgramPromises = oFF.XPromiseList.create();
		setupProgramPromises.add(this.initDatasourceHandler());
		setupProgramPromises.add(this.setContainerSizeByViewport());
		let allPromises = oFF.XPromise.all(setupProgramPromises);
		return allPromises.onThenExt((obj) => {
			if (oFF.isNull(this.m_datasourceHandler) && oFF.isNull(this.m_datasource))
			{
				let msg = oFF.XStringBuffer.create();
				msg.append("No data source initialized! Please specify one of '");
				msg.append(oFF.DfOuDialogProgram.PRG_DATA_QUERY_MANAGER);
				msg.append("', '");
				msg.append(oFF.OuCalcCalculationsDialog.PRG_DATA_DATA_PROVIDER);
				msg.append("' or '");
				msg.append(oFF.OuCalcCalculationsDialog.PRG_DATA_DATA_SOURCE_HANDLER);
				msg.append("' in the program data");
				throw oFF.XException.createRuntimeException(msg.toString());
			}
			if (oFF.isNull(this.m_datasourceHandler) && oFF.notNull(this.m_okButtonListener))
			{
				this.logWarning(oFF.XStringUtils.concatenate3("No query manager specified! The '", oFF.OuCalcCalculationsDialog.PRG_DATA_LISTENER_CLOSE, "' is ignored!"));
			}
			return oFF.XBooleanValue.create(true);
		});
	});
};

oFF.OuCurrencyConversionDialog = function() {};
oFF.OuCurrencyConversionDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuCurrencyConversionDialog.prototype._ff_c = "OuCurrencyConversionDialog";

oFF.OuCurrencyConversionDialog.CANCEL_BUTTON = "CurrencyConversionDialog_cancelButton";
oFF.OuCurrencyConversionDialog.DEFAULT_PROGRAM_NAME = "CurrencyConversionDialog";
oFF.OuCurrencyConversionDialog.DROPDOWN_CURRENCY = "CurrencyConversionDialog_currencyDropdown";
oFF.OuCurrencyConversionDialog.DROPDOWN_TRANSLATION = "CurrencyConversionDialog_translationDropdown";
oFF.OuCurrencyConversionDialog.EXCEPTION_BW_CC_NOT_ENABLED = "The client cannot apply a currency translation on this query.";
oFF.OuCurrencyConversionDialog.EXCEPTION_BW_CC_NOT_SUPPORTED = "Query Model does not support BW Currency Translation.";
oFF.OuCurrencyConversionDialog.EXCEPTION_INVALID_DROPDOWN_VALUE = "A reserved dropdown key is contained in the dataset, corresponding to the empty item.";
oFF.OuCurrencyConversionDialog.EXCEPTION_INVALID_STATE_FOR_QM_UPDATE = "Cannot apply currency translation with only one instead of two of the following: a fixed target currency; a translation type.";
oFF.OuCurrencyConversionDialog.OK_BUTTON = "CurrencyConversionDialog_okButton";
oFF.OuCurrencyConversionDialog.prototype.m_cancelButton = null;
oFF.OuCurrencyConversionDialog.prototype.m_currencyConversionDialogHelper = null;
oFF.OuCurrencyConversionDialog.prototype.m_currencyTranslationManager = null;
oFF.OuCurrencyConversionDialog.prototype.m_currencyTranslationTypeDropdown = null;
oFF.OuCurrencyConversionDialog.prototype.m_okButton = null;
oFF.OuCurrencyConversionDialog.prototype.m_targetCurrencyDropdown = null;
oFF.OuCurrencyConversionDialog.prototype.addItemsToConversionDropdown = function(items)
{
	let dropdownItems = oFF.XLinkedHashMapByString.create();
	let currencyTranslationTypeDropdownDefaultValue = this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TYPE_DROPDOWN_DEFAULT_VALUE);
	dropdownItems.put(oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME, currencyTranslationTypeDropdownDefaultValue);
	let size = items.size();
	for (let i = 0; i < size; i++)
	{
		let item = items.get(i);
		if (this.m_currencyConversionDialogHelper.isEmptyItemValue(item.getName()))
		{
			throw oFF.XException.createRuntimeException(oFF.OuCurrencyConversionDialog.EXCEPTION_INVALID_DROPDOWN_VALUE);
		}
		dropdownItems.put(item.getName(), item.getText());
	}
	this.m_currencyTranslationTypeDropdown.setComboBoxItems(dropdownItems);
};
oFF.OuCurrencyConversionDialog.prototype.addItemsToCurrencyDropdown = function(items)
{
	let dropdownItems = oFF.XLinkedHashMapByString.create();
	let targetCurrencyDropdownDefaultValue = this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_DEFAULT_VALUE);
	dropdownItems.put(oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME, targetCurrencyDropdownDefaultValue);
	let size = items.size();
	for (let i = 0; i < size; i++)
	{
		let item = items.get(i);
		let itemName = item.getName();
		if (this.m_currencyConversionDialogHelper.isEmptyItemValue(itemName))
		{
			throw oFF.XException.createRuntimeException(oFF.OuCurrencyConversionDialog.EXCEPTION_INVALID_DROPDOWN_VALUE);
		}
		let itemText = this.getLocalization().getTextWithPlaceholder2(oFF.OuCurrencyConversionDialogI18n.TARGET_DROPDOWN_VALUE, itemName, item.getText());
		dropdownItems.put(itemName, itemText);
	}
	this.m_targetCurrencyDropdown.setComboBoxItems(dropdownItems);
};
oFF.OuCurrencyConversionDialog.prototype.buildUi = function(genesis)
{
	this.checkTranslationManagerIsValid();
	this.setTitle(this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TITLE));
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	mainLayout.setPadding(oFF.UtStyles.DIALOG_PADDING);
	mainLayout.addItem(this.setupForm(genesis).getView());
	genesis.setRoot(mainLayout);
	this.disableDropdowns();
	this.m_currencyTranslationManager.setupBwCatalogs(oFF.SyncType.NON_BLOCKING, this);
};
oFF.OuCurrencyConversionDialog.prototype.checkTranslationManagerIsValid = function()
{
	if (!this.m_currencyTranslationManager.getModelCapabilities().supportsQueryCurrencyTranslation() || this.m_currencyTranslationManager.getQueryCurrencyTranslation() === null)
	{
		this.getGenesis().showErrorToast(this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_SUPPORTED));
		this.terminate();
		throw oFF.XException.createRuntimeException(oFF.OuCurrencyConversionDialog.EXCEPTION_BW_CC_NOT_SUPPORTED);
	}
	if (this.m_currencyTranslationManager.getQueryCurrencyTranslation() === null)
	{
		this.getGenesis().showErrorToast(this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TOAST_ERROR_TRANSLATION_NOT_ENABLED));
		this.terminate();
		throw oFF.XException.createRuntimeException(oFF.OuCurrencyConversionDialog.EXCEPTION_BW_CC_NOT_ENABLED);
	}
};
oFF.OuCurrencyConversionDialog.prototype.disableDropdowns = function()
{
	this.setDropdownsEnabled(false);
};
oFF.OuCurrencyConversionDialog.prototype.enableDropdowns = function()
{
	this.setDropdownsEnabled(true);
};
oFF.OuCurrencyConversionDialog.prototype.getContainerName = function()
{
	return this.getProgramName();
};
oFF.OuCurrencyConversionDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createExt(oFF.UiCssLength.create("450px"), oFF.UiCssLength.create("170px"));
};
oFF.OuCurrencyConversionDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	this.m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_okButton.setName(oFF.OuCurrencyConversionDialog.OK_BUTTON);
	this.m_okButton.setText(this.getLocalization().getText(oFF.XCommonI18n.OK));
	this.m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.onOkPressed();
	}));
	this.m_okButton.setEnabled(false);
	dialogButtons.add(this.m_okButton);
	this.m_cancelButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_cancelButton.setName(oFF.OuCurrencyConversionDialog.CANCEL_BUTTON);
	this.m_cancelButton.setText(this.getLocalization().getText(oFF.XCommonI18n.CANCEL));
	this.m_cancelButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent2) => {
		this.onCancelPressed();
	}));
	dialogButtons.add(this.m_cancelButton);
	return dialogButtons;
};
oFF.OuCurrencyConversionDialog.prototype.getProgramName = function()
{
	return oFF.OuCurrencyConversionDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuCurrencyConversionDialog.prototype.handleFormItemEnterPressed = function()
{
	if (this.m_okButton.isEnabled())
	{
		this.onOkPressed();
	}
};
oFF.OuCurrencyConversionDialog.prototype.handleFormItemValueChanged = function(key, newValue)
{
	if (oFF.notNull(newValue))
	{
		this.rerenderUi(oFF.XString.isEqual(newValue.getStringRepresentation(), oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME));
	}
	else
	{
		this.m_okButton.setEnabled(false);
	}
};
oFF.OuCurrencyConversionDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuCurrencyConversionDialog();
	prg.setup();
	return prg;
};
oFF.OuCurrencyConversionDialog.prototype.onCancelPressed = function()
{
	this.notifyCancelPressed();
	this.terminate();
};
oFF.OuCurrencyConversionDialog.prototype.onCatalogsLoaded = function()
{
	this.m_currencyConversionDialogHelper = oFF.OuCurrencyConversionDialogHelper.create(this.m_currencyTranslationManager);
	this.rerenderUi(true);
	this.setDropdownSelectionsFromQuery();
	this.enableDropdowns();
};
oFF.OuCurrencyConversionDialog.prototype.onContainerAfterOpen = function()
{
	if (oFF.notNull(this.m_targetCurrencyDropdown))
	{
		this.m_targetCurrencyDropdown.focus();
	}
};
oFF.OuCurrencyConversionDialog.prototype.onOkPressed = function()
{
	this.updateQueryModel();
	this.notifyOkPressed();
	this.terminate();
};
oFF.OuCurrencyConversionDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuCurrencyConversionDialog.prototype.processArguments = function(args)
{
	this.assertQueryManagerSet();
};
oFF.OuCurrencyConversionDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuCurrencyConversionDialog.prototype.releaseObject = function()
{
	this.m_okButton = oFF.XObjectExt.release(this.m_okButton);
	this.m_cancelButton = oFF.XObjectExt.release(this.m_cancelButton);
	this.m_targetCurrencyDropdown = oFF.XObjectExt.release(this.m_targetCurrencyDropdown);
	this.m_currencyTranslationTypeDropdown = oFF.XObjectExt.release(this.m_currencyTranslationTypeDropdown);
	this.m_currencyConversionDialogHelper = oFF.XObjectExt.release(this.m_currencyConversionDialogHelper);
	this.m_currencyTranslationManager = null;
	oFF.DfOuDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuCurrencyConversionDialog.prototype.rerenderUi = function(resetSelections)
{
	let targetCurrencyValue = this.m_targetCurrencyDropdown.getValue();
	let currencyTranslationValue = this.m_currencyTranslationTypeDropdown.getValue();
	if (oFF.isNull(targetCurrencyValue) || oFF.isNull(currencyTranslationValue))
	{
		this.m_okButton.setEnabled(false);
	}
	else
	{
		let selectedCurrency = targetCurrencyValue.getStringRepresentation();
		let selectedTranslation = currencyTranslationValue.getStringRepresentation();
		if (resetSelections)
		{
			selectedCurrency = oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME;
			selectedTranslation = oFF.OuCurrencyConversionDialogHelper.EMPTY_ITEM_NAME;
		}
		this.addItemsToCurrencyDropdown(this.m_currencyConversionDialogHelper.getCurrenciesOfTranslation(selectedTranslation));
		this.addItemsToConversionDropdown(this.m_currencyConversionDialogHelper.getTranslationsOfCurrency(selectedCurrency));
		let isCurrencySelected = !this.m_currencyConversionDialogHelper.isEmptyItemValue(selectedCurrency);
		let isTranslationSelected = !this.m_currencyConversionDialogHelper.isEmptyItemValue(selectedTranslation);
		let areAllSelected = isCurrencySelected && isTranslationSelected;
		let areNoneSelected = !isCurrencySelected && !isTranslationSelected;
		this.m_targetCurrencyDropdown.setValue(oFF.XStringValue.create(selectedCurrency));
		this.m_currencyTranslationTypeDropdown.setValue(oFF.XStringValue.create(selectedTranslation));
		this.m_okButton.setEnabled(areAllSelected || areNoneSelected);
	}
};
oFF.OuCurrencyConversionDialog.prototype.setDropdownSelectionsFromQuery = function()
{
	let queryCurrencyTranslation = this.m_currencyTranslationManager.getQueryCurrencyTranslation();
	let targetCurrency = queryCurrencyTranslation.getFixedTargetCurrency();
	let currencyTranslationType = queryCurrencyTranslation.getCurrencyTranslationName();
	if (queryCurrencyTranslation.isApplyDefinedCurrencyTranslation() && oFF.XStringUtils.isNotNullAndNotEmpty(targetCurrency) && oFF.XStringUtils.isNotNullAndNotEmpty(currencyTranslationType))
	{
		this.m_targetCurrencyDropdown.setValue(oFF.XStringValue.create(targetCurrency));
		this.m_currencyTranslationTypeDropdown.setValue(oFF.XStringValue.create(currencyTranslationType));
		this.rerenderUi(false);
	}
};
oFF.OuCurrencyConversionDialog.prototype.setDropdownsEnabled = function(enable)
{
	this.m_targetCurrencyDropdown.setEnabled(enable);
	this.m_currencyTranslationTypeDropdown.setEnabled(enable);
};
oFF.OuCurrencyConversionDialog.prototype.setupForm = function(genesis)
{
	let form = oFF.UiForm.create(genesis);
	let targetCurrencyLabelText = this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TARGET_CURRENCY_LABEL);
	this.m_targetCurrencyDropdown = form.addComboBox(oFF.OuCurrencyConversionDialog.DROPDOWN_CURRENCY, "", targetCurrencyLabelText, null, false);
	this.m_targetCurrencyDropdown.setValueChangedConsumer((key, newVal) => {
		this.handleFormItemValueChanged(key, newVal);
	});
	this.m_targetCurrencyDropdown.setEnterPressedProcedure(() => {
		this.handleFormItemEnterPressed();
	});
	let currencyTranslationTypeText = this.getLocalization().getText(oFF.OuCurrencyConversionDialogI18n.TRANSLATION_TYPE_LABEL);
	this.m_currencyTranslationTypeDropdown = form.addComboBox(oFF.OuCurrencyConversionDialog.DROPDOWN_TRANSLATION, "", currencyTranslationTypeText, null, false);
	this.m_currencyTranslationTypeDropdown.setValueChangedConsumer((key2, newVal2) => {
		this.handleFormItemValueChanged(key2, newVal2);
	});
	this.m_currencyTranslationTypeDropdown.setEnterPressedProcedure(() => {
		this.handleFormItemEnterPressed();
	});
	return form;
};
oFF.OuCurrencyConversionDialog.prototype.setupProgram = function()
{
	this.m_currencyTranslationManager = this.getQueryManager().getQueryModel().getCurrencyTranslationManager();
	return null;
};
oFF.OuCurrencyConversionDialog.prototype.updateQueryModel = function()
{
	let currency = this.m_targetCurrencyDropdown.getValue().getStringRepresentation();
	let translation = this.m_currencyTranslationTypeDropdown.getValue().getStringRepresentation();
	let isCurrencyNotSetButTranslationSet = this.m_currencyConversionDialogHelper.isEmptyItemValue(currency) && !this.m_currencyConversionDialogHelper.isEmptyItemValue(translation);
	let isTranslationNotSetButCurrencySet = this.m_currencyConversionDialogHelper.isEmptyItemValue(translation) && !this.m_currencyConversionDialogHelper.isEmptyItemValue(currency);
	if (isCurrencyNotSetButTranslationSet || isTranslationNotSetButCurrencySet)
	{
		throw oFF.XException.createRuntimeException(oFF.OuCurrencyConversionDialog.EXCEPTION_INVALID_STATE_FOR_QM_UPDATE);
	}
	let queryModel = this.m_currencyTranslationManager.getQueryModel();
	queryModel.queueEventing();
	this.m_currencyTranslationManager.resetCurrencyTranslationDetails();
	let queryCurrencyTranslation = this.m_currencyTranslationManager.getQueryCurrencyTranslation();
	let isTranslationSet = !this.m_currencyConversionDialogHelper.isEmptyItemValue(translation);
	if (isTranslationSet)
	{
		queryCurrencyTranslation.setFixedTargetCurrencyByString(currency);
		queryCurrencyTranslation.setCurrencyTranslationName(translation);
	}
	queryCurrencyTranslation.setApplyDefinedCurrencyTranslation(isTranslationSet);
	queryModel.resumeEventing();
};

oFF.OuDimensionDialog2 = function() {};
oFF.OuDimensionDialog2.prototype = new oFF.DfOuDialogProgram();
oFF.OuDimensionDialog2.prototype._ff_c = "OuDimensionDialog2";

oFF.OuDimensionDialog2.DEFAULT_PROGRAM_NAME = "DimensionDialog2";
oFF.OuDimensionDialog2.PARAM_DIMENSION_NAME = "dimensionName";
oFF.OuDimensionDialog2.PARAM_INITIAL_TAB = "initialTab";
oFF.OuDimensionDialog2.PARAM_INITIAL_TAB_DISPLAY = "display";
oFF.OuDimensionDialog2.PARAM_INITIAL_TAB_HIERARCHY = "hierarchy";
oFF.OuDimensionDialog2.PARAM_INITIAL_TAB_SORT = "sort";
oFF.OuDimensionDialog2.prototype.m_dimension = null;
oFF.OuDimensionDialog2.prototype.m_displayTab = null;
oFF.OuDimensionDialog2.prototype.m_hierarchyTab = null;
oFF.OuDimensionDialog2.prototype.m_initialTab = null;
oFF.OuDimensionDialog2.prototype.m_root = null;
oFF.OuDimensionDialog2.prototype.m_sortTab = null;
oFF.OuDimensionDialog2.prototype.buildUi = function(genesis)
{
	let displayName = this.getDimensionDisplayName();
	this.setTitle(this.getLocalization().getTextWithPlaceholder(oFF.OuDimensionDialog2I18n.TITLE, displayName));
	this.m_root = genesis.newRoot(oFF.UiType.ICON_TAB_BAR);
	this.m_root.setApplyContentPadding(false);
	let i18n = this.getLocalization();
	this.m_displayTab = oFF.OuDd2DisplayTab.createTab(this.m_dimension, i18n);
	this.m_sortTab = oFF.OuDd2SortingTab.createTab(this.m_dimension, i18n);
	this.m_hierarchyTab = oFF.OuDd2HierarchyTab.createTab(this.m_dimension, i18n);
	this.m_displayTab.buildUi(genesis, this.m_root);
	this.m_sortTab.buildUi(genesis, this.m_root);
	this.m_hierarchyTab.buildUi(genesis, this.m_root);
	this.loadState();
	if (oFF.notNull(this.m_initialTab))
	{
		switch (this.m_initialTab)
		{
			case oFF.OuDimensionDialog2.PARAM_INITIAL_TAB_SORT:
				if (oFF.notNull(this.m_sortTab))
				{
					this.m_sortTab.selectItem();
				}
				break;

			case oFF.OuDimensionDialog2.PARAM_INITIAL_TAB_HIERARCHY:
				if (oFF.notNull(this.m_hierarchyTab))
				{
					this.m_hierarchyTab.selectItem();
				}
				break;
		}
	}
};
oFF.OuDimensionDialog2.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss("400px", "460px");
};
oFF.OuDimensionDialog2.prototype.getDialogButtons = function(genesis)
{
	let i18n = this.getLocalization();
	let okBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	okBtn.setText(i18n.getText(oFF.XCommonI18n.OK));
	okBtn.setButtonType(oFF.UiButtonType.PRIMARY);
	okBtn.registerOnPress(oFF.UiLambdaPressListener.create((evt1) => {
		this.saveState();
		this.notifyOkPressed();
		this.terminate();
	}));
	let cancelBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	cancelBtn.setText(i18n.getText(oFF.XCommonI18n.CANCEL));
	cancelBtn.registerOnPress(oFF.UiLambdaPressListener.create((evt2) => {
		this.notifyCancelPressed();
		this.terminate();
	}));
	let tmpList = oFF.XList.create();
	tmpList.add(okBtn);
	tmpList.add(cancelBtn);
	return tmpList;
};
oFF.OuDimensionDialog2.prototype.getDimensionDisplayName = function()
{
	if (this.m_dimension.getProcess().hasFeature(oFF.FeatureToggleOlap.USE_ORIGINAL_STRUCTURE_TEXT_IN_UI) && this.m_dimension.getDimensionType() === oFF.DimensionType.SECONDARY_STRUCTURE && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_dimension.getOriginalText()))
	{
		return this.m_dimension.getOriginalText();
	}
	let text = this.m_dimension.getText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
	{
		return text;
	}
	let name = this.m_dimension.getName();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(name))
	{
		return name;
	}
	return this.getLocalization().getText(oFF.OuDimensionDialog2I18n.DIMENSION);
};
oFF.OuDimensionDialog2.prototype.getProgramName = function()
{
	return oFF.OuDimensionDialog2.DEFAULT_PROGRAM_NAME;
};
oFF.OuDimensionDialog2.prototype.loadState = function()
{
	this.m_displayTab.loadState();
	this.m_sortTab.loadState();
	this.m_hierarchyTab.loadState();
};
oFF.OuDimensionDialog2.prototype.newProgram = function()
{
	let program = new oFF.OuDimensionDialog2();
	program.setup();
	return program;
};
oFF.OuDimensionDialog2.prototype.onContainerAfterOpen = function()
{
	if (this.m_root.getSelectedItem() !== null)
	{
		this.m_root.getSelectedItem().focus();
	}
};
oFF.OuDimensionDialog2.prototype.prepareProgramMetadata = function(metadata)
{
	metadata.addParameter(oFF.OuDimensionDialog2.PARAM_DIMENSION_NAME, "The dimension to show properties for.");
	metadata.addParameter(oFF.OuDimensionDialog2.PARAM_INITIAL_TAB, "The initial tab to be pre-selected.");
};
oFF.OuDimensionDialog2.prototype.processArguments = function(args)
{
	this.assertQueryManagerSet();
	let dimName = args.getStringByKey(oFF.OuDimensionDialog2.PARAM_DIMENSION_NAME);
	this.m_dimension = this.getQueryManager().getQueryModel().getDimensionByName(dimName);
	this.m_initialTab = args.getStringByKey(oFF.OuDimensionDialog2.PARAM_INITIAL_TAB);
};
oFF.OuDimensionDialog2.prototype.processConfiguration = function(configuration) {};
oFF.OuDimensionDialog2.prototype.releaseObject = function()
{
	this.m_displayTab = null;
	this.m_sortTab = null;
	this.m_hierarchyTab = null;
	this.m_dimension = null;
	this.m_initialTab = null;
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.DfOuDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuDimensionDialog2.prototype.saveState = function()
{
	this.m_sortTab.saveState();
	this.m_hierarchyTab.saveState();
	this.m_displayTab.saveState();
};
oFF.OuDimensionDialog2.prototype.setupProgram = function()
{
	return null;
};

oFF.OuSelectHierarchyDialog = function() {};
oFF.OuSelectHierarchyDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuSelectHierarchyDialog.prototype._ff_c = "OuSelectHierarchyDialog";

oFF.OuSelectHierarchyDialog.DEFAULT_PROGRAM_NAME = "SelectHierarchyDialog";
oFF.OuSelectHierarchyDialog.DROPDOWN_HIERARCHY = "SelectHierarchyDialog_hierarchyDropdown";
oFF.OuSelectHierarchyDialog.FLAT_PRESENTATION_ITEM = "SelectHierarchyDialog_FlatPresentationMenu";
oFF.OuSelectHierarchyDialog.MAIN_LAYOUT = "ffOuSelectHierarchyDialogLayout";
oFF.OuSelectHierarchyDialog.PRG_DATA_DIMENSION = "dimension";
oFF.OuSelectHierarchyDialog.PRG_DATA_HIERARCHY_RESULT = "hierarchyResult";
oFF.OuSelectHierarchyDialog.prototype.m_cancelButton = null;
oFF.OuSelectHierarchyDialog.prototype.m_dimension = null;
oFF.OuSelectHierarchyDialog.prototype.m_hierarchyDropdown = null;
oFF.OuSelectHierarchyDialog.prototype.m_hierarchyResult = null;
oFF.OuSelectHierarchyDialog.prototype.m_okButton = null;
oFF.OuSelectHierarchyDialog.prototype.m_selectedHierarchyName = null;
oFF.OuSelectHierarchyDialog.prototype.m_selectedItem = null;
oFF.OuSelectHierarchyDialog.prototype.m_utils = null;
oFF.OuSelectHierarchyDialog.prototype.addItemsToHierarchyDropdown = function(catalogItems)
{
	let dropdownItems = oFF.XLinkedHashMapByString.create();
	if (this.m_dimension.getDimensionType() !== oFF.DimensionType.ACCOUNT)
	{
		dropdownItems.put(oFF.OuSelectHierarchyDialog.FLAT_PRESENTATION_ITEM, this.getLocalization().getText(oFF.OuHierarchyDialogI18n.FLAT_REPRESENTATION_ITEM_LABEL));
	}
	let i;
	let sortedList = oFF.XCollectionUtils.createListCopy(catalogItems);
	sortedList.sortByComparator(this.getUtils().getSortComparator());
	for (i = 0; i < sortedList.size(); i++)
	{
		let catItem = sortedList.get(i);
		let catItemDesc = this.getHierarchyDescription(catItem);
		let catItemText = oFF.QueryPresentationUtils.DESCRIPTION_AND_ID.composeDisplayStrings(catItem.getHierarchyName(), catItemDesc);
		dropdownItems.put(catItem.getHierarchyName(), catItemText);
	}
	this.m_hierarchyDropdown.setComboBoxItems(dropdownItems);
	if (this.m_dimension.isHierarchyActive())
	{
		this.m_hierarchyDropdown.setValue(oFF.XStringValue.create(this.m_dimension.getHierarchyName()));
	}
	else
	{
		this.m_hierarchyDropdown.setValue(oFF.XStringValue.create(oFF.OuSelectHierarchyDialog.FLAT_PRESENTATION_ITEM));
	}
};
oFF.OuSelectHierarchyDialog.prototype.buildUi = function(genesis)
{
	this.setTitle(this.getLocalization().getText(oFF.OuHierarchyDialogI18n.TITLE));
	if (this.getStartData() !== null)
	{
		this.m_dimension = this.getStartData().getXObjectByKey(oFF.OuSelectHierarchyDialog.PRG_DATA_DIMENSION);
		this.m_hierarchyResult = this.getStartData().getXObjectByKey(oFF.OuSelectHierarchyDialog.PRG_DATA_HIERARCHY_RESULT);
	}
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	mainLayout.setPadding(oFF.UtStyles.DIALOG_PADDING);
	mainLayout.setName(oFF.OuSelectHierarchyDialog.MAIN_LAYOUT);
	if (oFF.isNull(this.m_dimension))
	{
		let noDimensionErrorLabel = this.getLocalization().getText(oFF.OuHierarchyDialogI18n.NO_DIMENSION_ERROR_LABEL);
		let errorLabel = mainLayout.addNewItemOfType(oFF.UiType.LABEL);
		errorLabel.setText(noDimensionErrorLabel);
	}
	else
	{
		mainLayout.addItem(this.setupForm(genesis).getView());
		this.addItemsToHierarchyDropdown(this.m_hierarchyResult.getObjects());
	}
	genesis.setRoot(mainLayout);
};
oFF.OuSelectHierarchyDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss("25%", "10%");
};
oFF.OuSelectHierarchyDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	this.m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_okButton.setText(this.getLocalization().getText(oFF.XCommonI18n.OK));
	this.m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.onOkPressed();
	}));
	this.m_okButton.focus();
	dialogButtons.add(this.m_okButton);
	this.m_cancelButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_cancelButton.setText(this.getLocalization().getText(oFF.XCommonI18n.CANCEL));
	this.m_cancelButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent2) => {
		this.onCancelPressed();
	}));
	dialogButtons.add(this.m_cancelButton);
	return dialogButtons;
};
oFF.OuSelectHierarchyDialog.prototype.getHierarchyDescription = function(catItem)
{
	return this.getUtils().getHierarchyDescription(catItem);
};
oFF.OuSelectHierarchyDialog.prototype.getProgramName = function()
{
	return oFF.OuSelectHierarchyDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuSelectHierarchyDialog.prototype.getUtils = function()
{
	if (oFF.isNull(this.m_utils))
	{
		this.m_utils = oFF.OuSelectHierarchyDialogUtils.create(this.getLocalization(), this.m_dimension);
	}
	return this.m_utils;
};
oFF.OuSelectHierarchyDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuSelectHierarchyDialog();
	prg.setup();
	return prg;
};
oFF.OuSelectHierarchyDialog.prototype.onCancelPressed = function()
{
	this.terminate();
};
oFF.OuSelectHierarchyDialog.prototype.onContainerAfterOpen = function()
{
	if (oFF.notNull(this.m_hierarchyDropdown))
	{
		this.m_hierarchyDropdown.focus();
	}
};
oFF.OuSelectHierarchyDialog.prototype.onOkPressed = function()
{
	if (oFF.notNull(this.m_selectedHierarchyName))
	{
		if (oFF.XString.isEqual(this.m_selectedHierarchyName, oFF.OuSelectHierarchyDialog.FLAT_PRESENTATION_ITEM))
		{
			this.m_dimension.setHierarchyActive(!this.m_dimension.isHierarchyActive());
		}
		else
		{
			this.m_dimension.setHierarchyName(this.m_selectedHierarchyName);
			this.m_dimension.setHierarchyActive(true);
		}
		this.notifyOkPressed();
	}
	this.terminate();
};
oFF.OuSelectHierarchyDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuSelectHierarchyDialog.prototype.processArguments = function(args) {};
oFF.OuSelectHierarchyDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuSelectHierarchyDialog.prototype.releaseObject = function()
{
	this.m_hierarchyDropdown = oFF.XObjectExt.release(this.m_hierarchyDropdown);
	this.m_okButton = oFF.XObjectExt.release(this.m_okButton);
	this.m_cancelButton = oFF.XObjectExt.release(this.m_cancelButton);
	this.m_selectedItem = oFF.XObjectExt.release(this.m_selectedItem);
	oFF.DfOuDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuSelectHierarchyDialog.prototype.setupForm = function(genesis)
{
	let form = oFF.UiForm.create(genesis);
	let hierarchyLabelText = this.getLocalization().getText(oFF.OuHierarchyDialogI18n.HIERARCHY_LABEL);
	this.m_hierarchyDropdown = form.addComboBox(oFF.OuSelectHierarchyDialog.DROPDOWN_HIERARCHY, "", hierarchyLabelText, null, false);
	this.m_hierarchyDropdown.setValueChangedConsumer((key, newVal) => {
		this.m_selectedHierarchyName = oFF.XValueUtil.getString(newVal);
	});
	this.m_hierarchyDropdown.setEnterPressedProcedure(() => {
		this.m_selectedHierarchyName = oFF.XValueUtil.getString(this.m_hierarchyDropdown.getValue());
	});
	return form;
};
oFF.OuSelectHierarchyDialog.prototype.setupProgram = function()
{
	return null;
};

oFF.OuSelectHierarchyListDialog = function() {};
oFF.OuSelectHierarchyListDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuSelectHierarchyListDialog.prototype._ff_c = "OuSelectHierarchyListDialog";

oFF.OuSelectHierarchyListDialog.DEFAULT_PROGRAM_NAME = "SelectHierarchyListDialog";
oFF.OuSelectHierarchyListDialog.FLAT_PRESENTATION_ITEM = "SelectHierarchyDialog_FlatPresentationMenu";
oFF.OuSelectHierarchyListDialog.MAIN_LAYOUT = "ffOuSelectHierarchyListDialogLayout";
oFF.OuSelectHierarchyListDialog.MAX_ITEMS_PER_PAGE = 18;
oFF.OuSelectHierarchyListDialog.PRG_DATA_HIERARCHY_RESULT = "hierarchyResult";
oFF.OuSelectHierarchyListDialog.SEARCH_FIELD = "ffOuSelectHierarchyListDialogSearch";
oFF.OuSelectHierarchyListDialog.prototype.m_cancelButton = null;
oFF.OuSelectHierarchyListDialog.prototype.m_dataProvider = null;
oFF.OuSelectHierarchyListDialog.prototype.m_dimension = null;
oFF.OuSelectHierarchyListDialog.prototype.m_hierarchyResult = null;
oFF.OuSelectHierarchyListDialog.prototype.m_okButton = null;
oFF.OuSelectHierarchyListDialog.prototype.m_selectHierarchyListView = null;
oFF.OuSelectHierarchyListDialog.prototype.m_selectedHierarchyId = null;
oFF.OuSelectHierarchyListDialog.prototype.m_selectedHierarchyName = null;
oFF.OuSelectHierarchyListDialog.prototype.m_utils = null;
oFF.OuSelectHierarchyListDialog.prototype.buildUi = function(genesis)
{
	this.setTitle(this.getLocalization().getText(oFF.OuHierarchyDialogI18n.TITLE));
	if (this.getStartData() !== null)
	{
		this.m_dimension = this.getStartData().getXObjectByKey(oFF.OuSelectHierarchyDialog.PRG_DATA_DIMENSION);
		this.m_hierarchyResult = this.getStartData().getXObjectByKey(oFF.OuSelectHierarchyListDialog.PRG_DATA_HIERARCHY_RESULT);
	}
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainLayout.setName(oFF.OuSelectHierarchyListDialog.MAIN_LAYOUT);
	mainLayout.addCssClass("ffOuSelectHierarchyListDialogLayout");
	mainLayout.setAlignItems(oFF.UiFlexAlignItems.START);
	mainLayout.setAlignContent(oFF.UiFlexAlignContent.START);
	mainLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	if (oFF.isNull(this.m_dimension))
	{
		let noDimensionErrorLabel = this.getLocalization().getText(oFF.OuHierarchyDialogI18n.NO_DIMENSION_ERROR_LABEL);
		let errorLabel = mainLayout.addNewItemOfType(oFF.UiType.LABEL);
		errorLabel.setText(noDimensionErrorLabel);
	}
	else
	{
		let suSearchField = oFF.SuSearchField.create((query) => {
			this.m_dataProvider.setQuery(query);
			this.m_selectHierarchyListView.updateUI();
		});
		suSearchField.setName(oFF.OuSelectHierarchyListDialog.SEARCH_FIELD);
		mainLayout.addItem(suSearchField.renderView(genesis));
		suSearchField.addCssClass("ffOuSelectHierarchyListDialogSearch");
		this.m_selectHierarchyListView = this.createHierarchyListView();
		mainLayout.addItem(this.m_selectHierarchyListView.renderView(genesis));
		this.m_selectHierarchyListView.attachOnSelect((data) => {
			let selectedHierarchy = data;
			this.m_selectedHierarchyName = selectedHierarchy.getHierarchyName();
			this.m_selectedHierarchyId = selectedHierarchy.getHierId();
		});
	}
	this.populateDataProvider(this.m_hierarchyResult);
	genesis.setRoot(mainLayout);
};
oFF.OuSelectHierarchyListDialog.prototype.createDataProvider = function()
{
	let list = oFF.XList.create();
	let filterFunction = this.getUtils().getSearchFunction();
	let provider = oFF.SuLocalDataProvider.create(list, null, filterFunction);
	provider.setMaxItems(oFF.OuSelectHierarchyListDialog.MAX_ITEMS_PER_PAGE);
	return provider;
};
oFF.OuSelectHierarchyListDialog.prototype.createFlatPresentationItem = function()
{
	let id = oFF.OuSelectHierarchyListDialog.FLAT_PRESENTATION_ITEM;
	let description = this.getLocalization().getText(oFF.OuHierarchyDialogI18n.FLAT_REPRESENTATION_ITEM_LABEL);
	let flatPresentation = oFF.HierarchyCatalogItem.createCatalogItem();
	flatPresentation.setHierId(id);
	flatPresentation.setHierarchyName(description);
	flatPresentation.setHierarchyMediumText(description);
	return flatPresentation;
};
oFF.OuSelectHierarchyListDialog.prototype.createHierarchyListView = function()
{
	let i18n = this.getLocalization();
	this.m_dataProvider = this.createDataProvider();
	return oFF.OuSelectHierarchyListView.create(i18n, this.m_dataProvider);
};
oFF.OuSelectHierarchyListDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss("60%", "auto");
};
oFF.OuSelectHierarchyListDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	this.m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_okButton.setText(this.getLocalization().getText(oFF.OuHierarchyDialogI18n.SELECT));
	this.m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.onOkPressed();
	}));
	this.m_okButton.focus();
	dialogButtons.add(this.m_okButton);
	this.m_cancelButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_cancelButton.setText(this.getLocalization().getText(oFF.XCommonI18n.CANCEL));
	this.m_cancelButton.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent2) => {
		this.onCancelPressed();
	}));
	dialogButtons.add(this.m_cancelButton);
	return dialogButtons;
};
oFF.OuSelectHierarchyListDialog.prototype.getProgramName = function()
{
	return oFF.OuSelectHierarchyListDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuSelectHierarchyListDialog.prototype.getSelectedHierarchyCatalogItem = function(hierarchies)
{
	if (!this.m_dimension.isHierarchyActive())
	{
		return this.createFlatPresentationItem();
	}
	return oFF.XCollectionUtils.findFirst(hierarchies, (hierarchy) => {
		return oFF.XString.isEqual(this.m_dimension.getHierarchyName(), hierarchy.getHierarchyName());
	});
};
oFF.OuSelectHierarchyListDialog.prototype.getUtils = function()
{
	if (oFF.isNull(this.m_utils))
	{
		this.m_utils = oFF.OuSelectHierarchyDialogUtils.create(this.getLocalization(), this.m_dimension);
	}
	return this.m_utils;
};
oFF.OuSelectHierarchyListDialog.prototype.isResizeAllowed = function()
{
	return true;
};
oFF.OuSelectHierarchyListDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuSelectHierarchyListDialog();
	prg.setup();
	return prg;
};
oFF.OuSelectHierarchyListDialog.prototype.onCancelPressed = function()
{
	this.terminate();
};
oFF.OuSelectHierarchyListDialog.prototype.onOkPressed = function()
{
	if (oFF.notNull(this.m_selectedHierarchyName))
	{
		if (oFF.XString.isEqual(this.m_selectedHierarchyId, oFF.OuSelectHierarchyListDialog.FLAT_PRESENTATION_ITEM))
		{
			this.m_dimension.setHierarchyActive(false);
		}
		else
		{
			this.m_dimension.setHierarchyName(this.m_selectedHierarchyName);
			this.m_dimension.setHierarchyActive(true);
		}
		this.notifyOkPressed();
	}
	this.terminate();
};
oFF.OuSelectHierarchyListDialog.prototype.populateDataProvider = function(result)
{
	let hierarchies = oFF.XList.create();
	if (this.m_dimension.getDimensionType() !== oFF.DimensionType.ACCOUNT)
	{
		hierarchies.add(this.createFlatPresentationItem());
	}
	let sortedList = result.getObjects().createListCopy();
	sortedList.sortByComparator(this.getUtils().getSortComparator());
	oFF.XCollectionUtils.addAll(hierarchies, sortedList);
	this.m_dataProvider.setItems(hierarchies);
	let selectedHierarchyCatalogItem = this.getSelectedHierarchyCatalogItem(hierarchies);
	this.m_selectHierarchyListView.updateUI();
	this.m_selectHierarchyListView.setSelectedItem(selectedHierarchyCatalogItem);
};
oFF.OuSelectHierarchyListDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuSelectHierarchyListDialog.prototype.processArguments = function(args) {};
oFF.OuSelectHierarchyListDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuSelectHierarchyListDialog.prototype.setupProgram = function()
{
	return null;
};

oFF.OuMeasureDimensionConfigDialog = function() {};
oFF.OuMeasureDimensionConfigDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuMeasureDimensionConfigDialog.prototype._ff_c = "OuMeasureDimensionConfigDialog";

oFF.OuMeasureDimensionConfigDialog.DEFAULT_PROGRAM_NAME = "MeasureDimensionConfigDialog";
oFF.OuMeasureDimensionConfigDialog.prototype.m_root = null;
oFF.OuMeasureDimensionConfigDialog.prototype.buildUi = function(genesis)
{
	this.setTitle(this.getLocalization().getText(oFF.OuMeasureDimensionConfigDialogI18n.I18N_PROGRAM_TITLE));
	this.m_root = genesis.newRoot(oFF.UiType.FLEX_LAYOUT);
	this.m_root.setDirection(oFF.UiFlexDirection.COLUMN);
};
oFF.OuMeasureDimensionConfigDialog.prototype.getProgramName = function()
{
	return oFF.OuMeasureDimensionConfigDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuMeasureDimensionConfigDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuMeasureDimensionConfigDialog();
	prg.setup();
	return prg;
};
oFF.OuMeasureDimensionConfigDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuMeasureDimensionConfigDialog.prototype.processArguments = function(args) {};
oFF.OuMeasureDimensionConfigDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuMeasureDimensionConfigDialog.prototype.releaseObject = function()
{
	this.m_root = oFF.XObjectExt.release(this.m_root);
	oFF.DfOuDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuMeasureDimensionConfigDialog.prototype.setupProgram = function()
{
	return null;
};

oFF.OuQueryInformationDialog = function() {};
oFF.OuQueryInformationDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuQueryInformationDialog.prototype._ff_c = "OuQueryInformationDialog";

oFF.OuQueryInformationDialog.DEFAULT_PROGRAM_NAME = "QueryInformationDialog";
oFF.OuQueryInformationDialog.MODEL_INFO_KEY = "modelInfo";
oFF.OuQueryInformationDialog.MODEL_LINK_ICON = "icon";
oFF.OuQueryInformationDialog.MODEL_LINK_NAME = "name";
oFF.OuQueryInformationDialog.MODEL_LINK_SRC = "src";
oFF.OuQueryInformationDialog.PRG_DATA_INFO_DIALOG_CONFIG = "infoDialogConfig";
oFF.OuQueryInformationDialog.PRG_DATA_INTEROP_STORY_LINK = "interopStoryLink";
oFF.OuQueryInformationDialog.prototype.m_dialogConfig = null;
oFF.OuQueryInformationDialog.prototype.m_generalTab = null;
oFF.OuQueryInformationDialog.prototype.m_storyLinkData = null;
oFF.OuQueryInformationDialog.prototype.buildGeneralLayout = function(genesis)
{
	let queryModel = this.getQueryManager().getQueryModel();
	let systemType = queryModel.getSystemType();
	let generalLayout = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	generalLayout.setPadding(oFF.UiCssBoxEdges.create("1em"));
	let datasourceIdMap = oFF.XHashMapByString.create();
	datasourceIdMap.put(oFF.OuQueryInformationDialogConstants.LABEL, this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_NAME_LABEL));
	datasourceIdMap.put(oFF.OuQueryInformationDialogConstants.VALUE, this.getQueryManager().getQueryModel().getTechnicalNameWithFallback());
	let descMap = oFF.XHashMapByString.create();
	descMap.put(oFF.OuQueryInformationDialogConstants.LABEL, this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_DESC_LABEL));
	descMap.put(oFF.OuQueryInformationDialogConstants.VALUE, queryModel.getDescriptionWithFallback());
	let datasourceSectionPartsMap = oFF.XLinkedHashMapByString.create();
	datasourceSectionPartsMap.put(oFF.OuQueryInformationDialogConstants.TECH_ID, datasourceIdMap);
	datasourceSectionPartsMap.put(oFF.OuQueryInformationDialogConstants.DESCRIPTION, descMap);
	let datasourceSectionMap = oFF.XLinkedHashMapByString.create();
	datasourceSectionMap.put("datasourceSection", datasourceSectionPartsMap);
	this.buildSection(generalLayout, "datasource", this.getDatasourceSectionHeader(systemType), datasourceSectionMap);
	if (queryModel.getSystemType().isTypeOf(oFF.SystemType.BW))
	{
		this.buildInfoProviderSection(queryModel, generalLayout);
	}
	if (oFF.notNull(this.m_storyLinkData))
	{
		this.buildInteropStoryLink(generalLayout);
	}
	return generalLayout;
};
oFF.OuQueryInformationDialog.prototype.buildGeneralTab = function(genesis)
{
	let generalTab = genesis.newControl(oFF.UiType.ICON_TAB_BAR_ITEM);
	generalTab.setName("generalTab");
	generalTab.setText(this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_HEADER));
	let generalTabLayout = this.buildGeneralLayout(genesis);
	generalTabLayout.setMargin(oFF.UiCssBoxEdges.create("0 1em 0 1em"));
	generalTab.setContent(generalTabLayout);
	return generalTab;
};
oFF.OuQueryInformationDialog.prototype.buildInfoProviderSection = function(queryModel, generalTabLayout)
{
	let infoProvider = queryModel.getInfoProvider();
	let infoProviderName = oFF.isNull(infoProvider) ? "" : infoProvider.getText();
	let infoProviderDesc = oFF.isNull(infoProvider) ? "" : infoProvider.getName();
	if (oFF.XStringUtils.isNullOrEmpty(infoProviderName))
	{
		infoProviderName = infoProviderDesc;
	}
	let techIdMap = oFF.XHashMapByString.create();
	techIdMap.put(oFF.OuQueryInformationDialogConstants.LABEL, this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_NAME_LABEL));
	techIdMap.put(oFF.OuQueryInformationDialogConstants.VALUE, infoProviderName);
	let descMap = oFF.XHashMapByString.create();
	descMap.put(oFF.OuQueryInformationDialogConstants.LABEL, this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.GENERAL_TAB_DESC_LABEL));
	descMap.put(oFF.OuQueryInformationDialogConstants.VALUE, infoProviderDesc);
	let infoProviderSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.INFO_PROVIDER_SECTION_HEADER);
	let infoProviderSectionPartsMap = oFF.XLinkedHashMapByString.create();
	infoProviderSectionPartsMap.put(oFF.OuQueryInformationDialogConstants.TECH_ID, techIdMap);
	infoProviderSectionPartsMap.put(oFF.OuQueryInformationDialogConstants.DESCRIPTION, descMap);
	let infoProviderSectionMap = oFF.XLinkedHashMapByString.create();
	infoProviderSectionMap.put("infoProviderSection", infoProviderSectionPartsMap);
	this.buildSection(generalTabLayout, "infoProvider", infoProviderSectionHeader, infoProviderSectionMap);
	let cubeInfo = queryModel.getCubeInfo();
	let lastUpdated = cubeInfo.getDataRollUpMin();
	if (oFF.isNull(lastUpdated))
	{
		lastUpdated = cubeInfo.getUpdatedOn();
	}
	if (oFF.notNull(lastUpdated))
	{
		this.buildLastUpdatedSection(generalTabLayout, lastUpdated);
	}
};
oFF.OuQueryInformationDialog.prototype.buildInteropStoryLink = function(generalLayout)
{
	let linkText = this.m_storyLinkData.getStringByKey(oFF.OuQueryInformationDialog.MODEL_LINK_NAME);
	let linkSrc = this.m_storyLinkData.getStringByKey(oFF.OuQueryInformationDialog.MODEL_LINK_SRC);
	if (oFF.notNull(linkText) && oFF.notNull(linkSrc))
	{
		let linkHeader = generalLayout.addNewItemOfType(oFF.UiType.LABEL);
		linkHeader.setText(this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.PINNED_TO_STORY_LINK_HEADER));
		linkHeader.setFontSize(oFF.UiCssLength.create("1em"));
		linkHeader.setFontWeight(oFF.UiFontWeight.BOLD);
		let horLayout = generalLayout.addNewItemOfType(oFF.UiType.HORIZONTAL_LAYOUT);
		let iconUri = this.m_storyLinkData.getStringByKey(oFF.OuQueryInformationDialog.MODEL_LINK_ICON);
		if (oFF.notNull(iconUri))
		{
			let storyIcon = horLayout.addNewItemOfType(oFF.UiType.ICON);
			storyIcon.setIcon(iconUri);
			storyIcon.setPadding(oFF.UiCssBoxEdges.create("0rem 0.25rem 0rem 0rem"));
			storyIcon.addCssClass("sapMLnk");
			storyIcon.registerOnPress(oFF.UiLambdaPressListener.create((_ce) => {
				oFF.UiFramework.currentFramework().openUrl(linkSrc, "_blank");
			}));
		}
		let uiLink = horLayout.addNewItemOfType(oFF.UiType.LINK);
		uiLink.setText(linkText);
		uiLink.setSrc(linkSrc);
		uiLink.setTarget("_blank");
	}
};
oFF.OuQueryInformationDialog.prototype.buildLastUpdatedSection = function(parentTabLayout, lastUpdated)
{
	let dateTimeFormatter;
	let formattedDateTime;
	let dateInfoMap;
	let userProfile = this.getProcess().getUserProfile();
	let dateFormat = userProfile.getDateFormatting();
	let timeFormat = userProfile.getTimeFormatting();
	try
	{
		dateTimeFormatter = oFF.XDateTimeFormatter.create(oFF.XStringUtils.concatenate3(dateFormat, " ", timeFormat));
		formattedDateTime = dateTimeFormatter.formatDateTime(lastUpdated);
	}
	catch (exception)
	{
		oFF.XLogger.println("invalid date/time format in user profile");
		return;
	}
	dateInfoMap = oFF.XHashMapByString.create();
	dateInfoMap.put(oFF.OuQueryInformationDialogConstants.LABEL, this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_DATE_LABEL));
	dateInfoMap.put(oFF.OuQueryInformationDialogConstants.VALUE, formattedDateTime);
	let lastUpdatedSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.LAST_UPDATED_SECTION_HEADER);
	let lastUpdatedSectionPartsList = oFF.XList.create();
	lastUpdatedSectionPartsList.add(dateInfoMap);
	let lastUpdatedSectionPartsMap = oFF.XLinkedHashMapByString.create();
	lastUpdatedSectionPartsMap.put("DateInfo", dateInfoMap);
	let lastUpdatedSectionMap = oFF.XLinkedHashMapByString.create();
	lastUpdatedSectionMap.put("lastUpdatedSection", lastUpdatedSectionPartsMap);
	this.buildSection(parentTabLayout, "lastUpdated", lastUpdatedSectionHeader, lastUpdatedSectionMap);
};
oFF.OuQueryInformationDialog.prototype.buildNode = function(genesis, valueIndex, variableValues)
{
	let lowDisplayValue;
	let highDisplayValue;
	let valueText = "";
	let variableValueNode = genesis.newControl(oFF.UiType.TREE_ITEM);
	let value = variableValues.get(valueIndex);
	lowDisplayValue = this.getVariableOperandText(value.getFirstOperand());
	highDisplayValue = this.getVariableOperandText(value.getSecondOperand());
	let templateKey = this.getNodeTemplateKey(value.getOperator());
	if (oFF.XStringUtils.isNotNullAndNotEmpty(highDisplayValue))
	{
		valueText = this.getLocalization().getTextWithPlaceholder2(templateKey, lowDisplayValue, highDisplayValue);
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(lowDisplayValue))
	{
		if (oFF.XStringUtils.isNullOrEmpty(templateKey))
		{
			valueText = lowDisplayValue;
		}
		else
		{
			valueText = this.getLocalization().getTextWithPlaceholder(templateKey, lowDisplayValue);
		}
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(valueText))
	{
		variableValueNode.setText(valueText);
	}
	return variableValueNode;
};
oFF.OuQueryInformationDialog.prototype.buildSection = function(parentTabLayout, sectionId, sectionHeaderText, sectionInfoMap)
{
	let sectionLayout = parentTabLayout.addNewItemOfType(oFF.UiType.VERTICAL_LAYOUT);
	sectionLayout.setMargin(oFF.UiCssBoxEdges.create("1em 0 0 0"));
	let sectionTitle = sectionLayout.addNewItemOfType(oFF.UiType.TITLE);
	sectionTitle.addCssClass("ffOuQueryInformationDialogSectionTitle");
	sectionTitle.setName(this.buildSectionElementName(sectionId, "Header"));
	sectionTitle.setText(sectionHeaderText);
	sectionTitle.setTooltip(sectionHeaderText);
	let sectionKey = sectionInfoMap.getKeysAsReadOnlyList().get(0);
	let sectionInfoPartsMap = sectionInfoMap.getByKey(sectionKey);
	let partKeys = sectionInfoPartsMap.getKeysAsReadOnlyList();
	for (let i = 0; i < partKeys.size(); i++)
	{
		let mapKey = partKeys.get(i);
		let map = sectionInfoPartsMap.getByKey(mapKey);
		let label = map.getByKey(oFF.OuQueryInformationDialogConstants.LABEL);
		let itemLabel = sectionLayout.addNewItemOfType(oFF.UiType.LABEL);
		let itemName = this.buildSectionElementName(sectionId, this.buildSectionElementName(mapKey, "Label"));
		itemLabel.setName(itemName);
		itemLabel.setText(label);
		itemLabel.setTooltip(label);
		let text = map.getByKey(oFF.OuQueryInformationDialogConstants.VALUE);
		let itemText = sectionLayout.addNewItemOfType(oFF.UiType.LABEL);
		itemName = this.buildSectionElementName(sectionId, this.buildSectionElementName(mapKey, "Text"));
		itemText.setName(itemName);
		itemText.setWrapping(true);
		itemText.setMargin(oFF.UiCssBoxEdges.create("0 0 1em 0"));
		itemText.setText(text);
		itemText.setTooltip(text);
	}
};
oFF.OuQueryInformationDialog.prototype.buildSectionElementName = function(sectionId, elementName)
{
	let buffer = oFF.XStringBuffer.create().append(sectionId).append(elementName);
	return buffer.toString();
};
oFF.OuQueryInformationDialog.prototype.buildUi = function(genesis)
{
	this.setTitle(this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.DIALOG_TITLE));
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainLayout.setName("OuQueryInformationDialog");
	let variables = this.getQueryManager().getInputEnabledAndNonTechnicalVariables();
	let variableInfo = this.processVariables(variables);
	if (variableInfo.isEmpty())
	{
		let generalLayout = this.buildGeneralLayout(genesis);
		mainLayout.addItem(generalLayout);
	}
	else
	{
		let iconTabBar = mainLayout.addNewItemOfType(oFF.UiType.ICON_TAB_BAR);
		iconTabBar.setApplyContentPadding(false);
		this.m_generalTab = this.buildGeneralTab(genesis);
		iconTabBar.addItem(this.m_generalTab);
		iconTabBar.addItem(this.buildVariablesTab(genesis, variableInfo));
	}
	genesis.setRoot(mainLayout);
};
oFF.OuQueryInformationDialog.prototype.buildVariableNodes = function(genesis, variableKey, variableValues, variableTree)
{
	if (variableValues.size() > 0)
	{
		let variableNode = genesis.newControl(oFF.UiType.TREE_ITEM);
		let variableNodeText = this.getLocalization().getTextWithPlaceholder2(oFF.OuQueryInformationDialogI18n.VARIABLES_NODE_TEXT, variableKey, oFF.XInteger.convertToString(variableValues.size()));
		variableNode.setText(variableNodeText);
		for (let j = 0; j < variableValues.size(); j++)
		{
			let valueNode = this.buildNode(genesis, j, variableValues);
			variableNode.addItem(valueNode);
			variableTree.addItem(variableNode);
		}
	}
};
oFF.OuQueryInformationDialog.prototype.buildVariablesTab = function(genesis, variableInfo)
{
	let variablesTab = genesis.newControl(oFF.UiType.ICON_TAB_BAR_ITEM);
	variablesTab.setName("variablesTab");
	variablesTab.setText(this.getLocalization().getTextWithPlaceholder(oFF.OuQueryInformationDialogI18n.VARIABLES_TAB_HEADER, oFF.XInteger.convertToString(variableInfo.size())));
	let variablesTabLayout = genesis.newControl(oFF.UiType.VERTICAL_LAYOUT);
	let variableKeys = variableInfo.getKeysAsReadOnlyList();
	let variableTree = variablesTabLayout.addNewItemOfType(oFF.UiType.TREE);
	variableTree.setName("variableTree");
	for (let i = 0; i < variableKeys.size(); i++)
	{
		let currKey = variableKeys.get(i);
		let variableValues = variableInfo.getByKey(currKey);
		this.buildVariableNodes(genesis, currKey, variableValues, variableTree);
	}
	variablesTab.setContent(variablesTabLayout);
	return variablesTab;
};
oFF.OuQueryInformationDialog.prototype.getDatasourceSectionHeader = function(systemType)
{
	let datasourceSectionHeader = "";
	if (this.isDWC())
	{
		datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.DATASPHERE_SECTION_HEADER);
	}
	else if (systemType.isTypeOf(oFF.SystemType.BW))
	{
		datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.BW_QUERY_SECTION_HEADER);
	}
	else if (systemType.isTypeOf(oFF.SystemType.ORCA))
	{
		let modelInfoKey = this.m_dialogConfig.getByKey(oFF.OuQueryInformationDialog.MODEL_INFO_KEY);
		if (oFF.notNull(modelInfoKey))
		{
			let modelSubtype = modelInfoKey.getStringByKey(oFF.OuQueryInformationDialogConstants.MODEL_SUBTYPE_KEY);
			if (oFF.XString.isEqual(oFF.XString.toUpperCase(modelSubtype), oFF.OuQueryInformationDialogConstants.MODEL_SUBTYPE_PLANNING))
			{
				datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.PLANNING_MODEL_SECTION_HEADER);
			}
			else
			{
				datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.ANALYTIC_MODEL_SECTION_HEADER);
			}
		}
		else
		{
			datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.FALLBACK_MODEL_SECTION_HEADER);
		}
	}
	else if (systemType.isTypeOf(oFF.SystemType.ABAP_MDS))
	{
		datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.IBP_SECTION_HEADER);
	}
	else if (systemType.isTypeOf(oFF.SystemType.HANA))
	{
		datasourceSectionHeader = this.getLocalization().getText(oFF.OuQueryInformationDialogI18n.CALC_VIEW_SECTION_HEADER);
	}
	return datasourceSectionHeader;
};
oFF.OuQueryInformationDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss("25em", "30em");
};
oFF.OuQueryInformationDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	let closeBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	closeBtn.setText(this.getLocalization().getText(oFF.XCommonI18n.CLOSE));
	closeBtn.registerOnPress(oFF.UiLambdaPressListener.create((controlEvent) => {
		this.terminate();
	}));
	dialogButtons.add(closeBtn);
	return dialogButtons;
};
oFF.OuQueryInformationDialog.prototype.getNodeTemplateKey = function(operator)
{
	let templateKey = "";
	if (operator === oFF.VdComparisonOperator.EQUAL)
	{
		return templateKey;
	}
	else if (operator === oFF.VdComparisonOperator.BETWEEN)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_RANGE_TEMPLATE;
	}
	else if (operator === oFF.VdComparisonOperator.GREATER_THAN)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GT_TEMPLATE;
	}
	else if (operator === oFF.VdComparisonOperator.GREATER_EQUAL)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_GTE_TEMPLATE;
	}
	else if (operator === oFF.VdComparisonOperator.LESS_THAN)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LT_TEMPLATE;
	}
	else if (operator === oFF.VdComparisonOperator.LESS_EQUAL)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_LTE_TEMPLATE;
	}
	else if (operator === oFF.VdComparisonOperator.NOT_EQUAL)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NE_TEMPLATE;
	}
	else if (operator === oFF.VdComparisonOperator.NOT_BETWEEN)
	{
		templateKey = oFF.OuQueryInformationDialogI18n.VARIABLE_VALUE_NOT_IN_RANGE_TEMPLATE;
	}
	return templateKey;
};
oFF.OuQueryInformationDialog.prototype.getProgramName = function()
{
	return oFF.OuQueryInformationDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuQueryInformationDialog.prototype.getVariableOperandText = function(operand)
{
	let displayValue = operand.getText();
	if (oFF.XStringUtils.isNullOrEmpty(displayValue))
	{
		displayValue = operand.getDisplayKey();
	}
	if (oFF.XStringUtils.isNullOrEmpty(displayValue))
	{
		displayValue = operand.getKey();
	}
	return displayValue;
};
oFF.OuQueryInformationDialog.prototype.isDWC = function()
{
	try
	{
		return this.getQueryManager().getSystemDescription().getProperties().getBooleanByKey("FPA_IS_DWC");
	}
	catch (t)
	{
		return false;
	}
};
oFF.OuQueryInformationDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuQueryInformationDialog();
	prg.setup();
	return prg;
};
oFF.OuQueryInformationDialog.prototype.onContainerAfterOpen = function()
{
	oFF.DfOuDialogProgram.prototype.onContainerAfterOpen.call( this );
	if (oFF.notNull(this.m_generalTab))
	{
		this.m_generalTab.focus();
	}
};
oFF.OuQueryInformationDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuQueryInformationDialog.prototype.processArguments = function(args)
{
	this.assertQueryManagerSet();
};
oFF.OuQueryInformationDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuQueryInformationDialog.prototype.processVariables = function(variables)
{
	let result = oFF.XHashMapByString.create();
	for (let i = 0; i < variables.size(); i++)
	{
		let variable = variables.get(i);
		let valuesFromVariable = oFF.VdImportExport.getValuesFromVariable(variable);
		if (valuesFromVariable.isEmpty())
		{
			continue;
		}
		let variableName = variable.getText();
		if (oFF.XStringUtils.isNullOrEmpty(variableName))
		{
			variableName = variable.getName();
		}
		result.put(variableName, valuesFromVariable);
	}
	return result;
};
oFF.OuQueryInformationDialog.prototype.setupProgram = function()
{
	if (this.getStartData() !== null)
	{
		this.m_dialogConfig = this.getStartData().getXObjectByKey(oFF.OuQueryInformationDialog.PRG_DATA_INFO_DIALOG_CONFIG);
		this.m_storyLinkData = this.getStartData().getXObjectByKey(oFF.OuQueryInformationDialog.PRG_DATA_INTEROP_STORY_LINK);
	}
	return null;
};

oFF.OuTopNDialog = function() {};
oFF.OuTopNDialog.prototype = new oFF.DfOuDialogProgram();
oFF.OuTopNDialog.prototype._ff_c = "OuTopNDialog";

oFF.OuTopNDialog.BOTTOM = "bottom";
oFF.OuTopNDialog.DEFAULT_PROGRAM_NAME = "TopNDialog";
oFF.OuTopNDialog.DIALOG_HEIGHT = "auto";
oFF.OuTopNDialog.DIALOG_WIDTH = "26rem";
oFF.OuTopNDialog.N_VALUE_INITIAL = "1";
oFF.OuTopNDialog.N_VALUE_MAX_LENGTH = 4;
oFF.OuTopNDialog.PRG_DATA_MEASURE = "measure";
oFF.OuTopNDialog.PRG_DATA_N_VALUE = "nvalue";
oFF.OuTopNDialog.PRG_DATA_SECONDARY_MEASURE = "secondarymeasure";
oFF.OuTopNDialog.PRG_DATA_TOP_OR_BOTTOM_VALUE = "topOrBottom";
oFF.OuTopNDialog.PRG_DATA_VERSION = "version";
oFF.OuTopNDialog.TOP = "top";
oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_BOTTOM_VALUE = "1_BOTTOM";
oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_TOP_VALUE = "0_TOP";
oFF.OuTopNDialog.isInputValid = function(userInput)
{
	return oFF.notNull(userInput) && oFF.XString.size(userInput) <= oFF.OuTopNDialog.N_VALUE_MAX_LENGTH && oFF.OuTopNDialog.isIntegerWithoutSign(userInput) && !oFF.OuTopNDialog.isZero(userInput);
};
oFF.OuTopNDialog.isIntegerWithoutSign = function(value)
{
	return oFF.XString.match(value, "^\\d+$");
};
oFF.OuTopNDialog.isZero = function(value)
{
	return oFF.XString.isEqual(value, "0");
};
oFF.OuTopNDialog.removeLeadingZeros = function(value)
{
	if (oFF.isNull(value))
	{
		return null;
	}
	let index = 0;
	while (index < oFF.XString.size(value) && oFF.OuTopNDialog.isZero(oFF.XString.substring(value, index, index + 1)))
	{
		index++;
	}
	if (index === oFF.XString.size(value))
	{
		return "0";
	}
	return oFF.XString.substring(value, index, -1);
};
oFF.OuTopNDialog.topNConditionExists = function(qm)
{
	return oFF.notNull(qm) && qm.getConvenienceCommands().getRank(null) !== null;
};
oFF.OuTopNDialog.prototype.m_form = null;
oFF.OuTopNDialog.prototype.m_initialNValue = null;
oFF.OuTopNDialog.prototype.m_initialValueForDropDown = null;
oFF.OuTopNDialog.prototype.m_measure = null;
oFF.OuTopNDialog.prototype.m_measureName = null;
oFF.OuTopNDialog.prototype.m_nValueInputField = null;
oFF.OuTopNDialog.prototype.m_secondaryMeasure = null;
oFF.OuTopNDialog.prototype.m_selectedMeasure = null;
oFF.OuTopNDialog.prototype.m_settingsSection = null;
oFF.OuTopNDialog.prototype.m_topOrBottomDropDown = null;
oFF.OuTopNDialog.prototype.m_version = null;
oFF.OuTopNDialog.prototype.buildUi = function(genesis)
{
	this.setTitle(this.getLocalization().getText(oFF.OuTopNDialogI18n.TITLE));
	let mainLayout = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	mainLayout.setDirection(oFF.UiFlexDirection.COLUMN);
	mainLayout.setPadding(oFF.UtStyles.DIALOG_PADDING);
	if (oFF.OuTopNDialog.topNConditionExists(this.getQueryManager()))
	{
		mainLayout.addItem(this.createInfoSection(genesis));
	}
	mainLayout.addItem(this.setupForm(genesis).getView());
	genesis.setRoot(mainLayout);
};
oFF.OuTopNDialog.prototype.createInfoSection = function(genesis)
{
	let infoSection = genesis.newControl(oFF.UiType.FLEX_LAYOUT);
	infoSection.setDirection(oFF.UiFlexDirection.ROW);
	let infoIco = genesis.newControl(oFF.UiType.ICON);
	infoIco.setIcon("message-information");
	infoIco.setEnabled(false);
	infoIco.setPadding(oFF.UiCssBoxEdges.create("0px 5px 0px 0px"));
	infoSection.addItem(infoIco);
	let overwriteInformationalLabel = genesis.newControl(oFF.UiType.LABEL);
	overwriteInformationalLabel.setName("overwriteInformationalLabel");
	overwriteInformationalLabel.setText(this.getLocalization().getText(oFF.OuTopNDialogI18n.INFORMATON_MESSAGE));
	overwriteInformationalLabel.setTooltip(this.getLocalization().getText(oFF.OuTopNDialogI18n.INFORMATON_MESSAGE));
	overwriteInformationalLabel.setFontStyle(oFF.UiFontStyle.ITALIC);
	overwriteInformationalLabel.setWrapping(true);
	overwriteInformationalLabel.setPadding(oFF.UiCssBoxEdges.create("0px 1px 0px 0px"));
	infoSection.addItem(overwriteInformationalLabel);
	infoSection.setPadding(oFF.UiCssBoxEdges.create("0px 0px 10px 0px"));
	return infoSection;
};
oFF.OuTopNDialog.prototype.createMeasureSelectionSection = function()
{
	let basedOnText = this.getLocalization().getText(oFF.OuTopNDialogI18n.BASED_ON_SECTION_TITLE);
	let basedOnSection = this.m_form.addFormSection("BasedOn", basedOnText, false);
	basedOnSection.setLabelFontWeight(oFF.UiFontWeight.BOLD);
	let flexLayoutForInput = this.getGenesis().newControl(oFF.UiType.FLEX_LAYOUT);
	flexLayoutForInput.setDirection(oFF.UiFlexDirection.COLUMN);
	let label = flexLayoutForInput.addNewItemOfType(oFF.UiType.LABEL);
	label.setText(this.getLocalization().getText(oFF.OuTopNDialogI18n.MEASURES_INPUTFIELD_TITLE));
	label.setShowColon(true);
	label.setRequired(true);
	let measureInputDataProvider = oFF.OuMeasureInputDataProviderFactory.create(this.getQueryManager().getQueryModel());
	this.m_selectedMeasure = oFF.OuUiMeasureInput.create(this.getProcess(), this.getQueryManager(), measureInputDataProvider);
	this.m_selectedMeasure.renderView(this.getGenesis());
	this.m_selectedMeasure.setValue(this.getQueryManager().getQueryModel().getStructureByName(this.m_measureName));
	this.m_selectedMeasure.setPlaceholder(this.getLocalization().getText(oFF.OuTopNDialogI18n.MEMBER_SELECTOR_DIALOG_TITLE));
	this.m_selectedMeasure.setName("MeasuresInputField");
	this.m_selectedMeasure.attachOnChange((event) => {
		this.validateSelectedMeasure(this.m_selectedMeasure);
	});
	flexLayoutForInput.addItem(this.m_selectedMeasure.getView());
	basedOnSection.addFormCustomControl("flexlayout containing label and widget", flexLayoutForInput);
};
oFF.OuTopNDialog.prototype.createSettingsSection = function()
{
	this.m_settingsSection = this.m_form.addFormSection("settingsSection", this.getLocalization().getText(oFF.OuTopNDialogI18n.SETTINGS_SECTION_TITLE), true);
	this.m_settingsSection.showSectionMarkerDuringValidation(false);
	this.m_settingsSection.setLabelFontWeight(oFF.UiFontWeight.BOLD);
	let values = oFF.XHashMapByString.create();
	values.put(oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_TOP_VALUE, this.getLocalization().getText(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TOP_ELEMENT));
	values.put(oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_BOTTOM_VALUE, this.getLocalization().getText(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_BOTTOM_ELEMENT));
	this.m_topOrBottomDropDown = this.m_settingsSection.addDropdown("topOrBottom", this.m_initialValueForDropDown, this.getLocalization().getText(oFF.OuTopNDialogI18n.TOPBOTTOM_DROPDOWN_TITLE), values, false);
	this.m_topOrBottomDropDown.setLabelFontWeight(oFF.UiFontWeight.NORMAL);
	this.m_topOrBottomDropDown.setFlex("0 0 30%");
	this.m_nValueInputField = this.m_settingsSection.addInput("nValue", this.m_initialNValue, this.getLocalization().getText(oFF.OuTopNDialogI18n.N_VALUE_TITLE));
	this.m_nValueInputField.setInputType(oFF.UiInputType.NUMBER);
	this.m_nValueInputField.setRequired(true);
	this.m_nValueInputField.setLabelFontWeight(oFF.UiFontWeight.NORMAL);
	this.m_nValueInputField.setFlex("0 0 30%");
	this.m_nValueInputField.setCustomValidator((txt) => {
		let rawInput = this.m_nValueInputField.getValue().getStringRepresentation();
		let userInput = oFF.OuTopNDialog.removeLeadingZeros(rawInput);
		if (oFF.OuTopNDialog.isInputValid(userInput))
		{
			this.m_nValueInputField.setValid();
		}
		else
		{
			this.m_nValueInputField.setInvalid(this.getLocalization().getText(oFF.OuTopNDialogI18n.N_VALUE_VALIDATION_MESSAGE));
		}
	});
};
oFF.OuTopNDialog.prototype.determineInitialNValue = function()
{
	let result;
	let nValueParameter = null;
	if (this.getStartData() !== null)
	{
		nValueParameter = this.getStartData().getXObjectByKey(oFF.OuTopNDialog.PRG_DATA_N_VALUE);
	}
	if (oFF.notNull(nValueParameter))
	{
		result = nValueParameter.getStringRepresentation();
	}
	else
	{
		result = oFF.OuTopNDialog.N_VALUE_INITIAL;
	}
	return result;
};
oFF.OuTopNDialog.prototype.determineInitialValueForDropDown = function()
{
	let result = oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_TOP_VALUE;
	let topOrBottomParameter = null;
	if (this.getStartData() !== null)
	{
		topOrBottomParameter = this.getStartData().getXObjectByKey(oFF.OuTopNDialog.PRG_DATA_TOP_OR_BOTTOM_VALUE);
	}
	if (oFF.notNull(topOrBottomParameter))
	{
		let stringValue = topOrBottomParameter.getString();
		if (oFF.XString.isEqual(stringValue, oFF.OuTopNDialog.TOP))
		{
			result = oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_TOP_VALUE;
		}
		else if (oFF.XString.isEqual(stringValue, oFF.OuTopNDialog.BOTTOM))
		{
			result = oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_BOTTOM_VALUE;
		}
		else
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate3("The parameter for PARAM_TOP_OR_BOTTOM_VALUE is invalid. Value supplied is '", stringValue, "'"));
		}
	}
	return result;
};
oFF.OuTopNDialog.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss(oFF.OuTopNDialog.DIALOG_WIDTH, oFF.OuTopNDialog.DIALOG_HEIGHT);
};
oFF.OuTopNDialog.prototype.getDialogButtons = function(genesis)
{
	let dialogButtons = oFF.XList.create();
	let m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	m_okButton.setText(this.getLocalization().getText(oFF.XCommonI18n.OK));
	m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	m_okButton.registerOnPress(oFF.UiLambdaPressListener.create((event) => {
		this.onOkPressed();
	}));
	m_okButton.setName("TopN-OkButton");
	dialogButtons.add(m_okButton);
	let m_cancelButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	m_cancelButton.setText(this.getLocalization().getText(oFF.XCommonI18n.CANCEL));
	m_cancelButton.registerOnPress(oFF.UiLambdaPressListener.create((event2) => {
		this.terminate();
	}));
	m_cancelButton.setName("TopN-CancelButton");
	dialogButtons.add(m_cancelButton);
	return dialogButtons;
};
oFF.OuTopNDialog.prototype.getProgramName = function()
{
	return oFF.OuTopNDialog.DEFAULT_PROGRAM_NAME;
};
oFF.OuTopNDialog.prototype.newProgram = function()
{
	let prg = new oFF.OuTopNDialog();
	prg.setup();
	return prg;
};
oFF.OuTopNDialog.prototype.onContainerAfterOpen = function()
{
	oFF.DfOuDialogProgram.prototype.onContainerAfterOpen.call( this );
	this.m_settingsSection.focus();
};
oFF.OuTopNDialog.prototype.onOkPressed = function()
{
	let measure = this.m_selectedMeasure.getValue();
	if (!this.m_form.submit() || oFF.isNull(measure))
	{
		this.shake();
		return;
	}
	let queryModel = this.getQueryManager().getQueryModel();
	queryModel.getConvenienceCommands().clearRank(null);
	let indicateTopBottom = oFF.ConditionComparisonOperator.TOP_N;
	if (oFF.XString.isEqual(oFF.XValueUtil.getString(this.m_topOrBottomDropDown.getValue()), oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_BOTTOM_VALUE))
	{
		indicateTopBottom = oFF.ConditionComparisonOperator.BOTTOM_N;
	}
	if (oFF.XString.isEqual(oFF.XValueUtil.getString(this.m_topOrBottomDropDown.getValue()), oFF.OuTopNDialog.TOPBOTTOM_DROPDOWN_BOTTOM_VALUE))
	{
		indicateTopBottom = oFF.ConditionComparisonOperator.BOTTOM_N;
	}
	let maxRows = oFF.XInteger.convertFromString(this.m_nValueInputField.getValue().getStringRepresentation());
	let secondaryMeasureName = oFF.notNull(this.m_secondaryMeasure) ? this.m_secondaryMeasure.getName() : null;
	let versionMemberName = oFF.isNull(this.m_version) ? null : this.m_version.getName();
	let versionDimension = oFF.isNull(this.m_version) ? null : this.m_version.getDimension();
	let evaluationType = oFF.ConditionDimensionEvaluationType.ALL_IN_DRILL_DOWN;
	queryModel.getConvenienceCommands().buildRankExt(maxRows, measure.getName(), secondaryMeasureName, null, indicateTopBottom, versionMemberName, versionDimension, false, evaluationType);
	this.notifyOkPressed();
	this.terminate();
};
oFF.OuTopNDialog.prototype.prepareProgramMetadata = function(metadata) {};
oFF.OuTopNDialog.prototype.processArguments = function(args)
{
	this.assertQueryManagerSet();
	if (this.getStartData() !== null)
	{
		this.m_measure = this.getStartData().getXObjectByKey(oFF.OuTopNDialog.PRG_DATA_MEASURE);
		this.m_secondaryMeasure = this.getStartData().getXObjectByKey(oFF.OuTopNDialog.PRG_DATA_SECONDARY_MEASURE);
		this.m_version = this.getStartData().getXObjectByKey(oFF.OuTopNDialog.PRG_DATA_VERSION);
	}
	if (oFF.isNull(this.m_measure))
	{
		throw oFF.XException.createIllegalArgumentException("The parameter with the measure must not be null");
	}
	this.m_measureName = this.m_measure.getName();
	this.m_initialValueForDropDown = this.determineInitialValueForDropDown();
	this.m_initialNValue = this.determineInitialNValue();
};
oFF.OuTopNDialog.prototype.processConfiguration = function(configuration) {};
oFF.OuTopNDialog.prototype.releaseObject = function()
{
	this.m_secondaryMeasure = null;
	this.m_measure = null;
	this.m_topOrBottomDropDown = oFF.XObjectExt.release(this.m_topOrBottomDropDown);
	this.m_selectedMeasure = oFF.XObjectExt.release(this.m_selectedMeasure);
	this.m_form = oFF.XObjectExt.release(this.m_form);
	this.m_nValueInputField = oFF.XObjectExt.release(this.m_nValueInputField);
	oFF.DfOuDialogProgram.prototype.releaseObject.call( this );
};
oFF.OuTopNDialog.prototype.setupForm = function(genesis)
{
	this.m_form = oFF.UiForm.create(genesis);
	this.createSettingsSection();
	this.createMeasureSelectionSection();
	this.m_form.submit();
	return this.m_form;
};
oFF.OuTopNDialog.prototype.setupProgram = function()
{
	return null;
};
oFF.OuTopNDialog.prototype.validateSelectedMeasure = function(measureInput)
{
	if (this.m_selectedMeasure.getValue() === null && !this.m_selectedMeasure.skipValidation())
	{
		measureInput.setValueState(oFF.UiValueState.ERROR);
		measureInput.setValueStateText(this.getLocalization().getText(oFF.OuTopNDialogI18n.MEASURE_VALUE_VALIDATION_MESSAGE));
	}
	else
	{
		measureInput.resetValueState();
	}
};

oFF.VdProgram = function() {};
oFF.VdProgram.prototype = new oFF.DfOuDialogProgram();
oFF.VdProgram.prototype._ff_c = "VdProgram";

oFF.VdProgram.ARG_DATA_PROVIDER_NAME = "dataProviderName";
oFF.VdProgram.ARG_IMPLICIT_SUBMIT = "implicitSubmit";
oFF.VdProgram.ARG_TITLE = "title";
oFF.VdProgram.EXIT_DATA_WORKFLOW_CANCEL = "workflowCancel";
oFF.VdProgram.EXIT_DATA_WORKFLOW_DONE = "workflowDone";
oFF.VdProgram.PARAM_GRID_LAYOUT_ENABLED = "gridLayout";
oFF.VdProgram.PARAM_MULTI_INPUT_COMPONENT_ENABLED = "multiInputComponent";
oFF.VdProgram.PARAM_SETTINGS_POPOVER_ENABLED = "settingsPopover";
oFF.VdProgram.PRG_DATA_VARIABLE_PROCESSOR = "variableProcessor";
oFF.VdProgram.PROGRAM_NAME = "VariableDialog";
oFF.VdProgram.getArgs = function(args, configuration)
{
	let mergedArgs;
	if (oFF.notNull(args))
	{
		mergedArgs = args;
	}
	else
	{
		mergedArgs = oFF.ProgramArgs.create();
	}
	if (oFF.notNull(configuration))
	{
		let configKeys = oFF.XCollectionUtils.filter(configuration.getKeysAsReadOnlyList(), (key) => {
			return !mergedArgs.containsKey(key);
		});
		oFF.XCollectionUtils.forEach(configKeys, (configKey) => {
			mergedArgs.put(configKey, configuration.getByKey(configKey));
		});
	}
	return mergedArgs;
};
oFF.VdProgram.prototype.m_cancelBtn = null;
oFF.VdProgram.prototype.m_implicitSubmit = false;
oFF.VdProgram.prototype.m_okButton = null;
oFF.VdProgram.prototype.m_vdConfig = null;
oFF.VdProgram.prototype.m_vdVariableForm = null;
oFF.VdProgram.prototype.buildUi = function(genesis)
{
	genesis.newRoot(oFF.UiType.ACTIVITY_INDICATOR).useMaxSpace();
	let uiContext = this.getUiContext();
	this.m_vdVariableForm = oFF.VdVariableForm._createForDialog(uiContext, this.m_vdConfig);
	this.m_vdVariableForm.registerRenderListener(this);
	this.m_vdVariableForm.registerReinitListener(this);
	this.m_vdVariableForm.registerSubmitListener(this);
	this.m_vdVariableForm.registerVariantActivationListener(this);
	this.m_vdVariableForm.setOnInvalidValues(() => {
		this.shake();
		let firstInvalidValue = this.m_vdVariableForm.getModel().getFirstInvalidValue();
		if (oFF.notNull(firstInvalidValue))
		{
			firstInvalidValue.callOnInvalidValueState();
		}
	});
	this.m_vdVariableForm.buildOlapDialogUi(genesis);
};
oFF.VdProgram.prototype.getContainerCssClass = function()
{
	return oFF.XStringUtils.concatenate3(oFF.VdVariableDialog.CSS_DIALOG, " ", oFF.VdVariableDialog.CSS_DIALOG_WITH_GRID);
};
oFF.VdProgram.prototype.getDefaultContainerSize = function()
{
	return oFF.UiSize.createByCss(null, null);
};
oFF.VdProgram.prototype.getDialogButtons = function(genesis)
{
	this.m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_okButton.setName(oFF.VdVariableDialog.CSS_DIALOG_SUBMIT_BTN);
	this.m_okButton.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.OuVariableDialogI18nLegacy.I18N_VD_SET));
	this.m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okButton.setVisible(false);
	this.m_okButton.registerOnPress(oFF.UiLambdaPressListener.create(this.onOkButtonPress.bind(this)));
	this.m_cancelBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_cancelBtn.setName(oFF.VdVariableDialog.CSS_DIALOG_CANCEL_BTN);
	this.m_cancelBtn.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.OuVariableDialogI18nLegacy.I18N_CANCEL));
	this.m_cancelBtn.registerOnPress(oFF.UiLambdaPressListener.create(this.onCancelButtonPress.bind(this)));
	let btnList = oFF.XList.create();
	btnList.add(this.m_okButton);
	btnList.add(this.m_cancelBtn);
	return btnList;
};
oFF.VdProgram.prototype.getProgramName = function()
{
	return oFF.VdProgram.PROGRAM_NAME;
};
oFF.VdProgram.prototype.getUiContext = function()
{
	let uiMgr = this.getProcess().getSubSystem(oFF.SubSystemType.GUI);
	if (oFF.isNull(uiMgr))
	{
		uiMgr = this.getApplication().getUiManager();
	}
	let displayFactory = oFF.OlapUiDisplayFactory.createFactoryForDialog(uiMgr);
	return oFF.OlapUiContext.createContext(uiMgr, displayFactory);
};
oFF.VdProgram.prototype.isResizeAllowed = function()
{
	return true;
};
oFF.VdProgram.prototype.newProgram = function()
{
	let program = new oFF.VdProgram();
	program.setup();
	return program;
};
oFF.VdProgram.prototype.onAfterSubmit = function(success, extResult, values, valuesJson)
{
	this.setProgramExitDataDone();
	this.exitNow(0);
};
oFF.VdProgram.prototype.onAfterVariantActivation = function()
{
	this.m_okButton.setEnabled(true);
};
oFF.VdProgram.prototype.onBeforeSubmit = function(values, valuesJson)
{
	if (!this.m_implicitSubmit)
	{
		this.setProgramExitDataDone();
		this.exitNow(0);
	}
};
oFF.VdProgram.prototype.onBeforeVariantActivation = function()
{
	this.m_okButton.setEnabled(false);
};
oFF.VdProgram.prototype.onCancelButtonPress = function(evt)
{
	this.m_vdVariableForm.cancelReinit();
};
oFF.VdProgram.prototype.onCancelReinit = function()
{
	this.setProgramExitDataCancel();
	this.exitNow(0);
};
oFF.VdProgram.prototype.onOkButtonPress = function(evt)
{
	this.m_vdVariableForm.attemptSubmit();
};
oFF.VdProgram.prototype.onReinit = function(success, extResult) {};
oFF.VdProgram.prototype.onRenderDone = function(root)
{
	this.m_okButton.setVisible(true);
};
oFF.VdProgram.prototype.prepareProgramMetadata = function(metadata)
{
	metadata.addParameter(oFF.VdProgram.ARG_TITLE, "The title shown in the dialog header (String)");
	metadata.addParameter(oFF.VdProgram.ARG_DATA_PROVIDER_NAME, "The name of the data provider to be used (String)");
	metadata.addOption(oFF.VdProgram.ARG_IMPLICIT_SUBMIT, "Should the dialog do the submit itself (Boolean)", null, oFF.XValueType.BOOLEAN);
};
oFF.VdProgram.prototype.processArguments = function(args) {};
oFF.VdProgram.prototype.processConfiguration = function(configuration)
{
	this.m_vdConfig = oFF.VdConfiguration.createConfig(null, null);
	this.m_vdConfig.setDateDisplayFormat(oFF.UiNumberFormatterCenter.getCenter().getDateDisplayFormat());
	let args = oFF.VdProgram.getArgs(this.getArguments(), configuration);
	let title = args.getStringByKey(oFF.VdProgram.ARG_TITLE);
	this.m_vdConfig.setTitle(title);
	this.setTitle(title);
	this.m_implicitSubmit = args.getBooleanByKey(oFF.VdProgram.ARG_IMPLICIT_SUBMIT);
	this.m_vdConfig.setImplicitSubmit(this.m_implicitSubmit);
	this.m_vdConfig.setSettingsPopoverEnabled(args.getBooleanByKey(oFF.VdProgram.PARAM_SETTINGS_POPOVER_ENABLED));
	this.m_vdConfig.setGridLayoutEnabled(args.getBooleanByKey(oFF.VdProgram.PARAM_GRID_LAYOUT_ENABLED));
	this.m_vdConfig.setMultiInputComponentEnabled(args.getBooleanByKey(oFF.VdProgram.PARAM_MULTI_INPUT_COMPONENT_ENABLED));
	let startData = this.getStartData();
	if (oFF.notNull(startData))
	{
		let variableProcessor = startData.getXObjectByKey(oFF.VdProgram.PRG_DATA_VARIABLE_PROCESSOR);
		this.m_vdConfig.setVarProcessor(variableProcessor);
		this.m_vdConfig.setUseDatePicker(variableProcessor.getDataSource().getModelCapabilities().supportsSapDate());
	}
	let dpName = args.getStringByKey(oFF.VdProgram.ARG_DATA_PROVIDER_NAME);
	if (this.m_vdConfig.getVarProcessor() === null && oFF.XStringUtils.isNotNullAndNotEmpty(dpName))
	{
		let deadPool = this.getProcess().getDataProviderPool();
		let dataProvider = oFF.OlapDataProviderUtil.getOlapDataProvider(deadPool.getDataProviderByName(dpName));
		if (oFF.notNull(dataProvider))
		{
			this.m_vdConfig.setVarProcessor(dataProvider.getQueryManager());
		}
	}
};
oFF.VdProgram.prototype.setProgramExitDataCancel = function()
{
	let exitData = oFF.ProgramExitData.create();
	exitData.setExitCode(0);
	exitData.putBoolean(oFF.VdProgram.EXIT_DATA_WORKFLOW_DONE, false);
	exitData.putBoolean(oFF.VdProgram.EXIT_DATA_WORKFLOW_CANCEL, true);
	this.setExitData(exitData);
};
oFF.VdProgram.prototype.setProgramExitDataDone = function()
{
	let exitData = oFF.ProgramExitData.create();
	exitData.setExitCode(0);
	exitData.putBoolean(oFF.VdProgram.EXIT_DATA_WORKFLOW_DONE, true);
	exitData.putBoolean(oFF.VdProgram.EXIT_DATA_WORKFLOW_CANCEL, false);
	this.setExitData(exitData);
};
oFF.VdProgram.prototype.setupProgram = function()
{
	return null;
};

oFF.FilterDialogReferenceImpl = function() {};
oFF.FilterDialogReferenceImpl.prototype = new oFF.FilterDialog();
oFF.FilterDialogReferenceImpl.prototype._ff_c = "FilterDialogReferenceImpl";

oFF.FilterDialogReferenceImpl.CANCEL_BUTTON = "cancelButton";
oFF.FilterDialogReferenceImpl.OK_BUTTON = "okButton";
oFF.FilterDialogReferenceImpl.prototype.m_cancelBtn = null;
oFF.FilterDialogReferenceImpl.prototype.m_fdController = null;
oFF.FilterDialogReferenceImpl.prototype.m_okButton = null;
oFF.FilterDialogReferenceImpl.prototype.buildUi = function(genesis)
{
	genesis.newRoot(oFF.UiType.ACTIVITY_INDICATOR).useMaxSpace();
	this.m_fdController.onAfterOpen(null);
};
oFF.FilterDialogReferenceImpl.prototype.confirmDialog = function()
{
	if (oFF.notNull(this.m_fdController))
	{
		this.m_fdController.confirmSelection();
	}
};
oFF.FilterDialogReferenceImpl.prototype.getContainerCssClass = function()
{
	return "ffFilterDialog";
};
oFF.FilterDialogReferenceImpl.prototype.getContainerName = function()
{
	return "FilterDialog";
};
oFF.FilterDialogReferenceImpl.prototype.getDialogButtons = function(genesis)
{
	this.m_okButton = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_okButton.setName(oFF.FilterDialogReferenceImpl.OK_BUTTON);
	this.m_okButton.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_OK));
	this.m_okButton.setButtonType(oFF.UiButtonType.PRIMARY);
	this.m_okButton.setVisible(false);
	this.m_okButton.registerOnPress(this);
	this.m_cancelBtn = genesis.newControl(oFF.UiType.DIALOG_BUTTON);
	this.m_cancelBtn.setName(oFF.FilterDialogReferenceImpl.CANCEL_BUTTON);
	this.m_cancelBtn.setText(oFF.XLocalizationCenter.getCenter().getText(oFF.FilterDialogI18n.I18N_FD_CANCEL));
	this.m_cancelBtn.registerOnPress(this);
	let btnList = oFF.XList.create();
	btnList.add(this.m_cancelBtn);
	btnList.add(this.m_okButton);
	return btnList;
};
oFF.FilterDialogReferenceImpl.prototype.getFdConfig = function()
{
	return this.getConfig();
};
oFF.FilterDialogReferenceImpl.prototype.getModel = function()
{
	return oFF.notNull(this.m_fdController) ? this.m_fdController.getModel() : null;
};
oFF.FilterDialogReferenceImpl.prototype.getWidth = function()
{
	return this.getOffsetWidth();
};
oFF.FilterDialogReferenceImpl.prototype.isResizeAllowed = function()
{
	return oFF.FilterDialog.prototype.isResizeAllowed.call( this ) && !this.getUiManager().getDeviceInfo().isMobile();
};
oFF.FilterDialogReferenceImpl.prototype.onContainerResize = function(newWidth, newHeight)
{
	oFF.FilterDialog.prototype.onContainerResize.call( this , newWidth, newHeight);
	if (oFF.notNull(this.m_fdController))
	{
		let resizeEvent = oFF.UiResizeEvent.create(this.getGenesis().getRoot());
		resizeEvent.setResizeData(newWidth, newHeight);
		this.m_fdController.onResize(resizeEvent);
	}
};
oFF.FilterDialogReferenceImpl.prototype.onDialogStartupFinished = function()
{
	if (oFF.notNull(this.m_okButton))
	{
		this.m_okButton.setVisible(true);
	}
	oFF.OuFilterDialogPerformance.mark(oFF.OuFilterDialogPerformance.MARK_DIALOG_STARTUP_END, "End of the dialog startup");
	oFF.OuFilterDialogPerformance.measure(oFF.OuFilterDialogPerformance.MEASURE_DIALOG_STARTUP, oFF.OuFilterDialogPerformance.MARK_DIALOG_STARTUP_START, oFF.OuFilterDialogPerformance.MARK_DIALOG_STARTUP_END, "Total dialog startup time");
};
oFF.FilterDialogReferenceImpl.prototype.onPress = function(event)
{
	let controlName = event.getControl().getName();
	switch (controlName)
	{
		case oFF.FilterDialogReferenceImpl.OK_BUTTON:
			if (oFF.isNull(this.m_fdController) || this.m_fdController.confirmSelection())
			{
				this.exitNow(0);
			}
			else
			{
				this.shake();
			}
			break;

		case oFF.FilterDialogReferenceImpl.CANCEL_BUTTON:
			if (oFF.notNull(this.m_fdController))
			{
				this.m_fdController.cancelSelection();
			}
			this.exitNow(0);
			break;

		default:
	}
};
oFF.FilterDialogReferenceImpl.prototype.onViewCreated = function(initialFocusControl)
{
	if (oFF.notNull(initialFocusControl))
	{
		this.setInitialControlToFocus(initialFocusControl);
		initialFocusControl.focus();
	}
};
oFF.FilterDialogReferenceImpl.prototype.releaseObject = function()
{
	oFF.FilterDialog.prototype.releaseObject.call( this );
	this.m_fdController = oFF.XObjectExt.release(this.m_fdController);
	this.m_okButton = oFF.XObjectExt.release(this.m_okButton);
	this.m_cancelBtn = oFF.XObjectExt.release(this.m_cancelBtn);
};
oFF.FilterDialogReferenceImpl.prototype.setupProgram = function()
{
	oFF.OuFilterDialogPerformance.mark(oFF.OuFilterDialogPerformance.MARK_DIALOG_STARTUP_START, "Start of the dialog startup");
	this.setTitle(this.getConfig().getTitle());
	this.m_fdController = oFF.FdController.create(this);
	return oFF.FilterDialog.prototype.setupProgram.call( this );
};
oFF.FilterDialogReferenceImpl.prototype.terminate = function()
{
	if (oFF.notNull(this.m_fdController))
	{
		this.m_fdController.cancelSelection();
	}
	oFF.FilterDialog.prototype.terminate.call( this );
};

oFF.FilterDialogDimensionReferenceImpl = function() {};
oFF.FilterDialogDimensionReferenceImpl.prototype = new oFF.FilterDialogReferenceImpl();
oFF.FilterDialogDimensionReferenceImpl.prototype._ff_c = "FilterDialogDimensionReferenceImpl";

oFF.FilterDialogDimensionReferenceImpl.prototype.m_originCloseListener = null;
oFF.FilterDialogDimensionReferenceImpl.prototype.m_unsupportedFilterDeleted = false;
oFF.FilterDialogDimensionReferenceImpl.prototype.getContentType = function()
{
	return oFF.FilterDialogContentType.DIMENSION;
};
oFF.FilterDialogDimensionReferenceImpl.prototype.getDimensionFilter = function()
{
	let config = this.getDimensionConfig();
	let dimension = config.getDimension();
	if (config.isOpenWithDynamicFilter())
	{
		return dimension.getFilter();
	}
	if (config.isOpenWithLayeredFilter() && oFF.XStringUtils.isNotNullAndNotEmpty(config.getLayeredFilterName()))
	{
		let layeredFilter = dimension.getQueryModel().getFilter().getLinkedFilter(config.getLayeredFilterName());
		return oFF.notNull(layeredFilter) ? layeredFilter.getCartesianList(dimension) : null;
	}
	return null;
};
oFF.FilterDialogDimensionReferenceImpl.prototype.getProgramName = function()
{
	return oFF.FilterDialog.DEFAULT_PROGRAM_NAME_DIMENSION;
};
oFF.FilterDialogDimensionReferenceImpl.prototype.getUnsupportedFilterPopup = function()
{
	let dimensionFilter = this.getDimensionFilter();
	if (oFF.notNull(dimensionFilter) && oFF.XCollectionUtils.hasElements(this.getDimensionConfig().getDefaultSelection()))
	{
		let dimension = this.getDimensionConfig().getDimension();
		let filterField = dimensionFilter.getField();
		if (dimension.isCompound() && oFF.notNull(filterField) && (filterField === dimension.getFieldByPresentationType(oFF.PresentationType.KEY_NOT_COMPOUND) || filterField === dimension.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND)))
		{
			return oFF.FdUnsupportedFilterPopup.createNonCompoundPopup(this.getGenesis());
		}
		if ((oFF.notNull(filterField) && filterField.getValueType().isDateBased() || oFF.HierarchyLevelType.getHighestDateRangeGranularity(dimension) !== null) && (dimension.getFiscalEnabled() || dimension.isUserManaged() || dimension.isTimeConfigEnablePattern()) && oFF.XCollectionUtils.contains(this.getDimensionConfig().getDefaultSelection(), (value) => {
			return value.getType() === oFF.FilterDialogValueType.RANGE || value.getType() === oFF.FilterDialogValueType.DATE_RANGE_FIXED || value.getType() === oFF.FilterDialogValueType.DATE_RANGE_DYNAMIC;
		}))
		{
			return oFF.FdUnsupportedFilterPopup.createFiscalDateRangePopup(this.getGenesis());
		}
	}
	return null;
};
oFF.FilterDialogDimensionReferenceImpl.prototype.newProgram = function()
{
	let filterDialog = new oFF.FilterDialogDimensionReferenceImpl();
	filterDialog.setup();
	return filterDialog;
};
oFF.FilterDialogDimensionReferenceImpl.prototype.onFilterDialogCancel = function()
{
	if (oFF.notNull(this.m_originCloseListener))
	{
		if (this.m_unsupportedFilterDeleted)
		{
			this.m_originCloseListener.onFilterDialogOk(oFF.XList.create(), null);
		}
		else
		{
			this.m_originCloseListener.onFilterDialogCancel();
		}
	}
};
oFF.FilterDialogDimensionReferenceImpl.prototype.onFilterDialogOk = function(selection, settings)
{
	this.updateFilter(selection);
	if (oFF.notNull(this.m_originCloseListener))
	{
		this.m_originCloseListener.onFilterDialogOk(selection, settings);
	}
};
oFF.FilterDialogDimensionReferenceImpl.prototype.releaseObject = function()
{
	oFF.FilterDialogReferenceImpl.prototype.releaseObject.call( this );
	this.m_originCloseListener = null;
};
oFF.FilterDialogDimensionReferenceImpl.prototype.setupProgram = function()
{
	let config = this.getDimensionConfig();
	if (config.isOpenWithDynamicFilter() || oFF.XStringUtils.isNotNullAndNotEmpty(config.getLayeredFilterName()))
	{
		this.m_originCloseListener = config.getCloseListener();
		config.registerOnClose(this);
	}
	let popup = this.getUnsupportedFilterPopup();
	if (oFF.notNull(popup))
	{
		config.getDefaultSelection().clear();
		oFF.FilterDialogReferenceImpl.prototype.setupProgram.call( this );
		let promise = oFF.XPromise.create((resolve, reject) => {
			popup.setConfirmProcedure(() => {
				this.updateFilter(null);
				this.m_unsupportedFilterDeleted = true;
				resolve(oFF.XBooleanValue.create(true));
			});
			popup.setCancelProcedure(() => {
				if (config.getCloseListener() !== null)
				{
					config.getCloseListener().onFilterDialogCancel();
				}
				reject(oFF.XError.create("Unsupported Filter"));
			});
			popup.open();
		});
		promise = promise.onCatch((error) => {
			this.exitNow(0);
		});
		return promise;
	}
	return oFF.FilterDialogReferenceImpl.prototype.setupProgram.call( this );
};
oFF.FilterDialogDimensionReferenceImpl.prototype.updateFilter = function(selection)
{
	let config = this.getDimensionConfig();
	if (config.isOpenWithDynamicFilter())
	{
		oFF.FilterDialogValueUtils.updateDynamicFilter(config.getDimension(), selection);
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(config.getLayeredFilterName()))
	{
		oFF.FilterDialogValueUtils.updateLayeredFilter(config.getDimension(), config.getLayeredFilterName(), selection);
	}
};

oFF.FilterDialogHierarchyCatalogReferenceImpl = function() {};
oFF.FilterDialogHierarchyCatalogReferenceImpl.prototype = new oFF.FilterDialogReferenceImpl();
oFF.FilterDialogHierarchyCatalogReferenceImpl.prototype._ff_c = "FilterDialogHierarchyCatalogReferenceImpl";

oFF.FilterDialogHierarchyCatalogReferenceImpl.prototype.getContentType = function()
{
	return oFF.FilterDialogContentType.HIERARCHY_CATALOG;
};
oFF.FilterDialogHierarchyCatalogReferenceImpl.prototype.getProgramName = function()
{
	return oFF.FilterDialog.DEFAULT_PROGRAM_NAME_HIERARCHY_CATALOG;
};
oFF.FilterDialogHierarchyCatalogReferenceImpl.prototype.newProgram = function()
{
	let filterDialog = new oFF.FilterDialogHierarchyCatalogReferenceImpl();
	filterDialog.setup();
	return filterDialog;
};

oFF.FilterDialogMeasureBasedFilterReferenceImpl = function() {};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype = new oFF.FilterDialogReferenceImpl();
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype._ff_c = "FilterDialogMeasureBasedFilterReferenceImpl";

oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.m_originCloseListener = null;
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.getContentType = function()
{
	return oFF.FilterDialogContentType.MEASURE_BASED_FILTER;
};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.getProgramName = function()
{
	return oFF.FilterDialog.DEFAULT_PROGRAM_NAME_MEASURE_BASED_FILTER;
};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.newProgram = function()
{
	let filterDialog = new oFF.FilterDialogMeasureBasedFilterReferenceImpl();
	filterDialog.setup();
	return filterDialog;
};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.onFilterDialogCancel = function()
{
	if (oFF.notNull(this.m_originCloseListener))
	{
		this.m_originCloseListener.onFilterDialogCancel();
	}
};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.onFilterDialogOk = function(selection, settings)
{
	let model = this.getModel();
	if (oFF.notNull(model))
	{
		let rangeModel = model.getRangeModel();
		let dimContext = rangeModel.getRequiredDimContextNames().createListCopy();
		dimContext.addAll(rangeModel.getDimContext());
		let config = this.getMeasureBasedFilterConfig();
		oFF.FilterDialogValueUtils.updateMeasureBasedFilter(config.getMeasureBasedFilter(), config.getLayeredFilterName(), config.getMeasureBasedFilterMember(), dimContext, rangeModel.getMeasureContext(), selection);
	}
	if (oFF.notNull(this.m_originCloseListener))
	{
		this.m_originCloseListener.onFilterDialogOk(selection, settings);
	}
};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.releaseObject = function()
{
	oFF.FilterDialogReferenceImpl.prototype.releaseObject.call( this );
	this.m_originCloseListener = null;
};
oFF.FilterDialogMeasureBasedFilterReferenceImpl.prototype.setupProgram = function()
{
	let config = this.getMeasureBasedFilterConfig();
	let measureBasedFilter = config.getMeasureBasedFilter();
	let queryModel = measureBasedFilter.getQueryModel();
	if (measureBasedFilter.getFormula() === null && oFF.notNull(queryModel))
	{
		let memberName = config.getMeasureBasedFilterMember();
		let member = queryModel.getMeasureDimension().getDimensionMember(memberName);
		if (oFF.isNull(member) && queryModel.getAccountDimension() !== null && queryModel.getAccountDimension().containsStructureMember(memberName))
		{
			member = queryModel.getAccountDimension().getDimensionMember(memberName);
		}
		if (oFF.notNull(member) && !oFF.FilterDialogViewType.MEASURE_BASED_FILTER.isSupportedByMember(member))
		{
			return oFF.XPromise.reject(oFF.XError.create("Unsupported member"));
		}
	}
	this.m_originCloseListener = config.getCloseListener();
	config.registerOnClose(this);
	return oFF.FilterDialogReferenceImpl.prototype.setupProgram.call( this );
};

oFF.FilterDialogUserTeamReferenceImpl = function() {};
oFF.FilterDialogUserTeamReferenceImpl.prototype = new oFF.FilterDialogReferenceImpl();
oFF.FilterDialogUserTeamReferenceImpl.prototype._ff_c = "FilterDialogUserTeamReferenceImpl";

oFF.FilterDialogUserTeamReferenceImpl.prototype.getContentType = function()
{
	return oFF.FilterDialogContentType.USER_TEAM;
};
oFF.FilterDialogUserTeamReferenceImpl.prototype.getProgramName = function()
{
	return oFF.FilterDialog.DEFAULT_PROGRAM_NAME_USER_TEAM;
};
oFF.FilterDialogUserTeamReferenceImpl.prototype.newProgram = function()
{
	let filterDialog = new oFF.FilterDialogUserTeamReferenceImpl();
	filterDialog.setup();
	return filterDialog;
};

oFF.FilterDialogVariableReferenceImpl = function() {};
oFF.FilterDialogVariableReferenceImpl.prototype = new oFF.FilterDialogReferenceImpl();
oFF.FilterDialogVariableReferenceImpl.prototype._ff_c = "FilterDialogVariableReferenceImpl";

oFF.FilterDialogVariableReferenceImpl.prototype.m_originCloseListener = null;
oFF.FilterDialogVariableReferenceImpl.prototype.getContentType = function()
{
	return oFF.FilterDialogContentType.VARIABLE;
};
oFF.FilterDialogVariableReferenceImpl.prototype.getProgramName = function()
{
	return oFF.FilterDialog.DEFAULT_PROGRAM_NAME_VARIABLE;
};
oFF.FilterDialogVariableReferenceImpl.prototype.newProgram = function()
{
	let filterDialog = new oFF.FilterDialogVariableReferenceImpl();
	filterDialog.setup();
	return filterDialog;
};
oFF.FilterDialogVariableReferenceImpl.prototype.onFilterDialogCancel = function()
{
	if (oFF.notNull(this.m_originCloseListener))
	{
		this.m_originCloseListener.onFilterDialogCancel();
	}
};
oFF.FilterDialogVariableReferenceImpl.prototype.onFilterDialogOk = function(selection, settings)
{
	let config = this.getVariableConfig();
	if (config.isOpenWithVariableFilter())
	{
		oFF.FilterDialogValueUtils.updateVariableFilter(config.getVariable(), selection);
	}
	if (oFF.notNull(this.m_originCloseListener))
	{
		this.m_originCloseListener.onFilterDialogOk(selection, settings);
	}
};
oFF.FilterDialogVariableReferenceImpl.prototype.releaseObject = function()
{
	oFF.FilterDialogReferenceImpl.prototype.releaseObject.call( this );
	this.m_originCloseListener = null;
};
oFF.FilterDialogVariableReferenceImpl.prototype.setupProgram = function()
{
	let config = this.getVariableConfig();
	if (config.isOpenWithVariableFilter())
	{
		this.m_originCloseListener = config.getCloseListener();
		config.registerOnClose(this);
	}
	return oFF.FilterDialogReferenceImpl.prototype.setupProgram.call( this );
};

oFF.OlapDialogsModule = function() {};
oFF.OlapDialogsModule.prototype = new oFF.DfModule();
oFF.OlapDialogsModule.prototype._ff_c = "OlapDialogsModule";

oFF.OlapDialogsModule.s_module = null;
oFF.OlapDialogsModule.getInstance = function()
{
	if (oFF.isNull(oFF.OlapDialogsModule.s_module))
	{
		oFF.OlapDialogsModule.s_module = oFF.DfModule.startExt(new oFF.OlapDialogsModule());
		oFF.VdComparisonOperator.staticSetup();
		oFF.FdReadMode.staticFdReadModeSetup();
		oFF.FdLayoutSize.staticSetup();
		oFF.FdTableType.staticSetup();
		oFF.FdFeature.staticSetup();
		oFF.FilterDialogValueFactory.setInstance(oFF.FdItemFactory.create());
		oFF.FdComparisonOperator.staticSetup();
		oFF.VdValueFormat.staticSetup();
		oFF.VdControllerState.staticSetup();
		oFF.OuQueryController.staticSetup();
		oFF.OuQueryControllerStatus.staticSetup();
		oFF.OuQueryControllerSetupStep.staticSetup();
		oFF.OuQueryControllerCriticalErrorType.staticSetup();
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuDimensionDialog2());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuCurrencyConversionDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuQueryInformationDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuSelectHierarchyDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuSelectHierarchyListDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuTopNDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.FilterDialogDimensionReferenceImpl());
		oFF.ProgramRegistry.setProgramFactory(new oFF.FilterDialogVariableReferenceImpl());
		oFF.ProgramRegistry.setProgramFactory(new oFF.FilterDialogHierarchyCatalogReferenceImpl());
		oFF.ProgramRegistry.setProgramFactory(new oFF.FilterDialogMeasureBasedFilterReferenceImpl());
		oFF.ProgramRegistry.setProgramFactory(new oFF.FilterDialogUserTeamReferenceImpl());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuCalcCalculationsDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuDataProviderCreator());
		oFF.ProgramRegistry.setProgramFactory(new oFF.AuDatasourcePicker());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuMeasureDimensionConfigDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuShareDialog());
		oFF.ProgramRegistry.setProgramFactory(new oFF.VdProgram());
		oFF.ProgramRegistry.setProgramFactory(new oFF.OuInventoryProgram());
		oFF.OuVariableDialogI18nLegacy.staticSetup();
		oFF.OuCurrencyConversionDialogI18n.staticSetup();
		oFF.OuQueryInformationDialogI18n.staticSetup();
		oFF.OuDimensionDialog2I18n.staticSetup();
		oFF.OuHierarchyDialogI18n.staticSetup();
		oFF.OuTopNDialogI18n.staticSetup();
		oFF.FilterDialogI18n.staticSetup();
		oFF.ClipboardDialogI18n.staticSetup();
		oFF.LayoutDialogI18n.staticSetup();
		oFF.DataCellDialogI18n.staticSetupDcd();
		oFF.OuCalcCalculationsDialogI18n.staticSetup();
		oFF.OuDataProviderCreatorI18n.staticSetup();
		oFF.AuDatasourcePickerI18n.staticSetup();
		oFF.OuMeasureDimensionConfigDialogI18n.staticSetup();
		oFF.OuShareDialogI18n.staticSetup();
		oFF.DfModule.checkInitialized(oFF.ContextMenuEngineModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.HorizonUiApiModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.OlapUiModule.getInstance());
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalcCodeEditorPlugin));
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalcAssistancePluginV2));
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalcFormulaElementListPlugin));
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalcDetailsAreaPlugin));
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalculationPlugin));
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalcCodeEditorValueRetriever));
		oFF.HuPluginRegistry.registerPluginByClass(oFF.XClass.create(oFF.OuCalcDetailsAreaValueRetriever));
		oFF.OlapDataProviderActionCollectionRegistry.registerCollectionByClass(oFF.XClass.create(oFF.OuDataProviderOlapUiActionsCollection));
		oFF.OlapDataProviderActionRegistry.registerActionByClass(oFF.XClass.create(oFF.OuDataProviderVariableDialogAction));
		oFF.DfModule.stopExt(oFF.OlapDialogsModule.s_module);
	}
	return oFF.OlapDialogsModule.s_module;
};
oFF.OlapDialogsModule.prototype.getName = function()
{
	return "ff8030.olap.dialogs";
};

oFF.OlapDialogsModule.getInstance();

return oFF;
} );