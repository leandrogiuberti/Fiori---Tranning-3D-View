{"version":3,"file":"SituationPanel.js","names":["sap","ui","define","Localization","GenericTile","Text","TileContent","sap_m_library","Component","S4MyHome","__ToDoPanel","___utils_SituationUtils","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","LoadState","URLHelper","ValueColor","ToDoPanel","executeNavigation","fetchNavigationTargetData","getSituationMessage","SituationPanel","extend","constructor","_constructor","id","settings","ToDoPanel.prototype.constructor.call","this","init","_init","ToDoPanel.prototype.init.call","setProperty","_i18nBundle","getText","generateRequestUrls","_generateRequestUrls","cardCount","language","getSAPLogonLanguage","getCountUrl","getDataUrl","generateCardTemplate","_generateCardTemplate","context","mode","frameType","pressEnabled","header","getProperty","headerImage","valueColor","Critical","state","press","event","_onPressSituation","tileContent","content","text","footer","formatDate","_this","control","getSource","getBindingContext","loadState","SitnInstceKey","SitnEngineType","getObject","url","getTargetAppUrl","_temp3","Loading","_temp2","_temp","Promise","resolve","_fetchNavigationTarge","navigationTargetData","getOwnerComponentFor","getParent","error","_sErrorCode","redirect","reject","getNoDataText","_getNoDataText"],"sources":["SituationPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Localization from \"sap/base/i18n/Localization\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport Text from \"sap/m/Text\";\nimport TileContent from \"sap/m/TileContent\";\nimport { LoadState, URLHelper, ValueColor } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Component from \"sap/ui/core/Component\";\nimport Control from \"sap/ui/core/Control\";\nimport Context from \"sap/ui/model/Context\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport type { $ToDoPanelSettings } from \"./ToDoPanel\";\nimport ToDoPanel from \"./ToDoPanel\";\nimport ToDosContainer from \"./ToDosContainer\";\nimport {\n\texecuteNavigation,\n\tfetchNavigationTargetData,\n\tgetSituationMessage,\n\tInstanceAttribute,\n\tNavigationData\n} from \"./utils/SituationUtils\";\n\ninterface Situation {\n\tSitnInstceKey: string;\n\tSitnInstceCreatedAtDateTime: string;\n\tSitnEngineType: string;\n\t_InstanceAttribute: InstanceAttribute[];\n\t_InstanceText: InstanceText;\n\tloadState?: LoadState;\n}\n\ninterface InstanceText {\n\tSituationTitle: string;\n\tSituationText: string;\n}\n\ninterface NavigationHelperError {\n\t_sErrorCode: string;\n}\n\n/**\n *\n * Panel class for managing and storing Situation cards.\n *\n * @extends ToDoPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.SituationPanel\n */\nexport default class SituationPanel extends ToDoPanel {\n\t/**\n\t * Constructor for a new Situation Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $ToDoPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\n\t\t//Configure Header\n\t\tthis.setProperty(\"key\", \"situations\");\n\t\tthis.setProperty(\"title\", this._i18nBundle.getText(\"situationsTabTitle\"));\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t * Overridden method to provide situation-specific URLs.\n\t *\n\t * @private\n\t * @override\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst language = Localization.getSAPLogonLanguage() || \"\";\n\t\treturn [\n\t\t\tthis.getCountUrl(),\n\t\t\t`${this.getDataUrl()}&$expand=_InstanceAttribute($expand=_InstanceAttributeValue($filter=(Language eq '${language}' or Language eq ''))),_InstanceText($filter=(Language eq '${language}' or Language eq ''))&$skip=0&$top=${cardCount}`\n\t\t];\n\t}\n\n\t/**\n\t * Generates a card template for situations.\n\t * Overridden method from To-Do panel to generate situation-specific card template.\n\t *\n\t * @private\n\t * @override\n\t * @param {string} id The ID for the template card.\n\t * @param {Context} context The context object.\n\t * @returns {Control} The generated card control template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\treturn new GenericTile(`${id}-actionTile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\theader: getSituationMessage(\n\t\t\t\tcontext.getProperty(\"_InstanceText/0/SituationTitle\") as string,\n\t\t\t\tcontext.getProperty(\"_InstanceAttribute\") as InstanceAttribute[]\n\t\t\t),\n\t\t\theaderImage: \"sap-icon://alert\",\n\t\t\tvalueColor: ValueColor.Critical,\n\t\t\tstate: context.getProperty(\"loadState\") as LoadState,\n\t\t\tpress: (event: Event) => {\n\t\t\t\tvoid this._onPressSituation(event);\n\t\t\t},\n\t\t\ttileContent: [\n\t\t\t\tnew TileContent(`${id}-actionTileContent`, {\n\t\t\t\t\tcontent: new Text(`${id}-text`, {\n\t\t\t\t\t\ttext: getSituationMessage(\n\t\t\t\t\t\t\tcontext.getProperty(\"_InstanceText/0/SituationText\") as string,\n\t\t\t\t\t\t\tcontext.getProperty(\"_InstanceAttribute\") as InstanceAttribute[]\n\t\t\t\t\t\t)\n\t\t\t\t\t}),\n\t\t\t\t\tfooter: S4MyHome.formatDate(context.getProperty(\"SitnInstceCreatedAtDateTime\") as string)\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Handle the press event for a situation.\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t */\n\tprivate async _onPressSituation(event: Event): Promise<void> {\n\t\tconst control = event.getSource<GenericTile>();\n\t\tconst context = control.getBindingContext();\n\t\tconst { loadState, SitnInstceKey: id, SitnEngineType } = context?.getObject() as Situation;\n\t\tconst url = this.getTargetAppUrl();\n\n\t\tif (loadState !== LoadState.Loading && url) {\n\t\t\tif (id) {\n\t\t\t\ttry {\n\t\t\t\t\tconst navigationTargetData = (await fetchNavigationTargetData(id, SitnEngineType)) as NavigationData;\n\t\t\t\t\tawait executeNavigation(\n\t\t\t\t\t\tnavigationTargetData,\n\t\t\t\t\t\tComponent.getOwnerComponentFor(this.getParent() as ToDosContainer) as Component\n\t\t\t\t\t);\n\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terror &&\n\t\t\t\t\t\tSitnEngineType === \"1\" &&\n\t\t\t\t\t\t(error as NavigationHelperError)._sErrorCode === \"NavigationHandler.isIntentSupported.notSupported\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Navigate to the situations app\n\t\t\t\t\t\tURLHelper.redirect(this.getTargetAppUrl(), false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tURLHelper.redirect(url, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @private\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noSituationTitle\") as string;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}