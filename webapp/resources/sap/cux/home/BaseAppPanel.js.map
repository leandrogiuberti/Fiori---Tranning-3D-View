{"version":3,"file":"BaseAppPanel.js","names":["sap","ui","define","Log","GridContainer","GridContainerSettings","HeaderContainer","IllustratedMessage","IllustratedMessageSize","MessageToast","VBox","sap_m_library","Config","Container","__App","__BasePanel","__Group","__AppManager","___utils_DataFormatUtils","___utils_Device","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BackgroundDesign","_finallyRethrows","finalizer","bind","App","BasePanel","Group","AppManager","getLeanURL","recycleId","DeviceType","BaseAppPanel","extend","metadata","library","defaultAggregation","aggregations","content","multiple","singularName","visibility","apps","type","events","persistDialog","supported","parameters","isSupported","properties","tileWidth","group","defaultValue","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","this","_isDirty","_isMobileDirty","_isLoaded","_isSupported","_setAggregation","control","items","aggregationName","forEach","oItem","addAggregation","init","_init","BasePanel.prototype.init.call","appManagerInstance","getInstance","_controlMap","Map","_appsPanelWrapper","_generateWrapper","addContent","getId","_generateDesktopAppsWrapper","_generateMobileAppsWrapper","_generateErrorMessage","width","addStyleClass","controlId","get","set","_generateAppsWrapper","visible","getDeviceType","Mobile","backgroundDesign","Solid","_appsWrapper","layout","columnSize","getProperty","rowSize","gap","_mobileAppsWrapper","gridLayout","showDividers","height","_errorCard","wrap","generateIllustratedMessage","getApps","length","justifyContent","generateApps","_generateApps","visualizationsData","map","visualizationData","index","groupId","persConfig","sectionId","defaultSection","isDefaultSection","getKey","app","title","subTitle","subtitle","bgColor","BGColor","key","icon","url","vizId","visualization","status","oldAppId","data","menuItems","menuItem","setApps","_setApps","fetchTileVisualization","_fetchTileVisualization","tiles","cards","getContent","card","concat","getItems","convertActivitiesToVisualizations","_convertActivitiesToVisualizations","activities","_this","Promise","resolve","all","_getAllAvailableVisualizations","getServiceAsync","availableVisualizations","URLParsingService","appActivities","filter","activity","appType","orgAppId","appId","visualizations","_convertToVisualization","undefined","_updateVisualizationAvailability","reject","_this2","_temp2","_allAvailableVisualizations","_temp","_getCatalogApps","catalogApps","reduce","catalogApp","_this3","fetchFavVizs","favoriteVisualizations","addedInFavorites","some","favoriteVisualization","_updateActivityInfo","updatedVizConfig","_catalogVisualizationCache","targetURL","prepareAppsBeforeLoad","_prepareAppsBeforeLoad","_findBestMatchingVisualization","matchingVisualizations","matchedVisualization","find","matchingViz","matchedVisualizationCache","matchedVisualizations","viz","params","parseShellHash","prio","push","filteredVisualizations","_filterMatchingVisualization","sort","val1","val2","parshedShellHash","activityParameters","activityParameterKeys","Object","keys","visualizationParams","visualizationParamKeys","bMatch","every","includes","catalogVisualizations","catalogVisualization","target","semanticObject","action","_addAppToFavorites","event","_this4","setBusy","source","getSource","getParent","getVizId","_temp3","addVisualization","_refreshAllPanels","message","_i18nBundle","getText","getTitle","show","error","_wasThrown","_result","isLoaded","setLoaded","_setLoaded","val","isDirty","setDesktopViewDirty","_setDesktopViewDirty","isMobileDirty","setMobileViewDirty","_setMobileViewDirty","_setBusy","isBusy","oAppsWrapper","_getGroup","groups","getAggregation","getGroupId","setSupported","_setSupported","_attachUserActivityTracking","last","on","do","isTrackingActivityEnabled","fireSupported","refresh","_refresh","_this5","refreshPanel","_generateIllustratedMessage","_errorMessage","illustrationSize","Base","description","_applyUngroupedTileColor","item","color","updatedTileIndex","findIndex","tile","getUrl","setBackgroundColor","exit","_exit","destroy"],"sources":["BaseAppPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageSize from \"sap/m/IllustratedMessageSize\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Config from \"sap/ushell/Config\";\nimport Container from \"sap/ushell/Container\";\nimport URLParsing from \"sap/ushell/services/URLParsing\";\nimport App from \"./App\";\nimport AppsContainer from \"./AppsContainer\";\nimport { $BaseAppPanelSettings } from \"./BaseAppPanel\";\nimport BasePanel from \"./BasePanel\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport { IActivity, ICustomVisualization, IVisualization } from \"./interface/AppsInterface\";\nimport AppManager from \"./utils/AppManager\";\nimport { getLeanURL, recycleId } from \"./utils/DataFormatUtils\";\nimport { DeviceType } from \"./utils/Device\";\n\n/**\n *\n * Base App Panel class for managing and storing Apps.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @abstract\n * @private\n *\n * @alias sap.cux.home.BaseAppPanel\n */\n\nexport default abstract class BaseAppPanel extends BasePanel {\n\tprivate _isDirty: boolean = true;\n\tprivate _isMobileDirty: boolean = true;\n\tprivate _isLoaded: boolean = false;\n\tprivate _appsWrapper!: GridContainer;\n\tprivate _errorCard!: VBox;\n\tprivate _errorMessage!: IllustratedMessage;\n\tprivate _appsPanelWrapper!: VBox;\n\tprivate _allAvailableVisualizations!: IVisualization[];\n\tprivate _catalogVisualizationCache!: Map<string, IVisualization>;\n\tprotected appManagerInstance!: AppManager;\n\tprivate _isSupported: boolean = true;\n\tprivate _mobileAppsWrapper!: HeaderContainer;\n\tprotected _menuItems!: MenuItem[];\n\tprotected _actionButtons!: Button[];\n\tprotected _controlMap!: Map<string, Control | UI5Element>;\n\n\tconstructor(idOrSettings?: string | $BaseAppPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tdefaultAggregation: \"apps\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Specifies the content aggregation of the panel.\n\t\t\t */\n\t\t\tcontent: { multiple: true, singularName: \"content\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Holds the apps aggregation\n\t\t\t */\n\t\t\tapps: { type: \"sap.cux.home.App\", singularName: \"app\", multiple: true }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Fired when OnBeforeRendering of container is triggered.\n\t\t\t */\n\t\t\tpersistDialog: {},\n\t\t\t/**\n\t\t\t * Fired when the panel supported property is changed.\n\t\t\t */\n\t\t\tsupported: {\n\t\t\t\tparameters: {\n\t\t\t\t\tisSupported: { type: \"boolean\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies the width of the tile in pixels.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\ttileWidth: { type: \"float\", group: \"Misc\", defaultValue: 304, visibility: \"hidden\" }\n\t\t}\n\t};\n\n\t/**\n\t * This method must be implemented by panel, to set the apps that needs to be shown in the panel.\n\t * @abstract\n\t */\n\tabstract loadApps(): Promise<void>;\n\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t\tthis._controlMap = new Map();\n\t\t//Add Wrapper to Panel\n\t\tthis._appsPanelWrapper = this._generateWrapper();\n\t\tthis.addContent(this._appsPanelWrapper);\n\t}\n\n\t/**\n\t * Generates the wrapper for the apps panel, if it doesn't already exist\n\t *\n\t * @private\n\t * @override\n\t * @returns {sap.m.VBox} The apps panel wrapper.\n\t */\n\tprotected _generateWrapper() {\n\t\tif (!this._appsPanelWrapper) {\n\t\t\tthis._appsPanelWrapper = new VBox(`${this.getId()}-appsPanelWrapper`, {\n\t\t\t\titems: [this._generateDesktopAppsWrapper(), this._generateMobileAppsWrapper(), this._generateErrorMessage()],\n\t\t\t\twidth: \"100%\"\n\t\t\t}).addStyleClass(\"sapCuxAppsPanel sapCuxAppsPanelWrapper\");\n\t\t}\n\t\treturn this._appsPanelWrapper;\n\t}\n\n\t/**\n\t * Generates desktop apps wrapper for displaying apps.\n\t * @private\n\t * @returns {sap.m.VBox} The generated apps wrapper.\n\t */\n\tpublic _generateDesktopAppsWrapper() {\n\t\tconst controlId = `${this.getId()}-desktopAppsWrapper`;\n\t\tif (!this._controlMap.get(controlId)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tcontrolId,\n\t\t\t\tnew VBox({\n\t\t\t\t\tid: `${this.getId()}-desktopAppsWrapper`,\n\t\t\t\t\titems: [this._generateAppsWrapper()],\n\t\t\t\t\tvisible: this.getDeviceType() !== DeviceType.Mobile,\n\t\t\t\t\tbackgroundDesign: BackgroundDesign.Solid\n\t\t\t\t}).addStyleClass(\"sapCuxAppsPanel sapCuxAppsContainerBorder\")\n\t\t\t);\n\t\t}\n\t\treturn this._controlMap.get(controlId) as VBox;\n\t}\n\n\t/**\n\t * Generates app wrapper (GridContainer) for displaying apps.\n\t * @private\n\t * @returns {sap.m.GridContainer} The generated apps wrapper.\n\t */\n\tpublic _generateAppsWrapper(): GridContainer {\n\t\t//create container\n\t\tif (!this._appsWrapper) {\n\t\t\tthis._appsWrapper = new GridContainer({\n\t\t\t\tid: `${this.getId()}-appsWrapper`,\n\t\t\t\tlayout: new GridContainerSettings(`${this.getId()}-appsWrapperLayout`, {\n\t\t\t\t\tcolumnSize: `${this.getProperty(\"tileWidth\") / 16}rem`,\n\t\t\t\t\trowSize: \"4.375rem\",\n\t\t\t\t\tgap: \"0.5rem\"\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\treturn this._appsWrapper;\n\t}\n\n\t/**\n\t * Generates wrapper for displaying apps in mobile mode.\n\t * @private\n\t * @returns {sap.m.HeaderContainer} The generated apps wrapper.\n\t */\n\tpublic _generateMobileAppsWrapper() {\n\t\tif (!this._mobileAppsWrapper) {\n\t\t\tthis._mobileAppsWrapper = new HeaderContainer({\n\t\t\t\tid: `${this.getId()}-mobileAppsWrapper`,\n\t\t\t\tgridLayout: true,\n\t\t\t\tshowDividers: false,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\tcontent: [],\n\t\t\t\tvisible: this.getDeviceType() === DeviceType.Mobile\n\t\t\t}).addStyleClass(\"sapUiMargin-26Bottom\");\n\t\t}\n\t\treturn this._mobileAppsWrapper;\n\t}\n\n\t/**\n\t * Generates the error message wrapper with illustrated message.\n\t * @private\n\t * @returns {sap.m.VBox} Wrapper with illustrated message.\n\t */\n\tpublic _generateErrorMessage(): VBox {\n\t\tif (!this._errorCard) {\n\t\t\tthis._errorCard = new VBox(`${this.getId()}-errorCard`, {\n\t\t\t\twrap: \"Wrap\",\n\t\t\t\tbackgroundDesign: \"Solid\",\n\t\t\t\titems: [this.generateIllustratedMessage()],\n\t\t\t\tvisible: this.getApps().length === 0,\n\t\t\t\tjustifyContent: \"Center\"\n\t\t\t}).addStyleClass(\"sapCuxAppsPanel\");\n\t\t}\n\t\treturn this._errorCard;\n\t}\n\n\t/**\n\t * Creates and returns app instances for given app objects\n\t * @private\n\t * @param {object[]} appObjects - Array of app object.\n\t * @returns {sap.cux.home.App[]} - Array of app instances\n\t */\n\tpublic generateApps(visualizationsData: ICustomVisualization[]) {\n\t\treturn visualizationsData.map((visualizationData, index) => {\n\t\t\tconst groupId = visualizationData.persConfig?.sectionId;\n\t\t\tconst defaultSection = visualizationData.persConfig?.isDefaultSection;\n\t\t\tconst id =\n\t\t\t\tgroupId && !defaultSection ? recycleId(`${this.getKey()}-groupApp-${index}`) : recycleId(`${this.getKey()}-app-${index}`);\n\t\t\tconst app = new App(id, {\n\t\t\t\ttitle: visualizationData.title,\n\t\t\t\tsubTitle: visualizationData.subtitle,\n\t\t\t\tbgColor: typeof visualizationData.BGColor === \"object\" ? visualizationData.BGColor.key : visualizationData.BGColor,\n\t\t\t\ticon: visualizationData.icon,\n\t\t\t\turl: visualizationData.url,\n\t\t\t\tvizId: visualizationData.vizId || visualizationData.visualization?.vizId,\n\t\t\t\tstatus: visualizationData.status\n\t\t\t});\n\t\t\tif (visualizationData.oldAppId) {\n\t\t\t\tapp.data(\"oldAppId\", visualizationData.oldAppId);\n\t\t\t}\n\t\t\tvisualizationData.menuItems?.forEach((menuItem) => {\n\t\t\t\tapp.addAggregation(\"menuItems\", menuItem, true);\n\t\t\t});\n\t\t\treturn app;\n\t\t});\n\t}\n\n\t/**\n\t * Add multiple apps in the apps aggregation.\n\t * @param {sap.cux.home.App[]} apps - Array of apps.\n\t */\n\tpublic setApps(apps: App[]) {\n\t\tapps.forEach((app) => {\n\t\t\tthis.addAggregation(\"apps\", app, true);\n\t\t});\n\t}\n\n\t/**\n\t * Fetches and returns the tile visualizations for the current device type (Mobile or Desktop).\n\t *\n\t * @public\n\t * @param {GenericTile[]} tiles - This array will be updated with new tile data based on the device type.\n\t *\n\t * @returns {GenericTile[]} - returns updated tiles\n\t */\n\tpublic fetchTileVisualization(tiles: GenericTile[] = []): GenericTile[] {\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tconst cards = (this._generateMobileAppsWrapper()?.getContent() || []) as Panel[];\n\t\t\tfor (const card of cards) {\n\t\t\t\ttiles = tiles.concat((card?.getContent() || []) as GenericTile[]);\n\t\t\t}\n\t\t} else {\n\t\t\ttiles = (this._generateAppsWrapper()?.getItems() || []) as GenericTile[];\n\t\t}\n\t\treturn tiles;\n\t}\n\n\t/**\n\t * Convert array of provided activities to app\n\t * @private\n\t * @param {object[]} activities - Array of activities.\n\t * @returns {object[]} - Array of apps\n\t */\n\tprotected async convertActivitiesToVisualizations(activities: IActivity[]) {\n\t\tconst [availableVisualizations, URLParsingService] = await Promise.all([\n\t\t\tthis._getAllAvailableVisualizations(),\n\t\t\tContainer.getServiceAsync<URLParsing>(\"URLParsing\")\n\t\t]);\n\t\tconst appActivities = activities\n\t\t\t.filter((activity) => activity.appType === \"Application\")\n\t\t\t.map((activity) => {\n\t\t\t\tactivity.orgAppId = activity.appId;\n\t\t\t\tactivity.appId = activity.url;\n\t\t\t\treturn activity;\n\t\t\t});\n\t\tconst visualizations = appActivities\n\t\t\t.map((activity) => this._convertToVisualization(activity, availableVisualizations, URLParsingService))\n\t\t\t.filter((activity): activity is IActivity => activity !== undefined);\n\t\tconst updatedVisualizations = await this._updateVisualizationAvailability(visualizations);\n\t\treturn updatedVisualizations;\n\t}\n\n\t/**\n\t * Returns promise that resolves to array of all available visualizations\n\t * @private\n\t * @returns {Promise} A Promise that resolves to array of all available visualizations.\n\t */\n\tprivate async _getAllAvailableVisualizations() {\n\t\tif (!this._allAvailableVisualizations) {\n\t\t\tconst catalogApps = await this.appManagerInstance._getCatalogApps();\n\t\t\tthis._allAvailableVisualizations = catalogApps.reduce((visualizations: IVisualization[], catalogApp) => {\n\t\t\t\treturn visualizations.concat(catalogApp.visualizations || []);\n\t\t\t}, []);\n\t\t}\n\t\treturn this._allAvailableVisualizations;\n\t}\n\n\t/**\n\t * Updates vizualization array with information - if vizualization is present in favorites .\n\t * @private\n\t * @param {object[]} visualizations - Array of vizualizations.\n\t * @returns {object[]} - Array of updated vizualizations.\n\t */\n\tprivate async _updateVisualizationAvailability(visualizations: IActivity[]) {\n\t\tconst favoriteVisualizations: ICustomVisualization[] = await this.appManagerInstance.fetchFavVizs(true, true);\n\t\tvisualizations.forEach((visualization) => {\n\t\t\tvisualization.addedInFavorites = favoriteVisualizations.some(\n\t\t\t\t(favoriteVisualization) => favoriteVisualization.oldAppId === visualization.orgAppId\n\t\t\t);\n\t\t});\n\t\treturn visualizations;\n\t}\n\n\t/**\n\t * Updates user activity with provided vizualization info\n\t * @private\n\t * @param {object} activity - User activity.\n\t * @param {object} updatedVizConfig - Updated vizualization config.\n\t * @returns {object} - Updated user acitvity.\n\t */\n\tprivate _updateActivityInfo(activity: IActivity, updatedVizConfig: IVisualization) {\n\t\tthis._catalogVisualizationCache = this._catalogVisualizationCache || new Map<string, IVisualization>();\n\t\tactivity.targetURL = updatedVizConfig.targetURL;\n\t\tactivity.vizId = updatedVizConfig.vizId;\n\t\tthis._catalogVisualizationCache.set(activity.orgAppId, updatedVizConfig);\n\t\treturn activity;\n\t}\n\n\t/**\n\t * Prepares app and tile data before loading.\n\t * @param {App[]} apps - List of app objects.\n\t * @param {GenericTile[]} tiles - List of tiles.\n\t * @returns {Promise<{ apps: App[], tiles: GenericTile[] }>} A promise resolving with the provided apps and tiles.\n\t */\n\tpublic prepareAppsBeforeLoad(apps: App[], tiles: GenericTile[]): Promise<{ apps: App[]; tiles: GenericTile[] }> {\n\t\treturn Promise.resolve({ apps, tiles });\n\t}\n\n\t/**\n\t * Finds the best matching visualization for a given activity from a list of matching visualizations.\n\t *\n\t * This method first attempts to find an exact match for the target URL of the activity among the matching visualizations.\n\t * If no exact match is found, it uses the URLParsingService to compare parameters of the target URLs to find the best match.\n\t * It then updates the activity information with the best matching visualization.\n\t *\n\t * @private\n\t * @param {IActivity} activity - The activity for which to find the best matching visualization.\n\t * @param {IVisualization[]} matchingVisualizations - A list of visualizations that match the activity.\n\t * @param {URLParsing} URLParsingService - A service used to parse and compare target URLs.\n\t * @returns {IVisualization | undefined} The best matching visualization, or undefined if no match is found.\n\t */\n\tprivate _findBestMatchingVisualization(activity: IActivity, matchingVisualizations: IVisualization[], URLParsingService: URLParsing) {\n\t\t//if there are multiple matching apps, compare the target urls\n\t\tconst matchedVisualization = matchingVisualizations.find((matchingViz) => matchingViz.targetURL === activity.url);\n\t\tif (matchedVisualization) {\n\t\t\treturn this._updateActivityInfo(activity, matchedVisualization);\n\t\t} else {\n\t\t\t//edge cases, when no exact targetUrl match\n\t\t\tconst matchedVisualizationCache = new Map<string, object>();\n\t\t\tconst matchedVisualizations: { viz: IVisualization; params: unknown; prio: number }[] = [];\n\n\t\t\tmatchingVisualizations.forEach((visualization) => {\n\t\t\t\tconst targetURL: string = visualization.targetURL;\n\t\t\t\tif (!matchedVisualizationCache.get(targetURL)) {\n\t\t\t\t\tconst matchedVisualization = {\n\t\t\t\t\t\tviz: visualization,\n\t\t\t\t\t\tparams: (URLParsingService.parseShellHash(visualization.targetURL) as { params: { [key: string]: unknown[] } })\n\t\t\t\t\t\t\t.params,\n\t\t\t\t\t\tprio: 0\n\t\t\t\t\t};\n\t\t\t\t\tmatchedVisualizationCache.set(targetURL, matchedVisualization);\n\t\t\t\t\tmatchedVisualizations.push(matchedVisualization);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst filteredVisualizations = matchedVisualizations.filter((matchedVisualization) =>\n\t\t\t\tthis._filterMatchingVisualization(activity, matchedVisualization, URLParsingService)\n\t\t\t);\n\t\t\tif (filteredVisualizations.length) {\n\t\t\t\t// more than 1 matching condition for unique targetUrls\n\t\t\t\t// this could be either because there is exact match and/or also allItems true and/or no params in VizData param keys\n\t\t\t\t// then find best match possible, based on prio\n\t\t\t\tfilteredVisualizations.sort((val1, val2) => val1.prio - val2.prio);\n\t\t\t\treturn this._updateActivityInfo(activity, filteredVisualizations[0].viz);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters matching visualizations based on activity parameters and assigns priority.\n\t *\n\t * This method compares the parameters of the activity with those of a matched visualization\n\t * to determine if they match.\n\t *\n\t * @private\n\t * @returns {boolean} Returns true if the visualization matches the activity, false otherwise.\n\t */\n\tprivate _filterMatchingVisualization(\n\t\tactivity: IActivity,\n\t\tmatchedVisualization: { viz: IVisualization; params: unknown; prio: number },\n\t\tURLParsingService: URLParsing\n\t) {\n\t\tconst parshedShellHash = URLParsingService.parseShellHash(activity.url) as { params: { [key: string]: unknown[] } };\n\t\tconst activityParameters = parshedShellHash.params;\n\n\t\tconst activityParameterKeys = Object.keys(activityParameters);\n\t\tconst visualizationParams = matchedVisualization.params as { [key: string]: unknown[] };\n\t\t//filter keys other than 'allItems', for myinbox tasks allItems key is a generally common key hence filter that\n\t\tconst visualizationParamKeys = Object.keys(visualizationParams).filter((key) => key !== \"allItems\");\n\t\tif (visualizationParamKeys.length === activityParameterKeys.length) {\n\t\t\tconst bMatch = activityParameterKeys.every(\n\t\t\t\t(key) => visualizationParamKeys.includes(key) && visualizationParams[key][0] === activityParameters[key][0]\n\t\t\t);\n\t\t\tif (bMatch) {\n\t\t\t\tmatchedVisualization.prio = 1;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} else if (!visualizationParamKeys.length) {\n\t\t\t//this could mean either visualizationParamKeys did not have any key or the only key present was 'allItems'\n\t\t\t//if 'allItems' present give prio 2 else prio 3\n\t\t\tmatchedVisualization.prio = Object.keys(matchedVisualization.params as { [key: string]: unknown[] }).length ? 2 : 3;\n\t\t\treturn true;\n\t\t}\n\t\t//filtered visualizationParamKeys length doesnt match aAppParamKeys length & visualizationParamKeys length is not 0\n\t\treturn false;\n\t}\n\n\t/**\n\t * Converts given user activity to vizualization\n\t * @private\n\t * @param {object} activity - User Activity.\n\t * @param {object[]} catalogVisualizations - array of all available visualizations in catalog.\n\t * @param {object} URLParsingService - URL parsing service.\n\t * @returns {object} - visualization\n\t */\n\tprivate _convertToVisualization(activity: IActivity, catalogVisualizations: IVisualization[], URLParsingService: URLParsing) {\n\t\tthis._catalogVisualizationCache = this._catalogVisualizationCache || new Map<string, IVisualization>();\n\t\tconst catalogVisualization = this._catalogVisualizationCache.get(activity.orgAppId);\n\t\tif (catalogVisualization) {\n\t\t\treturn this._updateActivityInfo(activity, catalogVisualization);\n\t\t} else {\n\t\t\tconst matchingVisualizations = catalogVisualizations.filter(\n\t\t\t\t(visualization) =>\n\t\t\t\t\tvisualization.vizId && `#${visualization.target?.semanticObject}-${visualization.target?.action}` === activity.orgAppId\n\t\t\t);\n\t\t\tif (matchingVisualizations.length > 1) {\n\t\t\t\treturn this._findBestMatchingVisualization(activity, matchingVisualizations, URLParsingService);\n\t\t\t} else if (matchingVisualizations.length === 1) {\n\t\t\t\treturn this._updateActivityInfo(activity, matchingVisualizations[0]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds visualization to favorite apps\n\t * @private\n\t * @param {sap.ui.base.Event} event - The event object.\n\t */\n\tprotected async _addAppToFavorites(event: Event) {\n\t\tthis.setBusy(true);\n\t\ttry {\n\t\t\tconst source = event.getSource<MenuItem>();\n\t\t\tconst app = source.getParent() as App;\n\t\t\tconst vizId = app.getVizId?.();\n\t\t\tif (vizId) {\n\t\t\t\t//Add Apps to the 'Recently Added Apps' section\n\t\t\t\tawait this.appManagerInstance.addVisualization(vizId);\n\t\t\t\tawait (this.getParent?.() as AppsContainer)._refreshAllPanels();\n\t\t\t\tconst message = this._i18nBundle.getText(\"appMovedToFavorites\", [app.getTitle()]) as string;\n\t\t\t\tMessageToast.show(message);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t} finally {\n\t\t\tthis.setBusy(false);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the panel is loaded. If the panel is not loaded then placholders are shown otherwise not\n\t * @private\n\t * @returns {boolean} true if the panel is loaded, false otherwise.\n\t */\n\tpublic isLoaded(): boolean {\n\t\treturn this._isLoaded;\n\t}\n\n\t/**\n\t * Set the loaded status of the app panel.\n\t * @private\n\t * @param {boolean} val - The new loaded status to set for the app panel.\n\t */\n\tpublic setLoaded(val: boolean): void {\n\t\tthis._isLoaded = val;\n\t}\n\n\t/**\n\t * Returns the dirty status of the app panel. If the panel is dirty then only re-render the apps\n\t * @private\n\t * @returns {boolean} true if the panel is dirty, false otherwise.\n\t */\n\tpublic isDirty(): boolean {\n\t\treturn this._isDirty;\n\t}\n\n\t/**\n\t * Set the dirty status of the app panel.\n\t * @private\n\t * @param {boolean} val - The new dirty status to set for the app panel.\n\t */\n\tpublic setDesktopViewDirty(val: boolean): void {\n\t\tthis._isDirty = val;\n\t}\n\n\t/**\n\t * Returns the dirty status of the app mobile panel. If the panel is dirty then only re-render the apps\n\t * @private\n\t * @returns {boolean} true if the panel is dirty, false otherwise.\n\t */\n\tpublic isMobileDirty(): boolean {\n\t\treturn this._isMobileDirty;\n\t}\n\n\t/**\n\t * Set the dirty status of the app mobile panel.\n\t * @private\n\t * @param {boolean} val - The new dirty status to set for the app mobile panel.\n\t */\n\tpublic setMobileViewDirty(val: boolean): void {\n\t\tthis._isMobileDirty = val;\n\t}\n\n\t/**\n\t * Sets aggregation for give control.\n\t * @param {Object} control - Control for which aggregation has to be set.\n\t * @param {Object[]} items - Items to be added in aggregation.\n\t * @param {string} aggregationName - Aggregation name\n\t * @private\n\t */\n\tpublic _setAggregation = function (control: Control | Group, items: Control[] | App[] = [], aggregationName = \"items\") {\n\t\titems.forEach((oItem) => {\n\t\t\tcontrol.addAggregation(aggregationName, oItem, true);\n\t\t});\n\t};\n\n\t/**\n\t * Sets the busy state of panel.\n\t * @private\n\t * @param {boolean} isBusy - Indicates whether the panel should be set to busy state.\n\t */\n\tprotected setBusy(isBusy: boolean) {\n\t\tconst oAppsWrapper = this._generateAppsWrapper();\n\t\toAppsWrapper.setBusy(isBusy);\n\t}\n\n\t/**\n\t * Retrieves the group with the specified group Id.\n\t * @private\n\t * @param {string} groupId - The Id of the group.\n\t * @returns {sap.cux.home.Group} The group with the specified group Id, or null if not found.\n\t */\n\tprotected _getGroup(groupId: string) {\n\t\tconst groups = (this.getAggregation(\"groups\") || []) as Group[];\n\t\treturn groups.find((group) => group.getGroupId() === groupId);\n\t}\n\n\t/**\n\t * Checks if the panel is supported.\n\t * @returns {boolean} True if the panel is supported, false otherwise.\n\t * @private\n\t */\n\tpublic isSupported() {\n\t\treturn this._isSupported;\n\t}\n\n\t/**\n\t * Sets panel as supported or unsupported.\n\t * @param {boolean} isSupported true if the panel is supported, false otherwise.\n\t * @private\n\t */\n\tpublic setSupported(isSupported: boolean) {\n\t\tthis._isSupported = isSupported;\n\t}\n\n\t/**\n\t * Attaches user activity tracking based on the configuration.\n\t * If user activity tracking is enabled, it listens to changes in tracking activity configuration\n\t * and fires a 'supported' event accordingly.\n\t * @private\n\t */\n\tprotected _attachUserActivityTracking() {\n\t\tif (Config.last(\"/core/shell/enableRecentActivity\")) {\n\t\t\tConfig.on(\"/core/shell/model/enableTrackingActivity\").do((isTrackingActivityEnabled: boolean) => {\n\t\t\t\tthis.setSupported(isTrackingActivityEnabled);\n\t\t\t\tthis.fireSupported({ isSupported: isTrackingActivityEnabled });\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the panel.\n\t * @public\n\t */\n\tprotected async refresh() {\n\t\tawait (this.getParent() as AppsContainer).refreshPanel(this);\n\t}\n\n\t/**\n\t * Generates default illustrated message for panel.\n\t * @private\n\t * @returns {sap.m.IllustratedMessage} Illustrated error message for panel.\n\t */\n\tprotected generateIllustratedMessage() {\n\t\tif (!this._errorMessage) {\n\t\t\tthis._errorMessage = new IllustratedMessage(`${this.getId()}-errorMessage`, {\n\t\t\t\tillustrationSize: IllustratedMessageSize.Base,\n\t\t\t\ttitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\tdescription: this._i18nBundle.getText(\"noData\")\n\t\t\t}).addStyleClass(\"appsSectionMessageCard\");\n\t\t}\n\t\treturn this._errorMessage;\n\t}\n\n\t/**\n\t * Applies the selected color to an ungrouped tile.\n\t * @param {sap.cux.home.App | sap.cux.home.Group} item - The item control.\n\t * @param {string} color - The selected color.\n\t * @private\n\t */\n\tprotected _applyUngroupedTileColor(item: App | Group, color: string) {\n\t\tconst tiles: GenericTile[] = this.fetchTileVisualization();\n\t\tconst groupId = item instanceof Group ? item.getGroupId() : null;\n\t\tconst updatedTileIndex = tiles.findIndex((tile) =>\n\t\t\tgroupId ? tile.data(\"groupId\") === groupId : tile.getUrl() === getLeanURL((item as App).getUrl())\n\t\t);\n\t\ttiles[updatedTileIndex]?.setBackgroundColor(color);\n\t}\n\n\t/**\n\t * Exit lifecycle method.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic exit() {\n\t\tthis._controlMap.forEach((control) => {\n\t\t\tcontrol.destroy();\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]}