{"version":3,"file":"SettingsDialog.js","names":["sap","ui","define","Bar","Button","sap_m_library","List","Page","SplitApp","StandardListItem","Title","Element","Device","__BaseSettingsDialog","___utils_Device","_interopRequireDefault","obj","__esModule","default","SplitAppMode","BaseSettingsDialog","calculateDeviceType","DeviceType","SettingsDialog","extend","renderer","apiVersion","init","_init","BaseSettingsDialog.prototype.init.call","this","_controlMap","Map","setContentWidth","setStretch","setCustomHeader","_setCustomHeader","addButton","getId","text","_i18nBundle","getText","type","press","close","addContent","title","showHeader","content","_getPageContent","_attachResizeHandler","resize","attachHandler","deviceType","_splitApp","setMode","Desktop","LargeDesktop","XLargeDesktop","_showHamburger","undefined","isMasterShown","_updateHeaderButtonVisibility","_menuBtn","icon","tooltip","_toggleMasterPage","visible","contentLeft","contentMiddle","level","_deviceType","Mobile","toMaster","_masterPage","showMaster","hideMaster","setVisible","Tablet","orientation","portrait","tooltipText","setTooltip","visibility","_menuList","mode","itemPress","event","_navigateToDetailPage","addStyleClass","masterPages","masterButton","_hideNavigationButton","context","listItem","getParameter","firstPanel","getPanels","selectedKey","data","getProperty","setProperty","detailPage","getElementById","toDetail","getMode","ShowHideMode","selectedPanel","find","panel","firePanelNavigated","removeSelections","pageItem","setTimeout","setSelectedItem","focus","navigationButton","getSource","destroy","onBeforeRendering","_onBeforeRendering","BaseSettingsDialog.prototype.onBeforeRendering.call","forEach","_getPageListItem","then","item","addItem","addDetailPage","_getDetailPage","settingsPanel","_this","id","get","iconDensityAware","set","_listItem","_setVisible","Promise","resolve","isSupported","_settingsPanel$isSupp","call","e","reject","page","backgroundDesign","getActionButtons","actionButton","addHeaderContent","getAggregation"],"sources":["SettingsDialog.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport { Event as JQueryEvent } from \"jquery\";\nimport Bar from \"sap/m/Bar\";\nimport Button from \"sap/m/Button\";\nimport { SplitAppMode } from \"sap/m/library\";\nimport List from \"sap/m/List\";\nimport Page from \"sap/m/Page\";\nimport SplitApp from \"sap/m/SplitApp\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport Title from \"sap/m/Title\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport Device from \"sap/ui/Device\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\nimport { calculateDeviceType, DeviceType } from \"./utils/Device\";\n\n/**\n *\n * Dialog class for My Home Settings.\n *\n * @extends BaseSettingsDialog\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n * @private\n *\n * @alias sap.cux.home.SettingsDialog\n */\nexport default class SettingsDialog extends BaseSettingsDialog {\n\tprivate _controlMap!: Map<string, Control | Element>;\n\tprivate _menuBtn!: Button;\n\tprivate _menuList!: List;\n\tprivate _masterPage!: Page;\n\tprivate _splitApp!: SplitApp;\n\tprivate _deviceType!: DeviceType;\n\tprivate _showHamburger!: boolean | undefined;\n\n\tstatic renderer = {\n\t\tapiVersion: 2\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @public\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._controlMap = new Map();\n\n\t\t//setup dialog\n\t\tthis.setContentWidth(\"72rem\");\n\t\tthis.setStretch(false);\n\t\tthis.setCustomHeader(this._setCustomHeader());\n\n\t\t//setup dialog buttons\n\t\tthis.addButton(\n\t\t\tnew Button(`${this.getId()}-close-btn`, {\n\t\t\t\ttext: this._i18nBundle.getText(\"XBUT_CLOSE\"),\n\t\t\t\ttype: \"Transparent\",\n\t\t\t\tpress: () => this.close()\n\t\t\t})\n\t\t);\n\n\t\t//setup dialog content\n\t\tthis.addContent(\n\t\t\tnew Page(`${this.getId()}-settingsPage`, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\t\tshowHeader: false,\n\t\t\t\tcontent: this._getPageContent()\n\t\t\t})\n\t\t);\n\t\tthis._attachResizeHandler();\n\t}\n\t/**\n\t * Attaches a resize event handler to dynamically adjust the split app mode and\n\t * header button visibility based on the current device type.\n\t *\n\t * @returns {void}\n\t */\n\n\tprivate _attachResizeHandler(): void {\n\t\tDevice.resize.attachHandler(() => {\n\t\t\tconst deviceType = calculateDeviceType();\n\t\t\tthis._splitApp.setMode(\n\t\t\t\tdeviceType === DeviceType.Desktop || deviceType === DeviceType.LargeDesktop || deviceType === DeviceType.XLargeDesktop\n\t\t\t\t\t? \"ShowHideMode\"\n\t\t\t\t\t: \"HideMode\"\n\t\t\t);\n\t\t\tthis._showHamburger = undefined;\n\t\t\tconst isMasterShown = this._splitApp.isMasterShown();\n\t\t\tthis._updateHeaderButtonVisibility(isMasterShown);\n\t\t});\n\t}\n\t/**\n\t * Creates and sets a custom header for the SettingsDialog.\n\t *\n\t * @private\n\t * @returns {Bar} The custom header bar for the SettingsDialog.\n\t */\n\tprivate _setCustomHeader(): Bar {\n\t\tthis._menuBtn = new Button(`${this.getId()}-menu-btn`, {\n\t\t\ticon: \"sap-icon://menu2\",\n\t\t\ttooltip: this._i18nBundle.getText(\"showMenu\"),\n\t\t\tpress: () => this._toggleMasterPage(),\n\t\t\tvisible: false\n\t\t});\n\t\treturn new Bar(`${this.getId()}-header`, {\n\t\t\tcontentLeft: [this._menuBtn],\n\t\t\tcontentMiddle: [\n\t\t\t\tnew Title(`${this.getId()}-dialog-title`, {\n\t\t\t\t\ttext: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\t\t\tlevel: \"H1\"\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Toggles the visibility of the master page in the SettingsDialog based on the current device width.\n\t * If the device width is less than 600 pixels or equal to or greater than 1024 pixels, the master\n\t * page is always shown. Otherwise, it toggles the visibility of the master page.\n\t *\n\t * @private\n\t */\n\tprivate _toggleMasterPage(): void {\n\t\tconst isMasterShown = this._splitApp.isMasterShown();\n\t\tconst deviceType = this._deviceType || calculateDeviceType();\n\t\tif (deviceType === DeviceType.Mobile) {\n\t\t\tthis._splitApp.toMaster(this._masterPage.getId(), \"slide\");\n\t\t\tthis._splitApp.showMaster();\n\t\t} else {\n\t\t\tif (isMasterShown) {\n\t\t\t\tthis._splitApp.hideMaster();\n\t\t\t\tthis._showHamburger = true;\n\t\t\t} else {\n\t\t\t\tthis._splitApp.showMaster();\n\t\t\t\tthis._showHamburger = false;\n\t\t\t}\n\t\t}\n\t\tthis._updateHeaderButtonVisibility(!isMasterShown);\n\t}\n\n\t/**\n\t * Update header button\n\t *\n\t * @param {boolean} isMasterShown If master page is shown\n\t * @private\n\t */\n\tprivate _updateHeaderButtonVisibility(isMasterShown: boolean): void {\n\t\tconst deviceType = this._deviceType || calculateDeviceType();\n\t\tif (deviceType === DeviceType.Mobile) {\n\t\t\t// Hide or show the menu button on mobile\n\t\t\tthis._menuBtn.setVisible(!isMasterShown);\n\t\t} else if (deviceType === DeviceType.Tablet) {\n\t\t\tif (Device.orientation?.portrait) {\n\t\t\t\t// Show menu button in portrait mode with a tooltip\n\t\t\t\tconst tooltipText = this._i18nBundle.getText(isMasterShown ? \"ToggleButtonHide\" : \"ToggleButtonShow\");\n\t\t\t\tif (tooltipText) {\n\t\t\t\t\t// Only set the tooltip if a valid string is available\n\t\t\t\t\tthis._menuBtn.setTooltip(tooltipText);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._menuBtn.setVisible(true);\n\t\t} else {\n\t\t\tlet visibility = true;\n\t\t\tif (this._showHamburger === undefined) {\n\t\t\t\tif (this._splitApp.isMasterShown()) {\n\t\t\t\t\tvisibility = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._menuBtn.setVisible(visibility);\n\t\t}\n\t}\n\n\t/**\n\t * Generates the content for the SettingsDialog, including the master page and split app.\n\t *\n\t * @private\n\t * @returns {SplitApp} The split app containing the master page and detail pages for the SettingsDialog.\n\t */\n\tprivate _getPageContent(): SplitApp {\n\t\tthis._menuList = new List(`${this.getId()}-master-pages-list`, {\n\t\t\tmode: \"SingleSelectMaster\",\n\t\t\titemPress: (event: Event) => this._navigateToDetailPage(event)\n\t\t}).addStyleClass(\"sapCuxMasterPageList\");\n\t\tthis._masterPage = new Page(`${this.getId()}-master-page`, {\n\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\tshowHeader: false,\n\t\t\tcontent: [this._menuList]\n\t\t});\n\t\tthis._splitApp = new SplitApp(`${this.getId()}-settingsApp`, {\n\t\t\tmode: \"ShowHideMode\",\n\t\t\tmasterPages: [this._masterPage],\n\t\t\tmasterButton: (event: Event) => this._hideNavigationButton(event)\n\t\t});\n\n\t\treturn this._splitApp;\n\t}\n\n\t/**\n\t * Navigates to the detail page associated with the selected item in the master page list.\n\t *\n\t * @private\n\t * @param {Event} event The item press event from the master page list.\n\t */\n\tprivate _navigateToDetailPage(event: Event<{ listItem?: StandardListItem }> | string, context?: object): void {\n\t\t//update selected key\n\t\tconst listItem = typeof event === \"string\" ? event : event.getParameter?.(\"listItem\");\n\t\tconst firstPanel = this.getPanels()[0];\n\t\tconst selectedKey = ((listItem as StandardListItem)?.data?.(\"key\") || event || firstPanel?.getProperty(\"key\")) as string;\n\t\tthis.setProperty(\"selectedKey\", selectedKey, true);\n\n\t\t//navigate to detail page\n\t\tconst detailPage = Element.getElementById(`${selectedKey}-detail-page`) as Page;\n\t\tthis._splitApp.toDetail(detailPage.getId(), \"slide\");\n\t\tthis._splitApp.hideMaster();\n\t\tif (this._splitApp.getMode() === SplitAppMode.ShowHideMode) {\n\t\t\tthis._updateHeaderButtonVisibility(false);\n\t\t}\n\n\t\t//fire panel navigated event\n\t\tconst selectedPanel = this.getPanels().find(\n\t\t\t(panel: BaseSettingsPanel) => panel.getProperty(\"key\") === selectedKey\n\t\t) as BaseSettingsPanel;\n\t\tselectedPanel?.firePanelNavigated({ context });\n\n\t\t//select list item\n\t\tthis._menuList.removeSelections(true);\n\t\tconst pageItem = Element.getElementById(`${selectedKey}-page-item`) as StandardListItem;\n\t\tsetTimeout(() => {\n\t\t\tthis._menuList.setSelectedItem(pageItem);\n\t\t\tpageItem.focus();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Hides the navigation button associated with the provided event.\n\t *\n\t * @private\n\t * @param {Event} event The event triggering the hide action.\n\t */\n\tprivate _hideNavigationButton(event: Event): void {\n\t\tconst navigationButton = Element.getElementById(`${event.getSource<SplitApp>().getId()}-MasterBtn`) as Button;\n\t\tnavigationButton?.destroy();\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method.\n\t * Prepares the SettingsDialog content and navigate to the selected detail page.\n\t *\n\t * @public\n\t * @override\n\t */\n\tpublic onBeforeRendering(event: JQueryEvent): void {\n\t\tsuper.onBeforeRendering(event);\n\n\t\t//setup master and detail page content\n\t\tthis.getPanels().forEach((panel: BaseSettingsPanel) => {\n\t\t\tvoid this._getPageListItem(panel).then((item) => this._menuList.addItem(item));\n\t\t\tthis._splitApp.addDetailPage(this._getDetailPage(panel));\n\t\t});\n\n\t\t//navigate to detail page\n\t\tconst selectedKey = this.getProperty(\"selectedKey\") as string;\n\t\tconst context = this.getProperty(\"context\") as object;\n\t\tthis._navigateToDetailPage(selectedKey, context);\n\t}\n\n\t/**\n\t * Generates a list item for the master page list based on the settings panel.\n\t * The list item displays the title and icon of the settings panel.\n\t *\n\t * @private\n\t * @param {BaseSettingsPanel} settingsPanel The settings panel for which to generate the list item.\n\t * @returns {StandardListItem} The list item control representing the settings panel in the master page list.\n\t */\n\tprivate async _getPageListItem(settingsPanel: BaseSettingsPanel): Promise<StandardListItem> {\n\t\tconst id = `${settingsPanel.getProperty(\"key\")}-page-item`;\n\t\tlet listItem = this._controlMap.get(id) as StandardListItem;\n\n\t\tif (!listItem) {\n\t\t\tlistItem = new StandardListItem(id, {\n\t\t\t\ttitle: settingsPanel.getProperty(\"title\") as string,\n\t\t\t\ticon: settingsPanel.getProperty(\"icon\") as string,\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\ticonDensityAware: false\n\t\t\t});\n\t\t\tlistItem.data(\"key\", settingsPanel.getProperty(\"key\"));\n\t\t\tthis._controlMap.set(id, listItem);\n\t\t}\n\n\t\tlistItem.setVisible(await settingsPanel.isSupported());\n\t\treturn listItem;\n\t}\n\n\t/**\n\t * Generates a detail page for the SettingsDialog based on the provided settings panel.\n\t *\n\t * @private\n\t * @param {BaseSettingsPanel} settingsPanel The settings panel for which to generate the detail page.\n\t * @returns {Page} The detail page control representing the settings panel.\n\t */\n\tprivate _getDetailPage(settingsPanel: BaseSettingsPanel): Page {\n\t\tconst id = `${settingsPanel.getProperty(\"key\")}-detail-page`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst page = new Page(id, {\n\t\t\t\ttitle: settingsPanel.getProperty(\"title\") as string,\n\t\t\t\tbackgroundDesign: \"List\",\n\t\t\t\tshowHeader: settingsPanel.getProperty(\"showHeader\") as boolean\n\t\t\t});\n\n\t\t\t//add settings panel action buttons\n\t\t\tsettingsPanel.getActionButtons().forEach((actionButton) => {\n\t\t\t\tpage.addHeaderContent(actionButton);\n\t\t\t});\n\n\t\t\tthis._controlMap.set(id, page);\n\t\t}\n\n\t\t//add settings panel content\n\t\t(settingsPanel.getAggregation(\"content\") as Control[]).forEach((content) => (this._controlMap.get(id) as Page).addContent(content));\n\n\t\treturn this._controlMap.get(id) as Page;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}