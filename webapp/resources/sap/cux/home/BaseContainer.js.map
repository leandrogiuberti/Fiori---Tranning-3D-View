{"version":3,"file":"BaseContainer.js","names":["sap","ui","define","Button","FlexBox","HBox","IconTabBar","List","Popover","StandardListItem","Title","sap_m_library","Control","CustomData","UI5Element","HTML","Lib","__BaseContainerRenderer","__BasePanel","__MenuItem","___library","___utils_Accessibility","___utils_DataFormatUtils","___utils_Device","___utils_FESRUtil","___utils_PerformanceUtils","__SideBySideIconTabFilter","_interopRequireDefault","obj","__esModule","default","BackgroundDesign","ButtonType","PlacementType","BaseContainerRenderer","BasePanel","MenuItem","OrientationType","getInvisibleText","recycleId","calculateDeviceType","DeviceType","addFESRId","addFESRSemanticStepName","FESR_EVENTS","getFESRId","recordElementLoadEnd","recordElementLoadStart","SideBySideIconTabFilter","BaseContainer","extend","renderer","metadata","library","properties","title","type","group","defaultValue","orientation","SideBySide","selectedKey","visibility","width","height","blocked","busy","busyIndicatorDelay","busyIndicatorSize","fieldGroupIds","visible","enableSettings","enableFullScreen","fullScreenName","enableLazyLoad","loaded","defaultAggregation","aggregations","content","singularName","multiple","actionButtons","menuItems","_placeholder","associations","layout","fullScreenButton","fullScreenMenuItem","events","onExpand","designtime","adjustLayout","_adjustLayout","load","_load","constructor","_constructor","id","settings","Control.prototype.constructor.call","this","_exemptedActions","init","_init","_controlMap","Map","_commonHeaderElementStates","_i18nBundle","getResourceBundleFor","_createHeader","containerCustomSettings","getId","key","value","addCustomData","placeholderContent","getGenericPlaceholderContent","setAggregation","getCustomSettings","_getCustomSettings","data","addCustomSetting","_addCustomSetting","control","controlId","isPanel","hasContainerTitle","getProperty","trim","length","get","set","renderType","addStyleClass","justifyContent","items","alignItems","addDependent","setTitleStyle","_getHeader","_getInnerControl","_iconTabBar","_wrapper","_onPanelSelect","event","setProperty","getParameter","_updateContainerHeader","_setPanelCount","panel","count","_getIconTabFilter","setCount","iconTabFilter","writeToDom","SELECT","onBeforeRendering","_onBeforeRendering","defaultKey","getContent","_createInnerControl","_addAllPanelContent","getVisible","_loadContent","_markPerformanceMetrics","onAfterRendering","_onAfterRendering","_attachResizeHandler","_observeContainer","_hidePanelHeaderIfSinglePanel","isSideBySideLayout","hasOnlyOnePanel","toggleStyleClass","getDomRef","_resizeObserver","disconnect","ResizeObserver","entries","_resizeTimeout","clearTimeout","window","setTimeout","_setDeviceType","observe","_detachResizeHandler","target","_containerObserver","IntersectionObserver","forEach","entry","isIntersecting","rootMargin","threshold","Horizontal","Vertical","setDirection","expandable","backgroundDesign","Transparent","headerMode","headerBackgroundDesign","select","isContainer","targetControl","removeAllItems","_updateHeader","headerTitle","setText","setVisible","_getLayout","_addLayoutHeaderElements","currentControl","_getSelectedPanel","_filterVisibleHeaderElements","getMenuItems","_addMenuItems","getAggregation","actionButton","addItem","_getHeaderButton","attachHeaderElements","elements","property","aggregation","headerElement","_getFullScreenMenuItem","_getHomeSettingsMenuItem","_getFullScreenButton","currentPropertyValue","previousPropertyValue","addAggregation","removeAggregation","setFullScreenElementRelations","isFullScreenEnabled","panels","_setupFullScreenElements","setupFullScreenElement","registerFullScreenElement","deregisterFullScreenElement","updateFullScreenElement","index","indexOfItem","_setFullScreenElementRelations","relation","targetAggregation","setAssociation","removeAssociation","menuItem","getText","icon","press","openSettingsDialog","toggleFullScreen","text","push","find","setSelectedKey","getPanelHeader","_getPanelHeader","header","isTitleVisible","getActionButtons","filter","element","_setTitle","list","itemPress","getSource","getParent","close","invisiblePopoverText","menuPopover","placement","VerticalPreferredBottom","showHeader","ariaLabelledBy","containerTitleId","menuButton","tooltip","openBy","item","_getMenuListItem","headerButton","firePress","PRESS","button","setTooltip","getTooltip","setIcon","getIcon","setEnabled","getEnabled","getElementById","getAssociation","getTitle","menuListItem","setTitle","toggleMenuListItem","_toggleMenuListItem","show","toggleActionButton","_toggleActionButton","actionButtonControl","removeContent","_removeContent","undefined","getWidth","_getWidth","toggleActionButtons","_toggleActionButtons","visibilityChanged","currentVisibility","includes","toggleFullScreenElements","_toggleFullScreenElements","fullScreenMenuButton","isPhone","getDeviceType","Mobile","parent","elementVisibilityChanged","fullScreenElement","elementKey","getKey","parentLayout","parentNode","clientWidth","deviceType","_deviceType","_getDeviceType","elementName","getMetadata","getName","attachEventOnce","exit","_exit","destroy","_getGenericPlaceholderContent"],"sources":["BaseContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HBox from \"sap/m/HBox\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport List from \"sap/m/List\";\nimport Popover from \"sap/m/Popover\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport Title from \"sap/m/Title\";\nimport { BackgroundDesign, ButtonType, PlacementType } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport HTML from \"sap/ui/core/HTML\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { CSSSize } from \"sap/ui/core/library\";\nimport { $BaseContainerSettings } from \"./BaseContainer\";\nimport BaseContainerRenderer from \"./BaseContainerRenderer\";\nimport BaseLayout from \"./BaseLayout\";\nimport BasePanel from \"./BasePanel\";\nimport MenuItem from \"./MenuItem\";\nimport { OrientationType } from \"./library\";\nimport { getInvisibleText } from \"./utils/Accessibility\";\nimport { recycleId } from \"./utils/DataFormatUtils\";\nimport { calculateDeviceType, DeviceType } from \"./utils/Device\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS, getFESRId } from \"./utils/FESRUtil\";\nimport { recordElementLoadEnd, recordElementLoadStart, UIElements } from \"./utils/PerformanceUtils\";\nimport SideBySideIconTabFilter from \"./SideBySideIconTabFilter\";\n\ntype FullScreenElementRelation = {\n\tisFullScreenEnabled: boolean;\n\tcontrol: BaseContainer | BasePanel;\n\taggregation: string;\n\theaderElement: MenuItem | Button;\n};\n\n/**\n *\n * Abstract base class for all container controls in the Home Page Layout.\n *\n * @extends sap.ui.core.Control\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @ui5-metamodel\n * @alias sap.cux.home.BaseContainer\n */\nexport default abstract class BaseContainer extends Control {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _controlMap!: Map<string, Control | UI5Element>;\n\tprivate _wrapper!: FlexBox;\n\tprivate _iconTabBar!: IconTabBar;\n\tprivate _commonHeaderElementStates!: Map<string, boolean>;\n\tprivate _resizeObserver!: ResizeObserver;\n\tprivate _deviceType!: DeviceType;\n\tprivate _containerObserver!: IntersectionObserver;\n\tprivate _exemptedActions: string[] = [];\n\tpublic adjustLayout() {}\n\tprotected load() {}\n\tprivate _resizeTimeout!: number;\n\n\tconstructor(id?: string | $BaseContainerSettings);\n\tconstructor(id?: string, settings?: $BaseContainerSettings);\n\t/**\n\t * Constructor for a new Base Container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Title of the container.\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Data\", defaultValue: \"\" },\n\t\t\t/**\n\t\t\t * Orientation of the container.\n\t\t\t */\n\t\t\torientation: {\n\t\t\t\ttype: \"sap.cux.home.OrientationType\",\n\t\t\t\tgroup: \"Data\",\n\t\t\t\tdefaultValue: OrientationType.SideBySide\n\t\t\t},\n\t\t\t/**\n\t\t\t * Key of the selected panel of the container.\n\t\t\t */\n\t\t\tselectedKey: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Width to be set for the container.\n\t\t\t * @public\n\t\t\t */\n\t\t\twidth: { type: \"sap.ui.core.CSSSize\", group: \"Appearance\", defaultValue: \"100%\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Height to be set for the container.\n\t\t\t * @public\n\t\t\t */\n\t\t\theight: { type: \"sap.ui.core.CSSSize\", group: \"Appearance\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Whether the control is currently in blocked state.\n\t\t\t */\n\t\t\tblocked: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The delay in milliseconds, after which the busy indicator will show up for this control.\n\t\t\t */\n\t\t\tbusyIndicatorDelay: { type: \"int\", defaultValue: 1000, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The size of the BusyIndicator.\n\t\t\t */\n\t\t\tbusyIndicatorSize: { type: \"sap.ui.core.BusyIndicatorSize\", defaultValue: \"Medium\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The IDs of a logical field group that this control belongs to.\n\t\t\t */\n\t\t\tfieldGroupIds: { type: \"string[]\", defaultValue: [], visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The visible property of the container.\n\t\t\t */\n\t\t\tvisible: { type: \"boolean\", group: \"Appearance\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The name of the URL parameter used to expand the container into full-screen mode.\n\t\t\t * This property specifies the parameter key expected in the URL query string\n\t\t\t * to identify the container to be expanded.\n\t\t\t */\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether lazy loading is enabled for this control.\n\t\t\t */\n\t\t\tenableLazyLoad: { type: \"boolean\", group: \"Misc\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates if the container is loaded.\n\t\t\t */\n\t\t\tloaded: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"content\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The container content aggregation which should be of type BasePanel.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcontent: { type: \"sap.cux.home.BasePanel\", singularName: \"content\", multiple: true, visibility: \"public\" },\n\t\t\t/**\n\t\t\t * This aggregation contains the actions that should be displayed within the container.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tactionButtons: { type: \"sap.m.Button\", multiple: true, singularName: \"actionButton\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * This aggregation holds the items that should be shown within the dropdown menu of the container.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tmenuItems: { type: \"sap.cux.home.MenuItem\", multiple: true, singularName: \"menuItem\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Hidden aggregation for placeholder.\n\t\t\t */\n\t\t\t_placeholder: { type: \"sap.ui.core.HTML\", multiple: false, singularName: \"placeholder\", visibility: \"hidden\" }\n\t\t},\n\t\tassociations: {\n\t\t\tlayout: { type: \"sap.cux.home.BaseLayout\", multiple: false, singularName: \"layout\", visibility: \"hidden\" },\n\t\t\tfullScreenButton: { type: \"sap.m.Button\", multiple: false, singularName: \"fullScreenButton\", visibility: \"hidden\" },\n\t\t\tfullScreenMenuItem: { type: \"sap.cux.home.MenuItem\", multiple: false, singularName: \"fullScreenMenuItem\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired before the container is expanded.\n\t\t\t */\n\t\t\tonExpand: {}\n\t\t},\n\t\tdesigntime: true\n\t};\n\n\tstatic renderer: typeof BaseContainerRenderer = BaseContainerRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tthis._controlMap = new Map();\n\t\tthis._commonHeaderElementStates = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\t\tthis._createHeader(this);\n\n\t\t//create custom settings data\n\t\tconst containerCustomSettings = new CustomData(`${this.getId()}-custom-settings`, {\n\t\t\tkey: \"custom-settings\",\n\t\t\tvalue: {}\n\t\t});\n\t\tthis.addCustomData(containerCustomSettings);\n\n\t\t//create placeholder\n\t\tconst placeholderContent = this.getGenericPlaceholderContent();\n\t\tif (placeholderContent) {\n\t\t\tthis.setAggregation(\"_placeholder\", new HTML({ content: placeholderContent }), true);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the custom settings data associated with the container\n\t * @private\n\t */\n\tpublic getCustomSettings() {\n\t\treturn (this.data(\"custom-settings\") || {}) as Record<string, string>;\n\t}\n\n\t/**\n\t * Adds the Custom setting data for the Section\n\t * @private\n\t * @param {string} key - The key of the Custom setting data\n\t * @param {string} value - The value to set for the specified key\n\t */\n\tprotected addCustomSetting(key: string, value: string) {\n\t\t(this.data(\"custom-settings\") as Record<string, string>)[key] = value;\n\t}\n\n\t/**\n\t * Creates and returns header for both container as well as panels\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - can be a container or a panel\n\t * @returns {HBox} header for the given container or panel\n\t */\n\tprivate _createHeader(control: BaseContainer | BasePanel): HBox {\n\t\tconst controlId = control.getId();\n\t\tconst id = `${controlId}-header`;\n\t\tconst isPanel = control instanceof BasePanel;\n\t\tconst hasContainerTitle = (this.getProperty(\"title\") as string)?.trim().length > 0;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\t//create header elements\n\t\t\tthis._controlMap.set(`${controlId}-header-title`, new Title(`${controlId}-title`));\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-contentLeft`,\n\t\t\t\tnew HBox(`${controlId}-contentLeft`, { renderType: \"Bare\" }).addStyleClass(\"sapCuxSectionContentArea\")\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-contentRight`,\n\t\t\t\tnew HBox(`${controlId}-contentRight`, { renderType: \"Bare\" }).addStyleClass(\"sapCuxSectionContentArea\")\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-content`,\n\t\t\t\tnew HBox(`${controlId}-header-content`, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\tjustifyContent: \"SpaceBetween\",\n\t\t\t\t\trenderType: \"Bare\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-contentLeft`) as Control,\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-contentRight`) as Control\n\t\t\t\t\t]\n\t\t\t\t}).addStyleClass(\"sapUiTinyMarginBegin\")\n\t\t\t);\n\n\t\t\t//create header container\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew HBox(`${controlId}-header`, {\n\t\t\t\t\talignItems: \"Center\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-title`) as Control,\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-content`) as Control\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis.addDependent(this._controlMap.get(id) as Control);\n\t\t}\n\n\t\t//add control-specific styling\n\t\t(this._controlMap.get(id) as HBox)?.addStyleClass(isPanel && hasContainerTitle ? \"sapCuxPanelHeader\" : \"sapUiContainerHeader\");\n\t\t(this._controlMap.get(`${controlId}-header-title`) as Title).setTitleStyle(isPanel && hasContainerTitle ? \"H6\" : \"H4\");\n\n\t\treturn this._controlMap.get(id) as HBox;\n\t}\n\n\t/**\n\t * Returns container header\n\t *\n\t * @private\n\t * @returns {Object} container header\n\t */\n\tpublic _getHeader(): HBox {\n\t\treturn this._controlMap.get(`${this.getId()}-header`) as HBox;\n\t}\n\n\t/**\n\t * Returns inner control corresponding to the specified layout\n\t *\n\t * @private\n\t * @returns {IconTabBar | FlexBox} inner control based on the layout\n\t */\n\tpublic _getInnerControl(): IconTabBar | FlexBox {\n\t\treturn this.getProperty(\"orientation\") === OrientationType.SideBySide ? this._iconTabBar : this._wrapper;\n\t}\n\n\t/**\n\t * Handler for selection of panel in SideBySide layout\n\t *\n\t * @private\n\t * @param {Event} event - event object\n\t */\n\tprotected _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\t//suppress invalidation to prevent container re-rendering. render the specific header element instead\n\t\tthis.setProperty(\"selectedKey\", event.getParameter(\"selectedKey\"), true);\n\t\tthis._updateContainerHeader(this);\n\t}\n\n\t/**\n\t * Updates the count information of IconTabFilter of IconTabBar inner control\n\t * in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - associated panel\n\t * @param {string} count - updated count\n\t */\n\tpublic _setPanelCount(panel: BasePanel, count?: string) {\n\t\tif (this.getProperty(\"orientation\") === OrientationType.SideBySide) {\n\t\t\tthis._getIconTabFilter(panel).setCount(count);\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns IconTabBarFilter for the specified panel to be placed\n\t * in the IconTabBar inner control in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel whose icon tab filter must be fetched\n\t * @returns {IconTabFilter} IconTabFilter for the specified panel\n\t */\n\tprivate _getIconTabFilter(panel: BasePanel): IconTabFilter {\n\t\tconst id = `${panel.getId()}-tabFilter`;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst iconTabFilter = new SideBySideIconTabFilter(id, { panel });\n\t\t\ticonTabFilter.addCustomData(\n\t\t\t\tnew CustomData(`${panel.getId()}--customFilter`, {\n\t\t\t\t\tkey: \"sap-ui-fastnavgroup\",\n\t\t\t\t\tvalue: \"true\",\n\t\t\t\t\twriteToDom: true\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._controlMap.set(id, iconTabFilter);\n\t\t\taddFESRSemanticStepName(iconTabFilter, FESR_EVENTS.SELECT, panel.getProperty(\"key\") as string);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as IconTabFilter;\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(): void {\n\t\t// set selected key to the first panel key if not set\n\t\tif (this.getProperty(\"selectedKey\") === \"\") {\n\t\t\tconst defaultKey = this.getContent()?.[0]?.getProperty(\"key\") as string;\n\t\t\tthis.setProperty(\"selectedKey\", defaultKey, true);\n\t\t}\n\n\t\t//create layout-specific inner control\n\t\tthis._createInnerControl();\n\n\t\t//fetch and update container header\n\t\tthis._updateContainerHeader(this);\n\n\t\t//add content from all panels to inner control\n\t\tthis._addAllPanelContent();\n\n\t\t//load content if lazy loading is disabled\n\t\tif (this.getProperty(\"enableLazyLoad\") === false && !this.getProperty(\"loaded\") && this.getVisible()) {\n\t\t\tthis._loadContent();\n\t\t}\n\n\t\t// mark performance metrics\n\t\tthis._markPerformanceMetrics();\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onAfterRendering(): void {\n\t\tthis._attachResizeHandler();\n\n\t\t//observe container for lazy loading if enabled\n\t\tif (this.getProperty(\"enableLazyLoad\") as boolean) {\n\t\t\tthis._observeContainer();\n\t\t}\n\n\t\tthis._hidePanelHeaderIfSinglePanel();\n\t}\n\n\t/**\n\t * Hides the panel header if there is only one panel in the container,\n\t * in case of side-by-side orientation.\n\t *\n\t * @private\n\t */\n\tprivate _hidePanelHeaderIfSinglePanel(): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst hasOnlyOnePanel = this.getContent()?.length === 1;\n\t\tthis.toggleStyleClass(\"sapUiITBHide\", isSideBySideLayout && hasOnlyOnePanel);\n\t}\n\n\t/**\n\t * Loads the content for the container.\n\t *\n\t * @private\n\t */\n\tprivate _loadContent() {\n\t\tthis.setProperty(\"loaded\", true);\n\t\tthis.load?.();\n\t}\n\n\t/**\n\t * Attaches a resize handler to the container to adjust\n\t * the layout based on device size changes.\n\t *\n\t * @private\n\t */\n\tpublic _attachResizeHandler() {\n\t\tif (this.getDomRef() && this.getProperty(\"loaded\")) {\n\t\t\tthis._resizeObserver?.disconnect();\n\t\t\tthis._resizeObserver = new ResizeObserver((entries) => {\n\t\t\t\tif (this._resizeTimeout) {\n\t\t\t\t\tclearTimeout(this._resizeTimeout);\n\t\t\t\t}\n\n\t\t\t\t//debounce resize event to prevent multiple calls\n\t\t\t\tthis._resizeTimeout = window.setTimeout(() => {\n\t\t\t\t\tif (this.getVisible()) {\n\t\t\t\t\t\tthis._setDeviceType(entries);\n\t\t\t\t\t\tthis.adjustLayout();\n\t\t\t\t\t}\n\t\t\t\t}, 10) as unknown as number;\n\t\t\t});\n\t\t\tthis._resizeObserver?.observe(this.getDomRef() as Element);\n\t\t}\n\t}\n\n\t/**\n\t * Detaches the resize handler from the container.\n\t *\n\t * @private\n\t */\n\tpublic _detachResizeHandler() {\n\t\tthis._resizeObserver?.disconnect();\n\t}\n\n\t/**\n\t * Adds intersection observer for lazy loading of container\n\t *\n\t * @private\n\t */\n\tprivate _observeContainer(): void {\n\t\tconst target = this.getDomRef();\n\t\tif (!this._containerObserver) {\n\t\t\tthis._containerObserver = new IntersectionObserver(\n\t\t\t\t(entries) =>\n\t\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\t\tif (!this.getProperty(\"loaded\") && this.getVisible() && entry.isIntersecting) {\n\t\t\t\t\t\t\tthis._loadContent();\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t{ rootMargin: \"0px\", threshold: 0.1 }\n\t\t\t);\n\t\t}\n\t\tthis._containerObserver?.disconnect();\n\t\t//observe container\n\t\tif (target) {\n\t\t\tthis._containerObserver.observe(target);\n\t\t}\n\t}\n\n\t/**\n\t * Create inner control for storing content from panel\n\t *\n\t * @private\n\t */\n\tprivate _createInnerControl(): void {\n\t\tconst layout = this.getProperty(\"orientation\") as OrientationType;\n\n\t\tif (layout === OrientationType.Horizontal || layout === OrientationType.Vertical) {\n\t\t\tif (!this._wrapper) {\n\t\t\t\tthis._wrapper = new FlexBox(`${this.getId()}-wrapper`, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\trenderType: \"Bare\"\n\t\t\t\t}).addStyleClass(\"sapCuxBaseWrapper\");\n\t\t\t\tthis.addDependent(this._wrapper);\n\t\t\t}\n\t\t\tthis._wrapper.setDirection(layout === OrientationType.Horizontal ? \"Row\" : \"Column\");\n\t\t} else if (!this._iconTabBar) {\n\t\t\tthis._iconTabBar = new IconTabBar(`${this.getId()}-iconTabBar`, {\n\t\t\t\texpandable: true,\n\t\t\t\tbackgroundDesign: BackgroundDesign.Transparent,\n\t\t\t\theaderMode: \"Inline\",\n\t\t\t\theaderBackgroundDesign: BackgroundDesign.Transparent,\n\t\t\t\tselect: (event: Event) => this._onPanelSelect(event)\n\t\t\t});\n\t\t\tthis.addDependent(this._iconTabBar);\n\t\t}\n\t}\n\n\t/**\n\t * Update container header information\n\t *\n\t * @private\n\t */\n\tpublic _updateContainerHeader(control: BaseContainer | BasePanel): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isContainer = control instanceof BaseContainer;\n\t\tconst targetControl = !isContainer && isSideBySideLayout ? this : control;\n\n\t\t//clear container header elements\n\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentLeft\") as HBox)?.removeAllItems();\n\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentRight\") as HBox)?.removeAllItems();\n\n\t\t//update container header elements\n\t\tthis._updateHeader(control);\n\t}\n\n\t/**\n\t * Updates header information of a specified container or a panel\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - can be container or panel\n\t */\n\tprivate _updateHeader(control: BaseContainer | BasePanel): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isContainer = control instanceof BaseContainer;\n\n\t\t//Update Title\n\t\tconst headerTitle = this._controlMap.get(control.getId() + \"-header-title\") as Title;\n\t\theaderTitle?.setText(control.getProperty(\"title\") as string);\n\t\theaderTitle?.setVisible((control.getProperty(\"title\") as string)?.trim().length > 0);\n\n\t\t//Update Panel Header, if applicable\n\t\tif (!isContainer && isSideBySideLayout) {\n\t\t\tthis._getIconTabFilter(control)?.setText(control.getProperty(\"title\") as string);\n\t\t}\n\n\t\t//Add common header elements\n\t\tif (this._getLayout()) {\n\t\t\tthis._addLayoutHeaderElements();\n\t\t}\n\n\t\tconst currentControl = isContainer && isSideBySideLayout ? this._getSelectedPanel() : control;\n\t\tconst targetControl = !isContainer && isSideBySideLayout ? this : control;\n\n\t\t//Update Menu Items\n\t\tconst menuItems = this._filterVisibleHeaderElements(currentControl?.getMenuItems());\n\t\tif (menuItems.length > 0) {\n\t\t\tthis._addMenuItems(targetControl, menuItems);\n\t\t}\n\n\t\t//Update Action Buttons\n\t\t(currentControl?.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton: Button) => {\n\t\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentRight\") as HBox)?.addItem(this._getHeaderButton(actionButton));\n\t\t});\n\t}\n\n\t/**\n\t * Attaches layout header elements like settings menu and full screen action to each\n\t * panel in the container, if enabled.\n\t *\n\t * @private\n\t */\n\tprivate _addLayoutHeaderElements(): void {\n\t\tconst attachHeaderElements = (control: BaseContainer | BasePanel) => {\n\t\t\tconst elements = [\n\t\t\t\t{ property: \"enableFullScreen\", aggregation: \"menuItems\", headerElement: this._getFullScreenMenuItem(control) },\n\t\t\t\t{ property: \"enableSettings\", aggregation: \"menuItems\", headerElement: this._getHomeSettingsMenuItem(control) },\n\t\t\t\t{ property: \"enableFullScreen\", aggregation: \"actionButtons\", headerElement: this._getFullScreenButton(control) }\n\t\t\t];\n\n\t\t\telements.forEach(({ property, aggregation, headerElement }) => {\n\t\t\t\tconst currentPropertyValue = control.getProperty(property) as boolean;\n\t\t\t\tconst previousPropertyValue = this._commonHeaderElementStates.get(`${headerElement.getId()}-${property}`);\n\n\t\t\t\t//update common header elements only if there's a change in property value\n\t\t\t\tif (currentPropertyValue !== previousPropertyValue) {\n\t\t\t\t\tthis._commonHeaderElementStates.set(`${headerElement.getId()}-${property}`, currentPropertyValue);\n\n\t\t\t\t\tif (currentPropertyValue) {\n\t\t\t\t\t\tcontrol.addAggregation(aggregation, headerElement);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontrol.removeAggregation(aggregation, headerElement);\n\t\t\t\t\t}\n\n\t\t\t\t\t// set full screen element relations\n\t\t\t\t\tif (property === \"enableFullScreen\") {\n\t\t\t\t\t\tthis.setFullScreenElementRelations({\n\t\t\t\t\t\t\tisFullScreenEnabled: currentPropertyValue,\n\t\t\t\t\t\t\tcontrol,\n\t\t\t\t\t\t\taggregation,\n\t\t\t\t\t\t\theaderElement\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Add common header elements for container\n\t\tattachHeaderElements(this);\n\n\t\t// Add common header elements for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(attachHeaderElements);\n\n\t\t// setup full screen elements if required\n\t\tthis._setupFullScreenElements();\n\t}\n\n\t/**\n\t * Register/Degister elements for full screen, if enabled.\n\t *\n\t * @private\n\t */\n\tprivate _setupFullScreenElements() {\n\t\tconst layout = this._getLayout();\n\t\tconst setupFullScreenElement = (control: BaseContainer | BasePanel) => {\n\t\t\tconst currentPropertyValue = control.getProperty(\"enableFullScreen\") as boolean;\n\t\t\tconst previousPropertyValue = this._commonHeaderElementStates.get(`${control.getId()}-enableFullScreen`);\n\n\t\t\tif (currentPropertyValue !== previousPropertyValue) {\n\t\t\t\tthis._commonHeaderElementStates.set(`${control.getId()}-enableFullScreen`, currentPropertyValue);\n\n\t\t\t\tif (currentPropertyValue) {\n\t\t\t\t\tlayout?.registerFullScreenElement(control);\n\t\t\t\t} else {\n\t\t\t\t\tlayout?.deregisterFullScreenElement(control);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update index of full screen element\n\t\t\tif (currentPropertyValue) {\n\t\t\t\tlayout?.updateFullScreenElement(control, {\n\t\t\t\t\tindex: layout?.indexOfItem(this)\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// Register full screen elements for container\n\t\tsetupFullScreenElement(this);\n\n\t\t// Register full screen elements for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(setupFullScreenElement);\n\t}\n\n\t/**\n\t * Sets or removes the full screen element relations based on the provided configuration.\n\t *\n\t * @private\n\t * @param {FullScreenElementRelation} relation - The configuration object containing the full screen element relation details.\n\t * @param {boolean} relation.isFullScreenEnabled - Indicates whether full screen is enabled.\n\t * @param {Control} relation.control - The control to set or remove the association.\n\t * @param {string} relation.aggregation - The aggregation type (e.g., \"actionButtons\").\n\t * @param {Element} relation.headerElement - The header element to associate or disassociate.\n\t *\n\t * @returns {void}\n\t */\n\tprivate setFullScreenElementRelations(relation: FullScreenElementRelation): void {\n\t\tconst { isFullScreenEnabled, control, aggregation, headerElement } = relation;\n\t\tconst targetAggregation = aggregation === \"actionButtons\" ? \"fullScreenButton\" : \"fullScreenMenuItem\";\n\n\t\tif (isFullScreenEnabled) {\n\t\t\tcontrol.setAssociation(targetAggregation, headerElement, true);\n\t\t} else {\n\t\t\tcontrol.removeAssociation(targetAggregation, headerElement, true);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the my home settings menu item for a given panel.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} panel - The panel for which to retrieve the home settings menu item.\n\t * @returns {MenuItem} The settings menu item for the given panel.\n\t */\n\tprivate _getHomeSettingsMenuItem(panel: BaseContainer | BasePanel): MenuItem {\n\t\tconst id = `${panel.getId()}-settings`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst menuItem = new MenuItem(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\t\ticon: \"sap-icon://user-settings\",\n\t\t\t\tpress: () => {\n\t\t\t\t\t//open settings dialog\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.openSettingsDialog();\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(menuItem, \"myHomeSettings\");\n\t\t\tthis._controlMap.set(id, menuItem);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full screen menu item for a given panel.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} panel - The panel for which to retrieve the home settings menu item.\n\t * @returns {MenuItem} The settings menu item for the given panel.\n\t */\n\tprivate _getFullScreenMenuItem(panel: BaseContainer | BasePanel): MenuItem {\n\t\tconst id = `${panel.getId()}-showMore`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst fullScreenMenuItem = new MenuItem(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"expand\"),\n\t\t\t\ticon: \"sap-icon://display-more\",\n\t\t\t\tpress: () => {\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.toggleFullScreen(panel);\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(fullScreenMenuItem, \"toggleFullScreen\");\n\t\t\tthis._controlMap.set(id, fullScreenMenuItem);\n\t\t}\n\t\treturn this._controlMap.get(id) as MenuItem;\n\t}\n\n\t/**\n\t * Generates a full screen action button for a given control, which can be a panel or a container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control for which the full screen button is generated.\n\t * @returns {Button} A Button instance configured to toggle full screen mode for the specified control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\tconst id = `${control.getId()}-fullScreen`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst fullScreenButton = new Button(id, {\n\t\t\t\ttext: this._i18nBundle.getText(\"expand\"),\n\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\tpress: () => {\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.toggleFullScreen(control);\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(fullScreenButton, \"toggleFullScreen\");\n\t\t\tthis._controlMap.set(id, fullScreenButton);\n\t\t\tthis._exemptedActions.push(id);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as Button;\n\t}\n\n\t/**\n\t * Returns the selected panel in the IconTabBar inner control in\n\t * case of SideBySide layout\n\t *\n\t * @private\n\t * @returns {BasePanel} selected panel\n\t */\n\tpublic _getSelectedPanel(): BasePanel {\n\t\tconst panel =\n\t\t\tthis.getContent()?.find((panel) => panel.getProperty(\"key\") === this.getProperty(\"selectedKey\")) || this.getContent()?.[0];\n\t\tthis.setProperty(\"selectedKey\", panel?.getProperty(\"key\"), true);\n\n\t\treturn panel;\n\t}\n\n\t/**\n\t * Add content from all panels to the layout-specific inner control\n\t *\n\t * @private\n\t */\n\tprivate _addAllPanelContent(): void {\n\t\tconst panels = this.getContent() || [];\n\n\t\tif (this.getProperty(\"orientation\") === OrientationType.SideBySide) {\n\t\t\tthis._iconTabBar.removeAllItems();\n\t\t\tpanels.forEach((panel) => this._iconTabBar.addItem(this._getIconTabFilter(panel)));\n\t\t\tthis._iconTabBar.setSelectedKey(this.getProperty(\"selectedKey\") as string);\n\t\t}\n\t}\n\n\t/**\n\t * Returns header of the specified panel after updating it\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel to be updated\n\t * @returns {HBox} header associated with the panel\n\t */\n\tpublic getPanelHeader(panel: BasePanel): HBox {\n\t\tconst header = this._createHeader(panel);\n\t\tconst isTitleVisible = (panel.getProperty(\"title\") as string)?.trim().length > 0;\n\t\tconst hasContainerTitle = (this.getProperty(\"title\") as string)?.trim().length > 0;\n\n\t\t//update panel header elements\n\t\tthis._updateContainerHeader(panel);\n\n\t\t//add header styling only if any of the header elements are visible\n\t\theader.toggleStyleClass(\n\t\t\t\"sapCuxPanelHeader\",\n\t\t\thasContainerTitle &&\n\t\t\t\t(isTitleVisible ||\n\t\t\t\t\tthis._filterVisibleHeaderElements(panel.getMenuItems()).length > 0 ||\n\t\t\t\t\tthis._filterVisibleHeaderElements(panel.getActionButtons()).length > 0)\n\t\t);\n\n\t\treturn header;\n\t}\n\n\t/**\n\t * Filters the provided array of header elements to include only those that are visible.\n\t *\n\t * @private\n\t * @template T - The type of elements in the array, which can be either MenuItem or Button.\n\t * @param {T[]} [elements=[]] - The array of elements to filter. Defaults to an empty array if not provided.\n\t *\n\t * @returns {T[]} An array of elements that are visible.\n\t */\n\tprivate _filterVisibleHeaderElements<T extends MenuItem | Button>(elements: T[] = []): T[] {\n\t\treturn elements.filter((element) => element.getVisible());\n\t}\n\n\t/**\n\t * Setter for container title\n\t *\n\t * @private\n\t * @param {string} title - updated title\n\t * @returns {BaseContainer} BaseContainer instance for chaining\n\t */\n\tpublic _setTitle(title: string): BaseContainer {\n\t\t//suppress invalidate to prevent container re-rendering. re-render only the concerned element\n\t\tthis.setProperty(\"title\", title, true);\n\t\t(this._controlMap.get(`${this.getId()}-header-title`) as Title).setText(title);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds menu items to a control and sets up a menu button to display them.\n\t * If the menu for the control doesn't exist, it creates a new one.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to which the menu items will be added.\n\t * @param {MenuItem[]} menuItems - An array of menu items to be added to the menu.\n\t */\n\tprivate _addMenuItems(control: BaseContainer | BasePanel, menuItems: MenuItem[]): void {\n\t\tif (!this._controlMap.get(`${control.getId()}-menu`)) {\n\t\t\t//create menu list\n\t\t\tconst list = new List(`${control.getId()}-list`, {\n\t\t\t\titemPress: (event) => (event.getSource<List>().getParent() as Popover).close()\n\t\t\t});\n\t\t\tthis._controlMap.set(`${control.getId()}-menu`, list);\n\t\t\tconst invisiblePopoverText = getInvisibleText(\n\t\t\t\trecycleId(`${control.getId()}-popoverTitle`),\n\t\t\t\tthis._i18nBundle.getText(\"actions\")\n\t\t\t);\n\t\t\t//create menu popover\n\t\t\tconst menuPopover = new Popover(recycleId(`${control.getId()}-popover`), {\n\t\t\t\tplacement: PlacementType.VerticalPreferredBottom,\n\t\t\t\tshowHeader: false,\n\t\t\t\tariaLabelledBy: [invisiblePopoverText ? invisiblePopoverText?.getId() : \"\"],\n\t\t\t\tcontent: [list, invisiblePopoverText]\n\t\t\t});\n\n\t\t\tconst controlId = control.getId();\n\t\t\tconst containerTitleId = `${controlId}-header`;\n\n\t\t\t//create menu button\n\t\t\tconst menuButton = new Button(`${control.getId()}-menu-btn`, {\n\t\t\t\ticon: \"sap-icon://slim-arrow-down\",\n\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\ttooltip: this._i18nBundle.getText(\"more\"),\n\t\t\t\tariaLabelledBy: [containerTitleId],\n\t\t\t\tpress: (event) => menuPopover.openBy(event.getSource<Button>())\n\t\t\t});\n\t\t\tthis._controlMap.set(`${control.getId()}-menu-btn`, menuButton);\n\t\t}\n\n\t\t//add menu button to header\n\t\t(this._controlMap.get(control.getId() + \"-header-contentLeft\") as HBox)?.addItem(\n\t\t\tthis._controlMap.get(`${control.getId()}-menu-btn`) as Button\n\t\t);\n\n\t\t//Clear existing menu items and add new ones\n\t\t(this._controlMap.get(`${control.getId()}-menu`) as List).removeAllItems();\n\t\tmenuItems.forEach((item) => (this._controlMap.get(`${control.getId()}-menu`) as List).addItem(this._getMenuListItem(item)));\n\t}\n\n\t/**\n\t * Creates and returns a button for the corresponding header ActionButton\n\t *\n\t * @private\n\t * @param {Button} headerButton - ActionButton element\n\t * @returns {Button} Button instance created for the header element\n\t */\n\tprivate _getHeaderButton(headerButton: Button): Button {\n\t\tconst id = `${headerButton.getId()}-btn`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew Button(id, {\n\t\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\t\tpress: () => headerButton.firePress()\n\t\t\t\t})\n\t\t\t);\n\t\t\taddFESRSemanticStepName(this._controlMap.get(id) as Button, FESR_EVENTS.PRESS, getFESRId(headerButton));\n\t\t}\n\n\t\t//Update button details\n\t\tconst button = this._controlMap.get(id) as Button;\n\t\tbutton.setText(headerButton.getText());\n\t\tbutton.setTooltip(headerButton.getTooltip() as string);\n\t\tbutton.setIcon(headerButton.getIcon());\n\t\tbutton.setVisible(headerButton.getVisible());\n\t\tbutton.setEnabled(headerButton.getEnabled());\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Retrieves the layout associated with the container, if available.\n\t *\n\t * @private\n\t * @returns {BaseLayout} The layout associated with the BaseContainer.\n\t */\n\tpublic _getLayout(): BaseLayout {\n\t\treturn UI5Element.getElementById(this.getAssociation(\"layout\", null) as string) as BaseLayout;\n\t}\n\n\t/**\n\t * Retrieves or creates a menu list item for a given menu item.\n\t *\n\t * @private\n\t * @param {MenuItem} menuItem - The menu item for which to retrieve or create a list item.\n\t * @returns {StandardListItem} The menu list item associated with the provided menu item.\n\t */\n\tprivate _getMenuListItem(menuItem: MenuItem): StandardListItem {\n\t\tif (!this._controlMap.get(`${menuItem.getId()}-listItem`)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${menuItem.getId()}-listItem`,\n\t\t\t\tnew StandardListItem(`${menuItem.getId()}-listItem`, {\n\t\t\t\t\ttype: \"Active\",\n\t\t\t\t\ticon: menuItem.getIcon(),\n\t\t\t\t\ttitle: menuItem.getTitle(),\n\t\t\t\t\tpress: (event) => menuItem.firePress({ button: event.getSource<Button>() })\n\t\t\t\t})\n\t\t\t);\n\t\t\taddFESRSemanticStepName(\n\t\t\t\tthis._controlMap.get(`${menuItem.getId()}-listItem`) as StandardListItem,\n\t\t\t\tFESR_EVENTS.PRESS,\n\t\t\t\tgetFESRId(menuItem)\n\t\t\t);\n\t\t}\n\t\t//Update list item details\n\t\tconst menuListItem = this._controlMap.get(`${menuItem.getId()}-listItem`) as StandardListItem;\n\t\tmenuListItem.setIcon(menuItem.getIcon());\n\t\tmenuListItem.setTitle(menuItem.getTitle());\n\t\tmenuListItem.setVisible(menuItem.getVisible());\n\t\treturn menuListItem;\n\t}\n\n\t/**\n\t * Toggles the visibility of menu Item.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the menu item.\n\t * @returns {void}\n\t */\n\tpublic toggleMenuListItem(menuItem: MenuItem, show: boolean): void {\n\t\tif (menuItem) {\n\t\t\tconst menuListItem = this._getMenuListItem(menuItem);\n\t\t\tmenuListItem?.setVisible(show);\n\t\t\tmenuItem.setProperty(\"visible\", show, true);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of action button.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the action button.\n\t * @returns {void}\n\t */\n\tpublic toggleActionButton(actionButton: Button, show: boolean): void {\n\t\tif (actionButton) {\n\t\t\tconst actionButtonControl = this._getHeaderButton(actionButton);\n\t\t\tactionButtonControl?.setVisible(show);\n\t\t\tactionButton.setProperty(\"visible\", show, true);\n\t\t}\n\t}\n\n\tpublic removeContent(panel: BasePanel) {\n\t\tif (this.getProperty(\"selectedKey\") && this.getProperty(\"selectedKey\") === panel?.getProperty?.(\"key\")) {\n\t\t\tthis.setProperty(\"selectedKey\", undefined, true);\n\t\t}\n\t\tthis.removeAggregation(\"content\", panel);\n\t}\n\n\t/**\n\t * Gets current value of property \"width\".\n\t *\n\t * Default value is: \"100%\"\n\t * @returns {CSSSize} Value of property \"width\"\n\t */\n\tpublic getWidth(): CSSSize {\n\t\treturn this.getProperty(\"width\") as CSSSize;\n\t}\n\n\t/**\n\t * Toggles the visibility of action buttons within the container and/or its inner panels.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the action buttons.\n\t * @returns {void}\n\t */\n\tpublic toggleActionButtons(show: boolean): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tlet visibilityChanged = false;\n\t\tconst toggleActionButtons = (control: BaseContainer | BasePanel) => {\n\t\t\tcontrol.getActionButtons()?.forEach((actionButton) => {\n\t\t\t\tconst currentVisibility = actionButton.getVisible();\n\t\t\t\tif (currentVisibility !== show && !this._exemptedActions.includes(actionButton.getId())) {\n\t\t\t\t\tactionButton.setProperty(\"visible\", show, true);\n\t\t\t\t\tvisibilityChanged = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!isSideBySideLayout && visibilityChanged) {\n\t\t\t\tthis._updateContainerHeader(control);\n\t\t\t}\n\t\t};\n\n\t\t// Toggle action buttons for container\n\t\ttoggleActionButtons(this);\n\n\t\t// Toggle action buttons for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(toggleActionButtons);\n\n\t\t// Update Header Container if required\n\t\tif (isSideBySideLayout && visibilityChanged) {\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of the full screen button for the specified element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to toggle the full screen button.\n\t * @param {boolean} show - Indicates whether to show or hide the full screen button.\n\t */\n\tpublic toggleFullScreenElements(element: BaseContainer | BasePanel, show: boolean): void {\n\t\tconst fullScreenButton = UI5Element.getElementById(element.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t\tconst fullScreenMenuButton = UI5Element.getElementById(element.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst parent = element.getParent() as BaseContainer;\n\t\tlet elementVisibilityChanged = false;\n\t\tshow = !isPhone ? show : false;\n\t\t[fullScreenButton, fullScreenMenuButton].forEach((fullScreenElement: Button | MenuItem) => {\n\t\t\tif (fullScreenElement && show !== fullScreenElement.getVisible()) {\n\t\t\t\telementVisibilityChanged = true;\n\t\t\t\tfullScreenElement.setProperty(\"visible\", show, true);\n\t\t\t}\n\t\t});\n\t\tconst elementKey = element instanceof BasePanel && element.getKey();\n\t\tif (elementVisibilityChanged && (!isSideBySideLayout || (isSideBySideLayout && this.getProperty(\"selectedKey\") === elementKey))) {\n\t\t\tthis._updateContainerHeader(\n\t\t\t\tparent.getContent().length === 1 && !isSideBySideLayout ? (element.getParent() as BaseContainer) : element\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the device type based on the width of the container element.\n\t *\n\t * @private\n\t * @param {ResizeObserverEntry[]} entries - The entries returned by the ResizeObserver.\n\t * @returns {void}\n\t */\n\tprivate _setDeviceType(entries: ResizeObserverEntry[]): void {\n\t\tconst [entry] = entries;\n\t\tconst parentLayout = entry.target.parentNode as Element;\n\t\tconst width = parentLayout.clientWidth;\n\t\tconst deviceType = calculateDeviceType(width);\n\n\t\t//when width is zero, dom is not rendered hence setting device type can cause wrong calculation\n\t\tif (this._deviceType !== deviceType && width > 0) {\n\t\t\tthis._deviceType = deviceType;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the device type for the current instance.\n\t *\n\t * @private\n\t * @returns {DeviceType} - The device type. If the device type is not set, it calculates\n\t * and returns the device type based on the current device width.\n\t */\n\tpublic getDeviceType(): DeviceType {\n\t\treturn this._deviceType || calculateDeviceType();\n\t}\n\n\t/**\n\t * Records the performance metrics for the container.\n\t * This is applicable only if the container is part of a layout.\n\t *\n\t * @private\n\t */\n\tprivate _markPerformanceMetrics() {\n\t\tconst elementName = this.getMetadata().getName() as keyof typeof UIElements;\n\t\trecordElementLoadStart(elementName);\n\n\t\tthis.getContent()?.forEach((panel) => {\n\t\t\tpanel.attachEventOnce(\"loaded\", () => {\n\t\t\t\trecordElementLoadEnd(elementName);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Exit lifecycle method, to clean up resources.\n\t *\n\t * @private\n\t * @override\n\t */\n\texit(): void | undefined {\n\t\tthis._controlMap.forEach((control) => {\n\t\t\tcontrol.destroy();\n\t\t});\n\t\tthis._detachResizeHandler();\n\t}\n\n\t/**\n\t * Default implementation: returns undefined.\n\t */\n\tprotected getGenericPlaceholderContent(): string | undefined {\n\t\treturn undefined;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}