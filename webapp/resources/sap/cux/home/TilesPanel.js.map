{"version":3,"file":"TilesPanel.js","names":["sap","ui","define","Log","GridContainer","GridContainerItemLayoutData","Button","CustomListItem","Dialog","GenericTile","HBox","HeaderContainer","IllustratedMessage","IllustratedMessageSize","IllustratedMessageType","Label","List","ObjectIdentifier","Title","VBox","sap_m_library","EventBus","Icon","Lib","JSONModel","Config","Container","S4MyHome","__BasePanel","__MenuItem","___utils_Accessibility","__AppManager","___utils_Constants","___utils_DataFormatUtils","___utils_Device","___utils_DragDropUtils","___utils_FESRUtil","___utils_InsightsUtils","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","ButtonType","_finallyRethrows","finalizer","bind","LoadState","BasePanel","MenuItem","checkPanelExists","AppManager","DEFAULT_BG_COLOR","END_USER_COLORS","MYHOME_PAGE_ID","MYINSIGHT_SECTION_ID","SETTINGS_PANELS_KEYS","recycleId","DeviceType","fetchElementProperties","focusDraggedItem","addFESRId","addFESRSemanticStepName","FESR_EVENTS","createShowMoreActionButton","createShowMoreMenuItem","getAssociatedFullScreenMenuItem","sortMenuItems","tilesMenuItems","tilesContainerMenuItems","tilesActionButtons","tilesContainerActionButtons","DisplayFormat","favAppPanelName","appsConatinerlName","sortedMenuItems","REFRESH","ADD_APPS","EDIT_TILES","_showAddApps","last","StandardTileWidth","StandardWideTileWidth","Gap","TilesPanel","extend","metadata","library","properties","title","type","group","defaultValue","visibility","key","fullScreenName","defaultAggregation","aggregations","content","multiple","singularName","tiles","events","handleHidePanel","parameters","handleUnhidePanel","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","this","_insightsSectionTitle","_i18nBundle","getText","_addFromFavDialogId","getId","aInsightsApps","_headerVisible","init","_init","_this","BasePanel.prototype.init.call","_controlMap","Map","_oData","activateInsightsTiles","activateInsightsTilesOnPhone","activateInsightsTilesOnDesktop","_controlModel","appManagerInstance","getInstance","setProperty","refreshMenuItem","_createRefreshMenuItem","editTilesMenuItem","_createEditTilesMenuItem","menuItems","forEach","menuItem","addAggregation","_sortMenuItems","addTilesButton","_createAddTilesButton","ADD_TILES","actionButtons","actionButton","_createTilesFlexWrapper","getServiceAsync","VizInstantiationService","catch","error","Error","message","String","oEventBus","subscribe","sChannelId","sEventId","oData","Promise","resolve","createInsightSection","_addSectionViz","refreshData","_adjustLayout","_importdone","reject","_toggleTileActivity","_this2","toggleUserActions","event","show","getParameter","_temp2","_temp","_appSwitched","attachRouteMatched","warning","aSectionViz","sSectionId","reduce","promiseChain","oViz","isBookmark","addBookMark","addVisualization","vizId","stateData","status","publish","_showPlaceHolders","placeholderArray","Array","_calculatePlaceholderTileCount","fill","Loading","map","tileState","index","sizeBehavior","state","frameType","mode","visible","renderOnThemeChange","ariaRole","dropAreaOffset","setLayoutData","columns","undefined","_clearPlaceHolders","renderPanel","_renderPanel","_exit","_this3","_temp4","_result","_temp3","container","getParent","addFromFavAppMenuItem","_createAddFromFavMenuItem","_await$_this3$refresh","fireHandleHidePanel","_wasThrown","fireEvent","panelMenuItems","getAggregation","removeAllAggregation","_refreshData","refreshTiles","_this4","panelName","getMetadata","getName","fetchInsightApps","_this4$appManagerInst","_temp6","length","fireHandleUnhidePanel","isMobile","getDeviceType","Mobile","tilesMobileContainer","tilesContainer","sDefaultAggreName","getDefaultAggregationName","dynamicTiles","refresh","_getInsightsContainer","updatePanelsItemCount","bIsSmartBusinessTilePresent","some","oApp","isSmartBusinessTile","_temp5","load","name","_tilesWrapper","renderType","width","items","_createMobileFlexWrapper","_createWrapperFlexBox","setModel","addContent","scrollStep","scrollStepByItem","gridLayout","scrollTime","showDividers","addStyleClass","_attachAggregationToContainer","_updateTilesActivity","isPhoneScreen","bActivateInsightsTiles","Boolean","getProperty","bindAggregation","path","factory","context","getObject","oVisualization","instantiateVisualization","visualization","minRows","getDisplayFormat","Standard","bindProperty","_setDropAreaRectFunction","addDragDropConfigTo","oEvent","_handleTilesDnd","tilesDropAreaOffset","vizObj","getDropAreaRect","Object","defineProperty","value","domRef","getDomRef","mDropRect","getBoundingClientRect","left","right","top","bottom","height","sInsertPosition","oDragItem","oDropItem","iDragItemIndex","indexOfItem","iDropItemIndex","_DragnDropTiles","_this5","oDisplacedItem","oItemMoved","splice","moveConfigs","pageId","sourceSectionIndex","persConfig","sectionIndex","sourceVisualizationIndex","visualizationIndex","targetSectionIndex","targetVisualizationIndex","moveVisualization","setTimeout","handleEditTiles","_handleEditTiles","parent","getSource","_getLayout","openSettingsDialog","INSIGHTS_TILES","handleHideHeader","_handleHideHeader","_toggleHeaderActions","handleAddHeader","_handleAddHeader","_closeAddFromFavDialog","list","get","removeSelections","close","navigateToAppFinder","_navigateToAppFinder","navigationService","navigationObject","pageID","sectionID","navigate","target","shellHash","JSON","stringify","_getLegendColor","color","find","oColor","_handleAddFromFavApps","_this6","_getFavToAdd","appsToAdd","dialog","_generateAddFromFavAppsDialog","setVisible","_generateAddFromFavAppsListItems","open","_this7","fetchFavVizs","aFavApps","aDynamicApps","filter","oDynApp","isCount","aFilteredFavApps","iAppIndex","findIndex","oInsightApps","targetURL","_getSelectedInsights","getSelectedItems","destroyItems","listItems","app","alignItems","src","icon","backgroundColor","BGColor","size","text","subtitle","tooltip","data","item","addItem","setAddBtnEnabled","selectedItems","setEnabled","getAppFinderBtn","btnType","appFinderBtn","press","Default","PRESS","set","selectionChange","addButton","_addFromFavApps","enabled","illustrationSize","Small","illustrationType","AddDimensions","description","wrapping","justifyContent","Transparent","contentWidth","contentHeight","endButton","escapeHandler","buttons","addDependent","_this8","setBusy","_getSections","sections","promise","oMovingConfig","insightsSectionIndex","recentAppSectionIndex","section","visualizations","displayFormatHint","supportedDisplayFormats","_temp7","_calculateVisibleTileCount","insightsApps","layout","layoutDomRef","apps","count","isHeaderVisible","sectionNodeIndex","sectionDomRef","childNodes","domProperties","availableWidth","widthMap","StandardWide","nextTileWidth","Math","floor","isMobileDevice","visibleTileCount","isElementExpanded","_getCurrentExpandedElementName","slice","showFullScreenButton","includes","toggleActionButton","toggleFullScreenElements","fullScreenButton","fullScreenText","getTitle","updateMenuItem","SHOW_MORE","updateActionButton","insightsContainer","getContainerMenuItems","_getContainerMenuItems","_containerMenuItems","containerRefresh","containerEditTiles","containerShowMore","containerAddFromFav","getContainerActionButtons","_getContainerActionButtons","_containerActionButtons","push","containerFullScreenActionButton","fesrId","_this9","_temp8","bShow","toggleMenuListItem"],"sources":["TilesPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerItemLayoutData from \"sap/f/GridContainerItemLayoutData\";\nimport Button from \"sap/m/Button\";\nimport CustomListItem from \"sap/m/CustomListItem\";\nimport Dialog from \"sap/m/Dialog\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HBox from \"sap/m/HBox\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageSize from \"sap/m/IllustratedMessageSize\";\nimport IllustratedMessageType from \"sap/m/IllustratedMessageType\";\nimport Label from \"sap/m/Label\";\nimport List from \"sap/m/List\";\nimport ObjectIdentifier from \"sap/m/ObjectIdentifier\";\nimport Title from \"sap/m/Title\";\nimport VBox from \"sap/m/VBox\";\nimport { ButtonType, LoadState } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Icon from \"sap/ui/core/Icon\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { DropInfo$DropEventParameters } from \"sap/ui/core/dnd/DropInfo\";\nimport Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Config from \"sap/ushell/Config\";\nimport Container from \"sap/ushell/Container\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport Navigation from \"sap/ushell/services/Navigation\";\nimport VisualizationInstantiation from \"sap/ushell/services/VisualizationInstantiation\";\nimport BaseContainer from \"./BaseContainer\";\nimport BasePanel from \"./BasePanel\";\nimport InsightsContainer from \"./InsightsContainer\";\nimport MenuItem from \"./MenuItem\";\nimport { $TilesPanelSettings } from \"./TilesPanel\";\nimport { ICustomVisualization, ISectionAndVisualization, IVisualization } from \"./interface/AppsInterface\";\nimport { checkPanelExists } from \"./utils/Accessibility\";\nimport AppManager from \"./utils/AppManager\";\nimport { DEFAULT_BG_COLOR, END_USER_COLORS, MYHOME_PAGE_ID, MYINSIGHT_SECTION_ID, SETTINGS_PANELS_KEYS } from \"./utils/Constants\";\nimport { recycleId } from \"./utils/DataFormatUtils\";\nimport { DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { focusDraggedItem } from \"./utils/DragDropUtils\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS } from \"./utils/FESRUtil\";\nimport { createShowMoreActionButton, createShowMoreMenuItem, getAssociatedFullScreenMenuItem, sortMenuItems } from \"./utils/InsightsUtils\";\n\nexport enum tilesMenuItems {\n\tREFRESH = \"tiles-refresh\",\n\tADD_APPS = \"tiles-addSmartApps\",\n\tEDIT_TILES = \"tiles-editTiles\"\n}\n\nexport enum tilesContainerMenuItems {\n\tREFRESH = \"container-tiles-refresh\",\n\tADD_APPS = \"container-tiles-addSmartApps\",\n\tEDIT_TILES = \"container-tiles-editTiles\",\n\tSHOW_MORE = \"tilesContainerFullScreenMenuItem\"\n}\n\nexport enum tilesActionButtons {\n\tADD_TILES = \"tiles-addTilesButton\"\n}\n\nexport enum tilesContainerActionButtons {\n\tADD_TILES = \"container-tiles-addTilesButton\",\n\tSHOW_MORE = \"tilesContanerFullScreenActionButton\"\n}\n\nexport enum DisplayFormat {\n\tStandard = \"standard\",\n\tStandardWide = \"standardWide\"\n}\n\nconst favAppPanelName: string = \"sap.cux.home.FavAppPanel\";\nconst appsConatinerlName: string = \"sap.cux.home.AppsContainer\";\n\nconst sortedMenuItems: (tilesMenuItems | string)[] = [\n\ttilesMenuItems.REFRESH,\n\ttilesMenuItems.ADD_APPS,\n\ttilesMenuItems.EDIT_TILES,\n\t\"showMore\",\n\t\"settings\"\n];\n\nconst _showAddApps = () => {\n\treturn (Config.last(\"/core/shell/enablePersonalization\") || Config.last(\"/core/catalog/enabled\")) as boolean;\n};\n\nconst StandardTileWidth = 176;\nconst StandardWideTileWidth = 368;\nconst Gap = 16;\n\n/**\n *\n * Tiles Panel class for managing and storing Insights Tiles.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.122.0\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.TilesPanel\n */\n\nexport default class TilesPanel extends BasePanel {\n\tconstructor(idOrSettings?: string | $TilesPanelSettings);\n\tconstructor(id?: string, settings?: $TilesPanelSettings);\n\t/**\n\t * Constructor for a new Tiles Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $TilesPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\tprivate _oData!: Record<string, unknown>;\n\tprivate readonly _insightsSectionTitle: string = this._i18nBundle.getText(\"insights\") as string;\n\tprivate readonly _addFromFavDialogId: string = `${this.getId()}-addFromFavDialog`;\n\tprivate appManagerInstance!: AppManager;\n\tprivate VizInstantiationService!: VisualizationInstantiation;\n\tprivate tilesContainer!: GridContainer;\n\tprivate tilesMobileContainer!: HeaderContainer;\n\tprivate _tilesWrapper!: VBox;\n\tprivate aInsightsApps: ICustomVisualization[] | GenericTile[] = [];\n\tprivate _controlModel!: JSONModel;\n\tpublic _controlMap!: Map<string, Control | Element | UI5Element>;\n\tprivate _containerMenuItems!: MenuItem[];\n\tprivate _containerActionButtons!: Button[];\n\tprivate oEventBus!: EventBus;\n\tprivate insightsContainer!: InsightsContainer;\n\tprivate _appSwitched!: boolean;\n\tprivate _headerVisible: boolean = false;\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Title for the tiles panel\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Key for the tiles panel\n\t\t\t */\n\t\t\tkey: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The name of the URL parameter used to expand the container into full-screen mode.\n\t\t\t */\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", defaultValue: \"SI1\", visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"tiles\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Specifies the content aggregation of the panel.\n\t\t\t */\n\t\t\tcontent: { multiple: true, singularName: \"content\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Aggregation of tiles available within the tiles Panel\n\t\t\t */\n\t\t\ttiles: { type: \"sap.cux.home.App\", multiple: true, singularName: \"tile\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\thandleHidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t},\n\t\t\thandleUnhidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Initializes the Tiles Panel.\n\t *\n\t * @private\n\t * @override\n\t */\n\tinit() {\n\t\tsuper.init();\n\t\tthis._controlMap = new Map();\n\t\t//Initialise Tiles Model\n\t\tthis._oData = {\n\t\t\ttiles: [] as ICustomVisualization[],\n\t\t\tactivateInsightsTiles: true,\n\t\t\tactivateInsightsTilesOnPhone: false,\n\t\t\tactivateInsightsTilesOnDesktop: false\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t\tthis.setProperty(\"key\", \"tiles\");\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t\tconst refreshMenuItem = this._createRefreshMenuItem(tilesMenuItems.REFRESH, \"tilesRefresh\");\n\t\tconst editTilesMenuItem = this._createEditTilesMenuItem(tilesMenuItems.EDIT_TILES, \"manageTiles\");\n\n\t\tconst menuItems = [refreshMenuItem, editTilesMenuItem];\n\t\tmenuItems.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t\tthis._sortMenuItems(sortedMenuItems);\n\n\t\tconst addTilesButton = this._createAddTilesButton(tilesActionButtons.ADD_TILES, \"addTiles\");\n\n\t\tconst actionButtons = [addTilesButton];\n\t\tactionButtons.forEach((actionButton) => this.addAggregation(\"actionButtons\", actionButton));\n\n\t\tthis._createTilesFlexWrapper();\n\t\tContainer.getServiceAsync<VisualizationInstantiation>(\"VisualizationInstantiation\")\n\t\t\t.then((VizInstantiationService) => {\n\t\t\t\tthis.VizInstantiationService = VizInstantiationService;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\n\t\tthis.oEventBus = EventBus.getInstance();\n\t\t// Subscribe to the event\n\t\tthis.oEventBus.subscribe(\n\t\t\t\"importChannel\",\n\t\t\t\"tilesImport\",\n\t\t\tasync (sChannelId?: string, sEventId?: string, oData?) => {\n\t\t\t\tawait this.appManagerInstance.createInsightSection(this._i18nBundle.getText(\"insightsTiles\") as string);\n\t\t\t\tawait this._addSectionViz(oData as IVisualization[], MYINSIGHT_SECTION_ID);\n\t\t\t\tawait this.refreshData();\n\t\t\t\tthis._adjustLayout();\n\t\t\t\tthis._importdone();\n\t\t\t},\n\t\t\tthis\n\t\t);\n\n\t\t// Toggles the activity of tiles\n\t\tthis._toggleTileActivity();\n\t}\n\n\t/**\n\t * Toggles the activity of tiles on route change.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _toggleTileActivity(): void {\n\t\tconst toggleUserActions = async (event: Event<{ isMyHomeRoute: boolean }>) => {\n\t\t\tconst show = event.getParameter(\"isMyHomeRoute\");\n\t\t\tthis._controlModel.setProperty(\"/activateInsightsTiles\", show);\n\t\t\tif (show) {\n\t\t\t\tif (this._appSwitched) {\n\t\t\t\t\tawait this.refreshData(true);\n\t\t\t\t\tthis._appSwitched = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._appSwitched = true;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tS4MyHome.attachRouteMatched({}, toggleUserActions, this);\n\t\t} catch (error) {\n\t\t\tLog.warning(error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * Takes the visualizations and add it to the provided section id\n\t * @param {IVisualization[]} aSectionViz - array of visualizations\n\t * @param {string} sSectionId - section id where the visualizations to be added\n\t * @returns {any}\n\t */\n\tprivate _addSectionViz(aSectionViz: IVisualization[], sSectionId: string) {\n\t\treturn aSectionViz.reduce((promiseChain, oViz) => {\n\t\t\treturn promiseChain.then(() => {\n\t\t\t\tif (oViz.isBookmark) {\n\t\t\t\t\treturn this.appManagerInstance.addBookMark(oViz);\n\t\t\t\t} else {\n\t\t\t\t\treturn sSectionId\n\t\t\t\t\t\t? this.appManagerInstance.addVisualization(oViz.vizId, sSectionId)\n\t\t\t\t\t\t: this.appManagerInstance.addVisualization(oViz.vizId);\n\t\t\t\t}\n\t\t\t});\n\t\t}, Promise.resolve());\n\t}\n\n\t/**\n\t * Handles the completion of the import process.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _importdone() {\n\t\tconst stateData = { status: true };\n\t\tthis.oEventBus.publish(\"importChannel\", \"tilesImported\", stateData);\n\t}\n\n\t/**\n\t * Displays placeholder tiles while loading.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _showPlaceHolders() {\n\t\tconst placeholderArray = new Array(this._calculatePlaceholderTileCount()).fill(LoadState.Loading) as LoadState[];\n\t\tthis.aInsightsApps = placeholderArray.map((tileState: LoadState, index: number) => {\n\t\t\treturn new GenericTile(recycleId(`${this.getId()}--placeHolderTile--${index}`), {\n\t\t\t\tsizeBehavior: \"Responsive\",\n\t\t\t\tstate: tileState,\n\t\t\t\tframeType: \"OneByOne\",\n\t\t\t\tmode: \"IconMode\",\n\t\t\t\tvisible: true,\n\t\t\t\trenderOnThemeChange: true,\n\t\t\t\tariaRole: \"listitem\",\n\t\t\t\tdropAreaOffset: 8\n\t\t\t}).setLayoutData?.(\n\t\t\t\tnew GridContainerItemLayoutData(recycleId(`${this.getId()}--placeHolderTileLayoutData--${index}`), {\n\t\t\t\t\tcolumns: 2\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t\tthis._controlModel.setProperty(\"/tiles\", this.aInsightsApps, undefined, true);\n\t}\n\n\t/**\n\t * Clears the placeholder tiles.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _clearPlaceHolders() {\n\t\tthis._controlModel.setProperty(\"/tiles\", []);\n\t}\n\n\t/**\n\t * Renders the panel.\n\t *\n\t * @private\n\t * @returns {Promise<void>} A promise that resolves when the panel is rendered.\n\t */\n\tpublic async renderPanel(): Promise<void> {\n\t\ttry {\n\t\t\tconst container = this.getParent() as BaseContainer;\n\t\t\tthis._showPlaceHolders();\n\t\t\tif (checkPanelExists(container, appsConatinerlName, favAppPanelName)) {\n\t\t\t\tconst addFromFavAppMenuItem = this._createAddFromFavMenuItem(tilesMenuItems.ADD_APPS, \"smartAppsDialog\");\n\t\t\t\tthis.addAggregation(\"menuItems\", addFromFavAppMenuItem);\n\t\t\t\tthis._sortMenuItems(sortedMenuItems);\n\t\t\t}\n\t\t\treturn await this.refreshData();\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tthis.fireHandleHidePanel();\n\t\t} finally {\n\t\t\tthis.fireEvent(\"loaded\");\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Sorts the menu items based on the provided order.\n\t *\n\t * @private\n\t * @param {string[]} menuItems - The order of the menu items.\n\t */\n\tprivate _sortMenuItems(menuItems: string[]) {\n\t\tconst panelMenuItems = this.getAggregation(\"menuItems\") as MenuItem[];\n\t\tlet sortedMenuItems = sortMenuItems(menuItems, panelMenuItems);\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t\tsortedMenuItems?.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t}\n\n\t/**\n\t * Refreshes the data in the panel.\n\t *\n\t * @private\n\t * @param {boolean} [refreshTiles=false] - Whether to refresh the tiles.\n\t * @returns {Promise<void>} A promise that resolves when the data is refreshed.\n\t */\n\tpublic async refreshData(refreshTiles: boolean = false) {\n\t\tconst panelName = this.getMetadata().getName();\n\t\tthis.aInsightsApps = await this.appManagerInstance.fetchInsightApps(true, this._insightsSectionTitle);\n\t\tconst bIsSmartBusinessTilePresent = this.aInsightsApps.some((oApp) => oApp.isSmartBusinessTile);\n\t\tif (bIsSmartBusinessTilePresent) {\n\t\t\tawait Lib.load({ name: \"sap.cloudfnd.smartbusiness.lib.reusetiles\" });\n\t\t}\n\t\tthis._clearPlaceHolders();\n\t\tthis._controlModel.setProperty(\"/tiles\", this.aInsightsApps);\n\t\tif (this.aInsightsApps?.length) {\n\t\t\tthis.fireHandleUnhidePanel();\n\t\t\tif (refreshTiles) {\n\t\t\t\tconst isMobile = this.getDeviceType() === DeviceType.Mobile;\n\t\t\t\tconst container = isMobile ? this.tilesMobileContainer : this.tilesContainer;\n\t\t\t\tconst sDefaultAggreName = container.getMetadata().getDefaultAggregationName();\n\t\t\t\tconst dynamicTiles = (container.getAggregation(sDefaultAggreName) as ManagedObject[]) || [];\n\t\t\t\tdynamicTiles.forEach((tiles) => (tiles as ICustomVisualization).refresh?.());\n\t\t\t}\n\t\t\tthis._getInsightsContainer()?.updatePanelsItemCount(this.aInsightsApps.length, panelName);\n\t\t\tif (this._headerVisible) {\n\t\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insightsTiles\")} (${this.aInsightsApps.length})`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.fireHandleHidePanel();\n\t\t}\n\t}\n\n\t/**\n\t * Generates the wrapper for the tiles container, if it doesn't already exist\n\t *\n\t * @private\n\t * @override\n\t * @returns {sap.m.VBox} The tiles Vbox wrapper.\n\t */\n\tprivate _createTilesFlexWrapper() {\n\t\tif (!this._tilesWrapper) {\n\t\t\tthis._tilesWrapper = new VBox(`${this.getId()}-tilesWrapper`, {\n\t\t\t\trenderType: \"Bare\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\titems: [this._createMobileFlexWrapper(), this._createWrapperFlexBox()]\n\t\t\t});\n\t\t\tthis._tilesWrapper.setModel(this._controlModel);\n\t\t\tthis.addContent(this._tilesWrapper);\n\t\t}\n\t}\n\n\t/**\n\t * Generates wrapper for displaying tiles in mobile mode.\n\t * @private\n\t * @returns {sap.m.HeaderContainer} The generated tiles wrapper.\n\t */\n\n\tprivate _createMobileFlexWrapper(): HeaderContainer {\n\t\t// Check if the mobile container already exists\n\t\tif (!this.tilesMobileContainer) {\n\t\t\t// Create the HeaderContainer with required properties\n\t\t\tthis.tilesMobileContainer = new HeaderContainer(`${this.getId()}-insightsTilesMobileContainer`, {\n\t\t\t\tscrollStep: 0,\n\t\t\t\tscrollStepByItem: 1,\n\t\t\t\tgridLayout: true,\n\t\t\t\tscrollTime: 1000,\n\t\t\t\tshowDividers: false,\n\t\t\t\tvisible: \"{/isPhone}\"\n\t\t\t}).addStyleClass(\"sectionMarginTopTilesInsight sapMHeaderContainerMarginBottom\");\n\n\t\t\t// Attach aggregation to the container\n\t\t\tthis._attachAggregationToContainer(this.tilesMobileContainer);\n\t\t}\n\t\t// Return the existing or newly created container\n\t\treturn this.tilesMobileContainer;\n\t}\n\n\t/**\n\t * Generates app wrapper (GridContainer) for displaying tiles.\n\t * @private\n\t * @returns {sap.m.GridContainer} The generated tiles wrapper.\n\t */\n\n\tprivate _createWrapperFlexBox(): GridContainer {\n\t\t// Check if the tilesContainer already exists\n\t\tif (!this.tilesContainer) {\n\t\t\t// Create the GridContainer with required properties\n\t\t\tthis.tilesContainer = new GridContainer(`${this.getId()}-insightsTilesContainer`, {\n\t\t\t\tvisible: \"{= !${/isPhone}}\"\n\t\t\t}).addStyleClass(\"insightTiles sapUiSmallMarginTop sapUiSmallMarginBottom\");\n\t\t\t// Attach aggregation to the container\n\t\t\tthis._attachAggregationToContainer(this.tilesContainer);\n\t\t}\n\t\t// Return the existing or newly created container\n\t\treturn this.tilesContainer;\n\t}\n\n\t/**\n\t * Updates the activation flags for Insights Tiles based on the device type and viewport.\n\t *\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _updateTilesActivity(): void {\n\t\t// Activate Insights Tiles based on container in viewport\n\t\tconst isPhoneScreen: boolean = this.getDeviceType() === DeviceType.Mobile;\n\t\t// Explicitly type the property being retrieved\n\t\tconst bActivateInsightsTiles: boolean = Boolean(this._controlModel.getProperty(\"/activateInsightsTiles\"));\n\t\tthis._controlModel.setProperty(\"/activateInsightsTilesOnPhone\", bActivateInsightsTiles && isPhoneScreen);\n\t\tthis._controlModel.setProperty(\"/activateInsightsTilesOnDesktop\", bActivateInsightsTiles && !isPhoneScreen);\n\t}\n\t/**\n\t * Attaches necessary aggregations and configurations to the provided container.\n\t *\n\t * @private\n\t * @param {GridContainer | HeaderContainer} tilesContainer - The container to which the aggregation and events are to be attached.\n\t * @returns {void}\n\t *\n\t */\n\tprivate _attachAggregationToContainer(tilesContainer: GridContainer | HeaderContainer) {\n\t\ttilesContainer.setModel(this._controlModel);\n\t\tconst sDefaultAggreName = tilesContainer.getMetadata().getDefaultAggregationName();\n\t\tconst isPhoneScreen = this.getDeviceType() === DeviceType.Mobile;\n\t\ttilesContainer.bindAggregation(sDefaultAggreName, {\n\t\t\tpath: \"/tiles\",\n\t\t\tfactory: (id: string, context: Context): ManagedObject => {\n\t\t\t\tconst oApp = context.getObject() as ICustomVisualization;\n\t\t\t\tif (oApp instanceof GenericTile) {\n\t\t\t\t\treturn oApp;\n\t\t\t\t}\n\t\t\t\tconst oVisualization = this.VizInstantiationService.instantiateVisualization(oApp.visualization) as ICustomVisualization;\n\t\t\t\toVisualization.setLayoutData?.(\n\t\t\t\t\tnew GridContainerItemLayoutData(`${this.getId()}-itemLayoutData-${id}`, {\n\t\t\t\t\t\tminRows: 2,\n\t\t\t\t\t\tcolumns: oVisualization.getDisplayFormat?.() === DisplayFormat.Standard ? 2 : 4\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\toVisualization?.bindProperty?.(\n\t\t\t\t\t\"active\",\n\t\t\t\t\tisPhoneScreen ? \"/activateInsightsTilesOnPhone\" : \"/activateInsightsTilesOnDesktop\"\n\t\t\t\t);\n\t\t\t\tthis._setDropAreaRectFunction(oVisualization as ManagedObject);\n\t\t\t\treturn oVisualization as ManagedObject;\n\t\t\t}\n\t\t});\n\t\tthis.addDragDropConfigTo(tilesContainer, (oEvent) => this._handleTilesDnd(oEvent));\n\t}\n\n\t/**\n\t * Sets the drop area rectangle function for the given visualization.\n\t *\n\t * @private\n\t * @param {ManagedObject} oVisualization - The visualization object to set the drop area rectangle function.\n\t */\n\tprivate _setDropAreaRectFunction(oVisualization: ManagedObject) {\n\t\tconst tilesDropAreaOffset = 8;\n\t\tconst vizObj = oVisualization as { getDropAreaRect?: () => void };\n\n\t\tif (typeof vizObj.getDropAreaRect !== \"function\") {\n\t\t\tObject.defineProperty(oVisualization, \"getDropAreaRect\", {\n\t\t\t\tvalue: function (this: Control) {\n\t\t\t\t\tconst domRef = this.getDomRef();\n\t\t\t\t\tif (!domRef) return null;\n\t\t\t\t\tconst mDropRect = domRef.getBoundingClientRect();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tleft: mDropRect.left - tilesDropAreaOffset,\n\t\t\t\t\t\tright: mDropRect.right + tilesDropAreaOffset,\n\t\t\t\t\t\ttop: mDropRect.top,\n\t\t\t\t\t\tbottom: mDropRect.bottom,\n\t\t\t\t\t\twidth: mDropRect.width,\n\t\t\t\t\t\theight: mDropRect.height\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Handles the drag and drop of tiles.\n\t *\n\t * @private\n\t * @param {Event<DropInfo$DropEventParameters>} oEvent - The drop event parameters.\n\t */\n\tprivate _handleTilesDnd(oEvent: Event<DropInfo$DropEventParameters>) {\n\t\tconst sInsertPosition = oEvent.getParameter?.(\"dropPosition\"),\n\t\t\toDragItem = oEvent?.getParameter?.(\"draggedControl\") as Control,\n\t\t\toDropItem = oEvent.getParameter(\"droppedControl\") as Control,\n\t\t\tiDragItemIndex = (oDragItem.getParent() as FlexBox)?.indexOfItem(oDragItem);\n\t\tlet iDropItemIndex = (oDragItem.getParent() as FlexBox)?.indexOfItem(oDropItem);\n\n\t\tif (sInsertPosition === \"Before\" && iDragItemIndex === iDropItemIndex - 1) {\n\t\t\tiDropItemIndex--;\n\t\t} else if (sInsertPosition === \"After\" && iDragItemIndex === iDropItemIndex + 1) {\n\t\t\tiDropItemIndex++;\n\t\t}\n\n\t\tif (iDragItemIndex !== iDropItemIndex) {\n\t\t\tvoid this._DragnDropTiles(iDragItemIndex, iDropItemIndex, sInsertPosition as string);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the drag and drop of tiles asynchronously.\n\t *\n\t * @private\n\t * @param {number} iDragItemIndex - The index of the dragged item.\n\t * @param {number} iDropItemIndex - The index of the dropped item.\n\t * @param {string} sInsertPosition - The position to insert the item.\n\t * @returns {Promise<void>} A promise that resolves when the drag and drop operation is complete.\n\t */\n\tprivate async _DragnDropTiles(iDragItemIndex: number, iDropItemIndex: number, sInsertPosition: string) {\n\t\tif (sInsertPosition === \"Before\" && iDragItemIndex < iDropItemIndex) {\n\t\t\tiDropItemIndex--;\n\t\t} else if (sInsertPosition === \"After\" && iDragItemIndex > iDropItemIndex) {\n\t\t\tiDropItemIndex++;\n\t\t}\n\t\tconst oDisplacedItem = this.aInsightsApps[iDropItemIndex] as ICustomVisualization,\n\t\t\toItemMoved = this.aInsightsApps.splice(iDragItemIndex, 1)[0] as ICustomVisualization;\n\t\tthis.aInsightsApps.splice(iDropItemIndex, 0, oItemMoved);\n\t\tconst moveConfigs = {\n\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\tsourceSectionIndex: oItemMoved.persConfig?.sectionIndex as number,\n\t\t\tsourceVisualizationIndex: oItemMoved.persConfig?.visualizationIndex as number,\n\t\t\ttargetSectionIndex: oDisplacedItem.persConfig?.sectionIndex as number,\n\t\t\ttargetVisualizationIndex: oDisplacedItem.persConfig?.visualizationIndex as number\n\t\t};\n\t\tthis._controlModel.setProperty(\"/tiles\", this.aInsightsApps);\n\t\tawait this.appManagerInstance.moveVisualization(moveConfigs);\n\t\tawait this.refreshData(true);\n\t\t// Ensures focus on tile after Panel refresh during DnD.\n\t\tsetTimeout(() => {\n\t\t\tfocusDraggedItem(this.tilesContainer, iDropItemIndex);\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Handles the edit tiles event.\n\t *\n\t * @param {Event} event - The event object.\n\t */\n\tprivate handleEditTiles(event: Event) {\n\t\t/* If called from Panel Header event.source() will return TilesPanel, if called from Insights Container event.source() will return InsightsContainer.\n\t\t_getLayout is available at Container Level*/\n\t\tlet parent: ManagedObject = event.getSource<TilesPanel>().getParent() || this;\n\t\tif (parent instanceof TilesPanel) {\n\t\t\tparent = parent.getParent() as ManagedObject;\n\t\t}\n\t\t(parent as InsightsContainer)?._getLayout().openSettingsDialog(SETTINGS_PANELS_KEYS.INSIGHTS_TILES);\n\t}\n\n\t/**\n\t * Hides the header of the tiles panel.\n\t * @private\n\t */\n\tpublic handleHideHeader() {\n\t\tthis._headerVisible = false;\n\t\tthis.setProperty(\"title\", \"\");\n\t\tthis._toggleHeaderActions(false);\n\t}\n\n\t/**\n\t * Adds the header to the tiles panel.\n\t * @private\n\t */\n\tpublic handleAddHeader() {\n\t\tthis._headerVisible = true;\n\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insightsTiles\")} (${this.aInsightsApps.length})`);\n\t\tthis._toggleHeaderActions(true);\n\t}\n\n\t/**\n\t * Closes the \"Add from Favorites\" dialog.\n\t *\n\t * @private\n\t */\n\tprivate _closeAddFromFavDialog() {\n\t\tconst list = this._controlMap.get(`${this._addFromFavDialogId}-list`) as List;\n\t\tlist?.removeSelections();\n\t\t(this._controlMap.get(this._addFromFavDialogId) as Dialog)?.close();\n\t}\n\n\t/**\n\t * Navigates to the App Finder with optional group Id.\n\t * @async\n\t * @private\n\t */\n\tprivate async navigateToAppFinder() {\n\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\tconst navigationObject: { pageID: string; sectionID?: string } = {\n\t\t\tpageID: MYHOME_PAGE_ID,\n\t\t\tsectionID: MYINSIGHT_SECTION_ID\n\t\t};\n\t\tawait navigationService.navigate({\n\t\t\ttarget: {\n\t\t\t\tshellHash: `Shell-appfinder?&/catalog/${JSON.stringify(navigationObject)}`\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the key of the legend color based on the provided color value.\n\t * @param {string} color - The color value for which to retrieve the legend color key.\n\t * @returns {string} The legend color key corresponding to the provided color value, or the default background color key if not found.\n\t * @private\n\t */\n\tprivate _getLegendColor(color: string) {\n\t\treturn END_USER_COLORS().find((oColor) => oColor.value === color) || DEFAULT_BG_COLOR();\n\t}\n\n\t/**\n\t * Handles the addition of tiles from favorite apps.\n\t * @returns {Promise<void>} A Promise that resolves when the operation is complete.\n\t * @private\n\t */\n\tprivate async _handleAddFromFavApps() {\n\t\tconst appsToAdd = await this._getFavToAdd();\n\t\tconst dialog = this._generateAddFromFavAppsDialog();\n\t\t(this._controlMap.get(`${this._addFromFavDialogId}-errorMessage`) as IllustratedMessage)?.setVisible(appsToAdd.length === 0);\n\t\tthis._generateAddFromFavAppsListItems(appsToAdd);\n\t\tdialog.open();\n\t}\n\n\t/**\n\t * Retrieves the favorite visualizations to be added.\n\t *\n\t * @private\n\t * @async\n\t * @returns {Promise<ISectionAndVisualization[]>} A promise that resolves to an array of favorite visualizations to be added.\n\t */\n\tprivate async _getFavToAdd(): Promise<ISectionAndVisualization[]> {\n\t\tconst aFavApps: ISectionAndVisualization[] = await this.appManagerInstance.fetchFavVizs(false, true);\n\t\tconst aDynamicApps = aFavApps.filter(function (oDynApp) {\n\t\t\treturn oDynApp.isCount || oDynApp.isSmartBusinessTile;\n\t\t});\n\n\t\tconst aFilteredFavApps = aDynamicApps.filter((oDynApp) => {\n\t\t\tconst iAppIndex = this.aInsightsApps.findIndex(function (oInsightApps) {\n\t\t\t\treturn (\n\t\t\t\t\t(!oDynApp.visualization?.isBookmark &&\n\t\t\t\t\t\t(oInsightApps as ICustomVisualization).visualization?.vizId === oDynApp.visualization?.vizId) ||\n\t\t\t\t\t(oDynApp.visualization?.isBookmark &&\n\t\t\t\t\t\t(oInsightApps as ICustomVisualization).visualization?.targetURL === oDynApp.visualization?.targetURL)\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn iAppIndex === -1;\n\t\t});\n\n\t\treturn aFilteredFavApps;\n\t}\n\n\t/**\n\t * Retrieves the selected Apps from the dialog.\n\t * @returns {sap.m.ListItemBase[]} An array of selected Apps.\n\t * @private\n\t */\n\tprivate _getSelectedInsights() {\n\t\tconst list = this._controlMap.get(`${this._addFromFavDialogId}-list`) as List;\n\t\treturn list.getSelectedItems() || [];\n\t}\n\n\t/**\n\t * Generates list items for the \"Add from Favorites\" dialog.\n\t *\n\t * @private\n\t * @param {ISectionAndVisualization[]} appsToAdd - An array of favorite visualizations to be added.\n\t */\n\tprivate _generateAddFromFavAppsListItems(appsToAdd: ISectionAndVisualization[]) {\n\t\tconst id = this._addFromFavDialogId;\n\t\tconst list = this._controlMap.get(`${id}-list`) as List;\n\t\tif (appsToAdd.length) {\n\t\t\tlist.destroyItems();\n\t\t\tconst listItems = appsToAdd.map(\n\t\t\t\t(app, index) =>\n\t\t\t\t\tnew CustomListItem({\n\t\t\t\t\t\tid: `${id}-listItem-${index}`,\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\tnew HBox({\n\t\t\t\t\t\t\t\tid: `${id}-listItem-${index}-content`,\n\t\t\t\t\t\t\t\talignItems: \"Center\",\n\t\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t\tnew Icon({\n\t\t\t\t\t\t\t\t\t\tid: `${id}-listItem-${index}-content-icon`,\n\t\t\t\t\t\t\t\t\t\tsrc: app.icon,\n\t\t\t\t\t\t\t\t\t\tbackgroundColor: this._getLegendColor(\n\t\t\t\t\t\t\t\t\t\t\ttypeof app.BGColor === \"object\" ? app.BGColor.key : (app.BGColor ?? \"\")\n\t\t\t\t\t\t\t\t\t\t).value,\n\t\t\t\t\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\t\t\t\t\twidth: \"2.25rem\",\n\t\t\t\t\t\t\t\t\t\theight: \"2.25rem\",\n\t\t\t\t\t\t\t\t\t\tsize: \"1.25rem\"\n\t\t\t\t\t\t\t\t\t}).addStyleClass(\"sapUiRoundedBorder sapUiTinyMargin\"),\n\t\t\t\t\t\t\t\t\tnew ObjectIdentifier({\n\t\t\t\t\t\t\t\t\t\tid: `${id}-listItem-${index}-content-identifier`,\n\t\t\t\t\t\t\t\t\t\ttitle: app.title,\n\t\t\t\t\t\t\t\t\t\ttext: app.subtitle,\n\t\t\t\t\t\t\t\t\t\ttooltip: app.title\n\t\t\t\t\t\t\t\t\t}).addStyleClass(\"sapUiTinyMargin\")\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t\t\t.addStyleClass(\"sapUiContentPadding\")\n\t\t\t\t\t\t.data(\"app\", app) as CustomListItem\n\t\t\t);\n\t\t\tlistItems.forEach((item) => list.addItem(item));\n\t\t}\n\t\tlist?.setVisible(appsToAdd.length !== 0);\n\t}\n\n\t/**\n\t * Generates the \"Add from Favorites\" dialog.\n\t *\n\t * @private\n\t * @returns {Dialog} The generated dialog.\n\t */\n\tprivate _generateAddFromFavAppsDialog(): Dialog {\n\t\tconst id = this._addFromFavDialogId;\n\t\tconst setAddBtnEnabled = () => {\n\t\t\tconst selectedItems = this._getSelectedInsights();\n\t\t\t(this._controlMap.get(`${id}-addBtn`) as Button).setEnabled(selectedItems.length > 0);\n\t\t};\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst getAppFinderBtn = (id: string, btnType?: ButtonType) => {\n\t\t\t\tconst appFinderBtn = new Button(id, {\n\t\t\t\t\ticon: \"sap-icon://action\",\n\t\t\t\t\ttext: this._i18nBundle.getText(\"appFinderBtn\"),\n\t\t\t\t\tpress: () => {\n\t\t\t\t\t\tthis._closeAddFromFavDialog();\n\t\t\t\t\t\tvoid this.navigateToAppFinder();\n\t\t\t\t\t},\n\t\t\t\t\tvisible: _showAddApps(),\n\t\t\t\t\ttype: btnType ?? ButtonType.Default\n\t\t\t\t});\n\t\t\t\taddFESRSemanticStepName(appFinderBtn, FESR_EVENTS.PRESS, \"tilesAppFinder\");\n\t\t\t\treturn appFinderBtn;\n\t\t\t};\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${id}-list`,\n\t\t\t\tnew List({\n\t\t\t\t\tid: `${id}-list`,\n\t\t\t\t\tmode: \"MultiSelect\",\n\t\t\t\t\tselectionChange: setAddBtnEnabled\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst addButton = new Button({\n\t\t\t\tid: `${id}-addBtn`,\n\t\t\t\ttext: this._i18nBundle.getText(\"addBtn\"),\n\t\t\t\ttype: \"Emphasized\",\n\t\t\t\tpress: () => {\n\t\t\t\t\tvoid this._addFromFavApps();\n\t\t\t\t},\n\t\t\t\tenabled: false\n\t\t\t});\n\t\t\taddFESRSemanticStepName(addButton, FESR_EVENTS.PRESS, \"addSmartApps\");\n\t\t\tthis._controlMap.set(`${id}-addBtn`, addButton);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${id}-errorMessage`,\n\t\t\t\tnew IllustratedMessage({\n\t\t\t\t\tid: `${id}-errorMessage`,\n\t\t\t\t\tillustrationSize: IllustratedMessageSize.Small,\n\t\t\t\t\tillustrationType: IllustratedMessageType.AddDimensions,\n\t\t\t\t\ttitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\t\tdescription: this._i18nBundle.getText(\"tilesSectionNoDataDescription\"),\n\t\t\t\t\tvisible: true\n\t\t\t\t}).addStyleClass(\"sapUiLargeMarginTop\")\n\t\t\t);\n\t\t\tconst dialog = new Dialog(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"addSmartApps\"),\n\t\t\t\tcontent: [\n\t\t\t\t\tnew Label({\n\t\t\t\t\t\tid: `${id}-label`,\n\t\t\t\t\t\ttext: this._i18nBundle.getText(\"suggTileDialogLabel\"),\n\t\t\t\t\t\twrapping: true\n\t\t\t\t\t}).addStyleClass(\"sapMTitleAlign sapUiTinyMarginTopBottom sapUiSmallMarginBeginEnd\"),\n\t\t\t\t\tnew HBox({\n\t\t\t\t\t\tid: `${id}-textContainer`,\n\t\t\t\t\t\tjustifyContent: \"SpaceBetween\",\n\t\t\t\t\t\talignItems: \"Center\",\n\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\tnew Title({\n\t\t\t\t\t\t\t\tid: `${id}-text`,\n\t\t\t\t\t\t\t\ttext: this._i18nBundle.getText(\"suggTileDialogTitle\")\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tgetAppFinderBtn(`${id}-addAppsBtn`, ButtonType.Transparent)\n\t\t\t\t\t\t]\n\t\t\t\t\t}).addStyleClass(\"sapUiTinyMarginTop dialogHeader sapUiSmallMarginBeginEnd\"),\n\t\t\t\t\tthis._controlMap.get(`${id}-list`) as List,\n\t\t\t\t\tthis._controlMap.get(`${id}-errorMessage`) as IllustratedMessage\n\t\t\t\t],\n\t\t\t\tcontentWidth: \"42.75rem\",\n\t\t\t\tcontentHeight: \"32.5rem\",\n\t\t\t\tendButton: new Button({\n\t\t\t\t\tid: `${id}-addFromFavDialogCloseBtn`,\n\t\t\t\t\ttext: this._i18nBundle.getText(\"XBUT_CLOSE\"),\n\t\t\t\t\tpress: this._closeAddFromFavDialog.bind(this)\n\t\t\t\t}),\n\t\t\t\tescapeHandler: this._closeAddFromFavDialog.bind(this),\n\t\t\t\tbuttons: [\n\t\t\t\t\tthis._controlMap.get(`${id}-addBtn`) as Button,\n\t\t\t\t\tnew Button({\n\t\t\t\t\t\tid: `${id}-cancelBtn`,\n\t\t\t\t\t\ttext: this._i18nBundle.getText(\"cancelBtn\"),\n\t\t\t\t\t\tpress: this._closeAddFromFavDialog.bind(this)\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t}).addStyleClass(\"sapContrastPlus sapCuxAddFromInsightsDialog\");\n\t\t\tthis.addDependent(dialog);\n\t\t\tthis._controlMap.set(id, dialog);\n\t\t}\n\t\tsetAddBtnEnabled();\n\t\treturn this._controlMap.get(id) as Dialog;\n\t}\n\n\t/**\n\t * Handles the addition of tiles from favorite apps.\n\t *\n\t * @private\n\t * @async\n\t * @returns {Promise<void>} A promise that resolves when the operation is complete.\n\t */\n\tprivate async _addFromFavApps() {\n\t\tconst dialog = this._controlMap.get(this._addFromFavDialogId) as Dialog;\n\t\tdialog.setBusy(true);\n\t\tconst selectedItems = this._getSelectedInsights();\n\t\tconst sections = await this.appManagerInstance._getSections();\n\t\tawait selectedItems.reduce(async (promise, oApp) => {\n\t\t\tawait promise;\n\t\t\tconst app = oApp.data(\"app\") as ISectionAndVisualization;\n\t\t\tconst oMovingConfig = {\n\t\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\t\tsourceSectionIndex: app.persConfig?.sectionIndex as number,\n\t\t\t\tsourceVisualizationIndex: app.persConfig?.visualizationIndex as number,\n\t\t\t\ttargetSectionIndex: this.appManagerInstance.insightsSectionIndex,\n\t\t\t\ttargetVisualizationIndex: -1\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * If the app is a bookmark, we need to update the source and target section indices accordingly.\n\t\t\t * This is because bookmarks are added to the \"Recent Apps\" section,\n\t\t\t * which is always at the top of the list, and the insights section index is shifted by one.\n\t\t\t */\n\t\t\tif (app.visualization?.isBookmark) {\n\t\t\t\tconst recentAppSectionIndex = sections.findIndex((section) => section.default);\n\n\t\t\t\tif (recentAppSectionIndex === -1) {\n\t\t\t\t\toMovingConfig.sourceSectionIndex = 0;\n\t\t\t\t\toMovingConfig.sourceVisualizationIndex = 0;\n\t\t\t\t\toMovingConfig.targetSectionIndex = this.appManagerInstance.insightsSectionIndex + 1;\n\t\t\t\t} else {\n\t\t\t\t\toMovingConfig.sourceSectionIndex = recentAppSectionIndex;\n\t\t\t\t\toMovingConfig.sourceVisualizationIndex = sections[recentAppSectionIndex]?.visualizations?.length || 0;\n\t\t\t\t\toMovingConfig.targetSectionIndex = this.appManagerInstance.insightsSectionIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (app.visualization?.displayFormatHint !== \"standard\" && app.visualization?.displayFormatHint !== \"standardWide\") {\n\t\t\t\tif (app.visualization?.supportedDisplayFormats === \"standard\") {\n\t\t\t\t\tapp.visualization.displayFormatHint = \"standard\";\n\t\t\t\t} else if (app.visualization?.supportedDisplayFormats === \"standardWide\") {\n\t\t\t\t\tapp.visualization.displayFormatHint = \"standardWide\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add Selected App to Insights Section\n\t\t\tif (!app.visualization?.vizId) {\n\t\t\t\t(app.visualization as IVisualization).vizId = app.visualization?.targetURL ?? \"\";\n\t\t\t}\n\t\t\tif (app.visualization?.isBookmark === true) {\n\t\t\t\tawait this.appManagerInstance.addBookMark(app.visualization, oMovingConfig);\n\t\t\t} else {\n\t\t\t\tawait this.appManagerInstance.addVisualization(app.visualization?.vizId as string, MYINSIGHT_SECTION_ID);\n\t\t\t}\n\t\t}, Promise.resolve());\n\n\t\tawait this.refreshData();\n\t\tdialog.setBusy(false);\n\t\tdialog.close();\n\t}\n\n\t/**\n\t * Calculates the number of visible tiles that can fit within the available width of the parent container.\n\t *\n\t * @private\n\t * @param {ICustomVisualization[]} insightsApps - An array of custom visualizations to be displayed as tiles.\n\t * @returns {number} - The number of visible tiles.\n\t */\n\tprivate _calculateVisibleTileCount(insightsApps: ICustomVisualization[]): number {\n\t\tconst layout = this._getInsightsContainer()?._getLayout();\n\t\tconst layoutDomRef = layout?.getDomRef();\n\t\tconst apps = insightsApps || [];\n\t\tlet count = 0;\n\n\t\tif (layoutDomRef && apps.length) {\n\t\t\tconst isHeaderVisible = layout.getProperty(\"showHeader\") as boolean;\n\t\t\tconst sectionNodeIndex = isHeaderVisible ? 1 : 0;\n\t\t\tconst sectionDomRef = layoutDomRef.childNodes[sectionNodeIndex] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tlet availableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tconst widthMap = {} as Record<DisplayFormat, number>;\n\n\t\t\twidthMap[DisplayFormat.Standard] = StandardTileWidth + Gap;\n\t\t\twidthMap[DisplayFormat.StandardWide] = StandardWideTileWidth + Gap;\n\n\t\t\tlet nextTileWidth = widthMap[(apps[count].visualization?.displayFormatHint ?? DisplayFormat.Standard) as DisplayFormat];\n\t\t\tdo {\n\t\t\t\tavailableWidth -= nextTileWidth;\n\t\t\t\t++count;\n\t\t\t\tnextTileWidth = widthMap[(apps[count]?.visualization?.displayFormatHint ?? DisplayFormat.Standard) as DisplayFormat];\n\t\t\t} while (availableWidth > nextTileWidth);\n\t\t}\n\n\t\treturn count || 1;\n\t}\n\n\tprivate _calculatePlaceholderTileCount(): number {\n\t\tconst layoutDomRef = this._getInsightsContainer()?._getLayout()?.getDomRef();\n\t\tlet count = 0;\n\t\tif (layoutDomRef) {\n\t\t\tconst sectionDomRef = layoutDomRef.childNodes[0] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tlet availableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tconst width = StandardTileWidth + Gap;\n\n\t\t\tcount = Math.floor(availableWidth / width);\n\t\t}\n\n\t\treturn count || 1;\n\t}\n\n\t/**\n\t * Adjusts the layout of the tiles panel based on the current layout and device type.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic _adjustLayout() {\n\t\tconst layout = this._getInsightsContainer()?._getLayout();\n\t\tconst isMobileDevice = this.getDeviceType() === DeviceType.Mobile;\n\n\t\tif (layout) {\n\t\t\tconst visibleTileCount = isMobileDevice\n\t\t\t\t? this.aInsightsApps?.length\n\t\t\t\t: this._calculateVisibleTileCount(this.aInsightsApps as ICustomVisualization[]);\n\t\t\tconst isElementExpanded = layout._getCurrentExpandedElementName() === this.getProperty(\"fullScreenName\");\n\t\t\tthis._controlModel.setProperty(\n\t\t\t\t\"/tiles\",\n\t\t\t\tisElementExpanded ? this.aInsightsApps : this.aInsightsApps?.slice(0, visibleTileCount)\n\t\t\t);\n\t\t\tthis._controlModel.setProperty(\"/isPhone\", isMobileDevice);\n\t\t\tthis._updateTilesActivity();\n\t\t\t//Show/Hide Full Screen Button if panel header is visible otherwise update visibility of container Full Screen Button\n\t\t\tconst showFullScreenButton = isElementExpanded || this.aInsightsApps.length > visibleTileCount;\n\t\t\tif (this._headerVisible) {\n\t\t\t\tif (!isMobileDevice) {\n\t\t\t\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) => {\n\t\t\t\t\t\tif (actionButton.getId().includes(tilesActionButtons.ADD_TILES)) {\n\t\t\t\t\t\t\tthis._getInsightsContainer().toggleActionButton(actionButton, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._getInsightsContainer()?.toggleFullScreenElements(this, showFullScreenButton);\n\t\t\t} else {\n\t\t\t\tconst fullScreenButton = getAssociatedFullScreenMenuItem(this);\n\t\t\t\tconst fullScreenText = fullScreenButton?.getTitle() ?? \"\";\n\t\t\t\tthis._getInsightsContainer()?.updateMenuItem(\n\t\t\t\t\tthis._controlMap.get(`${this.getId()}-${tilesContainerMenuItems.SHOW_MORE}`) as MenuItem,\n\t\t\t\t\tshowFullScreenButton,\n\t\t\t\t\tfullScreenText\n\t\t\t\t);\n\t\t\t\tthis._getInsightsContainer()?.updateActionButton(\n\t\t\t\t\tthis._controlMap.get(`${this.getId()}-${tilesContainerActionButtons.SHOW_MORE}`) as Button,\n\t\t\t\t\tshowFullScreenButton,\n\t\t\t\t\tfullScreenText\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the InsightsContainer instance associated with this TilesPanel.\n\t *\n\t * @private\n\t * @returns {InsightsContainer} The InsightsContainer instance.\n\t */\n\tprivate _getInsightsContainer(): InsightsContainer {\n\t\tif (!this.insightsContainer) {\n\t\t\tthis.insightsContainer = this.getParent() as InsightsContainer;\n\t\t}\n\t\treturn this.insightsContainer;\n\t}\n\n\t/**\n\t * Retrieves the menu items for the container.\n\t *\n\t * @private\n\t * @returns {MenuItem[]} An array of MenuItem instances.\n\t */\n\tpublic getContainerMenuItems(): MenuItem[] {\n\t\tif (!this._containerMenuItems) {\n\t\t\tconst containerRefresh = this._createRefreshMenuItem(tilesContainerMenuItems.REFRESH, \"containerTilesRefresh\");\n\t\t\tconst containerEditTiles = this._createEditTilesMenuItem(tilesContainerMenuItems.EDIT_TILES, \"containerManageTiles\");\n\t\t\tconst containerShowMore = createShowMoreMenuItem(this, tilesContainerMenuItems.SHOW_MORE, \"containerTilesShowMore\");\n\t\t\tconst container = this.getParent() as BaseContainer;\n\t\t\tthis._controlMap.set(`${this.getId()}-${tilesContainerMenuItems.SHOW_MORE}`, containerShowMore);\n\t\t\tthis._containerMenuItems = [containerRefresh, containerEditTiles, containerShowMore];\n\t\t\tif (checkPanelExists(container, appsConatinerlName, favAppPanelName)) {\n\t\t\t\tconst containerAddFromFav = this._createAddFromFavMenuItem(tilesContainerMenuItems.ADD_APPS, \"containerSmartAppsDialog\");\n\t\t\t\tthis._containerMenuItems.splice(1, 0, containerAddFromFav);\n\t\t\t}\n\t\t}\n\t\treturn this._containerMenuItems;\n\t}\n\n\t/**\n\t * Retrieves the action buttons for the container.\n\t *\n\t * @private\n\t * @returns {Button[]} An array of Button instances.\n\t */\n\tpublic getContainerActionButtons(): Button[] {\n\t\tif (!this._containerActionButtons) {\n\t\t\tthis._containerActionButtons = [];\n\t\t\tthis._containerActionButtons.push(\n\t\t\t\tthis._createAddTilesButton(tilesContainerActionButtons.ADD_TILES, \"containerSmartAppsDialog\")\n\t\t\t);\n\n\t\t\tconst containerFullScreenActionButton = createShowMoreActionButton(\n\t\t\t\tthis,\n\t\t\t\ttilesContainerActionButtons.SHOW_MORE,\n\t\t\t\t\"containerTilesShowMore\"\n\t\t\t);\n\t\t\tif (containerFullScreenActionButton) {\n\t\t\t\tthis._controlMap.set(`${this.getId()}-${tilesContainerActionButtons.SHOW_MORE}`, containerFullScreenActionButton);\n\t\t\t\tthis._containerActionButtons.push(containerFullScreenActionButton);\n\t\t\t}\n\t\t}\n\t\treturn this._containerActionButtons;\n\t}\n\n\t/**\n\t * Creates a refresh menu item.\n\t *\n\t * @private\n\t * @param {string} id - The ID of the menu item.\n\t * @param {string} [fesrId] - The FESR ID for the menu item.\n\t * @returns {MenuItem} The created MenuItem instance.\n\t */\n\tprivate _createRefreshMenuItem(id: string, fesrId?: string): MenuItem {\n\t\tconst menuItem = new MenuItem(`${this.getId()}-${id}`, {\n\t\t\ttitle: this._i18nBundle.getText(\"refresh\"),\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\tvisible: false,\n\t\t\tpress: () => void this.refreshData(true)\n\t\t});\n\t\tthis._controlMap.set(`${this.getId()}-${id}`, menuItem);\n\t\tif (fesrId) {\n\t\t\taddFESRId(menuItem, fesrId);\n\t\t}\n\n\t\treturn menuItem;\n\t}\n\n\t/**\n\t * Creates an \"Add from Favorites\" menu item.\n\t *\n\t * @private\n\t * @param {string} id - The ID of the menu item.\n\t * @param {string} [fesrId] - The FESR ID for the menu item.\n\t * @returns {MenuItem} The created MenuItem instance.\n\t */\n\tprivate _createAddFromFavMenuItem(id: string, fesrId?: string): MenuItem {\n\t\tif (!this._controlMap.get(`${this.getId()}-${id}`)) {\n\t\t\tconst menuItem = new MenuItem(`${this.getId()}-${id}`, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"addSmartApps\"),\n\t\t\t\ticon: \"sap-icon://duplicate\",\n\t\t\t\tvisible: false,\n\t\t\t\tpress: () => void this._handleAddFromFavApps()\n\t\t\t});\n\t\t\tthis._controlMap.set(`${this.getId()}-${id}`, menuItem);\n\t\t\tif (fesrId) {\n\t\t\t\taddFESRId(menuItem, fesrId);\n\t\t\t}\n\t\t}\n\t\treturn this._controlMap.get(`${this.getId()}-${id}`) as MenuItem;\n\t}\n\n\t/**\n\t * Creates an \"Edit Tiles\" menu item.\n\t *\n\t * @private\n\t * @param {string} id - The ID of the menu item.\n\t * @param {string} [fesrId] - The FESR ID for the menu item.\n\t * @returns {MenuItem} The created MenuItem instance.\n\t */\n\tprivate _createEditTilesMenuItem(id: string, fesrId?: string): MenuItem {\n\t\tconst menuItem = new MenuItem(`${this.getId()}-${id}`, {\n\t\t\ttitle: this._i18nBundle.getText(\"editLinkTiles\"),\n\t\t\ticon: \"sap-icon://edit\",\n\t\t\tvisible: false,\n\t\t\tpress: (event: Event) => this.handleEditTiles(event)\n\t\t});\n\t\tthis._controlMap.set(`${this.getId()}-${id}`, menuItem);\n\t\tif (fesrId) {\n\t\t\taddFESRId(menuItem, fesrId);\n\t\t}\n\n\t\treturn menuItem;\n\t}\n\n\t/**\n\t * Creates an \"Add Tiles\" button.\n\t *\n\t * @private\n\t * @param {string} id - The ID of the button.\n\t * @param {string} [fesrId] - The FESR ID for the button.\n\t * @returns {Button} The created Button instance.\n\t */\n\tprivate _createAddTilesButton(id: string, fesrId?: string): Button {\n\t\tconst actionButton = new Button(`${this.getId()}-${id}`, {\n\t\t\ttext: this._i18nBundle.getText(\"appFinderLink\"),\n\t\t\ttooltip: this._i18nBundle.getText(\"appFinderLink\"),\n\t\t\tpress: async () => {\n\t\t\t\tconst container = this._getInsightsContainer() as BaseContainer;\n\t\t\t\tif (checkPanelExists(container, appsConatinerlName, favAppPanelName)) {\n\t\t\t\t\t// Favorite App Panel is visible, proceed as usual\n\t\t\t\t\tvoid this._handleAddFromFavApps();\n\t\t\t\t} else {\n\t\t\t\t\t// Favorite App Panel is NOT visible, navigate to App Finder\n\t\t\t\t\tawait this.navigateToAppFinder();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis._controlMap.set(`${this.getId()}-${id}`, actionButton);\n\t\tif (fesrId) {\n\t\t\taddFESRId(actionButton, fesrId);\n\t\t}\n\n\t\treturn actionButton;\n\t}\n\n\t/**\n\t * Toggles the visibility of the header actions.\n\t *\n\t * @param {boolean} bShow - Whether to show or hide the header actions.\n\t * @private\n\t */\n\tprivate _toggleHeaderActions(bShow: boolean) {\n\t\t(this.getAggregation(\"menuItems\") as MenuItem[])?.forEach((menuItem) => {\n\t\t\tthis._getInsightsContainer()?.toggleMenuListItem(menuItem, bShow);\n\t\t});\n\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) =>\n\t\t\tthis._getInsightsContainer()?.toggleActionButton(actionButton, bShow)\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}