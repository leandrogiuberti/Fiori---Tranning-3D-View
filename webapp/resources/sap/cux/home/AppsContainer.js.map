{"version":3,"file":"AppsContainer.js","names":["sap","ui","define","Log","GenericTile","Panel","sap_m_library","EventBus","Parameters","S4MyHome","__BaseAppPersPanel","__BaseContainer","__Group","__RecommendedAppPanel","___utils_DataFormatUtils","___utils_Device","___utils_placeholder_AppsPlaceholder","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BackgroundDesign","FrameType","GenericTileMode","GenericTileScope","TileSizeBehavior","BaseAppPersPanel","BaseContainer","Group","RecommendedAppPanel","getLeanURL","calculateCardWidth","DeviceType","fetchElementProperties","getAppsPlaceholder","getDefaultAppColor","sLegendName","key","value","get","name","assigned","CONSTANTS","PLACEHOLDER_ITEMS_COUNT","MIN_TILE_WIDTH","MAX_TILE_WIDTH","AppsContainer","extend","metadata","events","appsLoaded","parameters","apps","type","tiles","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","this","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","_i18nBundle","getText","eventBus","getInstance","subscribe","channelId","eventId","data","showRecommendation","firstAppsPanel","getContent","getProperty","addStyleClass","addCustomSetting","_attachRouteChangeEvent","_this","handleRouteChange","event","show","getParameter","_temp2","_temp","_appSwitched","showPersistedDialog","Promise","resolve","load","_setPanelsDirty","reject","attachRouteMatched","error","warning","Error","message","String","onBeforeRendering","_onBeforeRendering","_attachPanelSupportedEvent","adjustLayout","BaseContainer.prototype.onBeforeRendering.call","_removeUnsupportedPanels","onAfterRendering","_onAfterRendering","_this2","BaseContainer.prototype.onAfterRendering.call","_activateRecommendationTabPanel","_load","_this3","selectedPanels","getPanels","all","map","selectedPanel","_setApps","_getPanels","isPhone","getDeviceType","Mobile","_getSelectedPanel","_showPersistedDialog","firePersistDialog","panels","panel","setDesktopViewDirty","setMobileViewDirty","_generatePlaceholder","isLoaded","destroyAggregation","placeholderApps","generateApps","Array","fill","status","setApps","_updatePanelContent","_this4","_temp5","_temp4","fireEvent","_temp3","isDirty","isMobileDirty","loadApps","setLoaded","applyPersonalization","getApps","fetchTileVisualization","showErrorCard","getTitle","groups","getAggregation","wrapper","_generateMobileAppsWrapper","_generateAppsWrapper","aggregationName","items","_generateMobileCards","getId","_generateTiles","_addWrapperContent","_updatePanelContentVisibility","appsWrapper","_generateDesktopAppsWrapper","mobileAppsWrapper","errorCard","_generateErrorMessage","hasApps","length","setVisible","getParent","setWidth","_getAppTile","app","actions","tileId","scope","ActionMore","Display","state","getStatus","mode","IconMode","sizeBehavior","Small","header","backgroundColor","getBgColor","tileIcon","getIcon","url","getUrl","frameType","TwoByHalf","renderOnThemeChange","dropAreaOffset","subheader","getSubTitle","press","_onPress","width","_getGroupTile","group","tileBadge","getNumber","getGroupId","_onPanelSelect","_this5","BaseContainer.prototype._onPanelSelect.call","_refreshAllPanels","_this6","refreshPanel","_refreshPanel","_this7","_toggleTabView","supportedPanels","filter","isSupported","iconTabBarControl","_getInnerControl","toggleStyleClass","_onPanelSupported","currentPanel","setSupported","_togglePanelVisibility","isVisible","iconTabBar","tabs","getItems","selectedTab","find","tab","getKey","unSupportedPanels","hasListeners","attachSupported","bind","_this8","recommendedPanel","_temp6","_enableRecommendationTab","setTileWidth","_setTileWidth","minWidth","maxWidth","getDomRef","domProperties","availableWidth","Object","values","slice","reduce","propertyValue","tileCount","cardLayoutConfig","containerWidth","totalCards","gap","skipDeviceCheck","clampedWidth","getLayout","_adjustLayout","toggleActionButtons","forEach","currentPanelId","i","panelItems","backgroundDesign","Solid","height","content","push","item","addAggregation","_showErrorCard","getGenericPlaceholderContent","_getGenericPlaceholderContent"],"sources":["AppsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign, FrameType, GenericTileMode, GenericTileScope, LoadState, TileSizeBehavior } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Parameters from \"sap/ui/core/theming/Parameters\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport App from \"./App\";\nimport { $AppsContainerSettings } from \"./AppsContainer\";\nimport BaseApp from \"./BaseApp\";\nimport BaseAppPanel, { BaseAppPanel$SupportedEvent } from \"./BaseAppPanel\";\nimport BaseAppPersPanel from \"./BaseAppPersPanel\";\nimport BaseContainer from \"./BaseContainer\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport RecommendedAppPanel from \"./RecommendedAppPanel\";\nimport { ICustomVisualization } from \"./interface/AppsInterface\";\nimport { getLeanURL } from \"./utils/DataFormatUtils\";\nimport { calculateCardWidth, DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { getAppsPlaceholder } from \"./utils/placeholder/AppsPlaceholder\";\n\nconst getDefaultAppColor = () => {\n\tconst sLegendName = \"sapLegendColor9\";\n\treturn {\n\t\tkey: sLegendName,\n\t\tvalue: Parameters.get({\n\t\t\tname: sLegendName\n\t\t}),\n\t\tassigned: false\n\t};\n};\n\nconst CONSTANTS = {\n\tPLACEHOLDER_ITEMS_COUNT: 5,\n\tMIN_TILE_WIDTH: 304,\n\tMAX_TILE_WIDTH: 456\n};\n\n/**\n *\n * Container class for managing and storing apps.\n *\n * @extends BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.AppsContainer\n */\nexport default class AppsContainer extends BaseContainer {\n\tprivate _isInitialRender = true;\n\tprivate _appSwitched!: boolean;\n\tstatic readonly renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tstatic readonly metadata: MetadataOptions = {\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired when apps are loaded.\n\t\t\t */\n\t\t\tappsLoaded: {\n\t\t\t\tparameters: {\n\t\t\t\t\tapps: { type: \"sap.cux.home.App[]\" },\n\t\t\t\t\ttiles: { type: \"sap.m.GenericTile[]\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconstructor(idOrSettings?: string | $AppsContainerSettings);\n\tconstructor(id?: string, settings?: $AppsContainerSettings);\n\t/**\n\t * Constructor for a new app container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $AppsContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"appsTitle\"));\n\t\t// Subscribe to recommendation setting change event\n\t\tconst eventBus = EventBus.getInstance();\n\t\teventBus.subscribe(\"importChannel\", \"recommendationSettingChanged\", (channelId?: string, eventId?: string, data?: object) => {\n\t\t\tconst showRecommendation = (data as { showRecommendation: boolean }).showRecommendation;\n\t\t\tif (!showRecommendation) {\n\t\t\t\tconst firstAppsPanel = this.getContent()?.[0];\n\t\t\t\tthis.setProperty(\"selectedKey\", firstAppsPanel?.getProperty(\"key\"));\n\t\t\t}\n\t\t});\n\n\t\t// disable lazy load for apps container as it's the hero element\n\t\tthis.setProperty(\"enableLazyLoad\", false);\n\t\tthis.addStyleClass(\"sapCuxAppsContainer\");\n\t\tthis.addCustomSetting(\"text\", this._i18nBundle.getText(\"myAppMsg\") as string);\n\t\tthis._attachRouteChangeEvent();\n\t}\n\n\t/**\n\t * Attaches an event handler to monitor route changes and manage application state accordingly.\n\t * @private\n\t *\n\t * @returns {void}\n\t */\n\n\tprivate _attachRouteChangeEvent(): void {\n\t\tconst handleRouteChange = async (event: Event<{ isMyHomeRoute: boolean }>) => {\n\t\t\tconst show = event.getParameter(\"isMyHomeRoute\");\n\t\t\tif (show) {\n\t\t\t\tif (this._appSwitched) {\n\t\t\t\t\tthis._appSwitched = false;\n\t\t\t\t\tthis.showPersistedDialog();\n\t\t\t\t\tawait this.load();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setPanelsDirty();\n\t\t\t\tthis._appSwitched = true;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tS4MyHome.attachRouteMatched({}, handleRouteChange, this);\n\t\t} catch (error) {\n\t\t\tLog.warning(\"Unable to attach route change handler\", error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering() {\n\t\tif (this._isInitialRender) {\n\t\t\tthis._isInitialRender = false;\n\t\t\tthis._attachPanelSupportedEvent();\n\t\t}\n\n\t\tthis.adjustLayout();\n\t\tsuper.onBeforeRendering();\n\t\tthis._removeUnsupportedPanels();\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic async onAfterRendering() {\n\t\tsuper.onAfterRendering();\n\t\t// activating the recommendation tab from appsContainer as personalization data in not available on init of panel.\n\t\tawait this._activateRecommendationTabPanel();\n\t}\n\n\t/**\n\t * Loads the AppsContainer section.\n\t * Overrides the load method of the BaseContainer.\n\t *\n\t * @private\n\t * @async\n\t * @override\n\t */\n\tpublic async load(): Promise<void> {\n\t\tconst selectedPanels = this.getPanels();\n\t\tawait Promise.all(selectedPanels.map((selectedPanel) => this._setApps(selectedPanel)));\n\t}\n\n\t/**\n\t * Retrieves the relevant panels based on the device type.\n\t *\n\t * @private\n\t * @returns {BaseAppPanel[]} An array of panels based on the device type.\n\t */\n\tprivate getPanels(): BaseAppPanel[] {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\treturn (isPhone ? this.getContent() : [this._getSelectedPanel()]) as BaseAppPanel[];\n\t}\n\n\t/**\n\t * Triggers navigation actions for the currently relevant panels.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\n\tprivate showPersistedDialog(): void {\n\t\tconst selectedPanels = this.getPanels();\n\t\tfor (const selectedPanel of selectedPanels) {\n\t\t\tselectedPanel.firePersistDialog();\n\t\t}\n\t}\n\n\t/**\n\t * Set all panels dirty state to true, to refresh all panels\n\t * @private\n\t */\n\tprivate _setPanelsDirty(): void {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tpanel.setDesktopViewDirty(true);\n\t\t\tpanel.setMobileViewDirty(true);\n\t\t}\n\t}\n\n\t/**\n\t * Generate placeholer for the panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which placeholders has to be generated.\n\t */\n\tprivate _generatePlaceholder(panel: BaseAppPanel): void {\n\t\tif (!panel.isLoaded()) {\n\t\t\tpanel.destroyAggregation(\"apps\", true);\n\t\t\tconst placeholderApps = panel.generateApps(\n\t\t\t\tnew Array(CONSTANTS.PLACEHOLDER_ITEMS_COUNT).fill({ status: \"Loading\" }) as ICustomVisualization[]\n\t\t\t);\n\t\t\tpanel.setApps(placeholderApps);\n\t\t\tthis._updatePanelContent(panel);\n\t\t}\n\t}\n\n\t/**\n\t * Loads and sets the apps.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which apps has to be loaded.\n\t * @returns {Promise<void>} resolves when apps are loaded.\n\t */\n\tprivate async _setApps(panel: BaseAppPanel): Promise<void> {\n\t\ttry {\n\t\t\t// only load the apps if panel is in dirty state\n\t\t\tif (panel.isDirty() && panel.isMobileDirty()) {\n\t\t\t\tthis._generatePlaceholder(panel);\n\t\t\t\tawait panel.loadApps?.();\n\t\t\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t\t} else {\n\t\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t\t}\n\t\t\t\tpanel.setLoaded(true);\n\t\t\t\tthis._updatePanelContent(panel);\n\n\t\t\t\tif (panel instanceof BaseAppPersPanel) {\n\t\t\t\t\t// don't wait for personalization to complete\n\t\t\t\t\tvoid panel.applyPersonalization(true);\n\t\t\t\t}\n\t\t\t\tlet tiles: GenericTile[] = [];\n\t\t\t\tlet apps = panel.getApps();\n\t\t\t\ttiles = panel.fetchTileVisualization(tiles);\n\t\t\t\tthis.fireEvent(\"appsLoaded\", { apps, tiles });\n\t\t\t}\n\n\t\t\t// fire panel loaded event\n\t\t\tpanel.fireEvent(\"loaded\");\n\t\t} catch (error: unknown) {\n\t\t\tthis.showErrorCard(panel);\n\t\t\tLog.error(`Error setting apps for panel: ${panel.getTitle()}`, error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * Updates the content of the panel by replacing existing items with new apps and groups.\n\t * This method selects the appropriate wrapper based on the device type, and add apps/group or mobile cards to the wrapper.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContent(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst wrapper = isPhone ? panel._generateMobileAppsWrapper() : panel._generateAppsWrapper();\n\t\tconst aggregationName = isPhone ? \"content\" : \"items\";\n\t\twrapper.destroyAggregation(aggregationName);\n\t\tlet items = isPhone ? this._generateMobileCards([...groups, ...apps], panel.getId()) : this._generateTiles([...groups, ...apps]);\n\t\tthis._addWrapperContent(wrapper, items, aggregationName);\n\t\tthis._updatePanelContentVisibility(panel);\n\t}\n\n\t/**\n\t * Updates the visibility of the panel's content based on the current state and device type.\n\t * This method determines whether to display the apps or an error message based on the presence of apps and groups.\n\t * It also adjusts the visibility of different containers depending on whether the device is a phone or not.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content visibility needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContentVisibility(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst appsWrapper = panel._generateDesktopAppsWrapper();\n\t\tconst mobileAppsWrapper = panel._generateMobileAppsWrapper();\n\t\tconst errorCard = panel._generateErrorMessage();\n\t\tconst hasApps = [...apps, ...groups].length !== 0;\n\t\tappsWrapper.setVisible(hasApps && !isPhone);\n\t\tmobileAppsWrapper.setVisible(hasApps && isPhone);\n\t\t(mobileAppsWrapper.getParent() as VBox).setWidth(isPhone && hasApps ? \"100%\" : \"auto\");\n\t\terrorCard.setVisible(!hasApps);\n\t}\n\n\t/**\n\t * Generates generic tile based on app.\n\t * @private\n\t * @param {sap.cux.home.App} app - App.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tpublic _getAppTile(app: App): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (app.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\tconst tileId = isPhone ? `${app.getId()}-mobile-tile` : `${app.getId()}-tile`;\n\t\treturn new GenericTile(tileId, {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: app.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: app.getTitle(),\n\t\t\tbackgroundColor: app.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: app.getIcon(),\n\t\t\turl: getLeanURL(app.getUrl()),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\tsubheader: app.getSubTitle(),\n\t\t\tpress: (e) => app._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"100%\"\n\t\t}).addStyleClass(\"tileLayout sapMGTTwoByHalf\");\n\t}\n\n\t/**\n\t * Generates generic tile based on group.\n\t * @private\n\t * @param {sap.cux.home.Group} group - Group.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tprivate _getGroupTile(group: Group): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (group.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\tconst tileId = isPhone ? `${group.getId()}-mobile-tile` : `${group.getId()}-tile`;\n\t\treturn new GenericTile(tileId, {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: group.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: group.getTitle(),\n\t\t\tbackgroundColor: group.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: group.getIcon(),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\ttileBadge: group.getNumber(),\n\t\t\tpress: (e) => group._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"100%\"\n\t\t})\n\t\t\t.addStyleClass(\"tileLayout sapMGTTwoByHalf\")\n\t\t\t.data(\"groupId\", group.getGroupId()) as GenericTile;\n\t}\n\n\t/**\n\t * Overridden method for selection of panel in the IconTabBar.\n\t * Loads the apps in selected panel\n\t * @private\n\t * @returns {Promise<void>} resolves when apps are loaded on panel selection.\n\t */\n\tprotected async _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\tsuper._onPanelSelect(event);\n\t\tconst selectedPanel = this._getSelectedPanel() as BaseAppPanel;\n\t\tawait this._setApps(selectedPanel);\n\t}\n\n\t/**\n\t * Refresh apps for all the panels.\n\t * @private\n\t * @returns {Promise<void>} resolves when all panels are set to dirty and apps for current panel are refreshed.\n\t */\n\tpublic async _refreshAllPanels(): Promise<void> {\n\t\t//set all panels to dirty\n\t\tthis._setPanelsDirty();\n\t\t//set apps for current section\n\t\tawait this._setApps(this._getSelectedPanel() as BaseAppPanel);\n\t}\n\n\t/**\n\t * Refresh apps for selected panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel that has be refreshed.\n\t * @returns {Promise<void>} resolves when apps are refreshed.\n\t */\n\tpublic async refreshPanel(panel: BaseAppPanel): Promise<void> {\n\t\tpanel.setMobileViewDirty(true);\n\t\tpanel.setDesktopViewDirty(true);\n\t\tawait this._setApps(panel);\n\t}\n\n\t/**\n\t * Toggles the visibility of the tab view based on the supported panels.\n\t * @private\n\t */\n\tprivate _toggleTabView() {\n\t\tif (this.getDeviceType() !== DeviceType.Mobile) {\n\t\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\t\tconst supportedPanels = panels.filter((panel) => panel.isSupported());\n\t\t\tconst iconTabBarControl = this._getInnerControl() as IconTabBar;\n\t\t\ticonTabBarControl?.toggleStyleClass(\"sapUiITBHide\", supportedPanels.length === 1);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the supported state of the current panel.\n\t * If the panel is supported, it adds the panel to the content.\n\t * If the panel is not supported, it removes the panel from the content.\n\t * @param {BaseAppPanel} currentPanel - The panel to handle the supported state for.\n\t * @private\n\t */\n\tprivate _onPanelSupported(currentPanel: BaseAppPanel, event: BaseAppPanel$SupportedEvent) {\n\t\tconst isSupported = event.getParameter(\"isSupported\") as boolean;\n\t\tcurrentPanel.setSupported(isSupported);\n\t\tthis._togglePanelVisibility(currentPanel, isSupported);\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Toggles the visibility of the panel.\n\t * @param {BaseAppPanel} panel - The panel to toggle the visibility for.\n\t * @param {boolean} isVisible - The visibility state of the panel.\n\t * @private\n\t */\n\tprivate _togglePanelVisibility(panel: BaseAppPanel, isVisible: boolean) {\n\t\tconst iconTabBar = this._getInnerControl() as IconTabBar;\n\t\tconst tabs = (iconTabBar?.getItems() as IconTabFilter[]) || [];\n\t\tconst selectedTab = tabs.find((tab) => tab.getKey() === panel.getKey());\n\t\tselectedTab?.setVisible(isVisible);\n\t}\n\n\t/**\n\t * Removes unsupported panels from the container.\n\t * @private\n\t */\n\tprivate _removeUnsupportedPanels() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tconst unSupportedPanels = panels.filter((panel) => !panel.isSupported());\n\t\tfor (const panel of unSupportedPanels) {\n\t\t\tthis._togglePanelVisibility(panel, false);\n\t\t}\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Attaches an event handler to the \"supported\" event for each panel in the container.\n\t * @private\n\t */\n\tprivate _attachPanelSupportedEvent() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tif (!panel.hasListeners(\"supported\")) {\n\t\t\t\tpanel.attachSupported(this._onPanelSupported.bind(this, panel));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calls the enable function to activate the recommendation tab for `RecommendedAppPanel`, unless the device is a mobile phone.\n\t *\n\t * @private\n\t */\n\tprivate async _activateRecommendationTabPanel(): Promise<void> {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst recommendedPanel = panels ? panels.find((panel) => panel instanceof RecommendedAppPanel) : null;\n\t\tif (recommendedPanel instanceof RecommendedAppPanel && !isPhone) {\n\t\t\tawait recommendedPanel._enableRecommendationTab();\n\t\t} else {\n\t\t\trecommendedPanel?.setSupported(false);\n\t\t}\n\t}\n\n\tpublic setTileWidth(panel: BaseAppPanel): void {\n\t\tconst minWidth = CONSTANTS.MIN_TILE_WIDTH; // in px\n\t\tconst maxWidth = CONSTANTS.MAX_TILE_WIDTH; // in px\n\n\t\tconst wrapper = panel._generateAppsWrapper()?.getDomRef() as Element;\n\t\tif (!wrapper) return;\n\n\t\tconst domProperties = fetchElementProperties(wrapper, [\"width\", \"padding-left\", \"padding-right\", \"margin-left\", \"margin-right\"]);\n\t\tconst availableWidth = Object.values(domProperties)\n\t\t\t.slice(1)\n\t\t\t.reduce((width, propertyValue) => width - propertyValue, domProperties[\"width\"]);\n\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst tileCount = apps.length + groups.length;\n\n\t\tif (tileCount === 0 || availableWidth <= 0) return;\n\n\t\tconst cardLayoutConfig = {\n\t\t\tcontainerWidth: availableWidth,\n\t\t\ttotalCards: tileCount,\n\t\t\tminWidth: minWidth,\n\t\t\tmaxWidth: maxWidth,\n\t\t\tgap: 8,\n\t\t\tskipDeviceCheck: true\n\t\t};\n\n\t\tconst clampedWidth = calculateCardWidth(cardLayoutConfig);\n\n\t\tpanel.setProperty(\"tileWidth\", clampedWidth);\n\t\tpanel\n\t\t\t._generateAppsWrapper()\n\t\t\t.getLayout()\n\t\t\t.setProperty(\"columnSize\", `${clampedWidth / 16}rem`);\n\t}\n\n\t/**\n\t * Adjusts the layout and visibility based on the device type.\n\t *\n\t * This method adjusts the layout type and visibility of containers based on whether the device is a phone\n\t * or not. It sets the container's layout property, toggles visibility of panels and their containers, and\n\t * adjusts background design accordingly.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tpublic adjustLayout(): void {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst selectedPanel = this._getSelectedPanel() as BaseAppPanel;\n\t\tthis.setTileWidth(selectedPanel);\n\n\t\t//hide actions if the device is a phone\n\t\tthis.toggleActionButtons(!isPhone);\n\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tpanels.forEach((panel) => {\n\t\t\t//if both the panels are dirty, then updated data will be loaded from onBeforeRendering, as layout change will trigger re-rendering\n\t\t\t//if both the panels are not dirty, i.e. doen't have any changes, then just toggle the visibility\n\t\t\tif (!panel.isDirty() && !panel.isMobileDirty()) {\n\t\t\t\tthis._updatePanelContentVisibility(panel);\n\t\t\t} else if (panel.isDirty() !== panel.isMobileDirty()) {\n\t\t\t\t//if one of the panels is dirty i.e. have updated data and other is not, then re-create the inner controls\n\t\t\t\tif (isPhone) {\n\t\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t\t} else {\n\t\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t\t}\n\t\t\t\tthis._updatePanelContent(panel);\n\t\t\t}\n\t\t});\n\n\t\t//this is to handle scenario when unsupported propert is changed and then layout is changed.\n\t\tthis._removeUnsupportedPanels();\n\t}\n\n\t/**\n\t * Generates mobile card panel and add given apps/groups in the panel.\n\t *\n\t * @private\n\t * @param {BaseApp[]} items - Apps/Groups for which card panels has to be generated.\n\t * @param {string} currentPanelId - ID of the current panel.\n\t * @returns {sap.m.Panel} The newly created mobile card panel.\n\t */\n\tprivate _generateMobileCards(items: BaseApp[], currentPanelId?: string): Panel[] {\n\t\tconst panels: Panel[] = [];\n\t\tfor (let i = 0; i < items.length; i += 7) {\n\t\t\tconst panelItems = items.slice(i, i + 7);\n\t\t\tconst panel = new Panel(`${currentPanelId}--${i}`, {\n\t\t\t\tbackgroundDesign: BackgroundDesign.Solid,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\twidth: \"17rem\",\n\t\t\t\tcontent: this._generateTiles(panelItems)\n\t\t\t}).addStyleClass(\"sapUiMobileAppsCard appPanelBorder myAppMFBContent\");\n\t\t\tpanels.push(panel);\n\t\t}\n\t\treturn panels;\n\t}\n\n\t/**\n\t * Generates group/app generic tiles for given apps/groups.\n\t *\n\t * @private\n\t * @param {BaseApp[]} items - Apps/Groups for which tiles has to be generated.\n\t * @returns {sap.m.GenericTile[]} The generated tiles.\n\t */\n\tprivate _generateTiles(items: BaseApp[]): GenericTile[] {\n\t\treturn items.map((item) => (item instanceof Group ? this._getGroupTile(item) : this._getAppTile(item as App)));\n\t}\n\n\t/**\n\t * Adds given items into the wrapper.\n\t * @param {HeaderContainer | GridContainer} wrapper - wrapper for which items has to be added.\n\t * @param {Panel[] | GenericTile[]} items - items to be added.\n\t * @param {string} aggregationName - aggregation name to which items has to be added.\n\t * @private\n\t */\n\tprivate _addWrapperContent(wrapper: HeaderContainer | GridContainer, items: Panel[] | GenericTile[], aggregationName: string) {\n\t\twrapper.destroyAggregation(aggregationName);\n\t\titems.forEach((item) => {\n\t\t\twrapper.addAggregation(aggregationName, item);\n\t\t});\n\t}\n\n\t/**\n\t * Displays an error card in the provided panel.\n\t *\n\t * @param panel - The panel in which the error card should be displayed.\n\t */\n\tprivate showErrorCard(panel: BaseAppPanel): void {\n\t\tconst errorCard = panel._generateErrorMessage();\n\t\tconst appsWrapper = panel._generateDesktopAppsWrapper();\n\t\tconst mobileAppsWrapper = panel._generateMobileAppsWrapper();\n\t\tappsWrapper?.setVisible(false);\n\t\tmobileAppsWrapper?.setVisible(false);\n\t\terrorCard?.setVisible(true);\n\t}\n\n\t/**\n\t * Retrieves the generic placeholder content for the Apps container.\n\t *\n\t * @returns {string} The HTML string representing the Apps container's placeholder content.\n\t */\n\tprotected getGenericPlaceholderContent(): string {\n\t\treturn getAppsPlaceholder();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}