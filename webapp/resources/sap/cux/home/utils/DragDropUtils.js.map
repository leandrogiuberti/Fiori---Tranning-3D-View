{"version":3,"file":"DragDropUtils.js","names":["sap","ui","define","GridContainer","FlexBox","Table","Event","Element","sap_ui_core_library","attachKeyboardHandler","event","disablenavigation","callback","draggedControl","closestTo","target","firstElementChild","container","getParent","isMetaKey","metaKey","ctrlKey","items","getItems","currentIndex","findIndex","item","document","activeElement","getDomRef","setTabIndexForItems","map","includes","key","Promise","resolve","preventDefault","stopPropagation","currentItemIndex","indexOfItem","reverseItems","reverse","index","_areItemsInSameRow","_getClosestElementYIndex","data","length","droppedControl","_temp3","_temp2","focusDraggedItem","dragDropEvent","dropPosition","dnd","RelativeDropPosition","Before","After","_temp","then","e","reject","item1","item2","getBoundingClientRect","top","dropItemIndex","draggedItemDomRef","aWrapperItemsDomRef","$","children","each","iIndex","oWrapperItem","classList","contains","push","setAttribute","focus","keyCode","fnElementPositionX","element","x","fnElementPositionY","y","minIndex","minDistance","Number","MAX_SAFE_INTEGER","forEach","currentDist","Math","sqrt","pow","isAllowed","aItems","tabIndex","__exports","__esModule"],"sources":["DragDropUtils.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport GridContainer from \"sap/f/GridContainer\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport Table from \"sap/m/Table\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport { dnd } from \"sap/ui/core/library\";\n\n/**\n * Handles keyboard events for navigation and drag and drop functionality.\n * @param {KeyboardEvent} event - The keyboard event object.\n * @param {boolean} disablenavigation - Whether navigation is allowed.\n * @param {Function} callback - The callback function to execute when a drag and drop event occurs.\n * @returns {Promise<void>} A Promise that resolves when the handling is complete.\n */\n\nexport async function attachKeyboardHandler(\n\tevent: KeyboardEvent,\n\tdisablenavigation: boolean,\n\tcallback?: (dragDropEvent: Event) => Promise<void> | void\n) {\n\tconst draggedControl = Element.closestTo((event.target as HTMLElement).firstElementChild as HTMLElement) as Control;\n\tconst container = draggedControl.getParent() as GridContainer | FlexBox;\n\tconst isMetaKey = event.metaKey || event.ctrlKey;\n\tconst items = container.getItems();\n\tconst currentIndex = items.findIndex((item) => document.activeElement === item.getDomRef());\n\tsetTabIndexForItems(\n\t\titems.map((item) => item.getDomRef() as HTMLElement),\n\t\tcurrentIndex\n\t);\n\n\tif (\n\t\t!draggedControl ||\n\t\t!container ||\n\t\t!(disablenavigation && [\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\", \"Home\", \"End\"].includes(event.key))\n\t) {\n\t\treturn;\n\t}\n\n\tevent.preventDefault();\n\tevent.stopPropagation();\n\n\tlet currentItemIndex = container.indexOfItem(draggedControl);\n\tconst reverseItems = [...items].reverse();\n\tconst getDomRef = (index: number): HTMLElement | null => items[index]?.getDomRef() as HTMLElement | null;\n\tswitch (event.key) {\n\t\tcase \"ArrowRight\":\n\t\t\tif (_areItemsInSameRow(getDomRef(currentItemIndex), getDomRef(currentItemIndex + 1))) {\n\t\t\t\tcurrentItemIndex++;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"ArrowLeft\":\n\t\t\tif (_areItemsInSameRow(getDomRef(currentItemIndex), getDomRef(currentItemIndex - 1))) {\n\t\t\t\tcurrentItemIndex--;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"ArrowUp\":\n\t\tcase \"ArrowDown\":\n\t\t\tcurrentItemIndex = _getClosestElementYIndex(container, currentItemIndex, event.key);\n\t\t\tbreak;\n\t\tcase \"Home\":\n\t\t\tcurrentItemIndex = draggedControl.data(\"groupId\")\n\t\t\t\t? items.findIndex((item) => item.data(\"groupId\"))\n\t\t\t\t: items.findIndex((item) => !item.data(\"groupId\"));\n\t\t\tbreak;\n\t\tcase \"End\":\n\t\t\tcurrentItemIndex =\n\t\t\t\titems.length -\n\t\t\t\t1 -\n\t\t\t\t(draggedControl.data(\"groupId\")\n\t\t\t\t\t? reverseItems.findIndex((item) => item.data(\"groupId\"))\n\t\t\t\t\t: reverseItems.findIndex((item) => !item.data(\"groupId\")));\n\t\t\tbreak;\n\t}\n\tconst droppedControl = currentItemIndex > -1 && currentItemIndex < items.length ? items[currentItemIndex] : null;\n\tif (draggedControl && droppedControl) {\n\t\tconst dragDropEvent = new Event(\"keyboardDragDropEvent\", container, {\n\t\t\tdraggedControl,\n\t\t\tdroppedControl,\n\t\t\tdropPosition: [\"ArrowLeft\", \"ArrowUp\", \"Home\"].includes(event.key)\n\t\t\t\t? dnd.RelativeDropPosition.Before\n\t\t\t\t: dnd.RelativeDropPosition.After\n\t\t});\n\t\tsetTabIndexForItems(\n\t\t\titems.map((item) => item.getDomRef() as HTMLElement),\n\t\t\tcurrentItemIndex\n\t\t);\n\t\tif (callback && isMetaKey) {\n\t\t\tawait callback(dragDropEvent);\n\t\t}\n\t\tfocusDraggedItem(container, currentItemIndex);\n\t}\n}\n\n/**\n * Checks if two items are in the same row based on their top positions.\n *\n * @private\n * @param {HTMLElement | null} item1 - The first item's DOM reference.\n * @param {HTMLElement | null} item2 - The second item's DOM reference.\n * @returns {boolean} True if both items are in the same row, otherwise false.\n */\nfunction _areItemsInSameRow(item1: HTMLElement | null, item2: HTMLElement | null): boolean {\n\tif (!item1 || !item2) {\n\t\treturn false;\n\t}\n\treturn item1.getBoundingClientRect().top === item2.getBoundingClientRect().top;\n}\n\n/**\n * Gathers all DOM elements representing individual tiles in the grid container\n * that have the \"sapFGridContainerItemWrapper\" class, stores them in an array,\n * and then focuses the DOM element corresponding to the card that was just moved\n * during a drag-and-drop operation by setting its \"tabindex\" to \"0\" for\n * accessibility and navigation purposes.\n * @param {GridContainer | FlexBox} container - The container containing the items.\n * @param {number} dropItemIndex - The index of the item to focus after drag-and-drop.\n */\nexport const focusDraggedItem = (container: GridContainer | HeaderContainer | FlexBox | Table, dropItemIndex: number): void => {\n\tlet draggedItemDomRef: HTMLElement | null = null;\n\tif (container instanceof GridContainer) {\n\t\tconst aWrapperItemsDomRef: HTMLElement[] = [];\n\t\tcontainer\n\t\t\t.$(\"listUl\")\n\t\t\t.children()\n\t\t\t.each(function (iIndex, oWrapperItem) {\n\t\t\t\tif (oWrapperItem.classList.contains(\"sapFGridContainerItemWrapper\")) {\n\t\t\t\t\taWrapperItemsDomRef.push(oWrapperItem);\n\t\t\t\t}\n\t\t\t});\n\t\tdraggedItemDomRef = aWrapperItemsDomRef[dropItemIndex];\n\t} else if (container instanceof FlexBox || container instanceof Table) {\n\t\tdraggedItemDomRef = container.getItems()[dropItemIndex].getDomRef() as HTMLElement;\n\t}\n\tif (draggedItemDomRef) {\n\t\tdraggedItemDomRef.setAttribute(\"tabindex\", \"0\");\n\t\tdraggedItemDomRef.focus();\n\t}\n};\n\n/**\n * Gets the index of the closest element in the Y direction within a grid container.\n * @param {GridContainer | FlexBox} container - The container (either GridContainer or FlexBox).\n * @param {number} currentIndex - The index of the current element.\n * @param {string} keyCode - The key code representing the direction (ArrowUp or ArrowDown).\n * @returns {number} The index of the closest element in the Y direction.\n */\n\nconst _getClosestElementYIndex = (container: GridContainer | FlexBox, currentIndex: number, keyCode: string) => {\n\tconst fnElementPositionX = function (element: HTMLElement) {\n\t\treturn element.getBoundingClientRect().x;\n\t};\n\n\tconst fnElementPositionY = function (element: HTMLElement) {\n\t\treturn element.getBoundingClientRect().y;\n\t};\n\n\tlet minIndex = currentIndex;\n\tlet minDistance = Number.MAX_SAFE_INTEGER;\n\tconst items = container.getItems().map((item) => item.getDomRef()) as HTMLElement[];\n\titems.forEach(function (item, index) {\n\t\tconst currentDist = Math.sqrt(\n\t\t\tMath.pow(fnElementPositionX(items[currentIndex]) - fnElementPositionX(item), 2) +\n\t\t\t\tMath.pow(fnElementPositionY(items[currentIndex]) - fnElementPositionY(item), 2)\n\t\t);\n\t\tconst isAllowed = (keyCode === \"ArrowDown\" && index > currentIndex) || (keyCode === \"ArrowUp\" && index < currentIndex);\n\t\tif (isAllowed && currentDist < minDistance && fnElementPositionY(item) !== fnElementPositionY(items[currentIndex])) {\n\t\t\tminDistance = currentDist;\n\t\t\tminIndex = index;\n\t\t}\n\t});\n\treturn minIndex;\n};\n\nconst setTabIndexForItems = (aItems: HTMLElement[], currentIndex: number) => {\n\taItems.forEach((x, index) => {\n\t\tx.tabIndex = index === currentIndex ? 0 : -1;\n\t});\n};\n"],"mappings":"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","ignoreList":[]}