{"version":3,"file":"BatchHelper.js","names":["sap","ui","define","BaseObject","_catch","body","recover","result","e","then","methods","isEncoded","url","test","MultiPartRequest","batchRequests","constructor","requestMethod","csrfToken","this","encodeURI","boundary","Date","now","options","headers","method","_constructBody","BOUNDARY","REQUEST_HEADERS","REQUEST_BODY","index","length","request","boundaryEnd","addRequest","push","constructBodyWithPayload","changeSet","CHANGESET_BOUNDARY","CHANGESET_HEADER","JSON","stringify","payload","getDataFromRawValue","value","parsedValue","replace","split","filter","data","finalData","contentTypeValue","includes","parse","fetchCSRFToken","baseURL","Promise","resolve","fetch","HEAD","response","ok","token","get","Error","error","message","reject","BatchHelper","extend","fetchData","_fetchData","multiPartRequest","_this","GET","POST","text","createMultipartRequest","_createMultipartRequest","urls","_this2","buildMultipartRequest","createMultipartRequestWithPayload","_createMultipartRequestWithPayload","payloads","_this3","buildMultipartRequestWithPayload","_buildMultipartRequest","forEach","_buildMultipartRequestWithPayload","multipartRequest"],"sources":["BatchHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport BaseObject from \"sap/ui/base/Object\";\n\nenum methods {\n\tGET = \"GET\",\n\tPOST = \"POST\",\n\tPUT = \"PUT\",\n\tPATCH = \"PATCH\",\n\tDELETE = \"DELETE\",\n\tHEAD = \"HEAD\"\n}\n\ninterface Options {\n\theaders: Record<string, string>;\n\tmethod: methods;\n\tbody?: string;\n}\n\nconst isEncoded = (url: string) => {\n\treturn /%[0-9A-F]{2}/i.test(url);\n};\n\n/**\n * Represents a multipart request.\n */\nclass MultiPartRequest {\n\tprivate url: string;\n\tprivate batchRequests: MultiPartRequest[] = [];\n\tprivate boundary: string;\n\tpublic options: Options;\n\tpublic payload?: unknown;\n\n\t/**\n\t * Creates a MultiPartRequest object.\n\t *\n\t * @param {string} url - The URL for the multipart request.\n\t * @constructor\n\t */\n\tconstructor(url: string, requestMethod: methods, csrfToken?: string) {\n\t\t//encode the URL if it is not already encoded\n\t\tthis.url = isEncoded(url) ? url : encodeURI(url);\n\t\tthis.boundary = `batch_id_${Date.now()}_01`;\n\t\tthis.options = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": `multipart/mixed;boundary=${this.boundary}`\n\t\t\t},\n\t\t\tmethod: requestMethod\n\t\t};\n\n\t\t// Add CSRF token to headers if available\n\t\tif (csrfToken) {\n\t\t\tthis.options.headers[\"X-CSRF-Token\"] = csrfToken;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs the body for the multipart request.\n\t *\n\t * @returns {string} - The constructed body.\n\t * @private\n\t */\n\tpublic _constructBody(): string {\n\t\tconst BOUNDARY = `--${this.boundary}`;\n\t\tconst REQUEST_HEADERS = `Content-Type: application/http\\r\\nContent-Transfer-Encoding: binary\\r\\n`;\n\t\tconst REQUEST_BODY = `Accept: application/json\\r\\n\\r\\n\\r\\n`;\n\n\t\tlet body = `${BOUNDARY}\\r\\n`;\n\n\t\tfor (let index = 0; index < this.batchRequests.length; index++) {\n\t\t\tconst request = this.batchRequests[index];\n\t\t\tconst boundaryEnd = index === this.batchRequests.length - 1 ? \"--\\r\\n\" : \"\\r\\n\";\n\t\t\tbody += `${REQUEST_HEADERS}\\r\\n`;\n\t\t\tbody += `${request.options.method} ${request.url} HTTP/1.1\\r\\n${REQUEST_BODY}`;\n\t\t\tbody += `${BOUNDARY}${boundaryEnd}`;\n\t\t}\n\n\t\treturn body;\n\t}\n\n\t/**\n\t * Adds a request to the MultiPartRequest batch.\n\t *\n\t * @public\n\t * @param {Object} request - The request to add to the batch.\n\t */\n\tpublic addRequest(request: MultiPartRequest): void {\n\t\tthis.batchRequests.push(request);\n\t}\n\n\t/**\n\t * Constructs the body for the multipart request with payload\n\t *\n\t * @returns {string} - The constructed body.\n\t * @private\n\t */\n\tpublic constructBodyWithPayload(): string {\n\t\tconst BOUNDARY = `--${this.boundary}`;\n\t\tconst REQUEST_HEADERS = \"Content-Type:application/http\\r\\nContent-Transfer-Encoding:binary\\r\\n\";\n\t\tlet body = `${BOUNDARY}\\r\\n`;\n\t\tconst changeSet = \"changeset_001\";\n\t\tconst CHANGESET_BOUNDARY = `--${changeSet}`;\n\t\tconst CHANGESET_HEADER = `Content-Type: multipart/mixed; boundary=${changeSet}\\r\\n`;\n\t\tbody += `${CHANGESET_HEADER}\\r\\n${CHANGESET_BOUNDARY}\\r\\n`;\n\t\tfor (let index = 0; index < this.batchRequests.length; index++) {\n\t\t\tconst request = this.batchRequests[index];\n\t\t\tbody += `\\r\\n${REQUEST_HEADERS}`;\n\t\t\tbody += `Content-ID: ${index + 1}\\r\\n\\r\\n`;\n\t\t\tbody += `${request.options.method} ${request.url} HTTP/1.1\\r\\n`;\n\t\t\tbody += \"sap-context-accept: header\\r\\nContent-Type:application/json\\r\\n\\r\\n\";\n\t\t\tbody += `${JSON.stringify(request.payload)}\\r\\n\\r\\n`;\n\t\t\tbody += CHANGESET_BOUNDARY;\n\t\t\tif (index === this.batchRequests.length - 1) {\n\t\t\t\tbody += \"--\\r\\n\";\n\t\t\t\tbody += `${BOUNDARY}--`;\n\t\t\t}\n\t\t}\n\t\treturn body;\n\t}\n}\n\n/**\n * Parses multipart body response and returns an array of values called in the batch request.\n *\n * @param {string} value - Multipart body response.\n * @returns {Object[]} - Array of values in the multipart request.\n * @returns {Object[]} - An array of values in the multipart request.\n */\nconst getDataFromRawValue = function (value: string): (string | object)[] {\n\tconst parsedValue = value\n\t\t.replace(/\\r\\n/g, \"\\n\")\n\t\t.split(\"\\n\")\n\t\t.filter((data) => data !== \"\");\n\n\tconst finalData: (string | object)[] = [];\n\tlet contentTypeValue = \"\";\n\n\tfor (let index = 1; index < parsedValue.length - 1; index++) {\n\t\tcontentTypeValue = parsedValue[index].includes(\"Content-Type: \") ? parsedValue[index].split(\"Content-Type: \")[1] : contentTypeValue;\n\n\t\tif (parsedValue[index + 1].includes(parsedValue[0])) {\n\t\t\tif (contentTypeValue === \"application/json\") {\n\t\t\t\tfinalData.push(JSON.parse(parsedValue[index]) as string);\n\t\t\t} else {\n\t\t\t\tfinalData.push(parsedValue[index]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn finalData;\n};\n\n/**\n * Fetches the CSRF token from the specified base URL.\n *\n * @async\n * @param {string} baseURL - The base URL to fetch the CSRF token from.\n * @returns {Promise<string>} A Promise that resolves when all batch requests are completed. A promise that resolves to the CSRF token.\n * @throws {Error} An error if the CSRF token cannot be fetched.\n */\nconst fetchCSRFToken = async function (baseURL: string): Promise<string> {\n\ttry {\n\t\tconst response = await fetch(baseURL, {\n\t\t\tmethod: methods.HEAD,\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t}\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tconst token = response.headers.get(\"X-CSRF-Token\");\n\t\t\tif (token) {\n\t\t\t\treturn token;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Cannot fetch X-CSRF-Token.\");\n\t} catch (error: unknown) {\n\t\tthrow new Error((error as Error).message);\n\t}\n};\n\n/**\n *\n * Helper class for managing batch requests.\n *\n * @extends BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n * @private\n *\n * @alias sap.cux.home.utils.BatchHelper\n */\nexport default class BatchHelper extends BaseObject {\n\tprivate url!: string;\n\n\t/**\n\t * Fetches data from a multipart request.\n\t *\n\t * @private\n\t * @param {MultiPartRequest} multiPartRequest - The multipart request object.\n\t * @returns {Promise<Array<string | object>>} - A promise that resolves to the data from the request.\n\t */\n\tprivate async fetchData(multiPartRequest: MultiPartRequest): Promise<Array<string | object>> {\n\t\tmultiPartRequest.options.body =\n\t\t\tmultiPartRequest.options.method === methods.GET\n\t\t\t\t? multiPartRequest._constructBody()\n\t\t\t\t: multiPartRequest.constructBodyWithPayload();\n\n\t\tmultiPartRequest.options.method = methods.POST;\n\n\t\tconst response = await fetch(this.url, multiPartRequest.options);\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\"Failed to fetch data from the server.\");\n\t\t}\n\n\t\tconst text = await response.text();\n\t\treturn getDataFromRawValue(text);\n\t}\n\n\t/**\n\t * Creates a multipart batch request with multiple URLs.\n\t *\n\t * @public\n\t * @param {string} baseURL - The base URL for creating the batch request.\n\t * @param {string[]} urls - An array of URLs for individual requests.\n\t * @returns {Promise<Array<string | object>>} - A promise that resolves to the data from the batch request.\n\t */\n\tpublic async createMultipartRequest(baseURL: string, urls: string[]): Promise<Array<string | object>> {\n\t\tthis.url = `${baseURL}$batch`;\n\t\tconst csrfToken = await fetchCSRFToken(baseURL);\n\t\tconst request = this.buildMultipartRequest(urls, csrfToken);\n\t\treturn await this.fetchData(request);\n\t}\n\n\t/**\n\t * Creates a multipart batch request with given payloads and sends it to the specified base URL.\n\t *\n\t * @public\n\t * @param {string} baseURL - The base URL for creating the batch request.\n\t * @param payloads - An array of objects containing the URL and data for each part of the multipart request.\n\t * @param requestMethod - The HTTP method to be used for the request (e.g., POST).\n\t * @returns {Promise<Array<string | object>>} A promise that resolves to the data from the batch request.\n\t */\n\tpublic async createMultipartRequestWithPayload(\n\t\tbaseURL: string,\n\t\tpayloads: { url: string; data: unknown }[],\n\t\trequestMethod: methods\n\t): Promise<Array<string | object>> {\n\t\tthis.url = `${baseURL}$batch`;\n\t\tconst csrfToken = await fetchCSRFToken(baseURL);\n\t\tconst request = this.buildMultipartRequestWithPayload(payloads, csrfToken, requestMethod);\n\t\treturn await this.fetchData(request);\n\t}\n\n\t/**\n\t * Builds a multipart request from an array of URLs.\n\t *\n\t * @private\n\t * @param {string[]} urls - An array of URLs for individual requests.\n\t * @returns {MultiPartRequest} - The multipart request object.\n\t */\n\tprivate buildMultipartRequest(urls: string[], csrfToken: string, requestMethod: methods = methods.GET): MultiPartRequest {\n\t\t// create base request from first URL\n\t\tconst request = new MultiPartRequest(urls[0], requestMethod, csrfToken);\n\n\t\t// Add all URLs as sub-requests\n\t\turls.forEach((url) => {\n\t\t\trequest.addRequest(new MultiPartRequest(url, requestMethod, csrfToken));\n\t\t});\n\n\t\treturn request;\n\t}\n\n\t/**\n\t * Builds a multipart request with the given payloads, CSRF token, and request method.\n\t *\n\t * @param payloads - An array of objects containing the URL and data for each part of the request.\n\t * @param csrfToken - The CSRF token to be included in the request headers.\n\t * @param requestMethod - The HTTP method to be used for the request.\n\t * @returns {MultiPartRequest} A `MultiPartRequest` object containing the constructed multipart request.\n\t */\n\tprivate buildMultipartRequestWithPayload(\n\t\tpayloads: { url: string; data: unknown }[],\n\t\tcsrfToken: string,\n\t\trequestMethod: methods\n\t): MultiPartRequest {\n\t\tconst request = new MultiPartRequest(payloads[0].url, requestMethod, csrfToken);\n\t\trequest.payload = payloads[0].data;\n\t\tpayloads.forEach(({ url, data }) => {\n\t\t\tconst multipartRequest = new MultiPartRequest(url, requestMethod, csrfToken);\n\t\t\tmultipartRequest.payload = data;\n\t\t\trequest.addRequest(multipartRequest);\n\t\t});\n\n\t\treturn request;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}