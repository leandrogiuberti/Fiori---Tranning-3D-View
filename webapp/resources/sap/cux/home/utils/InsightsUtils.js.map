{"version":3,"file":"InsightsUtils.js","names":["sap","ui","define","UI5Element","___FESRUtil","addFESRId","getAssociatedFullScreenMenuItem","control","getElementById","getAssociation","getAssociatedFullScreenButton","createShowMoreMenuItem","id","fesrId","associatedFullScreenMenuItem","menuItem","clone","createShowMoreActionButton","associatedFullScreenButton","actionButton","sortMenuItems","menuItemOrder","menuItems","sort","a","b","aId","getId","bId","aIndex","findIndex","includes","bIndex","targetsAreEqual","targetA","targetB","Object","keys","length","semanticObject","action","__exports","__esModule"],"sources":["InsightsUtils.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Button from \"sap/m/Button\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport { Intent } from \"sap/ushell/services/AppLifeCycle\";\nimport MenuItem from \"../MenuItem\";\nimport { addFESRId } from \"./FESRUtil\";\n\n/**\n * Retrieves the associated full screen menu item.\n *\n * @returns {MenuItem} The associated full screen menu item.\n * @private\n */\nexport const getAssociatedFullScreenMenuItem = (control: UI5Element) => {\n\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n};\n\n/**\n * Retrieves the associated full screen button.\n *\n * @returns {Button} The associated full screen button.\n * @private\n *\n */\nexport const getAssociatedFullScreenButton = (control: UI5Element) => {\n\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenButton\", null) as string) as Button;\n};\n\n/**\n * Creates a \"Show More\" menu item.\n *\n * @private\n * @param {string} id - The ID of the menu item.\n * @param {string} [fesrId] - The FESR ID for the menu item.\n * @returns {MenuItem} The created MenuItem instance.\n */\nexport const createShowMoreMenuItem = (control: UI5Element, id: string, fesrId?: string) => {\n\tconst associatedFullScreenMenuItem = getAssociatedFullScreenMenuItem(control);\n\tconst menuItem = associatedFullScreenMenuItem?.clone(id);\n\tif (fesrId) {\n\t\taddFESRId(menuItem, fesrId);\n\t}\n\n\treturn menuItem;\n};\n\n/**\n * Creates a \"Show More\" action button.\n *\n * @private\n * @param {string} id - The ID of the button.\n * @param {string} [fesrId] - The FESR ID for the button.\n * @returns {Button} The created Button instance.\n */\nexport const createShowMoreActionButton = (control: UI5Element, id: string, fesrId?: string) => {\n\tconst associatedFullScreenButton = getAssociatedFullScreenButton(control);\n\tconst actionButton = associatedFullScreenButton ? associatedFullScreenButton.clone(id) : null;\n\tif (fesrId && actionButton) {\n\t\taddFESRId(actionButton, fesrId);\n\t}\n\n\treturn actionButton;\n};\n\n/**\n * Sort Menuitems based on the order provided\n *\n * @private\n * @param {string[]} menuItemOrder - The Ids of the menu item in the order in which to be sorted.\n * @param {MenuItem[]} menuItems- The menuitems list to be sorted.\n * @returns {MenuItem[]} The sorted MenuItems.\n */\nexport const sortMenuItems = (menuItemOrder: string[], menuItems: MenuItem[]) => {\n\treturn menuItems?.sort((a, b) => {\n\t\tconst aId = a.getId();\n\t\tconst bId = b.getId();\n\t\tconst aIndex = menuItemOrder.findIndex((id) => aId.includes(id));\n\t\tconst bIndex = menuItemOrder.findIndex((id) => bId.includes(id));\n\t\treturn aIndex - bIndex;\n\t});\n};\n\n/**\n * Compares two intent objects to determine if they are equal.\n *\n * The function checks the following conditions:\n * 1. If both objects are empty (i.e., have no keys), they are considered equal.\n * 2. If both objects have keys, their `semanticObject` and `action` properties are compared for equality.\n * 3. If either object is `undefined` or the conditions above are not met, they are considered not equal.\n *\n * @param targetA - The first intent object to compare.\n * @param targetB - The second intent object to compare.\n * @returns `true` if the objects are considered equal, otherwise `false`.\n */\nexport const targetsAreEqual = (targetA?: Partial<Intent>, targetB?: Partial<Intent>): boolean => {\n\t// Check if both are empty objects\n\tif (targetA && targetB) {\n\t\tif (Object.keys(targetA).length === 0 && Object.keys(targetB).length === 0) {\n\t\t\treturn true;\n\t\t} else if (Object.keys(targetA).length && Object.keys(targetB).length) {\n\t\t\treturn targetA.semanticObject === targetB.semanticObject && targetA.action === targetB.action;\n\t\t}\n\t}\n\treturn false;\n};\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,8CAAAC,EAAAC,GAAA,mBAQSC,EAASD,EAAA,aAQX,MAAME,EAAmCC,GACxCJ,EAAWK,eAAeD,EAAQE,eAAe,qBAAsB,OAUxE,MAAMC,EAAiCH,GACtCJ,EAAWK,eAAeD,EAAQE,eAAe,mBAAoB,OAWtE,MAAME,EAAyBA,CAACJ,EAAqBK,EAAYC,KACvE,MAAMC,EAA+BR,EAAgCC,GACrE,MAAMQ,EAAWD,GAA8BE,MAAMJ,GACrD,GAAIC,EAAQ,CACXR,EAAUU,EAAUF,EACrB,CAEA,OAAOE,GAWD,MAAME,EAA6BA,CAACV,EAAqBK,EAAYC,KAC3E,MAAMK,EAA6BR,EAA8BH,GACjE,MAAMY,EAAeD,EAA6BA,EAA2BF,MAAMJ,GAAM,KACzF,GAAIC,GAAUM,EAAc,CAC3Bd,EAAUc,EAAcN,EACzB,CAEA,OAAOM,GAWD,MAAMC,EAAgBA,CAACC,EAAyBC,IAC/CA,GAAWC,KAAK,CAACC,EAAGC,KAC1B,MAAMC,EAAMF,EAAEG,QACd,MAAMC,EAAMH,EAAEE,QACd,MAAME,EAASR,EAAcS,UAAWlB,GAAOc,EAAIK,SAASnB,IAC5D,MAAMoB,EAASX,EAAcS,UAAWlB,GAAOgB,EAAIG,SAASnB,IAC5D,OAAOiB,EAASG,IAgBX,MAAMC,EAAkBA,CAACC,EAA2BC,KAE1D,GAAID,GAAWC,EAAS,CACvB,GAAIC,OAAOC,KAAKH,GAASI,SAAW,GAAKF,OAAOC,KAAKF,GAASG,SAAW,EAAG,CAC3E,OAAO,IACR,MAAO,GAAIF,OAAOC,KAAKH,GAASI,QAAUF,OAAOC,KAAKF,GAASG,OAAQ,CACtE,OAAOJ,EAAQK,iBAAmBJ,EAAQI,gBAAkBL,EAAQM,SAAWL,EAAQK,MACxF,CACD,CACA,OAAO,OACN,IAAAC,EAAA,CAAAC,WAAA,MAAAD,EAAAnC,kCAAAmC,EAAA/B,gCAAA+B,EAAA9B,yBAAA8B,EAAAxB,6BAAAwB,EAAArB,gBAAAqB,EAAAR,kBAAA,OAAAQ,CAAA","ignoreList":[]}