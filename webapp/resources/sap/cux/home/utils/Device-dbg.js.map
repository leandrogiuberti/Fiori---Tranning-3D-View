{"version":3,"file":"Device-dbg.js","names":["sap","ui","define","Device","DeviceWidth","Mobile","Tablet","Desktop","LargeDesktop","DeviceType","calculateDeviceType","width","resize","system","phone","XLargeDesktop","fetchElementProperties","domRef","properties","oProperties","forEach","property","parseFloat","window","getComputedStyle","getPropertyValue","calculateCardWidth","cardLayoutConfig","gap","skipDeviceCheck","peekWidth","totalCards","Math","max","minWidth","min","containerWidth","maxWidth","mainCardWidth","cardCountToUse","totalGap","twoCardWidth","possibleCardCount","cardWidth","__exports","__esModule"],"sources":["Device.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Device from \"sap/ui/Device\";\n\ninterface CardLayoutConfig {\n\tgap: number;\n\tcontainerWidth: number;\n\ttotalCards: number;\n\tminWidth: number;\n\tmaxWidth: number;\n\tskipDeviceCheck?: boolean;\n}\n\n/** Device widths in px */\nconst DeviceWidth = {\n\tMobile: 600,\n\tTablet: 1024,\n\tDesktop: 1135,\n\tLargeDesktop: 1920\n};\n\nexport enum DeviceType {\n\tMobile = \"Mobile\",\n\tTablet = \"Tablet\",\n\tDesktop = \"Desktop\",\n\tLargeDesktop = \"LargeDesktop\",\n\tXLargeDesktop = \"XLargeDesktop\"\n}\n\n/**\n * Calculates the device type based on the given width.\n *\n * @param {number} [width=Device.resize.width] - The width of the device. Defaults to the current device width.\n * @returns {DeviceType} - The calculated device type.\n */\nexport function calculateDeviceType(width: number = Device.resize.width): DeviceType {\n\tif (width < DeviceWidth.Mobile || Device.system.phone) {\n\t\treturn DeviceType.Mobile;\n\t} else if (width < DeviceWidth.Tablet) {\n\t\treturn DeviceType.Tablet;\n\t} else if (width < DeviceWidth.Desktop) {\n\t\treturn DeviceType.Desktop;\n\t} else if (width < DeviceWidth.LargeDesktop) {\n\t\treturn DeviceType.LargeDesktop;\n\t} else {\n\t\treturn DeviceType.XLargeDesktop;\n\t}\n}\n\n/**\n * Fetches the specified CSS properties of a given DOM element and returns them as a record.\n *\n * @param {Element} domRef - The DOM element from which to fetch the properties.\n * @param {string[]} properties - An array of property names to fetch.\n * @returns {Record<string, number>} - A record where the keys are property names and the values are the corresponding property values as numbers.\n */\nexport function fetchElementProperties(domRef: Element, properties: string[]): Record<string, number> {\n\tconst oProperties: Record<string, number> = {};\n\tproperties.forEach((property) => {\n\t\toProperties[property] = parseFloat(window.getComputedStyle(domRef).getPropertyValue(property));\n\t});\n\n\treturn oProperties;\n}\n\n/**\n * Calculates the card width based on the available width and certain constraints.\n *\n * @param {CardLayoutConfig} cardLayoutConfig - Card layout configuration containing container width, no. of cards, min and max width.\n * @returns {number} The calculated card width within specified constraints.\n */\nexport function calculateCardWidth(cardLayoutConfig: CardLayoutConfig): number {\n\tconst gap = cardLayoutConfig.gap;\n\n\tif (calculateDeviceType() === DeviceType.Mobile && !cardLayoutConfig.skipDeviceCheck) {\n\t\tconst peekWidth = 76;\n\t\tif (cardLayoutConfig.totalCards === 1) {\n\t\t\t// Single card: full width, constrained\n\t\t\treturn Math.max(cardLayoutConfig.minWidth, Math.min(cardLayoutConfig.containerWidth, cardLayoutConfig.maxWidth));\n\t\t} else {\n\t\t\t// Calculate width of the first card, reserving space for the peek of the second\n\t\t\tconst mainCardWidth = cardLayoutConfig.containerWidth - peekWidth;\n\t\t\t// Clamp to min/max width\n\t\t\treturn Math.max(cardLayoutConfig.minWidth, Math.min(mainCardWidth, cardLayoutConfig.maxWidth));\n\t\t}\n\t}\n\n\tlet cardCountToUse: number;\n\n\t// Tablet mode: width between 600 and 1023\n\tif (calculateDeviceType() === DeviceType.Tablet && cardLayoutConfig.totalCards > 1 && !cardLayoutConfig.skipDeviceCheck) {\n\t\tconst totalGap = gap; // gap between 2 cards\n\t\tconst twoCardWidth = (cardLayoutConfig.containerWidth - totalGap) / 2;\n\n\t\tif (twoCardWidth >= cardLayoutConfig.minWidth && twoCardWidth <= cardLayoutConfig.maxWidth) {\n\t\t\tcardCountToUse = 2;\n\t\t} else {\n\t\t\tcardCountToUse = 1;\n\t\t}\n\t} else {\n\t\t// Step 1: How many cards *can* fit based on minWidth\n\t\tlet possibleCardCount = 1;\n\t\twhile (cardLayoutConfig.containerWidth / possibleCardCount >= cardLayoutConfig.minWidth + gap) {\n\t\t\tpossibleCardCount++;\n\t\t}\n\t\tpossibleCardCount--; // Last valid value\n\t\t// Step 2: If we have fewer cards than we *can* fit, stretch them\n\t\tcardCountToUse = cardLayoutConfig.skipDeviceCheck\n\t\t\t? Math.min(possibleCardCount, cardLayoutConfig.totalCards)\n\t\t\t: Math.max(Math.min(possibleCardCount, cardLayoutConfig.totalCards), Math.min(cardLayoutConfig.totalCards, 3));\n\t}\n\tif (cardCountToUse <= 0) return cardLayoutConfig.minWidth;\n\tconst totalGap = (cardCountToUse - 1) * gap;\n\tconst cardWidth = (cardLayoutConfig.containerWidth - totalGap) / cardCountToUse;\n\treturn Math.min(Math.max(cardWidth, cardLayoutConfig.minWidth), cardLayoutConfig.maxWidth);\n}\n"],"mappings":"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","ignoreList":[]}