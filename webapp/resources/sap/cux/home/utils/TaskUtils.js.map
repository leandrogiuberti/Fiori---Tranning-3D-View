{"version":3,"file":"TaskUtils.js","names":["sap","ui","define","Log","Formatting","sap_m_library","Locale","DateFormat","_catch","body","recover","result","e","then","_fetchUserInfo","originId","userId","Promise","resolve","fetch","response","ok","Error","json","_response$json","d","data","userInfo","error","message","String","reject","Priority","TaskPriority","getTaskUrl","instanceId","targetAppUrl","taskInstanceURL","fetchUserDetails","Object","keys","includes","_isValidDate","dateString","length","year","parseInt","slice","month","day","date","Date","getFullYear","getMonth","getDate","_getParsedTime","time","NaN","dateRegex","yyyymmddRegex","isoRegex","dateMatch","match","test","parsedDate","getDateInstance","parse","getTime","isoMatch","formatDate","dateStr","pattern","getDatePattern","locale","getLanguageTag","language","dateFormat","getDateTimeInstance","value","formattedDate","isNaN","format","getPriority","priority","VERY_HIGH","VeryHigh","None","HIGH","High","MEDIUM","Medium","LOW","Low","__exports","__esModule"],"sources":["TaskUtils.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport Formatting from \"sap/base/i18n/Formatting\";\nimport { Priority } from \"sap/m/library\";\nimport Locale from \"sap/ui/core/Locale\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport { Response } from \"../ToDoPanel\";\n\ninterface UserInfo {\n\tEmail?: string;\n}\n\nexport enum TaskPriority {\n\tVERY_HIGH = \"VERY_HIGH\",\n\tHIGH = \"HIGH\",\n\tMEDIUM = \"MEDIUM\",\n\tLOW = \"LOW\"\n}\n\nconst userInfo: Record<string, UserInfo> = {};\n\n/**\n * Get the task URL for a given task.\n *\n * @private\n * @param {string} originId - The origin ID of the task.\n * @param {string} instanceId - The instance ID of the task.\n * @returns {string} The task URL.\n */\nexport function getTaskUrl(originId: string, instanceId: string, targetAppUrl: string): string {\n\tconst taskInstanceURL = `?showAdditionalAttributes=true&/detail/${originId}/${instanceId}/TaskCollection(SAP__Origin='${originId}',InstanceID='${instanceId}')`;\n\n\treturn targetAppUrl + taskInstanceURL;\n}\n\n/**\n * Fetches user details if required.\n *\n * @private\n * @param {string} originId - The origin ID.\n * @param {string} userId - The user ID.\n * @returns {Promise<UserInfo>} - A promise that resolves to the user information.\n */\nexport function fetchUserDetails(originId: string, userId: string): Promise<UserInfo> {\n\tif (Object.keys(userInfo).includes(userId)) {\n\t\treturn Promise.resolve(userInfo[userId]);\n\t} else {\n\t\treturn _fetchUserInfo(originId, userId);\n\t}\n}\n\n/**\n * Fetches user information for a specific user.\n *\n * @private\n * @param {string} originId - The origin ID.\n * @param {string} userId - The user ID.\n * @returns {Promise<UserInfo>} - A promise that resolves to the user information.\n */\nasync function _fetchUserInfo(originId: string, userId: string): Promise<UserInfo> {\n\ttry {\n\t\tconst response = await fetch(\n\t\t\t`/sap/opu/odata/IWPGW/TASKPROCESSING;mo;v=2/UserInfoCollection(SAP__Origin='${originId}',UniqueName='${userId}')?$format=json`\n\t\t);\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Failed to Fetch User Info for: ${userId}`);\n\t\t}\n\n\t\tconst { d: data } = (await response.json()) as Response;\n\t\tuserInfo[userId] = data as UserInfo;\n\t\treturn userInfo[userId];\n\t} catch (error: unknown) {\n\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\treturn {};\n\t}\n}\n\n/**\n * Check whether given dateString is of format YYYYMMDD and is a valid value for Date object.\n *\n * @param {string} dateString - The datestring to be checked for validity\n * @returns {Date} if its a valid date return the date else false\n * @private\n */\nfunction _isValidDate(dateString: string): boolean {\n\t// Check if the input has the correct length\n\tif (dateString.length !== 8) {\n\t\treturn false;\n\t}\n\n\t// Parse the date components\n\tconst year = parseInt(dateString.slice(0, 4), 10);\n\tconst month = parseInt(dateString.slice(4, 6), 10) - 1;\n\tconst day = parseInt(dateString.slice(6), 10);\n\n\t// Create a Date object with the parsed components\n\tconst date = new Date(year, month, day);\n\n\t// Check if the parsed date is valid\n\treturn date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n}\n\n/**\n * Parses different time formats supplied from the back-ends. It returns UNIX time stamp in milliseconds.\n * If Time Format contains unexpected symbols or Format is not recognized NaN is returned.\n * Referenced from: cross.fnd.fiori.inbox.CustomAttributeComparator\n *\n * @param {string | number} time date format to be parsed. If int UNIX time stamp in milliseconds is assumed.\n * @returns {number} UNIX time stamp in milliseconds. (milliseconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970)\n * @private\n */\nfunction _getParsedTime(time: string | number): number {\n\tif (time == null || time === \"00000000\") {\n\t\treturn NaN;\n\t}\n\n\tif (typeof time === \"number\") {\n\t\treturn time;\n\t}\n\n\t// Check for various time formats\n\tconst dateRegex = /\\/(Date)\\((\\d+)\\)\\//;\n\tconst yyyymmddRegex = /^\\d{8}$/;\n\tconst isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))?$/;\n\n\tconst dateMatch = time.match(dateRegex);\n\tif (dateMatch) {\n\t\t// Time Format \"/Date(869080830000)/\"\n\t\treturn parseInt(dateMatch[2], 10);\n\t}\n\n\tif (yyyymmddRegex.test(time) && _isValidDate(time)) {\n\t\t// Time Format \"YYYYMMDD\" (Old TGW format)\n\t\tconst parsedDate = DateFormat.getDateInstance().parse(time);\n\t\treturn parsedDate instanceof Date ? parsedDate.getTime() : NaN;\n\t}\n\n\tconst isoMatch = time.match(isoRegex);\n\tif (isoMatch) {\n\t\t// Time Format \"2018-01-05T00:00:00\" (BPM and TGW-cloud format, UTC)\n\t\treturn new Date(time).getTime();\n\t}\n\n\treturn NaN;\n}\n\n/**\n * Format a date string to a custom date and time format.\n *\n * @private\n * @param {string} dateStr - The date string to format.\n * @param {string} pattern - The pattern to be used for formatting the date.\n * @returns {string} The formatted date string.\n */\nexport function formatDate(dateStr: string, pattern: string = Formatting.getDatePattern(\"short\") || \"dd/MM/yyyy\"): string {\n\tconst locale = new Locale(Formatting.getLanguageTag().language);\n\tconst dateFormat = DateFormat.getDateTimeInstance({ pattern }, locale);\n\tconst value = _getParsedTime(dateStr);\n\tlet formattedDate = \"\";\n\n\tif (!isNaN(value)) {\n\t\tformattedDate = dateFormat.format(new Date(value));\n\t}\n\n\treturn formattedDate;\n}\n\n/**\n * Convert a priority string to a corresponding priority value.\n *\n * @private\n * @param {TaskPriority} priority - The task priority string.\n * @returns {string} The corresponding priority value.\n */\nexport function getPriority(priority: TaskPriority): Priority {\n\tif (priority === TaskPriority.VERY_HIGH) {\n\t\treturn Priority.VeryHigh ? Priority.VeryHigh : Priority.None;\n\t} else if (priority === TaskPriority.HIGH) {\n\t\treturn Priority.High;\n\t} else if (priority === TaskPriority.MEDIUM) {\n\t\treturn Priority.Medium;\n\t} else if (priority === TaskPriority.LOW) {\n\t\treturn Priority.Low;\n\t} else {\n\t\treturn Priority.None;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}