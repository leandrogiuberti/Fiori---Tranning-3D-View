{"version":3,"file":"DecisionDialog-dbg.js","names":["sap","ui","define","Log","MessageBox","sap_m_library","BaseObject","Element","Fragment","sap_ui_core_library","JSONModel","ODataModel","ResourceModel","___DataFormatUtils","___TaskUtils","_catch","body","recover","result","e","then","ButtonType","ValueState","toTaskPriorityText","TaskPriority","ReasonRequired","decideButtonNature","decisionOption","Nature","toUpperCase","Accept","Reject","Neutral","Default","getActionButton","i18nBundle","task","baseUrl","text","DecisionText","type","pressHandler","DecisionDialog","decisionDialogMethod","bind","getIconFrameBadge","priority","iconBadge","VERY_HIGH","HIGH","getIconFrameBadgeValueState","Error","None","extend","constructor","_constructor","refreshView","BaseObject.prototype.constructor.call","handleReasonOptionChange","_handleReasonOptionChange","event","comboBox","getSource","comboBoxValue","getValue","selectedItem","getSelectedItem","confirmationDialogPromise","confirmationDialog","comboBoxRequired","confirmationDialogModel","getData","dialogSettings","reasonOptionsSettings","required","setTooltip","setValueState","getBeginButton","setEnabled","_toggleSubmitButtonState","catch","error","message","String","dialogData","noteRequired","noteMandatory","noteFilled","getElementById","trim","length","comboBoxFilled","noteFlag","comboBoxFlag","setProperty","readReasonOptions","_readReasonOptions","origin","instance","decisionKey","onSuccess","onError","sPath","oUrlParams","SAP__Origin","InstanceID","DecisionKey","fnSuccess","oData","results","fnError","oError","dataServiceModel","read","urlParameters","success","groupId","loadReasonOptions","_loadReasonOptions","_this","metaModel","getMetaModel","Promise","resolve","loaded","getODataFunctionImport","reject","reasonOptions","show","Required","Optional","openDecisionDialog","_openDecisionDialog","submitButtonEnabled","load","name","controller","confirmationDialogFragment","i18nModel","bundle","priorityText","addStyleClass","Priority","setModel","open","confirmActionHandler","_confirmActionHandler","getModel","getProperty","reasonOptionSelectedItem","reasonCode","getKey","note","showNote","handleCancel","_handleCancel","_bClosedViaButton","close","cancelActionHandler","refresh","handleAfterClose","_handleAfterClose","destroy","createODataRequest","_createODataRequest","path","urlParams","settings","data","response","info","getText","details","parameters","responseText","fireRequestFailed","create","sendAction","_sendAction","importName","decision","reasonOptionCode","Comments","ReasonCode","setBusy","JSON","parse","value","showDecisionDialog","_showDecisionDialog","_this2","TaskTitle","title","decisionDialogSettings","CommentMandatory","question","badgeIcon","badgeValueState","confirmButtonLabel","showFeedbackMessage","textAreaLabel","reasonOptionKey","_temp","metadataLoaded","reasonOptionsLoadedPromise","noneText","unshift","Name","Code","dialogUtils","getTaskActions","multiSelectDecisionResults","actions","displayedTypes","Set","multiSelectDecisionOptions","TaskDefinitionID","has","push","add","action"],"sources":["DecisionDialog.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport ComboBox from \"sap/m/ComboBox\";\nimport Dialog from \"sap/m/Dialog\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Text from \"sap/m/Text\";\nimport TextArea from \"sap/m/TextArea\";\nimport { ButtonType } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { Task } from \"../TaskPanel\";\nimport { Response } from \"../ToDoPanel\";\nimport { toTaskPriorityText } from \"./DataFormatUtils\";\nimport { TaskPriority } from \"./TaskUtils\";\n\nenum ReasonRequired {\n\tRequired = \"REQUIRED\",\n\tOptional = \"OPTIONAL\"\n}\n\nexport interface DecisionOption {\n\tSAP__Origin: string;\n\tInstanceID: string;\n\tNature: ButtonType;\n\tDecisionKey: string;\n\tCommentMandatory: boolean;\n\tDecisionText: string;\n\tReasonRequired: ReasonRequired;\n}\n\ninterface ReasonOption {\n\t[key: string]: string;\n}\n\ninterface ReasonOptionSettings {\n\tshow: boolean;\n\trequired: boolean;\n\treasonOptions?: ReasonOption[];\n}\n\ninterface DecisionDialogSettings {\n\tbadgeIcon: string;\n\tbadgeValueState: string;\n\tshowNote: boolean;\n\tnoteMandatory: boolean;\n\tquestion: string;\n\ttitle: string;\n\tconfirmButtonLabel: string;\n\ttextAreaLabel: string;\n\tpriorityText: string;\n\tshowFeedbackMessage: boolean;\n\treasonOptionsSettings: ReasonOptionSettings;\n\tconfirmActionHandler: (note: string, reasonCode: string) => void;\n\tcancelActionHandler: () => void;\n}\n\ninterface IDecisionDialog extends Dialog {\n\t_bClosedViaButton: boolean;\n}\n\ninterface DialogSettings {\n\tdialogSettings: DecisionDialogSettings;\n\tsubmitButtonEnabled: boolean;\n}\n\ninterface ODataError {\n\tresponse: {\n\t\tbody: string;\n\t};\n\tresponseText: string;\n\terror: {\n\t\tmessage: {\n\t\t\tvalue: string;\n\t\t};\n\t};\n}\n\ninterface MultiSelectDecisionResult {\n\t[key: string]: DecisionOption[];\n}\n\nexport interface ActionButton {\n\ttype: ButtonType;\n\ttext: string;\n\tpressHandler: (refresh: Refresh) => Promise<void> | void;\n}\n\ninterface Refresh {\n\t(forceRefresh: boolean): void;\n}\n\nconst decideButtonNature = (decisionOption: DecisionOption): ButtonType => {\n\tswitch (decisionOption.Nature?.toUpperCase()) {\n\t\tcase \"POSITIVE\":\n\t\t\treturn ButtonType.Accept;\n\t\tcase \"NEGATIVE\":\n\t\t\treturn ButtonType.Reject;\n\t\tcase \"NEUTRAL\":\n\t\t\treturn ButtonType.Neutral;\n\t\tdefault:\n\t\t\treturn ButtonType.Default;\n\t}\n};\n\nconst getActionButton = (decisionOption: DecisionOption, i18nBundle: ResourceBundle, task: Task, baseUrl: string): ActionButton => {\n\treturn {\n\t\ttext: decisionOption.DecisionText,\n\t\ttype: decideButtonNature(decisionOption) || ButtonType.Default,\n\t\tpressHandler: DecisionDialog.decisionDialogMethod.bind(null, decisionOption, i18nBundle, task, baseUrl)\n\t};\n};\n\n/**\n * Gets the icon frame badge based on the task priority.\n *\n * This method returns a specific badge string for tasks with high or very high priority.\n * For tasks with lower priorities, it returns an empty string.\n *\n * @param {TaskPriority} priority - The priority level of the task.\n * @returns {string} The badge string for high priority tasks, or an empty string for others.\n */\nexport function getIconFrameBadge(priority: TaskPriority): string {\n\tlet iconBadge = \"\";\n\tif (priority === TaskPriority.VERY_HIGH || priority === TaskPriority.HIGH) {\n\t\ticonBadge = \"sap-icon://high-priority\";\n\t}\n\n\treturn iconBadge;\n}\n\n/**\n * Converts a priority string to a Priority enum value.\n * If the priority string is not recognized, it returns the default value \"None\".\n *\n * @param {TaskPriority} priority - The priority string to convert.\n * @returns {ValueState} The corresponding Priority enum value.\n */\nexport function getIconFrameBadgeValueState(priority: TaskPriority): ValueState {\n\treturn priority === TaskPriority.VERY_HIGH || priority === TaskPriority.HIGH ? ValueState.Error : ValueState.None;\n}\n\n/**\n *\n * Helper class for Decision Dialog handling.\n *\n * @extends BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n * @private\n *\n * @alias sap.cux.home.utils.DecisionDialog\n */\nexport default class DecisionDialog extends BaseObject {\n\tprivate decisionOption: DecisionOption;\n\tprivate i18nBundle: ResourceBundle;\n\tprivate refreshView: Refresh;\n\tprivate task: Task;\n\tprivate confirmationDialogPromise!: Promise<IDecisionDialog>;\n\tprivate confirmationDialogModel!: JSONModel;\n\tprivate dataServiceModel!: ODataModel;\n\tprivate baseUrl: string;\n\n\tconstructor(decisionOption: DecisionOption, i18nBundle: ResourceBundle, task: Task, baseUrl: string, refreshView: Refresh) {\n\t\tsuper();\n\t\tthis.decisionOption = decisionOption;\n\t\tthis.i18nBundle = i18nBundle;\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.refreshView = refreshView;\n\t\tthis.task = task;\n\t}\n\n\t/**\n\t * Handles the change event of the reason option ComboBox.\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t * @returns {void}\n\t */\n\tpublic handleReasonOptionChange(event: Event): void {\n\t\tconst comboBox = event.getSource<ComboBox>();\n\t\tconst comboBoxValue = comboBox.getValue();\n\t\tconst selectedItem = comboBox.getSelectedItem();\n\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tconst comboBoxRequired = (this.confirmationDialogModel.getData() as DialogSettings).dialogSettings.reasonOptionsSettings\n\t\t\t\t\t.required;\n\t\t\t\t// Set the tooltip useful when the currently selected item's text is truncated\n\t\t\t\tcomboBox.setTooltip(comboBoxValue);\n\t\t\t\tcomboBox.setValueState(selectedItem === null ? ValueState.Error : ValueState.None);\n\n\t\t\t\t// Special case where if reason options is optional and all\n\t\t\t\t// the text is deleted value state should be none (corner case)\n\t\t\t\tif (!comboBoxRequired && comboBoxValue === \"\") {\n\t\t\t\t\tcomboBox.setValueState(ValueState.None);\n\t\t\t\t}\n\n\t\t\t\t// Special case where if value in combo box gets partially deleted by the user\n\t\t\t\t// there is no selection yet button is not disabled\n\t\t\t\tif (!comboBoxRequired && comboBoxValue !== \"\" && selectedItem === null) {\n\t\t\t\t\tconfirmationDialog.getBeginButton().setEnabled(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Update the submit button state (disabled / enabled)\n\t\t\t\tthis._toggleSubmitButtonState();\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * Toggles the state of the submit button based on the dialog settings.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tpublic _toggleSubmitButtonState(): void {\n\t\tconst dialogData = this.confirmationDialogModel.getData() as DialogSettings;\n\t\tconst noteRequired = dialogData.dialogSettings.noteMandatory;\n\n\t\tconst noteFilled = (Element.getElementById(\"confirmDialogTextarea\") as TextArea).getValue().trim().length > 0;\n\t\tconst comboBoxRequired = dialogData.dialogSettings.reasonOptionsSettings.required;\n\n\t\tconst comboBoxFilled = (Element.getElementById(\"reasonOptionsSelect\") as ComboBox).getSelectedItem() !== null;\n\t\tconst noteFlag = (noteRequired && noteFilled) || !noteRequired;\n\t\tconst comboBoxFlag = (comboBoxRequired && comboBoxFilled) || !comboBoxRequired;\n\n\t\tthis.confirmationDialogModel.setProperty(\"/submitButtonEnabled\", noteFlag && comboBoxFlag);\n\t}\n\n\t/**\n\t * Reads reason options from the backend.\n\t *\n\t * @private\n\t * @param {string} origin - The SAP origin.\n\t * @param {string} instance - The instance ID.\n\t * @param {string} decisionKey - The decision key.\n\t * @param {Function} onSuccess - The success callback function.\n\t * @param {Function} onError - The error callback function.\n\t * @returns {void}\n\t */\n\tprivate readReasonOptions(\n\t\torigin: string,\n\t\tinstance: string,\n\t\tdecisionKey: string,\n\t\tonSuccess: (arg: ReasonOption[]) => void,\n\t\tonError: (arg: unknown) => void\n\t): void {\n\t\tconst sPath = \"/ReasonOptions\";\n\t\tconst oUrlParams = {\n\t\t\tSAP__Origin: `'${origin}'`,\n\t\t\tInstanceID: `'${instance}'`,\n\t\t\tDecisionKey: `'${decisionKey}'`\n\t\t};\n\t\tconst fnSuccess = (oData: Response) => {\n\t\t\tif (oData && oData.results) {\n\t\t\t\tif (onSuccess) {\n\t\t\t\t\tonSuccess(oData.results as ReasonOption[]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst fnError = (oError: unknown) => {\n\t\t\tif (onError) {\n\t\t\t\tonError(oError);\n\t\t\t}\n\t\t};\n\n\t\tthis.dataServiceModel.read(sPath, {\n\t\t\turlParameters: oUrlParams,\n\t\t\tsuccess: fnSuccess,\n\t\t\terror: fnError,\n\t\t\tgroupId: \"reasonOptions\"\n\t\t});\n\t}\n\n\t/**\n\t * Load the reason options which are part of this decision option.\n\t *\n\t * @private\n\t * @returns {Promise<ReasonOptionSettings | null>} - containing resolved array of reason options\n\t */\n\tprivate async loadReasonOptions(): Promise<ReasonOptionSettings | null> {\n\t\tconst metaModel = this.dataServiceModel.getMetaModel();\n\t\tawait metaModel.loaded();\n\n\t\tif (metaModel.getODataFunctionImport(\"ReasonOptions\")) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.readReasonOptions(\n\t\t\t\t\tthis.decisionOption.SAP__Origin,\n\t\t\t\t\tthis.decisionOption.InstanceID,\n\t\t\t\t\tthis.decisionOption.DecisionKey,\n\t\t\t\t\t(reasonOptions: ReasonOption[]) => {\n\t\t\t\t\t\tconst reasonOptionsSettings = {\n\t\t\t\t\t\t\tshow:\n\t\t\t\t\t\t\t\t(this.decisionOption.ReasonRequired === ReasonRequired.Required ||\n\t\t\t\t\t\t\t\t\tthis.decisionOption.ReasonRequired === ReasonRequired.Optional) &&\n\t\t\t\t\t\t\t\treasonOptions.length > 0,\n\t\t\t\t\t\t\trequired: this.decisionOption.ReasonRequired === ReasonRequired.Required,\n\t\t\t\t\t\t\treasonOptions: reasonOptions\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresolve(reasonOptionsSettings);\n\t\t\t\t\t},\n\t\t\t\t\t(oError) => {\n\t\t\t\t\t\treject(oError as Error);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Open the decision dialog for the inbox task selected.\n\t *\n\t * @private\n\t * @param {DecisionDialogSettings} dialogSettings - contains the settings for the decision dialog\n\t */\n\tprivate openDecisionDialog(dialogSettings: DecisionDialogSettings) {\n\t\tthis.confirmationDialogModel = new JSONModel({\n\t\t\tsubmitButtonEnabled: !dialogSettings?.noteMandatory && !dialogSettings?.reasonOptionsSettings?.required,\n\t\t\tdialogSettings\n\t\t});\n\n\t\tthis.confirmationDialogPromise = Fragment.load({\n\t\t\ttype: \"XML\",\n\t\t\tname: \"sap.cux.home.utils.fragment.showDecisionDialog\",\n\t\t\tcontroller: this\n\t\t})\n\t\t\t.then((confirmationDialogFragment: Control | Control[]) => {\n\t\t\t\tconst confirmationDialog = confirmationDialogFragment as IDecisionDialog;\n\t\t\t\tconst i18nModel = new ResourceModel({ bundle: this.i18nBundle });\n\t\t\t\tconst priorityText = Element.getElementById(\"task-priority-text\") as Text;\n\t\t\t\tpriorityText.addStyleClass(this.task.Priority);\n\n\t\t\t\tconfirmationDialog.setModel(this.confirmationDialogModel);\n\t\t\t\tconfirmationDialog.setModel(i18nModel, \"i18n\");\n\t\t\t\tconfirmationDialog.open();\n\t\t\t\treturn confirmationDialog;\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t}) as Promise<IDecisionDialog>;\n\t}\n\n\t/**\n\t * Submit handler for the decision dialog\n\t *\n\t * @private\n\t */\n\tpublic confirmActionHandler(): void {\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tconst dialogSettings = (confirmationDialog.getModel()?.getProperty(\"/\") as DialogSettings).dialogSettings;\n\t\t\t\tconst reasonOptionsSettings = dialogSettings.reasonOptionsSettings;\n\n\t\t\t\t// Get the reason option value from the combo box\n\t\t\t\tconst reasonOptionSelectedItem = reasonOptionsSettings.show\n\t\t\t\t\t? (Element.getElementById(\"reasonOptionsSelect\") as ComboBox)?.getSelectedItem()\n\t\t\t\t\t: null;\n\t\t\t\tconst reasonCode = (\n\t\t\t\t\treasonOptionSelectedItem !== null && reasonOptionSelectedItem?.getKey() !== \"defaultSelectedKey\"\n\t\t\t\t\t\t? reasonOptionSelectedItem.getKey()\n\t\t\t\t\t\t: null\n\t\t\t\t) as string;\n\n\t\t\t\t// Get the note value from the text area\n\t\t\t\tconst note = (\n\t\t\t\t\tdialogSettings.showNote ? (Element.getElementById(\"confirmDialogTextarea\") as TextArea)?.getValue() : null\n\t\t\t\t) as string;\n\t\t\t\tdialogSettings.confirmActionHandler(note, reasonCode);\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * Handler for cancel action in the decision dialog\n\t *\n\t * @private\n\t */\n\tpublic handleCancel() {\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tconst dialogSettings = (confirmationDialog.getModel()?.getProperty(\"/\") as DialogSettings).dialogSettings;\n\t\t\t\tconfirmationDialog._bClosedViaButton = true;\n\t\t\t\tconfirmationDialog.close();\n\t\t\t\tdialogSettings.cancelActionHandler();\n\n\t\t\t\tif (this.confirmationDialogModel.getProperty(\"/dialogSettings/showFeedbackMessage\")) {\n\t\t\t\t\tthis.dataServiceModel.refresh();\n\t\t\t\t\tthis.refreshView(true);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * After close dialog handler in the decision dialog\n\t *\n\t * @private\n\t */\n\tpublic handleAfterClose() {\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tif (confirmationDialog._bClosedViaButton) {\n\t\t\t\t\t// dialog is closed via button\n\t\t\t\t\tconfirmationDialog._bClosedViaButton = false;\n\t\t\t\t} else {\n\t\t\t\t\t// dialog is closed by other means (e.g. pressing Escape)\n\t\t\t\t\tconst dialogSettings = (confirmationDialog.getModel()?.getProperty(\"/\") as DialogSettings).dialogSettings;\n\t\t\t\t\tdialogSettings.cancelActionHandler();\n\t\t\t\t}\n\t\t\t\tconfirmationDialog.destroy();\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * Creates an OData request with the specified parameters.\n\t *\n\t * @private\n\t * @param {string} path - The path of the OData request.\n\t * @param {Record<string, string>} urlParams - The URL parameters of the request.\n\t * @param {Function} fnSuccess - The success callback function.\n\t * @param {Function} fnError - The error callback function.\n\t * @returns {void}\n\t */\n\tprivate createODataRequest(\n\t\tpath: string,\n\t\turlParams: Record<string, string>,\n\t\tfnSuccess: (data: unknown, response: unknown) => void,\n\t\tfnError: (error: ODataError) => void\n\t): void {\n\t\tconst settings = {\n\t\t\tsuccess: (data: unknown, response: unknown) => {\n\t\t\t\tLog.info(\"successful action\");\n\t\t\t\tfnSuccess?.(data, response);\n\t\t\t},\n\t\t\terror: (error: ODataError) => {\n\t\t\t\tconst message = this.i18nBundle.getText(\"DataManager.HTTPRequestFailed\");\n\t\t\t\tconst details = error.response ? error.response.body : null;\n\t\t\t\tconst parameters = {\n\t\t\t\t\tmessage: message,\n\t\t\t\t\tresponseText: details as string\n\t\t\t\t};\n\t\t\t\tthis.dataServiceModel.fireRequestFailed(parameters);\n\t\t\t\tfnError(error);\n\t\t\t},\n\t\t\turlParameters: urlParams\n\t\t};\n\n\t\tthis.dataServiceModel.create(path, {}, settings);\n\t}\n\n\t/**\n\t * Sends an action to the backend.\n\t *\n\t * @private\n\t * @param {string} importName - The name of the function import or action.\n\t * @param {DecisionOption} decision - The decision option.\n\t * @param {string} note - The note to be included with the action.\n\t * @param {string} reasonOptionCode - The reason option code.\n\t * @param {Task} task - The task associated with the action.\n\t * @returns {void}\n\t */\n\tprivate sendAction(importName: string, decision: DecisionOption, note: string, reasonOptionCode: string, task: Task): void {\n\t\tconst urlParams: Record<string, string> = {\n\t\t\tSAP__Origin: `'${task.SAP__Origin}'`,\n\t\t\tInstanceID: `'${task.InstanceID}'`\n\t\t};\n\n\t\tif (decision.DecisionKey) {\n\t\t\turlParams.DecisionKey = `'${decision.DecisionKey}'`;\n\t\t}\n\n\t\tif (note?.length > 0) {\n\t\t\turlParams.Comments = `'${note}'`;\n\t\t}\n\n\t\tif (reasonOptionCode) {\n\t\t\turlParams.ReasonCode = `'${reasonOptionCode}'`;\n\t\t}\n\n\t\tconst onSuccess = () => {\n\t\t\tthis.confirmationDialogPromise\n\t\t\t\t.then((confirmationDialog) => {\n\t\t\t\t\tconfirmationDialog.setBusy(false);\n\t\t\t\t\tthis.confirmationDialogModel.setProperty(\"/dialogSettings/showFeedbackMessage\", true);\n\t\t\t\t})\n\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t\t});\n\t\t};\n\n\t\tconst onError = (error: ODataError) => {\n\t\t\tif (error.responseText) {\n\t\t\t\tconst oError = JSON.parse(error.responseText) as ODataError;\n\t\t\t\tMessageBox.error(oError?.error?.message?.value);\n\t\t\t}\n\t\t\tthis.handleCancel();\n\t\t};\n\n\t\tthis.createODataRequest(`/${importName}`, urlParams, onSuccess, onError);\n\t}\n\n\t/**\n\t * Shows the decision dialog.\n\t *\n\t * @private\n\t * @returns {Promise<void>}\n\t */\n\tprivate async showDecisionDialog(): Promise<void> {\n\t\tthis.dataServiceModel = this.dataServiceModel || new ODataModel(this.baseUrl);\n\t\tconst { TaskTitle: title, Priority } = this.task;\n\t\tconst decisionDialogSettings: DecisionDialogSettings = {\n\t\t\tnoteMandatory: this.decisionOption.CommentMandatory,\n\t\t\tquestion: this.i18nBundle.getText(\"XMSG_DECISION_QUESTION\", [this.decisionOption.DecisionText]) as string,\n\t\t\ttitle,\n\t\t\tbadgeIcon: getIconFrameBadge(Priority),\n\t\t\tbadgeValueState: getIconFrameBadgeValueState(Priority),\n\t\t\tpriorityText: this.i18nBundle.getText(toTaskPriorityText(Priority)) as string,\n\t\t\tconfirmButtonLabel: this.i18nBundle.getText(\"XBUT_SUBMIT\") as string,\n\t\t\tshowNote: true,\n\t\t\tshowFeedbackMessage: false,\n\t\t\treasonOptionsSettings: {\n\t\t\t\tshow: false,\n\t\t\t\trequired: false\n\t\t\t},\n\t\t\ttextAreaLabel: this.i18nBundle.getText(\"XFLD_TextArea_Decision\") as string,\n\t\t\tconfirmActionHandler: (note, reasonOptionKey) => {\n\t\t\t\tthis.sendAction(\"Decision\", this.decisionOption, note, reasonOptionKey, this.task);\n\t\t\t},\n\t\t\tcancelActionHandler: () => {}\n\t\t};\n\n\t\ttry {\n\t\t\tawait this.dataServiceModel.metadataLoaded();\n\t\t\tconst reasonOptionsLoadedPromise =\n\t\t\t\tthis.decisionOption?.ReasonRequired === ReasonRequired.Required ||\n\t\t\t\tthis.decisionOption?.ReasonRequired === ReasonRequired.Optional\n\t\t\t\t\t? this.loadReasonOptions()\n\t\t\t\t\t: null;\n\n\t\t\t// reason options won't be loaded\n\t\t\tif (!reasonOptionsLoadedPromise) {\n\t\t\t\tthis.openDecisionDialog(decisionDialogSettings);\n\t\t\t} else {\n\t\t\t\t// based on reasonOptionsLoadedPromise, reason options will be loaded\n\t\t\t\treasonOptionsLoadedPromise\n\t\t\t\t\t.then((reasonOptionsSettings: ReasonOptionSettings | null) => {\n\t\t\t\t\t\tif (reasonOptionsSettings !== null) {\n\t\t\t\t\t\t\tdecisionDialogSettings.reasonOptionsSettings = reasonOptionsSettings;\n\n\t\t\t\t\t\t\t// In case of optional reason option combo box, a (None) option is created as to have a default selection\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdecisionDialogSettings.reasonOptionsSettings?.reasonOptions &&\n\t\t\t\t\t\t\t\t!decisionDialogSettings.reasonOptionsSettings?.required\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst noneText = `(${this.i18nBundle.getText(\"XSEL_DECISION_REASON_NONE_OPTION\")})`;\n\t\t\t\t\t\t\t\tdecisionDialogSettings.reasonOptionsSettings.reasonOptions.unshift({\n\t\t\t\t\t\t\t\t\tName: noneText,\n\t\t\t\t\t\t\t\t\tCode: \"defaultSelectedKey\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.openDecisionDialog(decisionDialogSettings);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tLog.error(\"Could not load the reason options properly\");\n\t\t\t\t\t});\n\t\t\t}\n\t\t} catch {\n\t\t\tLog.error(\"Could not load metadata model for inbox\");\n\t\t}\n\t}\n\n\t/**\n\t * Initiates the decisionDialog\n\t *\n\t * @static\n\t * @param {DecisionOption} decisionOption - Decision Option\n\t * @param {ResourceModel} i18nBundle - The resource bundle for internationalization.\n\t * @param {Task} task - Task Instance\n\t * @param {Refresh} refresh - Refresh function\n\t */\n\tstatic decisionDialogMethod(decisionOption: DecisionOption, i18nBundle: ResourceBundle, task: Task, baseUrl: string, refresh: Refresh) {\n\t\tconst dialogUtils = new DecisionDialog(decisionOption, i18nBundle, task, baseUrl, refresh);\n\t\treturn dialogUtils.showDecisionDialog();\n\t}\n\n\t/**\n\t * Retrieves task actions based on the task and multi-select decision results.\n\t *\n\t * @static\n\t * @param {Task} task - The task for which actions are retrieved.\n\t * @param {string} baseUrl - The base URL.\n\t * @param {MultiSelectDecisionResult} multiSelectDecisionResults - The multi-select decision results.\n\t * @param {ResourceBundle} i18nBundle - The resource bundle for internationalization.\n\t * @returns {ActionButton[]} An array of action buttons.\n\t */\n\tstatic getTaskActions(\n\t\ttask: Task,\n\t\tbaseUrl: string,\n\t\tmultiSelectDecisionResults: MultiSelectDecisionResult,\n\t\ti18nBundle: ResourceBundle\n\t): ActionButton[] {\n\t\tconst actions: ActionButton[] = [];\n\t\tconst displayedTypes = new Set<string>();\n\t\tconst multiSelectDecisionOptions = multiSelectDecisionResults[task.SAP__Origin + task.TaskDefinitionID];\n\n\t\tif (multiSelectDecisionOptions) {\n\t\t\tfor (const decisionOption of multiSelectDecisionOptions) {\n\t\t\t\tif (!displayedTypes.has(decisionOption.Nature) || !decisionOption.Nature) {\n\t\t\t\t\tactions.push(getActionButton(decisionOption, i18nBundle, task, baseUrl));\n\t\t\t\t\tdisplayedTypes.add(decisionOption.Nature);\n\t\t\t\t} else {\n\t\t\t\t\tconst action = getActionButton(decisionOption, i18nBundle, task, baseUrl);\n\t\t\t\t\taction.type = ButtonType.Default;\n\t\t\t\t\tactions.push(action);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn actions;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}