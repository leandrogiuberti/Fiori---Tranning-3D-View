{"version":3,"file":"Accessibility-dbg.js","names":["sap","ui","define","InvisibleText","getInvisibleText","id","text","Error","checkPanelExists","parentContainer","containerTypeName","panelTypeName","layout","_getLayout","items","getAggregation","targetContainer","Array","find","control","getMetadata","getName","containerContents","normalizedItems","some","__exports","__esModule"],"sources":["Accessibility.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport InvisibleText from \"sap/ui/core/InvisibleText\";\nimport BaseContainer from \"../BaseContainer\";\nimport BaseLayout from \"../BaseLayout\";\nimport BasePanel from \"../BasePanel\";\n\n/**\n * Creates an instance of `InvisibleText` with the given ID and text.\n *\n * @param {string} id - The unique id for the `InvisibleText` instance.\n * @param {string} [text=\"\"] - The text content for the `InvisibleText` instance. Defaults to an empty string.\n * @returns {InvisibleText} A new `InvisibleText` instance.\n * @throws {Error} If the `id` is not provided.\n */\nexport function getInvisibleText(id: string, text: string = \"\"): InvisibleText {\n\tif (id) {\n\t\treturn new InvisibleText({\n\t\t\tid: id,\n\t\t\ttext: text || \"\"\n\t\t});\n\t} else {\n\t\tthrow new Error(\"ID is required for InvisibleText.\");\n\t}\n}\n\n/**\n * Checks whether a specific panel type exists within a given container in the layout.\n *\n * @param {BaseContainer} parentContainer - The parent container from where the from which the function is called.\n * @param {string} containerTypeName - The name of the container to look for.\n * @param {string} panelTypeName - The name of the panel to verify inside the container.\n * @returns {boolean} - Returns `true` if the specified panel exists, otherwise `false`.\n */\nexport function checkPanelExists(\n\tparentContainer: BaseContainer | BasePanel | BaseLayout,\n\tcontainerTypeName: string,\n\tpanelTypeName: string\n): boolean {\n\tconst layout = (parentContainer as BaseContainer)?._getLayout?.() ?? parentContainer;\n\tconst items = layout?.getAggregation(\"items\");\n\tconst targetContainer = items instanceof Array ? items.find((control) => control.getMetadata()?.getName() === containerTypeName) : null;\n\tconst containerContents = targetContainer?.getAggregation(\"content\");\n\tconst normalizedItems = (containerContents && (containerContents instanceof Array ? containerContents : [containerContents])) || [];\n\treturn normalizedItems.some((control) => control.getMetadata()?.getName() === panelTypeName);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAHAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,0CAAAC,aAAA;EAAA;;EASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACO,SAASC,gBAAgBA,CAACC,EAAU,EAAEC,IAAY,GAAG,EAAE,EAAiB;IAC9E,IAAID,EAAE,EAAE;MACP,OAAO,IAAIF,aAAa,CAAC;QACxBE,EAAE,EAAEA,EAAE;QACNC,IAAI,EAAEA,IAAI,IAAI;MACf,CAAC,CAAC;IACH,CAAC,MAAM;MACN,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACrD;EACD;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACO,SAASC,gBAAgBA,CAC/BC,eAAuD,EACvDC,iBAAyB,EACzBC,aAAqB,EACX;IACV,MAAMC,MAAM,GAAIH,eAAe,EAAoBI,UAAU,GAAG,CAAC,IAAIJ,eAAe;IACpF,MAAMK,KAAK,GAAGF,MAAM,EAAEG,cAAc,CAAC,OAAO,CAAC;IAC7C,MAAMC,eAAe,GAAGF,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAACI,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,WAAW,CAAC,CAAC,EAAEC,OAAO,CAAC,CAAC,KAAKX,iBAAiB,CAAC,GAAG,IAAI;IACvI,MAAMY,iBAAiB,GAAGN,eAAe,EAAED,cAAc,CAAC,SAAS,CAAC;IACpE,MAAMQ,eAAe,GAAID,iBAAiB,KAAKA,iBAAiB,YAAYL,KAAK,GAAGK,iBAAiB,GAAG,CAACA,iBAAiB,CAAC,CAAC,IAAK,EAAE;IACnI,OAAOC,eAAe,CAACC,IAAI,CAAEL,OAAO,IAAKA,OAAO,CAACC,WAAW,CAAC,CAAC,EAAEC,OAAO,CAAC,CAAC,KAAKV,aAAa,CAAC;EAC7F;EAAC,IAAAc,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAArB,gBAAA,GAAAA,gBAAA;EAAAqB,SAAA,CAAAjB,gBAAA,GAAAA,gBAAA;EAAA,OAAAiB,SAAA;AAAA","ignoreList":[]}