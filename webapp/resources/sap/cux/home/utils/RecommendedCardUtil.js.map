{"version":3,"file":"RecommendedCardUtil.js","names":["sap","ui","define","Formatting","Log","encodeURL","formatMessage","deepExtend","BaseObject","CoreLib","___interface_CardsInterface","___Constants","___DataFormatUtils","UIAnnotations","TABLE_TYPES","sortCollectionByImportance","COLUMN_LENGTH","ValueState","FieldAnnotationsType","FieldTypes","RecommendedCardUtil","getInstance","Instance","getLineItemDetails","metaModel","originalManifest","leadingEntitySet","leadingEntitySetDetails","getODataEntitySet","variantInfo","this","getLineItemFromVariant","entityType","lineItemDefault","lineItem","pages","lrSettings","getSettingsForPage","quickVariantSelectionX","createDefaultLineItemDetails","oVariants","variants","firstAvailableKey","sEntitySet","oVariant","findFirstNonSmartChartVariant","isSmartChart","requestAtLeastFields","defaultTableSettings","getNormalizedTableSettings","entitySet","quickVariantInfo","annotationPath","split","presentationVariant","RequestAtLeast","length","_getRequestAtLeastFields","tableSettings","validateResponsiveTable","isResponsiveTable","undefined","lineItemDetail","quickVariant","headerInfo","sKey","Object","prototype","hasOwnProperty","call","oEntitySet","checkIfSmartChart","isResponsive","type","RESPONSIVE","error","oMetaModel","qualifier","oSelectionPresentationVariant","getAnnotation","UISelectionPresentationVariant","oPresentationVariant","PresentationVariant","getPresentationVariant","UIPresentationVariant","oDetails","getLineItem","UILineItem","qualifierPath","annotation","qualifierName","fullAnnotation","entityTypeData","getODataEntityType","selectionPresentationVariant","Path","getObject","presentationVariantData","visualizationData","Visualizations","find","oVis","AnnotationPath","includes","sQualifier","_getRelevantColumnPaths","columns","Array","isArray","selectSet","Set","expandSet","forEach","oColumnData","sPath","sAdditionalPath","sExpandPath","add","extractPathAndInsertToSet","select","from","expand","pathSet","path","extractAndExpandNavigationProperty","entitySetName","selects","expands","mNavigationProperties","iPos","lastIndexOf","sNavigation","getNavigationProperty","substring","push","navProperty","mMyNavigationProperties","oEntityType","aNavigationProperty","navigationProperty","oNavigationProperty","navName","name","_addNecessaryFields","aSelects","oInfo","aProperties","RecordType","DataFieldWithIntentBasedNavigation","DataFieldWithNavigationPath","aDataFieldsWithNavigation","getDataFieldsWithNavigation","concat","getFieldControlsPath","property","ensureSelectionProperty","sSelect","oProperty","getODataProperty","CommonFieldControl","oFieldControl","requestFields","valuePath","Value","lineItemProperty","textAnnotation","CommonText","sapTextAnnotation","SemanticObject","Action","getParameters","oSelectExpand","aExpands","alwaysSelectField","_ensureSelectionProperties","_handleMandatorySelectionFields","join","item","PropertyPath","key","propertyRef","field","sProperty","sElement","_createCardManifest","oInput","oVersionInfo","manifest","bSuppressRowNavigation","oUIManifest","oAppManifest","attributeIndex","assign","id","Date","now","title","cardTitle","subTitle","oNewManifest","createManifestSapApp","createManifestSapCard","createSapui5","oContent","content","slice","column","columnValue","_getAttributeValue","identifier","value","attributes","visible","state","showStateIcon","actions","parentAppId","cardType","versions","ui5","version","buildTimestamp","attributeData","attributeValue","startsWith","oDateFormatOptions","JSON","stringify","pattern","getDatePattern","appManifest","manifestAppData","dataSources","mainService","settings","datasource","sServiceUrl","uri","sCountPath","sText","text","oCardConfig","createManifestSapCardConfig","createManifestSapCardData","url","status","data","maxItems","attributesLayoutType","addCardActions","semanticObject","action","sapCard","semObj","semanticAction","oHeaderParams","ibnTarget","sensitiveProps","ibnParams","oHeaderParameterValue","parameters","oContentParams","parse","oContentParameterValue","configuration","headerState","contentState","header","oCardConfiguration","_relevantODataFilters","_relevantODataParameters","_entitySet","_urlSuffix","destinations","service","defaultUrl","csrfTokens","token1","request","method","headers","_version","contentDensities","compact","cozy","dependencies","libs","lazy","urlExpand","oBatch","Accept","oSapCardData","batch","_getManifestCardData","oParentApp","manifestApp","mainServiceUri","serviceUrl","replace","aColumns","map","oColumn","_getColumnDetail","filter","oItem","mParameters","urlSelectExpand","createCustomParams","finalUrl","aColumnSorted","CommonLabel","String","lineItemContext","oPropertyHidden","UIHidden","Bool","isPropertyHidden","keys","oP13NDetails","createP13N","columnDataObject","isSupportedColumn","getColumnObjectDetails","Importance","importance","propertyDetails","dataField","sColumnKeyDescription","sColumnValue","aSemKeyAnnotation","CommonSemanticKey","bIsPropertySemanticKey","some","oAnnotation","bIsCriticality","criticalityAnnotation","Criticality","MeasuresISOCurrency","MeasuresUnit","sTextArragement","UITextArrangement","_setColumnTextValue","buildExpressionForCriticalityColor","CriticalityRepresentation","EnumMember","CriticalityRepresentationTypeWithoutIcon","sFormatCriticalityExpression","None","sExpressionTemplate","oCriticalityProperty","CriticalityType","Negative","Error","Critical","Warning","Positive","Success","sCriticalitySimplePath","sCriticality","warning","TextArrangementType","sTextArrangementType","valueExpr","TextOnly","TextLast","TextSeparate","aCustomParams","entityTypeName","_isListReport","page","component","listPage","bSupressCardRowNavigation","shouldSuppressCardRowNavigation","sListKey","navigation","lRVariantSettings","tableType","gridTable","GRID","treeTable","TREE","STANDARD_LIST","OBJECT_LIST","SapSemantics","ANALYTICAL","UIHeaderInfo","tabItem","entitySetData","annotationName","variantData","sPresentationVariantPath","oPresentationVariantAnnotation","indexOf","UIChart","hasMandatoryProperties","propertiesSet","propertyDetail","_getParametersisedEntitySetParams","infoParamsRequired","oResult","navPropertyName","aNavigationProperties","oNavProperty","oNavigationEntitySet","getODataAssociationEnd","oNavigationEntityType","getODataAssociationSetEnd","navProp","aSubNavigationProperties","bBackAssociationPresent","oSubNavigationProperty","sSubNavigationEntityType","lineItemAnnotations","uiHidden","FieldControlHiddenType","contextSet","contextProp","columnDataField","p13nDetails","additionalProperties","navigationPath","recordType","dataFieldValue","DataField","DataFieldForAnnotation","DataFieldWithUrl","columnKey","createP13NColumnKey","getNavigationPrefixPath","Apply","Name","Parameters","parameterDetails","Type","processAdditionalProperties","Url","processDataFieldWithUrl","oDataFieldUrl","oParameter","dataFieldColumn","columnKeyName","fioriTemplatePrefix","seperatorNotation","dataFieldSemanticObject","dataFieldActionString","dataFieldPath","isRelevantAnnotation","buildKey","parts","DataFieldForIntentBasedNavigation","DataFieldForAction","Target","Contact","DataPoint","FieldGroup","Chart","oContextSet","_getNavigationPrefix","propertyName","expandName","propertyParts","i","associationEndData","oContextProp","oDataField","sNavigationPath","aAdditionalProperties","additionalP13N","oContextCommonText","oUnitAnnotation","dataFieldDetails","sRecordType","leadingProperty","checkMultiplicityForDataFieldAssociation","UIIsImageURL","dataFieldValuePath","associationData","navigationPropertyPath","multiplicity"],"sources":["RecommendedCardUtil.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Formatting from \"sap/base/i18n/Formatting\";\nimport Log from \"sap/base/Log\";\nimport encodeURL from \"sap/base/security/encodeURL\";\nimport formatMessage from \"sap/base/strings/formatMessage\";\nimport deepExtend from \"sap/base/util/deepExtend\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport CoreLib from \"sap/ui/core/library\";\nimport ODataMetaModel, { AssociationEnd, NavigationProperty, Property } from \"sap/ui/model/odata/ODataMetaModel\";\nimport {\n\tIAppInfoData,\n\tIAppManifest,\n\tICardActionParameters,\n\tICardManifest,\n\tIColumnData,\n\tIEntitySet,\n\tIEntityType,\n\tILineItem,\n\tILineItemContext,\n\tILineItemContextValue,\n\tILineItemDetails,\n\tILrSettings,\n\tIManifestCardData,\n\tIPageType,\n\tIPresentationVariant,\n\tIRequestData,\n\tISapApp,\n\tISapCard,\n\tISapCardConfig,\n\tISapUI5App,\n\tITableSettings,\n\tIUIVisualizations,\n\tIVariantSetting,\n\tIVersionInfo,\n\tPageRecord,\n\tUIAnnotations,\n\tUIAnnotationValue\n} from \"../interface/CardsInterface\";\nimport { TABLE_TYPES } from \"./Constants\";\nimport { sortCollectionByImportance } from \"./DataFormatUtils\";\n\nconst COLUMN_LENGTH = 3;\nconst ValueState = CoreLib.ValueState;\n\ninterface VariantInfo {\n\tlineItem?: ILineItem[] | string;\n\tpresentationVariant?: IPresentationVariant;\n\tqualifierPath?: string;\n\tPresentationVariant?: IPresentationVariant;\n\tVisualizations?: IUIVisualizations[];\n}\n\ninterface NonChartDetail {\n\tfirstAvailableKey: string | null;\n\tsEntitySet: string;\n\toVariant: IVariantSetting;\n}\n\ninterface SelectExpand {\n\tselect: string[];\n\texpand: string[];\n}\n\ntype SelectExpandDetail = {\n\tselect?: string;\n\texpand?: string;\n};\n\ntype RequestAtleastFieldType = { String?: string | undefined; PropertyPath?: string | undefined };\ninterface ParameterisedEntity {\n\tentitySetName?: string | null;\n\tparameters: Array<object | string>;\n\tnavPropertyName: string | null;\n}\n\ninterface ColumnObjectData extends Partial<IColumnData> {\n\tleadingProperty?: string;\n\tadditionalProperty?: string;\n\tnavigationProperty?: string;\n\tcolumnKey?: string;\n\t[key: string]: unknown;\n}\n\ninterface NavigationPropertiesMap {\n\t[entitySetName: string]: {\n\t\t[navigationPropertyName: string]: NavigationProperty;\n\t};\n}\n\ninterface ExtendedLineItemContextValue extends ILineItemContextValue {\n\tPath: string;\n\tApply: {\n\t\tName: string;\n\t\tParameters: {\n\t\t\t[key: string]: string;\n\t\t}[];\n\t};\n}\n\nenum FieldAnnotationsType {\n\tDataField = \"com.sap.vocabularies.UI.v1.DataField\",\n\tImportance = \"com.sap.vocabularies.UI.v1.Importance\",\n\tDataFieldWithNavigationPath = \"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath\",\n\tDataFieldWithIntentBasedNavigation = \"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation\",\n\tDataFieldForIntentBasedNavigation = \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\",\n\tChart = \"@com.sap.vocabularies.UI.v1.Chart\",\n\tFieldGroup = \"@com.sap.vocabularies.UI.v1.FieldGroup\",\n\tDataPoint = \"@com.sap.vocabularies.UI.v1.DataPoint\",\n\tContact = \"@com.sap.vocabularies.Communication.v1.Contact\",\n\tDataFieldForAction = \"com.sap.vocabularies.UI.v1.DataFieldForAction\",\n\tDataFieldForAnnotation = \"com.sap.vocabularies.UI.v1.DataFieldForAnnotation\",\n\tDataFieldWithUrl = \"com.sap.vocabularies.UI.v1.DataFieldWithUrl\",\n\tCriticalityRepresentationTypeWithoutIcon = \"com.sap.vocabularies.UI.v1.CriticalityRepresentationType/WithoutIcon\",\n\tFieldControlHiddenType = \"com.sap.vocabularies.Common.v1.FieldControlType/Hidden\"\n}\n\nexport enum FieldTypes {\n\tDataFieldWithNavigationPath = \"DataFieldWithNavigationPath\",\n\tDataFieldWithIntentBasedNavigation = \"DataFieldWithIntentBasedNavigation\",\n\tDataFieldForIntentBasedNavigation = \"DataFieldForIntentBasedNavigation\",\n\tDataFieldForAction = \"DataFieldForAction\",\n\tDataFieldForAnnotation = \"DataFieldForAnnotation\"\n}\n\ntype Attribute = { value: string; path: string; type: string };\ntype SelectionProperties = Array<string | { PropertyPath?: string; String?: string }>;\n\nexport default class RecommendedCardUtil extends BaseObject {\n\tstatic Instance: RecommendedCardUtil;\n\n\tstatic getInstance() {\n\t\tif (!RecommendedCardUtil.Instance) {\n\t\t\tRecommendedCardUtil.Instance = new RecommendedCardUtil();\n\t\t}\n\t\treturn RecommendedCardUtil.Instance;\n\t}\n\n\t/**\n\t * @param {object} metaModel - metamodel object\n\t * @param {object} originalManifest - manifest of original app\n\t * @param {string} leadingEntitySet - main entitySet of the application as in manifest\n\t * @returns {object} - returns the lineItem details for the application based on manifest, annotations and metadata\n\t * @private\n\t */\n\tpublic getLineItemDetails(\n\t\tmetaModel: ODataMetaModel,\n\t\toriginalManifest: IAppManifest,\n\t\tleadingEntitySet: string\n\t): ILineItemDetails | undefined {\n\t\tconst leadingEntitySetDetails = metaModel.getODataEntitySet(leadingEntitySet) as IEntitySet;\n\t\tconst variantInfo = this.getLineItemFromVariant(metaModel, leadingEntitySetDetails.entityType);\n\t\tconst lineItemDefault = variantInfo.lineItem;\n\t\tconst pages = originalManifest[\"sap.ui.generic.app\"]?.pages;\n\t\tconst lrSettings = this.getSettingsForPage(pages);\n\n\t\t//if there is no quickVariantSelectionX setting in manifest, then return default line item details\n\t\tif (!lrSettings.quickVariantSelectionX) {\n\t\t\treturn this.createDefaultLineItemDetails(metaModel, variantInfo, lrSettings, leadingEntitySet, lineItemDefault);\n\t\t}\n\n\t\t// if there is a variant settings then find the first non-smart chart variant\n\t\tconst oVariants = lrSettings.quickVariantSelectionX.variants || {};\n\t\tconst { firstAvailableKey, sEntitySet, oVariant } = this.findFirstNonSmartChartVariant(metaModel, oVariants, leadingEntitySet);\n\t\tif (oVariant.isSmartChart) {\n\t\t\treturn this.createDefaultLineItemDetails(metaModel, variantInfo, lrSettings, leadingEntitySet, lineItemDefault);\n\t\t}\n\t\tdelete lrSettings.requestAtLeastFields;\n\n\t\tconst defaultTableSettings = this.getNormalizedTableSettings(metaModel, lrSettings, leadingEntitySet);\n\t\tconst entitySet = metaModel?.getODataEntitySet(sEntitySet) as IEntitySet;\n\t\tconst quickVariantInfo = this.getLineItemFromVariant(metaModel, entitySet.entityType, oVariant.annotationPath?.split(\"#\")[1]);\n\t\tconst lineItem = quickVariantInfo.lineItem;\n\t\tconst presentationVariant = quickVariantInfo.presentationVariant;\n\n\t\tlrSettings.requestAtLeastFields = presentationVariant?.RequestAtLeast?.length\n\t\t\t? presentationVariant.RequestAtLeast\n\t\t\t: this._getRequestAtLeastFields(presentationVariant!);\n\n\t\toVariant.tableSettings = this.getNormalizedTableSettings(\n\t\t\tmetaModel,\n\t\t\t{ ...oVariant, tableSettings: oVariant.tableSettings || defaultTableSettings },\n\t\t\tsEntitySet\n\t\t);\n\n\t\tthis.validateResponsiveTable(lrSettings, oVariant, firstAvailableKey);\n\n\t\tdelete lrSettings.tableSettings;\n\t\tlrSettings.isResponsiveTable = lrSettings.isResponsiveTable === undefined || lrSettings.isResponsiveTable;\n\n\t\tconst lineItemDetail: ILineItemDetails = {\n\t\t\tquickVariant: oVariant,\n\t\t\tlrSettings: lrSettings,\n\t\t\tlineItem: lineItem,\n\t\t\tentitySet: sEntitySet,\n\t\t\theaderInfo: oVariant?.tableSettings?.headerInfo || \"\"\n\t\t};\n\t\treturn lineItem\n\t\t\t? lineItemDetail\n\t\t\t: this.createDefaultLineItemDetails(metaModel, variantInfo, lrSettings, leadingEntitySet, lineItemDefault);\n\t}\n\n\t/**\n\t * Finds the first non-smart chart variant from the provided variants.\n\t *\n\t * This method iterates through the given variants to identify the first variant that is not a smart chart.\n\t * It also determines the associated entity set and updates the variant's metadata to indicate whether it is a smart chart.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and annotations.\n\t * @param {Record<string, IVariantSetting>} oVariants - A record of variants, where each key represents a variant and its associated metadata.\n\t * @param {string} leadingEntitySet - The name of the leading entity set for the application.\n\t * @returns {NonChartDetail}\n}\n\t * An object containing:\n\t * - `firstAvailableKey`: The key of the first non-smart chart variant, or `null` if none is found.\n\t * - `sEntitySet`: The entity set associated with the first non-smart chart variant.\n\t * - `oVariant`: The metadata of the first non-smart chart variant.\n\t * @private\n\t */\n\tprivate findFirstNonSmartChartVariant(\n\t\tmetaModel: ODataMetaModel,\n\t\toVariants: Record<string, IVariantSetting>,\n\t\tleadingEntitySet: string\n\t): NonChartDetail {\n\t\tlet firstAvailableKey: string | null = null;\n\t\tlet sEntitySet = leadingEntitySet;\n\t\tlet oVariant: IVariantSetting = {};\n\n\t\tfor (const sKey in oVariants) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(oVariants, sKey)) continue;\n\n\t\t\toVariant = oVariants[sKey];\n\t\t\tsEntitySet = oVariant.entitySet || leadingEntitySet;\n\t\t\tconst oEntitySet = metaModel.getODataEntitySet(sEntitySet);\n\n\t\t\tif (oEntitySet) {\n\t\t\t\toVariant.isSmartChart = this.checkIfSmartChart(metaModel, sEntitySet, oVariant);\n\t\t\t\tif (!oVariant.isSmartChart) {\n\t\t\t\t\tfirstAvailableKey = sKey;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toVariant.isSmartChart = true;\n\t\t\t}\n\t\t}\n\t\treturn { firstAvailableKey, sEntitySet, oVariant };\n\t}\n\n\t/**\n\t * Validates the responsive table type for a given variant and updates the List Report (LR) settings.\n\t *\n\t * @param {ILrSettings} lrSettings - The settings object for the List Report, including table settings and configurations.\n\t * @param {IVariantSetting} oVariant - The variant object containing table settings and metadata.\n\t * @param {string | null} firstAvailableKey - The key of the first available variant, used for logging errors.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate validateResponsiveTable(lrSettings: ILrSettings, oVariant: IVariantSetting, firstAvailableKey: string | null): void {\n\t\tconst isResponsive = oVariant.tableSettings?.type === TABLE_TYPES.RESPONSIVE;\n\t\tif (lrSettings.isResponsiveTable === undefined) {\n\t\t\tlrSettings.isResponsiveTable = isResponsive;\n\t\t} else if (lrSettings.isResponsiveTable !== isResponsive) {\n\t\t\tLog.error(`Variant with key ${firstAvailableKey} resulted in invalid Table Type combination.`);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * This method generates the default configuration for line item details, including table settings,\n\t * responsive table type, and request-at-least fields based on the provided metadata, variant information,\n\t * and settings.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and annotations.\n\t * @param {VariantInfo} variantInfo - The variant information containing presentation variant and line item details.\n\t * @param {ILrSettings} lrSettings - The settings object for the List Report, including table settings and other configurations.\n\t * @param {string} leadingEntitySet - The name of the leading entity set for the application.\n\t * @param {ILineItem[] | string | undefined} lineItemDefault - The default line item details, which can be an array of line items, a string, or undefined.\n\t * @returns {ILineItemDetails} The default line item details object, including quick variant, settings, line item, entity set, and header info.\n\t * @private\n\t */\n\tprivate createDefaultLineItemDetails(\n\t\tmetaModel: ODataMetaModel,\n\t\tvariantInfo: VariantInfo,\n\t\tlrSettings: ILrSettings,\n\t\tleadingEntitySet: string,\n\t\tlineItemDefault?: ILineItem[] | string\n\t): ILineItemDetails {\n\t\tlrSettings.tableSettings = this.getNormalizedTableSettings(metaModel, lrSettings, leadingEntitySet);\n\t\tlrSettings.isResponsiveTable = lrSettings.tableSettings.type === TABLE_TYPES.RESPONSIVE;\n\t\tif (variantInfo?.presentationVariant?.RequestAtLeast?.length) {\n\t\t\tlrSettings.requestAtLeastFields = variantInfo.presentationVariant.RequestAtLeast;\n\t\t}\n\t\treturn {\n\t\t\tquickVariant: {},\n\t\t\tlrSettings: lrSettings,\n\t\t\tlineItem: lineItemDefault,\n\t\t\tentitySet: leadingEntitySet,\n\t\t\theaderInfo: lrSettings?.tableSettings?.headerInfo || \"\"\n\t\t};\n\t}\n\n\t/**\n\t * @param {object} oMetaModel - metamodel object\n\t * @param {string} entityType - entity type of the application\n\t * @param {string} qualifier - qualifier of the variant\n\t * @returns {object} - returns the lineItem, presentationVariant, qualifierPath from the variant for the application based on manifest, annotations and metadata\n\t * @private\n\t */\n\tprivate getLineItemFromVariant(oMetaModel: ODataMetaModel, entityType: string, qualifier?: string): VariantInfo {\n\t\tconst oSelectionPresentationVariant = this.getAnnotation<IPresentationVariant>(\n\t\t\toMetaModel,\n\t\t\tentityType,\n\t\t\tUIAnnotations.UISelectionPresentationVariant,\n\t\t\tqualifier\n\t\t);\n\n\t\tlet oPresentationVariant;\n\t\tif (oSelectionPresentationVariant?.PresentationVariant) {\n\t\t\toPresentationVariant = this.getPresentationVariant(oMetaModel, entityType, oSelectionPresentationVariant.PresentationVariant);\n\t\t} else {\n\t\t\toPresentationVariant = this.getAnnotation<IPresentationVariant>(\n\t\t\t\toMetaModel,\n\t\t\t\tentityType,\n\t\t\t\tUIAnnotations.UIPresentationVariant,\n\t\t\t\tqualifier\n\t\t\t);\n\t\t}\n\n\t\tconst oDetails = oPresentationVariant ? this.getLineItem(oMetaModel, entityType, oPresentationVariant) : null;\n\t\tconst lineItem = oDetails?.lineItem || this.getAnnotation<ILineItem[]>(oMetaModel, entityType, UIAnnotations.UILineItem, \"\");\n\n\t\treturn {\n\t\t\tpresentationVariant: oPresentationVariant,\n\t\t\tlineItem: lineItem,\n\t\t\tqualifierPath: oDetails?.annotationPath || \"\"\n\t\t};\n\t}\n\n\t// get the annotation , sAnnotation from the entityType, sEntityType\n\tprivate getAnnotation<T extends IPresentationVariant | ILineItem[]>(\n\t\tmetaModel: ODataMetaModel,\n\t\tentityType: string,\n\t\tannotation: UIAnnotations,\n\t\tqualifierName?: string\n\t): T | undefined {\n\t\tconst fullAnnotation = `${annotation}${qualifierName ? `#${qualifierName}` : \"\"}`;\n\t\tconst entityTypeData = metaModel.getODataEntityType(entityType) as IEntityType;\n\t\treturn entityTypeData?.[fullAnnotation] as T | undefined;\n\t}\n\n\t/**\n\t * This method determines the presentation variant based on the provided selection presentation variant.\n\t * If the presentation variant is defined via a `Path`, it resolves the path to retrieve the corresponding object\n\t * from the OData meta model. If the presentation variant is defined inline (i.e., without a `Path`), it directly\n\t * returns the inline object.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and annotations.\n\t * @param {string} entityTypeData - The entity type for which the presentation variant is to be retrieved.\n\t * @param {IPresentationVariant} selectionPresentationVariant -\n\t * The selection presentation variant object, which may contain a `Path` or an inline `PresentationVariant`.\n\t * @returns {IPresentationVariant} The resolved presentation variant object.\n\t * @private\n\t */\n\tprivate getPresentationVariant(\n\t\tmetaModel: ODataMetaModel,\n\t\tentityTypeData: string,\n\t\tselectionPresentationVariant: IPresentationVariant\n\t): IPresentationVariant {\n\t\t// PresentationVariant must be defined (according to vocabulary) either via \"Path\" or inline (i.e. Path is not defined).\n\t\t// For compatibility, just ignore if not provided (leading to fallback to use LineItem without qualifier)\n\t\tconst presentationVariant = selectionPresentationVariant?.PresentationVariant;\n\n\t\tif (presentationVariant?.Path) {\n\t\t\treturn this.getObject<IPresentationVariant>(metaModel, entityTypeData, presentationVariant.Path);\n\t\t}\n\t\treturn presentationVariant!;\n\t}\n\n\t/**\n\t * Retrieves the line item annotation details for a given entity type and presentation variant.\n\t *\n\t * This method searches for the `com.sap.vocabularies.UI.v1.LineItem` annotation within the visualizations\n\t * of the provided presentation variant. If found, it returns the line item details, including the annotation path\n\t * and qualifier.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about the entity type.\n\t * @param {string} entityTypeData - The entity type for which the line item annotation is to be retrieved.\n\t * @param {IPresentationVariant} presentationVariantData - The presentation variant containing visualizations.\n\t * @returns { IUIVisualizations | IUIVisualizations[] | null}\n\t * - An object containing the line item details, annotation path, and qualifier if the annotation is found.\n\t * - An array of UI annotations if applicable.\n\t * - `null` if no valid line item annotation is found.\n\t * @private\n\t */\n\tprivate getLineItem(\n\t\tmetaModel: ODataMetaModel,\n\t\tentityTypeData: string,\n\t\tpresentationVariantData: IPresentationVariant\n\t): IUIVisualizations | null {\n\t\t// Visualizations must be defined (according to vocabulary)\n\t\t// however, this is not given at least in all demokit apps (presentationVariant consisting only of sortOrder)\n\t\tlet visualizationData = presentationVariantData.Visualizations?.find(function (oVis) {\n\t\t\treturn oVis.AnnotationPath?.includes(UIAnnotations.UILineItem);\n\t\t});\n\n\t\treturn visualizationData\n\t\t\t? {\n\t\t\t\t\tlineItem: this.getObject<ILineItem[]>(metaModel, entityTypeData, visualizationData.AnnotationPath!),\n\t\t\t\t\tannotationPath: visualizationData.AnnotationPath!,\n\t\t\t\t\tsQualifier: visualizationData.AnnotationPath?.split(\"#\")[1]\n\t\t\t\t}\n\t\t\t: null;\n\t}\n\n\t/**\n\t * Extracts relevant column paths for `$select` and `$expand` OData query options.\n\t *\n\t * This method processes the provided column definitions to extract paths for the `$select` and `$expand` query options.\n\t * It ensures that paths are unique and properly formatted for OData requests.\n\t *\n\t * @param {Array<Record<string,unknown>>} columns - An array of column definitions.\n\t * Each column definition may include properties like `leadingProperty`, `additionalProperty`, and `navigationProperty`.\n\t * @returns {SelectExpand} An object containing two arrays:\n\t * - `select`: An array of unique paths for the `$select` query option.\n\t * - `expand`: An array of unique paths for the `$expand` query option.\n\t * @private\n\t */\n\tprivate _getRelevantColumnPaths(columns: ColumnObjectData[]): SelectExpand {\n\t\tcolumns = Array.isArray(columns) ? columns : [];\n\t\tconst selectSet = new Set<string>();\n\t\tconst expandSet = new Set<string>();\n\t\tcolumns.forEach((oColumnData) => {\n\t\t\tif (oColumnData) {\n\t\t\t\tconst sPath = oColumnData[\"leadingProperty\"];\n\t\t\t\tconst sAdditionalPath = oColumnData[\"additionalProperty\"];\n\t\t\t\tconst sExpandPath = oColumnData[\"navigationProperty\"];\n\t\t\t\tif (sPath) {\n\t\t\t\t\tselectSet.add(sPath);\n\t\t\t\t}\n\t\t\t\tthis.extractPathAndInsertToSet(sAdditionalPath!, selectSet);\n\t\t\t\tthis.extractPathAndInsertToSet(sExpandPath!, expandSet);\n\t\t\t}\n\t\t});\n\t\treturn {\n\t\t\tselect: Array.from(selectSet),\n\t\t\texpand: Array.from(expandSet)\n\t\t};\n\t}\n\n\t/**\n\t * Extracts and inserts unique paths into the provided array.\n\t *\n\t * This method splits the given path string by commas, iterates through the resulting paths,\n\t * and adds each unique path to the provided array. Duplicate paths are ignored.\n\t *\n\t * @param {string} sPath - A comma-separated string of paths to be processed.\n\t * @param {Set<string>}  - The array to which unique paths will be added.\n\t * @private\n\t */\n\tprivate extractPathAndInsertToSet(sPath: string, pathSet: Set<string>) {\n\t\tsPath?.split(\",\").forEach((path) => {\n\t\t\tif (path) {\n\t\t\t\tpathSet.add(path);\n\t\t\t\t// currently not doing transitive dependencies\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Expands navigation properties for the given entity set and selected properties.\n\t *\n\t * This method processes the provided `selects` array to identify navigation properties\n\t * that need to be expanded. If a navigation property is found, it is added to the `expands` array.\n\t *\n\t * @param {string} entitySetName - The name of the entity set being processed.\n\t * @param {string[]} selects - An array of selected property paths to be checked for navigation properties.\n\t * @param {string[]} expands - An array to which navigation properties requiring expansion will be added.\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and properties.\n\t * @private\n\t */\n\tprivate extractAndExpandNavigationProperty(entitySetName: string, selects: string[], expands: string[], metaModel: ODataMetaModel) {\n\t\tconst mNavigationProperties = {};\n\n\t\t// check if any expand is necessary\n\t\tfor (const sPath of selects) {\n\t\t\tlet iPos = sPath.lastIndexOf(\"/\");\n\t\t\tlet sNavigation;\n\t\t\tif (iPos < 0) {\n\t\t\t\t// sPath contains no '/' but still could be a navigationProperty\n\t\t\t\tif (!this.getNavigationProperty(entitySetName, sPath, metaModel, mNavigationProperties)) {\n\t\t\t\t\tcontinue; //not a navproperty hence continue to next iteration\n\t\t\t\t}\n\t\t\t\tsNavigation = sPath;\n\t\t\t} else {\n\t\t\t\tsNavigation = sPath.substring(0, iPos);\n\t\t\t}\n\t\t\tif (!expands.includes(sNavigation)) {\n\t\t\t\texpands.push(sNavigation);\n\t\t\t}\n\t\t}\n\t}\n\n\t//get the navigation property details for the given property from entityset, sEntitySet\n\tprivate getNavigationProperty(\n\t\tentitySetName: string,\n\t\tnavProperty: string,\n\t\tmetaModel: ODataMetaModel,\n\t\tmNavigationProperties: NavigationPropertiesMap\n\t) {\n\t\tlet mMyNavigationProperties = mNavigationProperties?.[entitySetName];\n\n\t\t// If navigation properties not already fetched, then fetch them\n\t\tif (!mMyNavigationProperties) {\n\t\t\tmMyNavigationProperties = {};\n\t\t\tmNavigationProperties[entitySetName] = mMyNavigationProperties;\n\n\t\t\tconst oEntitySet = metaModel.getODataEntitySet(entitySetName) as IEntitySet;\n\t\t\tif (oEntitySet) {\n\t\t\t\tconst oEntityType = metaModel.getODataEntityType(oEntitySet.entityType) as IEntityType;\n\t\t\t\tif (oEntityType) {\n\t\t\t\t\tconst aNavigationProperty = oEntityType.navigationProperty || [];\n\t\t\t\t\taNavigationProperty.forEach((oNavigationProperty) => {\n\t\t\t\t\t\tconst navName = oNavigationProperty.name;\n\t\t\t\t\t\tmMyNavigationProperties[navName] = oNavigationProperty;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn mMyNavigationProperties?.[navProperty] || undefined;\n\t}\n\n\t// add all necessary fields to the select array\n\tprivate _addNecessaryFields(aSelects: string[], oInfo: ILineItemDetails, oMetaModel: ODataMetaModel) {\n\t\tlet oEntitySet = oMetaModel.getODataEntitySet(oInfo.entitySet) as IEntitySet;\n\t\tlet oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType) as IEntityType;\n\t\tlet aProperties: string[] = [];\n\n\t\tif (aSelects.length > 0) {\n\t\t\tif (oInfo.lineItem && typeof oInfo.lineItem !== \"string\") {\n\t\t\t\toInfo.lineItem.forEach((lineItem) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tlineItem.RecordType === FieldAnnotationsType.DataFieldWithIntentBasedNavigation ||\n\t\t\t\t\t\tlineItem.RecordType === FieldAnnotationsType.DataFieldWithNavigationPath\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst aDataFieldsWithNavigation = this.getDataFieldsWithNavigation(lineItem, oMetaModel, oEntityType);\n\t\t\t\t\t\tif (aDataFieldsWithNavigation?.length) {\n\t\t\t\t\t\t\taProperties = aProperties.concat(aDataFieldsWithNavigation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t//add the fieldcontrol path of the properties\n\t\t\tthis.getFieldControlsPath(aSelects, oMetaModel, oEntityType, aProperties);\n\t\t}\n\n\t\taProperties.forEach((property) => {\n\t\t\tthis.ensureSelectionProperty(property, aSelects);\n\t\t});\n\t}\n\n\t/**\n\t * Collects the paths for field controls based on the selected properties.\n\t * This function iterates over the given selection of properties, aSelects, retrieves the corresponding\n\t * property metadata from the OData model, and if a field control annotation exists for a property,\n\t * it adds the path of this field control to the provided array of properties.\n\t * @param {string[]} selects - An array of property names to be checked for field control paths.\n\t * @param {object} metaModel - The OData meta model instance used to retrieve property metadata.\n\t * @param {object} entityType - The entity type from the OData model that contains the properties.\n\t * @param {string[]} aProperties - An array to which the field control paths will be added.\n\t * @private\n\t */\n\tprivate getFieldControlsPath(selects: string[], metaModel: ODataMetaModel, entityType: IEntityType, aProperties: string[]) {\n\t\tselects.forEach((sSelect) => {\n\t\t\tif (sSelect) {\n\t\t\t\t//needed for activating field control for DataField Annotation & when using the setting to add new columns\n\t\t\t\tlet oProperty = (metaModel.getODataProperty(entityType, sSelect) as UIAnnotationValue) || {};\n\t\t\t\tif (UIAnnotations.CommonFieldControl in oProperty) {\n\t\t\t\t\tlet oFieldControl = oProperty[UIAnnotations.CommonFieldControl];\n\t\t\t\t\tif (oFieldControl?.Path) {\n\t\t\t\t\t\taProperties.push(oFieldControl.Path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Handling for DataFieldWithNavigationPath and DataFieldWithIntentBasedNavigation\n\t * @param {object} lineItem - LineItem object\n\t * @param {object} metaModel - OData metamodel\n\t * @param {object} entityType - EntityType object\n\t * @returns {Array} - Array of properties to be selected in case field type is DataFieldWithNavigationPath or DataFieldWithIntentBasedNavigation\n\t * @private\n\t */\n\tprivate getDataFieldsWithNavigation(lineItem: ILineItem, metaModel: ODataMetaModel, entityType: IEntityType): string[] {\n\t\tconst requestFields = [];\n\n\t\t// Handle Value.Path\n\t\tconst valuePath = lineItem.Value?.Path;\n\t\tif (valuePath) {\n\t\t\tconst lineItemProperty = metaModel.getODataProperty(entityType, valuePath) as UIAnnotationValue;\n\t\t\tconst textAnnotation = lineItemProperty?.[UIAnnotations.CommonText]?.Path;\n\t\t\tconst sapTextAnnotation = lineItemProperty?.[\"sap:text\"];\n\n\t\t\trequestFields.push(sapTextAnnotation || textAnnotation || valuePath);\n\t\t}\n\n\t\t// Handle SemanticObject.Path\n\t\tif (lineItem.SemanticObject?.Path) {\n\t\t\trequestFields.push(lineItem.SemanticObject.Path);\n\t\t}\n\n\t\t// Handle Action.Path\n\t\tif (lineItem.Action?.Path) {\n\t\t\trequestFields.push(lineItem.Action.Path);\n\t\t}\n\n\t\treturn requestFields;\n\t}\n\n\t// Section: Parameter Handling\n\tprivate getParameters(\n\t\toInfo: ILineItemDetails,\n\t\tmetaModel: ODataMetaModel,\n\t\tentitySet: string,\n\t\toSelectExpand: SelectExpand\n\t): SelectExpandDetail {\n\t\tlet aSelects = oSelectExpand.select || [];\n\t\tlet aExpands = oSelectExpand.expand || [];\n\n\t\tlet alwaysSelectField = oInfo?.lrSettings?.requestAtLeastFields || [];\n\t\tif (alwaysSelectField.length > 0) {\n\t\t\taSelects = this._ensureSelectionProperties(aSelects, alwaysSelectField);\n\t\t}\n\n\t\tthis._handleMandatorySelectionFields(entitySet, aSelects, metaModel);\n\t\tthis._addNecessaryFields(aSelects, oInfo, metaModel);\n\t\tthis.extractAndExpandNavigationProperty(entitySet, aSelects, aExpands, metaModel);\n\n\t\treturn {\n\t\t\texpand: aExpands.join(\",\") || undefined,\n\t\t\tselect: aSelects.join(\",\") || undefined\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param {Array} aSelects , select parameters\n\t * @param {SelectionProperties} alwaysSelectField, all the fields that are marked as requestAtLeastFields\n\t * @returns {Array} aSelects, updated select parameters\n\t * @private\n\t */\n\n\tprivate _ensureSelectionProperties(aSelects: string[], alwaysSelectField: SelectionProperties): string[] {\n\t\tfor (const item of alwaysSelectField) {\n\t\t\tif (typeof item === \"object\" && item?.PropertyPath && !aSelects.includes(item.PropertyPath)) {\n\t\t\t\taSelects.push(item.PropertyPath);\n\t\t\t}\n\t\t}\n\n\t\treturn aSelects;\n\t}\n\n\t/**\n\t * Handles the mandatory selection fields for the given entity set and properties.\n\t *\n\t * @param {object} entitySet - The entity set object.\n\t * @param {array} aSelects - The array of properties.\n\t * @returns {boolean} True if the entity set or properties have mandatory fields, false otherwise.\n\t * @private\n\t */\n\tprivate _handleMandatorySelectionFields(entitySet: string, aSelects: string[], oMetaModel: ODataMetaModel) {\n\t\tconst oEntitySet = oMetaModel.getODataEntitySet(entitySet, false) as IEntitySet;\n\t\tconst oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false) as IEntityType;\n\n\t\toEntityType.key.propertyRef.forEach((field) => {\n\t\t\tthis.ensureSelectionProperty(field.name, aSelects);\n\t\t});\n\t}\n\n\t// push the selection properties to the select array\n\tprivate ensureSelectionProperty(sProperty: string, aSelects: string[]) {\n\t\tsProperty?.split(\",\").forEach(function (sElement) {\n\t\t\tif (sElement && !aSelects.includes(sElement)) {\n\t\t\t\taSelects.push(sElement);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Creates a card manifest for a recommended card.\n\t *\n\t * This method generates a new card manifest based on the provided input data, version information, and app manifest.\n\t * It also processes the columns to set attributes or titles for the card content and handles row navigation suppression if required.\n\t *\n\t * @param {IManifestCardData} oInput - The input data for the card, including card title, subtitle, columns, and entity set.\n\t * @param {IVersionInfo} oVersionInfo - The version information, including the version and build timestamp.\n\t * @param {IAppManifest} manifest - The original app manifest.\n\t * @param {boolean} [bSuppressRowNavigation] - Optional flag to suppress row navigation actions in the card content.\n\t * @returns {ICardManifest} The generated card manifest object.\n\t * @private\n\t */\n\tpublic _createCardManifest(\n\t\toInput: IManifestCardData,\n\t\toVersionInfo: IVersionInfo,\n\t\tmanifest: IAppManifest,\n\t\tbSuppressRowNavigation?: boolean\n\t): ICardManifest {\n\t\tlet oUIManifest = manifest[\"sap.ui\"];\n\t\tlet oAppManifest = manifest[\"sap.app\"];\n\t\tlet attributeIndex = 0;\n\n\t\tif (oAppManifest?.[\"crossNavigation\"]) {\n\t\t\tdelete oAppManifest[\"crossNavigation\"];\n\t\t}\n\t\tif (oAppManifest) {\n\t\t\tObject.assign(oAppManifest, {\n\t\t\t\ttype: \"card\",\n\t\t\t\tid: `user.${oInput.id}.${Date.now()}`,\n\t\t\t\ttitle: oInput.cardTitle || \"\",\n\t\t\t\tsubTitle: oInput.subTitle\n\t\t\t});\n\t\t}\n\n\t\tlet oNewManifest: ICardManifest = {\n\t\t\t\"sap.ui\": oUIManifest,\n\t\t\t\"sap.app\": this.createManifestSapApp(oAppManifest!),\n\t\t\t\"sap.card\": this.createManifestSapCard(manifest, oInput),\n\t\t\t\"sap.ui5\": this.createSapui5()\n\t\t};\n\t\tconst oContent = oNewManifest?.[\"sap.card\"]?.content;\n\n\t\toInput.columns.slice(0, COLUMN_LENGTH).forEach((column) => {\n\t\t\tconst columnValue = this._getAttributeValue(column);\n\t\t\tif (column.identifier && oContent?.item) {\n\t\t\t\t// If column.identifier is true, set it as the title\n\t\t\t\toContent.item.title = { value: columnValue, identifier: true };\n\t\t\t} else if (oContent?.item?.attributes) {\n\t\t\t\t// Otherwise, add it to the attributes\n\t\t\t\toContent.item.attributes[attributeIndex] = {\n\t\t\t\t\tvalue: columnValue,\n\t\t\t\t\tvisible: true,\n\t\t\t\t\t...(column.state && { state: column.state, showStateIcon: column.showStateIcon })\n\t\t\t\t};\n\t\t\t\tattributeIndex++;\n\t\t\t}\n\t\t});\n\n\t\t// if bSuppressRowNavigation true, remove content actions\n\t\tif (bSuppressRowNavigation && oContent?.item) {\n\t\t\toContent.item.actions = [];\n\t\t}\n\n\t\treturn {\n\t\t\t...oNewManifest,\n\t\t\t\"sap.insights\": {\n\t\t\t\tparentAppId: oInput.id,\n\t\t\t\tcardType: \"RT\",\n\t\t\t\tversions: {\n\t\t\t\t\tui5: `${oVersionInfo.version}-${oVersionInfo.buildTimestamp}`\n\t\t\t\t},\n\t\t\t\tvisible: true\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Get Attribute Value\n\t *\n\t * @param {object} attributeData - column object\n\t * @returns {string} returns attribute value\n\t * @private\n\t */\n\tprivate _getAttributeValue(attributeData: Attribute): string {\n\t\tlet attributeValue = !attributeData.value.startsWith(\"{\")\n\t\t\t? \"{= extension.formatters.stringFormatter(${\" + attributeData.path + \"}) }\"\n\t\t\t: attributeData.value;\n\t\tif (attributeData.type === \"Edm.Date\" || attributeData.type === \"Edm.DateTime\") {\n\t\t\tconst oDateFormatOptions = JSON.stringify({ pattern: Formatting.getDatePattern(\"short\") });\n\t\t\tattributeValue =\n\t\t\t\t\"{=${\" + attributeData.path + \"}?format.dateTime(${\" + attributeData.path + \"}, \" + oDateFormatOptions + \") : ''}\";\n\t\t}\n\n\t\treturn attributeValue;\n\t}\n\n\t//creates sap.app object structure for the card manifest of recommended card\n\tprivate createManifestSapApp(appManifest: ISapApp) {\n\t\tconst manifestAppData = deepExtend({}, appManifest) as ISapApp;\n\t\tif (manifestAppData?.dataSources?.mainService) {\n\t\t\tmanifestAppData.dataSources[\"filterService\"] = manifestAppData.dataSources.mainService;\n\t\t\tif (manifestAppData.dataSources[\"filterService\"]?.settings) {\n\t\t\t\tmanifestAppData.dataSources[\"filterService\"].settings[\"odataVersion\"] = \"2.0\";\n\t\t\t}\n\t\t}\n\n\t\treturn manifestAppData;\n\t}\n\n\t/**\n\t * Creates the manifest's SAP card object, sap.card based on the input card details.\n\t *\n\t * @param {oIAppManifestbject} manifest - The original manifest object of the application.\n\t * @param {IManifestCardData} oInput - The input object containing card details.\n\t * @returns {ISapCard} The SAP card configuration object.\n\t */\n\tprivate createManifestSapCard(manifest: IAppManifest, oInput: IManifestCardData): ISapCard {\n\t\tconst datasource = manifest[\"sap.app\"]?.dataSources;\n\t\tconst sServiceUrl = datasource?.mainService?.uri;\n\t\tconst entitySetName = oInput.entitySet;\n\t\tconst sCountPath = \"__count\";\n\t\tconst sText = {\n\t\t\ttext: \"{= ${\" + sCountPath + \"} === '0' ? '' : ${\" + sCountPath + \"} }\"\n\t\t};\n\n\t\tlet oCardConfig: ISapCard = {\n\t\t\ttype: \"List\"\n\t\t};\n\n\t\toCardConfig[\"configuration\"] = this.createManifestSapCardConfig(sServiceUrl || \"\", entitySetName);\n\t\toCardConfig[\"data\"] = this.createManifestSapCardData(sServiceUrl || \"\", oInput.url);\n\n\t\toCardConfig[\"header\"] = {\n\t\t\ttitle: oInput.cardTitle,\n\t\t\tsubTitle: \"\",\n\t\t\tactions: [],\n\t\t\tstatus: sText,\n\t\t\tdata: {\n\t\t\t\tpath: \"/content/d\"\n\t\t\t}\n\t\t};\n\n\t\toCardConfig[\"extension\"] = \"module:sap/insights/CardExtension\";\n\t\toCardConfig[\"content\"] = {\n\t\t\tdata: {\n\t\t\t\tpath: \"/content/d/results\"\n\t\t\t},\n\t\t\tmaxItems: 5,\n\t\t\titem: {\n\t\t\t\tactions: [],\n\t\t\t\tattributesLayoutType: \"OneColumn\",\n\t\t\t\tattributes: []\n\t\t\t}\n\t\t};\n\n\t\tthis.addCardActions(oCardConfig, oInput.semanticObject, oInput.action);\n\t\treturn oCardConfig;\n\t}\n\n\t/**\n\t * Sets the card actions for the given SAP card.\n\t *\n\t * @param {object} sapCard - The SAP card object to set the actions on.\n\t * @param {string} semObj - The semantic object for the navigation target.\n\t * @param {string} semanticAction - The semantic action for the navigation target.\n\t */\n\tprivate addCardActions(sapCard: ISapCard, semObj: string, semanticAction: string) {\n\t\tlet oHeaderParams: ICardActionParameters = {\n\t\t\tibnTarget: {\n\t\t\t\tsemanticObject: semObj,\n\t\t\t\taction: semanticAction\n\t\t\t},\n\t\t\tsensitiveProps: [],\n\t\t\tibnParams: {}\n\t\t};\n\n\t\tlet oHeaderParameterValue = [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/headerState/value})}\"\n\t\t\t}\n\t\t];\n\n\t\tlet oContentParams = JSON.parse(JSON.stringify(oHeaderParams)) as ICardActionParameters;\n\t\tlet oContentParameterValue = [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/contentState/value}, ${})}\"\n\t\t\t}\n\t\t];\n\n\t\tif (sapCard.configuration?.parameters) {\n\t\t\tsapCard.configuration.parameters.headerState = {\n\t\t\t\tvalue: JSON.stringify(oHeaderParams)\n\t\t\t};\n\t\t\tsapCard.configuration.parameters.contentState = {\n\t\t\t\tvalue: JSON.stringify(oContentParams)\n\t\t\t};\n\t\t}\n\t\tif (sapCard.header) {\n\t\t\tsapCard.header.actions = oHeaderParameterValue;\n\t\t}\n\t\tif (sapCard?.content?.item) {\n\t\t\tsapCard.content.item.actions = oContentParameterValue;\n\t\t}\n\t}\n\n\t/**\n\t * Creates the manifest sap card configuration object.\n\t *\n\t * @param {string} sServiceUrl - The service URL to be used in the request.\n\t * @param {string} entitySetName - The name of the entity set.\n\t * @returns {object} The SAP card configuration object.\n\t */\n\tprivate createManifestSapCardConfig(sServiceUrl: string, entitySetName: string): ISapCardConfig {\n\t\tconst oCardConfiguration = {\n\t\t\tparameters: {\n\t\t\t\t_relevantODataFilters: {\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\t_relevantODataParameters: {\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\t_entitySet: {\n\t\t\t\t\tvalue: entitySetName\n\t\t\t\t},\n\t\t\t\t_urlSuffix: {\n\t\t\t\t\tvalue: \"/Results\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tdestinations: {\n\t\t\t\tservice: {\n\t\t\t\t\tname: \"(default)\",\n\t\t\t\t\tdefaultUrl: \"/\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tcsrfTokens: {\n\t\t\t\ttoken1: {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\trequest: {\n\t\t\t\t\t\t\turl: \"{{destinations.service}}\" + sServiceUrl,\n\t\t\t\t\t\t\tmethod: \"HEAD\",\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn oCardConfiguration;\n\t}\n\n\t//create sap.ui5 object for the card manifest\n\tprivate createSapui5(): ISapUI5App {\n\t\treturn {\n\t\t\t_version: \"1.1.0\",\n\t\t\tcontentDensities: { compact: true, cozy: true },\n\t\t\tdependencies: {\n\t\t\t\tlibs: {\n\t\t\t\t\t\"sap.insights\": {\n\t\t\t\t\t\tlazy: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Creates the manifest data for an SAP card.\n\t *\n\t * @param {string} sServiceUrl - The service URL to be used in the request.\n\t * @param {string} urlExpand - The URL to expand in the batch request.\n\t * @returns {IRequestData} The SAP card data object containing the request configuration.\n\t */\n\tprivate createManifestSapCardData(sServiceUrl: string, urlExpand: string): IRequestData {\n\t\tconst oBatch = {\n\t\t\tcontent: {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\turl: urlExpand,\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: \"application/json\"\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst oSapCardData: IRequestData = {\n\t\t\trequest: {\n\t\t\t\turl: \"{{destinations.service}}\" + sServiceUrl + \"/$batch\",\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"X-CSRF-Token\": \"{{csrfTokens.token1}}\"\n\t\t\t\t},\n\t\t\t\tbatch: oBatch\n\t\t\t}\n\t\t};\n\n\t\treturn oSapCardData;\n\t}\n\n\t/**\n\t * This function returns card details required for the recommended card manifest\n\t * based on app manifest and annotations\n\t * @param {object} manifest - The original app manifest\n\t * @param {object} oInfo - The object containing details of lineitem, entityset, settings etc\n\t * @param {object} oParentApp - The parent app object\n\t * @param {object} oMetaModel - The OData metamodel\n\t * @returns {object} The card data object with title, subtitle, url, semanticObject, action, id and column details\n\t * @private\n\t */\n\tpublic _getManifestCardData(\n\t\tmanifest: IAppManifest,\n\t\toInfo: ILineItemDetails,\n\t\toParentApp: IAppInfoData,\n\t\toMetaModel: ODataMetaModel\n\t): IManifestCardData {\n\t\tconst manifestApp = manifest[\"sap.app\"];\n\t\tconst dataSources = manifestApp?.dataSources;\n\n\t\tconst mainServiceUri = dataSources?.mainService?.uri || \"\";\n\n\t\tconst lineItem = oInfo.lineItem as ILineItem[];\n\t\tconst entitySet = oInfo.entitySet;\n\t\tconst oEntitySet = oMetaModel.getODataEntitySet(entitySet) as IEntitySet;\n\t\tconst oEntityType = oMetaModel.getODataEntityType(oEntitySet?.entityType) as IEntityType;\n\t\tconst serviceUrl = `${mainServiceUri.replace(/\\/$/, \"\")}/${entitySet}`; // make '{mainServiceUri}/{entitySet}' format\n\n\t\t//get the column details for each of the lineitem columns\n\t\tconst aColumns = lineItem\n\t\t\t?.map((oColumn) => this._getColumnDetail(entitySet, oMetaModel, oColumn))\n\t\t\t.filter((oItem) => oItem !== undefined);\n\n\t\tconst oSelectExpand = this._getRelevantColumnPaths(aColumns);\n\t\t//get the complete select and expand parameters for url\n\t\tconst mParameters = this.getParameters(oInfo, oMetaModel, entitySet, oSelectExpand);\n\n\t\tconst urlSelectExpand = this.createCustomParams(mParameters);\n\t\tconst finalUrl = urlSelectExpand\n\t\t\t? `${serviceUrl}?$top=5&skip=0&${urlSelectExpand}&$inlinecount=allpages`\n\t\t\t: `${serviceUrl}?$top=5&skip=0`;\n\t\t//sort  the column based on their importance and then slice the first 4 columns\n\t\tconst aColumnSorted = (sortCollectionByImportance(aColumns) as IColumnData[])\n\t\t\t.map((column) => {\n\t\t\t\treturn {\n\t\t\t\t\tpath: column?.path,\n\t\t\t\t\ttype: column?.type,\n\t\t\t\t\tvalue: column?.value,\n\t\t\t\t\tidentifier: column?.identifier,\n\t\t\t\t\tstate: column?.state,\n\t\t\t\t\tshowStateIcon: column?.showStateIcon\n\t\t\t\t};\n\t\t\t})\n\t\t\t.slice(0, 4);\n\t\treturn {\n\t\t\tcardTitle: manifest?.[\"sap.app\"]?.title,\n\t\t\tsubTitle: oEntityType[UIAnnotations.CommonLabel] ? `Top 5 ${oEntityType[UIAnnotations.CommonLabel].String}` : \"\",\n\t\t\turl: finalUrl,\n\t\t\tsemanticObject: oParentApp?.semanticObject || \"\",\n\t\t\taction: oParentApp?.action || \"\",\n\t\t\tid: manifest?.[\"sap.app\"]?.id,\n\t\t\tcolumns: aColumnSorted,\n\t\t\tentitySet: entitySet\n\t\t};\n\t}\n\n\t/**\n\t * This function returns the column detail object for the given column's context\n\t * @param {string} entitySet - - The entity set name\n\t * @param {object} oMetaModel -  OData metamodel\n\t * @param {object} lineItemContext - The line item column context object\n\t * @returns {object} The column detail containing value, path, importance and type\n\t * @private\n\t */\n\tprivate _getColumnDetail(entitySet: string, oMetaModel: ODataMetaModel, lineItemContext: ILineItem) {\n\t\tlet oProperty;\n\t\tlet oEntitySet = oMetaModel.getODataEntitySet(entitySet) as IEntitySet;\n\t\tlet oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType) as IEntityType;\n\n\t\tif (lineItemContext.Value?.Path) {\n\t\t\toProperty = oMetaModel.getODataProperty(oEntityType, lineItemContext.Value.Path) as UIAnnotationValue;\n\t\t\tlet oPropertyHidden = oProperty[UIAnnotations.UIHidden];\n\n\t\t\t// if oProperty not hidden and oLineitemContext not hidden then only consider the column else return undefined\n\t\t\tif (oPropertyHidden?.Bool === \"true\" || oPropertyHidden?.Bool === true) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t//check if lineItemContext is hidden or no oProperty is found\n\t\t\tif (this.isPropertyHidden(lineItemContext) || !oProperty || Object.keys(oProperty).length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\tlet oP13NDetails = this.createP13N(oEntitySet, oProperty, lineItemContext, oMetaModel);\n\t\toP13NDetails = oP13NDetails.replace(/\\\\/g, \"\"); // Remove the double backslashes\n\t\tlet columnDataObject = oP13NDetails ? (JSON.parse(oP13NDetails) as ColumnObjectData) : {};\n\n\t\tif (!this.isSupportedColumn(columnDataObject, lineItemContext, oMetaModel, oEntitySet)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (oProperty) {\n\t\t\tcolumnDataObject = this.getColumnObjectDetails(columnDataObject, oProperty, oEntityType, lineItemContext);\n\t\t\tif (lineItemContext?.[FieldAnnotationsType.Importance] !== undefined) {\n\t\t\t\tconst importance = lineItemContext[FieldAnnotationsType.Importance];\n\t\t\t\tcolumnDataObject.importance = importance;\n\t\t\t}\n\t\t}\n\n\t\treturn columnDataObject;\n\t}\n\n\t/**\n\t * Retrieves the column object details based on the provided property and entity type.\n\t *\n\t * @param {object} columnDataObject - The column information object to be populated.\n\t * @param {object} propertyDetails - The property object containing metadata about the column.\n\t * @param {object} entityType - The entity type object containing metadata about the entity.\n\t * @param {object} dataField - The data field object containing the lineitem column context object\n\t * @returns {object} The populated column information object.\n\t * @private\n\t */\n\tprivate getColumnObjectDetails(\n\t\tcolumnDataObject: ColumnObjectData,\n\t\tpropertyDetails: UIAnnotationValue,\n\t\tentityType: IEntityType,\n\t\tdataField: ILineItemContext\n\t) {\n\t\tlet sColumnKeyDescription = propertyDetails[UIAnnotations.CommonText]?.Path || \"\";\n\t\tsColumnKeyDescription = \"{\" + sColumnKeyDescription + \"}\";\n\t\tlet sColumnValue = propertyDetails.name ? \"{\" + propertyDetails.name + \"}\" : \"\";\n\t\tlet sNavigation = \"\";\n\t\tconst aSemKeyAnnotation = entityType[UIAnnotations.CommonSemanticKey];\n\t\tconst bIsPropertySemanticKey =\n\t\t\t!!aSemKeyAnnotation &&\n\t\t\taSemKeyAnnotation.some(function (oAnnotation) {\n\t\t\t\treturn oAnnotation.PropertyPath === propertyDetails.name;\n\t\t\t});\n\t\tlet bIsCriticality: boolean = false;\n\t\tlet criticalityAnnotation = undefined;\n\n\t\tif ((dataField?.Criticality && dataField?.Value?.Path) === propertyDetails.name) {\n\t\t\tcriticalityAnnotation = dataField;\n\t\t\tbIsCriticality = true;\n\t\t}\n\n\t\tif (propertyDetails[UIAnnotations.MeasuresISOCurrency]?.Path) {\n\t\t\tsColumnValue = sColumnValue.concat(\" \" + \"{\" + sNavigation + propertyDetails[UIAnnotations.MeasuresISOCurrency]?.Path + \"}\");\n\t\t}\n\t\tif (propertyDetails[UIAnnotations.MeasuresUnit]?.Path) {\n\t\t\tsColumnValue = sColumnValue.concat(\" \" + \"{\" + sNavigation + propertyDetails[UIAnnotations.MeasuresUnit]?.Path + \"}\");\n\t\t}\n\t\tif (propertyDetails[UIAnnotations.CommonText]?.Path) {\n\t\t\tlet sTextArragement = propertyDetails[UIAnnotations.CommonText]?.[UIAnnotations.UITextArrangement];\n\t\t\tif (!sTextArragement) {\n\t\t\t\tsTextArragement = entityType[UIAnnotations.UITextArrangement];\n\t\t\t}\n\t\t\tthis._setColumnTextValue(sTextArragement, columnDataObject, sColumnKeyDescription, sColumnValue);\n\t\t} else {\n\t\t\tcolumnDataObject[\"value\"] = sColumnValue;\n\t\t\tif (bIsPropertySemanticKey) {\n\t\t\t\tcolumnDataObject[\"identifier\"] = bIsPropertySemanticKey;\n\t\t\t}\n\t\t}\n\t\tif (bIsCriticality) {\n\t\t\tcolumnDataObject[\"state\"] = this.buildExpressionForCriticalityColor(criticalityAnnotation);\n\t\t\tcolumnDataObject[\"showStateIcon\"] =\n\t\t\t\tcriticalityAnnotation?.CriticalityRepresentation?.EnumMember !==\n\t\t\t\t\tFieldAnnotationsType.CriticalityRepresentationTypeWithoutIcon || true;\n\t\t}\n\t\tcolumnDataObject[\"path\"] = propertyDetails[UIAnnotations.CommonText]?.Path || propertyDetails.name;\n\t\tcolumnDataObject[\"type\"] = propertyDetails.type;\n\t\treturn columnDataObject;\n\t}\n\n\t/**\n\t * Build expression for the criticality annotation, kept same as the one used in LROP\n\t * @param {object} criticalityAnnotation - The criticality annotation object\n\t * @returns {string} The expression for the criticality color\n\t * @private\n\t */\n\tprivate buildExpressionForCriticalityColor(criticalityAnnotation?: ILineItemContext) {\n\t\tlet sFormatCriticalityExpression: CoreLib.ValueState | string = ValueState.None;\n\t\tlet sExpressionTemplate;\n\t\tlet oCriticalityProperty = criticalityAnnotation?.Criticality;\n\t\tenum CriticalityType {\n\t\t\tNegative = \"com.sap.vocabularies.UI.v1.CriticalityType/Negative\",\n\t\t\tCritical = \"com.sap.vocabularies.UI.v1.CriticalityType/Critical\",\n\t\t\tPositive = \"com.sap.vocabularies.UI.v1.CriticalityType/Positive\"\n\t\t}\n\t\tif (oCriticalityProperty) {\n\t\t\tsExpressionTemplate =\n\t\t\t\t\"'{'= ({0} === ''\" +\n\t\t\t\tCriticalityType.Negative +\n\t\t\t\t\"'') || ({0} === ''1'') || ({0} === 1) ? ''\" +\n\t\t\t\tValueState.Error +\n\t\t\t\t\"'' : \" +\n\t\t\t\t\"({0} === ''\" +\n\t\t\t\tCriticalityType.Critical +\n\t\t\t\t\"'') || ({0} === ''2'') || ({0} === 2) ? ''\" +\n\t\t\t\tValueState.Warning +\n\t\t\t\t\"'' : \" +\n\t\t\t\t\"({0} === ''\" +\n\t\t\t\tCriticalityType.Positive +\n\t\t\t\t\"'') || ({0} === ''3'') || ({0} === 3) ? ''\" +\n\t\t\t\tValueState.Success +\n\t\t\t\t\"'' : \" +\n\t\t\t\t\"''\" +\n\t\t\t\tValueState.None +\n\t\t\t\t\"'' '}'\";\n\t\t\tif (oCriticalityProperty?.Path) {\n\t\t\t\tconst sCriticalitySimplePath = \"${\" + oCriticalityProperty.Path + \"}\";\n\t\t\t\tsFormatCriticalityExpression = formatMessage(sExpressionTemplate, [sCriticalitySimplePath]);\n\t\t\t} else if (oCriticalityProperty?.EnumMember) {\n\t\t\t\tconst sCriticality = \"'\" + oCriticalityProperty.EnumMember + \"'\";\n\t\t\t\tsFormatCriticalityExpression = formatMessage(sExpressionTemplate, [sCriticality]);\n\t\t\t} else {\n\t\t\t\tLog.warning(\"Case not supported, returning the default sap.ui.core.ValueState.None\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Any other cases are not valid, the default value of 'None' will be returned\n\t\t\tLog.warning(\"Case not supported, returning the default sap.ui.core.ValueState.None\");\n\t\t}\n\n\t\treturn sFormatCriticalityExpression;\n\t}\n\n\t/**\n\t * Sets display text format of column\n\t *\n\t * @private\n\t * @param {{EnumMember: string} | undefined} sTextArragement - sTextArragement object\n\t * @param { ColumnObjectData} columnDataObject - Object containing column details\n\t * @param {string} sColumnKeyDescription - Description field to include in text value\n\t * @param {string} sColumnValue - The value to include in Text value\n\t */\n\tprivate _setColumnTextValue(\n\t\tsTextArragement: { EnumMember: string } | undefined,\n\t\tcolumnDataObject: ColumnObjectData,\n\t\tsColumnKeyDescription: string,\n\t\tsColumnValue: string\n\t) {\n\t\tenum TextArrangementType {\n\t\t\tTextOnly = \"TextOnly\",\n\t\t\tTextLast = \"TextLast\",\n\t\t\tTextSeparate = \"TextSeparate\"\n\t\t}\n\t\tconst sTextArrangementType = sTextArragement?.EnumMember?.split(\"/\")[1];\n\t\tlet valueExpr;\n\n\t\tswitch (sTextArrangementType) {\n\t\t\tcase TextArrangementType.TextOnly:\n\t\t\t\tvalueExpr = `{= $${sColumnKeyDescription} === '' ? '' : $${sColumnKeyDescription} }`;\n\t\t\t\tbreak;\n\n\t\t\tcase TextArrangementType.TextLast:\n\t\t\t\tvalueExpr =\n\t\t\t\t\t`{= $${sColumnValue} === '' ? '' : $${sColumnValue} }` +\n\t\t\t\t\t`{= $${sColumnKeyDescription} === '' ? '' : ' (' + ($${sColumnKeyDescription}) + ')' }`;\n\t\t\t\tbreak;\n\n\t\t\tcase TextArrangementType.TextSeparate:\n\t\t\t\tvalueExpr = `{= $${sColumnValue} === '' ? '' : $${sColumnValue} }`;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tvalueExpr =\n\t\t\t\t\t`{= $${sColumnKeyDescription} === '' ? '' : $${sColumnKeyDescription} }` +\n\t\t\t\t\t`{= $${sColumnValue} === '' ? '' : ' (' + ($${sColumnValue}) + ')' }`;\n\t\t\t\tbreak;\n\t\t}\n\t\tcolumnDataObject[\"value\"] = valueExpr;\n\t}\n\n\t// get requestAtlLeastFields from PresentationVariant\n\tprivate _getRequestAtLeastFields(presentationVariant: IPresentationVariant): string[] | RequestAtleastFieldType[] | [] {\n\t\treturn presentationVariant && Array.isArray(presentationVariant.requestAtLeastFields)\n\t\t\t? presentationVariant.requestAtLeastFields\n\t\t\t: [];\n\t}\n\n\t/**\n\t * Creates a query string with custom parameters for OData requests.\n\t *\n\t * This method generates a query string containing `$expand` and `$select` parameters\n\t * based on the provided input object. The values are URL-encoded to ensure proper formatting.\n\t *\n\t * @param {object} mParameters - An object containing the parameters for the query string.\n\t * @param {string | undefined} mParameters.expand - The value for the `$expand` parameter, if any.\n\t * @param {string | undefined} mParameters.select - The value for the `$select` parameter, if any.\n\t * @returns {string} A query string containing the `$expand` and `$select` parameters, joined by `&`.\n\t * @private\n\t */\n\tprivate createCustomParams(mParameters: SelectExpandDetail): string {\n\t\tconst aCustomParams = [];\n\t\tif (mParameters?.expand) {\n\t\t\taCustomParams.push(\"$expand=\" + encodeURL(mParameters[\"expand\"]));\n\t\t}\n\t\tif (mParameters?.select) {\n\t\t\taCustomParams.push(\"$select=\" + encodeURL(mParameters[\"select\"]));\n\t\t}\n\t\treturn aCustomParams.join(\"&\");\n\t}\n\n\t/**\n\t * Retrieves an object from the OData meta model based on the given entity type and path.\n\t *\n\t * This method resolves the provided path to an absolute path if it is relative, using the entity type as the base.\n\t * It then retrieves the corresponding object from the meta model. Any \"@\" characters in the path are removed\n\t * to match the meta model's structure.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and annotations.\n\t * @param {string} entityTypeName - The entity type used as the base for resolving relative paths.\n\t * @param {string} path - The path to the object in the meta model. Can be relative or absolute.\n\t * @returns {IPresentationVariant | ILineItem[]} The object retrieved from the meta model, which can be a presentation variant or an array of nested objects.\n\t * @private\n\t */\n\tprivate getObject<T extends IPresentationVariant | ILineItem[]>(metaModel: ODataMetaModel, entityTypeName: string, path: string): T {\n\t\tif (path[0] !== \"/\") {\n\t\t\t// relative path - add path of annotation target, i.e. EntityType\n\t\t\tpath = (metaModel.getODataEntityType(entityTypeName, true) as string) + \"/\" + path; //*****check this */\n\t\t}\n\t\t// assumption: absolute paths in annotations are equal to corresponding paths in metaModel\n\t\t// any \"@\" are removed in the metaModel\n\t\treturn metaModel.getObject(path.replace(/@/g, \"\")) as T;\n\t}\n\n\t/**\n\t * Check If Page is List Report\n\t *\n\t * @param {object} page - page object\n\t * @returns {boolean} returns boolean\n\t * @private\n\t */\n\tpublic _isListReport(page?: IPageType): boolean {\n\t\treturn page?.component?.name === \"sap.suite.ui.generic.template.ListReport\";\n\t}\n\n\t/**\n\t * @param {IPageType[] | PageRecord} pages - pages object from manifest\n\t * @returns {ILrSettings} - returns the settings object for the ListReport\n\t */\n\tprivate getSettingsForPage(pages: IPageType[] | undefined | PageRecord): ILrSettings {\n\t\tif (!pages) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet lrSettings: ILrSettings = {};\n\n\t\t// Handling array and object structure in LR V2 manifest\n\t\tif (Array.isArray(pages) && this._isListReport(pages[0])) {\n\t\t\tconst listPage = pages[0];\n\t\t\tif (listPage?.component) {\n\t\t\t\tconst component = listPage.component;\n\t\t\t\tlrSettings = component?.settings || {};\n\t\t\t\tlrSettings.bSupressCardRowNavigation = this.shouldSuppressCardRowNavigation(listPage);\n\t\t\t}\n\t\t} else if (Object.keys(pages).length) {\n\t\t\tconst sListKey = Object.keys(pages).find((key) => this._isListReport((pages as PageRecord)[key] as IPageType));\n\t\t\tif (sListKey) {\n\t\t\t\tconst listPage = (pages as PageRecord)[sListKey] as IPageType;\n\n\t\t\t\tif (listPage?.component) {\n\t\t\t\t\tconst component = listPage.component;\n\t\t\t\t\tlrSettings = (component?.settings ?? {}) as ILrSettings;\n\t\t\t\t\tlrSettings.bSupressCardRowNavigation = this.shouldSuppressCardRowNavigation(listPage);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lrSettings;\n\t}\n\n\t/**\n\t * Determines whether card row navigation should be suppressed for the card\n\t *\n\t * @param {IPageType} page - The ListReport page object from the manifest.\n\t * @returns {boolean} True if card row navigation should be suppressed\n\t */\n\tprivate shouldSuppressCardRowNavigation(listPage: IPageType): boolean {\n\t\t// LR only app or if external navigation from OP\n\t\tif (listPage.pages) {\n\t\t\t// If pages is an array, handle based on its length and navigation property\n\t\t\tif (Array.isArray(listPage.pages)) {\n\t\t\t\tif (listPage.pages.length === 0 || listPage.pages[0]?.navigation) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If pages is an object, check if the object keys have navigation\n\t\t\t\tconst keys = Object.keys(listPage.pages);\n\t\t\t\tif (keys.length === 0 || (keys.length && (listPage.pages[keys[0]] as IPageType)?.navigation)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t//if no list pages return true\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for Quick variant selection X in settings\n\t\tif (listPage?.component?.settings?.quickVariantSelectionX) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {object} metaModel - metamodel object\n\t * @param {ILrSettings} ILrSettings - settings object from the manifest\n\t * @param {string} entitySetName - entity set of the application\n\t * @returns {object} - returns the normalized table settings\n\t * @private\n\t */\n\tprivate getNormalizedTableSettings(\n\t\tmetaModel: ODataMetaModel,\n\t\tlRVariantSettings: ILrSettings | IVariantSetting,\n\t\tentitySetName: string\n\t): ITableSettings {\n\t\tconst settings = deepExtend({}, lRVariantSettings) as ILrSettings;\n\n\t\t// 1. map boolean settings gridTable and treeTable to tableType\n\t\tif (settings && !settings.tableType) {\n\t\t\tif (settings.gridTable) {\n\t\t\t\tsettings.tableType = TABLE_TYPES.GRID;\n\t\t\t} else if (settings.treeTable) {\n\t\t\t\tsettings.tableType = TABLE_TYPES.TREE;\n\t\t\t}\n\t\t}\n\n\t\t// 2. map flat settings to structured ones\n\t\tsettings.tableSettings = settings.tableSettings || {};\n\t\tsettings.tableSettings.type = settings.tableSettings.type || settings.tableType;\n\n\t\tconst entitySet = metaModel.getODataEntitySet(entitySetName) as IEntitySet;\n\t\tconst entityTypeData = metaModel.getODataEntityType(entitySet.entityType) as IEntityType;\n\n\t\t// 3. determine type\n\t\tif (\n\t\t\tsettings.tableSettings.type !== TABLE_TYPES.STANDARD_LIST &&\n\t\t\tsettings.tableSettings.type !== TABLE_TYPES.OBJECT_LIST &&\n\t\t\tentitySetName\n\t\t) {\n\t\t\tsettings.tableSettings.type =\n\t\t\t\tsettings.tableSettings.type ||\n\t\t\t\t(entityTypeData[UIAnnotations.SapSemantics] === \"aggregate\" ? TABLE_TYPES.ANALYTICAL : TABLE_TYPES.RESPONSIVE);\n\t\t\tif (settings.tableSettings.type === TABLE_TYPES.ANALYTICAL && !(entityTypeData[UIAnnotations.SapSemantics] === \"aggregate\")) {\n\t\t\t\tsettings.tableSettings.type = TABLE_TYPES.GRID;\n\t\t\t}\n\t\t}\n\n\t\tif (entityTypeData[UIAnnotations.UIHeaderInfo]) {\n\t\t\tsettings.tableSettings.headerInfo = entityTypeData[UIAnnotations.UIHeaderInfo];\n\t\t}\n\n\t\t// 4. remove deprecated settings (to avoid new code to rely on them)\n\t\tdelete settings.gridTable;\n\t\tdelete settings.treeTable;\n\t\tdelete settings.tableType;\n\n\t\treturn settings.tableSettings;\n\t}\n\n\t/**\n\t * @param {object} metaModel - metamodel object\n\t * @param {string} entitySetName - entity set of the application\n\t * @param {object} tabItem - details of the variant tab\n\t * @returns {boolean} - returns true if the variant is a smart chart\n\t */\n\tprivate checkIfSmartChart(metaModel: ODataMetaModel, entitySetName: string, tabItem: IVariantSetting): boolean {\n\t\tlet entitySetData = metaModel.getODataEntitySet(entitySetName) as IEntitySet;\n\t\tlet entityTypeData = metaModel.getODataEntityType(entitySetData.entityType) as IEntityType;\n\t\tlet annotationName, annotationPath, variantData;\n\t\tannotationPath = tabItem.annotationPath;\n\t\t//variantData = !!annotationPath && (entityTypeData[annotationPath] as VariantInfo);\n\t\tvariantData = annotationPath ? (entityTypeData[annotationPath] as VariantInfo) : undefined;\n\n\t\tif (variantData?.PresentationVariant) {\n\t\t\t// oVariant is SelectionPresentationVariant\n\t\t\tif (variantData.PresentationVariant.Visualizations) {\n\t\t\t\tannotationName = variantData.PresentationVariant.Visualizations[0].AnnotationPath;\n\t\t\t} else if (variantData.PresentationVariant.Path) {\n\t\t\t\tlet sPresentationVariantPath = variantData.PresentationVariant.Path.split(\"@\")[1];\n\t\t\t\tlet oPresentationVariantAnnotation =\n\t\t\t\t\tsPresentationVariantPath && (entityTypeData[sPresentationVariantPath] as IPresentationVariant);\n\t\t\t\tannotationName = oPresentationVariantAnnotation ? oPresentationVariantAnnotation?.Visualizations?.[0].AnnotationPath : \"\";\n\t\t\t}\n\t\t} else if (variantData?.Visualizations) {\n\t\t\t// oVariant is PresentationVariant\n\t\t\tannotationName = variantData.Visualizations[0].AnnotationPath;\n\t\t}\n\n\t\treturn !!((annotationName ?? \"\").indexOf(UIAnnotations.UIChart) > -1);\n\t}\n\n\t/**\n\t * function returns true if the passed entityset / properties have mandatory properties\n\t *\n\t * @param {EntitySet} entitySetData - Entity set\n\t * @param {Array} propertiesSet - Additional Properties\n\t * @returns {boolean} returns boolean\n\t * @private\n\t */\n\tpublic hasMandatoryProperties(entitySetData?: IEntitySet, propertiesSet?: Property[]): boolean {\n\t\t// if entityset has required properties in filter restrictions return true\n\t\tif (entitySetData?.[\"Org.OData.Capabilities.V1.FilterRestrictions\"]?.[\"RequiredProperties\"]?.length) {\n\t\t\treturn true;\n\t\t} else if (propertiesSet?.length) {\n\t\t\t// iterate through all properties and return true if any property is mandatory or sap:rquired-in-filter is true\n\t\t\treturn propertiesSet.some((propertyDetail: Record<string, string> | Property) => {\n\t\t\t\treturn (\n\t\t\t\t\tObject.keys(propertyDetail).length &&\n\t\t\t\t\t((propertyDetail as UIAnnotationValue)[\"sap:parameter\"] === \"mandatory\" ||\n\t\t\t\t\t\t(propertyDetail as UIAnnotationValue)[\"sap:required-in-filter\"] === \"true\")\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if sEntitySet has association with parameterised entityset and if it has give parametersised entityset parameters\n\t * @param {object} metaModel OData MetaModel\n\t * @param {string} entitySetName of the EntitySet which has Parameter Entityset in association.\n\t * @param {boolean} infoParamsRequired If the full info of parameters is needed or only the name of params is needed.\n\t * @return {ParameterisedEntity} Contains name of Parameter EntitySet, keys of Parameter EntitySet and Name of Navigation property.\n\t * @private\n\t */\n\tpublic _getParametersisedEntitySetParams(\n\t\tmetaModel: ODataMetaModel,\n\t\tentitySetName: string,\n\t\tinfoParamsRequired: boolean\n\t): ParameterisedEntity {\n\t\tif (!metaModel) {\n\t\t\tthrow new Error(\"OData Model needs to be passed as an argument\");\n\t\t}\n\t\tconst oResult: ParameterisedEntity = { entitySetName: null, parameters: [], navPropertyName: null };\n\t\tconst entitySetData = metaModel.getODataEntitySet(entitySetName) as IEntitySet;\n\t\tconst entityTypeData = metaModel.getODataEntityType(entitySetData.entityType) as IEntityType;\n\t\tconst aNavigationProperties = entityTypeData.navigationProperty;\n\n\t\tif (!aNavigationProperties) {\n\t\t\treturn oResult;\n\t\t}\n\n\t\t// filter the parameter entityset for extracting it's key and it's entityset name\n\t\taNavigationProperties.forEach(function (oNavProperty) {\n\t\t\tconst oNavigationEntitySet = metaModel.getODataAssociationEnd(entityTypeData, oNavProperty.name);\n\t\t\tconst oNavigationEntityType = oNavigationEntitySet && (metaModel.getODataEntityType(oNavigationEntitySet.type) as IEntityType);\n\n\t\t\tif (oNavigationEntityType?.[UIAnnotations.SapSemantics] !== \"parameters\" || !oNavigationEntityType.key) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\toResult.entitySetName = metaModel.getODataAssociationSetEnd(entityTypeData, oNavProperty.name)?.entitySet;\n\t\t\tfor (let value of oNavigationEntityType.key.propertyRef) {\n\t\t\t\tif (infoParamsRequired) {\n\t\t\t\t\tconst navProp = oNavigationEntityType.property as Property[];\n\t\t\t\t\tfor (let navProperty of navProp) {\n\t\t\t\t\t\tif (navProperty.name === value.name) {\n\t\t\t\t\t\t\toResult.parameters.push(navProperty);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toResult.parameters.push(value.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst aSubNavigationProperties = oNavigationEntityType.navigationProperty;\n\t\t\t// Parameter entityset must have association back to main entityset.\n\t\t\tconst bBackAssociationPresent = aSubNavigationProperties?.some(function (oSubNavigationProperty) {\n\t\t\t\tconst sSubNavigationEntityType = metaModel.getODataAssociationEnd(\n\t\t\t\t\toNavigationEntityType,\n\t\t\t\t\toSubNavigationProperty?.name\n\t\t\t\t)?.type;\n\t\t\t\t//if entityset.entitytype is same as subnavigation entitytype then it's a back association\n\t\t\t\toResult.navPropertyName = sSubNavigationEntityType === entitySetData.entityType ? oSubNavigationProperty?.name : null;\n\t\t\t\treturn oResult.navPropertyName;\n\t\t\t});\n\n\t\t\treturn bBackAssociationPresent && oResult.navPropertyName && oResult.entitySetName;\n\t\t});\n\t\treturn oResult;\n\t}\n\n\t/**\n\t * This function check if a lineitem annotation column is visible or not\n\t * @param {object} lineItemAnnotations - The column details object\n\t * @returns {Boolean} The column visibility status {true/false}\n\t * @private\n\t */\n\tprivate isPropertyHidden(lineItemAnnotations: ILineItemContext): boolean {\n\t\tlet oFieldControl = lineItemAnnotations[UIAnnotations.CommonFieldControl];\n\t\tlet uiHidden = lineItemAnnotations[UIAnnotations.UIHidden];\n\n\t\t// Check for FieldControl Hidden\n\t\tif (oFieldControl?.EnumMember === FieldAnnotationsType.FieldControlHiddenType) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for UI Hidden\n\t\tif (uiHidden) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(uiHidden, \"Bool\")) {\n\t\t\t\treturn uiHidden?.Bool === \"true\";\n\t\t\t} else if (Object.prototype.hasOwnProperty.call(uiHidden, \"Path\")) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true; // <Annotation Term=\"UI.Hidden\"/>\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates a P13N  string for a given entity set, property, and line item column.\n\t *\n\t * @param {Object} contextSet - The entity set object.\n\t * @param {Object} contextProp - The property details from metadata.\n\t * @param {Object} columnDataField - The line item column data field.\n\t * @param {Object} metaModel - The metadata model object.\n\t * @returns {string} The P13N string for the specified entity set and property.\n\t * @private\n\t */\n\tprivate createP13N(\n\t\tcontextSet: IEntitySet,\n\t\tcontextProp?: Property | UIAnnotationValue,\n\t\tcolumnDataField?: ILineItemContext,\n\t\tmetaModel?: ODataMetaModel\n\t): string {\n\t\tlet p13nDetails: string = \"\";\n\t\tlet additionalProperties: string[] = [];\n\t\tlet navigationPath: string = \"\";\n\t\tlet recordType = columnDataField?.RecordType;\n\t\tlet dataFieldValue = columnDataField?.Value as ExtendedLineItemContextValue;\n\t\tlet valuePath: string = dataFieldValue?.Path || \"\";\n\n\t\tif (\n\t\t\trecordType === FieldAnnotationsType.DataField ||\n\t\t\trecordType === FieldAnnotationsType.DataFieldForAnnotation ||\n\t\t\trecordType === FieldAnnotationsType.DataFieldWithUrl\n\t\t) {\n\t\t\tif (valuePath) {\n\t\t\t\tlet columnKey = this.createP13NColumnKey(columnDataField as ILineItemContext);\n\t\t\t\tp13nDetails = '\\\\{\"columnKey\":\"' + columnKey + '\", \"leadingProperty\":\"' + valuePath;\n\t\t\t\tnavigationPath = this.getNavigationPrefixPath(metaModel as ODataMetaModel, contextSet, valuePath);\n\t\t\t} else if (dataFieldValue?.Apply?.Name === \"odata.concat\") {\n\t\t\t\tdataFieldValue?.Apply?.Parameters.forEach(function (parameterDetails) {\n\t\t\t\t\tif (parameterDetails.Type === \"Path\") {\n\t\t\t\t\t\tif (!p13nDetails) {\n\t\t\t\t\t\t\tp13nDetails = '\\\\{\"columnKey\":\"' + parameterDetails?.Value + '\", \"leadingProperty\":\"' + parameterDetails?.Value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tadditionalProperties.push(parameterDetails.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Append type information and additional properties\n\t\t\tp13nDetails += this.processAdditionalProperties(\n\t\t\t\tcontextProp as UIAnnotationValue,\n\t\t\t\tcolumnDataField as ILineItemContext,\n\t\t\t\tnavigationPath,\n\t\t\t\tadditionalProperties\n\t\t\t);\n\t\t\tif (recordType === FieldAnnotationsType.DataFieldWithUrl && columnDataField?.Url) {\n\t\t\t\tthis.processDataFieldWithUrl(columnDataField, additionalProperties);\n\t\t\t}\n\t\t\tif (p13nDetails && additionalProperties.length) {\n\t\t\t\tp13nDetails += '\", \"additionalProperty\":\"' + additionalProperties.join();\n\t\t\t}\n\t\t\tif (p13nDetails) {\n\t\t\t\tp13nDetails += '\"\\\\}';\n\t\t\t}\n\t\t}\n\t\treturn p13nDetails;\n\t}\n\n\t//process DataFieldUrl properties and add them to additionalProperties\n\tprivate processDataFieldWithUrl(columnDataField: ILineItemContext, additionalProperties: string[]): void {\n\t\tconst oDataFieldUrl = columnDataField.Url;\n\t\tif (oDataFieldUrl?.Apply?.Parameters) {\n\t\t\toDataFieldUrl.Apply.Parameters.forEach((oParameter) => {\n\t\t\t\tif (oParameter.Type === \"LabeledElement\" && oParameter.Value?.Path) {\n\t\t\t\t\tadditionalProperties.push(oParameter.Value.Path);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (oDataFieldUrl?.Path) {\n\t\t\tadditionalProperties.push(oDataFieldUrl.Path);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a personalized column key based on the provided data field.\n\t * @param {Object} oDataField - The data field object containing metadata for generating the column key.\n\t * @returns {string} The generated column key based on the data field.\n\t */\n\tprivate createP13NColumnKey(dataFieldColumn: ILineItemContext): string {\n\t\tlet columnKeyName = \"\",\n\t\t\tfioriTemplatePrefix = \"template\",\n\t\t\tseperatorNotation = \"::\";\n\t\tlet recordType = dataFieldColumn.RecordType;\n\t\tlet dataFieldValue = dataFieldColumn?.Value;\n\t\tlet dataFieldSemanticObject = dataFieldColumn.SemanticObject?.String || \"\";\n\t\tlet dataFieldActionString = dataFieldColumn.Action?.String || \"\";\n\t\tlet dataFieldPath = dataFieldValue?.Path || \"\";\n\t\tlet annotationPath: string | undefined = \"\",\n\t\t\tisRelevantAnnotation = null;\n\t\tlet buildKey = function (parts: string[]) {\n\t\t\treturn fioriTemplatePrefix + seperatorNotation + parts.join(seperatorNotation);\n\t\t};\n\n\t\tswitch (recordType) {\n\t\t\tcase FieldAnnotationsType.DataField:\n\t\t\t\tcolumnKeyName = dataFieldPath;\n\t\t\t\tbreak;\n\n\t\t\tcase FieldAnnotationsType.DataFieldWithIntentBasedNavigation:\n\t\t\t\tcolumnKeyName = buildKey([\n\t\t\t\t\tFieldTypes.DataFieldWithIntentBasedNavigation,\n\t\t\t\t\tdataFieldSemanticObject,\n\t\t\t\t\tdataFieldActionString,\n\t\t\t\t\tdataFieldPath\n\t\t\t\t]);\n\t\t\t\tbreak;\n\n\t\t\tcase FieldAnnotationsType.DataFieldWithNavigationPath:\n\t\t\t\tcolumnKeyName = buildKey([FieldTypes.DataFieldWithNavigationPath, dataFieldPath]);\n\t\t\t\tbreak;\n\n\t\t\tcase FieldAnnotationsType.DataFieldForIntentBasedNavigation:\n\t\t\t\tcolumnKeyName = buildKey([FieldTypes.DataFieldForIntentBasedNavigation, dataFieldSemanticObject, dataFieldActionString]);\n\t\t\t\tbreak;\n\n\t\t\tcase FieldAnnotationsType.DataFieldForAction:\n\t\t\t\tcolumnKeyName = buildKey([FieldTypes.DataFieldForAction, dataFieldActionString]);\n\t\t\t\tbreak;\n\n\t\t\tcase FieldAnnotationsType.DataFieldForAnnotation:\n\t\t\t\tannotationPath = dataFieldColumn.Target?.AnnotationPath;\n\n\t\t\t\tisRelevantAnnotation =\n\t\t\t\t\tannotationPath &&\n\t\t\t\t\t(annotationPath.indexOf(FieldAnnotationsType.Contact) >= 0 ||\n\t\t\t\t\t\tannotationPath.indexOf(FieldAnnotationsType.DataPoint) >= 0 ||\n\t\t\t\t\t\tannotationPath.indexOf(FieldAnnotationsType.FieldGroup) >= 0 ||\n\t\t\t\t\t\tannotationPath.indexOf(FieldAnnotationsType.Chart) >= 0);\n\t\t\t\tif (isRelevantAnnotation) {\n\t\t\t\t\tcolumnKeyName = buildKey([FieldTypes.DataFieldForAnnotation, annotationPath as string]);\n\t\t\t\t\t//since DataFieldForAnnotation can contain an @ and this is not working with SmartTable.prototype._addTablePersonalisationToToolbar, it is removed\n\t\t\t\t\tcolumnKeyName = columnKeyName.replace(\"@\", \"\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Handle cases where the RecordType does not match any of the known types\n\t\t\t\tcolumnKeyName = \"\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn columnKeyName;\n\t}\n\n\t/**\n\t * Retrieves the navigation prefix path for a given entity type and value path.\n\t *\n\t * @param {object} oMetaModel - The meta model object.\n\t * @param {object} oContextSet - The context set object containing the entity type.\n\t * @param {string} sPath - The value path for which the navigation prefix is needed.\n\t * @returns {string} The navigation prefix path.\n\t */\n\tprivate getNavigationPrefixPath(oMetaModel: ODataMetaModel, oContextSet: IEntitySet, sPath: string): string {\n\t\tlet sNavigation = \"\";\n\t\tif (oMetaModel) {\n\t\t\tlet oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType) as IEntityType;\n\t\t\tif (oEntityType) {\n\t\t\t\tsNavigation = this._getNavigationPrefix(oMetaModel, oEntityType, sPath);\n\t\t\t\tif (sNavigation) {\n\t\t\t\t\tsNavigation += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sNavigation;\n\t}\n\n\t/**\n\t * Retrieves the navigation prefix for a given property within an entity type.\n\t * @param {Object} metaModel - The metadata model object.\n\t * @param {Object} entityTypeData - The entity type object.\n\t * @param {string} propertyName - The property path for which the navigation prefix is to be determined.\n\t * @returns {string} The navigation prefix for the specified property.\n\t */\n\tprivate _getNavigationPrefix(metaModel: ODataMetaModel, entityTypeData: IEntityType, propertyName: string): string {\n\t\tlet expandName = \"\";\n\t\tlet propertyParts = propertyName.split(\"/\");\n\n\t\tif (propertyParts.length > 1) {\n\t\t\tfor (let i = 0; i < propertyParts.length - 1; i++) {\n\t\t\t\tlet associationEndData = metaModel.getODataAssociationEnd(entityTypeData, propertyParts[i]);\n\t\t\t\tif (!associationEndData) {\n\t\t\t\t\treturn expandName;\n\t\t\t\t}\n\t\t\t\tif (associationEndData) {\n\t\t\t\t\tentityTypeData = metaModel.getODataEntityType(associationEndData.type) as IEntityType;\n\t\t\t\t\texpandName += (expandName ? \"/\" : \"\") + propertyParts[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn expandName;\n\t}\n\n\t/**\n\t * Processes additional properties for a given context property and data field.\n\t *\n\t * This method analyzes the provided context property and data field to extract additional properties\n\t * such as criticality, text annotations, unit annotations, and field control paths. It also determines\n\t * the type of the property (e.g., date, string) and appends this information to the P13N string.\n\t *\n\t * @param {UIAnnotationValue} oContextProp - The context property object containing metadata about the property.\n\t * @param {ILineItemContext} oDataField - The data field object containing line item metadata.\n\t * @param {string} sNavigationPath - The navigation path to be prefixed to certain properties.\n\t * @param {string[]} aAdditionalProperties - An array to which additional property paths will be added.\n\t * @returns {string} A P13N string containing additional property details such as type and unit.\n\t * @private\n\t */\n\tprivate processAdditionalProperties(\n\t\toContextProp: UIAnnotationValue,\n\t\toDataField: ILineItemContext,\n\t\tsNavigationPath: string,\n\t\taAdditionalProperties: string[]\n\t): string {\n\t\tlet additionalP13N = \"\";\n\n\t\t// Check for DateTime type with specific display format\n\t\tif (oContextProp?.type === \"Edm.DateTime\" && oContextProp?.[\"sap:display-format\"] === \"Date\") {\n\t\t\tadditionalP13N += '\", \"type\":\"date';\n\t\t} else if (oContextProp?.type === \"Edm.String\") {\n\t\t\tadditionalP13N += '\", \"type\":\"string';\n\t\t}\n\n\t\t// Add Criticality property if available\n\t\tif (oDataField?.Criticality?.Path) {\n\t\t\taAdditionalProperties.push(oDataField?.Criticality.Path);\n\t\t}\n\t\tlet oContextCommonText = oContextProp?.[UIAnnotations.CommonText];\n\n\t\t// Add Text annotation property if available\n\t\tif (oContextCommonText?.Path) {\n\t\t\taAdditionalProperties.push(sNavigationPath + oContextCommonText?.Path);\n\t\t}\n\n\t\t// Add Unit annotation property if available\n\t\tconst oUnitAnnotation = oContextProp\n\t\t\t? oContextProp[UIAnnotations.MeasuresISOCurrency] || oContextProp[UIAnnotations.MeasuresUnit]\n\t\t\t: null;\n\t\tif (oUnitAnnotation?.Path) {\n\t\t\taAdditionalProperties.push(oUnitAnnotation.Path);\n\t\t\tadditionalP13N += '\", \"unit\":\"' + oUnitAnnotation.Path;\n\t\t}\n\t\t// Add FieldControl property if available\n\t\tif (oContextProp?.[UIAnnotations.CommonFieldControl]?.Path) {\n\t\t\taAdditionalProperties.push(sNavigationPath + oContextProp[UIAnnotations.CommonFieldControl].Path);\n\t\t}\n\n\t\treturn additionalP13N;\n\t}\n\n\t/**\n\t * Determines whether a column is supported for card creation.\n\t *\n\t * This method checks conditions to determine if a column is eligible for inclusion in a card,\n\t * conditions are kept similar to RT cards restrictions in V2 LR.\n\t *\n\t * @param {Record<string, string>} columnDataObject - The column data object containing metadata about the column.\n\t * @param {ILineItemContext} dataFieldDetails - The data field object containing line item metadata.\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and properties.\n\t * @param {IEntitySet} entitySetData - The entity set to which the column belongs.\n\t * @returns {boolean} `true` if the column is supported for card creation, otherwise `false`.\n\t * @private\n\t */\n\tprivate isSupportedColumn(\n\t\tcolumnDataObject: ColumnObjectData,\n\t\tdataFieldDetails: ILineItemContext,\n\t\tmetaModel: ODataMetaModel,\n\t\tentitySetData: IEntitySet\n\t): boolean {\n\t\tlet sRecordType = dataFieldDetails.RecordType;\n\t\tif (\n\t\t\tsRecordType === FieldAnnotationsType.DataFieldForAnnotation ||\n\t\t\tsRecordType === FieldAnnotationsType.DataFieldForAction ||\n\t\t\tsRecordType === FieldAnnotationsType.DataFieldForIntentBasedNavigation ||\n\t\t\t!columnDataObject\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tlet entityType = metaModel.getODataEntityType(entitySetData.entityType) as IEntityType;\n\t\tlet propertyDetails = metaModel.getODataProperty(entityType, columnDataObject.leadingProperty!) as UIAnnotationValue;\n\t\tlet columnKeyName = columnDataObject.columnKey;\n\n\t\tif (\n\t\t\tthis.checkMultiplicityForDataFieldAssociation(metaModel, entitySetData, dataFieldDetails) ||\n\t\t\t(columnKeyName &&\n\t\t\t\t(columnKeyName.indexOf(FieldTypes.DataFieldForAnnotation) > -1 ||\n\t\t\t\t\tcolumnKeyName.indexOf(FieldTypes.DataFieldForAction) > -1 ||\n\t\t\t\t\tcolumnKeyName.indexOf(FieldTypes.DataFieldForIntentBasedNavigation) > -1 ||\n\t\t\t\t\tpropertyDetails?.[UIAnnotations.UIIsImageURL]?.Bool === \"true\"))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks the multiplicity of a data field's association in the OData model.\n\t *\n\t * This method verifies whether the association for a given data field has a multiplicity of `*` (many).\n\t * It traverses the navigation path of the data field to determine the multiplicity of the associated entity.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing entity and association metadata.\n\t * @param {IEntitySet} entitySetData - The entity set to which the data field belongs.\n\t * @param {ILineItemContext} dataFieldValue - The data field whose association multiplicity is to be checked.\n\t * @returns {boolean} `true` if the association has a multiplicity of `*`, otherwise `false`.\n\t * @private\n\t */\n\tprivate checkMultiplicityForDataFieldAssociation(\n\t\tmetaModel: ODataMetaModel,\n\t\tentitySetData: IEntitySet,\n\t\tdataFieldValue: ILineItemContext\n\t): boolean {\n\t\tif (dataFieldValue?.Value?.Path) {\n\t\t\tlet dataFieldValuePath = dataFieldValue.Value.Path;\n\t\t\tlet entityTypeData = metaModel && (metaModel.getODataEntityType(entitySetData.entityType) as IEntityType);\n\t\t\tlet associationData: AssociationEnd | null | undefined;\n\t\t\tif (!(dataFieldValuePath.indexOf(\"/\") > -1) || !entityTypeData) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\twhile (dataFieldValuePath.indexOf(\"/\") > -1) {\n\t\t\t\t//if complex path exists then check for multiplicity\n\t\t\t\tlet navigationPropertyPath = dataFieldValuePath.split(\"/\")[0];\n\t\t\t\tdataFieldValuePath = dataFieldValuePath.split(\"/\").slice(1).join(\"/\");\n\t\t\t\tentityTypeData = (metaModel.getODataEntityType((associationData as AssociationEnd)?.type) as IEntityType) || entityTypeData;\n\t\t\t\tassociationData = metaModel.getODataAssociationEnd(entityTypeData, navigationPropertyPath) as AssociationEnd;\n\t\t\t}\n\t\t\tif (associationData && associationData.multiplicity === \"*\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}