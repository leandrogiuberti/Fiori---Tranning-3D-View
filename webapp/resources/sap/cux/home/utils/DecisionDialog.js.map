{"version":3,"file":"DecisionDialog.js","names":["sap","ui","define","Log","MessageBox","sap_m_library","BaseObject","Element","Fragment","sap_ui_core_library","JSONModel","ODataModel","ResourceModel","___DataFormatUtils","___TaskUtils","_catch","body","recover","result","e","then","ButtonType","ValueState","toTaskPriorityText","TaskPriority","ReasonRequired","decideButtonNature","decisionOption","Nature","toUpperCase","Accept","Reject","Neutral","Default","getActionButton","i18nBundle","task","baseUrl","text","DecisionText","type","pressHandler","DecisionDialog","decisionDialogMethod","bind","getIconFrameBadge","priority","iconBadge","VERY_HIGH","HIGH","getIconFrameBadgeValueState","Error","None","extend","constructor","_constructor","refreshView","BaseObject.prototype.constructor.call","this","handleReasonOptionChange","_handleReasonOptionChange","event","comboBox","getSource","comboBoxValue","getValue","selectedItem","getSelectedItem","confirmationDialogPromise","confirmationDialog","comboBoxRequired","confirmationDialogModel","getData","dialogSettings","reasonOptionsSettings","required","setTooltip","setValueState","getBeginButton","setEnabled","_toggleSubmitButtonState","catch","error","message","String","dialogData","noteRequired","noteMandatory","noteFilled","getElementById","trim","length","comboBoxFilled","noteFlag","comboBoxFlag","setProperty","readReasonOptions","_readReasonOptions","origin","instance","decisionKey","onSuccess","onError","sPath","oUrlParams","SAP__Origin","InstanceID","DecisionKey","fnSuccess","oData","results","fnError","oError","dataServiceModel","read","urlParameters","success","groupId","loadReasonOptions","_loadReasonOptions","_this","metaModel","getMetaModel","Promise","resolve","loaded","getODataFunctionImport","reject","reasonOptions","show","Required","Optional","openDecisionDialog","_openDecisionDialog","submitButtonEnabled","load","name","controller","confirmationDialogFragment","i18nModel","bundle","priorityText","addStyleClass","Priority","setModel","open","confirmActionHandler","_confirmActionHandler","getModel","getProperty","reasonOptionSelectedItem","reasonCode","getKey","note","showNote","handleCancel","_handleCancel","_bClosedViaButton","close","cancelActionHandler","refresh","handleAfterClose","_handleAfterClose","destroy","createODataRequest","_createODataRequest","path","urlParams","settings","data","response","info","getText","details","parameters","responseText","fireRequestFailed","create","sendAction","_sendAction","importName","decision","reasonOptionCode","Comments","ReasonCode","setBusy","JSON","parse","value","showDecisionDialog","_showDecisionDialog","_this2","TaskTitle","title","decisionDialogSettings","CommentMandatory","question","badgeIcon","badgeValueState","confirmButtonLabel","showFeedbackMessage","textAreaLabel","reasonOptionKey","_temp","metadataLoaded","reasonOptionsLoadedPromise","noneText","unshift","Name","Code","dialogUtils","getTaskActions","multiSelectDecisionResults","actions","displayedTypes","Set","multiSelectDecisionOptions","TaskDefinitionID","has","push","add","action"],"sources":["DecisionDialog.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport ComboBox from \"sap/m/ComboBox\";\nimport Dialog from \"sap/m/Dialog\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Text from \"sap/m/Text\";\nimport TextArea from \"sap/m/TextArea\";\nimport { ButtonType } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { Task } from \"../TaskPanel\";\nimport { Response } from \"../ToDoPanel\";\nimport { toTaskPriorityText } from \"./DataFormatUtils\";\nimport { TaskPriority } from \"./TaskUtils\";\n\nenum ReasonRequired {\n\tRequired = \"REQUIRED\",\n\tOptional = \"OPTIONAL\"\n}\n\nexport interface DecisionOption {\n\tSAP__Origin: string;\n\tInstanceID: string;\n\tNature: ButtonType;\n\tDecisionKey: string;\n\tCommentMandatory: boolean;\n\tDecisionText: string;\n\tReasonRequired: ReasonRequired;\n}\n\ninterface ReasonOption {\n\t[key: string]: string;\n}\n\ninterface ReasonOptionSettings {\n\tshow: boolean;\n\trequired: boolean;\n\treasonOptions?: ReasonOption[];\n}\n\ninterface DecisionDialogSettings {\n\tbadgeIcon: string;\n\tbadgeValueState: string;\n\tshowNote: boolean;\n\tnoteMandatory: boolean;\n\tquestion: string;\n\ttitle: string;\n\tconfirmButtonLabel: string;\n\ttextAreaLabel: string;\n\tpriorityText: string;\n\tshowFeedbackMessage: boolean;\n\treasonOptionsSettings: ReasonOptionSettings;\n\tconfirmActionHandler: (note: string, reasonCode: string) => void;\n\tcancelActionHandler: () => void;\n}\n\ninterface IDecisionDialog extends Dialog {\n\t_bClosedViaButton: boolean;\n}\n\ninterface DialogSettings {\n\tdialogSettings: DecisionDialogSettings;\n\tsubmitButtonEnabled: boolean;\n}\n\ninterface ODataError {\n\tresponse: {\n\t\tbody: string;\n\t};\n\tresponseText: string;\n\terror: {\n\t\tmessage: {\n\t\t\tvalue: string;\n\t\t};\n\t};\n}\n\ninterface MultiSelectDecisionResult {\n\t[key: string]: DecisionOption[];\n}\n\nexport interface ActionButton {\n\ttype: ButtonType;\n\ttext: string;\n\tpressHandler: (refresh: Refresh) => Promise<void> | void;\n}\n\ninterface Refresh {\n\t(forceRefresh: boolean): void;\n}\n\nconst decideButtonNature = (decisionOption: DecisionOption): ButtonType => {\n\tswitch (decisionOption.Nature?.toUpperCase()) {\n\t\tcase \"POSITIVE\":\n\t\t\treturn ButtonType.Accept;\n\t\tcase \"NEGATIVE\":\n\t\t\treturn ButtonType.Reject;\n\t\tcase \"NEUTRAL\":\n\t\t\treturn ButtonType.Neutral;\n\t\tdefault:\n\t\t\treturn ButtonType.Default;\n\t}\n};\n\nconst getActionButton = (decisionOption: DecisionOption, i18nBundle: ResourceBundle, task: Task, baseUrl: string): ActionButton => {\n\treturn {\n\t\ttext: decisionOption.DecisionText,\n\t\ttype: decideButtonNature(decisionOption) || ButtonType.Default,\n\t\tpressHandler: DecisionDialog.decisionDialogMethod.bind(null, decisionOption, i18nBundle, task, baseUrl)\n\t};\n};\n\n/**\n * Gets the icon frame badge based on the task priority.\n *\n * This method returns a specific badge string for tasks with high or very high priority.\n * For tasks with lower priorities, it returns an empty string.\n *\n * @param {TaskPriority} priority - The priority level of the task.\n * @returns {string} The badge string for high priority tasks, or an empty string for others.\n */\nexport function getIconFrameBadge(priority: TaskPriority): string {\n\tlet iconBadge = \"\";\n\tif (priority === TaskPriority.VERY_HIGH || priority === TaskPriority.HIGH) {\n\t\ticonBadge = \"sap-icon://high-priority\";\n\t}\n\n\treturn iconBadge;\n}\n\n/**\n * Converts a priority string to a Priority enum value.\n * If the priority string is not recognized, it returns the default value \"None\".\n *\n * @param {TaskPriority} priority - The priority string to convert.\n * @returns {ValueState} The corresponding Priority enum value.\n */\nexport function getIconFrameBadgeValueState(priority: TaskPriority): ValueState {\n\treturn priority === TaskPriority.VERY_HIGH || priority === TaskPriority.HIGH ? ValueState.Error : ValueState.None;\n}\n\n/**\n *\n * Helper class for Decision Dialog handling.\n *\n * @extends BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n * @private\n *\n * @alias sap.cux.home.utils.DecisionDialog\n */\nexport default class DecisionDialog extends BaseObject {\n\tprivate decisionOption: DecisionOption;\n\tprivate i18nBundle: ResourceBundle;\n\tprivate refreshView: Refresh;\n\tprivate task: Task;\n\tprivate confirmationDialogPromise!: Promise<IDecisionDialog>;\n\tprivate confirmationDialogModel!: JSONModel;\n\tprivate dataServiceModel!: ODataModel;\n\tprivate baseUrl: string;\n\n\tconstructor(decisionOption: DecisionOption, i18nBundle: ResourceBundle, task: Task, baseUrl: string, refreshView: Refresh) {\n\t\tsuper();\n\t\tthis.decisionOption = decisionOption;\n\t\tthis.i18nBundle = i18nBundle;\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.refreshView = refreshView;\n\t\tthis.task = task;\n\t}\n\n\t/**\n\t * Handles the change event of the reason option ComboBox.\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t * @returns {void}\n\t */\n\tpublic handleReasonOptionChange(event: Event): void {\n\t\tconst comboBox = event.getSource<ComboBox>();\n\t\tconst comboBoxValue = comboBox.getValue();\n\t\tconst selectedItem = comboBox.getSelectedItem();\n\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tconst comboBoxRequired = (this.confirmationDialogModel.getData() as DialogSettings).dialogSettings.reasonOptionsSettings\n\t\t\t\t\t.required;\n\t\t\t\t// Set the tooltip useful when the currently selected item's text is truncated\n\t\t\t\tcomboBox.setTooltip(comboBoxValue);\n\t\t\t\tcomboBox.setValueState(selectedItem === null ? ValueState.Error : ValueState.None);\n\n\t\t\t\t// Special case where if reason options is optional and all\n\t\t\t\t// the text is deleted value state should be none (corner case)\n\t\t\t\tif (!comboBoxRequired && comboBoxValue === \"\") {\n\t\t\t\t\tcomboBox.setValueState(ValueState.None);\n\t\t\t\t}\n\n\t\t\t\t// Special case where if value in combo box gets partially deleted by the user\n\t\t\t\t// there is no selection yet button is not disabled\n\t\t\t\tif (!comboBoxRequired && comboBoxValue !== \"\" && selectedItem === null) {\n\t\t\t\t\tconfirmationDialog.getBeginButton().setEnabled(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Update the submit button state (disabled / enabled)\n\t\t\t\tthis._toggleSubmitButtonState();\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * Toggles the state of the submit button based on the dialog settings.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tpublic _toggleSubmitButtonState(): void {\n\t\tconst dialogData = this.confirmationDialogModel.getData() as DialogSettings;\n\t\tconst noteRequired = dialogData.dialogSettings.noteMandatory;\n\n\t\tconst noteFilled = (Element.getElementById(\"confirmDialogTextarea\") as TextArea).getValue().trim().length > 0;\n\t\tconst comboBoxRequired = dialogData.dialogSettings.reasonOptionsSettings.required;\n\n\t\tconst comboBoxFilled = (Element.getElementById(\"reasonOptionsSelect\") as ComboBox).getSelectedItem() !== null;\n\t\tconst noteFlag = (noteRequired && noteFilled) || !noteRequired;\n\t\tconst comboBoxFlag = (comboBoxRequired && comboBoxFilled) || !comboBoxRequired;\n\n\t\tthis.confirmationDialogModel.setProperty(\"/submitButtonEnabled\", noteFlag && comboBoxFlag);\n\t}\n\n\t/**\n\t * Reads reason options from the backend.\n\t *\n\t * @private\n\t * @param {string} origin - The SAP origin.\n\t * @param {string} instance - The instance ID.\n\t * @param {string} decisionKey - The decision key.\n\t * @param {Function} onSuccess - The success callback function.\n\t * @param {Function} onError - The error callback function.\n\t * @returns {void}\n\t */\n\tprivate readReasonOptions(\n\t\torigin: string,\n\t\tinstance: string,\n\t\tdecisionKey: string,\n\t\tonSuccess: (arg: ReasonOption[]) => void,\n\t\tonError: (arg: unknown) => void\n\t): void {\n\t\tconst sPath = \"/ReasonOptions\";\n\t\tconst oUrlParams = {\n\t\t\tSAP__Origin: `'${origin}'`,\n\t\t\tInstanceID: `'${instance}'`,\n\t\t\tDecisionKey: `'${decisionKey}'`\n\t\t};\n\t\tconst fnSuccess = (oData: Response) => {\n\t\t\tif (oData && oData.results) {\n\t\t\t\tif (onSuccess) {\n\t\t\t\t\tonSuccess(oData.results as ReasonOption[]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst fnError = (oError: unknown) => {\n\t\t\tif (onError) {\n\t\t\t\tonError(oError);\n\t\t\t}\n\t\t};\n\n\t\tthis.dataServiceModel.read(sPath, {\n\t\t\turlParameters: oUrlParams,\n\t\t\tsuccess: fnSuccess,\n\t\t\terror: fnError,\n\t\t\tgroupId: \"reasonOptions\"\n\t\t});\n\t}\n\n\t/**\n\t * Load the reason options which are part of this decision option.\n\t *\n\t * @private\n\t * @returns {Promise<ReasonOptionSettings | null>} - containing resolved array of reason options\n\t */\n\tprivate async loadReasonOptions(): Promise<ReasonOptionSettings | null> {\n\t\tconst metaModel = this.dataServiceModel.getMetaModel();\n\t\tawait metaModel.loaded();\n\n\t\tif (metaModel.getODataFunctionImport(\"ReasonOptions\")) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.readReasonOptions(\n\t\t\t\t\tthis.decisionOption.SAP__Origin,\n\t\t\t\t\tthis.decisionOption.InstanceID,\n\t\t\t\t\tthis.decisionOption.DecisionKey,\n\t\t\t\t\t(reasonOptions: ReasonOption[]) => {\n\t\t\t\t\t\tconst reasonOptionsSettings = {\n\t\t\t\t\t\t\tshow:\n\t\t\t\t\t\t\t\t(this.decisionOption.ReasonRequired === ReasonRequired.Required ||\n\t\t\t\t\t\t\t\t\tthis.decisionOption.ReasonRequired === ReasonRequired.Optional) &&\n\t\t\t\t\t\t\t\treasonOptions.length > 0,\n\t\t\t\t\t\t\trequired: this.decisionOption.ReasonRequired === ReasonRequired.Required,\n\t\t\t\t\t\t\treasonOptions: reasonOptions\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresolve(reasonOptionsSettings);\n\t\t\t\t\t},\n\t\t\t\t\t(oError) => {\n\t\t\t\t\t\treject(oError as Error);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Open the decision dialog for the inbox task selected.\n\t *\n\t * @private\n\t * @param {DecisionDialogSettings} dialogSettings - contains the settings for the decision dialog\n\t */\n\tprivate openDecisionDialog(dialogSettings: DecisionDialogSettings) {\n\t\tthis.confirmationDialogModel = new JSONModel({\n\t\t\tsubmitButtonEnabled: !dialogSettings?.noteMandatory && !dialogSettings?.reasonOptionsSettings?.required,\n\t\t\tdialogSettings\n\t\t});\n\n\t\tthis.confirmationDialogPromise = Fragment.load({\n\t\t\ttype: \"XML\",\n\t\t\tname: \"sap.cux.home.utils.fragment.showDecisionDialog\",\n\t\t\tcontroller: this\n\t\t})\n\t\t\t.then((confirmationDialogFragment: Control | Control[]) => {\n\t\t\t\tconst confirmationDialog = confirmationDialogFragment as IDecisionDialog;\n\t\t\t\tconst i18nModel = new ResourceModel({ bundle: this.i18nBundle });\n\t\t\t\tconst priorityText = Element.getElementById(\"task-priority-text\") as Text;\n\t\t\t\tpriorityText.addStyleClass(this.task.Priority);\n\n\t\t\t\tconfirmationDialog.setModel(this.confirmationDialogModel);\n\t\t\t\tconfirmationDialog.setModel(i18nModel, \"i18n\");\n\t\t\t\tconfirmationDialog.open();\n\t\t\t\treturn confirmationDialog;\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t}) as Promise<IDecisionDialog>;\n\t}\n\n\t/**\n\t * Submit handler for the decision dialog\n\t *\n\t * @private\n\t */\n\tpublic confirmActionHandler(): void {\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tconst dialogSettings = (confirmationDialog.getModel()?.getProperty(\"/\") as DialogSettings).dialogSettings;\n\t\t\t\tconst reasonOptionsSettings = dialogSettings.reasonOptionsSettings;\n\n\t\t\t\t// Get the reason option value from the combo box\n\t\t\t\tconst reasonOptionSelectedItem = reasonOptionsSettings.show\n\t\t\t\t\t? (Element.getElementById(\"reasonOptionsSelect\") as ComboBox)?.getSelectedItem()\n\t\t\t\t\t: null;\n\t\t\t\tconst reasonCode = (\n\t\t\t\t\treasonOptionSelectedItem !== null && reasonOptionSelectedItem?.getKey() !== \"defaultSelectedKey\"\n\t\t\t\t\t\t? reasonOptionSelectedItem.getKey()\n\t\t\t\t\t\t: null\n\t\t\t\t) as string;\n\n\t\t\t\t// Get the note value from the text area\n\t\t\t\tconst note = (\n\t\t\t\t\tdialogSettings.showNote ? (Element.getElementById(\"confirmDialogTextarea\") as TextArea)?.getValue() : null\n\t\t\t\t) as string;\n\t\t\t\tdialogSettings.confirmActionHandler(note, reasonCode);\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * Handler for cancel action in the decision dialog\n\t *\n\t * @private\n\t */\n\tpublic handleCancel() {\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tconst dialogSettings = (confirmationDialog.getModel()?.getProperty(\"/\") as DialogSettings).dialogSettings;\n\t\t\t\tconfirmationDialog._bClosedViaButton = true;\n\t\t\t\tconfirmationDialog.close();\n\t\t\t\tdialogSettings.cancelActionHandler();\n\n\t\t\t\tif (this.confirmationDialogModel.getProperty(\"/dialogSettings/showFeedbackMessage\")) {\n\t\t\t\t\tthis.dataServiceModel.refresh();\n\t\t\t\t\tthis.refreshView(true);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * After close dialog handler in the decision dialog\n\t *\n\t * @private\n\t */\n\tpublic handleAfterClose() {\n\t\tthis.confirmationDialogPromise\n\t\t\t.then((confirmationDialog) => {\n\t\t\t\tif (confirmationDialog._bClosedViaButton) {\n\t\t\t\t\t// dialog is closed via button\n\t\t\t\t\tconfirmationDialog._bClosedViaButton = false;\n\t\t\t\t} else {\n\t\t\t\t\t// dialog is closed by other means (e.g. pressing Escape)\n\t\t\t\t\tconst dialogSettings = (confirmationDialog.getModel()?.getProperty(\"/\") as DialogSettings).dialogSettings;\n\t\t\t\t\tdialogSettings.cancelActionHandler();\n\t\t\t\t}\n\t\t\t\tconfirmationDialog.destroy();\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\t}\n\n\t/**\n\t * Creates an OData request with the specified parameters.\n\t *\n\t * @private\n\t * @param {string} path - The path of the OData request.\n\t * @param {Record<string, string>} urlParams - The URL parameters of the request.\n\t * @param {Function} fnSuccess - The success callback function.\n\t * @param {Function} fnError - The error callback function.\n\t * @returns {void}\n\t */\n\tprivate createODataRequest(\n\t\tpath: string,\n\t\turlParams: Record<string, string>,\n\t\tfnSuccess: (data: unknown, response: unknown) => void,\n\t\tfnError: (error: ODataError) => void\n\t): void {\n\t\tconst settings = {\n\t\t\tsuccess: (data: unknown, response: unknown) => {\n\t\t\t\tLog.info(\"successful action\");\n\t\t\t\tfnSuccess?.(data, response);\n\t\t\t},\n\t\t\terror: (error: ODataError) => {\n\t\t\t\tconst message = this.i18nBundle.getText(\"DataManager.HTTPRequestFailed\");\n\t\t\t\tconst details = error.response ? error.response.body : null;\n\t\t\t\tconst parameters = {\n\t\t\t\t\tmessage: message,\n\t\t\t\t\tresponseText: details as string\n\t\t\t\t};\n\t\t\t\tthis.dataServiceModel.fireRequestFailed(parameters);\n\t\t\t\tfnError(error);\n\t\t\t},\n\t\t\turlParameters: urlParams\n\t\t};\n\n\t\tthis.dataServiceModel.create(path, {}, settings);\n\t}\n\n\t/**\n\t * Sends an action to the backend.\n\t *\n\t * @private\n\t * @param {string} importName - The name of the function import or action.\n\t * @param {DecisionOption} decision - The decision option.\n\t * @param {string} note - The note to be included with the action.\n\t * @param {string} reasonOptionCode - The reason option code.\n\t * @param {Task} task - The task associated with the action.\n\t * @returns {void}\n\t */\n\tprivate sendAction(importName: string, decision: DecisionOption, note: string, reasonOptionCode: string, task: Task): void {\n\t\tconst urlParams: Record<string, string> = {\n\t\t\tSAP__Origin: `'${task.SAP__Origin}'`,\n\t\t\tInstanceID: `'${task.InstanceID}'`\n\t\t};\n\n\t\tif (decision.DecisionKey) {\n\t\t\turlParams.DecisionKey = `'${decision.DecisionKey}'`;\n\t\t}\n\n\t\tif (note?.length > 0) {\n\t\t\turlParams.Comments = `'${note}'`;\n\t\t}\n\n\t\tif (reasonOptionCode) {\n\t\t\turlParams.ReasonCode = `'${reasonOptionCode}'`;\n\t\t}\n\n\t\tconst onSuccess = () => {\n\t\t\tthis.confirmationDialogPromise\n\t\t\t\t.then((confirmationDialog) => {\n\t\t\t\t\tconfirmationDialog.setBusy(false);\n\t\t\t\t\tthis.confirmationDialogModel.setProperty(\"/dialogSettings/showFeedbackMessage\", true);\n\t\t\t\t})\n\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t\t});\n\t\t};\n\n\t\tconst onError = (error: ODataError) => {\n\t\t\tif (error.responseText) {\n\t\t\t\tconst oError = JSON.parse(error.responseText) as ODataError;\n\t\t\t\tMessageBox.error(oError?.error?.message?.value);\n\t\t\t}\n\t\t\tthis.handleCancel();\n\t\t};\n\n\t\tthis.createODataRequest(`/${importName}`, urlParams, onSuccess, onError);\n\t}\n\n\t/**\n\t * Shows the decision dialog.\n\t *\n\t * @private\n\t * @returns {Promise<void>}\n\t */\n\tprivate async showDecisionDialog(): Promise<void> {\n\t\tthis.dataServiceModel = this.dataServiceModel || new ODataModel(this.baseUrl);\n\t\tconst { TaskTitle: title, Priority } = this.task;\n\t\tconst decisionDialogSettings: DecisionDialogSettings = {\n\t\t\tnoteMandatory: this.decisionOption.CommentMandatory,\n\t\t\tquestion: this.i18nBundle.getText(\"XMSG_DECISION_QUESTION\", [this.decisionOption.DecisionText]) as string,\n\t\t\ttitle,\n\t\t\tbadgeIcon: getIconFrameBadge(Priority),\n\t\t\tbadgeValueState: getIconFrameBadgeValueState(Priority),\n\t\t\tpriorityText: this.i18nBundle.getText(toTaskPriorityText(Priority)) as string,\n\t\t\tconfirmButtonLabel: this.i18nBundle.getText(\"XBUT_SUBMIT\") as string,\n\t\t\tshowNote: true,\n\t\t\tshowFeedbackMessage: false,\n\t\t\treasonOptionsSettings: {\n\t\t\t\tshow: false,\n\t\t\t\trequired: false\n\t\t\t},\n\t\t\ttextAreaLabel: this.i18nBundle.getText(\"XFLD_TextArea_Decision\") as string,\n\t\t\tconfirmActionHandler: (note, reasonOptionKey) => {\n\t\t\t\tthis.sendAction(\"Decision\", this.decisionOption, note, reasonOptionKey, this.task);\n\t\t\t},\n\t\t\tcancelActionHandler: () => {}\n\t\t};\n\n\t\ttry {\n\t\t\tawait this.dataServiceModel.metadataLoaded();\n\t\t\tconst reasonOptionsLoadedPromise =\n\t\t\t\tthis.decisionOption?.ReasonRequired === ReasonRequired.Required ||\n\t\t\t\tthis.decisionOption?.ReasonRequired === ReasonRequired.Optional\n\t\t\t\t\t? this.loadReasonOptions()\n\t\t\t\t\t: null;\n\n\t\t\t// reason options won't be loaded\n\t\t\tif (!reasonOptionsLoadedPromise) {\n\t\t\t\tthis.openDecisionDialog(decisionDialogSettings);\n\t\t\t} else {\n\t\t\t\t// based on reasonOptionsLoadedPromise, reason options will be loaded\n\t\t\t\treasonOptionsLoadedPromise\n\t\t\t\t\t.then((reasonOptionsSettings: ReasonOptionSettings | null) => {\n\t\t\t\t\t\tif (reasonOptionsSettings !== null) {\n\t\t\t\t\t\t\tdecisionDialogSettings.reasonOptionsSettings = reasonOptionsSettings;\n\n\t\t\t\t\t\t\t// In case of optional reason option combo box, a (None) option is created as to have a default selection\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdecisionDialogSettings.reasonOptionsSettings?.reasonOptions &&\n\t\t\t\t\t\t\t\t!decisionDialogSettings.reasonOptionsSettings?.required\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst noneText = `(${this.i18nBundle.getText(\"XSEL_DECISION_REASON_NONE_OPTION\")})`;\n\t\t\t\t\t\t\t\tdecisionDialogSettings.reasonOptionsSettings.reasonOptions.unshift({\n\t\t\t\t\t\t\t\t\tName: noneText,\n\t\t\t\t\t\t\t\t\tCode: \"defaultSelectedKey\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.openDecisionDialog(decisionDialogSettings);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tLog.error(\"Could not load the reason options properly\");\n\t\t\t\t\t});\n\t\t\t}\n\t\t} catch {\n\t\t\tLog.error(\"Could not load metadata model for inbox\");\n\t\t}\n\t}\n\n\t/**\n\t * Initiates the decisionDialog\n\t *\n\t * @static\n\t * @param {DecisionOption} decisionOption - Decision Option\n\t * @param {ResourceModel} i18nBundle - The resource bundle for internationalization.\n\t * @param {Task} task - Task Instance\n\t * @param {Refresh} refresh - Refresh function\n\t */\n\tstatic decisionDialogMethod(decisionOption: DecisionOption, i18nBundle: ResourceBundle, task: Task, baseUrl: string, refresh: Refresh) {\n\t\tconst dialogUtils = new DecisionDialog(decisionOption, i18nBundle, task, baseUrl, refresh);\n\t\treturn dialogUtils.showDecisionDialog();\n\t}\n\n\t/**\n\t * Retrieves task actions based on the task and multi-select decision results.\n\t *\n\t * @static\n\t * @param {Task} task - The task for which actions are retrieved.\n\t * @param {string} baseUrl - The base URL.\n\t * @param {MultiSelectDecisionResult} multiSelectDecisionResults - The multi-select decision results.\n\t * @param {ResourceBundle} i18nBundle - The resource bundle for internationalization.\n\t * @returns {ActionButton[]} An array of action buttons.\n\t */\n\tstatic getTaskActions(\n\t\ttask: Task,\n\t\tbaseUrl: string,\n\t\tmultiSelectDecisionResults: MultiSelectDecisionResult,\n\t\ti18nBundle: ResourceBundle\n\t): ActionButton[] {\n\t\tconst actions: ActionButton[] = [];\n\t\tconst displayedTypes = new Set<string>();\n\t\tconst multiSelectDecisionOptions = multiSelectDecisionResults[task.SAP__Origin + task.TaskDefinitionID];\n\n\t\tif (multiSelectDecisionOptions) {\n\t\t\tfor (const decisionOption of multiSelectDecisionOptions) {\n\t\t\t\tif (!displayedTypes.has(decisionOption.Nature) || !decisionOption.Nature) {\n\t\t\t\t\tactions.push(getActionButton(decisionOption, i18nBundle, task, baseUrl));\n\t\t\t\t\tdisplayedTypes.add(decisionOption.Nature);\n\t\t\t\t} else {\n\t\t\t\t\tconst action = getActionButton(decisionOption, i18nBundle, task, baseUrl);\n\t\t\t\t\taction.type = ButtonType.Default;\n\t\t\t\t\tactions.push(action);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn actions;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}