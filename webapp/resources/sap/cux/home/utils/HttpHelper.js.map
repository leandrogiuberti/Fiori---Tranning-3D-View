{"version":3,"file":"HttpHelper.js","names":["sap","ui","define","Log","BaseObject","___Constants","_catch","body","recover","result","e","then","REPO_BASE_URL","HttpHelper","constructor","super","fetchCSRFToken","fetch","method","headers","response","token","get","ok","Error","catch","error","message","Post","url","payload","csrfToken","JSON","stringify","json","GetJSON","GetMultipleRequests","urls","Promise","resolve","all","map","includes","_response$json","text","reject"],"sources":["HttpHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport { REPO_BASE_URL } from \"./Constants\";\n\n/**\n *\n * @class Provides the HttpHelper Class used for Get and Post Calls.\n *\n * @extends sap.ui.BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n * @private\n *\n * @alias sap.cux.home.utils.HttpHelper\n */\n\nexport default class HttpHelper extends BaseObject {\n\tprivate constructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Fetches the CSRF Token\n\t * @returns {Promise<string | void>} Promise that resolves with the CSRF Token\n\t */\n\tprivate static fetchCSRFToken(): Promise<string | void> {\n\t\treturn fetch(REPO_BASE_URL, {\n\t\t\tmethod: \"HEAD\",\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t}\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconst token = response.headers.get(\"X-CSRF-Token\");\n\t\t\t\tif (response.ok && token) {\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"Cannot fetch X-CSRF-Token.\");\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tLog.error(error.message);\n\t\t\t});\n\t}\n\n\t/**\n\t * Post Method\n\t * @param {string} url - The URL to post to\n\t * @param {object} payload - The payload to post\n\t * @returns {Promise<unknown>} Promise that resolves with the response\n\t */\n\tpublic static Post(url: string, payload: object): Promise<unknown> {\n\t\treturn HttpHelper.fetchCSRFToken()\n\t\t\t.then((csrfToken) => {\n\t\t\t\treturn fetch(url, {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"X-CSRF-Token\": csrfToken as string,\n\t\t\t\t\t\t\"content-type\": \"application/json\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(payload)\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tLog.error(error.message);\n\t\t\t});\n\t}\n\n\t/**\n\t * Get Method for JSON Data\n\t * @param {string} url - The URL to get from\n\t * @returns {Promise<unknown>} Promise that resolves with the JSON data response\n\t */\n\tpublic static GetJSON(url: string): Promise<unknown> {\n\t\treturn fetch(url)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tLog.error(error.message);\n\t\t\t});\n\t}\n\t/**\n\t * Get Method for Multiple Requests\n\t *\n\t * @param {string[]} urls - An array of URLs to get from\n\t * @returns {Promise<(string | object)[]>} Promise that resolves with the responses from the URLs\n\t */\n\tpublic static async GetMultipleRequests(urls: string[] = []): Promise<(string | object)[]> {\n\t\ttry {\n\t\t\tconst results = await Promise.all(\n\t\t\t\turls.map(async (url) => {\n\t\t\t\t\tconst response = await fetch(url);\n\t\t\t\t\tif (response.headers.get(\"Content-Type\")?.includes(\"application/json\")) {\n\t\t\t\t\t\treturn (await response.json()) as object;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await response.text();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn results;\n\t\t} catch (error: unknown) {\n\t\t\tLog.error((error as Error)?.message);\n\t\t\treturn [];\n\t\t}\n\t}\n}\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,6DAAAC,EAAAC,EAAAC,GAAA,aAkjBO,SAAAC,EAAgBC,EAAMC,GAC5B,IACC,IAAIC,EAASF,GACd,CAAE,MAAMG,GACP,OAAOF,EAAQE,EAChB,CACA,GAAID,GAAUA,EAAOE,KAAM,CAC1B,OAAOF,EAAOE,UAAU,EAAGH,EAC5B,CACA,OAAOC,CACR,CAAC,MAtjBQG,EAAaP,EAAA,iBAgBP,MAAMQ,UAAmBT,EAC/BU,cACPC,OACD,CAMA,qBAAeC,GACd,OAAOC,MAAML,EAAe,CAC3BM,OAAQ,OACRC,QAAS,CACR,eAAgB,WAGhBR,KAAMS,IACN,MAAMC,EAAQD,EAASD,QAAQG,IAAI,gBACnC,GAAIF,EAASG,IAAMF,EAAO,CACzB,OAAOA,CACR,CACA,MAAM,IAAIG,MAAM,gCAEhBC,MAAOC,IACPvB,EAAIuB,MAAMA,EAAMC,UAEnB,CAQA,WAAcC,CAAKC,EAAaC,GAC/B,OAAOjB,EAAWG,iBAChBL,KAAMoB,GACCd,MAAMY,EAAK,CACjBX,OAAQ,OACRC,QAAS,CACR,eAAgBY,EAChB,eAAgB,oBAEjBxB,KAAMyB,KAAKC,UAAUH,MAGtBnB,KAAMS,GACCA,EAASc,QAEhBT,MAAOC,IACPvB,EAAIuB,MAAMA,EAAMC,UAEnB,CAOA,cAAcQ,CAAQN,GACrB,OAAOZ,MAAMY,GACXlB,KAAMS,GACCA,EAASc,QAEhBT,MAAOC,IACPvB,EAAIuB,MAAMA,EAAMC,UAEnB,CACA,0BAMoBS,CAAoBC,EAAiB,IAAE,IAAgC,OAAAC,QAAAC,QAAAjC,EAAA,WACtF,OAAAgC,QAAAC,QACmBD,QAAQE,IAC7BH,EAAKI,IAAG,SAAQZ,GAAG,IAAK,OAAAS,QAAAC,QACAtB,MAAMY,IAAIlB,KAAA,SAA3BS,GAAQ,GACVA,EAASD,QAAQG,IAAI,iBAAiBoB,SAAS,oBAAmB,QAAAJ,QAAAC,QACvDnB,EAASc,QAAMvB,KAAA,SAAAgC,GAA7B,OAAAA,CAAyC,eAAAL,QAAAC,QAE5BnB,EAASwB,OAAM,GAE9B,CAAC,MAAAlC,GAAA,OAAA4B,QAAAO,OAAAnC,EAAA,KAIH,EAAC,SAAQgB,GACRvB,EAAIuB,MAAOA,GAAiBC,SAC5B,MAAO,EACR,GACD,CAAC,MAAAjB,GAAA,OAAA4B,QAAAO,OAAAnC,EAAA,GACD,OAAAG,CAAA","ignoreList":[]}