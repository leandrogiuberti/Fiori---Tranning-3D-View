{"version":3,"file":"BaseLayout.js","names":["sap","ui","define","Log","deepEqual","sap_m_library","Page","UI5Element","Lib","HashChanger","S4MyHome","__BaseLayoutRenderer","__BasePanel","___library","___utils_Device","_interopRequireDefault","obj","__esModule","default","PageBackgroundDesign","BaseLayoutRenderer","BasePanel","OrientationType","DeviceType","calculateDeviceType","BaseLayout","extend","renderer","metadata","library","properties","enableSettings","type","group","visibility","enableFullScreen","expanded","defaultValue","settingsDialogPersisted","contentAdditionDialogPersisted","showHeader","showFooter","busy","backgroundDesign","Transparent","persContainerId","defaultAggregation","aggregations","items","singularName","multiple","settingsDialog","keyUserSettingsDialog","contentAdditionDialog","fullScreenContainer","events","onCollapse","constructor","_constructor","id","settings","Page.prototype.constructor.call","this","init","_init","Page.prototype.init.call","_settingsPanels","_elementConfigs","Map","_i18nBundle","getResourceBundleFor","_slideDurationInSeconds","_fullScreenContainer","getId","setAggregation","onBeforeRendering","_onBeforeRendering","event","Page.prototype.onBeforeRendering.call","_toggleHeaderVisibility","_attachRouteMatched","attachRouteMatched","openPersistedDialogs","bind","getProperty","document","body","style","setProperty","_openPersistedDialogs","getParameter","selectedKey","getAggregation","openSettingsDialog","openContentAdditionDialog","customHeader","getCustomHeader","getVisible","getHeaderContent","length","onAfterRendering","_onAfterRendering","_layoutLoaded","setTimeout","_hashChanger","_loadFullScreenFromHash","getHash","appIntent","split","window","addEventListener","currentHash","location","hash","substring","includes","getContent","_getContent","getItems","_getURLParams","queryString","indexOf","URLSearchParams","hashChanged","URLParams","expandedElementName","get","expandedElement","isTargetContainerVisible","targetContainer","isPhone","Mobile","_currentExpandedElement","fullScreenName","_toggleFullScreenForElement","has","getElementById","classList","add","updatedHash","_removeURLParam","replaceHash","toggleFullScreen","sourceElements","values","next","value","_openSettingsDialog","context","open","_openContentAdditionDialog","setSettingsDialog","_setSettingsDialog","settingsPanels","getPanels","forEach","settingsPanel","_addSettingsPanel","override","push","_getSettingsPanels","_extractElementConfig","element","sourceElement","isPanelElement","getParent","isPanelInSideBySideLayout","SideBySide","Set","index","indexOfItem","key","getKey","registerFullScreenElement","_registerFullScreenElement","elementConfig","set","deregisterFullScreenElement","_deregisterFullScreenElement","delete","updateFullScreenElement","_updateFullScreenElement","updatedConfig","newConfiguration","_addURLParam","toString","_toggleFullScreen","allowToggle","_checkToggleRequirements","panelIndex","indexOfAggregation","isContainerInSideBySideLayout","_detachResizeHandler","_placeClonedElement","toggle","_toggleFullScreenButtonText","_previousExpandedElement","isTargetContainerDifferent","_adjustPreviousExpandedElementIfRequired","_modifyContainer","setHash","_focusFullScreenButton","fireEvent","_domSnapshot","remove","insertItem","_toggleInnerPanelVisibility","_resetScrollPosition","_attachResizeHandler","warning","_getFullScreenContainer","removeAllContent","_sourceElementClone","addContent","currentFullScreenName","firstSourceElement","_scrollPosition","getAssociation","focus","sectionRef","_getSectionRef","undefined","scrollTop","indexOfVisiblePanel","panel","setVisible","control","isPanel","parentContainer","updateText","fullScreenButton","_getFullScreenButton","getText","fullScreenMenuItem","_getFullScreenMenuItem","_updateContainerHeader","sectionIndex","getDomRef","childNodes","targetElement","cloneNode","isSideBySideLayout","_getInnerControl","sourceElementDomRef","targetDomRef","innerHTML","append","_getCurrentExpandedElementName","_getCurrentExpandedElement","isExpandInHash"],"sources":["BaseLayout.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport { Event } from \"jquery\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport Bar from \"sap/m/Bar\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport { PageBackgroundDesign } from \"sap/m/library\";\nimport Page from \"sap/m/Page\";\nimport UI5Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport UI5Element, { MetadataOptions } from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport BaseContainer from \"./BaseContainer\";\nimport { $BaseLayoutSettings } from \"./BaseLayout\";\nimport BaseLayoutRenderer from \"./BaseLayoutRenderer\";\nimport BasePanel from \"./BasePanel\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\nimport ContentAdditionDialog from \"./ContentAdditionDialog\";\nimport { OrientationType } from \"./library\";\nimport MenuItem from \"./MenuItem\";\nimport { DeviceType, calculateDeviceType } from \"./utils/Device\";\n\ninterface FullScreenElementConfig {\n\tkey?: string;\n\tindex: number;\n\tfullScreenName?: string;\n\tsourceElements: Set<BaseContainer | BasePanel>;\n\ttargetContainer: BaseContainer;\n}\n\n/**\n *\n * Abstract base class for My Home layout.\n *\n * @extends Page\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.BaseLayout\n */\nexport default abstract class BaseLayout extends Page {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _settingsPanels!: BaseSettingsPanel[];\n\tprivate _domSnapshot!: Node;\n\tprivate _sourceElementClone!: Node | Element;\n\tprivate _scrollPosition!: number;\n\tprivate _fullScreenContainer!: Page;\n\tprivate _slideDurationInSeconds!: number;\n\tprivate _layoutLoaded!: boolean;\n\tprivate _hashChanger!: HashChanger;\n\tprivate _currentExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _previousExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _elementConfigs!: Map<string, FullScreenElementConfig>;\n\tprivate _attachRouteMatched!: boolean;\n\n\tconstructor(id?: string | $BaseLayoutSettings);\n\tconstructor(id?: string, settings?: $BaseLayoutSettings);\n\t/**\n\t * Constructor for a new Base Layout.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseLayoutSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the layout is expanded.\n\t\t\t */\n\t\t\texpanded: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the settings dialog state is persisted for this control.\n\t\t\t */\n\t\t\tsettingsDialogPersisted: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the content addition dialog state is persisted for this control.\n\t\t\t */\n\t\t\tcontentAdditionDialogPersisted: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout shall have a header.\n\t\t\t */\n\t\t\tshowHeader: { type: \"boolean\", group: \"Appearance\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether this layout shall have a footer.\n\t\t\t */\n\t\t\tshowFooter: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * This property is used to set the background color of a page.\n\t\t\t */\n\t\t\tbackgroundDesign: {\n\t\t\t\ttype: \"sap.m.PageBackgroundDesign\",\n\t\t\t\tgroup: \"Appearance\",\n\t\t\t\tdefaultValue: PageBackgroundDesign.Transparent,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * Container ID for Ushell Personalisation.\n\t\t\t * This property holds the ID of the personalization container.\n\t\t\t * It is used to store and retrieve personalized settings for the control.\n\t\t\t *\n\t\t\t * @type {string}\n\t\t\t * @public\n\t\t\t */\n\t\t\tpersContainerId: { type: \"string\", defaultValue: \"\", visibility: \"public\" }\n\t\t},\n\t\tdefaultAggregation: \"items\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The items aggregation which should be of type BaseContainer\n\t\t\t */\n\t\t\titems: { type: \"sap.cux.home.BaseContainer\", singularName: \"item\", multiple: true },\n\t\t\t/**\n\t\t\t * The settings dialog aggregation which controls settings for my home controls.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.SettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.SettingsDialog.\n\t\t\t */\n\t\t\tsettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"settingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The Key User Settings dialog aggregation which controls key user settings for my home.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t */\n\t\t\tkeyUserSettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"keyUserSettingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The content addition dialog aggregation which controls content addition for MyHome.\n\t\t\t */\n\t\t\tcontentAdditionDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"contentAdditionDialog\",\n\t\t\t\tmultiple: false,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * The full screen container to display registered full-screen elements\n\t\t\t */\n\t\t\tfullScreenContainer: { type: \"sap.m.Page\", singularName: \"fullScreenContainer\", multiple: false, visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired after the layout is collapsed.\n\t\t\t */\n\t\t\tonCollapse: {}\n\t\t}\n\t};\n\n\tstatic renderer: typeof BaseLayoutRenderer = BaseLayoutRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._settingsPanels = [];\n\t\tthis._elementConfigs = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\n\t\t//setup full-screen container\n\t\tthis._slideDurationInSeconds = 1;\n\t\tthis._fullScreenContainer = new Page(`${this.getId()}-fullScreen-container`, {\n\t\t\tbackgroundDesign: \"Transparent\",\n\t\t\tshowHeader: false\n\t\t});\n\t\tthis.setAggregation(\"fullScreenContainer\", this._fullScreenContainer);\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(event: Event): void {\n\t\tsuper.onBeforeRendering(event);\n\n\t\tthis._toggleHeaderVisibility();\n\n\t\t//open persisted dialogs, if any\n\t\tif (!this._attachRouteMatched) {\n\t\t\tS4MyHome.attachRouteMatched({}, this.openPersistedDialogs.bind(this));\n\t\t\tthis._attachRouteMatched = true;\n\t\t}\n\n\t\t//update full-screen slide animation duration, if enabled\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tdocument.body.style.setProperty(\"--sapUiSlideDuration\", `${this._slideDurationInSeconds}s`);\n\t\t}\n\t}\n\n\t/**\n\t * Opens persisted dialogs (settings or content addition) if their persisted properties are set.\n\t *\n\t * @private\n\t * @param {UI5Event<{ isMyHomeRoute: boolean }>} event - The route matched event containing route info.\n\t */\n\tprivate openPersistedDialogs(event: UI5Event<{ isMyHomeRoute: boolean }>) {\n\t\tif (event.getParameter(\"isMyHomeRoute\")) {\n\t\t\t//open settings dialog if persisted\n\t\t\tif (this.getProperty(\"settingsDialogPersisted\")) {\n\t\t\t\tconst selectedKey = (this.getAggregation(\"settingsDialog\") as BaseSettingsDialog)?.getProperty(\"selectedKey\") as string;\n\t\t\t\tthis.openSettingsDialog(selectedKey);\n\n\t\t\t\t//reset property\n\t\t\t\tthis.setProperty(\"settingsDialogPersisted\", false, true);\n\t\t\t}\n\n\t\t\t//open content addition dialog if persisted\n\t\t\tif (this.getProperty(\"contentAdditionDialogPersisted\")) {\n\t\t\t\tconst selectedKey = (this.getAggregation(\"contentAdditionDialog\") as BaseSettingsDialog)?.getProperty(\n\t\t\t\t\t\"selectedKey\"\n\t\t\t\t) as string;\n\t\t\t\tthis.openContentAdditionDialog(selectedKey);\n\n\t\t\t\t//reset property\n\t\t\t\tthis.setProperty(\"contentAdditionDialogPersisted\", false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of the header based on the presence of a custom header or header content.\n\t * @private\n\t */\n\tprivate _toggleHeaderVisibility(): void {\n\t\tconst customHeader = this.getCustomHeader() as Bar;\n\t\tconst showHeader = customHeader?.getVisible() || this.getHeaderContent().length > 0;\n\t\tthis.setProperty(\"showHeader\", showHeader, true);\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method.\n\t *\n\t * @private\n\t */\n\tpublic onAfterRendering(): void {\n\t\t//expand element on load if expanded through URL param\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tif (!this._layoutLoaded) {\n\t\t\t\tthis._layoutLoaded = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._hashChanger = new HashChanger();\n\t\t\t\t\tthis._loadFullScreenFromHash(this._hashChanger.getHash() || \"\");\n\t\t\t\t\tconst [appIntent] = this._hashChanger.getHash().split(\"?\");\n\n\t\t\t\t\t//attach hash change event for toggling full screen\n\t\t\t\t\twindow.addEventListener?.(\"hashchange\", () => {\n\t\t\t\t\t\tconst currentHash = window.location.hash.substring(1);\n\t\t\t\t\t\t//toggle full screen only if hash is changed from within the app\n\t\t\t\t\t\tif (currentHash.includes?.(appIntent)) {\n\t\t\t\t\t\t\tthis._loadFullScreenFromHash(currentHash, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the content of the BaseLayout.\n\t * Overridden to return the items aggregation during inner page rendering.\n\t *\n\t * @private\n\t * @override\n\t * @returns An array of Control objects representing the content.\n\t */\n\tpublic getContent(): Control[] {\n\t\treturn this.getItems();\n\t}\n\n\t/**\n\t * Extracts URL search parameters from a given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The hash string containing the URL parameters.\n\t * @returns {URLSearchParams} An instance of URLSearchParams containing the parsed parameters.\n\t */\n\tprivate _getURLParams(hash: string): URLSearchParams {\n\t\tconst queryString = hash?.includes(\"?\") ? hash.substring(hash.indexOf(\"?\") + 1) : \"\";\n\t\treturn new URLSearchParams(queryString);\n\t}\n\n\t/**\n\t * Loads full screen mode from URL hash if enabled.\n\t *\n\t * @private\n\t * @param {string} hash - The URL hash string.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tprivate _loadFullScreenFromHash(hash: string, hashChanged: boolean = false): void {\n\t\tconst enableFullScreen = this.getProperty(\"enableFullScreen\") as boolean;\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tconst expandedElementName = URLParams.get(\"expanded\") || \"\";\n\t\tconst expandedElement = this._elementConfigs.get(expandedElementName);\n\t\tconst isTargetContainerVisible = expandedElement?.targetContainer.getVisible() || false;\n\t\tconst isPhone = calculateDeviceType() === DeviceType.Mobile;\n\n\t\tif (enableFullScreen && expandedElement && !isPhone && isTargetContainerVisible) {\n\t\t\tif (this._currentExpandedElement && this._currentExpandedElement.fullScreenName !== expandedElementName) {\n\t\t\t\t//expand element and prevent slide if hash element is found and another element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement, hashChanged);\n\t\t\t} else if (!this._currentExpandedElement) {\n\t\t\t\t//expand element if hash element is found and no element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement);\n\t\t\t} else if (URLParams.has(\"expanded\")) {\n\t\t\t\t//retain the slide transition in case of hash switch\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.add(\"slide\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._currentExpandedElement) {\n\t\t\t\t//collapse expanded element if hash element not found\n\t\t\t\tthis._toggleFullScreenForElement(this._currentExpandedElement);\n\t\t\t} else {\n\t\t\t\t//reset hash if no expanded element found\n\t\t\t\tif (URLParams.has(\"expanded\")) {\n\t\t\t\t\tconst updatedHash = this._removeURLParam(hash, \"expanded\");\n\t\t\t\t\tthis._hashChanger?.replaceHash(updatedHash, \"Backwards\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles full screen mode for the specified element.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} expandedElement - The configuration of the element to be expanded.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed, affecting the toggle behavior.\n\t */\n\tprivate _toggleFullScreenForElement(expandedElement: FullScreenElementConfig, hashChanged: boolean = false): void {\n\t\tsetTimeout(() => this.toggleFullScreen(expandedElement.sourceElements.values().next().value!, hashChanged));\n\t}\n\n\t/**\n\t * Opens the settings dialog and navigate to the panel\n\t * specified by the selected key.\n\t *\n\t * @private\n\t * @param {string} selectedKey The key of the panel to navigate to\n\t */\n\tpublic openSettingsDialog(selectedKey: string = \"\", context: object = {}): void {\n\t\tconst settingsDialog = this.getAggregation(\"settingsDialog\") as BaseSettingsDialog;\n\t\tsettingsDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tsettingsDialog?.setProperty(\"context\", context);\n\t\tsettingsDialog?.open();\n\t}\n\n\t/**\n\t * Opens the content addition dialog and opens the selected panel.\n\t *\n\t * @param {string} [selectedKey=\"\"] - The key to be set for the content addition dialog. Defaults to an empty string.\n\t */\n\tpublic openContentAdditionDialog(selectedKey: string = \"\"): void {\n\t\tconst contentAdditionDialog = this.getAggregation(\"contentAdditionDialog\") as ContentAdditionDialog;\n\t\tcontentAdditionDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tcontentAdditionDialog?.open();\n\t}\n\n\t/**\n\t * Sets SettingsDialog aggregation.\n\t * Overridden to update cached settings panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsDialog} the dialog for chaining\n\t */\n\tpublic setSettingsDialog(settingsDialog: BaseSettingsDialog): this {\n\t\tconst enableSettings = this.getProperty(\"enableSettings\") as boolean;\n\t\tif (enableSettings) {\n\t\t\tconst settingsPanels = settingsDialog?.getPanels();\n\t\t\tsettingsPanels?.forEach((settingsPanel: BaseSettingsPanel) => {\n\t\t\t\tthis._addSettingsPanel(settingsPanel);\n\t\t\t});\n\t\t}\n\t\tthis.setAggregation(\"settingsDialog\", settingsDialog);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _addSettingsPanel(settingsPanel: BaseSettingsPanel | BaseSettingsPanel[] | undefined, override?: boolean): void {\n\t\tif (settingsPanel) {\n\t\t\tif (override) {\n\t\t\t\tthis._settingsPanels = settingsPanel as BaseSettingsPanel[];\n\t\t\t} else {\n\t\t\t\tthis._settingsPanels.push(settingsPanel as BaseSettingsPanel);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _getSettingsPanels(): BaseSettingsPanel[] {\n\t\treturn this._settingsPanels;\n\t}\n\n\t/**\n\t * Extracts the configuration necessary for handling full-screen functionality of an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to extract the full-screen configuration.\n\t * @returns {FullScreenElementConfig} Full screen element configuration.\n\t */\n\tprivate _extractElementConfig(element: BaseContainer | BasePanel): FullScreenElementConfig {\n\t\tconst sourceElement = element;\n\t\tconst isPanelElement = sourceElement instanceof BasePanel;\n\t\tconst targetContainer = isPanelElement ? (sourceElement.getParent() as BaseContainer) : sourceElement;\n\t\tconst isPanelInSideBySideLayout = isPanelElement && targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? targetContainer : sourceElement).getProperty(\"fullScreenName\") as string;\n\t\tconst sourceElements = new Set<BaseContainer | BasePanel>().add(sourceElement);\n\n\t\treturn {\n\t\t\tfullScreenName,\n\t\t\tsourceElements,\n\t\t\ttargetContainer,\n\t\t\tindex: this.indexOfItem(targetContainer),\n\t\t\tkey: isPanelElement ? sourceElement.getKey() : \"\"\n\t\t};\n\t}\n\n\t/**\n\t * Configures an element for full-screen functionality by extracting and storing its configuration.\n\t * Only stores the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to configure for full-screen.\n\t */\n\tpublic registerFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tif (this._elementConfigs.get(fullScreenName)) {\n\t\t\t\tconst sourceElements = (\n\t\t\t\t\tthis._elementConfigs.get(fullScreenName)?.sourceElements || new Set<BaseContainer | BasePanel>()\n\t\t\t\t).add(element);\n\t\t\t\tthis._elementConfigs.set(fullScreenName, { ...elementConfig, sourceElements } as FullScreenElementConfig);\n\t\t\t} else {\n\t\t\t\tthis._elementConfigs.set(fullScreenName, elementConfig);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes an element's full-screen configuration based on its full-screen name.\n\t * Only removes the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to remove from full-screen configuration.\n\t */\n\tpublic deregisterFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst { fullScreenName } = this._extractElementConfig(element);\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tthis._elementConfigs.delete(fullScreenName);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the full screen configuration for the specified element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which the full screen configuration is to be updated.\n\t * @param {Partial<FullScreenElementConfig>} [updatedConfig] - An optional partial configuration to update the element's full screen configuration.\n\t *\n\t * @returns {void}\n\t */\n\tpublic updateFullScreenElement(element: BaseContainer | BasePanel, updatedConfig?: Partial<FullScreenElementConfig>): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tconst newConfiguration = { ...this._elementConfigs.get(fullScreenName), ...updatedConfig } as FullScreenElementConfig;\n\t\t\tthis._elementConfigs.set(fullScreenName, newConfiguration);\n\t\t}\n\t}\n\n\t/**\n\t * Adds or updates a URL parameter in the given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to add or update.\n\t * @param {string} value - The value for the parameter.\n\t * @returns {string} The updated hash string with the new or updated parameter.\n\t */\n\tprivate _addURLParam(hash: string, key: string, value: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.set(key, value);\n\t\treturn `${hash.split(\"?\")[0]}?${URLParams.toString()}`;\n\t}\n\n\t/**\n\t * Removes a specified parameter from the URL hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to remove.\n\t * @returns {string} The updated hash string without the specified parameter.\n\t */\n\tprivate _removeURLParam(hash: string, key: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.delete(key);\n\t\treturn URLParams.toString() ? `${hash.split(\"?\")[0]}?${URLParams.toString()}` : hash.split(\"?\")[0];\n\t}\n\n\t/**\n\t * Toggles the full-screen state of a given element, handling layout adjustments, visibility, and scroll position.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to toggle full-screen state for.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tpublic toggleFullScreen(element: BaseContainer | BasePanel, hashChanged: boolean = false): void {\n\t\tconst isPanelInSideBySideLayout =\n\t\t\telement instanceof BasePanel && element.getParent()?.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? element.getParent() : element)?.getProperty(\"fullScreenName\") as string;\n\t\tconst elementConfig = this._elementConfigs.get(fullScreenName);\n\t\tconst allowToggle = hashChanged || this._checkToggleRequirements(elementConfig as FullScreenElementConfig);\n\n\t\tif (elementConfig && allowToggle) {\n\t\t\tconst { targetContainer } = elementConfig;\n\t\t\tconst currentHash = this._hashChanger?.getHash() || \"\";\n\t\t\tconst panelIndex = targetContainer.indexOfAggregation(\"content\", element);\n\t\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\t\tlet expanded = this.getProperty(\"expanded\") as boolean;\n\t\t\t// detach resize handler\n\t\t\ttargetContainer._detachResizeHandler();\n\t\t\tif (!hashChanged) {\n\t\t\t\t//update expanded state\n\t\t\t\tthis.setProperty(\"expanded\", !this.getProperty(\"expanded\"), true);\n\t\t\t\texpanded = this.getProperty(\"expanded\") as boolean;\n\n\t\t\t\t//place cloned element in full screen container\n\t\t\t\tthis._placeClonedElement(targetContainer, expanded, panelIndex);\n\n\t\t\t\t//perform slide transition\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.toggle(\"slide\", expanded);\n\t\t\t}\n\n\t\t\t//toggle full-screen button text for the element\n\t\t\tthis._toggleFullScreenButtonText(element, expanded);\n\n\t\t\t// store the current and previous expanded element\n\t\t\tif (expanded) {\n\t\t\t\tthis._previousExpandedElement = this._currentExpandedElement;\n\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t} else {\n\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t}\n\n\t\t\t//add or remove actual element at the end of slide transition\n\t\t\tsetTimeout(\n\t\t\t\t() => {\n\t\t\t\t\tif (expanded) {\n\t\t\t\t\t\t// in case of horizontal or vertical layout, set expanded element's key as selected key\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\ttargetContainer.setProperty(\"selectedKey\", element.getProperty(\"key\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust currently expanded element if present\n\t\t\t\t\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\t\t\t\t\tthis._adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent);\n\n\t\t\t\t\t\tthis._modifyContainer(targetContainer, panelIndex);\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t\t\t\tconst updatedHash = this._addURLParam(currentHash, \"expanded\", fullScreenName);\n\t\t\t\t\t\tthis._hashChanger?.setHash(updatedHash);\n\n\t\t\t\t\t\tthis._focusFullScreenButton(element);\n\n\t\t\t\t\t\t//fire onExpand event\n\t\t\t\t\t\telement.fireEvent(\"onExpand\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//delete stored dom snapshot\n\t\t\t\t\t\t(this._domSnapshot as Element)?.remove();\n\n\t\t\t\t\t\tthis.insertItem(targetContainer, elementConfig.index);\n\n\t\t\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\tthis._toggleInnerPanelVisibility(targetContainer, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t\t\t\tconst updatedHash = this._removeURLParam(currentHash, \"expanded\");\n\t\t\t\t\t\tthis._hashChanger?.setHash(updatedHash);\n\n\t\t\t\t\t\t//reset scroll position on collapse\n\t\t\t\t\t\tthis._resetScrollPosition(element);\n\n\t\t\t\t\t\t//fire onCollapse event\n\t\t\t\t\t\tthis.fireEvent(\"onCollapse\");\n\t\t\t\t\t}\n\t\t\t\t\t// attach resize handler\n\t\t\t\t\ttargetContainer._attachResizeHandler();\n\t\t\t\t},\n\t\t\t\thashChanged ? 0 : this._slideDurationInSeconds * 1000\n\t\t\t);\n\t\t} else {\n\t\t\tLog.warning(`Element with ID: ${element?.getId()} not registered for full screen`);\n\t\t}\n\t}\n\n\t/**\n\t * Place actual element in the full screen container and hide all other panels in the container, if not in side-by-side layout\n\t *\n\t * @private\n\t * @param {BaseContainer} targetContainer - Container that is to be displayed in full-screen mode\n\t * @param {number} panelIndex - Index of the panel to remain visible if not in side-by-side layout.\n\t */\n\tprivate _modifyContainer(targetContainer: BaseContainer, panelIndex: number) {\n\t\t//adjust currently expanded element if present\n\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\tif (!this._previousExpandedElement || isTargetContainerDifferent) {\n\t\t\tthis._getFullScreenContainer().removeAllContent();\n\t\t\t(this._sourceElementClone as Element)?.remove();\n\t\t\tthis._getFullScreenContainer().addContent(targetContainer as Control);\n\t\t}\n\n\t\t//hide all other panels in the container, if not in side-by-side layout\n\t\tif (!isContainerInSideBySideLayout) {\n\t\t\tthis._toggleInnerPanelVisibility(targetContainer, false, panelIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the toggle requirements are met for the given element configuration.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} elementConfig - The configuration of the element to check.\n\t * @returns {boolean} `true` if toggling is allowed, otherwise `false`.\n\t */\n\tprivate _checkToggleRequirements(elementConfig: FullScreenElementConfig): boolean {\n\t\tconst expanded = this.getProperty(\"expanded\") as boolean;\n\t\tlet allowToggle = true;\n\n\t\tif (expanded) {\n\t\t\t// if expanded, allow toggling only if the provided element and expanded element are the same\n\t\t\tconst currentFullScreenName = elementConfig?.fullScreenName;\n\t\t\tallowToggle = this._currentExpandedElement?.fullScreenName === currentFullScreenName;\n\t\t}\n\n\t\treturn allowToggle;\n\t}\n\n\t/**\n\t * Adjusts the current expanded element if required based on the new target container.\n\t *\n\t * @private\n\t * @param {boolean} isTargetContainerDifferent - Indicates whether the target container is different from the current expanded element's container.\n\t */\n\tprivate _adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent: boolean) {\n\t\tif (this._previousExpandedElement) {\n\t\t\tconst firstSourceElement = this._previousExpandedElement.sourceElements.values().next().value!;\n\n\t\t\t//update full-screen button text for the current expanded element to collapsed state\n\t\t\tthis._toggleFullScreenButtonText(firstSourceElement, false);\n\n\t\t\tif (isTargetContainerDifferent) {\n\t\t\t\t//if expanded through hash change, place the current expanded element back in the layout\n\t\t\t\tthis.insertItem(this._previousExpandedElement.targetContainer, this._previousExpandedElement.index);\n\n\t\t\t\t//reset scroll position on expansion throuh hash change\n\t\t\t\tthis._scrollPosition = 0;\n\n\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\tif (this._previousExpandedElement.targetContainer.getProperty(\"orientation\") !== OrientationType.SideBySide) {\n\t\t\t\t\tthis._toggleInnerPanelVisibility(this._previousExpandedElement.targetContainer, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resets the scroll position to that of the collapsed element in the original container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to reset the scroll position.\n\t */\n\tprivate _resetScrollPosition(element: BaseContainer | BasePanel) {\n\t\t//reset scroll position\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t\tconst sectionRef = this._getSectionRef(this);\n\t\t\tif (sectionRef !== undefined) {\n\t\t\t\tsectionRef.scrollTop = this._scrollPosition;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Toggles visibility of inner panels, except one specified by index.\n\t * Applicable only for panels not in SideSide layout.\n\t *\n\t * @private\n\t * @param {BaseContainer} element - Container with inner panels.\n\t * @param {boolean} visibility - Desired visibility state for panels.\n\t * @param {number} [indexOfVisiblePanel] - Index of panel to exclude from toggle.\n\t */\n\tprivate _toggleInnerPanelVisibility(element: BaseContainer, visibility: boolean, indexOfVisiblePanel?: number): void {\n\t\telement.getContent()?.forEach((panel, index) => {\n\t\t\tpanel.setVisible(index === indexOfVisiblePanel ? !visibility : visibility);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the full-screen button text for a control (or all controls in a side-by-side layout) based on expanded state.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to update or the parent of controls to update.\n\t * @param {boolean} expanded - Indicates if the text should reflect an expanded or collapsed state.\n\t */\n\tprivate _toggleFullScreenButtonText(control: BaseContainer | BasePanel, expanded: boolean): void {\n\t\tconst isPanel = control instanceof BasePanel;\n\t\tconst parentContainer = (isPanel ? control.getParent() : control) as BaseContainer;\n\t\tconst isPanelInSideBySideLayout = isPanel && parentContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\n\t\t//update full-screen button text\n\t\tconst updateText = (control: BaseContainer | BasePanel) => {\n\t\t\tconst fullScreenButton = this._getFullScreenButton(control);\n\t\t\tfullScreenButton.setProperty(\"text\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t\tconst fullScreenMenuItem = this._getFullScreenMenuItem(control);\n\t\t\tfullScreenMenuItem.setProperty(\"title\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t};\n\n\t\tif (isPanelInSideBySideLayout) {\n\t\t\tparentContainer.getContent()?.forEach(updateText);\n\t\t} else {\n\t\t\tupdateText(control);\n\t\t}\n\n\t\t//update container header elements\n\t\tparentContainer._updateContainerHeader(isPanelInSideBySideLayout ? parentContainer : control);\n\t}\n\n\t/**\n\t * Sets focus on the full-screen button associated with an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element whose full-screen button should be focused.\n\t */\n\tprivate _focusFullScreenButton(element: BaseContainer | BasePanel): void {\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the full-screen button associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {Button} The full-screen button associated with the control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t}\n\n\t/**\n\t * Retrieves the Full screen menu item associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {MenuItem} The \"Show More\" menu item associated with the control.\n\t */\n\tprivate _getFullScreenMenuItem(control: BaseContainer | BasePanel): MenuItem {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full-screen container from the current aggregation.\n\t *\n\t * @private\n\t * @returns {Page} The Page instance used as the full-screen container.\n\t */\n\tpublic _getFullScreenContainer(): Page {\n\t\treturn this.getAggregation(\"fullScreenContainer\") as Page;\n\t}\n\n\t/**\n\t * Gets the first child node of a control's DOM reference.\n\t *\n\t * @private\n\t * @param {Control} element - The control to get the child node for.\n\t * @returns {Node | Element} The first child node of the control's DOM reference.\n\t */\n\tprivate _getSectionRef<T extends Node | Element = Element>(element: Control): T | undefined {\n\t\tconst sectionIndex = this.getProperty(\"showHeader\") && element !== this._getFullScreenContainer() ? 1 : 0;\n\t\treturn element.getDomRef()?.childNodes[sectionIndex] as T;\n\t}\n\n\t/**\n\t * Clones and places an element into a target container for full-screen transitions.\n\t *\n\t * @private\n\t * @param {BaseContainer} targetElement - Element to clone or containing the element to clone.\n\t * @param {boolean} expanded - True to expand (clone and place), false to collapse (restore from snapshot).\n\t * @param {number} panelIndex - Index of the panel to clone if not in side-by-side layout.\n\t */\n\tprivate _placeClonedElement(targetElement: BaseContainer, expanded: boolean, panelIndex: number) {\n\t\t//store scroll position and DOM snapshot\n\t\tthis._scrollPosition = (expanded ? this._getSectionRef(this)?.scrollTop : this._scrollPosition) as number;\n\n\t\t//create a snapshot of the homepage in collapsed mode for use in transition back from full screen.\n\t\t//the dom ref had to be cloned twice following rendering issues in the Insights Tiles section.\n\t\tthis._domSnapshot = (expanded ? this.getDomRef()?.cloneNode(true).cloneNode(true) : this._domSnapshot) as Node;\n\n\t\tconst isSideBySideLayout = targetElement.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst sourceElement = isSideBySideLayout\n\t\t\t? targetElement\n\t\t\t: (targetElement._getInnerControl() as FlexBox)?.getItems()[panelIndex] || targetElement;\n\t\tconst sourceElementDomRef = sourceElement.getDomRef() || targetElement.getDomRef();\n\t\tthis._sourceElementClone = expanded ? (sourceElementDomRef?.cloneNode(true) as Node) : this._sourceElementClone;\n\t\tconst targetDomRef = expanded ? this._getSectionRef(this._getFullScreenContainer()) : this.getDomRef();\n\t\tif (targetDomRef) {\n\t\t\tsetTimeout(() => {\n\t\t\t\ttargetDomRef.innerHTML = \"\";\n\t\t\t\ttargetDomRef.append(expanded ? this._sourceElementClone : this._domSnapshot);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the name of the currently expanded element, if any.\n\t *\n\t * @private\n\t * @returns {string | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElementName(): string | undefined {\n\t\treturn this._getCurrentExpandedElement()?.fullScreenName;\n\t}\n\n\t/**\n\t * Retrieves the currently expanded element config, if any\n\t *\n\t * @private\n\t * @returns {FullScreenElementConfig | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElement(): FullScreenElementConfig | undefined {\n\t\tconst isExpandInHash = this._getURLParams(this._hashChanger?.getHash() || \"\").has(\"expanded\");\n\t\tif (isExpandInHash) {\n\t\t\treturn this._currentExpandedElement;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}