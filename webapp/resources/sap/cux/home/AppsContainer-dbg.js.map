{"version":3,"file":"AppsContainer-dbg.js","names":["sap","ui","define","Log","GenericTile","Panel","sap_m_library","EventBus","Parameters","S4MyHome","__BaseAppPersPanel","__BaseContainer","__Group","__RecommendedAppPanel","___utils_DataFormatUtils","___utils_Device","___utils_placeholder_AppsPlaceholder","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BackgroundDesign","FrameType","GenericTileMode","GenericTileScope","TileSizeBehavior","BaseAppPersPanel","BaseContainer","Group","RecommendedAppPanel","getLeanURL","calculateCardWidth","DeviceType","fetchElementProperties","getAppsPlaceholder","getDefaultAppColor","sLegendName","key","value","get","name","assigned","CONSTANTS","PLACEHOLDER_ITEMS_COUNT","MIN_TILE_WIDTH","MAX_TILE_WIDTH","AppsContainer","extend","metadata","events","appsLoaded","parameters","apps","type","tiles","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","_i18nBundle","getText","eventBus","getInstance","subscribe","channelId","eventId","data","showRecommendation","firstAppsPanel","getContent","getProperty","addStyleClass","addCustomSetting","_attachRouteChangeEvent","_this","handleRouteChange","event","show","getParameter","_temp2","_temp","_appSwitched","showPersistedDialog","Promise","resolve","load","_setPanelsDirty","reject","attachRouteMatched","error","warning","Error","message","String","onBeforeRendering","_onBeforeRendering","_attachPanelSupportedEvent","adjustLayout","BaseContainer.prototype.onBeforeRendering.call","_removeUnsupportedPanels","onAfterRendering","_onAfterRendering","_this2","BaseContainer.prototype.onAfterRendering.call","_activateRecommendationTabPanel","_load","_this3","selectedPanels","getPanels","all","map","selectedPanel","_setApps","_getPanels","isPhone","getDeviceType","Mobile","_getSelectedPanel","_showPersistedDialog","firePersistDialog","panels","panel","setDesktopViewDirty","setMobileViewDirty","_generatePlaceholder","isLoaded","destroyAggregation","placeholderApps","generateApps","Array","fill","status","setApps","_updatePanelContent","_this4","_temp5","_temp4","fireEvent","_temp3","isDirty","isMobileDirty","loadApps","setLoaded","applyPersonalization","getApps","fetchTileVisualization","showErrorCard","getTitle","groups","getAggregation","wrapper","_generateMobileAppsWrapper","_generateAppsWrapper","aggregationName","items","_generateMobileCards","getId","_generateTiles","_addWrapperContent","_updatePanelContentVisibility","appsWrapper","_generateDesktopAppsWrapper","mobileAppsWrapper","errorCard","_generateErrorMessage","hasApps","length","setVisible","getParent","setWidth","_getAppTile","app","actions","tileId","scope","ActionMore","Display","state","getStatus","mode","IconMode","sizeBehavior","Small","header","backgroundColor","getBgColor","tileIcon","getIcon","url","getUrl","frameType","TwoByHalf","renderOnThemeChange","dropAreaOffset","subheader","getSubTitle","press","_onPress","width","_getGroupTile","group","tileBadge","getNumber","getGroupId","_onPanelSelect","_this5","BaseContainer.prototype._onPanelSelect.call","_refreshAllPanels","_this6","refreshPanel","_refreshPanel","_this7","_toggleTabView","supportedPanels","filter","isSupported","iconTabBarControl","_getInnerControl","toggleStyleClass","_onPanelSupported","currentPanel","setSupported","_togglePanelVisibility","isVisible","iconTabBar","tabs","getItems","selectedTab","find","tab","getKey","unSupportedPanels","hasListeners","attachSupported","bind","_this8","recommendedPanel","_temp6","_enableRecommendationTab","setTileWidth","_setTileWidth","minWidth","maxWidth","getDomRef","domProperties","availableWidth","Object","values","slice","reduce","propertyValue","tileCount","cardLayoutConfig","containerWidth","totalCards","gap","skipDeviceCheck","clampedWidth","getLayout","_adjustLayout","toggleActionButtons","forEach","currentPanelId","i","panelItems","backgroundDesign","Solid","height","content","push","item","addAggregation","_showErrorCard","getGenericPlaceholderContent","_getGenericPlaceholderContent"],"sources":["AppsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport Panel from \"sap/m/Panel\";\nimport VBox from \"sap/m/VBox\";\nimport { BackgroundDesign, FrameType, GenericTileMode, GenericTileScope, LoadState, TileSizeBehavior } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Parameters from \"sap/ui/core/theming/Parameters\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport App from \"./App\";\nimport { $AppsContainerSettings } from \"./AppsContainer\";\nimport BaseApp from \"./BaseApp\";\nimport BaseAppPanel, { BaseAppPanel$SupportedEvent } from \"./BaseAppPanel\";\nimport BaseAppPersPanel from \"./BaseAppPersPanel\";\nimport BaseContainer from \"./BaseContainer\";\nimport Group from \"./Group\";\nimport MenuItem from \"./MenuItem\";\nimport RecommendedAppPanel from \"./RecommendedAppPanel\";\nimport { ICustomVisualization } from \"./interface/AppsInterface\";\nimport { getLeanURL } from \"./utils/DataFormatUtils\";\nimport { calculateCardWidth, DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { getAppsPlaceholder } from \"./utils/placeholder/AppsPlaceholder\";\n\nconst getDefaultAppColor = () => {\n\tconst sLegendName = \"sapLegendColor9\";\n\treturn {\n\t\tkey: sLegendName,\n\t\tvalue: Parameters.get({\n\t\t\tname: sLegendName\n\t\t}),\n\t\tassigned: false\n\t};\n};\n\nconst CONSTANTS = {\n\tPLACEHOLDER_ITEMS_COUNT: 5,\n\tMIN_TILE_WIDTH: 304,\n\tMAX_TILE_WIDTH: 456\n};\n\n/**\n *\n * Container class for managing and storing apps.\n *\n * @extends BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.AppsContainer\n */\nexport default class AppsContainer extends BaseContainer {\n\tprivate _isInitialRender = true;\n\tprivate _appSwitched!: boolean;\n\tstatic readonly renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tstatic readonly metadata: MetadataOptions = {\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired when apps are loaded.\n\t\t\t */\n\t\t\tappsLoaded: {\n\t\t\t\tparameters: {\n\t\t\t\t\tapps: { type: \"sap.cux.home.App[]\" },\n\t\t\t\t\ttiles: { type: \"sap.m.GenericTile[]\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconstructor(idOrSettings?: string | $AppsContainerSettings);\n\tconstructor(id?: string, settings?: $AppsContainerSettings);\n\t/**\n\t * Constructor for a new app container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $AppsContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"appsTitle\"));\n\t\t// Subscribe to recommendation setting change event\n\t\tconst eventBus = EventBus.getInstance();\n\t\teventBus.subscribe(\"importChannel\", \"recommendationSettingChanged\", (channelId?: string, eventId?: string, data?: object) => {\n\t\t\tconst showRecommendation = (data as { showRecommendation: boolean }).showRecommendation;\n\t\t\tif (!showRecommendation) {\n\t\t\t\tconst firstAppsPanel = this.getContent()?.[0];\n\t\t\t\tthis.setProperty(\"selectedKey\", firstAppsPanel?.getProperty(\"key\"));\n\t\t\t}\n\t\t});\n\n\t\t// disable lazy load for apps container as it's the hero element\n\t\tthis.setProperty(\"enableLazyLoad\", false);\n\t\tthis.addStyleClass(\"sapCuxAppsContainer\");\n\t\tthis.addCustomSetting(\"text\", this._i18nBundle.getText(\"myAppMsg\") as string);\n\t\tthis._attachRouteChangeEvent();\n\t}\n\n\t/**\n\t * Attaches an event handler to monitor route changes and manage application state accordingly.\n\t * @private\n\t *\n\t * @returns {void}\n\t */\n\n\tprivate _attachRouteChangeEvent(): void {\n\t\tconst handleRouteChange = async (event: Event<{ isMyHomeRoute: boolean }>) => {\n\t\t\tconst show = event.getParameter(\"isMyHomeRoute\");\n\t\t\tif (show) {\n\t\t\t\tif (this._appSwitched) {\n\t\t\t\t\tthis._appSwitched = false;\n\t\t\t\t\tthis.showPersistedDialog();\n\t\t\t\t\tawait this.load();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setPanelsDirty();\n\t\t\t\tthis._appSwitched = true;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tS4MyHome.attachRouteMatched({}, handleRouteChange, this);\n\t\t} catch (error) {\n\t\t\tLog.warning(\"Unable to attach route change handler\", error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering() {\n\t\tif (this._isInitialRender) {\n\t\t\tthis._isInitialRender = false;\n\t\t\tthis._attachPanelSupportedEvent();\n\t\t}\n\n\t\tthis.adjustLayout();\n\t\tsuper.onBeforeRendering();\n\t\tthis._removeUnsupportedPanels();\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic async onAfterRendering() {\n\t\tsuper.onAfterRendering();\n\t\t// activating the recommendation tab from appsContainer as personalization data in not available on init of panel.\n\t\tawait this._activateRecommendationTabPanel();\n\t}\n\n\t/**\n\t * Loads the AppsContainer section.\n\t * Overrides the load method of the BaseContainer.\n\t *\n\t * @private\n\t * @async\n\t * @override\n\t */\n\tpublic async load(): Promise<void> {\n\t\tconst selectedPanels = this.getPanels();\n\t\tawait Promise.all(selectedPanels.map((selectedPanel) => this._setApps(selectedPanel)));\n\t}\n\n\t/**\n\t * Retrieves the relevant panels based on the device type.\n\t *\n\t * @private\n\t * @returns {BaseAppPanel[]} An array of panels based on the device type.\n\t */\n\tprivate getPanels(): BaseAppPanel[] {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\treturn (isPhone ? this.getContent() : [this._getSelectedPanel()]) as BaseAppPanel[];\n\t}\n\n\t/**\n\t * Triggers navigation actions for the currently relevant panels.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\n\tprivate showPersistedDialog(): void {\n\t\tconst selectedPanels = this.getPanels();\n\t\tfor (const selectedPanel of selectedPanels) {\n\t\t\tselectedPanel.firePersistDialog();\n\t\t}\n\t}\n\n\t/**\n\t * Set all panels dirty state to true, to refresh all panels\n\t * @private\n\t */\n\tprivate _setPanelsDirty(): void {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tpanel.setDesktopViewDirty(true);\n\t\t\tpanel.setMobileViewDirty(true);\n\t\t}\n\t}\n\n\t/**\n\t * Generate placeholer for the panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which placeholders has to be generated.\n\t */\n\tprivate _generatePlaceholder(panel: BaseAppPanel): void {\n\t\tif (!panel.isLoaded()) {\n\t\t\tpanel.destroyAggregation(\"apps\", true);\n\t\t\tconst placeholderApps = panel.generateApps(\n\t\t\t\tnew Array(CONSTANTS.PLACEHOLDER_ITEMS_COUNT).fill({ status: \"Loading\" }) as ICustomVisualization[]\n\t\t\t);\n\t\t\tpanel.setApps(placeholderApps);\n\t\t\tthis._updatePanelContent(panel);\n\t\t}\n\t}\n\n\t/**\n\t * Loads and sets the apps.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel for which apps has to be loaded.\n\t * @returns {Promise<void>} resolves when apps are loaded.\n\t */\n\tprivate async _setApps(panel: BaseAppPanel): Promise<void> {\n\t\ttry {\n\t\t\t// only load the apps if panel is in dirty state\n\t\t\tif (panel.isDirty() && panel.isMobileDirty()) {\n\t\t\t\tthis._generatePlaceholder(panel);\n\t\t\t\tawait panel.loadApps?.();\n\t\t\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t\t} else {\n\t\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t\t}\n\t\t\t\tpanel.setLoaded(true);\n\t\t\t\tthis._updatePanelContent(panel);\n\n\t\t\t\tif (panel instanceof BaseAppPersPanel) {\n\t\t\t\t\t// don't wait for personalization to complete\n\t\t\t\t\tvoid panel.applyPersonalization(true);\n\t\t\t\t}\n\t\t\t\tlet tiles: GenericTile[] = [];\n\t\t\t\tlet apps = panel.getApps();\n\t\t\t\ttiles = panel.fetchTileVisualization(tiles);\n\t\t\t\tthis.fireEvent(\"appsLoaded\", { apps, tiles });\n\t\t\t}\n\n\t\t\t// fire panel loaded event\n\t\t\tpanel.fireEvent(\"loaded\");\n\t\t} catch (error: unknown) {\n\t\t\tthis.showErrorCard(panel);\n\t\t\tLog.error(`Error setting apps for panel: ${panel.getTitle()}`, error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * Updates the content of the panel by replacing existing items with new apps and groups.\n\t * This method selects the appropriate wrapper based on the device type, and add apps/group or mobile cards to the wrapper.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContent(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst wrapper = isPhone ? panel._generateMobileAppsWrapper() : panel._generateAppsWrapper();\n\t\tconst aggregationName = isPhone ? \"content\" : \"items\";\n\t\twrapper.destroyAggregation(aggregationName);\n\t\tlet items = isPhone ? this._generateMobileCards([...groups, ...apps], panel.getId()) : this._generateTiles([...groups, ...apps]);\n\t\tthis._addWrapperContent(wrapper, items, aggregationName);\n\t\tthis._updatePanelContentVisibility(panel);\n\t}\n\n\t/**\n\t * Updates the visibility of the panel's content based on the current state and device type.\n\t * This method determines whether to display the apps or an error message based on the presence of apps and groups.\n\t * It also adjusts the visibility of different containers depending on whether the device is a phone or not.\n\t *\n\t * @param {BaseAppPanel} panel - The panel whose content visibility needs to be updated.\n\t * @returns {void}\n\t * @private\n\t */\n\tprivate _updatePanelContentVisibility(panel: BaseAppPanel): void {\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst appsWrapper = panel._generateDesktopAppsWrapper();\n\t\tconst mobileAppsWrapper = panel._generateMobileAppsWrapper();\n\t\tconst errorCard = panel._generateErrorMessage();\n\t\tconst hasApps = [...apps, ...groups].length !== 0;\n\t\tappsWrapper.setVisible(hasApps && !isPhone);\n\t\tmobileAppsWrapper.setVisible(hasApps && isPhone);\n\t\t(mobileAppsWrapper.getParent() as VBox).setWidth(isPhone && hasApps ? \"100%\" : \"auto\");\n\t\terrorCard.setVisible(!hasApps);\n\t}\n\n\t/**\n\t * Generates generic tile based on app.\n\t * @private\n\t * @param {sap.cux.home.App} app - App.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tpublic _getAppTile(app: App): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (app.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\tconst tileId = isPhone ? `${app.getId()}-mobile-tile` : `${app.getId()}-tile`;\n\t\treturn new GenericTile(tileId, {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: app.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: app.getTitle(),\n\t\t\tbackgroundColor: app.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: app.getIcon(),\n\t\t\turl: getLeanURL(app.getUrl()),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\tsubheader: app.getSubTitle(),\n\t\t\tpress: (e) => app._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"100%\"\n\t\t}).addStyleClass(\"tileLayout sapMGTTwoByHalf\");\n\t}\n\n\t/**\n\t * Generates generic tile based on group.\n\t * @private\n\t * @param {sap.cux.home.Group} group - Group.\n\t * @returns {sap.m.GenericTile}.\n\t */\n\tprivate _getGroupTile(group: Group): GenericTile {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst actions = (group.getAggregation(\"menuItems\") || []) as MenuItem[];\n\t\tconst tileId = isPhone ? `${group.getId()}-mobile-tile` : `${group.getId()}-tile`;\n\t\treturn new GenericTile(tileId, {\n\t\t\tscope: actions.length && !isPhone ? GenericTileScope.ActionMore : GenericTileScope.Display,\n\t\t\tstate: group.getStatus() as LoadState,\n\t\t\tmode: GenericTileMode.IconMode,\n\t\t\tsizeBehavior: TileSizeBehavior.Small,\n\t\t\theader: group.getTitle(),\n\t\t\tbackgroundColor: group.getBgColor() || getDefaultAppColor()?.key,\n\t\t\ttileIcon: group.getIcon(),\n\t\t\tframeType: FrameType.TwoByHalf,\n\t\t\trenderOnThemeChange: true,\n\t\t\tdropAreaOffset: 4,\n\t\t\ttileBadge: group.getNumber(),\n\t\t\tpress: (e) => group._onPress(e),\n\t\t\twidth: isPhone ? \"15rem\" : \"100%\"\n\t\t})\n\t\t\t.addStyleClass(\"tileLayout sapMGTTwoByHalf\")\n\t\t\t.data(\"groupId\", group.getGroupId()) as GenericTile;\n\t}\n\n\t/**\n\t * Overridden method for selection of panel in the IconTabBar.\n\t * Loads the apps in selected panel\n\t * @private\n\t * @returns {Promise<void>} resolves when apps are loaded on panel selection.\n\t */\n\tprotected async _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\tsuper._onPanelSelect(event);\n\t\tconst selectedPanel = this._getSelectedPanel() as BaseAppPanel;\n\t\tawait this._setApps(selectedPanel);\n\t}\n\n\t/**\n\t * Refresh apps for all the panels.\n\t * @private\n\t * @returns {Promise<void>} resolves when all panels are set to dirty and apps for current panel are refreshed.\n\t */\n\tpublic async _refreshAllPanels(): Promise<void> {\n\t\t//set all panels to dirty\n\t\tthis._setPanelsDirty();\n\t\t//set apps for current section\n\t\tawait this._setApps(this._getSelectedPanel() as BaseAppPanel);\n\t}\n\n\t/**\n\t * Refresh apps for selected panel.\n\t * @private\n\t * @param {BaseAppPanel} panel - Panel that has be refreshed.\n\t * @returns {Promise<void>} resolves when apps are refreshed.\n\t */\n\tpublic async refreshPanel(panel: BaseAppPanel): Promise<void> {\n\t\tpanel.setMobileViewDirty(true);\n\t\tpanel.setDesktopViewDirty(true);\n\t\tawait this._setApps(panel);\n\t}\n\n\t/**\n\t * Toggles the visibility of the tab view based on the supported panels.\n\t * @private\n\t */\n\tprivate _toggleTabView() {\n\t\tif (this.getDeviceType() !== DeviceType.Mobile) {\n\t\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\t\tconst supportedPanels = panels.filter((panel) => panel.isSupported());\n\t\t\tconst iconTabBarControl = this._getInnerControl() as IconTabBar;\n\t\t\ticonTabBarControl?.toggleStyleClass(\"sapUiITBHide\", supportedPanels.length === 1);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the supported state of the current panel.\n\t * If the panel is supported, it adds the panel to the content.\n\t * If the panel is not supported, it removes the panel from the content.\n\t * @param {BaseAppPanel} currentPanel - The panel to handle the supported state for.\n\t * @private\n\t */\n\tprivate _onPanelSupported(currentPanel: BaseAppPanel, event: BaseAppPanel$SupportedEvent) {\n\t\tconst isSupported = event.getParameter(\"isSupported\") as boolean;\n\t\tcurrentPanel.setSupported(isSupported);\n\t\tthis._togglePanelVisibility(currentPanel, isSupported);\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Toggles the visibility of the panel.\n\t * @param {BaseAppPanel} panel - The panel to toggle the visibility for.\n\t * @param {boolean} isVisible - The visibility state of the panel.\n\t * @private\n\t */\n\tprivate _togglePanelVisibility(panel: BaseAppPanel, isVisible: boolean) {\n\t\tconst iconTabBar = this._getInnerControl() as IconTabBar;\n\t\tconst tabs = (iconTabBar?.getItems() as IconTabFilter[]) || [];\n\t\tconst selectedTab = tabs.find((tab) => tab.getKey() === panel.getKey());\n\t\tselectedTab?.setVisible(isVisible);\n\t}\n\n\t/**\n\t * Removes unsupported panels from the container.\n\t * @private\n\t */\n\tprivate _removeUnsupportedPanels() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tconst unSupportedPanels = panels.filter((panel) => !panel.isSupported());\n\t\tfor (const panel of unSupportedPanels) {\n\t\t\tthis._togglePanelVisibility(panel, false);\n\t\t}\n\t\tthis._toggleTabView();\n\t}\n\n\t/**\n\t * Attaches an event handler to the \"supported\" event for each panel in the container.\n\t * @private\n\t */\n\tprivate _attachPanelSupportedEvent() {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tfor (const panel of panels) {\n\t\t\tif (!panel.hasListeners(\"supported\")) {\n\t\t\t\tpanel.attachSupported(this._onPanelSupported.bind(this, panel));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calls the enable function to activate the recommendation tab for `RecommendedAppPanel`, unless the device is a mobile phone.\n\t *\n\t * @private\n\t */\n\tprivate async _activateRecommendationTabPanel(): Promise<void> {\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst recommendedPanel = panels ? panels.find((panel) => panel instanceof RecommendedAppPanel) : null;\n\t\tif (recommendedPanel instanceof RecommendedAppPanel && !isPhone) {\n\t\t\tawait recommendedPanel._enableRecommendationTab();\n\t\t} else {\n\t\t\trecommendedPanel?.setSupported(false);\n\t\t}\n\t}\n\n\tpublic setTileWidth(panel: BaseAppPanel): void {\n\t\tconst minWidth = CONSTANTS.MIN_TILE_WIDTH; // in px\n\t\tconst maxWidth = CONSTANTS.MAX_TILE_WIDTH; // in px\n\n\t\tconst wrapper = panel._generateAppsWrapper()?.getDomRef() as Element;\n\t\tif (!wrapper) return;\n\n\t\tconst domProperties = fetchElementProperties(wrapper, [\"width\", \"padding-left\", \"padding-right\", \"margin-left\", \"margin-right\"]);\n\t\tconst availableWidth = Object.values(domProperties)\n\t\t\t.slice(1)\n\t\t\t.reduce((width, propertyValue) => width - propertyValue, domProperties[\"width\"]);\n\n\t\tconst apps = panel.getApps() || [];\n\t\tconst groups = (panel.getAggregation(\"groups\") || []) as Group[];\n\t\tconst tileCount = apps.length + groups.length;\n\n\t\tif (tileCount === 0 || availableWidth <= 0) return;\n\n\t\tconst cardLayoutConfig = {\n\t\t\tcontainerWidth: availableWidth,\n\t\t\ttotalCards: tileCount,\n\t\t\tminWidth: minWidth,\n\t\t\tmaxWidth: maxWidth,\n\t\t\tgap: 8,\n\t\t\tskipDeviceCheck: true\n\t\t};\n\n\t\tconst clampedWidth = calculateCardWidth(cardLayoutConfig);\n\n\t\tpanel.setProperty(\"tileWidth\", clampedWidth);\n\t\tpanel\n\t\t\t._generateAppsWrapper()\n\t\t\t.getLayout()\n\t\t\t.setProperty(\"columnSize\", `${clampedWidth / 16}rem`);\n\t}\n\n\t/**\n\t * Adjusts the layout and visibility based on the device type.\n\t *\n\t * This method adjusts the layout type and visibility of containers based on whether the device is a phone\n\t * or not. It sets the container's layout property, toggles visibility of panels and their containers, and\n\t * adjusts background design accordingly.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tpublic adjustLayout(): void {\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst selectedPanel = this._getSelectedPanel() as BaseAppPanel;\n\t\tthis.setTileWidth(selectedPanel);\n\n\t\t//hide actions if the device is a phone\n\t\tthis.toggleActionButtons(!isPhone);\n\n\t\tconst panels = this.getContent() as BaseAppPanel[];\n\t\tpanels.forEach((panel) => {\n\t\t\t//if both the panels are dirty, then updated data will be loaded from onBeforeRendering, as layout change will trigger re-rendering\n\t\t\t//if both the panels are not dirty, i.e. doen't have any changes, then just toggle the visibility\n\t\t\tif (!panel.isDirty() && !panel.isMobileDirty()) {\n\t\t\t\tthis._updatePanelContentVisibility(panel);\n\t\t\t} else if (panel.isDirty() !== panel.isMobileDirty()) {\n\t\t\t\t//if one of the panels is dirty i.e. have updated data and other is not, then re-create the inner controls\n\t\t\t\tif (isPhone) {\n\t\t\t\t\tpanel.setMobileViewDirty(false);\n\t\t\t\t} else {\n\t\t\t\t\tpanel.setDesktopViewDirty(false);\n\t\t\t\t}\n\t\t\t\tthis._updatePanelContent(panel);\n\t\t\t}\n\t\t});\n\n\t\t//this is to handle scenario when unsupported propert is changed and then layout is changed.\n\t\tthis._removeUnsupportedPanels();\n\t}\n\n\t/**\n\t * Generates mobile card panel and add given apps/groups in the panel.\n\t *\n\t * @private\n\t * @param {BaseApp[]} items - Apps/Groups for which card panels has to be generated.\n\t * @param {string} currentPanelId - ID of the current panel.\n\t * @returns {sap.m.Panel} The newly created mobile card panel.\n\t */\n\tprivate _generateMobileCards(items: BaseApp[], currentPanelId?: string): Panel[] {\n\t\tconst panels: Panel[] = [];\n\t\tfor (let i = 0; i < items.length; i += 7) {\n\t\t\tconst panelItems = items.slice(i, i + 7);\n\t\t\tconst panel = new Panel(`${currentPanelId}--${i}`, {\n\t\t\t\tbackgroundDesign: BackgroundDesign.Solid,\n\t\t\t\theight: \"23.5rem\",\n\t\t\t\twidth: \"17rem\",\n\t\t\t\tcontent: this._generateTiles(panelItems)\n\t\t\t}).addStyleClass(\"sapUiMobileAppsCard appPanelBorder myAppMFBContent\");\n\t\t\tpanels.push(panel);\n\t\t}\n\t\treturn panels;\n\t}\n\n\t/**\n\t * Generates group/app generic tiles for given apps/groups.\n\t *\n\t * @private\n\t * @param {BaseApp[]} items - Apps/Groups for which tiles has to be generated.\n\t * @returns {sap.m.GenericTile[]} The generated tiles.\n\t */\n\tprivate _generateTiles(items: BaseApp[]): GenericTile[] {\n\t\treturn items.map((item) => (item instanceof Group ? this._getGroupTile(item) : this._getAppTile(item as App)));\n\t}\n\n\t/**\n\t * Adds given items into the wrapper.\n\t * @param {HeaderContainer | GridContainer} wrapper - wrapper for which items has to be added.\n\t * @param {Panel[] | GenericTile[]} items - items to be added.\n\t * @param {string} aggregationName - aggregation name to which items has to be added.\n\t * @private\n\t */\n\tprivate _addWrapperContent(wrapper: HeaderContainer | GridContainer, items: Panel[] | GenericTile[], aggregationName: string) {\n\t\twrapper.destroyAggregation(aggregationName);\n\t\titems.forEach((item) => {\n\t\t\twrapper.addAggregation(aggregationName, item);\n\t\t});\n\t}\n\n\t/**\n\t * Displays an error card in the provided panel.\n\t *\n\t * @param panel - The panel in which the error card should be displayed.\n\t */\n\tprivate showErrorCard(panel: BaseAppPanel): void {\n\t\tconst errorCard = panel._generateErrorMessage();\n\t\tconst appsWrapper = panel._generateDesktopAppsWrapper();\n\t\tconst mobileAppsWrapper = panel._generateMobileAppsWrapper();\n\t\tappsWrapper?.setVisible(false);\n\t\tmobileAppsWrapper?.setVisible(false);\n\t\terrorCard?.setVisible(true);\n\t}\n\n\t/**\n\t * Retrieves the generic placeholder content for the Apps container.\n\t *\n\t * @returns {string} The HTML string representing the Apps container's placeholder content.\n\t */\n\tprotected getGenericPlaceholderContent(): string {\n\t\treturn getAppsPlaceholder();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}