{"version":3,"file":"NewsPanel.js","names":["sap","ui","define","Log","GenericTile","SlideTile","sap_m_library","EventBus","DateFormat","XMLModel","Container","__BaseLayout","__BaseNewsPanel","__MenuItem","__NewsGroup","__NewsItem","___library","___utils_Constants","___utils_DataFormatUtils","___utils_Device","___utils_FESRUtil","__HttpHelper","__PersonalisationUtils","__UshellPersonalizer","_interopRequireDefault","obj","__esModule","default","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","Priority","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","BaseLayout","_catch","recover","BaseNewsPanel","MenuItem","NewsGroup","NewsItem","NewsType","DEFAULT_NEWS_PLACEHOLDER","DEFAULT_NEWS_URL","recycleId","DeviceType","addFESRId","HttpHelper","PersonalisationUtils","UshellPersonalizer","BASE_URL","NEWS_FEED_READ_API","NEWS_FEED_TRANSLATION_API","DEFAULT_FEED_COUNT","NEWS_HEIGHT","LargeDesktop","XLargeDesktop","Desktop","Tablet","Mobile","fnImagePlaceholder","sPath","N","Array","from","length","i","CUSTOM_NEWS_FEED","TITLE","LINK","VALIDITY","PREPARATION_REQUIRED","EXCLUDE_FIELDS","IMAGE_URL","FESR_STEP_NAME","EMPTY_DATA_ERROR_CODE","CUSTOM_IMAGES","Finance","Manufacturing","Sales","NewsPanel","extend","metadata","library","properties","url","type","group","defaultValue","visibility","Default","customFeedKey","customFileName","newsAvailable","supportedFileFormats","aggregations","newsGroup","singularName","multiple","constructor","_constructor","id","settings","BaseNewsPanel.prototype.constructor.call","_defaultNewsPromise","_noUpdatesNewsFeed","customNewsFeedCache","Map","init","_init","BaseNewsPanel.prototype.init.call","deviceType","getDeviceType","oNewsTile","getId","displayTime","width","height","tiles","mode","frameType","addStyleClass","getNewsWrapper","addContent","setProperty","_i18nBundle","getText","_eventBus","getInstance","oManageMenuItem","title","icon","press","handleEditNews","visible","setManageNewsItemVisibility","addAggregation","getData","_getData","_exit","_temp9","_result","fireEvent","adjustLayout","sUrl","getUrl","showCustom","getProperty","Custom","showDefault","showRssAtom","NewsUrl","mandatoryNewsFeed","fetchedFeedUrl","Promise","resolve","endUserChange","getParent","getIsEndUserChange","_temp8","isEndUser","fetch","response","ok","Error","status","contentType","headers","get","_temp","includes","json","_response$json","_endUserResponse","setNewsFeedFromUrl","newsType","initializeXmlModel","_this$initializeXmlMo","oNewsModel","setModel","setVisible","_temp7","_temp5","bNewsLoad","setDefaultNews","_temp4","_this$initializeXmlMo2","_temp3","sCustomNewsFeedKey","getCustomFeedKey","_temp2","setCustomNewsFeed","handleFeedError","_temp6","persDataNewsFeed","setPersDataNewsFeed","_setDefaultNews","_this2","defaultUrl","generateErrorMessage","_setManageNewsItemVisibility","isParentBaseLayout","_isParentBaseLayout","parentContainer","parentLayout","_getLayout","setPressEnabledForNewsGroup","_setPressEnabledForNewsGroup","feeds","newsGroups","getAggregation","isArray","groupDetailsMap","groupHasDescription","_defaultNewsResponse","forEach","description","trim","removeInlineStylesFromDescription","group_id","articles","_group_to_article","hasDescription","article","newsGroupMap","filter","groupId","getCurrentNewsGroup","feed","getTile","_removeInlineStylesFromDescription","replace","_getCurrentNewsGroup","newsGroupList","idParts","split","undefined","find","_getCustomFeedKey","_getUrl","_initializeXmlModel","_this3","oParent","setDefaultBindingMode","attachRequestCompleted","oEvent","panelLoadedFn","loaded","count","oDocument","getSource","loadNewsFeed","publish","showError","date","Date","attachRequestFailed","_loadNewsFeed","noOfFeeds","_this4","_temp1","querySelector","oBindingInfo","path","destroyAggregation","bindNewsTile","_temp0","extractAllImageUrls","_handleFeedError","getNewsType","setManageNewsButtonVisibility","setURL","_setURL","_this5","_adjustLayout","setHeight","setWidth","removeStyleClass","_bindNewsTile","oSlideTile","bindAggregation","templateShareable","factory","sId","oContext","newsInfo","getObject","oTile","getElementsByTagName","String","getPropertyValue","subTitle","imageUrl","footer","formatDate","sGroupId","newsId","subTitleNews","priority","priorityText","_getPropertyValue","propertyName","textContent","_extractAllImageUrls","_this6","_temp10","oItemElement","extractImage","oImageUrl","createElement","appendChild","_formatDate","timeStamp","relativeDateFormatter","getDateTimeInstance","style","relative","relativeStyle","format","getPersDataNewsFeed","_getPersDataNewsFeed","_extractImage","sHrefLink","fnLoadPlaceholderImage","sPrefix","require","toUrl","image","res","text","sHTML","aMatches","match","catch","_getNewsType","isCSVFileFormat","_isCSVFileFormat","fileName","pop","toLowerCase","_setPersDataNewsFeed","defaultFeed","_this7","_getUserPersonalization","personalizer","read","persData","defaultNewsFeed","favNewsFeed","_setNewsFeedFromUrl","data","_this8","item","_temp12","_temp11","_setCustomNewsFeed","sFeedId","_this9","feedType","isDefaultNews","showAllPrepRequired","showAllPreparationRequired","push","showPrep","getCustomOrDefaultNewsFeed","newsFeeds","selectedItems","items","isSelectedEmpty","loadCustomNewsFeed","err","error","filterMandatoryNews","_filterMandatoryNews","mandatory_text","mandatory","toUpperCase","markGroupsWithCriticalArticles","_markGroupsWithCriticalArticles","criticalArticle","getDefaultNewsFeedDetails","_getDefaultNewsFeedDetails","newsResponse","newsFeedItems","JSON","parse","stringify","defaultNews","defaultFeedDict","map","oFeed","footer_text","getDefaultFeedImage","Medium","None","getMandatoryDefaultNewsFeed","_getMandatoryDefaultNewsFeed","getDefaultNewsResponse","_getDefaultNewsResponse","fetchDefaultNews","getNoUpdatesPlaceholder","_getNoUpdatesPlaceholder","placeholderTitle","placeholderDescription","enrichedNewsPlaceholder","isNoUpdatesNewsFeed","_isNoUpdatesNewsFeed","_fetchDefaultNews","_this0","getServiceAsync","navigationService","isNavigationSupported","target","semanticObject","action","supported","_exit2","_temp14","_result4","_temp13","_response$json2","_getCustomOrDefaultNewsFeed","_this1","aDefaultgroups","getCustomFeedData","_getCustomFeedData","_this10","newsDetailUrl","isEnduser","getNewsFeedDetailsUrl","changeId","has","set","getAuthNewsFeed","_this10$customNewsFee","authorizedNewsFeeds","oFeedDict","aFeeds","getCustomFeedImage","_getNewsFeedDetailsUrl","oNews","_getAuthNewsFeed","sNewsUrl","newsTitle","_this11","all","getAllAvailableApps","getNewsFeedDetails","aAvailableApps","aNewsFeed","arrangeNewsFeeds","_arrangeNewsFeeds","aAuthNewsFeed","oNewsFeed","Category","ImpactedArtifacts","aImpactedArtifacts","impactedArtifact","oImpactedArtifact","isAuthFeed","_isAuthFeed","fioriIdSplitter","aTokens","sFioriId","index","findIndex","oApp","signature","parameters","_getAllAvailableApps","oService","_oAdapter","_aInbounds","message","_getNewsFeedDetails","_exit3","_this12","_temp16","_result6","fnFormattedLabel","sLabel","GetJSON","getTranslatedText","translationResponse","aNews","aTranslation","filterNewsOnTitle","aFields","Object","keys","aExpandFields","oField","oTranslatedField","oTranslation","ColumnName","oTranslatedFieldName","TranslatedName","label","Link","expanded","expandFields","_temp15","newsFeedDetails","_this12$filterNewsOnT","_filterNewsOnTitle","newsDetail","LineOfBusiness","_getTranslatedText","_loadCustomNewsFeed","_this13","oXMLResponse","parseJsonToXml","unbindAggregation","setData","_parseJsonToXml","_transformJsonForXml","aData","_jsonToXml","xml","key","transformedJson","rootToken","replaceAll","parser","DOMParser","parseFromString","_getCustomFeedImage","sFileName","sFileBasePath","sFilePath","files","randomIndex","randomArray","window","Uint32Array","crypto","getRandomValues","_getDefaultFeedImage","imgId","bg_image_id","groupImg","_group_to_image","getRandomDefaultImage","random","Math","floor","image_id","bg_image","mimeType","mime_type","groupBgImg","isValidBase64","base64Data","base64UrlToBase64","_base64UrlToBase","base64Url","base64","_isValidBase","input","base64Regex","paddingIndex","indexOf","lastPaddingIndex","lastIndexOf","persContainerId","getPersContainerId","ownerComponent","getOwnerComponent"],"sources":["NewsPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport SlideTile from \"sap/m/SlideTile\";\nimport { FrameType, Priority } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Component from \"sap/ui/core/Component\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport XMLModel from \"sap/ui/model/xml/XMLModel\";\nimport Container from \"sap/ushell/Container\";\nimport Navigation from \"sap/ushell/services/Navigation\";\nimport BaseLayout from \"./BaseLayout\";\nimport type { $BaseNewsPanelSettings } from \"./BaseNewsPanel\";\nimport BaseNewsPanel from \"./BaseNewsPanel\";\nimport MenuItem from \"./MenuItem\";\nimport NewsAndPagesContainer from \"./NewsAndPagesContainer\";\nimport NewsGroup from \"./NewsGroup\";\nimport NewsItem from \"./NewsItem\";\nimport { NewsType } from \"./library\";\nimport { DEFAULT_NEWS_PLACEHOLDER, DEFAULT_NEWS_URL } from \"./utils/Constants\";\nimport { recycleId } from \"./utils/DataFormatUtils\";\nimport { DeviceType } from \"./utils/Device\";\nimport { addFESRId } from \"./utils/FESRUtil\";\nimport HttpHelper from \"./utils/HttpHelper\";\nimport PersonalisationUtils from \"./utils/PersonalisationUtils\";\nimport UshellPersonalizer from \"./utils/UshellPersonalizer\";\n\ninterface IBindingInfo {\n\tpath: string;\n\tlength: number;\n}\n\ninterface INewsResponse {\n\tvalue: INewsFeed[];\n}\n\nexport interface INewsFeed {\n\ttitle: string;\n\tsubTitle?: string;\n\tdescription?: string;\n\tfooter_text?: string;\n\tmandatory_text?: string;\n\tmandatory?: string;\n\t_group_to_image?: Record<string, string>;\n\t_group_to_article?: INewsFeed[];\n\tpriority?: string;\n\tgroup_id?: string;\n\t[key: string]: unknown;\n}\n\nexport interface INewsItem {\n\tchangeId: string;\n\ttitle?: string;\n\tshowAllPreparationRequired?: boolean;\n}\n\ninterface ITranslatedText {\n\tColumnName?: string;\n\tTranslatedName?: string;\n}\n\ninterface IAppConfiguration {\n\t_oAdapter: {\n\t\t_aInbounds: IAvailableApp[];\n\t};\n}\n\ninterface ODataResponse {\n\t\"@odata.context\": string;\n\t\"@odata.metadataEtag\": string;\n\tvalue: INewsFeed[];\n}\n\ninterface IAvailableApp {\n\tsemanticObject?: string;\n\taction?: string;\n\tid?: string;\n\ttitle?: string;\n\tpermanentKey?: string;\n\tcontentProviderId?: string;\n\tresolutionResult?: {\n\t\t[key: string]: string;\n\t};\n\tdeviceTypes?: {\n\t\t[key: string]: boolean;\n\t};\n\tsignature: {\n\t\tparameters: {\n\t\t\t[key: string]: IAppParameter;\n\t\t};\n\t\tadditionalParameters?: string;\n\t};\n}\n\ninterface IAppParameter {\n\tdefaultValue?: {\n\t\tvalue: string;\n\t\tformat: string;\n\t};\n\trequired: boolean;\n}\ninterface IPersDataNewsFeed {\n\titems: string[];\n\tshowAllPreparationRequired?: boolean;\n}\ninterface INewsGroupMap {\n\t[key: string]: NewsGroup;\n}\n\ninterface IGroupDetailsMap {\n\t[key: string]: INewsFeed[];\n}\n\nexport interface INewsLink {\n\t[key: string]: string;\n}\n\nexport interface INewsParam {\n\t[key: string]: { [key: string]: string };\n}\n\nexport type FileFormat = \"xlsx\" | \"csv\";\n\nconst BASE_URL = \"/sap/opu/odata4/ui2/insights_srv/srvd/ui2/\",\n\tNEWS_FEED_READ_API = BASE_URL + \"insights_read_srv/0001/\" + \"NEWS_FEED\",\n\tNEWS_FEED_TRANSLATION_API = BASE_URL + \"insights_read_srv/0001/\" + \"NewsFeedColumnTranslation\",\n\tDEFAULT_FEED_COUNT = 7,\n\tNEWS_HEIGHT = {\n\t\tLargeDesktop: \"17rem\",\n\t\tXLargeDesktop: \"17rem\",\n\t\tDesktop: \"17rem\",\n\t\tTablet: \"14rem\",\n\t\tMobile: \"11rem\"\n\t},\n\tfnImagePlaceholder = function (sPath: string, N: number) {\n\t\treturn Array.from({ length: N }, function (v, i) {\n\t\t\treturn sPath + \"/\" + (i + 1) + \".jpg\";\n\t\t});\n\t};\n\nconst CUSTOM_NEWS_FEED = {\n\t\tTITLE: \"LineOfBusiness\",\n\t\tLINK: \"WhatsNewDocument\",\n\t\tVALIDITY: \"ValidAsOf\",\n\t\tPREPARATION_REQUIRED: \"PreparationRequired\",\n\t\tEXCLUDE_FIELDS: [\n\t\t\t\"ChangeId\",\n\t\t\t\"LineNumber\",\n\t\t\t\"LineOfBusiness\",\n\t\t\t\"SolutionArea\",\n\t\t\t\"Title\",\n\t\t\t\"Description\",\n\t\t\t\"Type\",\n\t\t\t\"ValidAsOf\",\n\t\t\t\"WhatsNewDocument\",\n\t\t\t\"Link\"\n\t\t],\n\t\tIMAGE_URL: \"sap/cux/home/img/CustomNewsFeed/\",\n\t\tFESR_STEP_NAME: \"custNewsSlide-press\",\n\t\tEMPTY_DATA_ERROR_CODE: \"NODATA\"\n\t},\n\tCUSTOM_IMAGES: { [key: string]: string[] } = {\n\t\t\"Application Platform and Infrastructure\": fnImagePlaceholder(\"ApplicationPlatformandInfrastructure\", 3),\n\t\t\"Asset Management\": fnImagePlaceholder(\"AssetManagement\", 3),\n\t\t\"Cross Applications\": fnImagePlaceholder(\"CrossApplications\", 3),\n\t\tFinance: fnImagePlaceholder(\"Finance\", 3),\n\t\tManufacturing: fnImagePlaceholder(\"Manufacturing\", 3),\n\t\t\"R&D / Engineering\": fnImagePlaceholder(\"RnDandEngineering\", 3),\n\t\tSales: fnImagePlaceholder(\"Sales\", 3),\n\t\t\"Sourcing and Procurement\": fnImagePlaceholder(\"SourcingandProcurement\", 3),\n\t\t\"Supply Chain\": fnImagePlaceholder(\"SupplyChain\", 3),\n\t\tdefault: [\"default.jpg\"]\n\t};\n\n/**\n *\n * Panel class for managing and storing News.\n *\n * @extends sap.cux.home.BaseNewsPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.NewsPanel\n */\nexport default class NewsPanel extends BaseNewsPanel {\n\tprivate oNewsTile!: SlideTile;\n\tprivate oNewsModel!: XMLModel;\n\tprivate oManageMenuItem!: MenuItem;\n\tprivate image!: number;\n\tprivate customNewsFeedCache: Map<string, unknown>;\n\tprivate bNewsLoad!: boolean;\n\tprivate persDataNewsFeed!: IPersDataNewsFeed; // hold the fav news feed for custom news and unselected group ids for default news\n\tprivate _eventBus!: EventBus;\n\tprivate _defaultNewsResponse!: ODataResponse;\n\tprivate mandatoryNewsFeed!: string[];\n\tprivate _defaultNewsPromise: Promise<ODataResponse> | null = null;\n\tprivate fetchedFeedUrl!: string;\n\tprivate defaultUrl!: string;\n\tprivate _noUpdatesNewsFeed: boolean = false; // flag to check if no updates news tile is shown or not\n\tprivate _endUserResponse!: ODataResponse;\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * The URL of the news item.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\turl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Type of the news item.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\ttype: {\n\t\t\t\ttype: \"sap.cux.home.NewsType\",\n\t\t\t\tgroup: \"Misc\",\n\t\t\t\tvisibility: \"hidden\",\n\t\t\t\tdefaultValue: NewsType.Default\n\t\t\t},\n\t\t\t/**\n\t\t\t * The key of custom news feed.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tcustomFeedKey: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * The filename of custom news feed.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tcustomFileName: { type: \"string\", group: \"Misc\", defaultValue: \"\" },\n\t\t\t/**\n\t\t\t * The flag to determine rss feed will load or not.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tnewsAvailable: { type: \"boolean\", group: \"Misc\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Supported file formats for news.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tsupportedFileFormats: { type: \"FileFormat[]\", group: \"Misc\", defaultValue: [\"xlsx\"], visibility: \"hidden\" }\n\t\t},\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * newsGroup aggregation for News\n\t\t\t */\n\t\t\tnewsGroup: { type: \"sap.cux.home.NewsGroup\", singularName: \"newsGroup\", multiple: true, visibility: \"hidden\" }\n\t\t}\n\t};\n\n\tconstructor(idOrSettings?: string | $BaseNewsPanelSettings);\n\tconstructor(id?: string, settings?: $BaseNewsPanelSettings);\n\t/**\n\t * Constructor for a new News Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseNewsPanelSettings) {\n\t\tsuper(id, settings);\n\t\tthis.customNewsFeedCache = new Map();\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tconst deviceType = this.getDeviceType();\n\n\t\tthis.oNewsTile = new SlideTile(this.getId() + \"--idNewsSlide\", {\n\t\t\tdisplayTime: 20000,\n\t\t\twidth: \"100%\",\n\t\t\theight: NEWS_HEIGHT[deviceType as keyof typeof NEWS_HEIGHT],\n\t\t\ttiles: [\n\t\t\t\tnew GenericTile(this.getId() + \"--placeholder\", {\n\t\t\t\t\tstate: \"Loading\",\n\t\t\t\t\tmode: \"ArticleMode\",\n\t\t\t\t\tframeType: \"Stretch\" as FrameType\n\t\t\t\t})\n\t\t\t]\n\t\t}).addStyleClass(\"newsTileMaxWidth sapUiSmallMarginTop\");\n\t\taddFESRId(this.oNewsTile, \"newsSlidePress\");\n\t\tthis.getNewsWrapper().addContent(this.oNewsTile);\n\t\tthis.getNewsWrapper().addStyleClass(\"newsWrapper\");\n\t\tthis.setProperty(\"title\", this._i18nBundle.getText(\"newsTitle\"));\n\t\tthis._eventBus = EventBus.getInstance();\n\n\t\tthis.oManageMenuItem = new MenuItem(`${this.getId()}-manageNews`, {\n\t\t\ttitle: this._i18nBundle.getText(\"mngNews\"),\n\t\t\ticon: \"sap-icon://edit\",\n\t\t\tpress: this.handleEditNews.bind(this),\n\t\t\tvisible: this.setManageNewsItemVisibility()\n\t\t});\n\t\tthis.addAggregation(\"menuItems\", this.oManageMenuItem);\n\t\taddFESRId(this.oManageMenuItem, \"manageNews\");\n\t}\n\n\t/**\n\t * Retrieves news data asynchronously.\n\t * If the news model is not initialized, it initializes the XML model and loads news feed data.\n\t * @private\n\t * @returns {Promise} A promise that resolves when the news data is retrieved.\n\t */\n\tpublic async getData() {\n\t\tlet sUrl: string = this.getUrl();\n\t\tlet showCustom = this.getProperty(\"type\") === NewsType.Custom;\n\t\tlet showDefault = this.getProperty(\"type\") === NewsType.Default;\n\t\tlet showRssAtom = this.getProperty(\"type\") === NewsType.NewsUrl;\n\n\t\tthis.mandatoryNewsFeed = [];\n\t\tif (this.fetchedFeedUrl && this.fetchedFeedUrl === sUrl) {\n\t\t\treturn;\n\t\t}\n\t\tconst endUserChange = (this.getParent() as NewsAndPagesContainer).getIsEndUserChange();\n\t\tif (endUserChange.isEndUser) {\n\t\t\t//url scenario (developer side)\n\t\t\tconst response = await fetch(sUrl);\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (contentType && contentType.includes(\"application/json\")) {\n\t\t\t\tthis._endUserResponse = (await response.json()) as ODataResponse;\n\t\t\t\tawait this.setNewsFeedFromUrl(this._endUserResponse?.value);\n\t\t\t} else {\n\t\t\t\tendUserChange.newsType = NewsType.NewsUrl;\n\t\t\t\tthis.oNewsModel = await this.initializeXmlModel(sUrl);\n\t\t\t\tthis.oNewsTile.setModel(this.oNewsModel);\n\t\t\t\tthis.oManageMenuItem.setVisible(false);\n\t\t\t}\n\t\t} else {\n\t\t\t//key user scenarios\n\t\t\tif (!this.persDataNewsFeed) {\n\t\t\t\tawait this.setPersDataNewsFeed(showDefault);\n\t\t\t}\n\t\t\tif (showDefault) {\n\t\t\t\t//default news scenario\n\t\t\t\tthis.bNewsLoad = this.bNewsLoad || false;\n\t\t\t\tawait this.setDefaultNews();\n\t\t\t} else if (sUrl && showRssAtom) {\n\t\t\t\t//rss feed scenario\n\t\t\t\tthis.oNewsModel = await this.initializeXmlModel(sUrl);\n\t\t\t\tthis.oNewsTile.setModel(this.oNewsModel);\n\t\t\t\tthis.oManageMenuItem.setVisible(false);\n\t\t\t} else if (showCustom) {\n\t\t\t\t//custom news scenario\n\t\t\t\tthis.bNewsLoad = this.bNewsLoad || false;\n\t\t\t\tthis.oManageMenuItem.setVisible(true);\n\t\t\t\tconst sCustomNewsFeedKey = this.getCustomFeedKey();\n\t\t\t\tif (sCustomNewsFeedKey) {\n\t\t\t\t\tawait this.setCustomNewsFeed(sCustomNewsFeedKey);\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleFeedError();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.handleFeedError();\n\t\t\t}\n\t\t}\n\t\tthis.fireEvent(\"loaded\");\n\t\tthis.adjustLayout();\n\t}\n\n\t/**\n\t * Set default news feed based on the showDefault property.\n\t * @param {boolean} showDefault - Indicates whether to show the default news feed.\n\t * @param {boolean} [isKeyUserChange=false] - Indicates if the change is made by a key user.\n\t * @private\n\t */\n\tpublic async setDefaultNews() {\n\t\t// default news scenario, if url property is passed or showDefault is true\n\n\t\tlet sUrl: string = this.getUrl();\n\t\tconst isEndUser = (this.getParent() as NewsAndPagesContainer).getIsEndUserChange().isEndUser;\n\t\tthis.defaultUrl = isEndUser ? sUrl : DEFAULT_NEWS_URL;\n\t\tthis.fetchedFeedUrl = this.defaultUrl;\n\n\t\t//reset properties\n\t\tthis.setProperty(\"newsAvailable\", true);\n\t\tthis.generateErrorMessage().setVisible(false);\n\t\tthis.setVisible(true);\n\t\tthis.oManageMenuItem.setVisible(true);\n\t\tthis.setManageNewsItemVisibility(true);\n\n\t\tawait this.setCustomNewsFeed(\"\");\n\t}\n\t/**\n\t * Set the visibility of the manage news item in the menu.\n\t * @param visible - A boolean indicating whether the manage news item should be visible or not.\n\t */\n\tprivate setManageNewsItemVisibility(visible: boolean = true): boolean {\n\t\tif (this.isParentBaseLayout() && this.oManageMenuItem) {\n\t\t\tthis.oManageMenuItem.setVisible(visible);\n\t\t\treturn visible;\n\t\t}\n\t\tthis.oManageMenuItem?.setVisible(false);\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if the parent container layout is of BaseLayout.\n\t * @returns {boolean} True if the parent container layout is a BaseLayout, otherwise false.\n\t * @private\n\t */\n\tprivate isParentBaseLayout(): boolean {\n\t\tconst parentContainer = this.getParent() as NewsAndPagesContainer;\n\t\tconst parentLayout = parentContainer?._getLayout();\n\t\treturn !!(parentLayout && parentLayout instanceof BaseLayout);\n\t}\n\n\t/**\n\t * Set the pressEnabled property for news groups based on the feed articles.\n\t * If no description is found in any of the articles within a group, the pressEnabled property is set to false.\n\t * @param feeds - An array of news feeds to check for descriptions.\n\t * @returns {void}\n\t */\n\tprivate setPressEnabledForNewsGroup(feeds: INewsFeed[] = []) {\n\t\tconst newsGroups = this.getAggregation(\"newsGroup\") as NewsGroup[] | undefined;\n\t\tif (!Array.isArray(newsGroups)) return;\n\n\t\t// Build groupDetailsMap for group details to avoid multiple iterations and clean up descriptions by removing inline styles if any\n\t\tconst groupDetailsMap: IGroupDetailsMap = {};\n\t\tconst groupHasDescription: Record<string, boolean> = {};\n\n\t\t(this._defaultNewsResponse.value || []).forEach((group) => {\n\t\t\t// Clean group description\n\t\t\tif (group?.description && group.description.trim().length > 0) {\n\t\t\t\tgroup.description = this.removeInlineStylesFromDescription(group.description);\n\t\t\t}\n\t\t\tif (group?.group_id) {\n\t\t\t\tconst articles = group._group_to_article || [];\n\t\t\t\t// Clean article descriptions and check if any article has a valid description\n\t\t\t\tlet hasDescription = false;\n\t\t\t\tarticles.forEach((article: INewsFeed) => {\n\t\t\t\t\tif (article?.description && article.description.trim().length > 0) {\n\t\t\t\t\t\tarticle.description = this.removeInlineStylesFromDescription(article.description);\n\t\t\t\t\t\thasDescription = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tgroupDetailsMap[group.group_id] = articles;\n\t\t\t\tgroupHasDescription[group.group_id] = hasDescription;\n\t\t\t}\n\t\t});\n\n\t\tconst newsGroupMap: INewsGroupMap = {};\n\t\t// Iterate through the news groups and map group IDs to NewsGroup instances\n\t\tnewsGroups\n\t\t\t.filter((group) => group instanceof NewsGroup)\n\t\t\t.forEach((group) => {\n\t\t\t\tconst groupId = this.getCurrentNewsGroup(group.getId())?.group_id;\n\t\t\t\tif (groupId) {\n\t\t\t\t\tnewsGroupMap[groupId] = group;\n\t\t\t\t}\n\t\t\t});\n\n\t\t//  If no description is found in any of the articles within the group,\n\t\t// \tdisable the pressEnabled property for the news group to prevent user interaction.\n\t\tfeeds.forEach((feed) => {\n\t\t\tif (!feed.group_id) return;\n\t\t\tconst newsGroup = newsGroupMap[feed.group_id];\n\t\t\tif (newsGroup && !groupHasDescription[feed.group_id]) {\n\t\t\t\tnewsGroup.getTile()?.setProperty(\"pressEnabled\", false);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param description - The description from which inline styles need to be removed.\n\t * @returns {string} The description with inline styles removed.\n\t */\n\tprivate removeInlineStylesFromDescription(description: string): string {\n\t\treturn description.replace(/\\s*style\\s*=\\s*(['\"])[\\s\\S]*?\\1/gi, \"\");\n\t}\n\n\t/**\n\t * Retrieves the current news group data based on the provided id.\n\t *\n\t * @param id - The group ID\n\t * @returns The news group object that matches the extracted group ID, or `undefined`\n\t *          if no matching group is found.\n\t * @private\n\t */\n\tpublic getCurrentNewsGroup(id: string) {\n\t\tconst newsGroupList = this._defaultNewsResponse?.value;\n\t\tconst idParts = id.split(\"-newsgroup-\");\n\t\tconst groupId = idParts.length > 1 ? idParts[1] : null;\n\n\t\tif (!groupId || !newsGroupList) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn groupId === \"placeholderNews\" ? newsGroupList[0] : newsGroupList.find((group) => group.group_id === groupId);\n\t}\n\n\t/**\n\t * Returns the custom news feed key property of NewsPanel\n\t * @returns {string} custom news feed key\n\t */\n\tpublic getCustomFeedKey(): string {\n\t\treturn this.getProperty(\"customFeedKey\") as string;\n\t}\n\n\t/**\n\t * Returns the Url property of NewsPanel\n\t * @returns {any}\n\t */\n\tpublic getUrl(): string {\n\t\treturn this.getProperty(\"url\") as string;\n\t}\n\n\t/**\n\t * Initializes an XML model for managing news data.\n\t * This method returns a Promise that resolves to the initialized XML model.\n\t */\n\n\t/**\n\t * Initializes an XML model for managing news data.\n\t * This method returns a Promise that resolves to the initialized XML model.\n\t * @param {string} sUrl rss url to load the news feed\n\t * @returns {Promise<XMLModel>} XML Document containing the news feeds\n\t */\n\tprivate async initializeXmlModel(sUrl: string): Promise<XMLModel> {\n\t\tconst oParent = this.getParent() as NewsAndPagesContainer;\n\t\treturn new Promise((resolve) => {\n\t\t\tconst oNewsModel = new XMLModel(sUrl);\n\t\t\tthis.fetchedFeedUrl = sUrl;\n\t\t\toNewsModel.setDefaultBindingMode(\"OneWay\");\n\t\t\toNewsModel.attachRequestCompleted((oEvent: Event) => {\n\t\t\t\tvoid (async () => {\n\t\t\t\t\tif (!this.bNewsLoad) {\n\t\t\t\t\t\toParent?.panelLoadedFn(\"News\", { loaded: true, count: DEFAULT_FEED_COUNT });\n\t\t\t\t\t\tthis.bNewsLoad = true;\n\t\t\t\t\t}\n\t\t\t\t\tconst oDocument = oEvent.getSource<XMLModel>().getData() as XMLDocument;\n\t\t\t\t\tawait this.loadNewsFeed(oDocument, 0);\n\t\t\t\t\tthis._eventBus.publish(\"KeyUserChanges\", \"newsFeedLoadFailed\", { showError: false, date: new Date() });\n\t\t\t\t\tresolve(oNewsModel);\n\t\t\t\t})();\n\t\t\t});\n\t\t\toNewsModel.attachRequestFailed(() => {\n\t\t\t\tthis.handleFeedError();\n\t\t\t\tif (!this.bNewsLoad) {\n\t\t\t\t\toParent?.panelLoadedFn(\"News\", { loaded: false, count: 0 });\n\t\t\t\t\tthis.bNewsLoad = true;\n\t\t\t\t}\n\t\t\t\tthis._eventBus.publish(\"KeyUserChanges\", \"newsFeedLoadFailed\", { showError: true, date: new Date() });\n\t\t\t\tresolve(oNewsModel);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Loads the news feed based on the provided document and number of feeds.\n\t * Determines the feed type (RSS, feed, custom) and binds the news tile accordingly.\n\t * @param {Document} oDocument - The document containing the news feed data.\n\t * @param {number} [noOfFeeds] - The number of feeds to be displayed. Defaults to a predefined value.\n\t */\n\tprivate async loadNewsFeed(oDocument: Document, noOfFeeds: number) {\n\t\tlet oBindingInfo: IBindingInfo;\n\t\tif (!oDocument?.querySelector(\"customFeed\") && !oDocument?.querySelector(\"defaultFeed\")) {\n\t\t\tawait this.extractAllImageUrls(oDocument, noOfFeeds || DEFAULT_FEED_COUNT);\n\t\t}\n\n\t\tif (!!oDocument?.querySelector(\"rss\") && !!oDocument?.querySelector(\"item\")) {\n\t\t\toBindingInfo = {\n\t\t\t\tpath: \"/channel/item/\",\n\t\t\t\tlength: noOfFeeds || DEFAULT_FEED_COUNT\n\t\t\t};\n\t\t} else if (!!oDocument?.querySelector(\"atom\") && !!oDocument?.querySelector(\"entry\")) {\n\t\t\toBindingInfo = {\n\t\t\t\tpath: \"/entry/\",\n\t\t\t\tlength: noOfFeeds || DEFAULT_FEED_COUNT\n\t\t\t};\n\t\t} else if (\n\t\t\t(!!oDocument?.querySelector(\"customFeed\") || !!oDocument?.querySelector(\"defaultFeed\")) &&\n\t\t\t!!oDocument?.querySelector(\"item\")\n\t\t) {\n\t\t\tthis.destroyAggregation(\"newsGroup\");\n\t\t\toBindingInfo = {\n\t\t\t\tpath: \"/item/\",\n\t\t\t\tlength: noOfFeeds || DEFAULT_FEED_COUNT\n\t\t\t};\n\t\t} else {\n\t\t\tthis.handleFeedError();\n\t\t\treturn;\n\t\t}\n\t\tthis.bindNewsTile(this.oNewsTile, oBindingInfo);\n\t}\n\n\t/**\n\t * Handles errors that occur during the loading of the news feed.\n\t * @returns {void}\n\t */\n\tpublic handleFeedError(): void {\n\t\tif (this.getNewsType() === NewsType.Custom || this.getNewsType() === NewsType.Default) {\n\t\t\tthis.generateErrorMessage().setVisible(true);\n\t\t\tif (!this.isParentBaseLayout()) {\n\t\t\t\tthis.setManageNewsButtonVisibility(false);\n\t\t\t}\n\t\t\tthis.oNewsTile.setVisible(false);\n\t\t} else {\n\t\t\tthis.setVisible(false);\n\t\t\tthis.setProperty(\"newsAvailable\", false);\n\t\t\tthis.oManageMenuItem.setVisible(false);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the URL for the news tile and triggers data fetch.\n\t *\n\t * @param {string} url - The news URL to be set.\n\t * @returns {Promise<void>} A promise that resolves once data fetching is complete.\n\t *\n\t * @private\n\t */\n\tpublic async setURL(url: string) {\n\t\tthis.setProperty(\"type\", NewsType.NewsUrl);\n\t\tthis.setProperty(\"newsAvailable\", true);\n\t\tthis.generateErrorMessage().setVisible(false);\n\t\tthis.setVisible(true);\n\t\tthis.oNewsTile.setVisible(true);\n\t\tthis.setProperty(\"url\", url);\n\t\tawait this.getData();\n\t}\n\n\t/**\n\t * Adjust layout based on the device type\n\t *\n\t * @private\n\t */\n\tpublic adjustLayout() {\n\t\tconst deviceType = this.getDeviceType();\n\t\tthis.oNewsTile.setHeight(NEWS_HEIGHT[deviceType as keyof typeof NEWS_HEIGHT]);\n\n\t\tif (deviceType === DeviceType.Mobile) {\n\t\t\tthis.generateErrorMessage().setWidth(\"100%\");\n\t\t\tthis.oNewsTile.removeStyleClass(\"sapUiSmallMarginTop\");\n\t\t} else {\n\t\t\tthis.oNewsTile.addStyleClass(\"sapUiSmallMarginTop\");\n\t\t}\n\t}\n\n\t/**\n\t * Binds the news tile with the provided binding information.\n\t * @param {sap.m.SlideTile} oSlideTile - The SlideTile control to be bound.\n\t * @param {IBindingInfo} oBindingInfo - The binding information containing the path and length of the aggregation.\n\t */\n\tprivate bindNewsTile(oSlideTile: SlideTile, oBindingInfo: IBindingInfo): void {\n\t\tif (oBindingInfo) {\n\t\t\toSlideTile.bindAggregation(\"tiles\", {\n\t\t\t\tpath: oBindingInfo.path,\n\t\t\t\tlength: oBindingInfo.length,\n\t\t\t\ttemplateShareable: false,\n\t\t\t\tfactory: (sId: string, oContext: Context) => {\n\t\t\t\t\tconst newsInfo = oContext.getObject() as XMLDocument;\n\t\t\t\t\tlet oTile;\n\t\t\t\t\tif (newsInfo.getElementsByTagName(\"link\").length > 0) {\n\t\t\t\t\t\toTile = new NewsItem(recycleId(`${sId}-news-item`), {\n\t\t\t\t\t\t\turl: String(this.getPropertyValue(newsInfo, \"link\") ?? \"\"),\n\t\t\t\t\t\t\ttitle: String(this.getPropertyValue(newsInfo, \"title\") ?? \"\"),\n\t\t\t\t\t\t\tsubTitle: String(this.getPropertyValue(newsInfo, \"description\") ?? \"\"),\n\t\t\t\t\t\t\timageUrl: String(this.getPropertyValue(newsInfo, \"imageUrl\") ?? \"\"),\n\t\t\t\t\t\t\tfooter: this.formatDate(String(this.getPropertyValue(newsInfo, \"pubDate\") ?? \"\"))\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.addAggregation(\"newsItems\", oTile, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet sGroupId = this.getPropertyValue(newsInfo, \"group_id\") ?? \"\";\n\t\t\t\t\t\tlet newsId = sGroupId && sGroupId.trim() ? `${sId}-newsgroup-${sGroupId}` : `${sId}-newsgroup`;\n\t\t\t\t\t\tlet subTitleNews = this.getPropertyValue(newsInfo, \"subTitle\") ?? \"\";\n\t\t\t\t\t\toTile = new NewsGroup(recycleId(newsId), {\n\t\t\t\t\t\t\ttitle: String(this.getPropertyValue(newsInfo, \"title\") ?? \"\"),\n\t\t\t\t\t\t\tsubTitle: subTitleNews || this._i18nBundle.getText(\"newsFeedDescription\"),\n\t\t\t\t\t\t\timageUrl: String(this.getPropertyValue(newsInfo, \"imageUrl\") ?? \"\"),\n\t\t\t\t\t\t\tfooter: String(this.getPropertyValue(newsInfo, \"footer\") ?? \"\"),\n\t\t\t\t\t\t\tpriority: this.getPropertyValue(newsInfo, \"priority\") as Priority,\n\t\t\t\t\t\t\tpriorityText: String(this.getPropertyValue(newsInfo, \"priorityText\") ?? \"\")\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.addAggregation(\"newsGroup\", oTile, true);\n\t\t\t\t\t}\n\t\t\t\t\treturn oTile.getTile();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getPropertyValue(newsInfo: XMLDocument, propertyName: string) {\n\t\treturn newsInfo.getElementsByTagName(propertyName)?.[0]?.textContent;\n\t}\n\n\t/**\n\t * Extracts images for all the news tiles\n\t * @param {Document} oDocument - The document containing the news feed data.\n\t * @param {number} [noOfFeeds] - The number of feeds to be displayed. Defaults to a predefined value.\n\t */\n\tprivate async extractAllImageUrls(oDocument: Document, noOfFeeds: number) {\n\t\tfor (let i = 0; i < noOfFeeds; i++) {\n\t\t\tconst oItemElement = oDocument?.getElementsByTagName(\"item\")[i];\n\t\t\tconst sUrl: string = await this.extractImage(String(oItemElement.getElementsByTagName(\"link\")[0].textContent ?? \"\"));\n\t\t\tconst oImageUrl = oDocument.createElement(\"imageUrl\");\n\t\t\toImageUrl.textContent = sUrl;\n\t\t\toItemElement.appendChild(oImageUrl);\n\t\t}\n\t}\n\n\t/**\n\t * Converts the given date to a relative date-time format.\n\t * @param {string} timeStamp - The timestamp to be converted.\n\t * @returns {string} The date in relative date-time format.\n\t */\n\tprivate formatDate(timeStamp: string): string {\n\t\tconst relativeDateFormatter = DateFormat.getDateTimeInstance({\n\t\t\tstyle: \"medium\",\n\t\t\trelative: true,\n\t\t\trelativeStyle: \"short\"\n\t\t});\n\t\treturn relativeDateFormatter.format(new Date(timeStamp));\n\t}\n\n\t/**\n\t * Returns the favourite news feed for the custom news\n\t * @returns {IPersDataNewsFeed}\n\t * @private\n\t */\n\tpublic getPersDataNewsFeed() {\n\t\treturn this.persDataNewsFeed;\n\t}\n\n\t/**\n\t * Extracts the image URL from the provided HREF link or link.\n\t * @param {string} sHrefLink - The HREF link containing the image URL.\n\t * @returns {Promise} A promise that resolves to the extracted image URL.\n\t */\n\tprivate extractImage(sHrefLink: string): Promise<string> {\n\t\tconst fnLoadPlaceholderImage = () => {\n\t\t\tconst sPrefix = sap.ui.require.toUrl(\"sap/cux/home/img\");\n\t\t\tthis.image = this.image ? this.image + 1 : 1;\n\t\t\tthis.image = this.image < 9 ? this.image : 1;\n\t\t\treturn `${sPrefix}/${this.image}.jpg`;\n\t\t};\n\n\t\treturn fetch(sHrefLink)\n\t\t\t.then((res) => res.text())\n\t\t\t.then((sHTML) => {\n\t\t\t\tconst aMatches = sHTML.match(/<meta[^>]*property=[\"']og:image[\"'][^>]*content=[\"']([^\"']+)[\"'][^>]*>/i);\n\t\t\t\treturn Array.isArray(aMatches) && aMatches[1] ? aMatches[1] : fnLoadPlaceholderImage();\n\t\t\t})\n\t\t\t.catch(fnLoadPlaceholderImage);\n\t}\n\n\tpublic getNewsType(): NewsType {\n\t\treturn (this.getParent() as NewsAndPagesContainer)?.getIsEndUserChange?.()?.newsType || (this.getProperty(\"type\") as NewsType);\n\t}\n\t/**\n\t * Checks if the custom file format is CSV based on the custom file name.\n\t *\n\t * @param {string} fileName - The custom file name.\n\t * @returns {boolean} True if the file format is CSV, otherwise false.\n\t */\n\tprivate isCSVFileFormat(fileName: string): boolean {\n\t\treturn fileName.split(\".\").pop()?.toLowerCase() === (\"csv\" as string);\n\t}\n\t/**\n\t * Sets the favorite news feed for the user by retrieving personalization data.\n\t *\n\t * This method asynchronously fetches the user's personalization data and if  defaultFeed is true, updates favNewsFeed as\n\t * `defaultNewsFeed`. If defaultFeed is false, it updates it with the `favNewsFeed` news feed information.\n\t * @param {boolean} [defaultFeed] - Indicates whether to set the default news feed or favorite (custom) news feed.\n\t * @returns {Promise<void>} A promise that resolves when the favorite news feed is set.\n\t * @private\n\t */\n\tprivate async setPersDataNewsFeed(defaultFeed?: boolean): Promise<void> {\n\t\tconst personalizer = await this._getUserPersonalization();\n\t\tconst persData = await personalizer?.read();\n\t\tthis.persDataNewsFeed = (defaultFeed ? persData?.defaultNewsFeed : persData?.favNewsFeed) as IPersDataNewsFeed;\n\t}\n\n\t/**\n\t * Sets the news feed type (Default or Custom) based on the provided data structure.\n\t *\n\t * @param {INewsFeed[]} data - News feed data from the URL.\n\t * @returns {Promise<void>} Resolves after setting the appropriate feed.\n\t */\n\tpublic async setNewsFeedFromUrl(data: INewsFeed[]): Promise<void> {\n\t\tconst item = data?.[0];\n\n\t\tif (item && \"group_id\" in item && \"title\" in item) {\n\t\t\t(this.getParent() as NewsAndPagesContainer).getIsEndUserChange().newsType = NewsType.Default;\n\t\t\tawait this.setDefaultNews();\n\t\t} else if (item && \"LineOfBusiness\" in item) {\n\t\t\t(this.getParent() as NewsAndPagesContainer).getIsEndUserChange().newsType = NewsType.Custom;\n\t\t\tthis.oManageMenuItem.setVisible(true);\n\t\t\tawait this.setCustomNewsFeed(\"\");\n\t\t} else {\n\t\t\tthis.handleFeedError();\n\t\t}\n\t}\n\n\t/**\n\t * This method retrieves the count and feeds of the custom news feed asynchronously.\n\t * If the count is not zero, it loads the custom news feed data and returns the feeds.\n\t * @param {string} sFeedId - The ID of the custom news feed to set.\n\t * @returns {Promise} A promise that resolves to an array of news feeds.\n\t * @private\n\t */\n\tpublic async setCustomNewsFeed(sFeedId: string): Promise<void> {\n\t\ttry {\n\t\t\tthis.oNewsTile.setVisible(true);\n\t\t\tthis.generateErrorMessage().setVisible(false);\n\t\t\tconst feedType = this.getNewsType();\n\t\t\tconst isDefaultNews = feedType === NewsType.Default;\n\t\t\tawait this.setPersDataNewsFeed(isDefaultNews);\n\t\t\tconst customFileName = this.getProperty(\"customFileName\") as string;\n\t\t\tconst showAllPrepRequired = this.isCSVFileFormat(customFileName)\n\t\t\t\t? false\n\t\t\t\t: (this.persDataNewsFeed?.showAllPreparationRequired ?? true);\n\n\t\t\tif (this.isCSVFileFormat(customFileName)) {\n\t\t\t\tCUSTOM_NEWS_FEED.EXCLUDE_FIELDS.push(\"PreparationRequired\");\n\t\t\t}\n\t\t\tconst showPrep = isDefaultNews ? true : showAllPrepRequired;\n\t\t\tlet newsFeeds = await this.getCustomOrDefaultNewsFeed(sFeedId || \"\", showPrep);\n\n\t\t\tif (newsFeeds.length === 0) {\n\t\t\t\tthrow new Error(\"Error: No news feed available\");\n\t\t\t}\n\t\t\tconst selectedItems = this.persDataNewsFeed?.items;\n\n\t\t\t// Handle no favorite feed case\n\t\t\tconst isSelectedEmpty = selectedItems?.length === 0;\n\n\t\t\tif (!isDefaultNews && isSelectedEmpty) {\n\t\t\t\t(this.getParent() as NewsAndPagesContainer)?.panelLoadedFn(\"News\", { loaded: true, count: 0 });\n\t\t\t\tthrow new Error(\"Error: No fav news feed available\");\n\t\t\t}\n\n\t\t\t// Filter feeds based on personalization\n\t\t\tif (selectedItems?.length) {\n\t\t\t\tnewsFeeds = newsFeeds.filter((feed) => {\n\t\t\t\t\t// if its defaultNews then we show everything except the group ids present inside persDataNewsFeed items\n\t\t\t\t\t// if the group id is mandatory then we show it\n\t\t\t\t\tif (isDefaultNews) {\n\t\t\t\t\t\treturn !selectedItems.includes(feed.group_id as string) || this.mandatoryNewsFeed.includes(feed.group_id as string);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if its customNews we show only the groups that is present in persDataNewsFeed items\n\t\t\t\t\t\treturn selectedItems.includes(feed.title);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (newsFeeds.length === 0) {\n\t\t\t\t\t(this.getParent() as NewsAndPagesContainer)?.panelLoadedFn(\"News\", { loaded: true, count: 0 });\n\t\t\t\t\tthrow new Error(\"Error: No news feed available after filtering\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.loadCustomNewsFeed(newsFeeds, sFeedId ? \"customFeed\" : \"defaultFeed\");\n\t\t\tif (isDefaultNews) {\n\t\t\t\tthis.fetchedFeedUrl = this.defaultUrl;\n\t\t\t\t// If no description is found in any of the articles within a group, the pressEnabled property is set to false\n\t\t\t\tthis.setPressEnabledForNewsGroup(newsFeeds);\n\t\t\t} else {\n\t\t\t\tthis.fetchedFeedUrl = \"\";\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tLog.error(err as string);\n\t\t\tthis.handleFeedError();\n\t\t}\n\t}\n\n\t/**\n\t * Filters the provided list of news groups to include only those that are marked as mandatory.\n\t *\n\t * A news group is considered mandatory if:\n\t * - Its `mandatory_text` property (at the top level) is set to \"TRUE\" (case-insensitive).\n\t *\n\n\t * @param newsGroups - An array of news groups to filter.\n\t * @returns An array of news groups that are marked as mandatory.\n\t * @private\n\t */\n\tprivate filterMandatoryNews(newsGroups: INewsFeed[]): INewsFeed[] {\n\t\treturn newsGroups.filter(\n\t\t\t({ mandatory_text, mandatory }) => mandatory_text?.toUpperCase() === \"TRUE\" || mandatory?.toUpperCase() === \"X\"\n\t\t);\n\t}\n\n\t/**\n\t * Set the priority of group to critical if any article within the group is critical.\n\t *\n\t * A news group is considered critical if:\n\t * - The group's `priority` is set to `\"1\"`.\n\t * - Any article within the group's `_group_to_article` array has a `priority` of `\"1\"`.\n\t *\n\t * If any article within a group is critical, the group's `priority` is updated to `\"1\"` and group's `priorityText` changed to \"Very high\".\n\t *\n\t * @param newsGroups - An array of news groups.\n\t *\n\t */\n\tprivate markGroupsWithCriticalArticles(newsGroups: INewsFeed[]): void {\n\t\tfor (const group of newsGroups) {\n\t\t\tconst criticalArticle = group._group_to_article?.find((article) => article.priority === \"1\");\n\t\t\t//make newsgroup priority to Veryhigh\n\t\t\tif (criticalArticle) {\n\t\t\t\tgroup.priority = criticalArticle.priority;\n\t\t\t\tgroup.priorityText = criticalArticle.priorityText;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the default news feed details from the given OData response.\n\t *\n\t * @param newsResponse - The OData response containing the news feed data.\n\t * @param showAllPreparationRequired - A boolean flag indicating whether to filter news items that require preparation.\n\t * @returns An array of default news feed items.\n\t * @private\n\t */\n\tprivate getDefaultNewsFeedDetails(newsResponse: ODataResponse) {\n\t\tlet newsFeedItems: INewsFeed[] = JSON.parse(JSON.stringify(newsResponse.value || [])) as INewsFeed[];\n\t\tconst defaultNews: INewsFeed[] = [];\n\t\tconst defaultFeedDict = {} as Record<string, string>;\n\t\tthis.mandatoryNewsFeed = [];\n\t\tif (newsFeedItems?.length > 0) {\n\t\t\tthis.mandatoryNewsFeed = this.filterMandatoryNews(newsFeedItems).map((oFeed) => oFeed.group_id || \"\");\n\t\t\tthis.markGroupsWithCriticalArticles(newsFeedItems);\n\n\t\t\tfor (const feed of newsFeedItems) {\n\t\t\t\tconst title = feed.title;\n\t\t\t\tlet subTitle = \"\";\n\t\t\t\tif (!defaultFeedDict[title]) {\n\t\t\t\t\tsubTitle = feed.subTitle || feed.description || \"\";\n\t\t\t\t\tdefaultNews.push({\n\t\t\t\t\t\ttitle: title,\n\t\t\t\t\t\tfooter: feed?.footer_text,\n\t\t\t\t\t\timageUrl: this.getDefaultFeedImage(feed),\n\t\t\t\t\t\tgroup_id: feed.group_id,\n\t\t\t\t\t\tsubTitle: subTitle,\n\t\t\t\t\t\tpriority: feed?.priority == \"1\" ? Priority.Medium : Priority.None,\n\t\t\t\t\t\tpriorityText: feed?.priority == \"1\" ? this._i18nBundle.getText(\"criticalNews\") : \"\"\n\t\t\t\t\t});\n\t\t\t\t\tdefaultFeedDict[title] = title;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn defaultNews;\n\t}\n\n\t/**\n\t * Returns the mandatory news feed details\n\t * If the mandatory news feed is not set, it returns an empty array.\n\t *\n\t * @returns {INewsFeed[]} The mandatory news feed details.\n\t * @private\n\t */\n\tpublic getMandatoryDefaultNewsFeed() {\n\t\treturn this.mandatoryNewsFeed || [];\n\t}\n\n\t/**\n\t * Retrieves the default news response, either from cache or by fetching it.\n\t * @returns {Promise<ODataResponse>} A promise that resolves to the default news data\n\t * @private\n\t */\n\tprivate getDefaultNewsResponse(): Promise<ODataResponse> {\n\t\t// Return cached data if available\n\t\tif (this._defaultNewsResponse) {\n\t\t\treturn Promise.resolve(this._defaultNewsResponse);\n\t\t}\n\n\t\tif (!this._defaultNewsPromise) {\n\t\t\tthis._defaultNewsPromise = this.fetchDefaultNews();\n\t\t}\n\n\t\treturn this._defaultNewsPromise;\n\t}\n\n\t/**\n\t *\n\t * @returns {ODataResponse} The no update placeholder news group with enriched titles and descriptions to show when there are no updates\n\t * @private\n\t */\n\tprivate getNoUpdatesPlaceholder(): ODataResponse {\n\t\tconst placeholderTitle = this._i18nBundle.getText(\"placeholderNewsTitle\") as string;\n\t\tconst placeholderDescription = this._i18nBundle.getText(\"placeholderNewsDescription\");\n\n\t\tconst enrichedNewsPlaceholder = {\n\t\t\t...DEFAULT_NEWS_PLACEHOLDER,\n\t\t\tvalue: DEFAULT_NEWS_PLACEHOLDER.value.map((group) => ({\n\t\t\t\t...group,\n\t\t\t\ttitle: placeholderTitle,\n\t\t\t\tdescription: placeholderDescription,\n\t\t\t\t_group_to_article: group._group_to_article.map((article) => ({\n\t\t\t\t\t...article,\n\t\t\t\t\ttitle: placeholderTitle,\n\t\t\t\t\tdescription: \"\"\n\t\t\t\t}))\n\t\t\t}))\n\t\t};\n\t\treturn enrichedNewsPlaceholder;\n\t}\n\n\t/**\n\t * Returns if its a no updates new feed group or not\n\t * This indicates whether the news feed is a static no updates placeholder news feed.\n\t * @private\n\t */\n\tpublic isNoUpdatesNewsFeed(): boolean {\n\t\treturn this._noUpdatesNewsFeed;\n\t}\n\n\t/**\n\t * Fetches the default news data from the server.\n\t * @returns {Promise<ODataResponse>} A promise that resolves to the fetched news data\n\t * @throws {Error} If the network request fails or returns a non-OK status\n\t * @private\n\t */\n\tprivate async fetchDefaultNews(): Promise<ODataResponse> {\n\t\ttry {\n\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\tconst [{ supported }] = await navigationService.isNavigationSupported([\n\t\t\t\t{\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tsemanticObject: \"NewsArticle\",\n\t\t\t\t\t\taction: \"display\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]);\n\t\t\tif (supported) {\n\t\t\t\tif (this._endUserResponse) {\n\t\t\t\t\tthis._defaultNewsResponse = this._endUserResponse;\n\t\t\t\t} else {\n\t\t\t\t\tconst response = await fetch(this.defaultUrl || DEFAULT_NEWS_URL);\n\n\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t\t\t}\n\t\t\t\t\tthis._defaultNewsResponse = (await response.json()) as ODataResponse;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the response is not supported or empty, set the default news response to placeholder news\n\t\t\tif (!supported || !this._defaultNewsResponse?.value?.length) {\n\t\t\t\tthis._defaultNewsResponse = this.getNoUpdatesPlaceholder();\n\t\t\t\tthis._noUpdatesNewsFeed = true;\n\t\t\t\tthis.oManageMenuItem.setVisible(false);\n\t\t\t}\n\n\t\t\treturn this._defaultNewsResponse;\n\t\t} catch (error) {\n\t\t\tthis._defaultNewsPromise = null;\n\t\t\tLog.error(error as string);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves a custom news feed based on the provided feed ID.\n\t * If no feed ID is provided, it returns the default news feed.\n\t *\n\t * @param {string} sFeedId - The ID of the custom news feed to retrieve. If not provided, the default news feed is returned.\n\t * @param {boolean} showAllPreparationRequired - A flag indicating whether to show all preparation required.\n\t * @returns {Promise<INewsFeed[]>} A promise that resolves to an array of custom news feed items.\n\t * @private\n\t */\n\tpublic async getCustomOrDefaultNewsFeed(sFeedId: string, showAllPreparationRequired: boolean): Promise<INewsFeed[]> {\n\t\tconst feedType = this.getNewsType();\n\t\tconst isDefaultNews = feedType === NewsType.Default;\n\t\tif (isDefaultNews) {\n\t\t\tawait this.getDefaultNewsResponse();\n\t\t\tlet aDefaultgroups = this.getDefaultNewsFeedDetails(this._defaultNewsResponse);\n\t\t\treturn aDefaultgroups;\n\t\t} else {\n\t\t\treturn this.getCustomFeedData(sFeedId, showAllPreparationRequired);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves custom news feed items identified by the provided feed ID and settings.\n\t * It processes the response data and returns an array of custom news feed items.\n\t * @param {string} sFeedId - The ID of the custom news feed.\n\t * @param {boolean} showAllPreparationRequired - Indicates whether to show all preparation required.\n\t * @returns {Promise} A Promise that resolves to an array of custom news feed items.\n\t * @private\n\t */\n\tprivate async getCustomFeedData(sFeedId: string, showAllPreparationRequired: boolean): Promise<INewsFeed[]> {\n\t\ttry {\n\t\t\tlet newsDetailUrl;\n\t\t\tconst isEnduser = (this.getParent() as NewsAndPagesContainer).getIsEndUserChange().isEndUser;\n\t\t\tnewsDetailUrl = isEnduser ? this.getUrl() : this.getNewsFeedDetailsUrl({ changeId: sFeedId, showAllPreparationRequired });\n\t\t\tif (!this.customNewsFeedCache.has(newsDetailUrl)) {\n\t\t\t\tthis.customNewsFeedCache.set(newsDetailUrl, this.getAuthNewsFeed(newsDetailUrl));\n\t\t\t}\n\t\t\tconst authorizedNewsFeeds = (await this.customNewsFeedCache.get(newsDetailUrl)) as INewsFeed[];\n\t\t\tconst oFeedDict: { [key: string]: string } = {};\n\t\t\tconst aFeeds: INewsFeed[] = [];\n\t\t\tif (authorizedNewsFeeds?.length > 0) {\n\t\t\t\tauthorizedNewsFeeds.forEach((oFeed: INewsFeed) => {\n\t\t\t\t\tconst title = oFeed[CUSTOM_NEWS_FEED.TITLE] as INewsLink;\n\t\t\t\t\tif (!oFeedDict[title.value]) {\n\t\t\t\t\t\taFeeds.push({\n\t\t\t\t\t\t\ttitle: title.value,\n\t\t\t\t\t\t\tfooter: (oFeed[CUSTOM_NEWS_FEED.VALIDITY] as INewsLink)?.value,\n\t\t\t\t\t\t\timageUrl: this.getCustomFeedImage(title.value)\n\t\t\t\t\t\t});\n\t\t\t\t\t\toFeedDict[title.value] = title.value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn aFeeds; // group details\n\t\t} catch (err) {\n\t\t\tLog.error(err as string);\n\t\t\tthrow new Error(err as string);\n\t\t}\n\t}\n\n\t/**\n\t * Generates the URL for retrieving news feed details based on the provided news object.\n\t * The generated URL limits the number of results to 999.\n\t * @param {INewsItem} oNews - The news object containing properties such as changeId, title, and showAllPreparationRequired.\n\t * @returns {string} The URL for retrieving news feed details.\n\t */\n\tpublic getNewsFeedDetailsUrl(oNews: INewsItem) {\n\t\tlet sUrl = NEWS_FEED_READ_API + \"?$filter=ChangeId eq \" + \"'\" + oNews.changeId + \"'\";\n\t\tconst customFileName = this.getProperty(\"customFileName\") as string;\n\t\tif (!this.isCSVFileFormat(customFileName) && oNews.showAllPreparationRequired) {\n\t\t\tsUrl = sUrl + \" and PreparationRequired eq true\";\n\t\t}\n\t\treturn sUrl + \"&$top=999\";\n\t}\n\n\t/**\n\t * Retrieves the news feed from the specified URL after applying authorization filtering based on the available apps.\n\t * If the news feed contains impacted artifacts, it checks if the current user has access to any of the impacted apps.\n\t * If the user has access to at least one impacted app, the news feed is included in the returned array.\n\t * @param {string} sNewsUrl - The URL of the news feed.\n\t * @returns {Array} The filtered array of news feed items authorized for the user.\n\t */\n\tpublic async getAuthNewsFeed(sNewsUrl: string, newsTitle?: string) {\n\t\ttry {\n\t\t\tconst [aAvailableApps, aNewsFeed] = await Promise.all([\n\t\t\t\tthis.getAllAvailableApps(),\n\t\t\t\tthis.getNewsFeedDetails(sNewsUrl, newsTitle)\n\t\t\t]);\n\t\t\tif (aAvailableApps.length === 0) {\n\t\t\t\treturn aNewsFeed;\n\t\t\t}\n\t\t\treturn this.arrangeNewsFeeds(aNewsFeed, aAvailableApps);\n\t\t} catch (err) {\n\t\t\tLog.error(err as string);\n\t\t}\n\t}\n\n\t/**\n\t * If the news feed contains impacted artifacts, it checks if the current user has access to any of the impacted apps.\n\t * If the user has access to at least one impacted app, the news feed is included in the returned array.\n\t * @param {INewsFeed[]} aNewsFeed - array of news feed\n\t * @param {IAvailableApp[]} aAvailableApps - array of all availabel apps\n\t * @returns {Array} The filtered array of news feed items authorized for the user.\n\t */\n\tprivate arrangeNewsFeeds(aNewsFeed: INewsFeed[], aAvailableApps: IAvailableApp[]) {\n\t\tconst aAuthNewsFeed: INewsFeed[] = [];\n\n\t\taNewsFeed.forEach((oNewsFeed: INewsFeed) => {\n\t\t\tif ((oNewsFeed.Category as INewsLink).value !== \"App\" || !(oNewsFeed.ImpactedArtifacts as INewsLink).value) {\n\t\t\t\taAuthNewsFeed.push(oNewsFeed);\n\t\t\t} else {\n\t\t\t\tconst aImpactedArtifacts: string[] = (oNewsFeed.ImpactedArtifacts as INewsLink).value.split(\"\\n\");\n\t\t\t\tfor (let impactedArtifact of aImpactedArtifacts) {\n\t\t\t\t\tconst oImpactedArtifact = impactedArtifact;\n\t\t\t\t\tif (oImpactedArtifact && this.isAuthFeed(aAvailableApps, impactedArtifact)) {\n\t\t\t\t\t\taAuthNewsFeed.push(oNewsFeed);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn aAuthNewsFeed;\n\t}\n\n\t/**\n\t * takes all available apps list and the impacted atifact from the news and returns if it's valid\n\t * @param {IAvailableApp[]} aAvailableApps - Array of all available apps\n\t * @param {string} oImpactedArtifact - impacted artifact form the news\n\t * @returns {boolean} checks if the news is authenticated with the available apps list\n\t */\n\tprivate isAuthFeed(aAvailableApps: IAvailableApp[], oImpactedArtifact: string) {\n\t\tconst fioriIdSplitter = \"|\";\n\t\tif (oImpactedArtifact.includes(fioriIdSplitter)) {\n\t\t\tconst aTokens = oImpactedArtifact.split(fioriIdSplitter);\n\t\t\tconst sFioriId = (aTokens[aTokens.length - 1] || \"\").trim();\n\t\t\tif (sFioriId) {\n\t\t\t\tconst index = aAvailableApps.findIndex((oApp: IAvailableApp) => {\n\t\t\t\t\treturn sFioriId === oApp?.signature?.parameters[\"sap-fiori-id\"]?.defaultValue?.value;\n\t\t\t\t});\n\t\t\t\treturn index > -1;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves all available apps from the ClientSideTargetResolution service for authorization filtering.\n\t * @returns {Array} An array of available apps.\n\t */\n\tprivate async getAllAvailableApps(): Promise<IAvailableApp[]> {\n\t\ttry {\n\t\t\tconst oService = await Container.getServiceAsync<IAppConfiguration>(\"ClientSideTargetResolution\");\n\t\t\treturn oService?._oAdapter._aInbounds || [];\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tLog.error(err.message);\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the news feed details from the specified URL, including translation and formatting of field labels.\n\t * @param {string} sUrl - The URL of the news feed details.\n\t * @returns {Array} The array of news feed items with translated and formatted field labels.\n\t */\n\tprivate async getNewsFeedDetails(sUrl: string, newsTitle?: string): Promise<INewsFeed[]> {\n\t\tif (this.customNewsFeedCache.has(sUrl)) {\n\t\t\tconst newsFeedDetails = await this.customNewsFeedCache.get(sUrl);\n\t\t\treturn this.filterNewsOnTitle(newsFeedDetails as INewsFeed[], newsTitle);\n\t\t}\n\n\t\tconst fnFormattedLabel = (sLabel: string) => sLabel.replace(/([a-z0-9])([A-Z])/g, \"$1 $2\");\n\t\tconst [newsResponse, translationResponse] = await Promise.all([\n\t\t\tthis._endUserResponse ? Promise.resolve(this._endUserResponse) : (HttpHelper.GetJSON(sUrl) as Promise<{ value: INewsFeed[] }>),\n\t\t\tthis.getTranslatedText(this.getCustomFeedKey())\n\t\t]);\n\t\tlet aNews: INewsFeed[] = JSON.parse(JSON.stringify((newsResponse as INewsResponse).value || [])) as INewsFeed[];\n\t\tconst aTranslation = JSON.parse(JSON.stringify((translationResponse as INewsResponse).value || [])) as ITranslatedText[];\n\t\taNews = this.filterNewsOnTitle(aNews, newsTitle);\n\t\treturn aNews.map((oNews: INewsFeed) => {\n\t\t\tconst aFields = Object.keys(oNews);\n\t\t\tconst aExpandFields: INewsLink[] = [];\n\t\t\taFields.forEach((oField) => {\n\t\t\t\tconst oTranslatedField = aTranslation.find(\n\t\t\t\t\t(oTranslation: ITranslatedText) => oTranslation?.ColumnName?.toUpperCase() === oField.toUpperCase()\n\t\t\t\t);\n\t\t\t\tconst oTranslatedFieldName = (oTranslatedField?.TranslatedName as string) || fnFormattedLabel(oField);\n\t\t\t\toNews[oField] = { label: oTranslatedFieldName, value: oNews[oField] as string } as INewsLink;\n\t\t\t\tif (!CUSTOM_NEWS_FEED.EXCLUDE_FIELDS.includes(oField)) {\n\t\t\t\t\taExpandFields.push(oNews[oField] as INewsLink);\n\t\t\t\t}\n\t\t\t});\n\t\t\toNews.Link = {\n\t\t\t\tlabel: this._i18nBundle.getText(\"readMoreLink\") as string,\n\t\t\t\tvalue: oNews[CUSTOM_NEWS_FEED.LINK] as string,\n\t\t\t\ttext: \"Link\"\n\t\t\t};\n\t\t\toNews.expanded = aNews.length === 1;\n\t\t\toNews.expandFields = aExpandFields;\n\t\t\treturn oNews;\n\t\t});\n\t}\n\n\t/**\n\t * Filters the news feed data based on the LOB title for the news detail dialog\n\t *\n\t * @private\n\t * @param {INewsFeed[]} aNews complete news feed data\n\t * @param {?string} [newsTitle] title of the line of business to be filtered on\n\t * @returns {INewsFeed[]} filtered news feed for provided LOB title\n\t */\n\tprivate filterNewsOnTitle(aNews: INewsFeed[], newsTitle?: string): INewsFeed[] {\n\t\tif (newsTitle) {\n\t\t\treturn aNews.filter((newsDetail: INewsFeed) => {\n\t\t\t\treturn (newsDetail.LineOfBusiness as INewsLink).value === newsTitle;\n\t\t\t});\n\t\t}\n\t\treturn aNews;\n\t}\n\n\t/**\n\t * Retrieves translated text for news feed fields based on the specified feed ID.\n\t * @param {string} sFeedId - The ID of the custom news feed\n\t * @returns {Promise} A promise resolving to the translated text for news feed fields.\n\t */\n\tprivate getTranslatedText(sFeedId: string) {\n\t\ttry {\n\t\t\tconst sUrl = NEWS_FEED_TRANSLATION_API + \"?$filter=Changeid eq '\" + sFeedId + \"'\";\n\t\t\tif (!this.customNewsFeedCache.has(sUrl)) {\n\t\t\t\tthis.customNewsFeedCache.set(sUrl, HttpHelper.GetJSON(sUrl) as Promise<INewsFeed[]>);\n\t\t\t}\n\t\t\treturn this.customNewsFeedCache.get(sUrl);\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tLog.error(err.message);\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Loads custom news feed into the news panel after parsing JSON feed data to XML format.\n\t * @param {Array} feeds - The array of custom news feed items.\n\t */\n\tprivate async loadCustomNewsFeed(feeds: INewsFeed[], feedType: string) {\n\t\tconst oXMLResponse = this.parseJsonToXml(JSON.parse(JSON.stringify(feeds)) as JSON[], feedType);\n\t\tconst oParent = this.getParent() as NewsAndPagesContainer;\n\t\tif (!this.oNewsModel) {\n\t\t\tthis.oNewsModel = new XMLModel(oXMLResponse);\n\t\t\tif (!this.bNewsLoad) {\n\t\t\t\toParent?.panelLoadedFn(\"News\", { loaded: true, count: DEFAULT_FEED_COUNT });\n\t\t\t\tthis.bNewsLoad = true;\n\t\t\t}\n\t\t\tthis.oNewsTile.setModel(this.oNewsModel);\n\t\t} else {\n\t\t\tthis.oNewsTile.unbindAggregation(\"tiles\", false); // Unbind the bound aggregation\n\t\t\tthis.oNewsTile.destroyAggregation(\"tiles\"); // Removes old tiles\n\t\t\tthis.oNewsModel.setData(oXMLResponse);\n\t\t}\n\t\tawait this.loadNewsFeed(oXMLResponse, feeds.length);\n\t}\n\n\t/**\n\t * Parses JSON data into XML format.\n\t * @param {JSON[]} json - The JSON data to be parsed into XML.\n\t * @returns {XMLDocument} The XML document representing the parsed JSON data.\n\t */\n\tprivate parseJsonToXml(json: JSON[], feedType: string): XMLDocument {\n\t\tconst _transformJsonForXml = (aData: JSON[]) => aData.map((data: JSON) => ({ item: data }));\n\t\tconst _jsonToXml = (json: JSON) => {\n\t\t\tlet xml = \"\";\n\t\t\tlet key: string;\n\t\t\tfor (key in json) {\n\t\t\t\tconst value = json[key as keyof typeof json];\n\t\t\t\tif (value) {\n\t\t\t\t\tif (typeof value === \"object\") {\n\t\t\t\t\t\txml += `<${key}>${_jsonToXml(value)}</${key}>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\txml += `<${key}>${value as string}</${key}>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn xml.replace(/<\\/?\\d+>/g, \"\");\n\t\t};\n\t\tconst transformedJson: JSON = JSON.parse(JSON.stringify(_transformJsonForXml(json))) as JSON;\n\t\tlet xml = \"<?xml version='1.0' encoding='UTF-8'?>\";\n\t\tconst rootToken = feedType;\n\t\txml += `<${rootToken}>`;\n\t\txml += _jsonToXml(transformedJson);\n\t\txml += `</${rootToken}>`;\n\t\txml = xml.replaceAll(\"&\", \"&amp;\");\n\t\tconst parser = new DOMParser();\n\t\treturn parser.parseFromString(xml, \"text/xml\");\n\t}\n\n\t/**\n\t * Randomly selects an image from the available images for the feed item.\n\t * @param {string} sFileName - The file name of the custom news feed item.\n\t * @returns {string} The URL of the image for the feed item.\n\t * @private\n\t */\n\tprivate getCustomFeedImage(sFileName: string) {\n\t\tconst sFileBasePath = sap.ui.require.toUrl(CUSTOM_NEWS_FEED.IMAGE_URL);\n\t\tlet sFilePath = sFileBasePath + CUSTOM_IMAGES.default[0];\n\t\tconst files = CUSTOM_IMAGES[sFileName] || [];\n\t\tlet randomIndex = 0;\n\t\tif (files.length > 0) {\n\t\t\tconst randomArray = new window.Uint32Array(1);\n\t\t\twindow.crypto.getRandomValues(randomArray);\n\t\t\trandomIndex = randomArray[0] % 3;\n\t\t\tsFilePath = sFileBasePath + files[randomIndex];\n\t\t}\n\t\treturn sFilePath;\n\t}\n\n\t/**\n\t * Retrieves the default feed image for a given news feed.\n\t *\n\t * @param {INewsFeed} oFeed - The custom news feed object.\n\t * @returns {string} The base64 encoded image string with the appropriate MIME type, or an empty string if no valid image is found.\n\t * @private\n\t */\n\tprivate getDefaultFeedImage(oFeed: INewsFeed): string {\n\t\tconst imgId = oFeed?.bg_image_id;\n\t\tconst groupImg = oFeed?._group_to_image;\n\t\tconst getRandomDefaultImage = () => {\n\t\t\tconst sPrefix = sap.ui.require.toUrl(\"sap/cux/home/img\");\n\t\t\tconst random = Math.floor(Math.random() * 15) + 1;\n\t\t\treturn `${sPrefix}/${random}.jpg`;\n\t\t};\n\t\tif (!groupImg || groupImg?.image_id !== imgId || !groupImg?.bg_image) {\n\t\t\treturn getRandomDefaultImage();\n\t\t}\n\n\t\tlet mimeType = groupImg?.mime_type;\n\t\tconst groupBgImg = groupImg?.bg_image;\n\n\t\tif (mimeType === \"application/octet-stream\") {\n\t\t\tmimeType = \"image/jpeg\";\n\t\t}\n\n\t\t// if the image is not a valid base64 string, convert it to a standard base64 string\n\t\t// and return the data URL else return the data URL directly\n\t\tif (!this.isValidBase64(groupBgImg)) {\n\t\t\tconst base64Data = this.base64UrlToBase64(groupBgImg);\n\t\t\treturn `data:${mimeType};base64,${base64Data}`;\n\t\t}\n\t\treturn `data:${mimeType};base64,${groupBgImg}`;\n\t}\n\n\t/**\n\t * Converts a base64 URL string to a standard base64 string.\n\t *\n\t * @param {string} base64Url - The base64 URL string to convert.\n\t * @returns {string} The converted base64 string.\n\t * @private\n\t */\n\tprivate base64UrlToBase64(base64Url: string) {\n\t\tlet base64 = base64Url?.replace(/_/g, \"/\").replace(/-/g, \"+\");\n\n\t\t// Add padding if missing (Base64 should be a multiple of 4)\n\t\twhile (base64.length % 4 !== 0) {\n\t\t\tbase64 += \"=\";\n\t\t}\n\t\treturn base64;\n\t}\n\n\t/**\n\t * Checks if a string is a valid base64 encoded string.\n\t * @param input The string to validate\n\t * @returns boolean indicating if the string is valid base64\n\t * @private\n\t */\n\tprivate isValidBase64(input: string): boolean {\n\t\t// Check if the string exists and isn't empty\n\t\tif (!input || input.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Canonical base64 strings use these characters\n\t\t// A-Z, a-z, 0-9, +, /, and = for padding\n\t\tconst base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;\n\n\t\t// Check if the string matches the base64 character set\n\t\tif (!base64Regex.test(input)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the length is valid\n\t\t// Base64 strings have a length that is a multiple of 4\n\t\tif (input.length % 4 !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check padding rules\n\t\tif (input.includes(\"=\")) {\n\t\t\t// If there is padding, it must be at the end\n\t\t\tconst paddingIndex = input.indexOf(\"=\");\n\t\t\tconst lastPaddingIndex = input.lastIndexOf(\"=\");\n\t\t\t// Padding should only occur at the end\n\t\t\tif (paddingIndex !== input.length - (input.length - paddingIndex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Can only have 1 or 2 padding characters\n\t\t\tif (input.length - paddingIndex > 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Make sure all padding is at the end\n\t\t\tif (paddingIndex !== lastPaddingIndex && lastPaddingIndex !== paddingIndex + 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _getUserPersonalization() {\n\t\tconst persContainerId = PersonalisationUtils.getPersContainerId(this);\n\t\tconst ownerComponent = PersonalisationUtils.getOwnerComponent(this) as Component;\n\t\treturn UshellPersonalizer.getInstance(persContainerId, ownerComponent);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}