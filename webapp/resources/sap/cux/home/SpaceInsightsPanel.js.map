{"version":3,"file":"SpaceInsightsPanel.js","names":["sap","ui","define","Log","GridContainer","GridContainerItemLayoutData","GenericTile","HeaderContainer","VBox","sap_m_library","Lib","JSONModel","Container","S4MyHome","__BasePanel","__AppManager","___utils_CommonUtils","___utils_DataFormatUtils","___utils_Device","___utils_InsightsUtils","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","LoadState","_finallyRethrows","finalizer","bind","BasePanel","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","observer","prototype","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","_forTo","array","check","i","reject","_cycle","length","AppManager","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","filterVisualizations","getPageManagerInstance","recycleId","DeviceType","fetchElementProperties","createShowMoreActionButton","createShowMoreMenuItem","getAssociatedFullScreenMenuItem","tilesMenuItems","tilesContainerMenuItems","tilesActionButtons","tilesContainerActionButtons","DisplayFormat","StandardTileWidth","StandardWideTileWidth","Gap","SpaceInsightsPanel","extend","metadata","library","properties","spaceId","type","group","defaultValue","title","fullScreenName","visibility","defaultAggregation","aggregations","content","multiple","singularName","tiles","events","handleHidePanel","parameters","handleUnhidePanel","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","_headerVisible","init","_init","BasePanel.prototype.init.call","_controlMap","Map","_oData","activateInsightsTiles","activateInsightsTilesOnPhone","activateInsightsTilesOnDesktop","_controlModel","appManagerInstance","getInstance","pageManager","setProperty","_createTilesFlexWrapper","getServiceAsync","VizInstantiationService","catch","error","Error","message","String","_toggleTileActivity","setTitle","_setTitle","spaceTitle","getTitle","_getTitle","getProperty","toggleUserActions","event","show","getParameter","_temp2","_temp","_appSwitched","Promise","resolve","refreshData","attachRouteMatched","warning","_showPlaceHolders","placeholderArray","Array","_calculatePlaceholderTileCount","fill","Loading","aInsightsApps","map","tileState","index","getId","sizeBehavior","frameType","mode","visible","renderOnThemeChange","ariaRole","dropAreaOffset","setLayoutData","columns","_clearPlaceHolders","renderPanel","_renderPanel","_exit","_this2","_temp4","_result","_temp3","_await$_this2$refresh","fireHandleHidePanel","_wasThrown","fireEvent","fetchDynamicAppInSpace","_fetchDynamicAppInSpace","_this3","_temp8","_this3$pageManager$fe","_temp7","allVisualizations","_filterDuplicateVizs","allSpaces","space","find","children","_temp6","_temp5","child","fetchFavVizs","visualizations","_this3$allSpaces","fetchAllAvailableSpaces","_refreshData","refreshTiles","_this4","panelName","getMetadata","getName","_this4$fetchDynamicAp","_temp0","fireHandleUnhidePanel","isMobile","getDeviceType","Mobile","container","tilesMobileContainer","tilesContainer","sDefaultAggreName","getDefaultAggregationName","dynamicTiles","getAggregation","forEach","refresh","_getInsightsContainer","updatePanelsItemCount","bIsSmartBusinessTilePresent","some","oApp","isSmartBusinessTile","_temp9","load","name","_tilesWrapper","renderType","width","items","_createMobileFlexWrapper","_createWrapperFlexBox","setModel","addContent","scrollStep","scrollStepByItem","gridLayout","scrollTime","showDividers","addStyleClass","_attachAggregationToContainer","_updateTilesActivity","isPhoneScreen","bActivateInsightsTiles","Boolean","bindAggregation","path","factory","context","getObject","oVisualization","instantiateVisualization","visualization","minRows","getDisplayFormat","Standard","bindProperty","handleHideHeader","_handleHideHeader","_toggleHeaderActions","handleAddHeader","_handleAddHeader","_calculateVisibleTileCount","insightsApps","layout","_getLayout","layoutDomRef","getDomRef","apps","count","isHeaderVisible","sectionNodeIndex","sectionDomRef","childNodes","domProperties","availableWidth","widthMap","StandardWide","nextTileWidth","displayFormatHint","Math","floor","_adjustLayout","isMobileDevice","visibleTileCount","isElementExpanded","_getCurrentExpandedElementName","slice","showFullScreenButton","actionButton","includes","ADD_TILES","toggleActionButton","toggleFullScreenElements","fullScreenButton","fullScreenText","updateMenuItem","get","SHOW_MORE","updateActionButton","insightsContainer","getParent","getContainerMenuItems","_getContainerMenuItems","_containerMenuItems","containerShowMore","set","getContainerActionButtons","_getContainerActionButtons","_containerActionButtons","containerFullScreenActionButton","bShow","menuItem","toggleMenuListItem"],"sources":["SpaceInsightsPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerItemLayoutData from \"sap/f/GridContainerItemLayoutData\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport VBox from \"sap/m/VBox\";\nimport { LoadState } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Container from \"sap/ushell/Container\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport VisualizationInstantiation from \"sap/ushell/services/VisualizationInstantiation\";\nimport BasePanel from \"./BasePanel\";\nimport InsightsContainer from \"./InsightsContainer\";\nimport MenuItem from \"./MenuItem\";\nimport { $SpaceInsightsPanelSettings } from \"./SpaceInsightsPanel\";\nimport { ICustomVisualization, ISectionAndVisualization } from \"./interface/AppsInterface\";\nimport { ISpace } from \"./interface/PageSpaceInterface\";\nimport AppManager from \"./utils/AppManager\";\nimport { filterVisualizations, getPageManagerInstance } from \"./utils/CommonUtils\";\nimport { recycleId } from \"./utils/DataFormatUtils\";\nimport { DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { createShowMoreActionButton, createShowMoreMenuItem, getAssociatedFullScreenMenuItem } from \"./utils/InsightsUtils\";\nimport PageManager from \"./utils/PageManager\";\n\nexport enum tilesMenuItems {\n\tREFRESH = \"tiles-refresh\",\n\tADD_APPS = \"tiles-addSmartApps\",\n\tEDIT_TILES = \"tiles-editTiles\"\n}\n\nexport enum tilesContainerMenuItems {\n\tREFRESH = \"container-tiles-refresh\",\n\tADD_APPS = \"container-tiles-addSmartApps\",\n\tEDIT_TILES = \"container-tiles-editTiles\",\n\tSHOW_MORE = \"tilesContainerFullScreenMenuItem\"\n}\n\nexport enum tilesActionButtons {\n\tADD_TILES = \"tiles-addTilesButton\"\n}\n\nexport enum tilesContainerActionButtons {\n\tADD_TILES = \"container-tiles-addTilesButton\",\n\tSHOW_MORE = \"tilesContanerFullScreenActionButton\"\n}\n\nexport enum DisplayFormat {\n\tStandard = \"standard\",\n\tStandardWide = \"standardWide\"\n}\n\nconst StandardTileWidth = 176;\nconst StandardWideTileWidth = 368;\nconst Gap = 16;\n\n/**\n *\n * Tiles Panel class for managing and storing Space Insights Tiles.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n *\n * @private\n * @ui5-experimental-since 1.138.0\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.SpaceInsightsPanel\n */\n\nexport default class SpaceInsightsPanel extends BasePanel {\n\tconstructor(idOrSettings?: string | $SpaceInsightsPanelSettings);\n\tconstructor(id?: string, settings?: $SpaceInsightsPanelSettings);\n\t/**\n\t * Constructor for a new Tiles Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $SpaceInsightsPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\tprivate _oData!: Record<string, unknown>;\n\tprivate appManagerInstance!: AppManager;\n\tprivate VizInstantiationService!: VisualizationInstantiation;\n\tprivate tilesContainer!: GridContainer;\n\tprivate tilesMobileContainer!: HeaderContainer;\n\tprivate _tilesWrapper!: VBox;\n\tprivate aInsightsApps!: ICustomVisualization[] | GenericTile[];\n\tprivate _controlModel!: JSONModel;\n\tpublic _controlMap!: Map<string, Control | Element | UI5Element>;\n\tprivate _containerMenuItems!: MenuItem[];\n\tprivate _containerActionButtons!: Button[];\n\tprivate insightsContainer!: InsightsContainer;\n\tprivate _appSwitched!: boolean;\n\tprivate _headerVisible: boolean = false;\n\tprivate pageManager!: PageManager;\n\tprivate allSpaces!: ISpace[];\n\tprivate spaceTitle!: string | undefined;\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies the space whose apps should be loaded.\n\t\t\t */\n\t\t\tspaceId: { type: \"string\", group: \"Data\", defaultValue: \"\" },\n\t\t\t/**\n\t\t\t * Title for the tiles panel\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Misc\", defaultValue: \"\" },\n\t\t\t/**\n\t\t\t * The name of the URL parameter used to expand the container into full-screen mode.\n\t\t\t */\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", defaultValue: \"SI3\", visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"tiles\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Specifies the content aggregation of the panel.\n\t\t\t */\n\t\t\tcontent: { multiple: true, singularName: \"content\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Aggregation of tiles available within the tiles Panel\n\t\t\t */\n\t\t\ttiles: { type: \"sap.cux.home.App\", multiple: true, singularName: \"tile\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\thandleHidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t},\n\t\t\thandleUnhidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Initializes the Tiles Panel.\n\t *\n\t * @private\n\t * @override\n\t */\n\tinit() {\n\t\tsuper.init();\n\t\tthis._controlMap = new Map();\n\t\t//Initialise Tiles Model\n\t\tthis._oData = {\n\t\t\ttiles: [] as ICustomVisualization[],\n\t\t\tactivateInsightsTiles: true,\n\t\t\tactivateInsightsTilesOnPhone: false,\n\t\t\tactivateInsightsTilesOnDesktop: false\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t\tthis.pageManager = getPageManagerInstance(this);\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\n\t\tthis._createTilesFlexWrapper();\n\t\tContainer.getServiceAsync<VisualizationInstantiation>(\"VisualizationInstantiation\")\n\t\t\t.then((VizInstantiationService) => {\n\t\t\t\tthis.VizInstantiationService = VizInstantiationService;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t});\n\n\t\t// Toggles the activity of tiles\n\t\tthis._toggleTileActivity();\n\t}\n\n\tpublic setTitle(title: string) {\n\t\tif (!this.spaceTitle) this.spaceTitle = title;\n\t\treturn this.setProperty(\"title\", title);\n\t}\n\n\tpublic getTitle(): string {\n\t\tif (this.spaceTitle) return this.spaceTitle;\n\t\treturn this.getProperty(\"title\") as string;\n\t}\n\n\t/**\n\t * Toggles the activity of tiles on route change.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _toggleTileActivity(): void {\n\t\tconst toggleUserActions = async (event: Event<{ isMyHomeRoute: boolean }>) => {\n\t\t\tconst show = event.getParameter(\"isMyHomeRoute\");\n\t\t\tthis._controlModel.setProperty(\"/activateInsightsTiles\", show);\n\t\t\tif (show) {\n\t\t\t\tif (this._appSwitched) {\n\t\t\t\t\tawait this.refreshData(true);\n\t\t\t\t\tthis._appSwitched = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._appSwitched = true;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tS4MyHome.attachRouteMatched({}, toggleUserActions, this);\n\t\t} catch (error) {\n\t\t\tLog.warning(error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * Displays placeholder tiles while loading.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _showPlaceHolders() {\n\t\tconst placeholderArray = new Array(this._calculatePlaceholderTileCount()).fill(LoadState.Loading) as LoadState[];\n\t\tthis.aInsightsApps = placeholderArray.map((tileState: LoadState, index: number) => {\n\t\t\treturn new GenericTile(recycleId(`${this.getId()}--placeHolderTile--${index}`), {\n\t\t\t\tsizeBehavior: \"Responsive\",\n\t\t\t\tstate: tileState,\n\t\t\t\tframeType: \"OneByOne\",\n\t\t\t\tmode: \"IconMode\",\n\t\t\t\tvisible: true,\n\t\t\t\trenderOnThemeChange: true,\n\t\t\t\tariaRole: \"listitem\",\n\t\t\t\tdropAreaOffset: 8\n\t\t\t}).setLayoutData?.(\n\t\t\t\tnew GridContainerItemLayoutData(recycleId(`${this.getId()}--placeHolderTileLayoutData--${index}`), {\n\t\t\t\t\tcolumns: 2\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t\tthis._controlModel.setProperty(\"/tiles\", this.aInsightsApps);\n\t}\n\n\t/**\n\t * Clears the placeholder tiles.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _clearPlaceHolders() {\n\t\tthis._controlModel.setProperty(\"/tiles\", []);\n\t}\n\n\t/**\n\t * Renders the panel.\n\t *\n\t * @private\n\t * @returns {Promise<void>} A promise that resolves when the panel is rendered.\n\t */\n\tpublic async renderPanel(): Promise<void> {\n\t\ttry {\n\t\t\treturn await this.refreshData();\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tthis.fireHandleHidePanel();\n\t\t} finally {\n\t\t\tthis.fireEvent(\"loaded\");\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate async fetchDynamicAppInSpace(): Promise<ICustomVisualization[]> {\n\t\tconst spaceId = this.getProperty(\"spaceId\") as string;\n\t\tthis.allSpaces = this.allSpaces || (await this.pageManager.fetchAllAvailableSpaces());\n\t\tconst space = this.allSpaces.find((space) => space.id === spaceId);\n\n\t\tif (!space || space.children.length === 0) return [];\n\t\tlet allVisualizations: ISectionAndVisualization[] = [];\n\n\t\tif (space && space.children.length > 0) {\n\t\t\tfor (const child of space.children) {\n\t\t\t\tconst visualizations = await this.appManagerInstance.fetchFavVizs(true, true, child.id);\n\t\t\t\tallVisualizations.push(...visualizations);\n\t\t\t}\n\t\t}\n\n\t\t//Filter out dynamic tiles\n\t\tallVisualizations = filterVisualizations(allVisualizations, true);\n\n\t\t//filter out duplicate visualizations\n\t\tallVisualizations = this.appManagerInstance._filterDuplicateVizs(allVisualizations, false);\n\n\t\treturn allVisualizations;\n\t}\n\n\t/**\n\t * Refreshes the data in the panel.\n\t *\n\t * @private\n\t * @param {boolean} [refreshTiles=false] - Whether to refresh the tiles.\n\t * @returns {Promise<void>} A promise that resolves when the data is refreshed.\n\t */\n\tpublic async refreshData(refreshTiles: boolean = false) {\n\t\tconst panelName = this.getMetadata().getName();\n\t\tthis.aInsightsApps = await this.fetchDynamicAppInSpace();\n\t\tconst bIsSmartBusinessTilePresent = this.aInsightsApps.some((oApp) => oApp.isSmartBusinessTile);\n\t\tif (bIsSmartBusinessTilePresent) {\n\t\t\tawait Lib.load({ name: \"sap.cloudfnd.smartbusiness.lib.reusetiles\" });\n\t\t}\n\t\tthis._clearPlaceHolders();\n\t\tthis._controlModel.setProperty(\"/tiles\", this.aInsightsApps);\n\t\tif (this.aInsightsApps?.length) {\n\t\t\tthis.fireHandleUnhidePanel();\n\t\t\tif (refreshTiles) {\n\t\t\t\tconst isMobile = this.getDeviceType() === DeviceType.Mobile;\n\t\t\t\tconst container = isMobile ? this.tilesMobileContainer : this.tilesContainer;\n\t\t\t\tconst sDefaultAggreName = container.getMetadata().getDefaultAggregationName();\n\t\t\t\tconst dynamicTiles = (container.getAggregation(sDefaultAggreName) as ManagedObject[]) || [];\n\t\t\t\tdynamicTiles.forEach((tiles) => (tiles as ICustomVisualization).refresh?.());\n\t\t\t}\n\t\t\tthis._getInsightsContainer().updatePanelsItemCount(this.aInsightsApps.length, panelName);\n\t\t\tif (this._headerVisible) {\n\t\t\t\tthis.setProperty(\"title\", `${this.spaceTitle} (${this.aInsightsApps.length})`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.fireHandleHidePanel();\n\t\t}\n\t}\n\n\t/**\n\t * Generates the wrapper for the tiles container, if it doesn't already exist\n\t *\n\t * @private\n\t * @override\n\t * @returns {sap.m.VBox} The tiles Vbox wrapper.\n\t */\n\tprivate _createTilesFlexWrapper() {\n\t\tif (!this._tilesWrapper) {\n\t\t\tthis._tilesWrapper = new VBox(`${this.getId()}-tilesWrapper`, {\n\t\t\t\trenderType: \"Bare\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\titems: [this._createMobileFlexWrapper(), this._createWrapperFlexBox()]\n\t\t\t});\n\t\t\tthis._showPlaceHolders();\n\t\t\tthis._tilesWrapper.setModel(this._controlModel);\n\t\t\tthis.addContent(this._tilesWrapper);\n\t\t}\n\t}\n\n\t/**\n\t * Generates wrapper for displaying tiles in mobile mode.\n\t * @private\n\t * @returns {sap.m.HeaderContainer} The generated tiles wrapper.\n\t */\n\n\tprivate _createMobileFlexWrapper(): HeaderContainer {\n\t\t// Check if the mobile container already exists\n\t\tif (!this.tilesMobileContainer) {\n\t\t\t// Create the HeaderContainer with required properties\n\t\t\tthis.tilesMobileContainer = new HeaderContainer(`${this.getId()}-insightsTilesMobileContainer`, {\n\t\t\t\tscrollStep: 0,\n\t\t\t\tscrollStepByItem: 1,\n\t\t\t\tgridLayout: true,\n\t\t\t\tscrollTime: 1000,\n\t\t\t\tshowDividers: false,\n\t\t\t\tvisible: \"{/isPhone}\"\n\t\t\t}).addStyleClass(\"sectionMarginTopTilesInsight sapMHeaderContainerMarginBottom\");\n\n\t\t\t// Attach aggregation to the container\n\t\t\tthis._attachAggregationToContainer(this.tilesMobileContainer);\n\t\t}\n\t\t// Return the existing or newly created container\n\t\treturn this.tilesMobileContainer;\n\t}\n\n\t/**\n\t * Generates app wrapper (GridContainer) for displaying tiles.\n\t * @private\n\t * @returns {sap.m.GridContainer} The generated tiles wrapper.\n\t */\n\n\tprivate _createWrapperFlexBox(): GridContainer {\n\t\t// Check if the tilesContainer already exists\n\t\tif (!this.tilesContainer) {\n\t\t\t// Create the GridContainer with required properties\n\t\t\tthis.tilesContainer = new GridContainer(`${this.getId()}-insightsTilesContainer`, {\n\t\t\t\tvisible: \"{= !${/isPhone}}\"\n\t\t\t}).addStyleClass(\"insightTiles sapUiSmallMarginTop sapUiSmallMarginBottom\");\n\t\t\t// Attach aggregation to the container\n\t\t\tthis._attachAggregationToContainer(this.tilesContainer);\n\t\t}\n\t\t// Return the existing or newly created container\n\t\treturn this.tilesContainer;\n\t}\n\n\t/**\n\t * Updates the activation flags for Insights Tiles based on the device type and viewport.\n\t *\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _updateTilesActivity(): void {\n\t\t// Activate Insights Tiles based on container in viewport\n\t\tconst isPhoneScreen: boolean = this.getDeviceType() === DeviceType.Mobile;\n\t\t// Explicitly type the property being retrieved\n\t\tconst bActivateInsightsTiles: boolean = Boolean(this._controlModel.getProperty(\"/activateInsightsTiles\"));\n\t\tthis._controlModel.setProperty(\"/activateInsightsTilesOnPhone\", bActivateInsightsTiles && isPhoneScreen);\n\t\tthis._controlModel.setProperty(\"/activateInsightsTilesOnDesktop\", bActivateInsightsTiles && !isPhoneScreen);\n\t}\n\t/**\n\t * Attaches necessary aggregations and configurations to the provided container.\n\t *\n\t * @private\n\t * @param {GridContainer | HeaderContainer} tilesContainer - The container to which the aggregation and events are to be attached.\n\t * @returns {void}\n\t *\n\t */\n\tprivate _attachAggregationToContainer(tilesContainer: GridContainer | HeaderContainer) {\n\t\ttilesContainer.setModel(this._controlModel);\n\t\tconst sDefaultAggreName = tilesContainer.getMetadata().getDefaultAggregationName();\n\t\tconst isPhoneScreen = this.getDeviceType() === DeviceType.Mobile;\n\t\ttilesContainer.bindAggregation(sDefaultAggreName, {\n\t\t\tpath: \"/tiles\",\n\t\t\tfactory: (id: string, context: Context): ManagedObject => {\n\t\t\t\tconst oApp = context.getObject() as ICustomVisualization;\n\t\t\t\tif (oApp instanceof GenericTile) {\n\t\t\t\t\treturn oApp;\n\t\t\t\t}\n\t\t\t\tconst oVisualization = this.VizInstantiationService.instantiateVisualization(oApp.visualization) as ICustomVisualization;\n\t\t\t\toVisualization.setLayoutData?.(\n\t\t\t\t\tnew GridContainerItemLayoutData(`${this.getId()}-itemLayoutData-${id}`, {\n\t\t\t\t\t\tminRows: 2,\n\t\t\t\t\t\tcolumns: oVisualization.getDisplayFormat?.() === DisplayFormat.Standard ? 2 : 4\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\toVisualization?.bindProperty?.(\n\t\t\t\t\t\"active\",\n\t\t\t\t\tisPhoneScreen ? \"/activateInsightsTilesOnPhone\" : \"/activateInsightsTilesOnDesktop\"\n\t\t\t\t);\n\t\t\t\treturn oVisualization as ManagedObject;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Hides the header of the tiles panel.\n\t * @private\n\t */\n\tpublic handleHideHeader() {\n\t\tthis._headerVisible = false;\n\t\tthis.setProperty(\"title\", \"\");\n\t\tthis._toggleHeaderActions(false);\n\t}\n\n\t/**\n\t * Adds the header to the tiles panel.\n\t * @private\n\t */\n\tpublic handleAddHeader() {\n\t\tthis._headerVisible = true;\n\t\tthis.setProperty(\"title\", `${this.spaceTitle} (${this.aInsightsApps.length})`);\n\t\tthis._toggleHeaderActions(true);\n\t}\n\n\t/**\n\t * Calculates the number of visible tiles that can fit within the available width of the parent container.\n\t *\n\t * @private\n\t * @param {ICustomVisualization[]} insightsApps - An array of custom visualizations to be displayed as tiles.\n\t * @returns {number} - The number of visible tiles.\n\t */\n\tprivate _calculateVisibleTileCount(insightsApps: ICustomVisualization[]): number {\n\t\tconst layout = this._getInsightsContainer()?._getLayout();\n\t\tconst layoutDomRef = layout?.getDomRef();\n\t\tconst apps = insightsApps || [];\n\t\tlet count = 0;\n\n\t\tif (layoutDomRef && apps.length) {\n\t\t\tconst isHeaderVisible = layout.getProperty(\"showHeader\") as boolean;\n\t\t\tconst sectionNodeIndex = isHeaderVisible ? 1 : 0;\n\t\t\tconst sectionDomRef = layoutDomRef.childNodes[sectionNodeIndex] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tlet availableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tconst widthMap = {} as Record<DisplayFormat, number>;\n\n\t\t\twidthMap[DisplayFormat.Standard] = StandardTileWidth + Gap;\n\t\t\twidthMap[DisplayFormat.StandardWide] = StandardWideTileWidth + Gap;\n\n\t\t\tlet nextTileWidth = widthMap[(apps[count].visualization?.displayFormatHint ?? DisplayFormat.Standard) as DisplayFormat];\n\t\t\tdo {\n\t\t\t\tavailableWidth -= nextTileWidth;\n\t\t\t\t++count;\n\t\t\t\tnextTileWidth = widthMap[(apps[count]?.visualization?.displayFormatHint ?? DisplayFormat.Standard) as DisplayFormat];\n\t\t\t} while (availableWidth > nextTileWidth);\n\t\t}\n\n\t\treturn count || 1;\n\t}\n\n\tprivate _calculatePlaceholderTileCount(): number {\n\t\tconst layoutDomRef = this._getInsightsContainer()?._getLayout()?.getDomRef();\n\t\tlet count = 0;\n\t\tif (layoutDomRef) {\n\t\t\tconst sectionDomRef = layoutDomRef.childNodes[0] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tlet availableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tconst width = StandardTileWidth + Gap;\n\n\t\t\tcount = Math.floor(availableWidth / width);\n\t\t}\n\n\t\treturn count || 1;\n\t}\n\n\t/**\n\t * Adjusts the layout of the tiles panel based on the current layout and device type.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic _adjustLayout() {\n\t\tconst layout = this._getInsightsContainer()?._getLayout();\n\t\tconst isMobileDevice = this.getDeviceType() === DeviceType.Mobile;\n\n\t\tif (layout) {\n\t\t\tconst visibleTileCount = isMobileDevice\n\t\t\t\t? this.aInsightsApps?.length\n\t\t\t\t: this._calculateVisibleTileCount(this.aInsightsApps as ICustomVisualization[]);\n\t\t\tconst isElementExpanded = layout._getCurrentExpandedElementName() === this.getProperty(\"fullScreenName\");\n\t\t\tthis._controlModel.setProperty(\n\t\t\t\t\"/tiles\",\n\t\t\t\tisElementExpanded ? this.aInsightsApps : this.aInsightsApps?.slice(0, visibleTileCount)\n\t\t\t);\n\t\t\tthis._controlModel.setProperty(\"/isPhone\", isMobileDevice);\n\t\t\tthis._updateTilesActivity();\n\t\t\t//Show/Hide Full Screen Button if panel header is visible otherwise update visibility of container Full Screen Button\n\t\t\tconst showFullScreenButton = isElementExpanded || this.aInsightsApps.length > visibleTileCount;\n\t\t\tif (this._headerVisible) {\n\t\t\t\tif (!isMobileDevice) {\n\t\t\t\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) => {\n\t\t\t\t\t\tif (actionButton.getId().includes(tilesActionButtons.ADD_TILES)) {\n\t\t\t\t\t\t\tthis._getInsightsContainer().toggleActionButton(actionButton, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._getInsightsContainer()?.toggleFullScreenElements(this, showFullScreenButton);\n\t\t\t} else {\n\t\t\t\tconst fullScreenButton = getAssociatedFullScreenMenuItem(this);\n\t\t\t\tconst fullScreenText = fullScreenButton?.getTitle() ?? \"\";\n\t\t\t\tthis._getInsightsContainer()?.updateMenuItem(\n\t\t\t\t\tthis._controlMap.get(`${this.getId()}-${tilesContainerMenuItems.SHOW_MORE}`) as MenuItem,\n\t\t\t\t\tshowFullScreenButton,\n\t\t\t\t\tfullScreenText\n\t\t\t\t);\n\t\t\t\tthis._getInsightsContainer()?.updateActionButton(\n\t\t\t\t\tthis._controlMap.get(`${this.getId()}-${tilesContainerActionButtons.SHOW_MORE}`) as Button,\n\t\t\t\t\tshowFullScreenButton,\n\t\t\t\t\tfullScreenText\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the InsightsContainer instance associated with this TilesPanel.\n\t *\n\t * @private\n\t * @returns {InsightsContainer} The InsightsContainer instance.\n\t */\n\tprivate _getInsightsContainer(): InsightsContainer {\n\t\tif (!this.insightsContainer) {\n\t\t\tthis.insightsContainer = this.getParent() as InsightsContainer;\n\t\t}\n\t\treturn this.insightsContainer;\n\t}\n\n\t/**\n\t * Retrieves the menu items for the container.\n\t *\n\t * @private\n\t * @returns {MenuItem[]} An array of MenuItem instances.\n\t */\n\tpublic getContainerMenuItems(): MenuItem[] {\n\t\tif (!this._containerMenuItems) {\n\t\t\tconst containerShowMore = createShowMoreMenuItem(this, tilesContainerMenuItems.SHOW_MORE, \"containerTilesShowMore\");\n\t\t\tthis._controlMap.set(`${this.getId()}-${tilesContainerMenuItems.SHOW_MORE}`, containerShowMore);\n\t\t\tthis._containerMenuItems = [containerShowMore];\n\t\t}\n\t\treturn this._containerMenuItems;\n\t}\n\n\t/**\n\t * Retrieves the action buttons for the container.\n\t *\n\t * @private\n\t * @returns {Button[]} An array of Button instances.\n\t */\n\tpublic getContainerActionButtons(): Button[] {\n\t\tif (!this._containerActionButtons) {\n\t\t\tthis._containerActionButtons = [];\n\n\t\t\tconst containerFullScreenActionButton = createShowMoreActionButton(\n\t\t\t\tthis,\n\t\t\t\ttilesContainerActionButtons.SHOW_MORE,\n\t\t\t\t\"containerTilesShowMore\"\n\t\t\t);\n\t\t\tif (containerFullScreenActionButton) {\n\t\t\t\tthis._controlMap.set(`${this.getId()}-${tilesContainerActionButtons.SHOW_MORE}`, containerFullScreenActionButton);\n\t\t\t\tthis._containerActionButtons.push(containerFullScreenActionButton);\n\t\t\t}\n\t\t}\n\t\treturn this._containerActionButtons;\n\t}\n\n\t/**\n\t * Toggles the visibility of the header actions.\n\t *\n\t * @param {boolean} bShow - Whether to show or hide the header actions.\n\t * @private\n\t */\n\tprivate _toggleHeaderActions(bShow: boolean) {\n\t\t(this.getAggregation(\"menuItems\") as MenuItem[])?.forEach((menuItem) => {\n\t\t\tthis._getInsightsContainer()?.toggleMenuListItem(menuItem, bShow);\n\t\t});\n\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) =>\n\t\t\tthis._getInsightsContainer()?.toggleActionButton(actionButton, bShow)\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}