{"version":3,"file":"ToDoPanel.js","names":["sap","ui","define","Log","Card","GridContainer","GridContainerSettings","Button","GenericTile","HeaderContainer","IllustratedMessage","IllustratedMessageSize","Text","TileContent","VBox","sap_m_library","Device","UI5Element","InvisibleText","DateFormat","JSONModel","__BasePanel","__MenuItem","__ToDosContainer","__BatchHelper","___utils_Device","___utils_FESRUtil","__HttpHelper","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","Priority","_finallyRethrows","finalizer","bind","URLHelper","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","observer","prototype","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","_forTo","array","check","i","reject","_cycle","length","BasePanel","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","MenuItem","ToDosContainer","BatchHelper","calculateCardWidth","DeviceType","fetchElementProperties","addFESRId","HttpHelper","Constants","SITUATION_ICON","PLACEHOLDER_ITEMS_COUNT","TODO_CARDS_LIMIT","TODO_SECTION_LIMIT","TODOS_REFRESH_INTERVAL","MOBILE_DEVICE_MAX_WIDTH","DEFAULT_TITLE_HEIGHT","DEFAULT_CARD_HEIGHT","DEFAULT_TAB_HEADER_HEIGHT","GAP","ToDoPanel","extend","metadata","library","properties","baseUrl","type","group","defaultValue","visibility","countUrl","dataUrl","targetAppUrl","minCardWidth","maxCardWidth","useBatch","aggregations","content","multiple","singularName","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","batchHelper","init","_init","BasePanel.prototype.init.call","_oData","isLoaded","hasError","cardWidth","getSupported","isExpandedOnce","isCountCalledOnce","illustrationType","refreshInfo","_toRelativeDateTime","Date","fullRefreshInfo","_toFullRelativeDateTime","horizontalCardCount","illustrationTitle","_i18nBundle","getText","illustrationDescription","isPhone","resize","width","system","phone","tiles","Array","fill","loadState","displayTiles","_controlModel","requests","_toDoWrapper","getId","renderType","items","_generateCardContainer","_generateMobileCardContainer","_generateErrorMessage","setModel","addContent","menuItem","title","icon","press","_onPressRefresh","addAggregation","_accRefreshLabel","text","addDependent","_refreshBtn","addAriaLabelledBy","setProperty","attachEvent","Promise","resolve","_beforePanelExpand","_cardContainer","inlineBlockLayout","snapToRow","visible","layout","columns","columnSize","gap","addStyleClass","_mobileCardContainer","scrollStep","gridLayout","scrollTime","showDividers","_errorCard","_errorMessage","illustrationSize","Base","description","getParent","_getSelectedPanel","_loadCards","forceRefresh","_this2","_loadToDos","undefined","_bindInnerControls","selectedKey","getProperty","_isElementExpanded","_setCount","_getSupported","setTimeout","_generatePlaceHolderTiles","_generateRequestObject","onlyCount","concat","_submitBatch","fireEvent","_setSectionRefreshInterval","lastRefreshedTime","_updateRefreshInformation","_switchTabIfRequired","_updateHeaderIfExclusive","catch","error","Error","message","finally","refresh","_adjustLayout","_handleError","getTargetAppUrl","removeContent","_isExclusivePanel","_setTitle","String","_innerControlsBound","bindAggregation","path","factory","context","generateCardTemplate","bindProperty","_generateCardTemplate","mode","frameType","pressEnabled","header","tileContent","priority","priorityText","_toPriorityText","footer","key","VeryHigh","High","Medium","Low","_cardCount","_getVisibleCardCount","isPlaceholder","calculationProperties","_getLayout","isElementExpanded","targetDomRef","getDomRef","isHeaderVisible","containerDomRef","_getFullScreenContainer","sectionNodeIndex","childNodes","isMobileDevice","cardCount","getHorizontalCardCount","getVerticalCardCount","toDosContainer","_getCurrentExpandedElementName","_getHorizontalCardCount","domRef","domProperties","availableWidth","Object","slice","reduce","propertyValue","actualCardCount","minWidth","maxWidth","cardLayoutConfig","containerWidth","totalCards","Math","max","floor","_getVerticalCardCount","sectionDomProperties","parentDomProperties","parentElement","titleHeight","calculateTitleHeight","availableHeight","height","margin","cardHeight","verticalCardCount","_calculateTitleHeight","container","containerHeaderRef","getElementById","iconTabBarHeaderRef","_getInnerControl","defaultHeight","clientHeight","options","_this3","getCountUrl","urls","generateRequestUrls","splice","baseURL","getBaseUrl","requestURLs","success","args","onDataReceived","Number","_handleEmptyCards","_generateRequestUrls","getDataUrl","queryString","includes","_onDataReceived","results","_this4","getNoDataText","allPanels","getContent","supportedPanels","filter","panel","clearInterval","refreshFn","setInterval","setAggregation","_updateContainerHeader","displayCards","getDeviceType","Mobile","toggleFullScreenElements","date","inputDate","isNaN","relativeDateFormatter","format","fullRelativeDateFormatter","_getNoDataText","_parseResponse","response","d","numericD","numericResponse","_this5","all","map","request","createMultipartRequest","GetMultipleRequests","responses","processedResponses","JSON","parse","_temp","_wasThrown","_result","_clearRequests","_isLoaded","parentContainer","isContainerExpanded","_setLoaded","_setSupported","isSupported","_getAppIntent","pattern","match","semanticObject","action","params","paramsArray","split","param","_this6","_interrupt","_temp5","_temp3","nextAvailablePanel","panels","getAggregation","_temp4","_temp2","_getCardCount","_onPressViewAll","redirect","_this7","_temp6","exit","_exit","getDateTimeInstance","style","relative","relativeStyle"],"sources":["ToDoPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport Card from \"sap/f/Card\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageSize from \"sap/m/IllustratedMessageSize\";\nimport Text from \"sap/m/Text\";\nimport TileContent from \"sap/m/TileContent\";\nimport VBox from \"sap/m/VBox\";\nimport { LoadState, Priority, URLHelper } from \"sap/m/library\";\nimport Device from \"sap/ui/Device\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport InvisibleText from \"sap/ui/core/InvisibleText\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport BaseContainer from \"./BaseContainer\";\nimport BasePanel from \"./BasePanel\";\nimport IToDoPanel from \"./IToDoPanel\";\nimport MenuItem from \"./MenuItem\";\nimport { $ToDoPanelSettings } from \"./ToDoPanel\";\nimport ToDosContainer from \"./ToDosContainer\";\nimport BatchHelper from \"./utils/BatchHelper\";\nimport { calculateCardWidth, DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { addFESRId } from \"./utils/FESRUtil\";\nimport HttpHelper from \"./utils/HttpHelper\";\n\ninterface Request {\n\tbaseURL: string;\n\trequestURLs: string[];\n\tsuccess(args: unknown[]): Promise<void>;\n}\n\nexport interface CalculationProperties {\n\tisPlaceholder?: boolean;\n}\n\nexport interface Intent {\n\ttarget: {\n\t\tsemanticObject: string;\n\t\taction: string;\n\t};\n\tparams: {\n\t\t[key: string]: string;\n\t};\n}\n\nexport interface RequestOptions {\n\ttype: string;\n\tonlyCount?: boolean;\n}\n\nexport interface Response {\n\td?: {\n\t\tresults?: unknown[];\n\t};\n\tresults?: unknown[];\n\tvalue?: unknown[];\n}\n\nconst Constants = {\n\tSITUATION_ICON: \"sap-icon://message-warning\",\n\tPLACEHOLDER_ITEMS_COUNT: 5,\n\tTODO_CARDS_LIMIT: 100,\n\tTODO_SECTION_LIMIT: 6,\n\tTODOS_REFRESH_INTERVAL: 65000,\n\tMOBILE_DEVICE_MAX_WIDTH: 600,\n\tDEFAULT_TITLE_HEIGHT: 33,\n\tDEFAULT_CARD_HEIGHT: 168,\n\tDEFAULT_TAB_HEADER_HEIGHT: 44,\n\tGAP: 16\n};\n\n/**\n *\n * Abstract Panel class for managing and storing To-Do cards.\n *\n * @extends BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.ToDoPanel\n */\nexport default abstract class ToDoPanel extends BasePanel implements IToDoPanel {\n\tprotected _oData!: Record<string, unknown>;\n\tprotected requests!: Request[];\n\tprivate _controlModel!: JSONModel;\n\tprivate _toDoWrapper!: VBox;\n\tprivate _cardContainer!: GridContainer;\n\tprivate _mobileCardContainer!: HeaderContainer;\n\tprivate _errorCard!: Card;\n\tprivate _errorMessage!: IllustratedMessage;\n\tprivate _refreshBtn!: Button;\n\tprivate _loadToDos!: Promise<void> | undefined;\n\tprivate _innerControlsBound!: boolean;\n\tprivate _cardCount!: number;\n\tprivate batchHelper!: BatchHelper;\n\tprivate _accRefreshLabel!: InvisibleText;\n\n\tconstructor(id?: string | $ToDoPanelSettings);\n\tconstructor(id?: string, settings?: $ToDoPanelSettings);\n\t/**\n\t * Constructor for a new To-Dos Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $ToDoPanelSettings) {\n\t\tsuper(id, settings);\n\t\tthis.batchHelper = new BatchHelper();\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies the base URL for batching requests sent from the panel.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tbaseUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL for fetching the count of requested to-do cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcountUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL from where the to-do cards should be fetched.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tdataUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL of the target application associated with the to-do cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\ttargetAppUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the minimum width of the card in pixels.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tminCardWidth: { type: \"int\", group: \"Misc\", defaultValue: 304, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies the maximum width of the card in pixels.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tmaxCardWidth: { type: \"int\", group: \"Misc\", defaultValue: 583, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies whether the panel should batch requests.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tuseBatch: { type: \"boolean\", group: \"Misc\", defaultValue: true, visibility: \"hidden\" }\n\t\t},\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Specifies the content aggregation of the panel.\n\t\t\t */\n\t\t\tcontent: { multiple: true, singularName: \"content\", visibility: \"hidden\" }\n\t\t}\n\t};\n\n\tstatic fullRelativeDateFormatter = DateFormat.getDateTimeInstance({\n\t\tstyle: \"long\",\n\t\trelative: true,\n\t\trelativeStyle: \"wide\"\n\t});\n\n\tstatic relativeDateFormatter = DateFormat.getDateTimeInstance({\n\t\tstyle: \"medium\",\n\t\trelative: true,\n\t\trelativeStyle: \"short\"\n\t});\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\n\t\t//Initialise ToDos Model\n\t\tthis._oData = {\n\t\t\tlength: 0,\n\t\t\tisLoaded: false,\n\t\t\thasError: false,\n\t\t\tcardWidth: \"20rem\",\n\t\t\tgetSupported: false,\n\t\t\tisExpandedOnce: false,\n\t\t\tisCountCalledOnce: false,\n\t\t\tillustrationType: \"sapIllus-NoTasks\",\n\t\t\trefreshInfo: this._toRelativeDateTime(new Date()),\n\t\t\tfullRefreshInfo: this._toFullRelativeDateTime(new Date()),\n\t\t\thorizontalCardCount: Constants.PLACEHOLDER_ITEMS_COUNT,\n\t\t\tillustrationTitle: this._i18nBundle.getText(\"noToDoTitle\"),\n\t\t\tillustrationDescription: this._i18nBundle.getText(\"noToDoDesc\"),\n\t\t\tisPhone: Device.resize.width < Constants.MOBILE_DEVICE_MAX_WIDTH || Device.system.phone,\n\t\t\ttiles: new Array(Constants.PLACEHOLDER_ITEMS_COUNT).fill({ loadState: \"Loading\" }),\n\t\t\tdisplayTiles: new Array(Constants.PLACEHOLDER_ITEMS_COUNT).fill({ loadState: \"Loading\" })\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\n\t\t//Initialize Request Queue\n\t\tthis.requests = [];\n\n\t\t//Add Wrapper Container to Panel\n\t\tthis._toDoWrapper = new VBox(`${this.getId()}-toDosWrapper`, {\n\t\t\trenderType: \"Bare\",\n\t\t\titems: [this._generateCardContainer(), this._generateMobileCardContainer(), this._generateErrorMessage()]\n\t\t});\n\t\tthis._toDoWrapper.setModel(this._controlModel);\n\t\tthis.addContent(this._toDoWrapper);\n\n\t\t//Setup Common Menu Items\n\t\tconst menuItem = new MenuItem(`${this.getId()}-refresh`, {\n\t\t\ttitle: this._i18nBundle.getText(\"refresh\"),\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\tpress: () => this._onPressRefresh()\n\t\t});\n\t\tthis.addAggregation(\"menuItems\", menuItem);\n\t\taddFESRId(menuItem, \"todosRefresh\");\n\n\t\tthis._accRefreshLabel = new InvisibleText(`${this.getId()}-refreshAccText`, {\n\t\t\ttext: this._toFullRelativeDateTime(new Date())\n\t\t});\n\t\tthis.addDependent(this._accRefreshLabel);\n\t\tthis._refreshBtn = new Button(`${this.getId()}-refreshBtn`, {\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\ttext: this._toRelativeDateTime(new Date()),\n\t\t\tpress: () => this._onPressRefresh()\n\t\t});\n\t\tthis._refreshBtn.addAriaLabelledBy(this._accRefreshLabel);\n\t\taddFESRId(this._refreshBtn, \"manualTodoRefresh\");\n\t\tthis.addAggregation(\"actionButtons\", this._refreshBtn);\n\n\t\t//Configure Full Screen and Expand Event handlers\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t\tthis.attachEvent(\"onExpand\", async () => {\n\t\t\tawait this._beforePanelExpand();\n\t\t});\n\t}\n\n\t/**\n\t * Generates the card container (GridContainer) for displaying cards.\n\t *\n\t * @private\n\t * @returns {GridContainer} The generated card container.\n\t */\n\tprivate _generateCardContainer(): GridContainer {\n\t\t//create container\n\t\tif (!this._cardContainer) {\n\t\t\tthis._cardContainer = new GridContainer(`${this.getId()}-flexContainer`, {\n\t\t\t\tinlineBlockLayout: true,\n\t\t\t\tsnapToRow: true,\n\t\t\t\tvisible: \"{= !${/isPhone} && !${/hasError} && (!${/isLoaded} || ${/length} > 0) }\",\n\t\t\t\tlayout: new GridContainerSettings(`${this.getId()}-layout`, {\n\t\t\t\t\tcolumns: \"{/horizontalCardCount}\",\n\t\t\t\t\tcolumnSize: \"{/cardWidth}\",\n\t\t\t\t\tgap: \"1rem\"\n\t\t\t\t})\n\t\t\t}).addStyleClass(\"sapCuxToDoCardsContainer\");\n\t\t}\n\n\t\treturn this._cardContainer;\n\t}\n\n\t/**\n\t * Generates the mobile card container (HeaderContainer) for displaying cards on mobile devices.\n\t *\n\t * @private\n\t * @returns {HeaderContainer} The generated mobile card container.\n\t */\n\tprivate _generateMobileCardContainer(): HeaderContainer {\n\t\t// Create a HeaderContainer for mobile devices\n\t\tif (!this._mobileCardContainer) {\n\t\t\tthis._mobileCardContainer = new HeaderContainer(`${this.getId()}-headerContainer`, {\n\t\t\t\tvisible: \"{/isPhone}\",\n\t\t\t\tscrollStep: 0,\n\t\t\t\tgridLayout: true,\n\t\t\t\tscrollTime: 1000,\n\t\t\t\tshowDividers: false,\n\t\t\t\tsnapToRow: true\n\t\t\t}).addStyleClass(\"sapCuxToDoMobileCardsContainer\");\n\t\t}\n\n\t\treturn this._mobileCardContainer;\n\t}\n\n\t/**\n\t * Generates the error message card for displaying error messages.\n\t *\n\t * @private\n\t * @returns {Card} The generated error message card.\n\t */\n\tprivate _generateErrorMessage(): Card {\n\t\tif (!this._errorCard) {\n\t\t\tthis._errorMessage = new IllustratedMessage(`${this.getId()}-errorMessage`, {\n\t\t\t\tillustrationSize: IllustratedMessageSize.Base,\n\t\t\t\ttitle: \"{/illustrationTitle}\",\n\t\t\t\tdescription: \"{/illustrationDescription}\",\n\t\t\t\tillustrationType: \"{/illustrationType}\"\n\t\t\t});\n\t\t\tthis._errorCard = new Card(`${this.getId()}-errorCard`, {\n\t\t\t\tcontent: this._errorMessage,\n\t\t\t\tvisible: \"{= ${/tiles/length} === 0 || ${/hasError} === true }\"\n\t\t\t});\n\t\t}\n\n\t\treturn this._errorCard;\n\t}\n\n\t/**\n\t * Handler for the Refresh button for each panel.\n\t * Reloads the selected panel\n\t *\n\t * @async\n\t * @private\n\t */\n\tprivate _onPressRefresh(): void {\n\t\tvoid ((this.getParent() as ToDosContainer)?._getSelectedPanel() as ToDoPanel)?._loadCards(true);\n\t}\n\n\t/**\n\t * Loads the To-Do cards for the panel.\n\t *\n\t * @private\n\t * @param {boolean} forceRefresh - force refresh cards\n\t * @returns {Promise<void>} A promise that resolves when the cards are loaded.\n\t */\n\tpublic async _loadCards(forceRefresh?: boolean): Promise<void> {\n\t\tif (this._loadToDos !== undefined && !forceRefresh) {\n\t\t\treturn this._loadToDos;\n\t\t} else {\n\t\t\tthis._bindInnerControls();\n\t\t\tthis._loadToDos = new Promise((resolve) => {\n\t\t\t\tconst selectedKey = (this.getParent() as BaseContainer)?._getSelectedPanel()?.getProperty(\"key\") as string;\n\t\t\t\tconst requests: Request[] = [];\n\n\t\t\t\tthis._oData.isLoaded = false;\n\t\t\t\tthis._oData.isCountCalledOnce = false;\n\t\t\t\tthis._oData.isExpandedOnce = this._isElementExpanded();\n\t\t\t\tthis._setCount();\n\n\t\t\t\tif (this._getSupported()) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Load Placeholder Cards\n\t\t\t\t\t\tthis._generatePlaceHolderTiles();\n\n\t\t\t\t\t\t// Add Initial Batch Requests\n\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\tthis._generateRequestObject({ type: selectedKey, onlyCount: selectedKey !== this.getProperty(\"key\") })\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.requests = this.requests.concat(requests);\n\n\t\t\t\t\t\t//Submit Batch Requests\n\t\t\t\t\t\tthis._submitBatch()\n\t\t\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\t\t\tthis._oData.isLoaded = selectedKey === this.getProperty(\"key\");\n\t\t\t\t\t\t\t\tthis.fireEvent(\"loaded\");\n\n\t\t\t\t\t\t\t\tthis._oData.isCountCalledOnce = true;\n\t\t\t\t\t\t\t\tthis._setCount(this._oData.length as string);\n\n\t\t\t\t\t\t\t\tthis._setSectionRefreshInterval();\n\t\t\t\t\t\t\t\tthis._oData.refreshInfo = this._toRelativeDateTime(new Date());\n\t\t\t\t\t\t\t\tthis._oData.fullRefreshInfo = this._toFullRelativeDateTime(new Date());\n\t\t\t\t\t\t\t\tthis._oData.lastRefreshedTime = new Date();\n\t\t\t\t\t\t\t\tthis._updateRefreshInformation();\n\n\t\t\t\t\t\t\t\tawait this._switchTabIfRequired();\n\t\t\t\t\t\t\t\tthis._updateHeaderIfExclusive();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\t\t\t\tLog.error(error instanceof Error ? error.message : \"\");\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\t\tthis._controlModel.refresh();\n\t\t\t\t\t\t\t\tthis._adjustLayout();\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._handleError(`User not authorized to access: + ${this.getTargetAppUrl()}`);\n\n\t\t\t\t\t// Remove Item from IconTabBar\n\t\t\t\t\t(this.getParent() as ToDosContainer)?.removeContent(this);\n\n\t\t\t\t\t//resolve the promise\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadToDos;\n\t}\n\n\t/**\n\t * Update Container Header if the panel is exclusive\n\t *\n\t * @private\n\t */\n\tprivate _updateHeaderIfExclusive() {\n\t\tif (this._isExclusivePanel()) {\n\t\t\t(this.getParent() as ToDosContainer)._setTitle(`${this._i18nBundle.getText(\"toDosTitle\")} (${String(this._oData.length)})`);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a one-time binding of inner controls for the ToDoPanel.\n\t * @private\n\t */\n\tprivate _bindInnerControls(): void {\n\t\tif (!this._innerControlsBound) {\n\t\t\t//bind card container\n\t\t\tthis._cardContainer.bindAggregation(\"items\", {\n\t\t\t\tpath: \"/displayTiles\",\n\t\t\t\tlength: Constants.TODO_CARDS_LIMIT,\n\t\t\t\tfactory: (id, context) => this.generateCardTemplate(id, context)?.bindProperty?.(\"width\", { path: \"/cardWidth\" })\n\t\t\t});\n\n\t\t\t//bind mobile card container\n\t\t\tthis._mobileCardContainer.bindAggregation(\"content\", {\n\t\t\t\tpath: \"/displayTiles\",\n\t\t\t\tlength: Constants.TODO_CARDS_LIMIT,\n\t\t\t\tfactory: (id, context) => this.generateCardTemplate(id, context)?.bindProperty?.(\"width\", { path: \"/cardWidth\" })\n\t\t\t});\n\n\t\t\tthis._innerControlsBound = true;\n\t\t}\n\t}\n\n\t/**\n\t * Generates the card template for the Current Panel.\n\t *\n\t * @public\n\t * @param {string} id The ID for the template.\n\t * @param {object} context The context for the template.\n\t * @returns {object} The generated card template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\treturn new GenericTile(`${id}-tile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\theader: context.getProperty(\"title\") as string,\n\t\t\twidth: context.getProperty(\"/cardWidth\") as string,\n\t\t\tstate: context.getProperty(\"loadState\") as LoadState,\n\t\t\ttileContent: [\n\t\t\t\tnew TileContent(`${id}-tileContent`, {\n\t\t\t\t\tpriority: context.getProperty(\"priority\") as Priority,\n\t\t\t\t\tpriorityText: this._toPriorityText(context.getProperty(\"priority\") as Priority),\n\t\t\t\t\tfooter: context.getProperty(\"footerText\") as string,\n\t\t\t\t\tcontent: new Text(`${id}-situationContent`, {\n\t\t\t\t\t\ttext: context.getProperty(\"message\") as string\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Convert a priority string to a corresponding priority text.\n\t *\n\t * @private\n\t * @param {Priority} priority - The priority string.\n\t * @returns {string} The corresponding priority text.\n\t */\n\tpublic _toPriorityText(priority: Priority): string {\n\t\tlet key;\n\t\tif (priority === Priority.VeryHigh) {\n\t\t\tkey = \"veryHighPriority\";\n\t\t} else if (priority === Priority.High) {\n\t\t\tkey = \"highPriority\";\n\t\t} else if (priority === Priority.Medium) {\n\t\t\tkey = \"mediumPriority\";\n\t\t} else if (priority === Priority.Low) {\n\t\t\tkey = \"lowPriority\";\n\t\t} else {\n\t\t\tkey = \"nonePriority\";\n\t\t}\n\n\t\treturn this._i18nBundle.getText(key) as string;\n\t}\n\n\t/**\n\t * Generates placeholder tiles for the panel.\n\t *\n\t * @private\n\t */\n\tprivate _generatePlaceHolderTiles(): void {\n\t\tthis._cardCount = this._getVisibleCardCount({ isPlaceholder: true });\n\t\tthis._oData.displayTiles = this._oData.tiles = new Array(this._cardCount).fill({ loadState: \"Loading\" });\n\t\tthis._oData.isLoaded = this._oData.hasError = false;\n\t\tthis._controlModel.refresh();\n\t}\n\n\t/**\n\t * Calculates the number of visible cards that can fit within the available space of the To-Dos panel.\n\t *\n\t * @private\n\t * @param {CalculationProperties} [calculationProperties] - Optional properties to assist in the calculation.\n\t * @returns {number} - The number of visible cards.\n\t */\n\tprivate _getVisibleCardCount(calculationProperties?: CalculationProperties): number {\n\t\tconst layout = (this.getParent() as ToDosContainer)?._getLayout();\n\t\tlet isElementExpanded = false;\n\t\tlet targetDomRef = this._toDoWrapper?.getDomRef();\n\n\t\tif (layout) {\n\t\t\tisElementExpanded = this._isElementExpanded();\n\t\t\tconst isHeaderVisible = layout.getProperty(\"showHeader\") as boolean;\n\t\t\tconst containerDomRef = (isElementExpanded ? layout._getFullScreenContainer() : layout).getDomRef();\n\t\t\tconst sectionNodeIndex = isHeaderVisible && !isElementExpanded ? 1 : 0;\n\t\t\ttargetDomRef = containerDomRef?.childNodes[sectionNodeIndex] as Element;\n\t\t}\n\n\t\tconst isMobileDevice = this._controlModel.getProperty(\"/isPhone\") as boolean;\n\t\tlet cardCount = isMobileDevice ? Constants.TODO_SECTION_LIMIT : 1;\n\n\t\tif (targetDomRef) {\n\t\t\t// @ts-expect-error Calculate Horizontal Card Count\n\t\t\tcardCount = this.getHorizontalCardCount(targetDomRef, calculationProperties);\n\n\t\t\tif (isElementExpanded) {\n\t\t\t\t// @ts-expect-error Calculate Vertical Card Count\n\t\t\t\tcardCount *= this.getVerticalCardCount(targetDomRef, calculationProperties);\n\t\t\t}\n\n\t\t\t//Restrict cards to the maximum limit\n\t\t\tcardCount = cardCount > Constants.TODO_CARDS_LIMIT ? Constants.TODO_CARDS_LIMIT : cardCount;\n\t\t}\n\n\t\treturn cardCount;\n\t}\n\n\t/**\n\t * Checks if the current element is expanded to full screen.\n\t *\n\t * @private\n\t * @returns {boolean} - True if the element is expanded, otherwise false.\n\t */\n\tprivate _isElementExpanded(): boolean {\n\t\tconst toDosContainer = this.getParent() as ToDosContainer;\n\t\tconst layout = toDosContainer._getLayout();\n\t\treturn layout?._getCurrentExpandedElementName() === toDosContainer.getProperty(\"fullScreenName\");\n\t}\n\n\t/**\n\t * Calculates the number of horizontal cards that can fit within the available width of the given DOM element.\n\t *\n\t * @private\n\t * @param {Element} domRef - The DOM element to calculate the horizontal card count for.\n\t * @returns {number} - The number of horizontal cards that can fit within the available width.\n\t */\n\tprotected getHorizontalCardCount(domRef: Element): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"width\", \"padding-left\", \"padding-right\", \"margin-left\", \"margin-right\"]);\n\t\tconst availableWidth = Object.values(domProperties)\n\t\t\t.slice(1)\n\t\t\t.reduce((width, propertyValue) => width - propertyValue, domProperties[\"width\"]);\n\t\tconst actualCardCount = this._oData.length as number;\n\t\tconst isMobileDevice = this._controlModel.getProperty(\"/isPhone\") as boolean;\n\t\tlet horizontalCardCount;\n\t\tconst minWidth = this.getProperty(\"minCardWidth\") as number;\n\t\tconst maxWidth = this.getProperty(\"maxCardWidth\") as number;\n\t\tconst cardLayoutConfig = {\n\t\t\tcontainerWidth: availableWidth,\n\t\t\ttotalCards: actualCardCount,\n\t\t\tminWidth: minWidth,\n\t\t\tmaxWidth: maxWidth,\n\t\t\tgap: Constants.GAP\n\t\t};\n\t\tconst cardWidth = calculateCardWidth(cardLayoutConfig);\n\t\tif (isMobileDevice) {\n\t\t\thorizontalCardCount = Constants.TODO_SECTION_LIMIT;\n\t\t} else {\n\t\t\thorizontalCardCount = Math.max(Math.floor(availableWidth / cardWidth), 1);\n\t\t}\n\n\t\t// Calculate Horizontal Card Count\n\t\tthis._controlModel.setProperty(\"/cardWidth\", `${cardWidth / 16}rem`);\n\t\tthis._controlModel.setProperty(\"/horizontalCardCount\", horizontalCardCount);\n\n\t\treturn horizontalCardCount;\n\t}\n\n\t/**\n\t * Calculates the number of vertical cards that can fit within the available height of the given DOM element.\n\t *\n\t * @private\n\t * @param {Element} domRef - The DOM element to calculate the vertical card count for.\n\t * @returns {number} - The number of vertical cards that can fit within the available height.\n\t */\n\tprotected getVerticalCardCount(domRef: Element): number {\n\t\tconst sectionDomProperties = fetchElementProperties(domRef, [\"padding-top\"]);\n\t\tconst parentDomProperties = fetchElementProperties(domRef.parentElement as Element, [\"height\"]);\n\t\tconst titleHeight = this.calculateTitleHeight();\n\t\tconst availableHeight = parentDomProperties.height - sectionDomProperties[\"padding-top\"] * 2 - titleHeight;\n\t\tconst margin = 14;\n\t\tconst cardHeight = Constants.DEFAULT_CARD_HEIGHT + margin;\n\t\tconst verticalCardCount = Math.max(Math.floor(availableHeight / cardHeight), 2); //minimum of 2 rows should be displayed\n\n\t\treturn verticalCardCount;\n\t}\n\n\t/**\n\t * Calculates the combined height of the title and tab header for the To-Dos panel.\n\t *\n\t * @private\n\t * @returns {number} - The combined height of the title and tab header.\n\t */\n\tprotected calculateTitleHeight(): number {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tconst containerHeaderRef = UI5Element.getElementById(`${container.getId()}-header`)?.getDomRef();\n\t\tconst iconTabBarHeaderRef = UI5Element.getElementById(`${container._getInnerControl().getId()}--header`)?.getDomRef();\n\t\tconst defaultHeight = Constants.DEFAULT_TITLE_HEIGHT + Constants.DEFAULT_TAB_HEADER_HEIGHT;\n\t\tlet titleHeight = 0;\n\n\t\tif (containerHeaderRef && iconTabBarHeaderRef) {\n\t\t\ttitleHeight = containerHeaderRef.clientHeight + iconTabBarHeaderRef.clientHeight;\n\t\t}\n\n\t\treturn Math.max(titleHeight, defaultHeight);\n\t}\n\n\t/**\n\t * Generates a request object for batch requests.\n\t *\n\t * @private\n\t * @param {RequestOptions} options - Additional properties for generating the request object.\n\t * @param {boolean} [options.onlyCount] - Whether to include only the count in the request.\n\t * @returns {Object} The generated request object.\n\t */\n\tprivate _generateRequestObject(options: RequestOptions): Request {\n\t\tconst cardCount = this._getVisibleCardCount();\n\t\tconst countUrl = this.getCountUrl();\n\t\tconst urls = this.generateRequestUrls?.(cardCount);\n\n\t\tif (countUrl && options?.onlyCount) {\n\t\t\turls.splice(1);\n\t\t}\n\n\t\treturn {\n\t\t\tbaseURL: this.getBaseUrl(),\n\t\t\trequestURLs: urls,\n\t\t\tsuccess: async (args: unknown[]): Promise<void> => {\n\t\t\t\t//data process extension for panels\n\t\t\t\tawait this.onDataReceived(countUrl ? args.splice(1) : args, options);\n\n\t\t\t\t//set card count and handle empty cards\n\t\t\t\tthis._oData.length = countUrl ? Number(args[0]) : (this._oData.tiles as object[]).length;\n\t\t\t\tthis._handleEmptyCards();\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t *\n\t * @public\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst urls = [];\n\t\tconst countUrl = this.getCountUrl();\n\n\t\tif (countUrl) {\n\t\t\turls.push(countUrl);\n\t\t}\n\n\t\tlet dataUrl = this.getDataUrl();\n\t\tif (this.getProperty(\"useBatch\")) {\n\t\t\tconst queryString = `$skip=0&$top=${cardCount}`;\n\t\t\tdataUrl = dataUrl.includes(\"?\") ? `${dataUrl}&${queryString}` : `${dataUrl}?${queryString}`;\n\t\t}\n\t\turls.push(dataUrl);\n\n\t\treturn urls;\n\t}\n\n\t/**\n\t * A promise that resolves when the data has been processed.\n\t * This method can be overridden to perform additional data processing operations.\n\t *\n\t * @public\n\t * @async\n\t * @param {unknown[]} results - Data retrieved from the batch call.\n\t * @param {RequestOptions} options - Additional options for parsing the data.\n\t * Structure may vary based on the backend service.\n\t */\n\tpublic async onDataReceived(results: unknown[] = [], options?: RequestOptions): Promise<void> {\n\t\tif (!options || (options && !options.onlyCount)) {\n\t\t\tthis._oData.displayTiles = this._oData.tiles = results[0] || [];\n\t\t}\n\n\t\tawait Promise.resolve();\n\t}\n\n\t/**\n\t * Handles the scenario when there are no cards to display.\n\t * Updates the illustration and description based on the selected panel and card count.\n\t *\n\t * @private\n\t */\n\tprivate _handleEmptyCards() {\n\t\tif (Number(this._oData.length) === 0) {\n\t\t\tthis._oData.illustrationType = \"sapIllus-EmptyPlanningCalendar\";\n\t\t\tthis._oData.illustrationTitle = this._isExclusivePanel() ? this._i18nBundle.getText(\"noToDoTitle\") : this.getNoDataText();\n\t\t\tthis._oData.illustrationDescription = this._isExclusivePanel()\n\t\t\t\t? this._i18nBundle.getText(\"noToDoDesc\")\n\t\t\t\t: this._i18nBundle.getText(\"emptyToDoDesc\");\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the panel is exclusive based on support and the number of panels.\n\t *\n\t * @private\n\t * @returns {boolean} True if the panel is exclusive, otherwise false.\n\t */\n\tprivate _isExclusivePanel(): boolean {\n\t\tconst allPanels = (this.getParent() as ToDosContainer).getContent() as ToDoPanel[];\n\t\tconst supportedPanels = allPanels.filter((panel) => panel._getSupported());\n\n\t\treturn supportedPanels.length === 1 || (allPanels.length === 1 && this._getSupported());\n\t}\n\n\t/**\n\t * Sets the interval for refreshing the section.\n\t *\n\t * @private\n\t */\n\tprivate _setSectionRefreshInterval(): void {\n\t\tclearInterval(this._oData.refreshFn as number);\n\t\tthis._oData.refreshFn = setInterval(() => {\n\t\t\tthis._oData.lastRefreshedTime = this._oData.lastRefreshedTime || new Date();\n\t\t\tthis._oData.refreshInfo = this._toRelativeDateTime(this._oData.lastRefreshedTime as Date);\n\t\t\tthis._oData.fullRefreshInfo = this._toFullRelativeDateTime(this._oData.lastRefreshedTime as Date);\n\t\t\tthis._updateRefreshInformation();\n\t\t}, Constants.TODOS_REFRESH_INTERVAL);\n\t}\n\n\t/**\n\t * Updates the refresh information and adjusts the layout.\n\t *\n\t * @private\n\t */\n\tpublic _updateRefreshInformation(): void {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tif (container.getProperty(\"selectedKey\") === this.getProperty(\"key\")) {\n\t\t\tthis._refreshBtn.setProperty(\"text\", this._oData.refreshInfo, true);\n\t\t\tthis._accRefreshLabel.setProperty(\"text\", this._oData.fullRefreshInfo, true);\n\t\t\tthis._refreshBtn.setAggregation(\"tooltip\", this._oData.fullRefreshInfo as ManagedObject, true);\n\t\t\tcontainer._updateContainerHeader(this);\n\t\t}\n\n\t\tthis._adjustLayout();\n\t}\n\n\t/**\n\t * Adjusts the layout based on card count and device type.\n\t *\n\t * @private\n\t */\n\tpublic _adjustLayout() {\n\t\t// Update visible cards\n\t\tconst cardCount = this._getVisibleCardCount();\n\t\tif ((this._oData.tiles as object[]).length && !this._oData.hasError) {\n\t\t\tconst displayCards = (this._oData.tiles as object[]).slice(0, cardCount);\n\t\t\tthis._controlModel.setProperty(\"/displayTiles\", displayCards);\n\t\t}\n\n\t\t// Update if device type is phone\n\t\tthis._controlModel.setProperty(\"/isPhone\", this.getDeviceType() === DeviceType.Mobile);\n\n\t\t// Show/Hide Full Screen Button if available\n\t\t(this.getParent() as ToDosContainer)?.toggleFullScreenElements(\n\t\t\tthis,\n\t\t\tthis._isElementExpanded() || Number(this._oData.length) > cardCount\n\t\t);\n\t}\n\n\t/**\n\t * Formats the given date to a relative date.\n\t *\n\t * @private\n\t * @param {Date} date Date object or Date String\n\t * @returns {string} Formatted Date\n\t */\n\tpublic _toRelativeDateTime(date: Date): string {\n\t\tconst inputDate = new Date(date);\n\t\treturn isNaN(Number(inputDate)) ? \"\" : ToDoPanel.relativeDateFormatter.format(inputDate);\n\t}\n\n\t/**\n\t * Formats the given date to a relative date string with full units (e.g., \"2 minutes ago\").\n\t * Intended for accessibility use such as screen readers.\n\t *\n\t * @private\n\t * @param {Date} date Date object or date string\n\t * @returns {string} Fully formatted relative date string\n\t */\n\tprivate _toFullRelativeDateTime(date: Date): string {\n\t\tconst inputDate = new Date(date);\n\t\treturn isNaN(Number(inputDate)) ? \"\" : ToDoPanel.fullRelativeDateFormatter.format(inputDate);\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @public\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noData\") as string;\n\t}\n\n\t/**\n\t * Parses the response object and returns the appropriate value.\n\t *\n\t * @private\n\t * @param {Object} response - The response object.\n\t * @param {Object} [response.d] - The 'd' property of the response object.\n\t * @param {Array} [response.d.results] - The results array.\n\t * @param {string|number} [response.d] - The 'd' property of the response object which may contain a numeric value.\n\t * @param {string|number} [response] - The response object which may contain a numeric value.\n\t * @param {string|number} [response.value] - The 'value' property of the response object which may contain a numeric value.\n\t * @returns {Response} - The parsed value extracted from the response object.\n\t */\n\tprivate _parseResponse(response: Response): Response {\n\t\tconst { d = {}, value } = response || {};\n\t\tconst results = d?.results;\n\t\tconst numericD = !isNaN(+d) && +d;\n\t\tconst numericResponse = !isNaN(+response) && +response;\n\n\t\treturn (results || numericD || numericResponse || value || response || 0) as Response;\n\t}\n\n\t/**\n\t * Submits a batch request for multiple URLs and processes the responses.\n\t *\n\t * @private\n\t * @returns {Promise} A Promise that resolves when all batch requests are completed.\n\t */\n\tprotected _submitBatch(): Promise<unknown[]> {\n\t\treturn Promise.all(\n\t\t\tthis.requests.map(async (request: Request) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst useBatch = this.getProperty(\"useBatch\") as boolean;\n\t\t\t\t\tlet responses = useBatch\n\t\t\t\t\t\t? await this.batchHelper.createMultipartRequest(request.baseURL, request.requestURLs)\n\t\t\t\t\t\t: await HttpHelper.GetMultipleRequests(request.requestURLs);\n\n\t\t\t\t\tif (responses.length) {\n\t\t\t\t\t\tconst processedResponses = responses.map((response: string | Response) => {\n\t\t\t\t\t\t\tif (typeof response === \"string\") {\n\t\t\t\t\t\t\t\tresponse = JSON.parse(response) as Response;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn this._parseResponse(response);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Call success callback, if any\n\t\t\t\t\t\tif (request.success && typeof request.success === \"function\") {\n\t\t\t\t\t\t\tawait request.success(processedResponses);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn processedResponses;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"Invalid response\");\n\t\t\t\t\t}\n\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\tthis._handleError(error);\n\t\t\t\t} finally {\n\t\t\t\t\tthis._clearRequests();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Handles errors by updating the data and logging the error.\n\t *\n\t * @private\n\t * @param {Error} error - The error object to handle.\n\t */\n\tprivate _handleError(error: unknown) {\n\t\tthis._oData.displayTiles = this._oData.tiles = [];\n\t\tthis._oData.getSupported = this._oData.isLoaded = this._oData.hasError = true;\n\t\tthis._oData.illustrationType = \"sapIllus-UnableToLoad\";\n\t\tthis._oData.illustrationTitle = this._oData.illustrationDescription = \"\";\n\n\t\tLog.error(error as string);\n\t\tthis._controlModel.refresh();\n\t}\n\n\t/**\n\t * Clears the list of requests.\n\t *\n\t * @private\n\t */\n\tprotected _clearRequests() {\n\t\tthis.requests = [];\n\t}\n\n\t/**\n\t * Checks if the panel is loaded.\n\t *\n\t * @private\n\t * @returns {boolean} true if the panel is loaded, false otherwise.\n\t */\n\tpublic _isLoaded(): boolean {\n\t\tconst parentContainer = this.getParent() as ToDosContainer;\n\t\tconst isContainerExpanded = parentContainer?._getLayout()?.getProperty(\"expanded\") as boolean;\n\n\t\tconst { isLoaded, isExpandedOnce } = this._oData;\n\n\t\tif (!isContainerExpanded) {\n\t\t\treturn isLoaded as boolean;\n\t\t}\n\n\t\treturn (isExpandedOnce && isLoaded) as boolean;\n\t}\n\n\t/**\n\t * Set the loaded status of the ToDoPanel.\n\t *\n\t * @private\n\t * @param {boolean} isLoaded - The new loaded status to set for the ToDoPanel.\n\t */\n\tpublic _setLoaded(isLoaded: boolean): void {\n\t\tthis._oData.isLoaded = isLoaded;\n\t}\n\n\t/**\n\t * Gets the supported status of the panel.\n\t *\n\t * @private\n\t * @returns {boolean} The supported status of the panel.\n\t */\n\tpublic _getSupported(): boolean {\n\t\treturn this._oData.getSupported as boolean;\n\t}\n\n\t/**\n\t * Sets the supported status of the panel.\n\t *\n\t * @private\n\t * @param {boolean} value - The value to set for supported status.\n\t */\n\tpublic _setSupported(isSupported: boolean): void {\n\t\tthis._oData.getSupported = isSupported;\n\t}\n\n\t/**\n\t * Extracts the app intent from the target app URL.\n\t *\n\t * @private\n\t * @returns {Intent | null} The app intent object with target and parameters, or null if not found.\n\t */\n\tpublic _getAppIntent(): Intent | null {\n\t\tconst pattern = /#([^?-]+)-([^?#]+)(?:\\?([^#]+))?(?:#.*)?/;\n\t\tconst match = this.getTargetAppUrl().match(pattern);\n\n\t\tif (match) {\n\t\t\tconst target = {\n\t\t\t\tsemanticObject: match[1],\n\t\t\t\taction: match[2]\n\t\t\t};\n\t\t\tconst params = {} as Record<string, string>;\n\n\t\t\tif (match[3]) {\n\t\t\t\tconst paramsArray = match[3].split(\"&\");\n\t\t\t\tfor (const param of paramsArray) {\n\t\t\t\t\tconst [key, value] = param.split(\"=\");\n\t\t\t\t\tparams[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttarget,\n\t\t\t\tparams\n\t\t\t};\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Switch to available tab if current panel has empty cards or has error\n\t *\n\t * @private\n\t * @async\n\t */\n\tprivate async _switchTabIfRequired() {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tconst selectedKey = container?.getProperty(\"selectedKey\") as string;\n\n\t\tif (selectedKey === this.getProperty(\"key\") && (this._oData.length === 0 || this._oData.hasError)) {\n\t\t\tlet nextAvailablePanel;\n\t\t\tconst panels = container?.getAggregation(\"content\") as ToDoPanel[];\n\n\t\t\tfor (const panel of panels) {\n\t\t\t\tif (panel !== this) {\n\t\t\t\t\t//ensure that panel is loaded first\n\t\t\t\t\tawait panel._loadCards();\n\n\t\t\t\t\tif (panel._getSupported() && !panel._isLoaded() && panel._getCardCount() > 0) {\n\t\t\t\t\t\tnextAvailablePanel = panel;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (nextAvailablePanel) {\n\t\t\t\tcontainer?.setProperty(\"selectedKey\", nextAvailablePanel.getProperty(\"key\"));\n\t\t\t\tToDosContainer.cardCount = this._cardCount;\n\t\t\t\tawait nextAvailablePanel._loadCards(true);\n\t\t\t\tToDosContainer.cardCount = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the press event to view all items.\n\t *\n\t * @private\n\t */\n\tpublic _onPressViewAll() {\n\t\tURLHelper.redirect(this.getTargetAppUrl(), false);\n\t}\n\n\t/**\n\t * Retrieves the count of cards in the panel.\n\t *\n\t * @private\n\t * @returns {number} The number of cards.\n\t */\n\tpublic _getCardCount(): number {\n\t\treturn Number(this._oData.length);\n\t}\n\n\t/**\n\t * Handles actions to be performed before the To-Dos panel is expanded.\n\t * If the panel has not been expanded before in full screen, the cards will be loaded once.\n\t *\n\t * @private\n\t */\n\tprivate async _beforePanelExpand() {\n\t\tif (!this._oData.isExpandedOnce) {\n\t\t\tthis._oData.isExpandedOnce = true;\n\t\t\tawait this._loadCards(true);\n\t\t}\n\t}\n\n\t/**\n\t * Exit lifecycle method.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic exit() {\n\t\tclearInterval(this._oData.refreshFn as number);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}