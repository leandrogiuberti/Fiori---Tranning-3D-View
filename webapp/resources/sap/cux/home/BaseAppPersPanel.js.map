{"version":3,"file":"BaseAppPersPanel.js","names":["sap","ui","define","EventBus","__BaseAppPanel","__Group","___utils_CommonUtils","___utils_Constants","___utils_DataFormatUtils","__PersonalisationUtils","__UshellPersonalizer","_interopRequireDefault","obj","__esModule","default","BaseAppPanel","Group","getPageManagerInstance","DEFAULT_APP_ICON","DEFAULT_BG_COLOR","FALLBACK_ICON","MYHOME_PAGE_ID","getLeanURL","PersonalisationUtils","UshellPersonalizer","BaseAppPersPanel","extend","metadata","library","properties","persContainerId","type","group","defaultValue","visibility","constructor","_constructor","id","settings","BaseAppPanel.prototype.constructor.call","this","firstLoad","init","_init","BaseAppPanel.prototype.init.call","_eventBus","getInstance","subscribe","applyPersonalization","_getPersonalizer","_this","_getPersContainerId","Error","Promise","resolve","getOwnerComponent","e","reject","getPersonalization","_getPersonalization","_this2","then","personalizer","read","persData","setPersonalization","_setPersonalization","_this3","write","_getAppPersonalization","_this4","personalization","favoriteApps","setFavAppsPersonalization","_setFavAppsPersonalization","appsPersonalization","_this5","_temp","_applyPersonalization","shouldReload","_this6","tiles","fetchTileVisualization","_applyTilesPersonalization","undefined","groupId","_this7","all","_getFavPages","personalizations","favPages","appManagerInstance","_getAllFavPageApps","favPageVisualizations","groups","getAggregation","apps","_getGroup","getApps","tile","item","_getItem","color","icon","_getItemPersonalization","setProperty","setBackgroundColor","setTileIcon","tileGroupId","data","find","oGroup","getGroupId","oApp","getUrl","isSection","sectionId","BGColor","app","appIds","oldAppId","push","vizId","getVizId","appId","includes","oPersonalization","getMetadata","getName","isRecentlyAddedApp","favPageVisualization","oVisualization","colorInfo","key","panelName","_getFavAppIcon","getAppIcon","_this8","_getPageManagerInstance","getFavoritePages","aFavPages","concat","pageId","_getAppIcon","favPageIcon","getIcon","_pageManagerInstance","getProperty","getPersContainerId"],"sources":["BaseAppPersPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport GenericTile from \"sap/m/GenericTile\";\nimport Component from \"sap/ui/core/Component\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport App from \"./App\";\nimport BaseAppPanel from \"./BaseAppPanel\";\nimport { $BaseAppPersPanelSettings } from \"./BaseAppPersPanel\";\nimport Group from \"./Group\";\nimport { IAppPersonalization, ICustomVisualization, IItemPersonalization } from \"./interface/AppsInterface\";\nimport { getPageManagerInstance } from \"./utils/CommonUtils\";\nimport { DEFAULT_APP_ICON, DEFAULT_BG_COLOR, FALLBACK_ICON, MYHOME_PAGE_ID } from \"./utils/Constants\";\nimport { getLeanURL } from \"./utils/DataFormatUtils\";\nimport PageManager from \"./utils/PageManager\";\nimport PersonalisationUtils from \"./utils/PersonalisationUtils\";\nimport UshellPersonalizer, { IPersonalizationData } from \"./utils/UshellPersonalizer\";\n\n/**\n *\n * Provides the BaseAppPersPanel Class which is BaseAppPanel with personalisation.\n *\n * @extends sap.cux.home.BaseAppPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @abstract\n * @private\n *\n * @alias sap.cux.home.BaseAppPersPanel\n */\nexport default abstract class BaseAppPersPanel extends BaseAppPanel {\n\tprivate _pageManagerInstance!: PageManager;\n\tprivate _eventBus!: EventBus;\n\tprivate firstLoad = true;\n\n\tconstructor(idOrSettings?: string | $BaseAppPersPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPersPanelSettings);\n\tconstructor(id?: string, settings?: $BaseAppPersPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\tpersContainerId: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" }\n\t\t}\n\t};\n\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis._eventBus = EventBus.getInstance();\n\t\t//apply personalization on page update\n\t\tthis._eventBus.subscribe(\n\t\t\t\"pageChannel\",\n\t\t\t\"pageUpdated\",\n\t\t\t() => {\n\t\t\t\tvoid this.applyPersonalization(!this.firstLoad);\n\t\t\t},\n\t\t\tthis\n\t\t);\n\t}\n\n\t/**\n\t * Retrieves the personalizer instance.\n\t * @returns {Promise<sap.cux.home.UshellPersonalizer>} A promise resolving to the personalizer instance.\n\t * @throws {Error} Throws an error if no container ID is provided for personalization.\n\t * @private\n\t */\n\tprivate async _getPersonalizer() {\n\t\tconst persContainerId = this._getPersContainerId();\n\t\tif (!persContainerId) {\n\t\t\tthrow new Error(\"No Container ID Provided for personalisation!\");\n\t\t}\n\t\tconst personalizer = await UshellPersonalizer?.getInstance(\n\t\t\tpersContainerId,\n\t\t\tPersonalisationUtils.getOwnerComponent(this) as Component\n\t\t);\n\t\treturn personalizer;\n\t}\n\n\t/**\n\t * Retrieves personalization data.\n\t * @returns {Promise<IPersonalizationData>} A promise that resolves with the personalization data.\n\t * @private\n\t */\n\tprotected async getPersonalization() {\n\t\tconst personalizer = await this._getPersonalizer();\n\t\tconst persData = await personalizer?.read();\n\t\treturn persData || {};\n\t}\n\n\t/**\n\t * Sets the personalization data.\n\t * @param {IPersonalizationData} persData - The personalization data to set.\n\t * @returns {Promise<void>} A promise that resolves when the personalization data is set.\n\t * @private\n\t */\n\tprotected async setPersonalization(persData: IPersonalizationData) {\n\t\tconst personalizer = await this._getPersonalizer();\n\t\tawait personalizer.write(persData);\n\t}\n\n\t/**\n\t * Returns array of personalized favorite apps\n\t *\n\t * @returns {Promise} resolves to return array of personalized favorite apps\n\t */\n\tprotected async _getAppPersonalization() {\n\t\tconst personalization = await this.getPersonalization();\n\t\treturn personalization?.favoriteApps || ([] as IAppPersonalization[]);\n\t}\n\n\t/**\n\t * Sets the personalization data.\n\t * @param {IAppPersonalization[]} appsPersonalization - Personalization data for favorite apps.\n\t * @returns {Promise<void>} A promise that resolves when the personalization data is set.\n\t * @private\n\t */\n\tprotected async setFavAppsPersonalization(appsPersonalization: IAppPersonalization[]): Promise<void> {\n\t\tlet personalization = await this.getPersonalization();\n\t\tif (personalization) {\n\t\t\tpersonalization.favoriteApps = appsPersonalization;\n\t\t\tawait this.setPersonalization(personalization);\n\t\t}\n\t}\n\n\t/**\n\t * Applies personalization settings to the tiles.\n\t * Retrieves tiles from the generated apps wrapper and applies personalization settings to each tile.\n\t * Personalization settings include background color and icon customization.\n\t * @param {boolean} [shouldReload=true] - A flag indicating whether to reload page visualizations.\n\t * @private\n\t * @async\n\t */\n\tpublic async applyPersonalization(shouldReload: boolean = false) {\n\t\tlet tiles = this.fetchTileVisualization();\n\t\tawait this._applyTilesPersonalization(tiles, undefined, shouldReload);\n\t\tif (this.firstLoad) {\n\t\t\tthis.firstLoad = false;\n\t\t}\n\t}\n\n\t/**\n\t * Applies personalization settings to the provided tiles.\n\t * @param {Array} tiles - An array of tiles to apply personalization settings to.\n\t * @param {string} [groupId] - Optional group ID for filtering personalization settings.\n\t * @param {boolean} [shouldReload=true] - A flag indicating whether to reload page visualizations.\n\t * @returns {Promise<void>} A promise that resolves when personalization settings are applied to the tiles.\n\t * @private\n\t */\n\tprotected async _applyTilesPersonalization(tiles: GenericTile[], groupId?: string, shouldReload = false) {\n\t\tconst [personalizations, favPages] = await Promise.all([this._getAppPersonalization(), this._getFavPages()]);\n\t\tconst favPageVisualizations = await this.appManagerInstance._getAllFavPageApps(favPages, shouldReload);\n\t\tconst groups = (this.getAggregation(\"groups\") || []) as Group[];\n\t\tconst apps = groupId ? this._getGroup(groupId)?.getApps() || [] : this.getApps() || [];\n\t\tfor (const tile of tiles) {\n\t\t\tconst item = this._getItem(tile, groups, apps);\n\t\t\tconst { color, icon } = this._getItemPersonalization(item, personalizations, favPageVisualizations, groupId);\n\n\t\t\tif (color) {\n\t\t\t\titem?.setProperty(\"bgColor\", color, true);\n\t\t\t\ttile.setBackgroundColor(color);\n\t\t\t}\n\n\t\t\tif (icon) {\n\t\t\t\titem?.setProperty(\"icon\", icon, true);\n\t\t\t\ttile.setTileIcon(icon);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the corresponding App or Group object associated with the given tile.\n\t * @param {GenericTile} tile - The tile for which to retrieve the corresponding item.\n\t * @param {Group[]} groups - An array of Group objects.\n\t * @param {App[]} apps - An array of App objects.\n\t * @returns {App | Group | undefined} The corresponding App or Group object, or undefined if not found.\n\t * @private\n\t */\n\tprivate _getItem(tile: GenericTile, groups: Group[], apps: App[]): App | Group | undefined {\n\t\tconst tileGroupId = tile.data(\"groupId\") as string | undefined;\n\t\tif (tileGroupId) {\n\t\t\treturn groups.find((oGroup) => oGroup.getGroupId() === tileGroupId);\n\t\t} else {\n\t\t\treturn apps.find((oApp) => getLeanURL(oApp.getUrl()) === tile.getUrl());\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the color and icon associated with the specified item based on personalizations.\n\t * @param {App | Group | undefined} item - The App or Group object for which to retrieve personalization data.\n\t * @param {IAppPersonalization[] | undefined} personalizations - An array of personalization objects.\n\t * @param {ICustomVisualization[]} favPageVisualizations - An array of favorite page visualizations.\n\t * @param {string | undefined} groupId - The ID of the group to which the item belongs.\n\t * @returns {IItemPersonalization} An object containing the color and icon associated with the item.\n\t * @private\n\t */\n\tprivate _getItemPersonalization(\n\t\titem: App | Group | undefined,\n\t\tpersonalizations: IAppPersonalization[] | undefined,\n\t\tfavPageVisualizations: ICustomVisualization[],\n\t\tgroupId?: string\n\t): IItemPersonalization {\n\t\tlet color: string = \"\";\n\t\tlet icon: string = \"\";\n\n\t\tif (!item) return { color, icon };\n\n\t\tif (item instanceof Group) {\n\t\t\tconst personalization = personalizations?.find(\n\t\t\t\t(personalization) => personalization.isSection && personalization.sectionId === item.getGroupId()\n\t\t\t);\n\t\t\tcolor = personalization?.BGColor as string;\n\t\t} else {\n\t\t\tconst app = item;\n\t\t\tconst appIds = [app.getUrl()];\n\t\t\tconst oldAppId = app.data(\"oldAppId\") as string | undefined;\n\t\t\tif (oldAppId) {\n\t\t\t\tappIds.push(oldAppId);\n\t\t\t}\n\t\t\tconst vizId = app.getVizId();\n\t\t\tconst personalization = groupId\n\t\t\t\t? personalizations?.find(\n\t\t\t\t\t\t(personalization) =>\n\t\t\t\t\t\t\t!personalization.isSection &&\n\t\t\t\t\t\t\tpersonalization.sectionId === groupId &&\n\t\t\t\t\t\t\tpersonalization.appId &&\n\t\t\t\t\t\t\tappIds.includes(personalization.appId)\n\t\t\t\t\t)\n\t\t\t\t: personalizations?.find((oPersonalization) =>\n\t\t\t\t\t\tthis?.getMetadata().getName() === \"sap.cux.home.FavAppPanel\"\n\t\t\t\t\t\t\t? oPersonalization.isRecentlyAddedApp && oPersonalization.appId && appIds.includes(oPersonalization.appId)\n\t\t\t\t\t\t\t: oPersonalization.appId && appIds.includes(oPersonalization.appId)\n\t\t\t\t\t);\n\t\t\tconst favPageVisualization = favPageVisualizations.find(\n\t\t\t\t(oVisualization) => oVisualization.vizId === vizId || (oVisualization.appId && appIds.includes(oVisualization.appId))\n\t\t\t);\n\t\t\tconst colorInfo = personalization?.BGColor || favPageVisualization?.BGColor || DEFAULT_BG_COLOR().key;\n\t\t\tconst panelName = this?.getMetadata().getName();\n\t\t\tcolor = typeof colorInfo === \"object\" ? colorInfo.key : colorInfo;\n\t\t\ticon =\n\t\t\t\tpanelName === \"sap.cux.home.FavAppPanel\" || panelName === \"sap.cux.home.SpacePanel\"\n\t\t\t\t\t? this._getFavAppIcon(app, favPageVisualization?.icon)\n\t\t\t\t\t: this.getAppIcon();\n\t\t}\n\n\t\treturn { color, icon };\n\t}\n\n\t/**\n\t * Retrieves favorite pages.\n\t * @returns {Promise<Array>} A promise that resolves with an array of favorite pages.\n\t * @private\n\t */\n\tprivate async _getFavPages() {\n\t\tconst aFavPages = await this._getPageManagerInstance().getFavoritePages();\n\t\treturn aFavPages.concat({\n\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\tBGColor: DEFAULT_BG_COLOR().key\n\t\t});\n\t}\n\n\t/**\n\t * Returns default app icon.\n\t * @returns {string} The icon URL for the app.\n\t * @private\n\t */\n\tprotected getAppIcon(): string {\n\t\treturn DEFAULT_APP_ICON;\n\t}\n\n\t/**\n\t * Retrieves the icon for the specified app, prioritizing the favorite page icon if available.\n\t * @param {sap.cux.home.App} app - The app object.\n\t * @param {string} favPageIcon - The icon for the app from the favorite page.\n\t * @returns {string} The icon URL for the app.\n\t * @private\n\t */\n\tprivate _getFavAppIcon(app?: App, favPageIcon?: string): string {\n\t\treturn favPageIcon || app?.getIcon() || FALLBACK_ICON;\n\t}\n\n\tprivate _getPageManagerInstance() {\n\t\tthis._pageManagerInstance = this._pageManagerInstance || getPageManagerInstance(this);\n\t\treturn this._pageManagerInstance;\n\t}\n\n\tprivate _getPersContainerId(): string {\n\t\tlet persContainerId = this.getProperty(\"persContainerId\") as string;\n\t\tif (!persContainerId) {\n\t\t\tpersContainerId = PersonalisationUtils.getPersContainerId(this);\n\t\t}\n\t\treturn persContainerId;\n\t}\n}\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,6LAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,sBAAAC,EAAAC,GAAA,OAAAA,KAAAC,mBAAAD,EAAAE,UAAA,YAAAF,EAAAE,QAAAF,CAAA,OAUOG,EAAYJ,EAAAP,GAAA,MAEZY,EAAKL,EAAAN,GAAA,MAEHY,EAAsBX,EAAA,gCACtBY,EAAgBX,EAAA,0BAAEY,EAAgBZ,EAAA,0BAAEa,EAAab,EAAA,uBAAEc,EAAcd,EAAA,wBACjEe,EAAUd,EAAA,oBAEZe,EAAoBZ,EAAAF,GAAA,MACpBe,EAAkBb,EAAAD,GAEzB,MAe8Be,EAAyBV,EAAYW,OAAA,iCAWlDC,SAA4B,CAC3CC,QAAS,eACTC,WAAY,CACXC,gBAAiB,CAAEC,KAAM,SAAUC,MAAO,OAAQC,aAAc,GAAIC,WAAY,YAPlFC,YAAW,SAAAC,EAACC,EAAaC,GACxBC,6BAAAC,KAAMH,EAAIC,GAAUE,KALbC,UAAY,IAMpB,EASOC,KAAI,SAAAC,IACVC,sBAAAJ,MACAA,KAAKK,UAAY1C,EAAS2C,cAE1BN,KAAKK,UAAUE,UACd,cACA,cACA,UACMP,KAAKQ,sBAAsBR,KAAKC,YAEtCD,KAEF,EAQcS,iBAAgB,SAAAA,IAAA,IAAG,MAAAC,EACRV,KAAxB,MAAMV,EAAkBoB,EAAKC,sBAC7B,IAAKrB,EAAiB,CACrB,MAAM,IAAIsB,MAAM,gDACjB,CAAC,OAAAC,QAAAC,QAC0B9B,GAAoBsB,YAC9ChB,EACAP,EAAqBgC,kBAAiBL,IAGxC,CAAC,MAAAM,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAOeE,mBAAkB,SAAAC,IAAA,IAAG,MAAAC,EACTpB,KAAI,OAAAa,QAAAC,QAAJM,EAAKX,oBAAkBY,KAAA,SAA5CC,GAAY,OAAAT,QAAAC,QACKQ,GAAcC,QAAMF,KAAA,SAArCG,GACN,OAAOA,GAAY,CAAC,CAAE,IACvB,CAAC,MAAAR,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAQeS,mBAAkB,SAAAC,EAACF,GAA8B,IAAE,MAAAG,EACvC3B,KAAI,OAAAa,QAAAC,QAAJa,EAAKlB,oBAAkBY,KAAA,SAA5CC,GAAY,OAAAT,QAAAC,QACZQ,EAAaM,MAAMJ,IAASH,KAAA,eACnC,CAAC,MAAAL,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAOea,uBAAsB,SAAAA,IAAA,IAAG,MAAAC,EACV9B,KAAI,OAAAa,QAAAC,QAAJgB,EAAKZ,sBAAoBG,KAAA,SAAjDU,GACN,OAAOA,GAAiBC,cAAiB,EAA6B,EACvE,CAAC,MAAAhB,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAQeiB,0BAAyB,SAAAC,EAACC,GAA0C,IAAiB,MAAAC,EACxEpC,KAAI,OAAAa,QAAAC,QAAJsB,EAAKlB,sBAAoBG,KAAA,SAAjDU,GAAe,MAAAM,EAAA,cACfN,EAAe,CAClBA,EAAgBC,aAAeG,EAAoB,OAAAtB,QAAAC,QAC7CsB,EAAKX,mBAAmBM,IAAgBV,KAAA,eAH5B,GAG4B,GAAAgB,KAAAhB,KAAA,OAAAgB,EAAAhB,KAAA,eAEhD,CAAC,MAAAL,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAUYR,qBAAoB,SAAA8B,EAACC,EAAwB,OAAK,IAAE,MAAAC,EACpDxC,KAAZ,IAAIyC,EAAQD,EAAKE,yBAAyB,OAAA7B,QAAAC,QACpC0B,EAAKG,2BAA2BF,EAAOG,UAAWL,IAAalB,KAAA,cACjEmB,EAAKvC,UAAS,CACjBuC,EAAKvC,UAAY,KAAM,GAEzB,CAAC,MAAAe,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAUe2B,2BAA0B,SAAAA,EAACF,EAAsBI,EAAkBN,EAAe,OAAK,IAAE,MAAAO,EAChD9C,KAAI,OAAAa,QAAAC,QAAjBD,QAAQkC,IAAI,CAACD,EAAKjB,yBAA0BiB,EAAKE,kBAAgB3B,KAAA,UAArG4B,EAAkBC,IAAS,OAAArC,QAAAC,QACEgC,EAAKK,mBAAmBC,mBAAmBF,EAAUX,IAAalB,KAAA,SAAhGgC,GACN,MAAMC,EAAUR,EAAKS,eAAe,WAAa,GACjD,MAAMC,EAAOX,EAAUC,EAAKW,UAAUZ,IAAUa,WAAa,GAAKZ,EAAKY,WAAa,GACpF,IAAK,MAAMC,KAAQlB,EAAO,CACzB,MAAMmB,EAAOd,EAAKe,SAASF,EAAML,EAAQE,GACzC,MAAMM,MAAEA,EAAKC,KAAEA,GAASjB,EAAKkB,wBAAwBJ,EAAMX,EAAkBI,EAAuBR,GAEpG,GAAIiB,EAAO,CACVF,GAAMK,YAAY,UAAWH,EAAO,MACpCH,EAAKO,mBAAmBJ,EACzB,CAEA,GAAIC,EAAM,CACTH,GAAMK,YAAY,OAAQF,EAAM,MAChCJ,EAAKQ,YAAYJ,EAClB,CACD,CAAC,IACF,CAAC,MAAA/C,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAUO6C,SAAQ,SAAAA,EAACF,EAAmBL,EAAiBE,GACpD,MAAMY,EAAcT,EAAKU,KAAK,WAC9B,GAAID,EAAa,CAChB,OAAOd,EAAOgB,KAAMC,GAAWA,EAAOC,eAAiBJ,EACxD,KAAO,CACN,OAAOZ,EAAKc,KAAMG,GAAS3F,EAAW2F,EAAKC,YAAcf,EAAKe,SAC/D,CACD,EAWQV,wBAAuB,SAAAA,EAC9BJ,EACAX,EACAI,EACAR,GAEA,IAAIiB,EAAgB,GACpB,IAAIC,EAAe,GAEnB,IAAKH,EAAM,MAAO,CAAEE,QAAOC,QAE3B,GAAIH,aAAgBpF,EAAO,CAC1B,MAAMuD,EAAkBkB,GAAkBqB,KACxCvC,GAAoBA,EAAgB4C,WAAa5C,EAAgB6C,YAAchB,EAAKY,cAEtFV,EAAQ/B,GAAiB8C,OAC1B,KAAO,CACN,MAAMC,EAAMlB,EACZ,MAAMmB,EAAS,CAACD,EAAIJ,UACpB,MAAMM,EAAWF,EAAIT,KAAK,YAC1B,GAAIW,EAAU,CACbD,EAAOE,KAAKD,EACb,CACA,MAAME,EAAQJ,EAAIK,WAClB,MAAMpD,EAAkBc,EACrBI,GAAkBqB,KACjBvC,IACCA,EAAgB4C,WACjB5C,EAAgB6C,YAAc/B,GAC9Bd,EAAgBqD,OAChBL,EAAOM,SAAStD,EAAgBqD,QAEjCnC,GAAkBqB,KAAMgB,GACxBtF,MAAMuF,cAAcC,YAAc,2BAC/BF,EAAiBG,oBAAsBH,EAAiBF,OAASL,EAAOM,SAASC,EAAiBF,OAClGE,EAAiBF,OAASL,EAAOM,SAASC,EAAiBF,QAEjE,MAAMM,EAAuBrC,EAAsBiB,KACjDqB,GAAmBA,EAAeT,QAAUA,GAAUS,EAAeP,OAASL,EAAOM,SAASM,EAAeP,QAE/G,MAAMQ,EAAY7D,GAAiB8C,SAAWa,GAAsBb,SAAWlG,IAAmBkH,IAClG,MAAMC,EAAY9F,MAAMuF,cAAcC,UACtC1B,SAAe8B,IAAc,SAAWA,EAAUC,IAAMD,EACxD7B,EACC+B,IAAc,4BAA8BA,IAAc,0BACvD9F,KAAK+F,eAAejB,EAAKY,GAAsB3B,MAC/C/D,KAAKgG,YACV,CAEA,MAAO,CAAElC,QAAOC,OACjB,EAOcf,aAAY,SAAAA,IAAA,IAAG,MAAAiD,EACJjG,KAAI,OAAAa,QAAAC,QAAJmF,EAAKC,0BAA0BC,oBAAkB9E,KAAA,SAAnE+E,GACN,OAAOA,EAAUC,OAAO,CACvBC,OAAQzH,EACRgG,QAASlG,IAAmBkH,KAC1B,EACJ,CAAC,MAAA7E,GAAA,OAAAH,QAAAI,OAAAD,EAAA,GAOSgF,WAAU,SAAAO,IACnB,OAAO7H,CACR,EASQqH,eAAc,SAAAA,EAACjB,EAAW0B,GACjC,OAAOA,GAAe1B,GAAK2B,WAAa7H,CACzC,EAEQsH,wBAAuB,SAAAA,IAC9BlG,KAAK0G,qBAAuB1G,KAAK0G,sBAAwBjI,EAAuBuB,MAChF,OAAOA,KAAK0G,oBACb,EAEQ/F,oBAAmB,SAAAA,IAC1B,IAAIrB,EAAkBU,KAAK2G,YAAY,mBACvC,IAAKrH,EAAiB,CACrBA,EAAkBP,EAAqB6H,mBAAmB5G,KAC3D,CACA,OAAOV,CACR,IAAC,OAvQ4BL,CAAgB","ignoreList":[]}