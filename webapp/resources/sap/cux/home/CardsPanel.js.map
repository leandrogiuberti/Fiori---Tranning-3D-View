{"version":3,"file":"CardsPanel.js","names":["sap","ui","define","Log","GridContainer","GridContainerSettings","SelectionVariant","CardHelper","InsightsInMemoryCachingHost","HBox","HeaderContainer","VBox","EventBus","Card","JSONModel","Container","S4MyHome","__BasePanel","__MenuItem","__AppManager","___utils_CommonUtils","___utils_Constants","___utils_DataFormatUtils","___utils_Device","___utils_DragDropUtils","___utils_FESRUtil","___utils_InsightsUtils","__PersonalisationUtils","__UShellPersonalizer","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","BasePanel","_finallyRethrows","finalizer","bind","MenuItem","AppManager","getPageManagerInstance","PREFERED_CARDS","SETTINGS_PANELS_KEYS","recycleId","calculateCardWidth","DeviceType","fetchElementProperties","focusDraggedItem","addFESRId","createShowMoreActionButton","createShowMoreMenuItem","getAssociatedFullScreenMenuItem","sortMenuItems","targetsAreEqual","PersonalisationUtils","UShellPersonalizer","cardsMenuItems","cardsContainerMenuItems","cardsContainerActionButtons","sortedMenuItems","REFRESH","EDIT_CARDS","AI_INSIGHT_CARD","Constants","PLACEHOLDER_CARD_COUNT","CARDS_GAP","RECOMMENDATION_PATH","runtimeHostCreated","CardsPanel","extend","metadata","library","properties","title","type","group","defaultValue","visibility","key","fullScreenName","defaultAggregation","aggregations","content","multiple","singularName","cards","host","events","handleHidePanel","parameters","handleUnhidePanel","visibleCardsUpdated","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","this","aVisibleCardInstances","cardsInViewport","_appSwitched","_headerVisible","init","_init","_this","BasePanel.prototype.init.call","setProperty","cardWidth","cardHeight","getDeviceType","Mobile","_oData","userVisibleCards","userAllCards","isPhone","_controlModel","appManagerInstance","getInstance","_controlMap","Map","refreshMenuItem","_createRefreshMenuItem","editCardsMenuItem","_createEditCardsMenuItem","menuItems","forEach","menuItem","addAggregation","_sortMenuItems","oEventBus","subscribe","sChannelId","sEventId","oData","Promise","resolve","_createCards","rerenderCards","_importdone","reject","_setupWrapper","_toggleCardActivity","_this2","toggleUserActions","event","show","getParameter","_temp2","_temp","attachRouteMatched","error","warning","Error","message","String","aCards","_this3","cardHelperInstance","_getManifestEntryFromCard","oCard","sEntry","cardWithManifestPromise","manifestEntry","getManifestEntry","_pManifestReady","attachManifestReady","_addRuntimeHost","_this4","_this5","_this6","_this7","_this8","getAggregation","action","oEvent","sType","oParameters","_temp3","ibnTarget","preventDefault","oIntegrationCardManifest","aHeaderActions","header","actions","oCheckSemanticProperty","configuration","_semanticDateRangeSetting","value","JSON","parse","Object","keys","length","processSemanticDate","aContentActions","getContentActions","oHeaderAction","oContentAction","bOldCardExtension","indexOf","_manageOldCardExtension","getServiceAsync","navigationService","navigate","target","params","ibnParams","text","_i18nBundle","getText","icon","_refreshCardData","visible","oEntry","cacheType","cardId","getParent","_getLayout","openSettingsDialog","INSIGHTS_CARDS","oCardParams","aRelevantFilters","_relevantODataFilters","bRelevantFilters","aRelevantParams","_relevantODataParameters","bRelevantParams","oCardDataSource","dataSources","oFilterService","filterService","oDataSourceSettings","odataVersion","getParentAppDetails","descriptorContent","parentApp","semanticObject","intents","isNavigationSupported","_navigationService$is","aResponses","supported","sShellHash","semanticURL","shellHash","attachAction","setAggregation","oCardSV","getCombinedParameters","sParamName","sFilterName","oCardParamsFilterName","aSelectOptions","SelectOptions","aRanges","Ranges","Sign","Option","Low","massAddSelectOption","oTempParam","selectionVariant","toJSONObject","stringify","_getContentActions","manifest","item","row","stateData","status","publish","require","InsightsCacheData","sCardId","cacheDataInstance","clearCache","refreshData","_refreshData","_this9","_temp4","_getServiceAsync","_refreshUserCards","renderPanel","_renderPanel","_this0","_temp6","fireEvent","_temp5","pageManagerInstance","all","hasCustomSpace","_rerenderCards","skipRecommendation","_this1","_cardsRendered","_temp10","sDefaultAggreName","_getCardContainer","getMetadata","getDefaultAggregationName","removeAllAggregation","_showPlaceHolders","preferedCardIDs","_getUserVisibleCardModel","userVisibleCardModel","getProperty","listBinding","bindList","hasListeners","enableExtendedChangeDetection","attachChange","visibleCards","_showCards","fireHandleHidePanel","getPersonalisationProperty","showRecommendation","_temp1","undefined","_temp0","_getRecommendationCards","_temp9","_temp8","checkForRecommendedCards","_temp7","_updateRecommendationStatus","setNewVisibleCards","_setNewVisibleCards","_this10","visibleCardModel","aNewCards","_checkForRecommendedCards","_this11","manifestIds","oVisCard","idx","rec","push","rank","ranking","index","uniqueManifestDetails","getUniqueManifestDetails","regenerateCards","aUpdatedCards","_exit2","_temp12","_result2","_temp11","_updateCards","map","newManifest","_getUniqueManifestDetails","exists","some","existingItem","_getManifests","_this12","_getCardManifest","aManifests","aRegeneratedCards","mappedResults","_removeDuplicateRegeneratedCards","_regenerateCards","allManifestIds","_this13","aMappedManifest","createUniqueKey","uniqueMap","uniqueKey","oError","aOriginalList","originalMap","originalItem","parentAppId","values","_getPersonalizationData","_this14","_temp14","oPersonalizer","read","oPersData","_temp13","_getPersonalization","_this14$_getPersonali","_getPersonalisationProperty","propertyKey","_this15","_this16","getRecommenedCards","aRecommendedCards","_handleRecommendationCards","_this17","cardManifests","_cardsFlexWrapper","getId","renderType","width","items","_createCardContainer","_createMobileCardContainer","setModel","addContent","cardsContainerSettings","columnSize","rowSize","gap","cardsContainer","addStyleClass","setLayout","addDragDropConfigTo","_handleCardsDnd","cardsMobileContainer","scrollStep","scrollStepByItem","gridLayout","scrollTime","showDividers","cardManifest","_getAnalyticalCardManifest","placeholderArray","Array","_calculatePlaceholderCardCount","fill","aInsightsCards","_","card","height","previewMode","oPreviewHBox","justifyContent","layoutDomRef","_getInsightsContainer","getDomRef","count","sectionDomRef","childNodes","domProperties","availableWidth","cardLayoutConfig","containerWidth","totalCards","minWidth","maxWidth","Math","floor","panelName","getName","fireHandleUnhidePanel","updatePanelsItemCount","oUserCard","overlay","overlayHBoxWrapper","addItem","oPreviewVBox","direction","_handleEditCards","parent","getSource","handleHideHeader","_handleHideHeader","_toggleHeaderActions","handleAddHeader","_handleAddHeader","refreshCards","_refreshCards","_this18","sInsertPosition","oDragItem","iDragItemIndex","indexOfItem","oDropItem","iDropItemIndex","setBusy","_temp17","_temp16","setTimeout","_temp15","_getUserAllCardModel","userAllCardsModel","updateCardList","_wasThrown","_result3","_updateCardList","_this19","aUserVisibleCards","aUserAllCards","sDragedPositionRank","sDropedPositionRank","iUpdatedDragItemIndex","findIndex","iUpdatedDropItemIndex","_temp18","handleDndCardsRanking","_updateMultipleCards","_sortCardsOnRank","filter","sort","a","b","persContainerId","getPersContainerId","ownerComponent","getOwnerComponent","_this20","write","_calculateVisibleCardCount","layout","pageDomRef","deviceType","isHeaderVisible","sectionNodeIndex","iAvailableWidth","max","_adjustLayout","isMobileDevice","isElementExpanded","_getCurrentExpandedElementName","cardCount","slice","getManifest","cardWrapper","shareCardsInViewport","showFullScreenButton","toggleFullScreenElements","fullScreenButton","fullScreenText","getTitle","updateMenuItem","get","SHOW_MORE","updateActionButton","setWidth","setColumnSize","getContainerMenuItems","_getContainerMenuItems","_containerMenuItems","containerRefreshMenuItem","containerEditCardsMenuItem","containerShowMoreMenuItem","set","getContainerActionButtons","_getContainerActionButtons","_containerActionButtons","actionButton","insightsContainer","fesrId","press","bShow","toggleMenuListItem","toggleActionButton","panelMenuItems","_shareCardsInViewport","exit","_exit","destroy"],"sources":["CardsPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport CardHelper from \"sap/insights/CardHelper\";\nimport InsightsInMemoryCachingHost from \"sap/insights/base/InMemoryCachingHost\";\nimport Button from \"sap/m/Button\";\nimport HBox from \"sap/m/HBox\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport VBox from \"sap/m/VBox\";\nimport Event from \"sap/ui/base/Event\";\nimport ManagedObject, { MetadataOptions } from \"sap/ui/base/ManagedObject\";\nimport Component from \"sap/ui/core/Component\";\nimport Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport { DropInfo$DropEventParameters } from \"sap/ui/core/dnd/DropInfo\";\nimport Host from \"sap/ui/integration/Host\";\nimport Card from \"sap/ui/integration/widgets/Card\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Container from \"sap/ushell/Container\";\nimport S4MyHome from \"sap/ushell/api/S4MyHome\";\nimport { Intent } from \"sap/ushell/services/AppLifeCycle\";\nimport Navigation from \"sap/ushell/services/Navigation\";\nimport BasePanel from \"./BasePanel\";\nimport { $CardsPanelSettings } from \"./CardsPanel\";\nimport InsightsContainer from \"./InsightsContainer\";\nimport MenuItem from \"./MenuItem\";\nimport {\n\tICard,\n\tICardAction,\n\tICardActionParameters,\n\tICardDetails,\n\tICardHelper,\n\tICardHelperInstance,\n\tICardManifest,\n\tInsightsCacheData,\n\tIRegeneratedCard,\n\tISapApp,\n\tISapCard\n} from \"./interface/CardsInterface\";\nimport AppManager from \"./utils/AppManager\";\nimport { getPageManagerInstance } from \"./utils/CommonUtils\";\nimport { PREFERED_CARDS, SETTINGS_PANELS_KEYS } from \"./utils/Constants\";\nimport { recycleId } from \"./utils/DataFormatUtils\";\nimport { calculateCardWidth, DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { focusDraggedItem } from \"./utils/DragDropUtils\";\nimport { addFESRId } from \"./utils/FESRUtil\";\nimport {\n\tcreateShowMoreActionButton,\n\tcreateShowMoreMenuItem,\n\tgetAssociatedFullScreenMenuItem,\n\tsortMenuItems,\n\ttargetsAreEqual\n} from \"./utils/InsightsUtils\";\nimport PageManager from \"./utils/PageManager\";\nimport PersonalisationUtils from \"./utils/PersonalisationUtils\";\nimport UShellPersonalizer, { IPersonalizationData } from \"./utils/UshellPersonalizer\";\n\nexport enum cardsMenuItems {\n\tREFRESH = \"cards-refresh\",\n\tEDIT_CARDS = \"cards-editCards\",\n\tAI_INSIGHT_CARD = \"cards-addAIInsightCard\"\n}\n\nexport enum cardsContainerMenuItems {\n\tREFRESH = \"container-cards-refresh\",\n\tEDIT_CARDS = \"container-cards-editCards\",\n\tSHOW_MORE = \"cardsContainerFullScreenMenuItem\",\n\tAI_INSIGHT_CARD = \"container-cards-addAIInsightCard\"\n}\n\nexport enum cardsContainerActionButtons {\n\tSHOW_MORE = \"cardsContanerFullScreenActionButton\"\n}\nconst sortedMenuItems: (cardsMenuItems | string)[] = [\n\tcardsMenuItems.REFRESH,\n\tcardsMenuItems.EDIT_CARDS,\n\tcardsMenuItems.AI_INSIGHT_CARD,\n\t\"showMore\",\n\t\"settings\"\n];\n\ninterface IcardActionEvent {\n\tgetParameter(sParam: string): unknown;\n\tpreventDefault(): void;\n}\n\nconst Constants = {\n\tPLACEHOLDER_CARD_COUNT: 10,\n\tCARDS_GAP: 16\n};\n\nexport interface TargetIntent {\n\ttarget: Partial<Intent>;\n\tparams?: {\n\t\t[key: string]: string;\n\t};\n}\nconst RECOMMENDATION_PATH = \"showRecommendation\";\nlet runtimeHostCreated = false;\n\n/**\n *\n * Panel class for managing and storing Insights Cards.\n *\n * @extends sap.cux.home.BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.122.0\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.CardsPanel\n */\n\nexport default class CardsPanel extends BasePanel {\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\ttitle: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\tkey: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", defaultValue: \"SI2\", visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"cards\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Specifies the content aggregation of the panel.\n\t\t\t */\n\t\t\tcontent: { multiple: true, singularName: \"content\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Aggregation of cards available within the cards panel\n\t\t\t */\n\t\t\tcards: { type: \"sap.ui.integration.widgets.Card\", multiple: true, singularName: \"card\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Aggregation of the integration host used by the cards panel.\n\t\t\t */\n\t\t\thost: { type: \"sap.ui.integration.Host\", multiple: false, singularName: \"host\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\thandleHidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t},\n\t\t\thandleUnhidePanel: {\n\t\t\t\tparameters: {}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Event is fired when cards in viewport are updated.\n\t\t\t */\n\t\t\tvisibleCardsUpdated: {\n\t\t\t\tparameters: {\n\t\t\t\t\tcards: { type: \"sap.ui.integration.widgets.Card[]\" }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\tprivate cardHelperInstance!: ICardHelperInstance;\n\tprivate _cardsFlexWrapper!: VBox;\n\tprivate cardsContainer!: GridContainer;\n\tprivate cardsMobileContainer!: HeaderContainer;\n\tprivate aVisibleCardInstances: Card[] = [];\n\tprivate _oData!: Record<string, unknown>;\n\tprivate _controlModel!: JSONModel;\n\tprivate oPersonalizer!: UShellPersonalizer;\n\tprivate appManagerInstance!: AppManager;\n\tprivate cardsContainerSettings!: GridContainerSettings;\n\tprivate cardWidth!: string;\n\tprivate cardHeight!: string;\n\tprivate cardsInViewport: Card[] = [];\n\tprivate oEventBus!: EventBus;\n\tprivate _appSwitched: boolean = false;\n\tprivate _containerMenuItems!: MenuItem[];\n\tprivate _containerActionButtons!: Button[];\n\tprivate insightsContainer!: InsightsContainer;\n\tprivate _headerVisible: boolean = false;\n\tprivate _controlMap!: Map<string, UI5Element>;\n\tprivate _cardsRendered!: Promise<void> | undefined;\n\tprivate pageManagerInstance!: PageManager;\n\tprivate hasCustomSpace!: boolean;\n\n\tconstructor(idOrSettings?: string | $CardsPanelSettings);\n\tconstructor(id?: string, settings?: $CardsPanelSettings);\n\t/**\n\t * Constructor for a new card panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $CardsPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Initializes the Cards Panel.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init() {\n\t\tsuper.init();\n\t\tthis.setProperty(\"key\", \"cards\");\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t\tthis.cardWidth = \"19rem\";\n\t\tthis.cardHeight = this.getDeviceType() === DeviceType.Mobile ? \"25.5rem\" : \"33rem\";\n\n\t\t//Initialize Tiles Model\n\t\tthis._oData = {\n\t\t\tuserVisibleCards: [] as ICard[],\n\t\t\tuserAllCards: [] as ICard[],\n\t\t\tisPhone: this.getDeviceType() === DeviceType.Mobile\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\t\tthis.appManagerInstance = AppManager.getInstance();\n\t\tthis._controlMap = new Map();\n\t\t// Setup Menu Items\n\t\tconst refreshMenuItem = this._createRefreshMenuItem(cardsMenuItems.REFRESH, \"cardsRefresh\");\n\t\tconst editCardsMenuItem = this._createEditCardsMenuItem(cardsMenuItems.EDIT_CARDS, \"manageCards\");\n\n\t\tconst menuItems = [refreshMenuItem, editCardsMenuItem];\n\t\tmenuItems.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t\tthis._sortMenuItems(sortedMenuItems);\n\n\t\tthis.oEventBus = EventBus.getInstance();\n\t\t// Subscribe to the event\n\t\tthis.oEventBus.subscribe(\n\t\t\t\"importChannel\",\n\t\t\t\"cardsImport\",\n\t\t\tasync (sChannelId?: string, sEventId?: string, oData?) => {\n\t\t\t\tawait this._createCards(oData as ICardManifest[]);\n\t\t\t\tawait this.rerenderCards();\n\t\t\t\tthis._importdone();\n\t\t\t},\n\t\t\tthis\n\t\t);\n\n\t\t// Setup Wrapper for Cards\n\t\tthis._setupWrapper();\n\n\t\t// Toggles the activity of cards\n\t\tthis._toggleCardActivity();\n\t}\n\n\t/**\n\t * Toggles the activity of cards on route change.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _toggleCardActivity(): void {\n\t\tconst toggleUserActions = async (event: Event<{ isMyHomeRoute: boolean }>) => {\n\t\t\tconst show = event.getParameter(\"isMyHomeRoute\");\n\t\t\tif (show) {\n\t\t\t\tif (this._appSwitched) {\n\t\t\t\t\tawait this.rerenderCards();\n\t\t\t\t\tthis._appSwitched = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._appSwitched = true;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tS4MyHome.attachRouteMatched({}, toggleUserActions, this);\n\t\t} catch (error) {\n\t\t\tLog.warning(error instanceof Error ? error.message : String(error));\n\t\t}\n\t}\n\n\t/**\n\t * Create imported cards\n\t * @param {ICardManifest[]} aCards - array of card manifests\n\t * @returns {any}\n\t */\n\tprivate async _createCards(aCards: ICardManifest[]) {\n\t\tawait this.cardHelperInstance?._createCards(aCards);\n\t\treturn this.rerenderCards();\n\t}\n\n\t/**\n\t * Retrieves a manifest entry from a card.\n\t * If the manifest entry is not immediately available, it waits for the manifest to be ready.\n\t *\n\t * @param {object} oCard - The card object from which to retrieve the manifest entry.\n\t * @param {string} sEntry - The manifest entry key to retrieve.\n\t * @returns {Promise<ICardManifest | undefined>} A promise that resolves with the manifest entry value.\n\t */\n\tprivate _getManifestEntryFromCard(oCard: Card, sEntry: string): Promise<ICardManifest | undefined> {\n\t\tconst cardWithManifestPromise = oCard as Card & { _pManifestReady?: Promise<ICardManifest | undefined> };\n\t\tconst manifestEntry = oCard.getManifestEntry(sEntry) as ICardManifest | undefined;\n\t\tif (manifestEntry) {\n\t\t\treturn Promise.resolve(manifestEntry);\n\t\t} else {\n\t\t\tif (!cardWithManifestPromise._pManifestReady) {\n\t\t\t\tcardWithManifestPromise._pManifestReady = new Promise<ICardManifest | undefined>((resolve) => {\n\t\t\t\t\toCard.attachManifestReady(() => {\n\t\t\t\t\t\tresolve(oCard.getManifestEntry(sEntry) as ICardManifest | undefined);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn cardWithManifestPromise._pManifestReady;\n\t\t}\n\t}\n\n\t/**\n\t * Adds a runtime host for the cards panel.\n\t *\n\t * @private\n\t */\n\tprivate _addRuntimeHost() {\n\t\tconst host = (this.getAggregation(\"host\") || new InsightsInMemoryCachingHost(\"runtimeHost\")) as Host;\n\t\tconst action = async (oEvent: IcardActionEvent) => {\n\t\t\tconst sType = oEvent.getParameter(\"type\") as string;\n\t\t\tlet oParameters = (oEvent.getParameter(\"parameters\") as ICardActionParameters) || {};\n\n\t\t\tif (sType === \"Navigation\" && oParameters.ibnTarget) {\n\t\t\t\toEvent.preventDefault();\n\t\t\t\tconst oCard = (oEvent.getParameter(\"card\") as Card) || {},\n\t\t\t\t\toIntegrationCardManifest = (oCard?.getManifestEntry(\"sap.card\") || {}) as ISapCard,\n\t\t\t\t\taHeaderActions = oIntegrationCardManifest?.header?.actions || [];\n\n\t\t\t\t//processing semantic date as param for navigation\n\t\t\t\t//check to verify if _semanticDateRangeSetting property is present in manifest\n\t\t\t\tlet oCheckSemanticProperty;\n\t\t\t\tif (oIntegrationCardManifest?.configuration?.parameters?._semanticDateRangeSetting?.value) {\n\t\t\t\t\toCheckSemanticProperty = JSON.parse(\n\t\t\t\t\t\toIntegrationCardManifest.configuration.parameters._semanticDateRangeSetting.value\n\t\t\t\t\t) as object;\n\t\t\t\t}\n\t\t\t\tif (oCheckSemanticProperty && Object.keys(oCheckSemanticProperty).length) {\n\t\t\t\t\toParameters = this.cardHelperInstance.processSemanticDate(\n\t\t\t\t\t\toParameters,\n\t\t\t\t\t\toIntegrationCardManifest\n\t\t\t\t\t) as ICardActionParameters;\n\t\t\t\t}\n\n\t\t\t\tlet aContentActions = this.getContentActions(oIntegrationCardManifest);\n\n\t\t\t\tconst oHeaderAction = aHeaderActions[0] || {},\n\t\t\t\t\toContentAction = aContentActions[0] || {};\n\n\t\t\t\tconst bOldCardExtension = !!(\n\t\t\t\t\t(oHeaderAction?.parameters &&\n\t\t\t\t\t\ttypeof oHeaderAction.parameters === \"string\" &&\n\t\t\t\t\t\toHeaderAction.parameters.indexOf(\"{= extension.formatters.addPropertyValueToAppState\") > -1) ||\n\t\t\t\t\t(oContentAction?.parameters &&\n\t\t\t\t\t\ttypeof oContentAction.parameters === \"string\" &&\n\t\t\t\t\t\toContentAction.parameters.indexOf(\"{= extension.formatters.addPropertyValueToAppState\") > -1)\n\t\t\t\t);\n\n\t\t\t\tthis._manageOldCardExtension(bOldCardExtension, oEvent, oParameters);\n\n\t\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\t\tawait navigationService.navigate({\n\t\t\t\t\ttarget: oParameters.ibnTarget,\n\t\t\t\t\tparams: oParameters.ibnParams\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tconst actions = [\n\t\t\t{\n\t\t\t\ttype: \"Custom\",\n\t\t\t\ttext: this._i18nBundle?.getText(\"refresh\") as string,\n\t\t\t\ticon: \"sap-icon://refresh\",\n\t\t\t\taction: (oCard: Card) => {\n\t\t\t\t\tthis._refreshCardData(oCard);\n\t\t\t\t},\n\t\t\t\tvisible: async (oCard: Card) => {\n\t\t\t\t\tconst oEntry = await this._getManifestEntryFromCard(oCard, \"sap.insights\");\n\t\t\t\t\treturn oEntry && !oEntry.cacheType;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Custom\",\n\t\t\t\ttext: this._i18nBundle?.getText(\"viewFilteredBy\") as string,\n\t\t\t\ticon: \"sap-icon://filter\",\n\t\t\t\taction: (oCard: Card) => {\n\t\t\t\t\tconst cardId = (oCard.getManifestEntry(\"sap.app\") as ISapApp).id;\n\t\t\t\t\t(this.getParent() as InsightsContainer)\n\t\t\t\t\t\t?._getLayout()\n\t\t\t\t\t\t.openSettingsDialog(SETTINGS_PANELS_KEYS.INSIGHTS_CARDS, { cardId });\n\t\t\t\t},\n\t\t\t\tvisible: async (oCard: Card) => {\n\t\t\t\t\tconst oEntry = await this._getManifestEntryFromCard(oCard, \"sap.insights\");\n\t\t\t\t\tif (oEntry) {\n\t\t\t\t\t\tconst oCardParams = (oCard.getManifestEntry(\"sap.card\") as ISapCard)?.configuration?.parameters;\n\t\t\t\t\t\tconst aRelevantFilters = oCardParams?._relevantODataFilters?.value || [];\n\t\t\t\t\t\tconst bRelevantFilters = aRelevantFilters?.length;\n\t\t\t\t\t\tconst aRelevantParams = oCardParams?._relevantODataParameters?.value || [];\n\t\t\t\t\t\tconst bRelevantParams = aRelevantParams?.length;\n\t\t\t\t\t\tconst oCardDataSource = (oCard.getManifestEntry(\"sap.app\") as ISapApp).dataSources;\n\t\t\t\t\t\tconst oFilterService = oCardDataSource?.filterService;\n\t\t\t\t\t\tconst oDataSourceSettings = oFilterService?.settings;\n\t\t\t\t\t\t// show ViewFilteredBy Option only if relevantFilters or relevantParameters are there and is OdataV2 version\n\t\t\t\t\t\treturn !!(\n\t\t\t\t\t\t\t(bRelevantFilters || bRelevantParams) &&\n\t\t\t\t\t\t\toDataSourceSettings &&\n\t\t\t\t\t\t\toDataSourceSettings.odataVersion === \"2.0\"\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Custom\",\n\t\t\t\ttext: this._i18nBundle?.getText(\"navigateToParent\") as string,\n\t\t\t\ticon: \"sap-icon://display-more\",\n\t\t\t\tvisible: async (oCard: Card) => {\n\t\t\t\t\treturn this._getManifestEntryFromCard(oCard, \"sap.insights\").then(async (oEntry: ICardManifest | undefined) => {\n\t\t\t\t\t\tif (oEntry) {\n\t\t\t\t\t\t\tconst parentApp = await this.cardHelperInstance.getParentAppDetails({\n\t\t\t\t\t\t\t\tdescriptorContent: oCard.getManifestEntry(\"/\") as ICardManifest\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (parentApp.semanticObject && parentApp.action) {\n\t\t\t\t\t\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\t\t\t\t\t\tconst intents: TargetIntent[] = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\t\t\t\tsemanticObject: parentApp.semanticObject,\n\t\t\t\t\t\t\t\t\t\t\taction: parentApp.action\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\tconst aResponses = (await navigationService.isNavigationSupported(intents)) as { supported: boolean }[];\n\t\t\t\t\t\t\t\treturn aResponses[0].supported || false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\taction: async (oCard: Card) => {\n\t\t\t\t\tconst parentApp = await this.cardHelperInstance.getParentAppDetails({\n\t\t\t\t\t\tdescriptorContent: oCard.getManifestEntry(\"/\") as ICardManifest\n\t\t\t\t\t});\n\t\t\t\t\tconst sShellHash = parentApp.semanticURL || parentApp.semanticObject;\n\t\t\t\t\tconst navigationService = await Container.getServiceAsync<Navigation>(\"Navigation\");\n\t\t\t\t\tawait navigationService.navigate({\n\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\tshellHash: sShellHash\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t\thost.attachAction(action);\n\t\thost.setProperty(\"actions\", actions);\n\t\tthis.setAggregation(\"host\", host);\n\t}\n\n\t/**\n\t * Updates parameters for an old card extension\n\t * @private\n\t * @param {boolean} bOldCardExtension - Determines whether the card is using an old card extension.\n\t * @param {IcardActionEvent} oEvent - An event object\n\t * @param {ICardActionParameters} oParameters - Parameter object\n\t */\n\n\tprivate _manageOldCardExtension(bOldCardExtension: boolean, oEvent: IcardActionEvent, oParameters: ICardActionParameters) {\n\t\tif (bOldCardExtension) {\n\t\t\tconst oCardSV = new SelectionVariant();\n\t\t\tconst oCardParams = (oEvent.getParameter(\"card\") as Card).getCombinedParameters();\n\t\t\t(oCardParams?._relevantODataParameters as string[]).forEach((sParamName: string) => {\n\t\t\t\tif (oParameters.ibnParams) {\n\t\t\t\t\toParameters.ibnParams[sParamName] = oCardParams[sParamName];\n\t\t\t\t}\n\t\t\t});\n\t\t\t(oCardParams?._relevantODataFilters as string[]).forEach((sFilterName: string) => {\n\t\t\t\tconst oCardParamsFilterName = JSON.parse(oCardParams[sFilterName] as string) as {\n\t\t\t\t\tParameters: unknown;\n\t\t\t\t\tSelectOptions: { PropertyName: string; Ranges: { Sign: string; Option: string; Low: string }[] }[];\n\t\t\t\t};\n\t\t\t\tconst aSelectOptions = oCardParamsFilterName.SelectOptions[0];\n\t\t\t\tconst aRanges = aSelectOptions.Ranges;\n\t\t\t\tif (aRanges?.length === 1 && aRanges[0].Sign === \"I\" && aRanges[0].Option === \"EQ\") {\n\t\t\t\t\tif (oParameters.ibnParams) {\n\t\t\t\t\t\toParameters.ibnParams[sFilterName] = aRanges[0].Low;\n\t\t\t\t\t}\n\t\t\t\t} else if (aRanges?.length > 0) {\n\t\t\t\t\toCardSV.massAddSelectOption(sFilterName, aRanges);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst oTempParam = JSON.parse(oParameters?.ibnParams?.[\"sap-xapp-state-data\"] as string) as Record<string, unknown>;\n\t\t\toTempParam.selectionVariant = oCardSV.toJSONObject();\n\t\t\tif (oParameters.ibnParams) {\n\t\t\t\toParameters.ibnParams[\"sap-xapp-state-data\"] = JSON.stringify(oTempParam);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves actions for a card based on its content type.\n\t *\n\t * @private\n\t * @param {ISapCard} manifest - The manifest object.\n\t * @returns {Array} The content actions.\n\t */\n\tprivate getContentActions(manifest: ISapCard): ICardAction[] {\n\t\tlet actions;\n\t\tif (manifest.type === \"List\") {\n\t\t\tactions = manifest?.content?.item?.actions;\n\t\t} else if (manifest.type === \"Table\") {\n\t\t\tactions = manifest?.content?.row?.actions;\n\t\t} else {\n\t\t\tactions = manifest?.content?.actions;\n\t\t}\n\t\treturn actions || [];\n\t}\n\n\t/**\n\t * Handles the completion of the import process.\n\t *\n\t * @private\n\t */\n\tprivate _importdone() {\n\t\tconst stateData = { status: true };\n\t\tthis.oEventBus.publish(\"importChannel\", \"cardsImported\", stateData);\n\t}\n\n\t/**\n\t * Refreshes the data for a given card.\n\t *\n\t * @private\n\t * @param {Card} oCard - The card to refresh.\n\t */\n\tprivate _refreshCardData(oCard: Card) {\n\t\tsap.ui.require([\"sap/insights/base/CacheData\"], (InsightsCacheData: InsightsCacheData) => {\n\t\t\tconst sCardId = (oCard.getManifestEntry(\"sap.app\") as ISapApp)?.id;\n\t\t\tconst cacheDataInstance = InsightsCacheData.getInstance();\n\t\t\tcacheDataInstance.clearCache(sCardId);\n\t\t\toCard.refreshData();\n\t\t});\n\t}\n\n\t/**\n\t * Triggers a full refresh of the Insights Cards's data and UI.\n\t *\n\t * Reloads all the user cards within the Insights Cards section by reinitializing relevant services\n\t * and re-rendering the panel.\n\t *\n\t * @public\n\t * @returns {Promise<void>} A promise that resolves once the Insights Cards section has been refreshed.\n\t */\n\tpublic async refreshData(): Promise<void> {\n\t\ttry {\n\t\t\tthis.cardHelperInstance = await (CardHelper as ICardHelper).getServiceAsync();\n\t\t\tawait this.cardHelperInstance._refreshUserCards(false);\n\t\t\tawait this.renderPanel();\n\t\t} catch (error) {\n\t\t\tLog.error(\"Failed to refresh cards: \", error instanceof Error ? error.message : (error as string));\n\t\t}\n\t}\n\n\t/**\n\t * Renders the panel.\n\t *\n\t * @private\n\t * @returns {Promise<void>} A promise that resolves when the panel is rendered.\n\t */\n\tpublic async renderPanel(): Promise<void> {\n\t\tif (!this.cardHelperInstance) {\n\t\t\tthis.pageManagerInstance = this.pageManagerInstance || getPageManagerInstance(this);\n\t\t\tconst [cardHelperInstance, hasCustomSpace] = await Promise.all([\n\t\t\t\t(CardHelper as ICardHelper).getServiceAsync(),\n\t\t\t\tthis.pageManagerInstance.hasCustomSpace()\n\t\t\t]);\n\t\t\tthis.cardHelperInstance = cardHelperInstance;\n\t\t\tthis.hasCustomSpace = hasCustomSpace;\n\t\t}\n\t\tawait this.rerenderCards();\n\t\tthis.fireEvent(\"loaded\");\n\t}\n\n\t/**\n\t * Rerenders the cards.\n\t *\n\t * @private\n\t * @returns {Promise<void>} A promise that resolves when the cards are rerendered.\n\t */\n\tprivate async rerenderCards(skipRecommendation: boolean = false): Promise<void> {\n\t\tif (!this._cardsRendered) {\n\t\t\tthis._cardsRendered = new Promise((resolve, reject) => {\n\t\t\t\tvoid (async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Enable placeholders after updating/rerendering cards\n\t\t\t\t\t\tconst sDefaultAggreName = this._getCardContainer().getMetadata().getDefaultAggregationName();\n\n\t\t\t\t\t\tthis._getCardContainer().removeAllAggregation(sDefaultAggreName);\n\t\t\t\t\t\tthis._showPlaceHolders();\n\t\t\t\t\t\t// Fetch Cards from insights service\n\t\t\t\t\t\tconst preferedCardIDs = this.hasCustomSpace ? PREFERED_CARDS : [];\n\t\t\t\t\t\tconst userVisibleCardModel = await this.cardHelperInstance?._getUserVisibleCardModel(preferedCardIDs);\n\t\t\t\t\t\tconst aCards = userVisibleCardModel.getProperty(\"/cards\") as ICard[];\n\t\t\t\t\t\tconst listBinding = userVisibleCardModel?.bindList(\"/cards\");\n\t\t\t\t\t\tif (!listBinding.hasListeners(\"change\")) {\n\t\t\t\t\t\t\tlistBinding?.enableExtendedChangeDetection(true, \"/cards\", {});\n\t\t\t\t\t\t\tlistBinding?.attachChange(async () => {\n\t\t\t\t\t\t\t\tawait (this._cardsRendered ?? Promise.resolve());\n\t\t\t\t\t\t\t\tconst visibleCards = userVisibleCardModel.getProperty(\"/cards\") as ICard[];\n\t\t\t\t\t\t\t\tif (visibleCards.length !== this.aVisibleCardInstances.length && visibleCards.length > 0) {\n\t\t\t\t\t\t\t\t\tthis._showCards(visibleCards);\n\t\t\t\t\t\t\t\t} else if (!visibleCards.length) {\n\t\t\t\t\t\t\t\t\tthis.fireHandleHidePanel();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._controlModel.setProperty(\"/userVisibleCards\", aCards);\n\t\t\t\t\t\tlet showRecommendation = await this.getPersonalisationProperty(RECOMMENDATION_PATH);\n\t\t\t\t\t\tif (aCards.length === 0 && showRecommendation === undefined && !skipRecommendation) {\n\t\t\t\t\t\t\tawait this._getRecommendationCards();\n\t\t\t\t\t\t} else if (aCards.length) {\n\t\t\t\t\t\t\tif (showRecommendation === undefined) {\n\t\t\t\t\t\t\t\tawait this._updateRecommendationStatus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// from available cards, check for old recommended cards and update it if present,\n\t\t\t\t\t\t\t// else show available visible cards\n\t\t\t\t\t\t\tawait this.checkForRecommendedCards(aCards);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.fireHandleHidePanel();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._cardsRendered = undefined;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.fireHandleHidePanel();\n\t\t\t\t\t\tthis._cardsRendered = undefined;\n\t\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\t\tLog.error(error.message);\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t});\n\t\t}\n\t\treturn this._cardsRendered;\n\t}\n\t/**\n\t * Sets the new visible cards in the model and updates the UI.\n\t * @private\n\t */\n\tprivate async setNewVisibleCards() {\n\t\tconst preferedCardIDs = this.hasCustomSpace ? PREFERED_CARDS : [];\n\t\tconst visibleCardModel = await this.cardHelperInstance._getUserVisibleCardModel(preferedCardIDs);\n\t\tconst aNewCards = visibleCardModel.getProperty(\"/cards\") as ICard[];\n\t\tthis._controlModel.setProperty(\"/userVisibleCards\", aNewCards);\n\t\tthis._showCards(aNewCards);\n\t}\n\n\t/**\n\t * Checks for recommended cards and updates their manifests if necessary.\n\t *\n\t * This method iterates through the provided cards to identify recommended cards that need to be updated.\n\t * It regenerates the manifests for these cards, updates the model with the regenerated cards, and displays\n\t * the updated cards. If no recommended cards are found, it displays the original cards.\n\t *\n\t * @param {ICard[]} aCards - An array of card objects to check for recommendations.\n\t * Each card contains a `descriptorContent` property with metadata about the card.\n\t * @returns {Promise<void>} A promise that resolves when the check and updates are complete.\n\t * @private\n\t */\n\tprivate async checkForRecommendedCards(aCards: ICard[]): Promise<void> {\n\t\tlet manifestIds: ICardDetails[] = [];\n\t\taCards.forEach((oVisCard, idx) => {\n\t\t\tlet oCard = oVisCard.descriptorContent;\n\t\t\tif (\n\t\t\t\toCard[\"sap.card\"]?.rec === true &&\n\t\t\t\t(!oCard[\"sap.card\"][\"configuration\"] || !oCard[\"sap.card\"][\"configuration\"][\"csrfTokens\"])\n\t\t\t) {\n\t\t\t\tmanifestIds.push({\n\t\t\t\t\tcardId: oCard?.[\"sap.app\"]?.id as string,\n\t\t\t\t\trank: oCard?.[\"sap.insights\"]?.ranking || oVisCard?.rank,\n\t\t\t\t\tid: oCard?.[\"sap.insights\"]?.[\"parentAppId\"] || \"\",\n\t\t\t\t\ttarget: oCard?.[\"sap.card\"]?.[\"header\"]?.[\"actions\"]?.length\n\t\t\t\t\t\t? (oCard[\"sap.card\"][\"header\"][\"actions\"][0]?.[\"parameters\"] as ICardActionParameters)?.ibnTarget\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tindex: idx\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tif (manifestIds.length) {\n\t\t\tconst uniqueManifestDetails: ICardDetails[] = this.getUniqueManifestDetails(manifestIds);\n\t\t\tconst aUpdatedCards = await this.regenerateCards(uniqueManifestDetails, manifestIds);\n\t\t\tif (aUpdatedCards?.length) {\n\t\t\t\t// Update the model with updated cards\n\t\t\t\tawait this.cardHelperInstance._updateCards(\n\t\t\t\t\taUpdatedCards.map((oCard: ICardDetails) => oCard?.newManifest?.descriptorContent) as ICardManifest[]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.setNewVisibleCards();\n\t\t} else {\n\t\t\tthis._showCards(aCards);\n\t\t}\n\t}\n\n\t/**\n\t * Filters and returns a list of unique manifest IDs.\n\t *\n\t * This method iterates through the provided list of manifest IDs and ensures that only unique entries\n\t * are included in the returned list. Uniqueness is determined based on the `id` and `target` properties.\n\t *\n\t * @param {ICardDetails[]} manifestIds - An array of manifest ID objects to filter for uniqueness.\n\t * Each object contains properties such as `id` and `target`.\n\t * @returns {ICardDetails[]} An array of unique manifest ID objects.\n\t * @private\n\t */\n\tprivate getUniqueManifestDetails(manifestIds: ICardDetails[]): ICardDetails[] {\n\t\tconst uniqueManifestDetails: ICardDetails[] = [];\n\t\tmanifestIds.forEach((item) => {\n\t\t\tconst exists = uniqueManifestDetails.some(\n\t\t\t\t(existingItem) => existingItem.id === item.id && targetsAreEqual(existingItem.target, item.target)\n\t\t\t);\n\t\t\tif (!exists) {\n\t\t\t\tuniqueManifestDetails.push(JSON.parse(JSON.stringify(item)) as ICardDetails);\n\t\t\t}\n\t\t});\n\t\treturn uniqueManifestDetails;\n\t}\n\n\t/**\n\t * Retrieves and processes card manifests based on the provided manifest IDs.\n\t *\n\t * This method fetches card manifests using the `AppManager` instance,\n\t * and removes duplicate regenerated cards to ensure uniqueness.\n\t *\n\t * @param {ICardDetails[]} manifestIds - An array of manifest ID objects to fetch and process.\n\t * Each object contains details such as `id`, `target`, and other card-specific properties.\n\t * @returns {Promise<ICardDetails[]>} A promise that resolves to an array of processed and unique card manifest details.\n\t * @private\n\t */\n\tprivate async _getManifests(manifestIds: ICardDetails[]): Promise<ICardDetails[]> {\n\t\t// from the provided manifestIds which are unique generate new recommended card manifests\n\t\tlet aManifests = await this.appManagerInstance._getCardManifest(undefined, manifestIds);\n\t\tif (aManifests?.length) {\n\t\t\tlet aRegeneratedCards = aManifests.map(function (oCard) {\n\t\t\t\tif (oCard?.[\"sap.card\"]) {\n\t\t\t\t\toCard[\"sap.card\"].rec = true;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tid: oCard[\"sap.app\"]?.id,\n\t\t\t\t\tdescriptorContent: oCard\n\t\t\t\t} as IRegeneratedCard;\n\t\t\t});\n\t\t\t// sometimes same card is recommended more than once, hence remove such duplicates\n\t\t\tlet mappedResults = this._removeDuplicateRegeneratedCards(aRegeneratedCards, manifestIds);\n\t\t\treturn mappedResults;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Regenerates card manifests and updates the original manifest list with the regenerated data.\n\t *\n\t * This method fetches updated card manifests, maps them to their corresponding original cards,\n\t * and updates the `newManifest` property of the original cards. It ensures that the regenerated\n\t * cards are correctly associated with their original counterparts based on a unique key.\n\t *\n\t * @param {ICardDetails[]} manifestIds - An array of manifest ID objects to regenerate.\n\t * Each object contains details such as `id`, `target`, and other card-specific properties.\n\t * @param {ICardDetails[]} allManifestIds - An array of all manifest ID objects, including those\n\t * that need to be updated with regenerated manifests.\n\t * @returns {Promise<ICardDetails[] | undefined>} A promise that resolves to an array of updated card details,\n\t * or `undefined` if an error occurs.\n\t * @private\n\t */\n\tprivate async regenerateCards(manifestIds: ICardDetails[], allManifestIds: ICardDetails[]): Promise<ICardDetails[] | undefined> {\n\t\ttry {\n\t\t\tlet aMappedManifest = await this._getManifests(manifestIds);\n\n\t\t\t// create unique identifier for each card based on its id and target properties.\n\t\t\tconst createUniqueKey = (item: ICardDetails): string => {\n\t\t\t\tif (item?.target?.semanticObject && item?.target?.action) {\n\t\t\t\t\treturn item.id + \"|\" + item.target.semanticObject + \"|\" + item.target.action;\n\t\t\t\t}\n\t\t\t\treturn item.id; // Return just the id if the target is invalid\n\t\t\t};\n\n\t\t\tlet uniqueMap: Record<string, IRegeneratedCard> = {};\n\t\t\t// Create a map of unique keys to newManifest data\n\t\t\t// Iterate through the aMappedManifest array and populate the uniqueMap with unique keys and their corresponding newManifest data\n\t\t\t// This ensures that each unique key maps to its respective newManifest data, allowing for easy retrieval later.\n\t\t\t// This is done to avoid duplicates and ensure that each card is only represented once in the final output.\n\t\t\taMappedManifest.forEach(function (item) {\n\t\t\t\tlet uniqueKey = createUniqueKey(item);\n\t\t\t\tif (item.newManifest) {\n\t\t\t\t\tuniqueMap[uniqueKey] = item.newManifest;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet aUpdatedCards: ICardDetails[] = [];\n\t\t\tif (aMappedManifest.length) {\n\t\t\t\t// Map newManifest data back into allManifestIds based on the uniquekey\n\t\t\t\tallManifestIds.forEach(function (oCard) {\n\t\t\t\t\tlet uniqueKey = createUniqueKey(oCard);\n\t\t\t\t\t// Check if the uniqueKey exists in the uniqueMap, if present, assign the corresponding newManifest data to the oCard object\n\t\t\t\t\t// This effectively updates the oCard object with the newManifest data, allowing for further processing or rendering.\n\t\t\t\t\t// This is done to ensure that the original card objects are updated with the newManifest data, allowing for further processing or rendering.\n\t\t\t\t\tif (uniqueMap[uniqueKey]) {\n\t\t\t\t\t\toCard.newManifest = uniqueMap[uniqueKey];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst newManifest = oCard[\"newManifest\"];\n\t\t\t\t\tconst descriptorContent = newManifest?.descriptorContent;\n\t\t\t\t\tif (descriptorContent) {\n\t\t\t\t\t\tdescriptorContent[\"sap.insights\"] = {\n\t\t\t\t\t\t\t...descriptorContent[\"sap.insights\"],\n\t\t\t\t\t\t\tranking: oCard.rank\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (descriptorContent[\"sap.app\"]) {\n\t\t\t\t\t\t\tdescriptorContent[\"sap.app\"].id = oCard.cardId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewManifest.id = oCard.cardId;\n\t\t\t\t\t\taUpdatedCards.push(JSON.parse(JSON.stringify(oCard)) as ICardDetails);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn aUpdatedCards;\n\t\t} catch (oError) {\n\t\t\tLog.error(oError instanceof Error ? oError.message : String(oError));\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Removes duplicate regenerated cards and maps them to their corresponding original cards.\n\t *\n\t * This method processes a list of regenerated cards and maps them to their corresponding original cards\n\t * based on their `id`. If a regenerated card matches an original card, it is added as the `newManifest`\n\t * property of the original card. The method ensures that each original card is updated with its corresponding\n\t * regenerated card, if available.\n\t *\n\t * @param {IRegeneratedCard[]} aCards - An array of regenerated cards. Each card contains a `descriptorContent` property\n\t * that includes metadata about the card.\n\t * @param {ICardDetails[]} aOriginalList - An array of original card details. Each card contains an `id` property\n\t * that is used to match it with regenerated cards.\n\t * @returns {ICardDetails[]} An array of original card details, with the `newManifest` property updated for cards\n\t * that have matching regenerated cards.\n\t * @private\n\t */\n\tprivate _removeDuplicateRegeneratedCards(aCards: IRegeneratedCard[], aOriginalList: ICardDetails[]): ICardDetails[] {\n\t\t// Create a mapping from aOriginalList for easy access (grouping by id)\n\t\tconst originalMap = {} as Record<string, ICardDetails>;\n\t\taOriginalList.forEach((originalItem) => {\n\t\t\tif (originalItem.id) {\n\t\t\t\toriginalMap[originalItem.id] = JSON.parse(JSON.stringify(originalItem)) as ICardDetails;\n\t\t\t}\n\t\t});\n\n\t\t// Process each card in aCards\n\t\taCards.forEach(function (oCard) {\n\t\t\tconst sCardId = oCard?.descriptorContent?.[\"sap.insights\"]?.parentAppId as string;\n\t\t\t// Check if we have a matching original list item\n\t\t\tif (sCardId && originalMap[sCardId]) {\n\t\t\t\tconst originalItem = originalMap[sCardId];\n\t\t\t\t// Check if updatedManifest already added\n\t\t\t\tif (!originalItem[\"newManifest\"]) {\n\t\t\t\t\t// Map newManifest to the original item\n\t\t\t\t\toriginalItem[\"newManifest\"] = oCard;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn Object.values(originalMap);\n\t}\n\n\t/**\n\t * Retrieves personalization data from the personalization service.\n\t *\n\t * This method ensures that the personalization service (`oPersonalizer`) is initialized\n\t * and fetches the latest personalization data. If no data is found, it returns an empty object.\n\t *\n\t * @private\n\t * @returns {Promise<IPersonalizationData>} A promise that resolves to the personalization data.\n\t * If no data is available, an empty object is returned.\n\t */\n\tprivate async _getPersonalizationData(): Promise<IPersonalizationData> {\n\t\tif (!this.oPersonalizer) {\n\t\t\tthis.oPersonalizer = await this._getPersonalization();\n\t\t}\n\t\tconst oPersData = await this.oPersonalizer.read();\n\t\treturn oPersData || {};\n\t}\n\n\t// Fetch personalization data property value\n\tprivate async getPersonalisationProperty(propertyKey: string) {\n\t\tconst oPersData = await this._getPersonalizationData();\n\t\treturn oPersData?.[propertyKey as keyof IPersonalizationData];\n\t}\n\n\t/**\n\t * Checks for recommendation cards.\n\t *\n\t * @private\n\t * @returns {Promise<void>} A promise that resolves when the check is complete.\n\t */\n\tprivate async _getRecommendationCards() {\n\t\tconst aRecommendedCards = await this.appManagerInstance.getRecommenedCards();\n\t\tif (aRecommendedCards?.length) {\n\t\t\treturn this._handleRecommendationCards(aRecommendedCards);\n\t\t}\n\t\tthis.fireHandleHidePanel();\n\t}\n\n\t/**\n\t * Handle Recommendation Cards\n\t * @param aRecommendedCards\n\t * @private\n\t */\n\tprivate async _handleRecommendationCards(aRecommendedCards: ICard[]) {\n\t\tconst cardManifests = aRecommendedCards.map((oCard) => oCard.descriptorContent);\n\t\tawait this.cardHelperInstance?._createCards(cardManifests);\n\t\tawait this._updateRecommendationStatus();\n\t\treturn this.setNewVisibleCards();\n\t}\n\n\t/**\n\t * Sets up the wrapper for the cards.\n\t *\n\t * @private\n\t */\n\tprivate _setupWrapper() {\n\t\tif (!this._cardsFlexWrapper) {\n\t\t\tthis._cardsFlexWrapper = new VBox(`${this.getId()}-cardsFlexWrapper`, {\n\t\t\t\trenderType: \"Bare\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\titems: [this._createCardContainer(), this._createMobileCardContainer()]\n\t\t\t});\n\t\t\tthis._cardsFlexWrapper.setModel(this._controlModel);\n\t\t\tthis.addContent(this._cardsFlexWrapper);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the card container.\n\t *\n\t * @private\n\t * @returns {GridContainer} The card container.\n\t */\n\tprivate _createCardContainer() {\n\t\tthis.cardsContainerSettings = new GridContainerSettings(`${this.getId()}-insightsCardsContainerSettings`, {\n\t\t\tcolumnSize: this.cardWidth,\n\t\t\trowSize: this.cardHeight,\n\t\t\tgap: \"1rem\"\n\t\t});\n\t\tthis.cardsContainer = new GridContainer(`${this.getId()}-insightsCardsFlexBox`, {\n\t\t\tvisible: \"{= !${/isPhone}}\"\n\t\t})\n\t\t\t.addStyleClass(\"sapUiSmallMarginTop\")\n\t\t\t.setLayout(this.cardsContainerSettings);\n\t\tthis.cardsContainer.setModel(this._controlModel);\n\t\tthis.addDragDropConfigTo(this.cardsContainer, (oEvent) => this._handleCardsDnd(oEvent));\n\n\t\treturn this.cardsContainer;\n\t}\n\n\t/**\n\t * Creates the mobile card container.\n\t *\n\t * @private\n\t * @returns {HeaderContainer} The mobile card container.\n\t */\n\tprivate _createMobileCardContainer() {\n\t\tthis.cardsMobileContainer = new HeaderContainer(`${this.getId()}-insightsCardsMobileFlexBox`, {\n\t\t\tscrollStep: 0,\n\t\t\tscrollStepByItem: 1,\n\t\t\tgridLayout: true,\n\t\t\tscrollTime: 1000,\n\t\t\tshowDividers: false,\n\t\t\tvisible: \"{/isPhone}\"\n\t\t});\n\t\tthis.cardsMobileContainer.setModel(this._controlModel);\n\t\tthis.addDragDropConfigTo(this.cardsMobileContainer, (oEvent) => this._handleCardsDnd(oEvent));\n\n\t\treturn this.cardsMobileContainer;\n\t}\n\n\t/**\n\t * Displays placeholder cards while loading.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tprivate _showPlaceHolders() {\n\t\tconst cardManifest = this.appManagerInstance._getAnalyticalCardManifest();\n\t\tconst placeholderArray = new Array(this._calculatePlaceholderCardCount()).fill(null);\n\t\tconst aInsightsCards = placeholderArray.map((_, index: number) => {\n\t\t\tconst card = new Card(recycleId(`${this.getId()}--placeHolderCard--${index}`), {\n\t\t\t\twidth: this.cardWidth,\n\t\t\t\theight: this.cardHeight,\n\t\t\t\tpreviewMode: \"Abstract\",\n\t\t\t\tmanifest: cardManifest,\n\t\t\t\thost: this.getAggregation(\"host\") as Control\n\t\t\t}).addStyleClass(\"sapUiSmallMarginEnd\");\n\t\t\treturn card;\n\t\t});\n\t\t// Create Wrapper HBox for Card\n\t\tconst oPreviewHBox = new HBox(recycleId(`${this.getId()}--wrapperBox`), {\n\t\t\tjustifyContent: \"SpaceBetween\",\n\t\t\titems: aInsightsCards\n\t\t});\n\n\t\t// add HBox as item to GridList\n\t\tconst sDefaultAggreName = this._getCardContainer().getMetadata().getDefaultAggregationName();\n\t\tif (sDefaultAggreName) {\n\t\t\tthis._getCardContainer().addAggregation(sDefaultAggreName, oPreviewHBox);\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the number of placeholder cards that can fit within the available container width.\n\t *\n\t * @private\n\t * @returns {number} The number of placeholder cards that should be displayed. Defaults to 1 if no valid count is determined.\n\t */\n\tprivate _calculatePlaceholderCardCount(): number {\n\t\tconst layoutDomRef = this._getInsightsContainer()?._getLayout()?.getDomRef();\n\t\tlet count = 0;\n\t\tif (layoutDomRef) {\n\t\t\tconst sectionDomRef = layoutDomRef.childNodes[0] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tlet availableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tconst cardLayoutConfig = {\n\t\t\t\tcontainerWidth: availableWidth,\n\t\t\t\ttotalCards: Constants.PLACEHOLDER_CARD_COUNT,\n\t\t\t\tminWidth: 304,\n\t\t\t\tmaxWidth: 583,\n\t\t\t\tgap: 16\n\t\t\t};\n\t\t\tconst cardWidth = this.getDeviceType() === DeviceType.Mobile ? 19 : calculateCardWidth(cardLayoutConfig);\n\n\t\t\t// Calculate and log the number of cards that can fit\n\t\t\tcount =\n\t\t\t\tthis.getDeviceType() === DeviceType.Mobile\n\t\t\t\t\t? this.aVisibleCardInstances.length\n\t\t\t\t\t: Math.floor(availableWidth / (cardWidth + Constants.CARDS_GAP));\n\t\t\tthis.cardWidth = `${cardWidth / 16}rem`;\n\t\t}\n\n\t\treturn count || 1;\n\t}\n\n\t/**\n\t * Displays the cards.\n\t *\n\t * @private\n\t * @param {ICard[]} aCards - The cards to display.\n\t */\n\tprivate _showCards(aCards: ICard[]) {\n\t\tconst panelName = this.getMetadata().getName();\n\t\tthis.fireHandleUnhidePanel();\n\t\tthis._getInsightsContainer()?.updatePanelsItemCount(aCards.length, panelName);\n\t\tif (this._headerVisible) {\n\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insightsCards\")} (${aCards.length})`);\n\t\t}\n\t\tconst sDefaultAggreName = this._getCardContainer().getMetadata().getDefaultAggregationName();\n\t\tthis._getCardContainer().removeAllAggregation(sDefaultAggreName);\n\t\tthis.aVisibleCardInstances = [];\n\t\tthis.cardsInViewport = [];\n\n\t\t// Setup Host For Cards\n\t\tif (!runtimeHostCreated) {\n\t\t\tthis._addRuntimeHost();\n\t\t\truntimeHostCreated = true;\n\t\t}\n\n\t\taCards.forEach((oCard, index) => {\n\t\t\tconst manifest = oCard.descriptorContent;\n\t\t\t// Create Card Instance\n\t\t\tconst oUserCard = new Card(recycleId(`${this.getId()}--userCard--${index}`), {\n\t\t\t\twidth: this.cardWidth,\n\t\t\t\theight: this.cardHeight,\n\t\t\t\tmanifest,\n\t\t\t\thost: this.getAggregation(\"host\") as Control\n\t\t\t});\n\n\t\t\tthis.aVisibleCardInstances.push(oUserCard);\n\n\t\t\tthis.addAggregation(\"cards\", oUserCard, true);\n\n\t\t\tconst items: Control[] = [oUserCard];\n\n\t\t\t// Add overlay in case of List and Table Card\n\t\t\tconst sType = manifest[\"sap.card\"]?.type;\n\t\t\tif (sType === \"Table\" || sType === \"List\") {\n\t\t\t\tconst overlay = new HBox(recycleId(`${this.getId()}--overlay--${index}`), {\n\t\t\t\t\twidth: this.cardWidth,\n\t\t\t\t\theight: \"2rem\"\n\t\t\t\t}).addStyleClass(\"insightsCardOverflowTop\");\n\t\t\t\tconst overlayHBoxWrapper = new HBox(recycleId(`${this.getId()}--overlayHBoxId--${index}`), {\n\t\t\t\t\theight: \"0\"\n\t\t\t\t}).addStyleClass(\"sapMFlexBoxJustifyCenter\");\n\t\t\t\toverlayHBoxWrapper.addItem(overlay);\n\t\t\t\titems.push(overlayHBoxWrapper);\n\t\t\t}\n\n\t\t\t// Create Wrapper VBox for Card\n\t\t\tconst oPreviewVBox = new VBox(recycleId(`${this.getId()}--previewBoxId--${index}`), {\n\t\t\t\tdirection: \"Column\",\n\t\t\t\tjustifyContent: \"Center\",\n\t\t\t\titems: items\n\t\t\t});\n\n\t\t\t// add VBox as item to GridList\n\t\t\tconst sDefaultAggreName = this._getCardContainer().getMetadata().getDefaultAggregationName();\n\t\t\tthis._getCardContainer().addAggregation(sDefaultAggreName, oPreviewVBox);\n\t\t});\n\t}\n\n\t/**\n\t * Handles the edit cards event.\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t */\n\tprivate _handleEditCards(event: Event) {\n\t\t/* If called from Panel Header event.source() will return TilesPanel, if called from Insights Container event.source() will return InsightsContainer.\n\t\t_getLayout is available at Container Level*/\n\t\tlet parent: ManagedObject = event.getSource<CardsPanel>().getParent() || this;\n\t\tif (parent instanceof CardsPanel) {\n\t\t\tparent = parent.getParent() as ManagedObject;\n\t\t}\n\t\t(parent as InsightsContainer)?._getLayout().openSettingsDialog(SETTINGS_PANELS_KEYS.INSIGHTS_CARDS);\n\t}\n\n\t/**\n\t * Hides the header of the cards panel.\n\t *\n\t * @private\n\t */\n\tpublic handleHideHeader() {\n\t\tthis._headerVisible = false;\n\t\tthis.setProperty(\"title\", \"\");\n\t\tthis._toggleHeaderActions(false);\n\t}\n\n\t/**\n\t * Adds the header to the cards panel.\n\t *\n\t * @private\n\t */\n\tpublic handleAddHeader() {\n\t\tthis._headerVisible = true;\n\t\tthis.setProperty(\n\t\t\t\"title\",\n\t\t\t`${this._i18nBundle?.getText(\"insightsCards\")} (${(this._controlModel.getProperty(\"/userVisibleCards\") as ICard[])?.length})`\n\t\t);\n\t\tthis._toggleHeaderActions(true);\n\t}\n\n\t/**\n\t * Refreshes the cards.\n\t *\n\t * @private\n\t */\n\tprivate refreshCards() {\n\t\t// This should be done via Host once implemented\n\t\tthis.aVisibleCardInstances.forEach((card) => this._refreshCardData(card));\n\t}\n\n\t/**\n\t * Handles the drag and drop of cards.\n\t *\n\t * @private\n\t * @param {Event<DropInfo$DropEventParameters>} oEvent - The drop event parameters.\n\t */\n\tprivate async _handleCardsDnd(oEvent: Event<DropInfo$DropEventParameters>) {\n\t\tconst sInsertPosition = oEvent.getParameter(\"dropPosition\") as string,\n\t\t\toDragItem = oEvent.getParameter(\"draggedControl\") as Control,\n\t\t\tiDragItemIndex = (oDragItem.getParent() as GridContainer)?.indexOfItem(oDragItem),\n\t\t\toDropItem = oEvent.getParameter(\"droppedControl\") as Control,\n\t\t\tiDropItemIndex = (oDragItem.getParent() as GridContainer).indexOfItem(oDropItem);\n\n\t\tthis._cardsFlexWrapper?.setBusy(true);\n\t\t// take the moved item from dragIndex and add to dropindex\n\t\ttry {\n\t\t\tif (!(this._controlModel.getProperty(\"/userAllCards\") as ICard[]).length) {\n\t\t\t\tconst userAllCardsModel = await this.cardHelperInstance._getUserAllCardModel();\n\t\t\t\tthis._controlModel.setProperty(\"/userAllCards\", userAllCardsModel.getProperty(\"/cards\"));\n\t\t\t\tawait this.updateCardList(sInsertPosition, iDropItemIndex, iDragItemIndex);\n\t\t\t} else {\n\t\t\t\tawait this.updateCardList(sInsertPosition, iDropItemIndex, iDragItemIndex);\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\t\tfocusDraggedItem(this._getCardContainer(), iDropItemIndex);\n\t\t\t}, 0);\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tLog.error(error.message);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._cardsFlexWrapper?.setBusy(false);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the card list based on the drag and drop operation.\n\t *\n\t * @private\n\t * @param {string} sInsertPosition - The position to insert the item.\n\t * @param {number} iDropItemIndex - The index of the dropped item.\n\t * @param {number} iDragItemIndex - The index of the dragged item.\n\t * @returns {Promise<void>} A promise that resolves when the card list is updated.\n\t */\n\tprivate async updateCardList(sInsertPosition: string, iDropItemIndex: number, iDragItemIndex: number) {\n\t\tconst aUserVisibleCards = this._controlModel.getProperty(\"/userVisibleCards\") as ICard[],\n\t\t\taUserAllCards = this._controlModel.getProperty(\"/userAllCards\") as ICard[],\n\t\t\tsDragedPositionRank = aUserVisibleCards[iDragItemIndex]?.rank,\n\t\t\tsDropedPositionRank = aUserVisibleCards[iDropItemIndex]?.rank;\n\t\tlet iUpdatedDragItemIndex = aUserAllCards.findIndex((oCard: ICard) => oCard.rank === sDragedPositionRank),\n\t\t\tiUpdatedDropItemIndex = aUserAllCards.findIndex((oCard: ICard) => oCard.rank === sDropedPositionRank);\n\n\t\tif (\n\t\t\t(sInsertPosition === \"Before\" && iDragItemIndex === iDropItemIndex - 1) ||\n\t\t\t(sInsertPosition === \"After\" && iDragItemIndex === iDropItemIndex + 1) ||\n\t\t\tiDragItemIndex === iDropItemIndex\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tif (sInsertPosition === \"Before\" && iUpdatedDragItemIndex < iUpdatedDropItemIndex) {\n\t\t\tiUpdatedDropItemIndex--;\n\t\t} else if (sInsertPosition === \"After\" && iUpdatedDragItemIndex > iUpdatedDropItemIndex) {\n\t\t\tiUpdatedDropItemIndex++;\n\t\t}\n\t\tif (iUpdatedDragItemIndex !== iUpdatedDropItemIndex) {\n\t\t\tconst aUpdatedCards = this.cardHelperInstance.handleDndCardsRanking(\n\t\t\t\tiUpdatedDragItemIndex,\n\t\t\t\tiUpdatedDropItemIndex,\n\t\t\t\taUserAllCards\n\t\t\t);\n\t\t\tawait this.cardHelperInstance._updateMultipleCards(aUpdatedCards, \"PUT\");\n\t\t\tthis._sortCardsOnRank(aUserAllCards);\n\t\t\tthis._controlModel.setProperty(\"/userAllCards\", aUserAllCards);\n\t\t\tthis._controlModel.setProperty(\n\t\t\t\t\"/userVisibleCards\",\n\t\t\t\taUserAllCards.filter((oCard: ICard) => oCard.visibility)\n\t\t\t);\n\t\t\tawait this.rerenderCards();\n\t\t}\n\t}\n\n\t/**\n\t * Sorts the cards based on their rank property.\n\t *\n\t * @private\n\t * @param {ICard[]} aCards - The array of cards to sort.\n\t */\n\tprivate _sortCardsOnRank(aCards: ICard[]) {\n\t\t// Sort Cards based on it rank property where rank is a alphanumeric string\n\t\taCards.sort((a, b) => {\n\t\t\tif (a.rank && b.rank) {\n\t\t\t\tif (a.rank < b.rank) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (a.rank > b.rank) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the personalization instance.\n\t *\n\t * @private\n\t * @returns {UShellPersonalizer} The personalization instance.\n\t */\n\tpublic _getPersonalization() {\n\t\tconst persContainerId = PersonalisationUtils.getPersContainerId(this);\n\t\tconst ownerComponent = PersonalisationUtils.getOwnerComponent(this) as Component;\n\t\treturn UShellPersonalizer.getInstance(persContainerId, ownerComponent);\n\t}\n\n\t/**\n\t * Updates the recommendation status based on the feature toggle.\n\t * @returns {Promise} A promise that resolves when the recommendation status is updated.\n\t */\n\tprivate async _updateRecommendationStatus() {\n\t\tconst oPersData = await this._getPersonalizationData();\n\t\toPersData[RECOMMENDATION_PATH] = true;\n\t\treturn this.oPersonalizer.write(oPersData);\n\t}\n\n\t/**\n\t * Calculates the number of visible cards that can fit within the available width of the parent container.\n\t *\n\t * @private\n\t * @returns {number} - The number of visible cards.\n\t */\n\tprivate _calculateVisibleCardCount() {\n\t\tconst layout = this._getInsightsContainer()._getLayout();\n\t\tconst pageDomRef = layout.getDomRef();\n\t\tconst deviceType = this.getDeviceType();\n\t\tlet count = 1;\n\n\t\tif (pageDomRef) {\n\t\t\tconst isHeaderVisible = layout.getProperty(\"showHeader\") as boolean;\n\t\t\tconst sectionNodeIndex = isHeaderVisible ? 1 : 0;\n\t\t\tconst sectionDomRef = pageDomRef.childNodes[sectionNodeIndex] as Element;\n\t\t\tconst domProperties = fetchElementProperties(sectionDomRef, [\"width\", \"padding-left\", \"padding-right\"]);\n\t\t\tconst iAvailableWidth = domProperties.width - domProperties[\"padding-left\"] - domProperties[\"padding-right\"];\n\t\t\tconst totalCards = this.aVisibleCardInstances.length;\n\n\t\t\tconst cardLayoutConfig = { containerWidth: iAvailableWidth, totalCards: totalCards, minWidth: 304, maxWidth: 583, gap: 16 };\n\t\t\tconst cardWidth = calculateCardWidth(cardLayoutConfig);\n\t\t\tthis.cardWidth = `${cardWidth / 16}rem`;\n\t\t\tif (deviceType === DeviceType.Mobile) {\n\t\t\t\tcount = totalCards;\n\t\t\t} else {\n\t\t\t\t// Multiply by 16 because `cardWidth` is in rems\n\t\t\t\tcount = Math.max(Math.floor(iAvailableWidth / cardWidth), 1);\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Adjusts the layout of the cards panel based on the current layout and device type.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic _adjustLayout() {\n\t\tconst layout = this._getInsightsContainer()?._getLayout();\n\t\tlet cardWidth = this.cardWidth;\n\t\tconst isMobileDevice = this.getDeviceType() === DeviceType.Mobile;\n\n\t\tif (layout && this.aVisibleCardInstances?.length > 0) {\n\t\t\tconst isElementExpanded = layout._getCurrentExpandedElementName() === this.getProperty(\"fullScreenName\");\n\n\t\t\t//_calculateVisibleCardCount needs to be called in all scenarios to get the correct card width according to device width.\n\t\t\t//if expanded, again the card count is reset to available cards count\n\t\t\tlet cardCount = this._calculateVisibleCardCount();\n\t\t\tif (isElementExpanded) {\n\t\t\t\tcardCount = this.aVisibleCardInstances.length;\n\t\t\t}\n\t\t\tthis._controlModel.setProperty(\"/isPhone\", isMobileDevice);\n\n\t\t\t// update cards in viewport\n\t\t\tif (cardCount !== this.cardsInViewport.length) {\n\t\t\t\tthis.cardsInViewport = this.aVisibleCardInstances.slice(0, cardCount);\n\n\t\t\t\tconst sDefaultAggreName = this._getCardContainer().getMetadata().getDefaultAggregationName();\n\t\t\t\tthis._getCardContainer().removeAllAggregation(sDefaultAggreName);\n\t\t\t\tthis.cardsInViewport.forEach((card) => {\n\t\t\t\t\tconst manifest = card.getManifest() as ICardManifest;\n\t\t\t\t\tconst sType = manifest[\"sap.card\"]?.type;\n\t\t\t\t\tlet overlayHBoxWrapper!: HBox;\n\t\t\t\t\tif (sType === \"Table\" || sType === \"List\") {\n\t\t\t\t\t\tconst overlay = new HBox({\n\t\t\t\t\t\t\twidth: this.cardWidth,\n\t\t\t\t\t\t\theight: \"2rem\"\n\t\t\t\t\t\t}).addStyleClass(\"insightsCardOverflowLayer insightsCardOverflowTop\");\n\t\t\t\t\t\toverlayHBoxWrapper = new HBox({\n\t\t\t\t\t\t\theight: \"0\"\n\t\t\t\t\t\t}).addStyleClass(\"sapMFlexBoxJustifyCenter\");\n\t\t\t\t\t\toverlayHBoxWrapper.addItem(overlay);\n\t\t\t\t\t}\n\t\t\t\t\tconst cardWrapper = new VBox({\n\t\t\t\t\t\tdirection: \"Column\",\n\t\t\t\t\t\tjustifyContent: \"Center\",\n\t\t\t\t\t\titems: [card]\n\t\t\t\t\t});\n\t\t\t\t\tif (overlayHBoxWrapper) {\n\t\t\t\t\t\tcardWrapper.addItem(overlayHBoxWrapper);\n\t\t\t\t\t}\n\t\t\t\t\tconst sDefaultAggreName = this._getCardContainer().getMetadata().getDefaultAggregationName();\n\t\t\t\t\tthis._getCardContainer().addAggregation(sDefaultAggreName, cardWrapper);\n\t\t\t\t});\n\n\t\t\t\tthis.shareCardsInViewport();\n\t\t\t}\n\n\t\t\t// show/hide Full Screen Button if available\n\t\t\tconst showFullScreenButton = isElementExpanded || this.aVisibleCardInstances.length > cardCount;\n\t\t\tif (this._headerVisible) {\n\t\t\t\tthis._getInsightsContainer()?.toggleFullScreenElements(this, showFullScreenButton);\n\t\t\t} else {\n\t\t\t\tconst fullScreenButton = getAssociatedFullScreenMenuItem(this);\n\t\t\t\tconst fullScreenText = fullScreenButton?.getTitle();\n\t\t\t\tthis._getInsightsContainer()?.updateMenuItem(\n\t\t\t\t\tthis._controlMap.get(`${this.getId()}-${cardsContainerMenuItems.SHOW_MORE}`) as MenuItem,\n\t\t\t\t\tshowFullScreenButton,\n\t\t\t\t\tfullScreenText\n\t\t\t\t);\n\t\t\t\tthis._getInsightsContainer()?.updateActionButton(\n\t\t\t\t\tthis._controlMap.get(`${this.getId()}-${cardsContainerActionButtons.SHOW_MORE}`) as Button,\n\t\t\t\t\tshowFullScreenButton,\n\t\t\t\t\tfullScreenText\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.cardWidth = this.getDeviceType() === DeviceType.Mobile ? \"19rem\" : \"22rem\";\n\t\t}\n\n\t\t// update width of cards on resize\n\t\tif (cardWidth !== this.cardWidth) {\n\t\t\tthis.aVisibleCardInstances.forEach((card) => card.setWidth(this.cardWidth));\n\t\t\tthis.cardsContainerSettings?.setColumnSize(this.cardWidth);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the menu items for the container.\n\t *\n\t * @private\n\t * @returns {MenuItem[]} An array of MenuItem instances.\n\t */\n\tpublic getContainerMenuItems(): MenuItem[] {\n\t\tif (!this._containerMenuItems) {\n\t\t\tconst containerRefreshMenuItem = this._createRefreshMenuItem(cardsContainerMenuItems.REFRESH, \"containerCardsRefresh\");\n\t\t\tconst containerEditCardsMenuItem = this._createEditCardsMenuItem(cardsContainerMenuItems.EDIT_CARDS, \"containerManageCards\");\n\t\t\tconst containerShowMoreMenuItem = createShowMoreMenuItem(this, cardsContainerMenuItems.SHOW_MORE, \"containerCardsShowMore\");\n\t\t\tthis._controlMap.set(`${this.getId()}-${cardsContainerMenuItems.SHOW_MORE}`, containerShowMoreMenuItem);\n\t\t\tthis._containerMenuItems = [containerRefreshMenuItem, containerEditCardsMenuItem, containerShowMoreMenuItem];\n\t\t}\n\t\treturn this._containerMenuItems;\n\t}\n\n\t/**\n\t * Retrieves the action buttons for the container.\n\t *\n\t * @private\n\t * @returns {Button[]} An array of Button instances.\n\t */\n\tpublic getContainerActionButtons(): Button[] {\n\t\tif (!this._containerActionButtons) {\n\t\t\tthis._containerActionButtons = [];\n\t\t\tconst actionButton = createShowMoreActionButton(this, cardsContainerActionButtons.SHOW_MORE, \"containerCardsShowMore\");\n\t\t\tif (actionButton) {\n\t\t\t\tthis._controlMap.set(`${this.getId()}-${cardsContainerActionButtons.SHOW_MORE}`, actionButton);\n\t\t\t\tthis._containerActionButtons.push(actionButton);\n\t\t\t}\n\t\t}\n\n\t\treturn this._containerActionButtons;\n\t}\n\n\t/**\n\t * Retrieves the insights container.\n\t *\n\t * @private\n\t * @returns {InsightsContainer} - The insights container.\n\t */\n\tprivate _getInsightsContainer(): InsightsContainer {\n\t\tif (!this.insightsContainer) {\n\t\t\tthis.insightsContainer = this.getParent() as InsightsContainer;\n\t\t}\n\t\treturn this.insightsContainer;\n\t}\n\n\t/**\n\t * Creates the refresh menu item.\n\t *\n\t * @param {string} id - The ID of the menu item.\n\t * @param {string} fesrId - The FESR ID of the menu item.\n\t * @returns {MenuItem} - The created menu item.\n\t * @private\n\t */\n\tprivate _createRefreshMenuItem(id: string, fesrId?: string): MenuItem {\n\t\tconst menuItem = new MenuItem(`${this.getId()}-${id}`, {\n\t\t\ttitle: this._i18nBundle.getText(\"refresh\"),\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\tvisible: false,\n\t\t\tpress: () => this.refreshCards()\n\t\t});\n\t\tthis._controlMap.set(`${this.getId()}-${id}`, menuItem);\n\t\tif (fesrId) {\n\t\t\taddFESRId(menuItem, fesrId);\n\t\t}\n\n\t\treturn menuItem;\n\t}\n\n\t/**\n\t * Creates the edit cards menu item.\n\t *\n\t * @param {string} id - The ID of the menu item.\n\t * @param {string} fesrId - The FESR ID of the menu item.\n\t * @returns {MenuItem} - The created menu item.\n\t * @private\n\t */\n\tprivate _createEditCardsMenuItem(id: string, fesrId?: string): MenuItem {\n\t\tconst menuItem = new MenuItem(`${this.getId()}-${id}`, {\n\t\t\ttitle: this._i18nBundle.getText(\"manageCards\"),\n\t\t\ticon: \"sap-icon://edit\",\n\t\t\tvisible: false,\n\t\t\tpress: (event: Event) => this._handleEditCards(event)\n\t\t});\n\t\tthis._controlMap.set(`${this.getId()}-${id}`, menuItem);\n\t\tif (fesrId) {\n\t\t\taddFESRId(menuItem, fesrId);\n\t\t}\n\t\treturn menuItem;\n\t}\n\n\t/**\n\t * Toggles the visibility of the header actions.\n\t *\n\t * @param {boolean} bShow - Whether to show or hide the header actions.\n\t * @private\n\t */\n\tprivate _toggleHeaderActions(bShow: boolean) {\n\t\t(this.getAggregation(\"menuItems\") as MenuItem[])?.forEach((menuItem) => {\n\t\t\tthis._getInsightsContainer()?.toggleMenuListItem(menuItem, bShow);\n\t\t});\n\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) =>\n\t\t\tthis._getInsightsContainer()?.toggleActionButton(actionButton, bShow)\n\t\t);\n\t}\n\n\t/**\n\t * Retrieves the card container based on the device type.\n\t *\n\t * @private\n\t * @returns {GridContainer | HeaderContainer} - The card container.\n\t *\n\t */\n\tprivate _getCardContainer() {\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\treturn this.cardsMobileContainer;\n\t\t}\n\t\treturn this.cardsContainer;\n\t}\n\n\t/**\n\t * Sorts the menu items based on the provided order.\n\t *\n\t * @private\n\t * @param {string[]} menuItems - The order of the menu items.\n\t */\n\tprivate _sortMenuItems(menuItems: string[]) {\n\t\tconst panelMenuItems = this.getAggregation(\"menuItems\") as MenuItem[];\n\t\tlet sortedMenuItems = sortMenuItems(menuItems, panelMenuItems);\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t\tsortedMenuItems?.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t}\n\n\t/**\n\t * Shares the cards that are currently in the viewport by firing the \"visibleCardsUpdated\" event.\n\t *\n\t * @private\n\t */\n\tprivate shareCardsInViewport() {\n\t\tconst cardCount = this._calculateVisibleCardCount();\n\t\tconst visibleCards = this._controlModel.getProperty(\"/userVisibleCards\") as ICard[];\n\t\tconst cardsInViewport = visibleCards?.slice(0, cardCount);\n\t\tif (cardsInViewport?.length) {\n\t\t\tthis.fireEvent(\"visibleCardsUpdated\", { cards: cardsInViewport });\n\t\t}\n\t}\n\n\t/**\n\t * Exit lifecycle method.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic exit() {\n\t\truntimeHostCreated = false;\n\t\t(this.getAggregation(\"host\") as Host)?.destroy();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}