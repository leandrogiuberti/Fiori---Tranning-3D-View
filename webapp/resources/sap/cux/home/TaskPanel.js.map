{"version":3,"file":"TaskPanel.js","names":["sap","ui","define","Log","ActionTile","ActionTileContent","Button","ContentConfig","Link","List","MessageBox","Popover","StandardListItem","TileAttribute","sap_m_library","NumberFormat","__MenuItem","__ToDoPanel","__DecisionDialog","___utils_Device","___utils_FESRUtil","___utils_TaskUtils","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","ButtonType","ContentConfigType","LoadState","PlacementType","URLHelper","MenuItem","ToDoPanel","DecisionDialog","getIconFrameBadge","getIconFrameBadgeValueState","calculateDeviceType","DeviceType","fetchElementProperties","addFESRId","addFESRSemanticStepName","FESR_EVENTS","fetchUserDetails","formatDate","getPriority","getTaskUrl","Format","TextArrangement","Constants","GRID_VIEW_MIN_ROWS","GRID_VIEW_MAX_ROWS","GRID_VIEW_MIN_WIDTH","GRID_VIEW_TWO_COL_MIN_WIDTH","GRID_VIEW_MAX_WIDTH","CARD_HEIGHT","splitCards","cards","maxLength","cardSet","i","length","push","slice","TaskPanel","extend","metadata","library","properties","enableActions","type","group","defaultValue","visibility","customAttributeUrl","constructor","_constructor","id","settings","ToDoPanel.prototype.constructor.call","this","init","_init","ToDoPanel.prototype.init.call","_customAttributeMap","_taskDefinitionMap","setProperty","_i18nBundle","getText","_viewAllTasksMenuItem","getId","title","icon","visible","press","_onPressViewAll","bind","insertAggregation","contentWrapper","getContent","addStyleClass","generateRequestUrls","_generateRequestUrls","cardCount","urls","getCountUrl","getDataUrl","getCustomAttributeUrl","generateCardTemplate","_generateCardTemplate","context","attributes","getObject","map","attribute","index","label","contentConfig","text","href","mode","frameType","pressEnabled","enableIconFrame","enableDynamicHeight","enableNavigationButton","headerImage","badgeIcon","getProperty","badgeValueState","header","state","priority","priorityText","_toPriorityText","event","_onPressTask","tileContent","headerLink","_onClickCreatedBy","actionButtons","viewButton","getSource","getParent","firePress","PRESS","approveButton","_onActionButtonPress","undefined","rejectButton","overflowButton","Transparent","_onOverflowButtonPress","overflowButtons","_getOverflowButtonPopover","openBy","_overflowPopover","_overflowList","showHeader","content","placement","VerticalPreferredBottom","_setupOverflowList","destroyItems","forEach","actionButton","listItem","pressHandler","addItem","_loadCards","_getCustomAttributes","task","finalAttributes","maximumAttributeCount","customAttributes","TaskDefinitionID","custom_attribute","customAttribute","taskCustomAttributes","CustomAttributeData","results","existingAttribute","find","taskAttribute","Name","name","value","referenced","Text","format","_formatCustomAttribute","textArrangement","_arrangeText","Value","_addCommonAttributes","trim","description","ValueText","formattedValue","TextFirst","TextLast","TextOnly","TextSeparate","taskAttributes","findAttribute","attributeName","oAttribute","toUpperCase","currentAttribute","CURRENCYVALUE","reference","referencedAttribute","currencyFormatter","getCurrencyInstance","parseFloat","USER","FormattedValue","CompletionDeadline","CreatedOn","getTargetAppUrl","control","getBindingContext","loadState","url","Loading","redirect","_this","sourceControl","SAP__Origin","originId","CreatedBy","userId","TaskTitle","subject","CreatedByName","createdBy","InstanceID","link","triggerEmail","email","URL","window","location","hash","toString","Promise","resolve","userData","Email","require","serviceContainer","getServiceAsync","teamsHelper","_temp2","enableContactsCollaboration","_temp","encodeURIComponent","_teamsHelper$enableCo","popover","error","Error","message","String","reject","warning","onDataReceived","_onDataReceived","options","_this2","tasks","taskDefinitions","_extractCustomAttributes","_temp3","onlyCount","_updateTasks","updatedTasks","_oData","displayTiles","tiles","_this3","_addCustomAttributes","_temp4","getEnableActions","_getTaskDefintions","_downloadDecisionOptions","_addActions","key","actions","getTaskActions","getBaseUrl","_this4","decisionKeys","decisionURLs","Object","keys","reduce","includes","_temp5","_clearRequests","requests","baseURL","requestURLs","success","decisionOptions","_submitBatch","taskDefinition","CustomAttributeDefinitionData","filter","Rank","sort","attr1","attr2","Label","Type","Reference","Referenced","getNoDataText","_getNoDataText","getVerticalCardCount","_getVerticalCardCount","domRef","calculationProperties","domProperties","parentDomProperties","parentElement","titleHeight","calculateTitleHeight","availableHeight","height","horizontalCardCount","getHorizontalCardCount","isPlaceholder","gap","verticalCardCount","_isLoaded","rowHeights","maxAttributes","attributeCount","card","visibleRowCount","Math","min","_isGridLayoutAllowed","rowHeight","floor","max","_adjustLayout","ToDoPanel.prototype._adjustLayout.call","deviceType","LargeDesktop","XLargeDesktop","setTargetAppUrl","_setTargetAppUrl","targetAppUrl","setVisible"],"sources":["TaskPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport ActionTile from \"sap/m/ActionTile\";\nimport ActionTileContent from \"sap/m/ActionTileContent\";\nimport Button from \"sap/m/Button\";\nimport ContentConfig from \"sap/m/ContentConfig\";\nimport Link, { Link$PressEvent } from \"sap/m/Link\";\nimport List from \"sap/m/List\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Popover from \"sap/m/Popover\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport TileAttribute from \"sap/m/TileAttribute\";\nimport { ButtonType, ContentConfigType, LoadState, PlacementType, URLHelper } from \"sap/m/library\";\nimport ServiceContainer from \"sap/suite/ui/commons/collaboration/ServiceContainer\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport { MetadataOptions } from \"sap/ui/core/Element\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport MenuItem from \"./MenuItem\";\nimport { $TaskPanelSettings } from \"./TaskPanel\";\nimport type { CalculationProperties, RequestOptions } from \"./ToDoPanel\";\nimport ToDoPanel from \"./ToDoPanel\";\nimport DecisionDialog, { ActionButton, DecisionOption, getIconFrameBadge, getIconFrameBadgeValueState } from \"./utils/DecisionDialog\";\nimport { calculateDeviceType, DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS } from \"./utils/FESRUtil\";\nimport { fetchUserDetails, formatDate, getPriority, getTaskUrl, TaskPriority } from \"./utils/TaskUtils\";\n\ninterface CustomAttribute {\n\tname?: string;\n\tlabel?: string;\n\ttext?: string;\n\ttype?: string;\n\thref?: string;\n\tformat?: string;\n\treference?: string;\n\treferenced?: string;\n\ttextArrangement?: TextArrangement;\n}\n\ninterface TaskCustomAttribute {\n\tName: string;\n\tValue: string;\n\tValueText: string;\n\tLabel: string;\n\tType: string;\n\tRank: number;\n\tFormat: string;\n\tFormattedValue: string;\n\tReference: string;\n\tReferenced: string;\n\tTextArrangement: TextArrangement;\n}\n\nexport interface Task {\n\tSAP__Origin: string;\n\tCreatedBy: string;\n\tTaskTitle: string;\n\tCreatedByName: string;\n\tInstanceID: string;\n\tTaskDefinitionID: string;\n\tCompletionDeadline: string;\n\tCreatedOn: string;\n\tactions: ActionButton[];\n\tPriority: TaskPriority;\n\tCustomAttributeData: {\n\t\tresults: TaskCustomAttribute[];\n\t};\n\tattributes: CustomAttribute[];\n}\n\ninterface TaskDefintion {\n\tSAP__Origin: string;\n\tInstanceID: string;\n\tTaskDefinitionID: string;\n}\n\ninterface TaskDefinitionCollection {\n\tTaskDefinitionID: string;\n\tCustomAttributeDefinitionData: {\n\t\tresults: TaskCustomAttribute[];\n\t};\n}\n\nenum Format {\n\tCURRENCYVALUE = \"CURRENCYVALUE\",\n\tCURRENCYCODE = \"CURRENCYCODE\",\n\tUSER = \"USER\"\n}\n\nenum TextArrangement {\n\tTextFirst = \"TextFirst\",\n\tTextLast = \"TextLast\",\n\tTextOnly = \"TextOnly\",\n\tTextSeparate = \"TextSeparate\"\n}\n\nconst Constants = {\n\tGRID_VIEW_MIN_ROWS: 1,\n\tGRID_VIEW_MAX_ROWS: 2,\n\tGRID_VIEW_MIN_WIDTH: 304,\n\tGRID_VIEW_TWO_COL_MIN_WIDTH: 374,\n\tGRID_VIEW_MAX_WIDTH: 583,\n\tCARD_HEIGHT: {\n\t\t// Cozy - Compact\n\t\t1: 220, // 214  - 226\n\t\t2: 272, // 265  - 278\n\t\t3: 324, // 318  - 330\n\t\t4: 376 // 370  - 382\n\t}\n};\n\n/**\n * Splits an array of task cards into smaller arrays, each with a maximum specified length.\n *\n * @param {Task[]} cards - The array of task cards to be split.\n * @param {number} maxLength - The maximum length of each sub-array.\n * @returns {Task[][]} - An array of sub-arrays, each containing a maximum of `maxLength` task cards.\n */\nfunction splitCards(cards: Task[], maxLength: number): Task[][] {\n\tconst cardSet = [];\n\tfor (let i = 0; i < cards.length; i += maxLength) {\n\t\tcardSet.push(cards.slice(i, i + maxLength));\n\t}\n\n\treturn cardSet;\n}\n\n/**\n *\n * Panel class for managing and storing Task cards.\n *\n * @extends ToDoPanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.TaskPanel\n */\nexport default class TaskPanel extends ToDoPanel {\n\tprivate _customAttributeMap!: Record<string, CustomAttribute[]>;\n\tprivate _taskDefinitionMap!: Record<string, DecisionOption[]>;\n\tprivate _viewAllTasksMenuItem!: MenuItem;\n\tprivate _overflowPopover!: Popover;\n\tprivate _overflowList!: List;\n\n\tconstructor(id?: string | $TaskPanelSettings);\n\tconstructor(id?: string, settings?: $TaskPanelSettings);\n\t/**\n\t * Constructor for a new Task Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $TaskPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies if actions should be enabled for the task cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tenableActions: { type: \"boolean\", group: \"Data\", defaultValue: false, visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL that fetches the custom attributes to be displayed along with the task cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcustomAttributeUrl: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"public\" }\n\t\t}\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._customAttributeMap = {};\n\t\tthis._taskDefinitionMap = {};\n\n\t\t//Configure Header\n\t\tthis.setProperty(\"key\", \"tasks\");\n\t\tthis.setProperty(\"title\", this._i18nBundle.getText(\"tasksTabTitle\"));\n\n\t\t//Setup Menu Items - ensure that 'View All Tasks' item is the first item in the list\n\t\tthis._viewAllTasksMenuItem = new MenuItem(`${this.getId()}-view-tasks-btn`, {\n\t\t\ttitle: this._i18nBundle.getText(\"viewAllTasksTitle\"),\n\t\t\ticon: \"sap-icon://inbox\",\n\t\t\tvisible: false,\n\t\t\tpress: this._onPressViewAll.bind(this)\n\t\t});\n\t\tthis.insertAggregation(\"menuItems\", this._viewAllTasksMenuItem, 0);\n\t\taddFESRId(this._viewAllTasksMenuItem, \"goToTaskSitution\");\n\n\t\t//Add custom styles\n\t\tconst [contentWrapper] = this.getContent() || [];\n\t\tcontentWrapper?.addStyleClass(\"sapUiGridTaskLayout\");\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t * Overridden method to provide task-specific URLs.\n\t *\n\t * @private\n\t * @override\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst urls = [this.getCountUrl(), `${this.getDataUrl()},CustomAttributeData&$expand=CustomAttributeData&$skip=0&$top=${cardCount}`];\n\n\t\tconst customAttributeUrl = this.getCustomAttributeUrl();\n\t\tif (customAttributeUrl) {\n\t\t\turls.push(customAttributeUrl);\n\t\t}\n\n\t\treturn urls;\n\t}\n\n\t/**\n\t * Generates a card template for tasks.\n\t * Overridden method from To-Do panel to generate task-specific card template.\n\t *\n\t * @private\n\t * @override\n\t * @param {string} id The ID for the template card.\n\t * @param {Context} context The context object.\n\t * @returns {Control} The generated card control template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\tconst attributes = (context.getObject() as Task).attributes?.map((attribute, index) => {\n\t\t\treturn new TileAttribute(`${id}-${index}-attribute`, {\n\t\t\t\tlabel: attribute.label as string,\n\t\t\t\tcontentConfig: new ContentConfig(`${id}-${index}-contentConfig`, {\n\t\t\t\t\ttype: attribute.type as ContentConfigType,\n\t\t\t\t\ttext: attribute.text as string,\n\t\t\t\t\thref: attribute.href as string\n\t\t\t\t})\n\t\t\t});\n\t\t});\n\n\t\treturn new ActionTile(`${id}-actionTile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\tenableIconFrame: true,\n\t\t\tenableDynamicHeight: true,\n\t\t\tenableNavigationButton: true,\n\t\t\theaderImage: \"sap-icon://workflow-tasks\",\n\t\t\tbadgeIcon: getIconFrameBadge(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\tbadgeValueState: getIconFrameBadgeValueState(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\theader: context.getProperty(\"TaskTitle\") as string,\n\t\t\tstate: context.getProperty(\"loadState\") as LoadState,\n\t\t\tpriority: getPriority(context.getProperty(\"Priority\") as TaskPriority),\n\t\t\tpriorityText: this._toPriorityText(getPriority(context.getProperty(\"Priority\") as TaskPriority)),\n\t\t\tpress: (event: Event) => this._onPressTask(event),\n\t\t\ttileContent: [\n\t\t\t\tnew ActionTileContent(`${id}-actionTileContent`, {\n\t\t\t\t\theaderLink: new Link({\n\t\t\t\t\t\ttext: context.getProperty(\"CreatedByName\") as string,\n\t\t\t\t\t\tpress: (event: Event): void => {\n\t\t\t\t\t\t\tvoid this._onClickCreatedBy(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\tattributes\n\t\t\t\t})\n\t\t\t],\n\t\t\tactionButtons: [\n\t\t\t\t(() => {\n\t\t\t\t\tconst viewButton = new Button(`${id}-view-btn`, {\n\t\t\t\t\t\ttext: this._i18nBundle.getText(\"viewButton\"),\n\t\t\t\t\t\tpress: (event: Event) => (event.getSource<Button>().getParent() as ActionTile).firePress(),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/length\") === 0\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(viewButton, FESR_EVENTS.PRESS, \"todoActionViewBtn\");\n\t\t\t\t\treturn viewButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst approveButton = new Button(`${id}-approve-btn`, {\n\t\t\t\t\t\ttext: context.getProperty(\"actions/0/text\") as string,\n\t\t\t\t\t\ttype: context.getProperty(\"actions/0/type\") as ButtonType,\n\t\t\t\t\t\tpress: () => this._onActionButtonPress(context.getProperty(\"actions/0/pressHandler\") as () => void),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/0\") !== undefined\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(approveButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn approveButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst rejectButton = new Button(`${id}-reject-btn`, {\n\t\t\t\t\t\ttext: context.getProperty(\"actions/1/text\") as string,\n\t\t\t\t\t\ttype: context.getProperty(\"actions/1/type\") as ButtonType,\n\t\t\t\t\t\tpress: () => this._onActionButtonPress(context.getProperty(\"actions/1/pressHandler\") as () => void),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/1\") !== undefined\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(rejectButton, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\t\t\treturn rejectButton;\n\t\t\t\t})(),\n\t\t\t\t(() => {\n\t\t\t\t\tconst overflowButton = new Button(`${id}-overflow-btn`, {\n\t\t\t\t\t\ticon: \"sap-icon://overflow\",\n\t\t\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\t\t\tpress: (event: Event) => this._onOverflowButtonPress(event, context),\n\t\t\t\t\t\tvisible: context.getProperty(\"actions/length\") >= 3\n\t\t\t\t\t});\n\t\t\t\t\taddFESRSemanticStepName(overflowButton, FESR_EVENTS.PRESS, \"todoActBtnOverflow\");\n\t\t\t\t\treturn overflowButton;\n\t\t\t\t})()\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Handles the press event of the overflow button.\n\t * Opens a Popover containing overflow actions.\n\t *\n\t * @private\n\t * @param {Event} event - The press event triggered by the overflow button.\n\t * @param {Context} context - The context containing all actions.\n\t * @returns {void}\n\t */\n\tprivate _onOverflowButtonPress(event: Event, context: Context): void {\n\t\tconst overflowButtons = (context.getProperty(\"actions\") as ActionButton[]).slice(2);\n\t\tthis._getOverflowButtonPopover(overflowButtons).openBy(event.getSource<Button>());\n\t}\n\n\t/**\n\t * Creates or retrieves the overflow button Popover.\n\t *\n\t * @private\n\t * @param {ActionButton[]} actionButtons - The array of overflow actions.\n\t * @returns {Popover} The overflow button Popover.\n\t */\n\tprivate _getOverflowButtonPopover(actionButtons: ActionButton[]): Popover {\n\t\tif (!this._overflowPopover) {\n\t\t\tthis._overflowList = new List(`${this.getId()}-overflowList`);\n\t\t\tthis._overflowPopover = new Popover(`${this.getId()}-overflowPopover`, {\n\t\t\t\tshowHeader: false,\n\t\t\t\tcontent: this._overflowList,\n\t\t\t\tplacement: PlacementType.VerticalPreferredBottom\n\t\t\t});\n\t\t}\n\n\t\t//setup task-specific with task-specific actions\n\t\tthis._setupOverflowList(actionButtons);\n\t\treturn this._overflowPopover;\n\t}\n\n\t/**\n\t * Sets up the overflow button list with the provided task-specific actions.\n\t *\n\t * @private\n\t * @param {ActionButton[]} actionButtons - The array of overflow actions.\n\t * @returns {void}\n\t */\n\tprivate _setupOverflowList(actionButtons: ActionButton[]): void {\n\t\tthis._overflowList.destroyItems();\n\t\tactionButtons.forEach((actionButton, index) => {\n\t\t\tconst listItem = new StandardListItem(`action-${index}`, {\n\t\t\t\ttitle: actionButton.text,\n\t\t\t\ttype: \"Active\",\n\t\t\t\tpress: () => this._onActionButtonPress(actionButton.pressHandler as () => void)\n\t\t\t});\n\t\t\taddFESRSemanticStepName(listItem, FESR_EVENTS.PRESS, \"todoActionBtn\");\n\t\t\tthis._overflowList.addItem(listItem);\n\t\t});\n\t}\n\n\t/**\n\t * Handles the button press event and executes the provided press handler function,\n\t * which refreshes the UI after the button press action.\n\t *\n\t * @private\n\t * @param {Function} pressHandler - The function to be executed when the button is pressed.\n\t * @returns {void}\n\t */\n\tprivate _onActionButtonPress(pressHandler: (refreshFn: () => Promise<void>) => void): void {\n\t\tpressHandler(this._loadCards.bind(this));\n\t}\n\n\t/**\n\t * Retrieves custom attributes for a given task and formats them for display.\n\t * If the task has completion deadline and creation date, those attributes are also included.\n\t * If the task has a creator, the creator's name is included as well.\n\t *\n\t * @param {Task} task - The task object for which custom attributes are retrieved.\n\t * @returns {CustomAttribute[]} - An array of formatted custom attributes.\n\t */\n\tprivate _getCustomAttributes(task: Task): CustomAttribute[] {\n\t\tconst finalAttributes = [];\n\t\tconst maximumAttributeCount = 4;\n\t\tconst customAttributes = this._customAttributeMap[task.TaskDefinitionID] || [];\n\n\t\tfor (let custom_attribute of customAttributes) {\n\t\t\tconst customAttribute = custom_attribute;\n\t\t\tconst taskCustomAttributes = task.CustomAttributeData?.results;\n\t\t\tconst existingAttribute = taskCustomAttributes.find((taskAttribute) => {\n\t\t\t\treturn taskAttribute.Name === customAttribute.name;\n\t\t\t});\n\t\t\tlet value = \"\";\n\n\t\t\tif (existingAttribute && !customAttribute.referenced) {\n\t\t\t\tconst attribute: CustomAttribute = {\n\t\t\t\t\tlabel: customAttribute.label + \":\",\n\t\t\t\t\ttype: ContentConfigType.Text\n\t\t\t\t};\n\n\t\t\t\tif (customAttribute.format) {\n\t\t\t\t\tvalue = this._formatCustomAttribute(customAttribute, taskCustomAttributes);\n\t\t\t\t} else if (customAttribute.textArrangement) {\n\t\t\t\t\tvalue = this._arrangeText(existingAttribute, customAttribute.textArrangement);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = customAttribute.type === \"Edm.DateTime\" ? formatDate(existingAttribute.Value) : existingAttribute.Value;\n\t\t\t\t}\n\t\t\t\tattribute.text = value || \"-\";\n\t\t\t\tfinalAttributes.push(attribute);\n\t\t\t}\n\t\t}\n\n\t\t// add common attributes\n\t\tthis._addCommonAttributes(finalAttributes, task);\n\n\t\treturn finalAttributes.slice(0, maximumAttributeCount);\n\t}\n\n\t/**\n\t * Formats the given unit of measure value and description based on the specified text arrangement.\n\t *\n\t * @private\n\t * @param {TaskCustomAttribute} customAttribute The custom attribute object.\n\t * @param {TextArrangement} textArrangement The text arrangement option.\n\t * @returns {string} The formatted value.\n\t */\n\tprivate _arrangeText(customAttribute: TaskCustomAttribute, textArrangement: TextArrangement): string {\n\t\tconst value = customAttribute.Value.trim();\n\t\tconst description = customAttribute.ValueText.trim();\n\t\tlet formattedValue = \"\";\n\n\t\tswitch (textArrangement) {\n\t\t\tcase TextArrangement.TextFirst:\n\t\t\t\tformattedValue = `${description} (${value})`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextLast:\n\t\t\t\tformattedValue = `${value} (${description})`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextOnly:\n\t\t\t\tformattedValue = `${description}`;\n\t\t\t\tbreak;\n\t\t\tcase TextArrangement.TextSeparate:\n\t\t\t\tformattedValue = `${value}`;\n\t\t\t\tbreak;\n\t\t\tdefault: // TextFirst\n\t\t\t\tformattedValue = `${description} ${value})`;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn formattedValue;\n\t}\n\n\t/**\n\t * Formats a custom attribute value based on its format type.\n\t *\n\t * @param {CustomAttribute} customAttribute - The custom attribute object.\n\t * @param {TaskCustomAttribute[]} taskAttributes - The array of task attributes.\n\t * @returns {string} - The formatted value.\n\t */\n\tprivate _formatCustomAttribute(customAttribute: CustomAttribute, taskAttributes: TaskCustomAttribute[] = []): string {\n\t\tconst findAttribute = (attributeName: string) => {\n\t\t\treturn taskAttributes.find((oAttribute) => {\n\t\t\t\treturn oAttribute.Name === attributeName;\n\t\t\t});\n\t\t};\n\t\tconst format = customAttribute.format?.toUpperCase();\n\t\tconst currentAttribute = findAttribute(customAttribute.name as string);\n\t\tlet formattedValue = currentAttribute?.Value;\n\n\t\t// Format = CurrencyValue\n\t\tif (format === Format.CURRENCYVALUE && customAttribute.reference) {\n\t\t\tconst referencedAttribute = findAttribute(customAttribute.reference);\n\n\t\t\tif (referencedAttribute) {\n\t\t\t\tconst currencyFormatter = NumberFormat.getCurrencyInstance();\n\t\t\t\tformattedValue = currencyFormatter.format(parseFloat(currentAttribute?.Value as string), referencedAttribute.Value);\n\t\t\t}\n\t\t} else if (format === Format.USER) {\n\t\t\tformattedValue = currentAttribute?.FormattedValue || currentAttribute?.Value;\n\t\t}\n\n\t\treturn formattedValue as string;\n\t}\n\n\t/**\n\t * Adds common attributes to the final attributes list based on the provided task.\n\t * Common attributes include completion deadline, creation date, and creator's name.\n\t *\n\t * @param {CustomAttribute[]} finalAttributes - The array of custom attributes to which the common attributes will be added.\n\t * @param {Task} task - The task object containing data for common attributes.\n\t */\n\tprivate _addCommonAttributes(finalAttributes: CustomAttribute[], task: Task): void {\n\t\tif (task.CompletionDeadline) {\n\t\t\tfinalAttributes.push({\n\t\t\t\tlabel: this._i18nBundle.getText(\"dueDate\") + \":\",\n\t\t\t\ttext: formatDate(task.CompletionDeadline, \"MMM dd, YYYY hh:mm a\"),\n\t\t\t\ttype: ContentConfigType.Text\n\t\t\t});\n\t\t}\n\n\t\tif (task.CreatedOn) {\n\t\t\tfinalAttributes.push({\n\t\t\t\tlabel: this._i18nBundle.getText(\"createdOn\") + \":\",\n\t\t\t\ttext: formatDate(task.CreatedOn),\n\t\t\t\ttype: ContentConfigType.Text\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Handles the press event of a task.\n\t *\n\t * @private\n\t * @param {Event} event - The press event.\n\t */\n\tprivate _onPressTask(event: Event) {\n\t\tif (this.getTargetAppUrl()) {\n\t\t\tconst control = event.getSource<ActionTile>();\n\t\t\tconst context = control.getBindingContext();\n\t\t\tconst loadState = context?.getProperty(\"loadState\") as LoadState;\n\t\t\tconst url = getTaskUrl(\n\t\t\t\tcontext?.getProperty(\"SAP__Origin\") as string,\n\t\t\t\tcontext?.getProperty(\"InstanceID\") as string,\n\t\t\t\tthis.getTargetAppUrl()\n\t\t\t);\n\n\t\t\tif (loadState !== LoadState.Loading) {\n\t\t\t\tURLHelper.redirect(url, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the click event on the \"Created By\" link.\n\t * Triggers email or opens a contact card if configuration is enabled\n\t *\n\t * @private\n\t * @param {Event} event - The event object.\n\t */\n\tprivate async _onClickCreatedBy(event: Link$PressEvent): Promise<void> {\n\t\tconst sourceControl = event.getSource();\n\t\tconst {\n\t\t\tSAP__Origin: originId,\n\t\t\tCreatedBy: userId,\n\t\t\tTaskTitle: subject,\n\t\t\tCreatedByName: createdBy,\n\t\t\tInstanceID\n\t\t} = event.getSource().getBindingContext()?.getObject() as Task;\n\t\tconst link = getTaskUrl(originId, InstanceID, this.getTargetAppUrl());\n\t\tconst triggerEmail = (email: string, { subject, body }: { subject: string; body: string }) => {\n\t\t\tURLHelper.triggerEmail(email, subject, body);\n\t\t};\n\t\tconst url = new URL(window.location.href);\n\t\turl.hash = link;\n\t\tconst body = url.toString();\n\n\t\tconst userData = await fetchUserDetails(originId, userId);\n\t\tif (userData.Email) {\n\t\t\tsap.ui.require([\"sap/suite/ui/commons/collaboration/ServiceContainer\"], async (serviceContainer: ServiceContainer) => {\n\t\t\t\tconst teamsHelper = await serviceContainer.getServiceAsync();\n\n\t\t\t\tif (teamsHelper.enableContactsCollaboration) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst popover = (await teamsHelper.enableContactsCollaboration(userData.Email as string, {\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\tbody: encodeURIComponent(body)\n\t\t\t\t\t\t})) as Popover;\n\t\t\t\t\t\tpopover.openBy(sourceControl);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tLog.error(error instanceof Error ? error.message : String(error));\n\t\t\t\t\t\ttriggerEmail(userData.Email as string, { subject, body });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttriggerEmail(userData.Email as string, { subject, body });\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tMessageBox.warning(this._i18nBundle.getText(\"noEmail\", [createdBy]) as string);\n\t\t}\n\t}\n\n\t/**\n\t * Hook for processing data fetched from a batch call.\n\t * This method can be overridden to perform additional data processing operations.\n\t * In this implementation, it is consumed to handle task-related data, particularly\n\t * for extracting custom attributes if action cards are enabled.\n\t *\n\t * @private\n\t * @async\n\t * @param {unknown[]} results - Data retrieved from the batch call. Structure may vary based on the backend service.\n\t * @param {RequestOptions} options - Additional options for parsing the data.\n\t * @returns {Promise<void>} A Promise that resolves when the data processing is complete.\n\t */\n\tpublic async onDataReceived(results: unknown[], options: RequestOptions): Promise<void> {\n\t\tconst [tasks, taskDefinitions] = results;\n\t\tthis._extractCustomAttributes(taskDefinitions as TaskDefinitionCollection[]);\n\n\t\tif (!options || (options && !options.onlyCount)) {\n\t\t\tconst updatedTasks = await this._updateTasks(tasks as Task[]);\n\t\t\tthis._oData.displayTiles = this._oData.tiles = updatedTasks;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the tasks with attributes and actions.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to update.\n\t * @returns {Promise<Task[]>} A promise that resolves with the updated array of tasks.\n\t */\n\tprivate async _updateTasks(tasks: Task[] = []): Promise<Task[]> {\n\t\t//add custom attributes to tasks\n\t\tlet updatedTasks = this._addCustomAttributes(tasks);\n\n\t\t//add actions to tasks\n\t\tif (this.getEnableActions()) {\n\t\t\t//calculate unique task definitions\n\t\t\tconst taskDefinitions = this._getTaskDefintions(updatedTasks);\n\n\t\t\t//download decision options for task defintions\n\t\t\tawait this._downloadDecisionOptions(taskDefinitions);\n\n\t\t\t//append actions\n\t\t\tupdatedTasks = this._addActions(updatedTasks);\n\t\t}\n\n\t\treturn updatedTasks;\n\t}\n\n\t/**\n\t * Adds custom attributes to each task in the provided array.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to which custom attributes will be added.\n\t * @returns {Task[]} - A new array of tasks, each with added custom attributes.\n\t */\n\tprivate _addCustomAttributes(tasks: Task[]): Task[] {\n\t\treturn tasks.map((task) => ({\n\t\t\t...task,\n\t\t\tattributes: this._getCustomAttributes(task)\n\t\t}));\n\t}\n\n\t/**\n\t * Adds actions to the tasks based on their task definitions.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks to which actions will be added.\n\t * @returns {Task[]} The array of tasks with actions added.\n\t */\n\tprivate _addActions(tasks: Task[]): Task[] {\n\t\treturn tasks.map((task) => {\n\t\t\tconst key = task.SAP__Origin + task.TaskDefinitionID;\n\t\t\treturn {\n\t\t\t\t...task,\n\t\t\t\tactions: this._taskDefinitionMap[key]\n\t\t\t\t\t? DecisionDialog.getTaskActions(task, this.getBaseUrl(), this._taskDefinitionMap, this._i18nBundle)\n\t\t\t\t\t: []\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Downloads decision options for the provided task definitions.\n\t *\n\t * @private\n\t * @param {Record<string, TaskDefinition>} taskDefinitions - The task definitions for which decision options will be downloaded.\n\t * @returns {Promise<void>} A promise that resolves when all decision options are downloaded and processed.\n\t */\n\tprivate async _downloadDecisionOptions(taskDefinitions: Record<string, TaskDefintion>): Promise<void> {\n\t\tconst decisionKeys: string[] = [];\n\t\tconst decisionURLs = Object.keys(taskDefinitions).reduce((urls: string[], key) => {\n\t\t\tif (!Object.keys(this._taskDefinitionMap).includes(key)) {\n\t\t\t\tdecisionKeys.push(key);\n\t\t\t\tthis._taskDefinitionMap[key] = [];\n\n\t\t\t\tconst { SAP__Origin, InstanceID } = taskDefinitions[key];\n\t\t\t\turls.push(`DecisionOptions?SAP__Origin='${SAP__Origin}'&InstanceID='${InstanceID}'`);\n\t\t\t}\n\t\t\treturn urls;\n\t\t}, []);\n\n\t\tif (decisionURLs.length) {\n\t\t\tthis._clearRequests();\n\t\t\tthis.requests.push({\n\t\t\t\tbaseURL: this.getBaseUrl(),\n\t\t\t\trequestURLs: decisionURLs,\n\t\t\t\tsuccess: (results: DecisionOption[][]): Promise<void> => {\n\t\t\t\t\tresults.forEach((decisionOptions: DecisionOption[], index) => {\n\t\t\t\t\t\tthis._taskDefinitionMap[decisionKeys[index]] = decisionOptions;\n\t\t\t\t\t});\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait this._submitBatch();\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves unique task definitions from the provided array of tasks.\n\t *\n\t * @private\n\t * @param {Task[]} tasks - The array of tasks from which to retrieve task definitions.\n\t * @returns {Record<string, TaskDefintion>} An object containing unique task definitions.\n\t */\n\tprivate _getTaskDefintions(tasks: Task[] = []): Record<string, TaskDefintion> {\n\t\tconst taskDefinitions: Record<string, TaskDefintion> = {};\n\t\ttasks.forEach((task) => {\n\t\t\tconst key = task.SAP__Origin + task.TaskDefinitionID;\n\t\t\tif (!taskDefinitions[key]) {\n\t\t\t\ttaskDefinitions[key] = {\n\t\t\t\t\tSAP__Origin: task.SAP__Origin,\n\t\t\t\t\tInstanceID: task.InstanceID,\n\t\t\t\t\tTaskDefinitionID: task.TaskDefinitionID\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\treturn taskDefinitions;\n\t}\n\n\t/**\n\t * Extracts Custom Attribute Information to create an attribute map from raw attribute data\n\t * received from call, which is used while task processing\n\t *\n\t * @private\n\t * @param {TaskDefinitionCollection[]} taskDefinitions - array of raw tasks definitions\n\t */\n\tprivate _extractCustomAttributes(taskDefinitions: TaskDefinitionCollection[] = []): void {\n\t\ttaskDefinitions.forEach((taskDefinition: TaskDefinitionCollection) => {\n\t\t\tconst customAttributes = taskDefinition.CustomAttributeDefinitionData?.results || [];\n\t\t\tthis._customAttributeMap[taskDefinition.TaskDefinitionID] = customAttributes\n\t\t\t\t.filter((oAttribute) => oAttribute.Rank > 0)\n\t\t\t\t.sort((attr1, attr2) => attr2.Rank - attr1.Rank)\n\t\t\t\t.map((oAttribute) => ({\n\t\t\t\t\tname: oAttribute.Name,\n\t\t\t\t\tlabel: oAttribute.Label,\n\t\t\t\t\ttype: oAttribute.Type,\n\t\t\t\t\tformat: oAttribute.Format,\n\t\t\t\t\treference: oAttribute.Reference,\n\t\t\t\t\treferenced: oAttribute.Referenced,\n\t\t\t\t\ttextArrangement: oAttribute.TextArrangement\n\t\t\t\t}));\n\t\t});\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @private\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noTaskTitle\") as string;\n\t}\n\n\t/**\n\t * Calculates the number of vertical cards that can fit within the available height of the given DOM element.\n\t *\n\t * @private\n\t * @override\n\t * @param {Element} domRef - The DOM element to calculate the vertical card count for.\n\t * @returns {number} - The number of vertical cards that can fit within the available height.\n\t */\n\tpublic getVerticalCardCount(domRef: Element, calculationProperties?: CalculationProperties): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"padding-top\"]);\n\t\tconst parentDomProperties = fetchElementProperties(domRef.parentElement as Element, [\"height\"]);\n\t\tconst titleHeight = this.calculateTitleHeight();\n\t\tconst availableHeight = parentDomProperties.height - domProperties[\"padding-top\"] * 2 - titleHeight;\n\t\tconst horizontalCardCount = this.getHorizontalCardCount(domRef);\n\t\tconst isPlaceholder = calculationProperties?.isPlaceholder;\n\t\tconst gap = 16;\n\t\tlet height = 0;\n\t\tlet verticalCardCount = 0;\n\n\t\tif (this._isLoaded()) {\n\t\t\tconst cardSet = splitCards(this._oData.tiles as Task[], horizontalCardCount);\n\t\t\tconst rowHeights = cardSet.map((cards: Task[]) => {\n\t\t\t\tconst maxAttributes = cards.reduce(function (attributeCount: number, card: Task) {\n\t\t\t\t\tcard.attributes = card.attributes || [];\n\t\t\t\t\treturn card.attributes.length > attributeCount ? card.attributes.length : attributeCount;\n\t\t\t\t}, 1);\n\n\t\t\t\tlet visibleRowCount = Math.min(maxAttributes, 4);\n\t\t\t\tif (this._isGridLayoutAllowed()) {\n\t\t\t\t\t// If grid view is enabled, restrict the card height to 2 rows\n\t\t\t\t\tvisibleRowCount =\n\t\t\t\t\t\tvisibleRowCount > Constants.GRID_VIEW_MAX_ROWS ? Constants.GRID_VIEW_MAX_ROWS : Constants.GRID_VIEW_MIN_ROWS;\n\t\t\t\t}\n\n\t\t\t\treturn Constants.CARD_HEIGHT[visibleRowCount as keyof typeof Constants.CARD_HEIGHT] + gap;\n\t\t\t});\n\n\t\t\tfor (let rowHeight of rowHeights) {\n\t\t\t\tif (height + rowHeight < availableHeight) {\n\t\t\t\t\theight += rowHeight;\n\t\t\t\t\tverticalCardCount++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tverticalCardCount = Math.floor(availableHeight / Constants.CARD_HEIGHT[isPlaceholder ? \"4\" : \"1\"]);\n\t\t}\n\n\t\treturn Math.max(verticalCardCount, 2);\n\t}\n\n\t/**\n\t * Adjusts the layout based on card count and device type.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic _adjustLayout(): void {\n\t\tsuper._adjustLayout();\n\n\t\tthis.setProperty(\n\t\t\t\"minCardWidth\",\n\t\t\tthis._isGridLayoutAllowed() ? Constants.GRID_VIEW_TWO_COL_MIN_WIDTH : Constants.GRID_VIEW_MIN_WIDTH\n\t\t);\n\t\tthis.setProperty(\"maxCardWidth\", Constants.GRID_VIEW_MAX_WIDTH);\n\t}\n\n\t/**\n\t * Determines if grid view is allowed for displaying card content based on the device type.\n\t *\n\t * @returns {boolean} `true` if the device type is either Desktop or LargeDesktop, otherwise `false`.\n\t */\n\tprotected _isGridLayoutAllowed(): boolean {\n\t\tconst deviceType = calculateDeviceType();\n\t\treturn deviceType === DeviceType.LargeDesktop || deviceType === DeviceType.XLargeDesktop;\n\t}\n\n\t/**\n\t * Sets the target application URL and updates the visibility of the \"View All Tasks\" menu item.\n\t *\n\t * @param {string} targetAppUrl - The URL of the target application.\n\t * @returns {this} The current instance of the TaskPanel for method chaining.\n\t */\n\tpublic setTargetAppUrl(targetAppUrl: string): this {\n\t\tthis._viewAllTasksMenuItem.setVisible(!!targetAppUrl);\n\t\tthis.setProperty(\"targetAppUrl\", targetAppUrl);\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}