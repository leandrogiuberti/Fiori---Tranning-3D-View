{"version":3,"file":"BaseSettingsPanel.js","names":["sap","ui","define","DragDropInfo","Element","Lib","sap_ui_core_library","___utils_DragDropUtils","dnd","attachKeyboardHandler","BaseSettingsPanel","extend","metadata","library","properties","key","type","group","defaultValue","visibility","title","icon","showHeader","defaultAggregation","aggregations","content","singularName","multiple","actionButtons","associations","panel","events","panelNavigated","parameters","context","onDialogClose","constructor","_constructor","id","settings","Element.prototype.constructor.call","this","_keyuserChanges","init","_init","_i18nBundle","getResourceBundleFor","_actionButtonsCache","_getPanel","getElementById","getAssociation","_persistDialog","dialog","layout","getParent","keyMap","dialogName","getMetadata","getName","persistPropertyName","undefined","setProperty","_isDialogPersisted","getProperty","getKeyUserChanges","_getKeyUserChanges","addKeyUserChanges","_addKeyUserChanges","change","push","clearKeyUserChanges","_clearKeyUserChanges","addDragDropConfigTo","_addDragDropConfigTo","container","dropHandler","addDragDropConfig","getId","sourceAggregation","targetAggregation","dropPosition","DropPosition","On","dropLayout","DropLayout","Horizontal","drop","attachBrowserEvent","event","disableNavigation","metaKey","ctrlKey","dragDropEvent","getActionButtons","_getActionButtons","slice","addActionButton","_addActionButton","button","addAggregation","insertActionButton","_insertActionButton","index","splice","insertAggregation","removeActionButton","_removeActionButton","removedButton","indexOf","removeAggregation","isSupported","_isSupported","Promise","resolve","e","reject"],"sources":["BaseSettingsPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Button from \"sap/m/Button\";\nimport Table from \"sap/m/Table\";\nimport DragDropInfo from \"sap/ui/core/dnd/DragDropInfo\";\nimport { DropInfo$DropEvent } from \"sap/ui/core/dnd/DropInfo\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Element from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { dnd } from \"sap/ui/core/library\";\nimport BaseLayout from \"./BaseLayout\";\nimport BasePanel from \"./BasePanel\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport { $BaseSettingsPanelSettings } from \"./BaseSettingsPanel\";\nimport { IKeyUserChange } from \"./interface/KeyUserInterface\";\nimport { attachKeyboardHandler } from \"./utils/DragDropUtils\";\n\n/**\n *\n * Abstract base class for panels inside My Home Settings Dialog.\n *\n * @extends sap.ui.core.Element\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @private\n * @ui5-restricted ux.eng.s4producthomes1\n *\n * @alias sap.cux.home.BaseSettingsPanel\n */\nexport default abstract class BaseSettingsPanel extends Element {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _keyuserChanges: Array<IKeyUserChange> = [];\n\tprivate _actionButtonsCache!: Button[];\n\n\tconstructor(id?: string | $BaseSettingsPanelSettings);\n\tconstructor(id?: string, settings?: $BaseSettingsPanelSettings);\n\t/**\n\t * Constructor for a new Base Settings Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseSettingsPanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Key of the settings panel.\n\t\t\t */\n\t\t\tkey: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Title of the settings panel.\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Icon of the settings panel.\n\t\t\t */\n\t\t\ticon: { type: \"sap.ui.core.URI\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies if header should be shown for the settings panel page.\n\t\t\t */\n\t\t\tshowHeader: { type: \"boolean\", group: \"Misc\", defaultValue: true, visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"content\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Content aggregation of the settings panel.\n\t\t\t */\n\t\t\tcontent: { type: \"sap.ui.core.Control\", singularName: \"content\", multiple: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Holds the actions to be shown within the settings panel.\n\t\t\t */\n\t\t\tactionButtons: { type: \"sap.m.Button\", multiple: true, singularName: \"actionButton\", visibility: \"hidden\" }\n\t\t},\n\t\tassociations: {\n\t\t\t/**\n\t\t\t * Associations of the settings panel.\n\t\t\t * Id of the panel associated with the settings panel to be provided.\n\t\t\t * In case of multiple panels with same Id, the first panel will be associated.\n\t\t\t * If no panel is found with the provided id, the settings panel will not be associated with any panel.\n\t\t\t */\n\t\t\tpanel: { type: \"string\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Fired whenever the panel has been navigated to.\n\t\t\t */\n\t\t\tpanelNavigated: {\n\t\t\t\tparameters: {\n\t\t\t\t\tcontext: { type: \"object\" }\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Fired whenever the associated settings dialog is closed.\n\t\t\t */\n\t\t\tonDialogClose: {}\n\t\t}\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @public\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\t\tthis._actionButtonsCache = [];\n\t}\n\n\t/**\n\t * Retrieves the BasePanel or BaseLayout associated with the BaseSettingsPanel.\n\t *\n\t * @returns {BasePanel | BaseLayout} The panel or layout associated with the BaseSettingsPanel\n\t * @private\n\t */\n\tprotected _getPanel(): BasePanel | BaseLayout {\n\t\treturn Element.getElementById(this.getAssociation(\"panel\", null) as string) as BasePanel | BaseLayout;\n\t}\n\n\t/**\n\t * Persists the dialog state by setting a property on the parent layout\n\t * indicating that the settings dialog should be persisted.\n\t *\n\t * @private\n\t */\n\tprotected _persistDialog(dialog: BaseSettingsDialog): void {\n\t\tif (!dialog) return;\n\n\t\tconst layout = dialog.getParent() as BaseLayout;\n\t\tconst keyMap = {\n\t\t\t\"sap.cux.home.SettingsDialog\": \"settingsDialogPersisted\",\n\t\t\t\"sap.cux.home.ContentAdditionDialog\": \"contentAdditionDialogPersisted\"\n\t\t};\n\n\t\tconst dialogName = dialog.getMetadata().getName();\n\t\tconst persistPropertyName = dialogName in keyMap ? keyMap[dialogName as keyof typeof keyMap] : undefined;\n\n\t\tif (persistPropertyName) {\n\t\t\tlayout?.setProperty(persistPropertyName, true, true);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the dialog is persisted by examining the parent layout's persistence properties.\n\t *\n\t * @param {BaseSettingsDialog} dialog - The dialog to check for persistence status\n\t * @returns {boolean} True if the dialog is persisted (either settings dialog or content addition dialog), false otherwise\n\t *\n\t * @private\n\t */\n\tprotected _isDialogPersisted(dialog: BaseSettingsDialog): boolean {\n\t\tconst layout = dialog.getParent() as BaseLayout;\n\t\tif (!layout) return false;\n\n\t\treturn layout.getProperty(\"settingsDialogPersisted\") === true || layout.getProperty(\"contentAdditionDialogPersisted\") === true;\n\t}\n\n\t/**\n\t * Returns the KeyUser Changes made by user.\n\t *\n\t * @public\n\t */\n\tpublic getKeyUserChanges(): Array<IKeyUserChange> {\n\t\treturn this._keyuserChanges;\n\t}\n\n\t/**\n\t * Add Changes made by user in case of KeyUser Settings Panel.\n\t *\n\t * @public\n\t */\n\tpublic addKeyUserChanges(change: IKeyUserChange): void {\n\t\tthis._keyuserChanges.push(change);\n\t}\n\n\t/**\n\t * Clear all KeyUser Changes made by user.\n\t *\n\t * @public\n\t */\n\tpublic clearKeyUserChanges(): void {\n\t\tthis._keyuserChanges = [];\n\t}\n\tprotected addDragDropConfigTo(container: Table, dropHandler: (event: DropInfo$DropEvent) => void): void {\n\t\tcontainer\n\t\t\t.addDragDropConfig(\n\t\t\t\tnew DragDropInfo(`${container.getId()}--settingsDragDropConfig`, {\n\t\t\t\t\tsourceAggregation: \"items\",\n\t\t\t\t\ttargetAggregation: \"items\",\n\t\t\t\t\tdropPosition: dnd.DropPosition.On,\n\t\t\t\t\tdropLayout: dnd.DropLayout.Horizontal,\n\t\t\t\t\tdrop: dropHandler\n\t\t\t\t})\n\t\t\t)\n\t\t\t.attachBrowserEvent(\"keydown\", (event: KeyboardEvent) => {\n\t\t\t\tconst disableNavigation = event.metaKey || event.ctrlKey;\n\t\t\t\tvoid attachKeyboardHandler(event, disableNavigation, (dragDropEvent: DropInfo$DropEvent) => {\n\t\t\t\t\tdropHandler(dragDropEvent);\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/**\n\t * Retrieves the action buttons from the panel.\n\t *\n\t * @public\n\t * @returns {Button[]} array of action buttons.\n\t */\n\tpublic getActionButtons(): Button[] {\n\t\treturn this._actionButtonsCache.slice();\n\t}\n\n\t/**\n\t * Adds an action button to the panel.\n\t *\n\t * @public\n\t * @param {Button} button - The button to add.\n\t * @returns {BaseSettingsPanel} The instance of the panel for chaining.\n\t */\n\tpublic addActionButton(button: Button): BaseSettingsPanel {\n\t\tthis._actionButtonsCache.push(button);\n\t\tthis.addAggregation(\"actionButtons\", button);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inserts an action button at a specific index in the panel.\n\t *\n\t * @public\n\t * @param {Button} button - The button to insert.\n\t * @param {number} index - The index at which to insert the button.\n\t * @returns {BaseSettingsPanel} The instance of the panel for chaining.\n\t */\n\tpublic insertActionButton(button: Button, index: number): BaseSettingsPanel {\n\t\tthis._actionButtonsCache.splice(index, 0, button);\n\t\tthis.insertAggregation(\"actionButtons\", button, index);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes an action button from the panel.\n\t *\n\t * @public\n\t * @param {Button} button - The button to remove.\n\t * @returns {Button | null} The removed button or null if not found.\n\t */\n\tpublic removeActionButton(button: Button): Button | null {\n\t\tconst removedButton = this._actionButtonsCache.splice(this._actionButtonsCache.indexOf(button), 1);\n\t\tthis.removeAggregation(\"actionButtons\", button);\n\t\treturn removedButton[0] || null;\n\t}\n\n\t/**\n\t * Checks if the panel is supported. To be overridden by subclasses.\n\t *\n\t * @public\n\t * @async\n\t * @returns {Promise<boolean>} A promise that resolves to true if the panel is supported.\n\t */\n\tpublic async isSupported(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}