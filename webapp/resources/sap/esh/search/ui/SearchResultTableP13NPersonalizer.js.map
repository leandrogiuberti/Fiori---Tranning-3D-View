{"version":3,"file":"SearchResultTableP13NPersonalizer.js","names":["sap","ui","define","__i18n","P13NPopup","P13NPanel","Core","__ErrorHandler","_interopRequireDefault","obj","__esModule","default","i18n","ErrorHandler","SearchResultTablePersonalizer","model","table","p13nPanel","p13nPopup","resetPerformed","constructor","searchModel","this","initialize","createPopup","attachChange","updateOkButtonState","error","errorHandler","getInstance","onError","updateTableColumns","isReset","setTableColumns","getTableInitialColumns","p13NColumns","getP13nData","oldColumns","getTableColumns","newColumns","p13NColumn","oldColumn","p13NColumnName","name","visible","push","updateP13NColumns","isInitial","columns","map","column","label","setP13nData","showHeader","getId","title","getText","panels","warningText","reset","close","event","getParameter","update","addStyleClass","selectedCount","filter","col","length","okButtonId","okButton","byId","isEnabled","setEnabled","setTooltip","openDialog","open","destroyControllerAndDialog","destroyPanels","destroy"],"sources":["SearchResultTableP13NPersonalizer.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"./i18n\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport SearchResultTable from \"sap/esh/search/ui/controls/resultview/SearchResultTable\";\nimport P13NPopup from \"sap/m/p13n/Popup\";\nimport P13NPanel from \"sap/m/p13n/SelectionPanel\";\nimport Button from \"sap/m/Button\";\nimport Core from \"sap/ui/core/Core\";\n// import { TableColumnType } from \"./SearchResultTableColumnType\";\nimport { Column as TableColumn } from \"./SearchResultTableFormatter\";\nimport ErrorHandler from \"./error/ErrorHandler\";\n// import merge from \"sap/base/util/merge\";\n\nexport interface PersoState {\n    aColumns: Array<TableColumn>;\n    _persoSchemaVersion: \"p13n\";\n}\n\n// reference:\n// interface P13NColumn {\n//     name: string; // === TableColumn's p13NColumnName\n//     label: string;\n//     visible: boolean;\n// }\n\nexport default class SearchResultTablePersonalizer {\n    model: SearchModel;\n    table: SearchResultTable;\n    p13nPanel: P13NPanel;\n    p13nPopup: P13NPopup;\n    private resetPerformed: boolean = false;\n\n    constructor(searchModel: SearchModel) {\n        this.model = searchModel;\n    }\n\n    initialize(table: SearchResultTable): void {\n        try {\n            this.table = table;\n            if (!this.p13nPopup) {\n                this.createPopup();\n            }\n            this.p13nPanel.attachChange(() => {\n                this.resetPerformed = false;\n                this.updateOkButtonState();\n            });\n        } catch (error) {\n            const errorHandler = ErrorHandler.getInstance();\n            errorHandler.onError(error);\n        }\n    }\n\n    // update table columns by p13n popup columns (ordering and visibility)\n    private updateTableColumns(isReset: boolean): void {\n        if (isReset) {\n            this.model.setTableColumns(this.model.getTableInitialColumns(), true);\n        } else {\n            const p13NColumns = this.p13nPanel.getP13nData(false);\n            const oldColumns = this.model.getTableColumns(false);\n            const newColumns = [];\n            // loop p13NColumns, then loop oldColumns. Make sure the ordering is correct.\n            for (const p13NColumn of p13NColumns) {\n                for (const oldColumn of oldColumns) {\n                    if (oldColumn.p13NColumnName === p13NColumn.name) {\n                        oldColumn.visible = p13NColumn.visible;\n                        newColumns.push(oldColumn);\n                        break;\n                    }\n                }\n            }\n            this.model.setTableColumns(newColumns, true);\n        }\n    }\n\n    // update p13n popup columns by personalize state columns or initial columns (ordering and visibility)\n    private updateP13NColumns(isInitial: boolean): void {\n        const columns = isInitial ? this.model.getTableInitialColumns() : this.model.getTableColumns(false);\n\n        const p13NColumns = columns.map((column) => ({\n            name: column.p13NColumnName,\n            label: column.name,\n            visible: column.visible,\n        }));\n\n        this.p13nPanel.setP13nData(p13NColumns);\n    }\n\n    private createPopup(): void {\n        this.p13nPanel = new P13NPanel({ showHeader: false });\n\n        this.p13nPopup = new P13NPopup(this.table.getId() + \"-personalizer\", {\n            title: i18n.getText(\"personalizeTable\"),\n            panels: [this.p13nPanel],\n            warningText: i18n.getText(\"resetColumns\"),\n            reset: () => {\n                this.updateP13NColumns(true);\n                this.updateOkButtonState();\n                this.resetPerformed = true;\n            },\n            close: (event) => {\n                if (event.getParameter(\"reason\") === \"Ok\") {\n                    this.updateTableColumns(this.resetPerformed);\n                    this.table.update();\n                }\n                this.resetPerformed = false;\n            },\n        });\n\n        this.p13nPopup.addStyleClass(\"sapUshellSearchResultTablePersonalizationDialog\");\n    }\n\n    private updateOkButtonState(): void {\n        const p13NColumns = this.p13nPanel.getP13nData(false);\n        const selectedCount = p13NColumns.filter((col) => col.visible).length;\n\n        const okButtonId = this.table.getId() + \"-personalizer-confirmBtn\";\n        const okButton = Core.byId(okButtonId) as Button;\n        if (okButton) {\n            const isEnabled = selectedCount > 0;\n            okButton.setEnabled(isEnabled);\n            okButton.setTooltip(\n                isEnabled\n                    ? \"\" // No tooltip needed when enabled\n                    : i18n.getText(\"noColumnsSelectedTooltip\") // Tooltip when disabled\n            );\n        }\n    }\n\n    public openDialog(): void {\n        this.updateP13NColumns(false);\n        this.p13nPopup.open(null);\n        // update the ok button immediately after opening\n        this.updateOkButtonState();\n    }\n\n    public destroyControllerAndDialog(): void {\n        this.p13nPopup.destroyPanels();\n        this.p13nPopup.destroy();\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,6GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,sBAAAC,EAAAC,GAAA,OAAAA,KAAAC,mBAAAD,EAAAE,UAAA,YAAAF,EAAAE,QAAAF,CAAA,OAKOG,EAAIJ,EAAAL,GAAA,MASJU,EAAYL,EAAAD,GAeJ,MAAMO,EACjBC,MACAC,MACAC,UACAC,UACQC,eAA0B,MAElCC,YAAYC,GACRC,KAAKP,MAAQM,CACjB,CAEAE,WAAWP,GACP,IACIM,KAAKN,MAAQA,EACb,IAAKM,KAAKJ,UAAW,CACjBI,KAAKE,aACT,CACAF,KAAKL,UAAUQ,aAAa,KACxBH,KAAKH,eAAiB,MACtBG,KAAKI,uBAEb,CAAE,MAAOC,GACL,MAAMC,EAAef,EAAagB,cAClCD,EAAaE,QAAQH,EACzB,CACJ,CAGQI,mBAAmBC,GACvB,GAAIA,EAAS,CACTV,KAAKP,MAAMkB,gBAAgBX,KAAKP,MAAMmB,yBAA0B,KACpE,KAAO,CACH,MAAMC,EAAcb,KAAKL,UAAUmB,YAAY,OAC/C,MAAMC,EAAaf,KAAKP,MAAMuB,gBAAgB,OAC9C,MAAMC,EAAa,GAEnB,IAAK,MAAMC,KAAcL,EAAa,CAClC,IAAK,MAAMM,KAAaJ,EAAY,CAChC,GAAII,EAAUC,iBAAmBF,EAAWG,KAAM,CAC9CF,EAAUG,QAAUJ,EAAWI,QAC/BL,EAAWM,KAAKJ,GAChB,KACJ,CACJ,CACJ,CACAnB,KAAKP,MAAMkB,gBAAgBM,EAAY,KAC3C,CACJ,CAGQO,kBAAkBC,GACtB,MAAMC,EAAUD,EAAYzB,KAAKP,MAAMmB,yBAA2BZ,KAAKP,MAAMuB,gBAAgB,OAE7F,MAAMH,EAAca,EAAQC,IAAKC,IAAM,CACnCP,KAAMO,EAAOR,eACbS,MAAOD,EAAOP,KACdC,QAASM,EAAON,WAGpBtB,KAAKL,UAAUmC,YAAYjB,EAC/B,CAEQX,cACJF,KAAKL,UAAY,IAAIZ,EAAU,CAAEgD,WAAY,QAE7C/B,KAAKJ,UAAY,IAAId,EAAUkB,KAAKN,MAAMsC,QAAU,gBAAiB,CACjEC,MAAO3C,EAAK4C,QAAQ,oBACpBC,OAAQ,CAACnC,KAAKL,WACdyC,YAAa9C,EAAK4C,QAAQ,gBAC1BG,MAAOA,KACHrC,KAAKwB,kBAAkB,MACvBxB,KAAKI,sBACLJ,KAAKH,eAAiB,MAE1ByC,MAAQC,IACJ,GAAIA,EAAMC,aAAa,YAAc,KAAM,CACvCxC,KAAKS,mBAAmBT,KAAKH,gBAC7BG,KAAKN,MAAM+C,QACf,CACAzC,KAAKH,eAAiB,SAI9BG,KAAKJ,UAAU8C,cAAc,kDACjC,CAEQtC,sBACJ,MAAMS,EAAcb,KAAKL,UAAUmB,YAAY,OAC/C,MAAM6B,EAAgB9B,EAAY+B,OAAQC,GAAQA,EAAIvB,SAASwB,OAE/D,MAAMC,EAAa/C,KAAKN,MAAMsC,QAAU,2BACxC,MAAMgB,EAAWhE,EAAKiE,KAAKF,GAC3B,GAAIC,EAAU,CACV,MAAME,EAAYP,EAAgB,EAClCK,EAASG,WAAWD,GACpBF,EAASI,WACLF,EACM,GACA5D,EAAK4C,QAAQ,4BAE3B,CACJ,CAEOmB,aACHrD,KAAKwB,kBAAkB,OACvBxB,KAAKJ,UAAU0D,KAAK,MAEpBtD,KAAKI,qBACT,CAEOmD,6BACHvD,KAAKJ,UAAU4D,gBACfxD,KAAKJ,UAAU6D,SACnB,EACH,OAAAjE,CAAA","ignoreList":[]}