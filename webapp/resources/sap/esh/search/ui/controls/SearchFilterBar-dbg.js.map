{"version":3,"file":"SearchFilterBar-dbg.js","names":["sap","ui","define","__i18n","Text","Toolbar","ToolbarSpacer","sap_m_library","Icon","___sinaNexTS_sina_ComplexCondition","___sinaNexTS_sina_ComparisonOperator","___eventlogging_UserEvents","___sinaNexTS_sina_HierarchyDisplayType","__errors","___facets_FacetTypeUI","___sinaNexTS_sina_SimpleCondition","_interopRequireDefault","obj","__esModule","default","i18n","ToolbarDesign","ComplexCondition","ComparisonOperator","UserEventType","HierarchyDisplayType","errors","FacetTypeUI","SimpleCondition","SearchFilterBar","extend","renderer","apiVersion","constructor","_constructor","sId","settings","Toolbar.prototype.constructor.call","setProperty","Info","addStyleClass","filterFormatter","bind","filterText","getId","text","parts","path","formatter","tooltip","setMaxLines","addContent","resetButton","src","getText","_filterFormatter","rootCondition","facets","hasFilters","model","getModel","config","formatFilterBarText","_assembleFilterLabels","error","oError","ConfigurationExitError","applicationComponent","searchCompositeControl","getSearchCompositeControlInstanceByChildControl","errorHandler","onError","_formatFilterText","attributeFilters","sortConditions","i","conditions","length","complexCondition","attribute","getFirstAttribute","attributeMetadata","getProperty","dataSource","attributeMetadataMap","isHierarchy","hierarchyDisplayType","StaticHierarchyFacet","attributeFilter","attributeName","id","attributeLabel","attributeFilterValueLabels","push","j","filterCondition","label","_formatLabel","valueLabel","operator","result","map","join","labelFormatted","Bw","Ew","Co","_sortConditions","getAttribute","firstFilter","getIndex","list","value","element","clone","sort","complexCondition1","complexCondition2","attribute1","index1","attribute2","index2","sortValues","index","facet","facetType","Hierarchy","valueSortFunction","filter1","filter2","items","onAfterRendering","_onAfterRendering","oEvent","Toolbar.prototype.onAfterRendering.call","attachPress","eventLogger","logEvent","type","CLEAR_ALL_FILTERS","dataSourceKey","getDataSource","resetFilterByFilterConditions","document","querySelector","setAttribute"],"sources":["SearchFilterBar.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../i18n\";\nimport Text from \"sap/m/Text\";\nimport Toolbar, { $ToolbarSettings } from \"sap/m/Toolbar\";\nimport ToolbarSpacer from \"sap/m/ToolbarSpacer\";\nimport { ToolbarDesign } from \"sap/m/library\";\nimport Icon from \"sap/ui/core/Icon\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ComplexCondition } from \"../sinaNexTS/sina/ComplexCondition\";\nimport { ComparisonOperator } from \"../sinaNexTS/sina/ComparisonOperator\";\nimport { UserEventType } from \"../eventlogging/UserEvents\";\nimport { HierarchyDisplayType } from \"../sinaNexTS/sina/HierarchyDisplayType\";\nimport errors from \"../error/errors\";\nimport { FacetTypeUI } from \"./facets/FacetTypeUI\";\nimport Facet from \"../Facet\";\nimport { SimpleCondition } from \"../sinaNexTS/sina/SimpleCondition\";\n\ninterface $SearchFilterBarSettings extends $ToolbarSettings {\n    filterText: string;\n}\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchFilterBar extends Toolbar {\n    private filterText: Text;\n    private resetButton: Icon;\n\n    constructor(sId?: string, settings?: $SearchFilterBarSettings) {\n        super(sId, settings);\n\n        // blue bar\n        this.setProperty(\"design\", ToolbarDesign.Info);\n\n        this.addStyleClass(\"sapUshellSearchFilterContextualBar\");\n\n        // bind file formatter\n        this.filterFormatter = this.filterFormatter.bind(this);\n\n        // filter text string\n        this.filterText = new Text(this.getId() + \"-resetFilterText\", {\n            text: {\n                parts: [{ path: \"/uiFilter/rootCondition\" }, { path: \"/facets\" }],\n                formatter: this.filterFormatter,\n            },\n            tooltip: {\n                parts: [{ path: \"/uiFilter/rootCondition\" }, { path: \"/facets\" }],\n                formatter: this.filterFormatter,\n            },\n        }).addStyleClass(\"sapUshellSearchFilterText\");\n        this.filterText.setMaxLines(1);\n        this.addContent(this.filterText);\n\n        // filter middle space\n        this.addContent(new ToolbarSpacer());\n\n        // filter reset button\n        this.resetButton = new Icon(this.getId() + \"-resetFilterButton\", {\n            src: \"sap-icon://clear-filter\",\n            tooltip: i18n.getText(\"resetFilterButton_tooltip\"),\n        }).addStyleClass(\"sapUshellSearchFilterResetButton\");\n        this.addContent(this.resetButton);\n    }\n\n    filterFormatter(rootCondition: ComplexCondition, facets: Array<Facet>): string {\n        if (!rootCondition || !rootCondition.hasFilters()) {\n            return \"\";\n        }\n        const model = this.getModel() as SearchModel;\n        if (model.config.formatFilterBarText) {\n            // 1) exit\n            try {\n                return model.config.formatFilterBarText(this._assembleFilterLabels(rootCondition, facets));\n            } catch (error) {\n                const oError = new errors.ConfigurationExitError(\n                    \"formatFilterBarText\",\n                    model.config.applicationComponent,\n                    error\n                );\n                const searchCompositeControl = model.getSearchCompositeControlInstanceByChildControl(this);\n                searchCompositeControl?.errorHandler.onError(oError);\n                return this._formatFilterText(rootCondition, facets); // fallback default formatter\n            }\n        } else {\n            // 2) default formatter\n            return this._formatFilterText(rootCondition, facets);\n        }\n    }\n\n    _assembleFilterLabels(\n        rootCondition: ComplexCondition,\n        facets: Array<Facet>\n    ): Array<{ attributeName: string; attributeLabel: string; attributeFilterValueLabels: Array<string> }> {\n        const attributeFilters = [];\n        // sort filter values, use same order as in facets\n        rootCondition = this.sortConditions(rootCondition, facets);\n        // collect all filter values\n        for (let i = 0; i < rootCondition.conditions.length; ++i) {\n            const complexCondition = rootCondition.conditions[i] as ComplexCondition;\n            const model = this.getModel() as SearchModel;\n            const attribute = complexCondition.getFirstAttribute();\n            const attributeMetadata =\n                model.getProperty(\"/uiFilter\")?.dataSource.attributeMetadataMap[attribute];\n            if (\n                attributeMetadata &&\n                attributeMetadata.isHierarchy === true &&\n                attributeMetadata.hierarchyDisplayType === HierarchyDisplayType.StaticHierarchyFacet\n            ) {\n                continue;\n            }\n            const attributeFilter = {\n                attributeName: attributeMetadata?.id || attribute,\n                attributeLabel: \"\",\n                attributeFilterValueLabels: [],\n            };\n            attributeFilters.push(attributeFilter);\n            for (let j = 0; j < complexCondition.conditions.length; ++j) {\n                const filterCondition = complexCondition.conditions[j];\n                if (j === 0) {\n                    attributeFilter.attributeLabel = filterCondition.attributeLabel;\n                }\n                let label;\n                if (filterCondition instanceof SimpleCondition) {\n                    label = this._formatLabel(filterCondition.valueLabel, filterCondition.operator);\n                } else if (filterCondition instanceof ComplexCondition) {\n                    label = this._formatLabel(filterCondition.valueLabel);\n                }\n                attributeFilter.attributeFilterValueLabels.push(label);\n            }\n        }\n        return attributeFilters;\n    }\n\n    _formatFilterText(rootCondition: ComplexCondition, facets: Array<Facet>): string {\n        const attributeFilters = this._assembleFilterLabels(rootCondition, facets);\n        const result = attributeFilters.map(\n            (attributeFilter) =>\n                attributeFilter.attributeLabel +\n                \" (\" +\n                attributeFilter.attributeFilterValueLabels.join(\", \") +\n                \")\"\n        );\n        return i18n.getText(\"filtered_by\", [result.join(\", \")]);\n    }\n\n    _formatLabel(label: string, operator?: ComparisonOperator): string {\n        let labelFormatted;\n        switch (operator) {\n            case ComparisonOperator.Bw: // \"Bw\"\n                labelFormatted = label + \"*\";\n                break;\n            case ComparisonOperator.Ew: // \"Ew\"\n                labelFormatted = \"*\" + label;\n                break;\n            case ComparisonOperator.Co: // \"Co\"\n                labelFormatted = \"*\" + label + \"*\";\n                break;\n            default:\n                labelFormatted = label;\n                break;\n        }\n        return labelFormatted;\n    }\n\n    sortConditions(rootCondition: ComplexCondition, facets: Array<Facet>): ComplexCondition {\n        // cannot sort without facets\n        if (facets.length === 0) {\n            return rootCondition;\n        }\n        // helper: get attribute from a complex condition\n        const getAttribute = function (complexCondition) {\n            const firstFilter = complexCondition.conditions[0];\n            if (firstFilter.attribute) {\n                return firstFilter.attribute;\n            }\n            return firstFilter.conditions[0].attribute;\n        };\n        // helper get list index\n        const getIndex = function (list, attribute, value) {\n            for (let i = 0; i < list.length; ++i) {\n                const element = list[i];\n                if (element[attribute] === value) {\n                    return i;\n                }\n            }\n        };\n        // clone: we don't want to modify the original filter\n        rootCondition = rootCondition.clone();\n        // 1) sort complexConditons (each complexCondition holds the filters for a certain attribute)\n        rootCondition.conditions.sort(function (complexCondition1, complexCondition2) {\n            const attribute1 = getAttribute(complexCondition1);\n            const index1 = getIndex(facets, \"dimension\", attribute1);\n            const attribute2 = getAttribute(complexCondition2);\n            const index2 = getIndex(facets, \"dimension\", attribute2);\n            return index1 - index2;\n        });\n        // 2) sort filters within a complexConditon\n        const sortValues = function (complexCondition) {\n            const attribute = getAttribute(complexCondition);\n            const index = getIndex(facets, \"dimension\", attribute);\n            if (!index) {\n                return;\n            }\n            const facet = facets[index];\n            if (facet.facetType === FacetTypeUI.Hierarchy) {\n                return; // no sort for hierarchy\n            }\n            const valueSortFunction = function (filter1, filter2) {\n                return (\n                    getIndex(facet.items, \"label\", filter1.valueLabel) -\n                    getIndex(facet.items, \"label\", filter2.valueLabel)\n                );\n            };\n            complexCondition.conditions.sort(valueSortFunction);\n        };\n        for (let i = 0; i < rootCondition.conditions.length; ++i) {\n            const complexCondition = rootCondition.conditions[i];\n            sortValues(complexCondition);\n        }\n        return rootCondition;\n    }\n\n    onAfterRendering(oEvent): void {\n        super.onAfterRendering(oEvent);\n\n        // don't have model until after rendering\n        // attach press action\n        this.resetButton.attachPress(() => {\n            const model = this.getModel() as SearchModel;\n            model.eventLogger.logEvent({\n                type: UserEventType.CLEAR_ALL_FILTERS,\n                dataSourceKey: model.getDataSource().id,\n            });\n            model.resetFilterByFilterConditions(true);\n        });\n\n        // add aria label\n        const filterText = document.querySelector(\".sapUshellSearchFilterText\");\n        if (filterText) {\n            filterText.setAttribute(\"aria-label\", i18n.getText(\"filtered_by_aria_label\"));\n        }\n    }\n\n    static renderer = {\n        apiVersion: 2,\n    };\n}\n"],"mappings":"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","ignoreList":[]}