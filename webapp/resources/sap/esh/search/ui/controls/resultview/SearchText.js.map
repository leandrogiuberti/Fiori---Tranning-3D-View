{"version":3,"file":"SearchText.js","names":["sap","ui","define","Text","Icon","SearchHelper","SearchText","extend","renderer","apiVersion","render","rm","control","openStart","getId","class","getWrapping","tooltip","getTooltip_AsString","attr","openEnd","icon","getAggregation","renderControl","close","metadata","properties","maxLines","type","text","defaultValue","wrapping","aggregations","_text","multiple","constructor","_constructor","sId","settings","Text.prototype.constructor.call","this","init","_init","setAggregation","getProperty","addStyleClass","_addStyleClass","sStyleClass","setText","_setText","sText","setProperty","setMaxLines","_setMaxLines","iMaxLines","setWrapping","_setWrapping","bWrapping","setIcon","_setIcon","setTooltip","_setTooltip","sTooltip","onAfterRendering","_onAfterRendering","oEvent","Text.prototype.onAfterRendering.call","isDestroyed","iconDomRef","getDomRef","textDomRef","insertBefore","firstChild","boldTagUnescaper","calculateTooltipForwordEllipsis"],"sources":["SearchText.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport Text from \"sap/m/Text\";\nimport Icon from \"sap/ui/core/Icon\";\nimport * as SearchHelper from \"sap/esh/search/ui/SearchHelper\";\nimport { $TextSettings } from \"sap/m/Text\";\nimport Control from \"sap/ui/core/Control\";\nimport { MetadataOptions } from \"sap/ui/base/ManagedObject\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\nimport TooltipBase from \"sap/ui/core/TooltipBase\";\n\nexport interface SearchTextSettings extends $TextSettings {\n    icon?: Icon;\n}\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchText extends Text {\n    static readonly metadata: MetadataOptions = {\n        properties: {\n            maxLines: {\n                type: \"int\",\n            },\n            text: {\n                type: \"string\",\n                defaultValue: \"\",\n            },\n            wrapping: {\n                type: \"boolean\",\n                defaultValue: true,\n            },\n        },\n        aggregations: {\n            _text: {\n                type: \"sap.m.Text\",\n                multiple: false,\n            },\n            icon: {\n                type: \"sap.ui.core.Icon\",\n                multiple: false,\n            },\n        },\n    };\n\n    constructor(sId?: string, settings?: SearchTextSettings) {\n        super(sId, settings);\n    }\n\n    init(): void {\n        this.setAggregation(\n            \"_text\",\n            new Text(this.getId() + \"-Text\", {\n                text: this.getProperty(\"text\"),\n                maxLines: this.getProperty(\"maxLines\"),\n                wrapping: this.getProperty(\"wrapping\"),\n            }).addStyleClass(\"sapUshellSearchTextText\")\n        );\n    }\n\n    /**\n     * Assigns the given css class to the inner text control, because that's the way\n     * it worked before the control was refactored to be a composite control. Now\n     * an additional span element is added around the text control, see renderer method.\n     * @param sStyleClass name of the css class to be added\n     * @returns SearchText\n     */\n    addStyleClass(sStyleClass: string): this {\n        (this.getAggregation(\"_text\") as Text).addStyleClass(sStyleClass);\n        return this;\n    }\n\n    setText(sText: string): this {\n        this.setProperty(\"text\", sText);\n        (this.getAggregation(\"_text\") as Text).setText(sText);\n        return this;\n    }\n\n    setMaxLines(iMaxLines: int): this {\n        this.setProperty(\"maxLines\", iMaxLines);\n        (this.getAggregation(\"_text\") as Text).setMaxLines(iMaxLines);\n        return this;\n    }\n\n    setWrapping(bWrapping: boolean): this {\n        this.setProperty(\"wrapping\", bWrapping);\n        (this.getAggregation(\"_text\") as Text).setWrapping(bWrapping);\n        return this;\n    }\n\n    setIcon(icon: Icon): SearchText {\n        if (icon instanceof Icon) {\n            icon.addStyleClass(\"sapUshellSearchTextIcon\");\n            this.setAggregation(\"icon\", icon);\n        }\n        return this;\n    }\n\n    setTooltip(sTooltip?: string | TooltipBase): this {\n        (this.getAggregation(\"_text\") as Text).setTooltip(sTooltip);\n        return this;\n    }\n\n    onAfterRendering(oEvent): void {\n        super.onAfterRendering(oEvent);\n\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // move icon to the front of the text\n        const iconDomRef = (this.getAggregation(\"icon\") as Icon)?.getDomRef();\n        const textDomRef = (this.getAggregation(\"_text\") as Text)?.getDomRef() as HTMLElement;\n        if (iconDomRef) {\n            textDomRef.insertBefore(iconDomRef, textDomRef.firstChild);\n        }\n\n        // recover bold tag with the help of text() in a safe way\n        SearchHelper.boldTagUnescaper(textDomRef);\n\n        SearchHelper.calculateTooltipForwordEllipsis(textDomRef);\n    }\n\n    static renderer = {\n        apiVersion: 2,\n        render: (rm: RenderManager, control: SearchText) => {\n            rm.openStart(\"span\", control.getId());\n            rm.class(\"sapUshellSearchText\");\n            if (!control.getWrapping()) {\n                rm.class(\"sapUshellSearchText-nowrap\");\n            }\n            const tooltip = control.getTooltip_AsString();\n            if (tooltip) {\n                rm.attr(\"title\", tooltip);\n            }\n            rm.openEnd();\n            const icon = control.getAggregation(\"icon\") as Icon;\n            if (icon) {\n                rm.renderControl(icon as Icon);\n            }\n            rm.renderControl(<Control>control.getAggregation(\"_text\"));\n            rm.close(\"span\");\n        },\n    };\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,4EAAAC,EAAAC,EAAAC,GAAA,aAkBA,MAGqBC,EAAmBH,EAAII,OAAA,yCAyGjCC,SAAW,CACdC,WAAY,EACZC,OAAQA,CAACC,EAAmBC,KACxBD,EAAGE,UAAU,OAAQD,EAAQE,SAC7BH,EAAGI,MAAM,uBACT,IAAKH,EAAQI,cAAe,CACxBL,EAAGI,MAAM,6BACb,CACA,MAAME,EAAUL,EAAQM,sBACxB,GAAID,EAAS,CACTN,EAAGQ,KAAK,QAASF,EACrB,CACAN,EAAGS,UACH,MAAMC,EAAOT,EAAQU,eAAe,QACpC,GAAID,EAAM,CACNV,EAAGY,cAAcF,EACrB,CACAV,EAAGY,cAAuBX,EAAQU,eAAe,UACjDX,EAAGa,MAAM,UA1HDC,SAA4B,CACxCC,WAAY,CACRC,SAAU,CACNC,KAAM,OAEVC,KAAM,CACFD,KAAM,SACNE,aAAc,IAElBC,SAAU,CACNH,KAAM,UACNE,aAAc,OAGtBE,aAAc,CACVC,MAAO,CACHL,KAAM,aACNM,SAAU,OAEdb,KAAM,CACFO,KAAM,mBACNM,SAAU,SAKtBC,YAAW,SAAAC,EAACC,EAAcC,GACtBC,6BAAAC,KAAMH,EAAKC,EACf,EAEAG,KAAI,SAAAC,IACAF,KAAKG,eACD,QACA,IAAIxC,EAAKqC,KAAK1B,QAAU,QAAS,CAC7Be,KAAMW,KAAKI,YAAY,QACvBjB,SAAUa,KAAKI,YAAY,YAC3Bb,SAAUS,KAAKI,YAAY,cAC5BC,cAAc,2BAEzB,EASAA,cAAa,SAAAC,EAACC,GACTP,KAAKlB,eAAe,SAAkBuB,cAAcE,GACrD,OAAOP,IACX,EAEAQ,QAAO,SAAAC,EAACC,GACJV,KAAKW,YAAY,OAAQD,GACxBV,KAAKlB,eAAe,SAAkB0B,QAAQE,GAC/C,OAAOV,IACX,EAEAY,YAAW,SAAAC,EAACC,GACRd,KAAKW,YAAY,WAAYG,GAC5Bd,KAAKlB,eAAe,SAAkB8B,YAAYE,GACnD,OAAOd,IACX,EAEAe,YAAW,SAAAC,EAACC,GACRjB,KAAKW,YAAY,WAAYM,GAC5BjB,KAAKlB,eAAe,SAAkBiC,YAAYE,GACnD,OAAOjB,IACX,EAEAkB,QAAO,SAAAC,EAACtC,GACJ,GAAIA,aAAgBjB,EAAM,CACtBiB,EAAKwB,cAAc,2BACnBL,KAAKG,eAAe,OAAQtB,EAChC,CACA,OAAOmB,IACX,EAEAoB,WAAU,SAAAC,EAACC,GACNtB,KAAKlB,eAAe,SAAkBsC,WAAWE,GAClD,OAAOtB,IACX,EAEAuB,iBAAgB,SAAAC,EAACC,GACbC,kCAAA1B,KAAuByB,GAEvB,GAAIzB,KAAK2B,cAAe,CACpB,MACJ,CAGA,MAAMC,EAAc5B,KAAKlB,eAAe,SAAkB+C,YAC1D,MAAMC,EAAc9B,KAAKlB,eAAe,UAAmB+C,YAC3D,GAAID,EAAY,CACZE,EAAWC,aAAaH,EAAYE,EAAWE,WACnD,CAGAnE,EAAaoE,iBAAiBH,GAE9BjE,EAAaqE,gCAAgCJ,EACjD,IAAC,OAvGgBhE,CAAU","ignoreList":[]}