{"version":3,"file":"SearchResultList.js","names":["sap","ui","define","List","ResizeHandler","sap_m_library","____SelectionMode","ListMode","SelectionMode","SearchResultList","extend","renderer","apiVersion","constructor","_constructor","sId","options","List.prototype.constructor.call","this","addStyleClass","attachSelectionChange","oEvent","oModel","getModel","listItem","getParameter","setProperty","getBindingContext","getPath","updateMultiSelectionSelected","bindProperty","parts","path","formatter","multiSelectionEnabled","resultviewSelectionVisibility","resultviewSelectionMode","MultipleItems","None","OneItem","SingleSelectMaster","onAfterRendering","_onAfterRendering","args","prototype","apply","model","getProperty","enableSelectionMode","_prepareResizeHandler","resizeThresholds","windowWidthIndex","windowWidth","window","innerWidth","i","length","lastWindowWidthIndex","_resizeHandler","forceResize","currentWindowWidthIndex","aMyListItems","getItems","listItemContent","getContent","resizeEventHappened","register","resize","_resize","_enableSelectionMode","domRef","getDomRef","classList","add"],"sources":["SearchResultList.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport List, { $ListSettings } from \"sap/m/List\";\nimport SearchModel from \"../../SearchModel\";\nimport ResizeHandler from \"sap/ui/core/ResizeHandler\";\nimport { ListMode } from \"sap/m/library\";\nimport { SelectionMode } from \"../../SelectionMode\";\nimport ListItemBase from \"sap/m/ListItemBase\";\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchResultList extends List {\n    private _resizeHandler: (forceResize?: boolean) => void;\n\n    constructor(sId?: string, options?: $ListSettings) {\n        super(sId, options);\n        this.addStyleClass(\"searchResultList\");\n        this.attachSelectionChange((oEvent): void => {\n            // console.log(\"SELECTION: table, selectionChange event \");\n            // for list mode \"SingleSelectMaster\" -> select on row click\n            // -> thus checkbox change will not be fired, and we need to update selection here\n            const oModel = this.getModel() as SearchModel;\n            const listItem = oEvent.getParameter(\"listItem\") as ListItemBase;\n            oModel.setProperty(\n                `${listItem.getBindingContext().getPath()}/selected`,\n                oEvent.getParameter(\"selected\")\n            );\n            oModel.updateMultiSelectionSelected();\n        });\n        this.bindProperty(\"mode\", {\n            parts: [\n                { path: \"/multiSelectionEnabled\" },\n                { path: \"/resultviewSelectionVisibility\" },\n                { path: \"/config/resultviewSelectionMode\" },\n            ],\n            formatter: (\n                multiSelectionEnabled: boolean,\n                resultviewSelectionVisibility: boolean,\n                resultviewSelectionMode: SelectionMode\n            ): string => {\n                if (\n                    resultviewSelectionMode === SelectionMode.MultipleItems &&\n                    multiSelectionEnabled === true\n                ) {\n                    if (resultviewSelectionVisibility === true) {\n                        return ListMode.None; // result list item comes with its own checkbox\n                    } else {\n                        return ListMode.None; // see ColumnListItem, type=\"Navigation\"\n                    }\n                } else if (resultviewSelectionMode === SelectionMode.OneItem) {\n                    return ListMode.SingleSelectMaster;\n                } else {\n                    return ListMode.None;\n                }\n            },\n        });\n    }\n\n    onAfterRendering(...args: Array<any>): void {\n        // first let the original sap.m.List do its work\n        List.prototype.onAfterRendering.apply(this, args);\n\n        const model = this.getModel() as SearchModel;\n        const multiSelectionEnabled = model.getProperty(\"/multiSelectionEnabled\");\n        if (multiSelectionEnabled) {\n            this.enableSelectionMode();\n        }\n\n        this._prepareResizeHandler();\n    }\n\n    private _prepareResizeHandler(): void {\n        const resizeThresholds = [768, 1151];\n        const windowWidthIndex = () => {\n            const windowWidth = window.innerWidth;\n\n            if (windowWidth < resizeThresholds[0]) {\n                return 0;\n            }\n\n            for (let i = 0; i < resizeThresholds.length - 1; i++) {\n                if (windowWidth >= resizeThresholds[i] && windowWidth < resizeThresholds[i + 1]) {\n                    return i + 1;\n                }\n            }\n\n            return resizeThresholds.length;\n        };\n\n        let lastWindowWidthIndex = windowWidthIndex();\n        this._resizeHandler = (forceResize: boolean): void => {\n            const currentWindowWidthIndex = windowWidthIndex();\n            if (currentWindowWidthIndex != lastWindowWidthIndex || forceResize) {\n                lastWindowWidthIndex = currentWindowWidthIndex;\n                const aMyListItems = this.getItems();\n                for (const listItem of aMyListItems) {\n                    const listItemContent = (listItem as any).getContent() as any;\n                    if (listItemContent?.length > 0) {\n                        if (typeof listItemContent[0]?.resizeEventHappened === \"function\") {\n                            listItemContent[0]?.resizeEventHappened();\n                        }\n                    }\n                }\n            }\n        };\n\n        ResizeHandler.register(this, () => {\n            this._resizeHandler();\n        });\n    }\n\n    public resize() {\n        if (typeof this._resizeHandler !== \"undefined\") {\n            this._resizeHandler(true /* forceResize */);\n        }\n    }\n\n    public enableSelectionMode(): void {\n        const domRef = this.getDomRef();\n        if (domRef && domRef.classList) {\n            domRef.classList.add(\"sapUshellSearchResultList-ShowMultiSelection\");\n        }\n    }\n\n    static renderer = {\n        apiVersion: 2,\n    };\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,0FAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAQSC,EAAQF,EAAA,kBACRG,EAAaF,EAAA,iBAGtB,MAGqBG,EAAyBN,EAAIO,OAAA,+CAiHvCC,SAAW,CACdC,WAAY,GA/GhBC,YAAW,SAAAC,EAACC,EAAcC,GACtBC,6BAAAC,KAAMH,EAAKC,GACXE,KAAKC,cAAc,oBACnBD,KAAKE,sBAAuBC,IAIxB,MAAMC,EAASJ,KAAKK,WACpB,MAAMC,EAAWH,EAAOI,aAAa,YACrCH,EAAOI,YACH,GAAGF,EAASG,oBAAoBC,qBAChCP,EAAOI,aAAa,aAExBH,EAAOO,iCAEXX,KAAKY,aAAa,OAAQ,CACtBC,MAAO,CACH,CAAEC,KAAM,0BACR,CAAEA,KAAM,kCACR,CAAEA,KAAM,oCAEZC,UAAWA,CACPC,EACAC,EACAC,KAEA,GACIA,IAA4B5B,EAAc6B,eAC1CH,IAA0B,KAC5B,CACE,GAAIC,IAAkC,KAAM,CACxC,OAAO5B,EAAS+B,IACpB,KAAO,CACH,OAAO/B,EAAS+B,IACpB,CACJ,MAAO,GAAIF,IAA4B5B,EAAc+B,QAAS,CAC1D,OAAOhC,EAASiC,kBACpB,KAAO,CACH,OAAOjC,EAAS+B,IACpB,IAGZ,EAEAG,iBAAgB,SAAAC,KAAIC,GAEhBxC,EAAKyC,UAAUH,iBAAiBI,MAAM3B,KAAMyB,GAE5C,MAAMG,EAAQ5B,KAAKK,WACnB,MAAMW,EAAwBY,EAAMC,YAAY,0BAChD,GAAIb,EAAuB,CACvBhB,KAAK8B,qBACT,CAEA9B,KAAK+B,uBACT,EAEQA,sBAAqB,SAAAA,IACzB,MAAMC,EAAmB,CAAC,IAAK,MAC/B,MAAMC,EAAmBA,KACrB,MAAMC,EAAcC,OAAOC,WAE3B,GAAIF,EAAcF,EAAiB,GAAI,CACnC,OAAO,CACX,CAEA,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAiBM,OAAS,EAAGD,IAAK,CAClD,GAAIH,GAAeF,EAAiBK,IAAMH,EAAcF,EAAiBK,EAAI,GAAI,CAC7E,OAAOA,EAAI,CACf,CACJ,CAEA,OAAOL,EAAiBM,QAG5B,IAAIC,EAAuBN,IAC3BjC,KAAKwC,eAAkBC,IACnB,MAAMC,EAA0BT,IAChC,GAAIS,GAA2BH,GAAwBE,EAAa,CAChEF,EAAuBG,EACvB,MAAMC,EAAe3C,KAAK4C,WAC1B,IAAK,MAAMtC,KAAYqC,EAAc,CACjC,MAAME,EAAmBvC,EAAiBwC,aAC1C,GAAID,GAAiBP,OAAS,EAAG,CAC7B,UAAWO,EAAgB,IAAIE,sBAAwB,WAAY,CAC/DF,EAAgB,IAAIE,qBACxB,CACJ,CACJ,CACJ,GAGJ7D,EAAc8D,SAAShD,KAAM,KACzBA,KAAKwC,kBAEb,EAEOS,OAAM,SAAAC,IACT,UAAWlD,KAAKwC,iBAAmB,YAAa,CAC5CxC,KAAKwC,eAAe,KACxB,CACJ,EAEOV,oBAAmB,SAAAqB,IACtB,MAAMC,EAASpD,KAAKqD,YACpB,GAAID,GAAUA,EAAOE,UAAW,CAC5BF,EAAOE,UAAUC,IAAI,+CACzB,CACJ,IAAC,OA/GgBhE,CAAgB","ignoreList":[]}