{"version":3,"file":"SearchResultTable.js","names":["sap","ui","define","__i18n","__SearchResultTableFormatter","__SearchResultTableP13NPersonalizer","Table","ColumnResizer","Column","ColumnListItem","CustomListItem","____SearchResultTableColumnType","__SearchText","__SearchLink","Element","sap_m_library","HBox","Button","Icon","____sinaNexTS_sina_NavigationTarget","ActionSheet","ManagedObject","merge","Log","__ErrorHandler","FlexItemData","__UIEvents","EventBus","____SelectionMode","_interopRequireDefault","obj","__esModule","default","i18n","SearchResultTableFormatter","SearchResultTableP13NPersonalizer","TableColumnType","SearchText","SearchLink","ListMode","ListType","PlacementType","PopinDisplay","PopinLayout","NavigationTarget","ErrorHandler","UIEvents","SelectionMode","SearchResultTable","extend","renderer","apiVersion","constructor","_constructor","sId","options","Table.prototype.constructor.call","this","useStableIds","log","getLogger","errorHandler","getInstance","assembleTable","_assembleTable","oModel","bindProperty","parts","path","formatter","multiSelectionEnabled","resultviewSelectionMode","resultviewSelectionVisibility","MultipleItems","MultiSelect","None","OneItem","SingleSelectMaster","setProperty","attachSelectionChange","oEvent","listItem","getParameter","updateMultiSelectionSelected","formatVisible","bind","setNoDataText","getText","update","config","FF_resizeResultTableColumns","setupColumnResizable","addStyleClass","_formatVisible","resultViewType","count","visible","getModel","searchResultTablePersonalization","tablePersonalizer","initialize","_update","getBinding","bindTableColumns","bindTableItems","updateBindings","_bindTableColumns","bindAggregation","factory","column","getStableId","header","text","wrapping","width","getHeader","_bindTableItems","id","bData","assembleTableItems","_assembleTableItems","getObject","type","sortCellsInRows","getPath","assembleTableMainItem","_assembleTableMainItem","columnListItem","selected","resultviewMasterDetailMode","newType","pressFunction","notifySubscribers","ESHShowResultDetail","publish","Navigation","attachPress","Active","detachPress","Inactive","customItemStyleClass","subPath","searchResultTableCell","TITLE","titleUrl","hasTargetFunction","enabled","titleNavigation","targetFunction","targetUrl","length","titleLink","titleIconUrl","navigationTarget","setIcon","getAggregation","oIcon","src","escapeSettingsValue","isHighlighted","returnObject","titleInfoIconUrl","dynamicTooltip","titleInfoIconTooltip","titleInfoIcon","tooltip","setLayoutData","growFactor","minWidth","items","layoutData","justifyContent","fitContainer","RELATED_APPS","relatedAppsButton","icon","press","oldActionSheet","getElementById","getId","destroy","navigationObjects","navigationButtons","navigationButton","pressButton","event","navigationObject","performNavigation","i","destroyControl","push","actionSheet","buttons","placement","Auto","attachAfterClose","openBy","defaultNavigationTarget","attributeLink","setNavigationTarget","setText","value","EXTEND","extendTableColumn","bindingFunction","e","onError","cell","cellIcon","_sortCellsInRows","rowPath","rows","row","getProperty","cells","getSortedCells","_getSortedCells","sortedCells","columns","getTableColumns","p13NColumnName","_setupColumnResizable","that","columnResizer","attachColumnResize","setTimeout","saveTableColumns","addDependent","setupPopin","_setupPopin","setPopinLayout","Block","visibleCloumns","getColumns","forEach","setDemandPopin","setPopinDisplay","Inline","getVisible","setMinScreenWidth","setupColumnsAbsoluteWidth","_setupColumnsAbsoluteWidth","domRef","getDomRef","table","querySelector","tableWidth","offsetWidth","undefined","selectBoxWidth","selCol","searchResultTableFormatter","absoluteColumnWidthSum","visibleColumnsWithRelativeWidth","widthInPixel","getColumnWidthInPixel","defaultColumnWidth","borderWidth","singleWidth","Math","trunc","setTableColumns","_getStableId","parentId","postfixId","separator","_destroyControl","control","onBeforeRendering","_onBeforeRendering","onAfterRendering","_onAfterRendering","noDataCell","setAttribute","tableTitleRow","getSearchCompositeControlInstanceByChildControl","countBreadcrumbsHiddenElement"],"sources":["SearchResultTable.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../../i18n\";\nimport SearchModel from \"../../SearchModel\";\nimport SearchResultTableFormatter, {\n    Cell,\n    Row,\n    Column as FormattedColumn,\n} from \"../../SearchResultTableFormatter\";\nimport SearchResultTableP13NPersonalizer from \"../../SearchResultTableP13NPersonalizer\";\nimport Table, { $TableSettings } from \"sap/m/Table\";\nimport ColumnResizer from \"sap/m/plugins/ColumnResizer\";\nimport Column from \"sap/m/Column\";\nimport ColumnListItem from \"sap/m/ColumnListItem\";\nimport CustomListItem from \"sap/m/CustomListItem\";\nimport { TableColumnType } from \"../../SearchResultTableColumnType\";\nimport SearchText from \"./SearchText\";\nimport SearchLink from \"../SearchLink\";\nimport Element from \"sap/ui/core/Element\";\nimport { ListMode, ListType, PlacementType, PopinDisplay, PopinLayout } from \"sap/m/library\";\nimport HBox from \"sap/m/HBox\";\nimport Button from \"sap/m/Button\";\nimport Icon from \"sap/ui/core/Icon\";\nimport { NavigationTarget } from \"../../sinaNexTS/sina/NavigationTarget\";\nimport ActionSheet from \"sap/m/ActionSheet\";\nimport Event from \"sap/ui/base/Event\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Context from \"sap/ui/model/Context\";\nimport merge from \"sap/base/util/merge\";\nimport Log from \"sap/base/Log\";\nimport ErrorHandler from \"../../error/ErrorHandler\";\nimport FlexItemData from \"sap/m/FlexItemData\";\nimport UIEvents from \"../../UIEvents\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport { SelectionMode } from \"../../SelectionMode\";\nimport { ListBase$SelectionChangeEvent } from \"sap/m/ListBase\";\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\n\nexport default class SearchResultTable extends Table {\n    tablePersonalizer: SearchResultTableP13NPersonalizer;\n    private useStableIds = true;\n    private log = Log.getLogger(\"sap.esh.search.ui.controls.resultview.SearchResultTable\");\n    private errorHandler = ErrorHandler.getInstance();\n\n    static renderer = {\n        apiVersion: 2,\n    };\n\n    constructor(sId?: string, options?: $TableSettings) {\n        super(sId, options);\n    }\n\n    public assembleTable(oModel: SearchModel): void {\n        this.bindProperty(\"mode\", {\n            parts: [\n                { path: \"/multiSelectionEnabled\" },\n                { path: \"/config/resultviewSelectionMode\" },\n                { path: \"/resultviewSelectionVisibility\" },\n            ],\n            formatter: (\n                multiSelectionEnabled: boolean,\n                resultviewSelectionMode: string,\n                resultviewSelectionVisibility: boolean\n            ): string => {\n                if (\n                    multiSelectionEnabled === true ||\n                    resultviewSelectionMode === SelectionMode.MultipleItems\n                ) {\n                    if (resultviewSelectionVisibility === true) {\n                        return ListMode.MultiSelect;\n                    } else {\n                        return ListMode.None; // see ColumnListItem, type=\"Navigation\"\n                    }\n                } else if (resultviewSelectionMode === SelectionMode.OneItem) {\n                    if (resultviewSelectionVisibility === true) {\n                        return ListMode.SingleSelectMaster;\n                    } else {\n                        return ListMode.None;\n                    }\n                } else {\n                    return ListMode.None;\n                }\n            },\n        });\n        this.setProperty(\"rememberSelections\", false);\n        /* this.bindProperty(\"includeItemInSelection\", {\n            parts: [{ path: \"/config/resultviewSelectionMode\" }],\n            formatter: (resultviewSelectionMode: SelectionMode): boolean =>\n                resultviewSelectionMode === SelectionMode.SingleSelect ||\n                    resultviewSelectionMode === SelectionMode.SingleSelectMaster,\n        }); */\n        this.attachSelectionChange((oEvent: ListBase$SelectionChangeEvent): void => {\n            // console.log(\"SELECTION: table, selectionChange event \");\n            // for list mode \"SingleSelectMaster\" -> select on row click\n            // -> thus checkbox change will not be fired, and we need to update selection here\n            const listItem = oEvent.getParameter(\"listItem\") as ColumnListItem;\n            listItem.setProperty(\n                \"selected\",\n                oEvent.getParameter(\"selected\"),\n                true // no re-rendering needed, change originates in HTML\n            );\n            oModel.updateMultiSelectionSelected();\n        });\n        this.bindProperty(\"visible\", {\n            parts: [{ path: \"/resultViewType\" }, { path: \"/count\" }],\n            formatter: this.formatVisible.bind(this),\n        });\n        this.setProperty(\"sticky\", [\"ColumnHeaders\"]);\n        this.setNoDataText(i18n.getText(\"noCloumnsSelected\"));\n\n        this.update();\n\n        // this.setFixedLayout(false);\n        if (oModel.config?.FF_resizeResultTableColumns === true) {\n            this.setupColumnResizable();\n            // this.setupColumnsAbsoluteWidth(); -> need table width in run time, call in onAfterRendering\n            this.addStyleClass(\"sapElisa-search-result-table-resizable\");\n        } else {\n            // this.setAutoPopinMode(true); // not working\n            // this.setupPopin(); -> need set setMinScreenWidth in run time, call in onAfterRendering\n            this.addStyleClass(\"sapElisa-search-result-table-might-popin\");\n        }\n\n        this.addStyleClass(\"sapElisa-search-result-table\");\n    }\n\n    private formatVisible(resultViewType: string, count: number): boolean {\n        const visible = resultViewType === \"searchResultTable\" && count !== 0;\n        if (visible && (this.getModel() as SearchModel)?.config?.searchResultTablePersonalization !== false) {\n            if (!this.tablePersonalizer) {\n                this.tablePersonalizer = new SearchResultTableP13NPersonalizer(\n                    this.getModel() as SearchModel\n                );\n            }\n            this.tablePersonalizer.initialize(this);\n        }\n        return visible;\n    }\n\n    public update() {\n        //TODO: remove it and test\n        if (!this.getBinding(\"columns\")) {\n            this.bindTableColumns();\n        }\n        //TODO: remove it and test\n        if (!this.getBinding(\"items\")) {\n            this.bindTableItems();\n        }\n\n        if (this.getModel()) {\n            (this.getModel() as SearchModel).updateBindings(true);\n        }\n    }\n\n    private bindTableColumns(): void {\n        this.bindAggregation(\"columns\", {\n            path: \"/tableColumns\",\n            factory: (sId: string /*, oContext: any*/) => {\n                const column = new Column(this.getStableId(sId, \"column\"), {\n                    header: new SearchText(this.getStableId(sId, \"headerLabel\"), {\n                        text: \"{name}\",\n                        wrapping: false,\n                    }),\n                    visible: \"{visible}\",\n                    width: \"{width}\",\n                });\n                column.getHeader().addStyleClass(\"sapUshellSearchResultListItem-MightOverflow\");\n                return column;\n            },\n        });\n    }\n\n    private bindTableItems(): void {\n        this.bindAggregation(\"items\", {\n            path: \"/tableRows\",\n            factory: (id: string, bData: Context) => {\n                return this.assembleTableItems(id, bData);\n            },\n        });\n    }\n\n    assembleTableItems(id: string, bData): ColumnListItem | CustomListItem {\n        // footer item\n        if (bData.getObject().type === \"footer\") {\n            return new CustomListItem(this.getStableId(id, \"item-footer\"), {\n                visible: false,\n            });\n        }\n        // body item\n        this.sortCellsInRows(bData.getPath()); // sort cells of current row ONLY\n        return this.assembleTableMainItem(id, bData);\n    }\n\n    assembleTableMainItem(id: string, bData): ColumnListItem {\n        const oModel = this.getModel() as SearchModel;\n        const columnListItem = new ColumnListItem(this.getStableId(id, \"item\"), {\n            selected: { path: \"selected\" },\n        }).addStyleClass(\"sapUshellSearchTable\");\n        columnListItem.bindProperty(\"type\", {\n            parts: [\n                { path: \"/config/resultviewMasterDetailMode\" },\n                { path: \"/config/resultviewSelectionMode\" },\n            ],\n            formatter: (resultviewMasterDetailMode: string, resultviewSelectionMode: SelectionMode) => {\n                let newType;\n                const pressFunction = (oEvent): void => {\n                    // notify subscribers\n                    oModel.notifySubscribers(UIEvents.ESHShowResultDetail);\n                    EventBus.getInstance().publish(UIEvents.ESHShowResultDetail, oEvent);\n                };\n                if (resultviewMasterDetailMode) {\n                    newType = ListType.Navigation;\n                    columnListItem.attachPress(pressFunction.bind(this));\n                } else if (resultviewSelectionMode === SelectionMode.OneItem) {\n                    newType = ListType.Active;\n                    columnListItem.detachPress(pressFunction);\n                } else {\n                    newType = ListType.Inactive;\n                    columnListItem.detachPress(pressFunction);\n                }\n                return newType;\n            },\n        });\n\n        if (bData.getObject().customItemStyleClass) {\n            columnListItem.addStyleClass(bData.getObject().customItemStyleClass);\n        }\n        columnListItem.bindAggregation(\"cells\", {\n            path: \"cells\",\n            factory: (subPath: string, bData) => {\n                const searchResultTableCell = bData.getObject() as Cell;\n                if (searchResultTableCell.type === TableColumnType.TITLE) {\n                    // build title cell\n                    let titleUrl = \"\";\n                    let hasTargetFunction = false;\n                    let enabled = true;\n                    const titleNavigation: NavigationTarget = searchResultTableCell.titleNavigation;\n                    if (titleNavigation instanceof NavigationTarget) {\n                        hasTargetFunction = typeof titleNavigation.targetFunction === \"function\";\n                        titleUrl = titleNavigation.targetUrl;\n                    }\n                    if (\n                        (typeof titleUrl !== \"string\" || titleUrl.length === 0) &&\n                        hasTargetFunction === false\n                    ) {\n                        enabled = false;\n                    }\n                    let titleLink;\n                    const titleIconUrl = searchResultTableCell.titleIconUrl;\n                    if (titleNavigation) {\n                        titleLink = new SearchLink(this.getStableId(subPath, \"link\"), {\n                            navigationTarget: titleNavigation,\n                            text: { path: \"value\" },\n                            wrapping: false,\n                        });\n                        titleLink.setIcon(searchResultTableCell.titleIconUrl);\n                    } else {\n                        titleLink = new SearchText(this.getStableId(subPath, \"link\"), {\n                            text: { path: \"value\" },\n                            wrapping: false,\n                        });\n                        if (titleIconUrl && !((titleLink.getAggregation(\"icon\") as Icon) instanceof Icon)) {\n                            const oIcon = new Icon(this.getStableId(subPath, \"icon\"), {\n                                src: ManagedObject.escapeSettingsValue(titleIconUrl),\n                            });\n                            titleLink.setIcon(oIcon);\n                        }\n                    }\n                    titleLink.addStyleClass(\"sapUshellSearchResultListItem-MightOverflow\");\n                    titleLink.addStyleClass(\"sapUshellSearchTableTitleLink\");\n                    if (searchResultTableCell.isHighlighted) {\n                        titleLink.addStyleClass(\"sapUshellSearchResultItem-AttributeValueHighlighted\");\n                    }\n                    let returnObject: SearchLink | SearchText | HBox = titleLink;\n                    const titleInfoIconUrl = searchResultTableCell.titleInfoIconUrl;\n                    const dynamicTooltip =\n                        searchResultTableCell.titleInfoIconTooltip &&\n                        searchResultTableCell.titleInfoIconTooltip.length\n                            ? searchResultTableCell.titleInfoIconTooltip\n                            : i18n.getText(\"collectionShared\"); // fallback to shared tooltip\n                    if (titleInfoIconUrl) {\n                        const titleInfoIcon = new Icon(this.getStableId(subPath, \"infoIcon\"), {\n                            src: ManagedObject.escapeSettingsValue(titleInfoIconUrl),\n                            tooltip: dynamicTooltip,\n                        }).addStyleClass(\"sapUshellSearchTableTitleInfoIcon\");\n                        if (!enabled) {\n                            titleInfoIcon.addStyleClass(\"sapUshellSearchTableTitleInfoIconDisabled\");\n                        }\n\n                        // titleInfoIcon is aligned to the right of the HBox\n                        titleLink.setLayoutData(new FlexItemData({ growFactor: 1, minWidth: \"0px\" }));\n                        titleInfoIcon.setLayoutData(new FlexItemData({ growFactor: 0, minWidth: \"0px\" }));\n                        returnObject = new HBox(this.getStableId(subPath, \"titleContainer\"), {\n                            items: [\n                                titleLink,\n                                new HBox({\n                                    items: [titleInfoIcon],\n                                    layoutData: new FlexItemData({ growFactor: 1 }), // Spacer to push titleInfoIcon to the right\n                                    justifyContent: \"End\", // Align titleInfoIcon to the right within the spacer\n                                }),\n                            ],\n                            fitContainer: true,\n                            width: \"100%\",\n                            justifyContent: \"Start\", // Align titleLink to the start of the HBox\n                        });\n\n                        // titleInfoIcon follows titleLink directly\n                        // titleLink.setLayoutData(new FlexItemData({ growFactor: 0, minWidth: \"0px\" }));\n                        // titleInfoIcon.setLayoutData(new FlexItemData({ growFactor: 1, minWidth: \"0px\" }));\n\n                        // returnObject = new HBox(this.getStableId(subPath, \"titleContainer\"), {\n                        //     items: [titleLink, titleInfoIcon],\n                        //     fitContainer: true,\n                        //     width: \"100%\",\n                        //     justifyContent: \"Start\",\n                        // });\n                    }\n                    return returnObject;\n                }\n\n                // build related objects:\n                // 1. button to open action sheet: relAppsButton\n                // 2. action sheet: relAppsActionSheet\n                // 3. navigation buttons in action sheet: navigationButton\n                if (searchResultTableCell.type === TableColumnType.RELATED_APPS) {\n                    const relatedAppsButton = new Button(this.getStableId(subPath, \"relAppsButton\"), {\n                        icon: \"sap-icon://action\",\n                        tooltip: i18n.getText(\"intents\"),\n                        press: () => {\n                            // destroy old action sheet\n                            const oldActionSheet = Element.getElementById(\n                                this.getStableId(relatedAppsButton.getId(), \"relAppsActionSheet\")\n                            ) as ActionSheet;\n                            if (oldActionSheet) {\n                                oldActionSheet.destroy();\n                                return;\n                            }\n\n                            // related app navigation buttons\n                            const navigationObjects: Array<NavigationTarget> =\n                                searchResultTableCell.navigationObjects;\n                            const navigationButtons = [];\n                            let navigationButton;\n                            const pressButton = (event: Event, navigationObject: NavigationTarget) => {\n                                if (navigationObject instanceof NavigationTarget) {\n                                    navigationObject.performNavigation({ event: event });\n                                }\n                            };\n                            for (let i = 0; i < navigationObjects.length; i++) {\n                                const navigationObject: NavigationTarget = navigationObjects[i];\n                                this.destroyControl(this.getStableId(subPath, `navButton${i}`)); // find a better solution\n                                navigationButton = new Button(this.getStableId(subPath, `navButton${i}`), {\n                                    text: ManagedObject.escapeSettingsValue(navigationObject?.text),\n                                    tooltip: ManagedObject.escapeSettingsValue(navigationObject?.text),\n                                });\n                                navigationButton.attachPress(navigationObject, pressButton);\n                                navigationButtons.push(navigationButton);\n                            }\n\n                            // related app pop over\n                            const actionSheet = new ActionSheet(\n                                this.getStableId(relatedAppsButton.getId(), \"relAppsActionSheet\"),\n                                {\n                                    buttons: navigationButtons,\n                                    placement: PlacementType.Auto,\n                                }\n                            );\n                            actionSheet.attachAfterClose(() => {\n                                actionSheet.destroy();\n                            });\n                            actionSheet.openBy(relatedAppsButton);\n                        },\n                    });\n                    relatedAppsButton.addStyleClass(\"sapElisaSearchTableRelatedAppsButton\"); // for test purposes\n                    return relatedAppsButton;\n                }\n\n                // build cell with default navigation\n                const navigationTarget = searchResultTableCell.defaultNavigationTarget;\n                if (navigationTarget instanceof NavigationTarget) {\n                    const attributeLink = new SearchLink(this.getStableId(subPath, \"attrLink\"), {\n                        navigationTarget: null,\n                        wrapping: false,\n                        tooltip: ManagedObject.escapeSettingsValue(searchResultTableCell.tooltip || \"\"), // preserve SearchResultFormatter defined tooltip (hierarchical attribute of DSP)\n                    });\n                    // lazy loading because of potential {} in the href will be interpreted as binding path by UI5\n                    attributeLink.setNavigationTarget(navigationTarget);\n                    attributeLink.setText(searchResultTableCell.value);\n                    attributeLink.addStyleClass(\"sapUshellSearchResultListItem-MightOverflow\");\n                    attributeLink.setIcon(searchResultTableCell.icon);\n                    return attributeLink;\n                }\n\n                if (searchResultTableCell.type === TableColumnType.EXTEND) {\n                    // 'extendTableColumn' deprecated as of version 1.141\n                    try {\n                        return oModel.config.extendTableColumn.bindingFunction(searchResultTableCell); // ToDo\n                    } catch (e) {\n                        this.errorHandler.onError(e);\n                    }\n                }\n\n                // build other cells:\n                // TableColumnType.TITLE_DESCRIPTION\n                // TableColumnType.DETAIL\n                const cell = new SearchText(this.getStableId(subPath, \"searchText\"), {\n                    text: { path: \"value\" },\n                    wrapping: false,\n                }).addStyleClass(\"sapUshellSearchResultListItem-MightOverflow\");\n\n                if (searchResultTableCell.icon) {\n                    const cellIcon = new Icon(this.getStableId(subPath, \"cellIcon\"), {\n                        src: ManagedObject.escapeSettingsValue(searchResultTableCell.icon),\n                    });\n                    cell.setIcon(cellIcon);\n                }\n\n                if (searchResultTableCell.isHighlighted) {\n                    cell.addStyleClass(\"sapUshellSearchResultItem-AttributeValueHighlighted\");\n                }\n                return cell;\n            },\n        });\n\n        return columnListItem;\n    }\n\n    private sortCellsInRows(rowPath?: string): void {\n        const oModel = this.getModel() as SearchModel;\n        let rows;\n        if (rowPath) {\n            const row = [oModel.getProperty(rowPath)][0] as Row;\n            row.cells = this.getSortedCells(row.cells);\n            oModel.setProperty(rowPath, row);\n        } else {\n            rows = oModel.getProperty(\"/tableRows\");\n            for (const row of rows) {\n                row.cells = this.getSortedCells(row.cells);\n            }\n            oModel.setProperty(\"/tableRows\", rows);\n        }\n    }\n\n    private getSortedCells(cells: Array<Cell>): Array<Cell> {\n        const sortedCells = [] as Array<Cell>;\n        const columns = (this.getModel() as SearchModel).getTableColumns(false);\n        for (const column of columns) {\n            for (const cell of cells) {\n                if (column.p13NColumnName === cell.p13NColumnName) {\n                    sortedCells.push(cell);\n                    break;\n                }\n            }\n        }\n        return sortedCells;\n    }\n\n    private setupColumnResizable(): void {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        // that.setFixedLayout(false);\n        const columnResizer = new ColumnResizer();\n        columnResizer.attachColumnResize(() => {\n            /*  Bug: \n                    step 1. table has 2 columns, 2nd column has 100% width.\n                    step 2. resize 2nd column from right side (search UI right side boundary), set column width to 20 pixcel.\n                    step 3. reload UI, 2nd column has old 100% width, 20 pixcel width expected.\n                    Reason: ColumnResize event is triggered before new width set to column. New width is not saved. \n                    workaround: delay saving width.\n                */\n            setTimeout(function () {\n                (that.getModel() as SearchModel).saveTableColumns(\n                    (that.getModel() as SearchModel).getTableColumns(false)\n                );\n            }, 500);\n        });\n        that.addDependent(columnResizer);\n    }\n\n    private setupPopin(): void {\n        const oModel = this.getModel() as SearchModel;\n        // check !oModel.config?.FF_resizeResultTableColumns before calling this function\n        if (!oModel) {\n            return;\n        }\n\n        this.setPopinLayout(PopinLayout.Block);\n\n        let visibleCloumns = 0;\n        // const uiColumnsOrdered = this.getColumns().sort(this._byOrder); // sort columns by perso order, necessary for setMinScreenWidth()\n        this.getColumns().forEach(function (column) {\n            column.setDemandPopin(true);\n            column.setPopinDisplay(PopinDisplay.Inline);\n            if (column.getVisible()) {\n                visibleCloumns++;\n                column.setMinScreenWidth(12 * visibleCloumns + \"rem\");\n            }\n        });\n\n        // if (visibleCloumns <= 3) {\n        //     this.setFixedLayout(false);\n        // } else {\n        //     this.setFixedLayout(true);\n        // }\n    }\n\n    // private _byOrder(columnA, columnB): number {\n    //     if (columnA.getOrder() < columnB.getOrder()) {\n    //         return -1;\n    //     }\n    //     if (columnA.getOrder() > columnB.getOrder()) {\n    //         return 1;\n    //     }\n    //     return 0;\n    // }\n\n    private setupColumnsAbsoluteWidth(): void {\n        const oModel = this.getModel() as SearchModel;\n        // check oModel.config?.FF_resizeResultTableColumns before calling this function\n        if (!oModel) {\n            return;\n        }\n\n        const domRef = this.getDomRef() as HTMLElement;\n        const table = domRef ? (domRef.querySelector(\"table\") as HTMLElement) : null;\n        const tableWidth = table ? table.offsetWidth : undefined;\n        if (typeof tableWidth !== \"number\") {\n            return;\n        }\n\n        let selectBoxWidth = 0;\n        if (table) {\n            const selCol = table.querySelector(\"th.sapMListTblSelCol\");\n            if (selCol) {\n                selectBoxWidth = (selCol as HTMLElement).offsetWidth;\n            }\n        }\n\n        const columns = merge([], oModel.getTableColumns(false)) as Array<FormattedColumn>;\n        const searchResultTableFormatter = new SearchResultTableFormatter(oModel);\n        let absoluteColumnWidthSum = 0;\n        let visibleColumnsWithRelativeWidth = 0;\n\n        // Step 1: sum up absolute width, and count relative and visible columns\n        columns.forEach((column) => {\n            const widthInPixel = searchResultTableFormatter.getColumnWidthInPixel(column.width);\n            if (widthInPixel) {\n                // column of absolute width (end with px)\n                absoluteColumnWidthSum += widthInPixel;\n            } else {\n                // column of relative width (end with %, or undefined, ...)\n                column.width = searchResultTableFormatter.defaultColumnWidth; // overwrite (stored) different formatted width to default width, i.e. undefined\n                if (column.visible) {\n                    visibleColumnsWithRelativeWidth++;\n                }\n            }\n        });\n\n        // Step 2: average rest absulte width to relative columns (visible or invisible, 100% or 30% etc.)\n        if (visibleColumnsWithRelativeWidth === 0) {\n            return;\n        }\n        const borderWidth = 2; // avoid x-scroll bar in table after reset columns\n        const singleWidth =\n            Math.trunc(\n                (tableWidth - selectBoxWidth - absoluteColumnWidthSum) / visibleColumnsWithRelativeWidth -\n                    borderWidth\n            ) + \"px\";\n        columns.forEach((column) => {\n            const widthInPixel = searchResultTableFormatter.getColumnWidthInPixel(column.width);\n            if (!widthInPixel) {\n                // column of relative width (end with %, or undefined)\n                // column visible and invisible\n                column.width = singleWidth;\n            }\n        });\n\n        // Step 3: set width in search model\n        oModel.setTableColumns(columns, true);\n    }\n\n    private getStableId(parentId: string, postfixId: string, separator = \"-\"): string {\n        if (this.useStableIds) {\n            return `${parentId}${separator}${postfixId}`;\n        } else {\n            return \"\";\n        }\n    }\n\n    private destroyControl(id: string) {\n        const control = Element.getElementById(id);\n        if (control) {\n            control.destroy();\n        }\n    }\n\n    onBeforeRendering(): void {\n        // set popin for columns\n        // const oModel = this.getModel() as SearchModel;\n        // if (oModel.config?.FF_resizeResultTableColumns !== true) {\n        //     this.setupPopin();\n        // }\n    }\n\n    onAfterRendering(): void {\n        const oModel = this.getModel() as SearchModel;\n        // colspan for no data cell\n        const domRef = this.getDomRef() as HTMLElement;\n        const noDataCell = domRef?.querySelector(\"table > tbody > tr > td.sapMListTblCellNoData:first-child\");\n        if (noDataCell) {\n            noDataCell.setAttribute(\"colspan\", \"3\");\n        }\n\n        // aria-labelledby for table title row\n        const tableTitleRow = domRef?.querySelector(\"table > thead > tr:first-child\");\n        if (tableTitleRow) {\n            tableTitleRow.setAttribute(\n                \"aria-labelledby\",\n                oModel\n                    ?.getSearchCompositeControlInstanceByChildControl(this)\n                    ?.countBreadcrumbsHiddenElement.getId()\n            );\n        }\n\n        // absolute width for columns\n        if (oModel.config?.FF_resizeResultTableColumns === true) {\n            this.setupColumnsAbsoluteWidth();\n        }\n\n        // popin for columns\n        if (oModel.config?.FF_resizeResultTableColumns !== true) {\n            this.setupPopin();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}