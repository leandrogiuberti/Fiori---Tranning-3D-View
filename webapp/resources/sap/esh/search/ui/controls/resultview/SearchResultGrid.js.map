{"version":3,"file":"SearchResultGrid.js","names":["sap","ui","define","SearchHelper","GridContainer","ImageContent","GenericTile","TileContent","CheckBox","HBox","VBox","Toolbar","__SearchText","__SearchLink","ManagedObject","____SelectionMode","____sinaNexTS_sina_AttributeFormatType","_interopRequireDefault","obj","__esModule","default","SearchText","SearchLink","SelectionMode","AttributeFormatType","SearchResultGrid","extend","renderer","apiVersion","constructor","_constructor","sId","options","GridContainer.prototype.constructor.call","this","bindAggregation","path","factory","id","context","item","getObject","checkboxContent","headerToolbar","imageContent","tileContainer","oTitle","titleDescription","contentItems","data","attributes","design","content","addStyleClass","push","imageUrls","filter","attr","metadata","type","selected","select","ignoreNextTilePress","getItems","forEach","_syncSelectionCssClass","enabled","parts","visible","formatter","resultviewSelectionVisibility","resultviewSelectionMode","OneItem","addContent","length","value","src","escapeSettingsValue","imageFormat","format","Round","titleText","defaultNavigationTarget","titleAttributes","text","title","navigationTarget","detailAttributes","valueFormatted","items","oTile","tileContent","press","oEvent","publicModel","getModel","getProperty","getSource","getBindingContext","getPath","publicModelItem","getTileContent","setSelected","performNavigation","event","titleNavigation","onAfterRendering","_onAfterRendering","GridContainer.prototype.onAfterRendering.call","boldTagUnescaper","getDomRef","resultItemCustomStyleClassSetter","removeStyleClass"],"sources":["SearchResultGrid.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as SearchHelper from \"sap/esh/search/ui/SearchHelper\";\nimport GridContainer, { $GridContainerSettings } from \"sap/f/GridContainer\";\nimport ImageContent from \"sap/m/ImageContent\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport TileContent from \"sap/m/TileContent\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport HBox from \"sap/m/HBox\";\nimport VBox from \"sap/m/VBox\";\nimport { ResultSetItem, ResultSetItemAttribute } from \"../../ResultSetApi\";\nimport { NavigationTarget } from \"../../sinaNexTS/sina/NavigationTarget\";\nimport Toolbar from \"sap/m/Toolbar\";\nimport SearchText from \"./SearchText\";\nimport SearchLink from \"../SearchLink\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport { SelectionMode } from \"../../SelectionMode\";\nimport { AttributeFormatType } from \"../../sinaNexTS/sina/AttributeFormatType\";\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchResultGrid extends GridContainer {\n    private ignoreNextTilePress;\n\n    constructor(sId?: string, options?: $GridContainerSettings) {\n        super(sId, options);\n\n        this.bindAggregation(\"items\", {\n            path: \"publicSearchModel>/results/items\",\n            factory: (id, context): GenericTile => {\n                const item = context.getObject() as ResultSetItem;\n                let checkboxContent;\n                let headerToolbar: Toolbar;\n                let imageContent: ImageContent;\n                let tileContainer;\n                let oTitle;\n                let titleDescription;\n                const contentItems = [];\n                if (item.data.attributes) {\n                    headerToolbar = new Toolbar({ design: \"Transparent\", content: [] }).addStyleClass(\n                        \"sapUiTinyMarginBottom\"\n                    );\n                    contentItems.push(headerToolbar);\n                    const imageUrls: Array<ResultSetItemAttribute> = item.data.attributes.filter((attr) => {\n                        return attr?.metadata?.type === \"ImageUrl\"; // ToDo -> attribute 'HASHIERARCHYNODECHILD' has no property 'metadata'\n                    });\n                    checkboxContent = new CheckBox(`${id}--tileCheckBox`, {\n                        selected: { path: \"publicSearchModel>selected\" },\n                        select: () => {\n                            // console.log(\"SELECTION: tile checkbox, select event\");\n                            this.ignoreNextTilePress = true; // prevent navigation when selecting checkbox\n                            this.getItems().forEach((item) => {\n                                this._syncSelectionCssClass(item);\n                            });\n                        },\n                        enabled: {\n                            parts: [{ path: \"publicSearchModel>selectionEnabled\" }],\n                        },\n                        visible: {\n                            parts: [\n                                { path: \"publicSearchModel>/resultviewSelectionVisibility\" },\n                                { path: \"publicSearchModel>/config/resultviewSelectionMode\" },\n                            ],\n                            formatter: (resultviewSelectionVisibility, resultviewSelectionMode) => {\n                                return (\n                                    resultviewSelectionVisibility &&\n                                    resultviewSelectionMode !== SelectionMode.OneItem\n                                );\n                            },\n                        },\n                    });\n                    headerToolbar.addContent(checkboxContent);\n                    if (imageUrls.length > 0 && typeof imageUrls[0].value === \"string\") {\n                        imageContent = new ImageContent(`${id}-Image`, {\n                            src: ManagedObject.escapeSettingsValue(imageUrls[0].value as string),\n                        }).addStyleClass(\"sapUiMediumMarginBegin\");\n                        const imageFormat = imageUrls[0].metadata.format;\n                        if (imageFormat === AttributeFormatType.Round) {\n                            imageContent.addStyleClass(\"sapUshellResultListGrid-ImageContainerRound\");\n                        }\n                    }\n                    // title link\n                    let titleText;\n                    if (item.data?.defaultNavigationTarget) {\n                        if (item.data.titleAttributes.length > 0) {\n                            oTitle = new SearchLink(`${id}-Title`, {\n                                text: ManagedObject.escapeSettingsValue(item.title),\n                                navigationTarget: item.data.defaultNavigationTarget,\n                            });\n                            contentItems.push(oTitle);\n                        } else {\n                            oTitle = new SearchText(\"\", {\n                                text: ManagedObject.escapeSettingsValue(\n                                    item.data.defaultNavigationTarget.text ||\n                                        \"No Title (def. nav. target w/o text)\"\n                                ),\n                            });\n                            contentItems.push(oTitle);\n                        }\n                    } else if (item.data.titleAttributes.length > 0) {\n                        oTitle = new SearchText(\"\", {\n                            text: ManagedObject.escapeSettingsValue(item.title),\n                        });\n                        contentItems.push(oTitle);\n                    } else if (item.data.detailAttributes.length > 0) {\n                        titleText = item.data.detailAttributes[0].valueFormatted;\n                        oTitle = new SearchText(\"\", {\n                            text: ManagedObject.escapeSettingsValue(titleText),\n                        });\n                        contentItems.push(oTitle);\n                    }\n                    if (imageContent) {\n                        contentItems.push(imageContent);\n                    }\n                    tileContainer = new VBox({\n                        items: [headerToolbar, new VBox({ items: contentItems })],\n                    });\n                } else {\n                    // robustness for app search tiles (grid not rendered but updated based on search results!!!)\n                    if (item.data[\"title\"]) {\n                        oTitle = item.data[\"title\"];\n                        titleDescription = item.data[\"subtitle\"];\n                    }\n                    contentItems.push(new VBox({ items: [oTitle, titleDescription] }));\n                    tileContainer = new HBox({ items: contentItems });\n                }\n                const oTile: GenericTile = new GenericTile(`${id}-resultItemTile`, {\n                    tileContent: new TileContent(`${id}-resultItemTileContent`, {\n                        content: tileContainer,\n                    }),\n                    press: (oEvent) => {\n                        if (this.ignoreNextTilePress) {\n                            this.ignoreNextTilePress = false;\n                            return;\n                        }\n                        const publicModel = this.getModel(\"publicSearchModel\");\n                        const data = publicModel.getProperty(\n                            oEvent.getSource().getBindingContext(\"publicSearchModel\").getPath()\n                        ).data;\n                        if (\n                            publicModel.getProperty(\"/config/resultviewSelectionMode\") ===\n                            SelectionMode.OneItem\n                        ) {\n                            const publicModelItem = oEvent\n                                .getSource()\n                                .getTileContent()[0]\n                                .getBindingContext(\"publicSearchModel\")\n                                .getObject() as ResultSetItem;\n                            publicModelItem.setSelected(!publicModelItem.selected);\n                        } else {\n                            const defaultNavigationTarget = data.defaultNavigationTarget;\n                            if (typeof defaultNavigationTarget?.performNavigation === \"function\") {\n                                defaultNavigationTarget.performNavigation({ event: oEvent });\n                            }\n                            const titleNavigation: NavigationTarget = data.titleNavigation;\n                            if (typeof titleNavigation?.performNavigation === \"function\") {\n                                titleNavigation.performNavigation({ event: oEvent });\n                            }\n                        }\n                        this.getItems().forEach((item) => {\n                            this._syncSelectionCssClass(item);\n                        });\n                    },\n                }).addStyleClass(\"sapElisaGridTile\");\n                return oTile;\n            },\n        });\n        this.addStyleClass(\"sapUshellResultListGrid\");\n    }\n\n    onAfterRendering(oEvent): void {\n        super.onAfterRendering(oEvent);\n        // unescape bold tags\n        SearchHelper.boldTagUnescaper(this.getDomRef() as HTMLElement);\n        // apply custom style class to all result items based on property 'customItemStyleClass'\n        SearchHelper.resultItemCustomStyleClassSetter(this);\n        // sync background selection style\n        this.getItems().forEach((item) => {\n            this._syncSelectionCssClass(item);\n        });\n    }\n\n    // sync the CSS class for selection state\n    private _syncSelectionCssClass(item): void {\n        const selected = item.getBindingContext(\"publicSearchModel\").getProperty(\"selected\");\n        if (selected) {\n            item.addStyleClass(\"sapUshellSearchResultGridTile-Selected\");\n        } else {\n            item.removeStyleClass(\"sapUshellSearchResultGridTile-Selected\");\n        }\n    }\n\n    static renderer = {\n        apiVersion: 2,\n    };\n}\n"],"mappings":"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","ignoreList":[]}