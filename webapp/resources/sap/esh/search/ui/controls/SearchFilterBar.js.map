{"version":3,"file":"SearchFilterBar.js","names":["sap","ui","define","__i18n","Text","Toolbar","ToolbarSpacer","sap_m_library","Icon","___sinaNexTS_sina_ComplexCondition","___sinaNexTS_sina_ComparisonOperator","___eventlogging_UserEvents","___sinaNexTS_sina_HierarchyDisplayType","__errors","___facets_FacetTypeUI","___sinaNexTS_sina_SimpleCondition","_interopRequireDefault","obj","__esModule","default","i18n","ToolbarDesign","ComplexCondition","ComparisonOperator","UserEventType","HierarchyDisplayType","errors","FacetTypeUI","SimpleCondition","SearchFilterBar","extend","renderer","apiVersion","constructor","_constructor","sId","settings","Toolbar.prototype.constructor.call","this","setProperty","Info","addStyleClass","filterFormatter","bind","filterText","getId","text","parts","path","formatter","tooltip","setMaxLines","addContent","resetButton","src","getText","_filterFormatter","rootCondition","facets","hasFilters","model","getModel","config","formatFilterBarText","_assembleFilterLabels","error","oError","ConfigurationExitError","applicationComponent","searchCompositeControl","getSearchCompositeControlInstanceByChildControl","errorHandler","onError","_formatFilterText","attributeFilters","sortConditions","i","conditions","length","complexCondition","attribute","getFirstAttribute","attributeMetadata","getProperty","dataSource","attributeMetadataMap","isHierarchy","hierarchyDisplayType","StaticHierarchyFacet","attributeFilter","attributeName","id","attributeLabel","attributeFilterValueLabels","push","j","filterCondition","label","_formatLabel","valueLabel","operator","result","map","join","labelFormatted","Bw","Ew","Co","_sortConditions","getAttribute","firstFilter","getIndex","list","value","element","clone","sort","complexCondition1","complexCondition2","attribute1","index1","attribute2","index2","sortValues","index","facet","facetType","Hierarchy","valueSortFunction","filter1","filter2","items","onAfterRendering","_onAfterRendering","oEvent","Toolbar.prototype.onAfterRendering.call","attachPress","eventLogger","logEvent","type","CLEAR_ALL_FILTERS","dataSourceKey","getDataSource","resetFilterByFilterConditions","document","querySelector","setAttribute"],"sources":["SearchFilterBar.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../i18n\";\nimport Text from \"sap/m/Text\";\nimport Toolbar, { $ToolbarSettings } from \"sap/m/Toolbar\";\nimport ToolbarSpacer from \"sap/m/ToolbarSpacer\";\nimport { ToolbarDesign } from \"sap/m/library\";\nimport Icon from \"sap/ui/core/Icon\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ComplexCondition } from \"../sinaNexTS/sina/ComplexCondition\";\nimport { ComparisonOperator } from \"../sinaNexTS/sina/ComparisonOperator\";\nimport { UserEventType } from \"../eventlogging/UserEvents\";\nimport { HierarchyDisplayType } from \"../sinaNexTS/sina/HierarchyDisplayType\";\nimport errors from \"../error/errors\";\nimport { FacetTypeUI } from \"./facets/FacetTypeUI\";\nimport Facet from \"../Facet\";\nimport { SimpleCondition } from \"../sinaNexTS/sina/SimpleCondition\";\n\ninterface $SearchFilterBarSettings extends $ToolbarSettings {\n    filterText: string;\n}\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchFilterBar extends Toolbar {\n    private filterText: Text;\n    private resetButton: Icon;\n\n    constructor(sId?: string, settings?: $SearchFilterBarSettings) {\n        super(sId, settings);\n\n        // blue bar\n        this.setProperty(\"design\", ToolbarDesign.Info);\n\n        this.addStyleClass(\"sapUshellSearchFilterContextualBar\");\n\n        // bind file formatter\n        this.filterFormatter = this.filterFormatter.bind(this);\n\n        // filter text string\n        this.filterText = new Text(this.getId() + \"-resetFilterText\", {\n            text: {\n                parts: [{ path: \"/uiFilter/rootCondition\" }, { path: \"/facets\" }],\n                formatter: this.filterFormatter,\n            },\n            tooltip: {\n                parts: [{ path: \"/uiFilter/rootCondition\" }, { path: \"/facets\" }],\n                formatter: this.filterFormatter,\n            },\n        }).addStyleClass(\"sapUshellSearchFilterText\");\n        this.filterText.setMaxLines(1);\n        this.addContent(this.filterText);\n\n        // filter middle space\n        this.addContent(new ToolbarSpacer());\n\n        // filter reset button\n        this.resetButton = new Icon(this.getId() + \"-resetFilterButton\", {\n            src: \"sap-icon://clear-filter\",\n            tooltip: i18n.getText(\"resetFilterButton_tooltip\"),\n        }).addStyleClass(\"sapUshellSearchFilterResetButton\");\n        this.addContent(this.resetButton);\n    }\n\n    filterFormatter(rootCondition: ComplexCondition, facets: Array<Facet>): string {\n        if (!rootCondition || !rootCondition.hasFilters()) {\n            return \"\";\n        }\n        const model = this.getModel() as SearchModel;\n        if (model.config.formatFilterBarText) {\n            // 1) exit\n            try {\n                return model.config.formatFilterBarText(this._assembleFilterLabels(rootCondition, facets));\n            } catch (error) {\n                const oError = new errors.ConfigurationExitError(\n                    \"formatFilterBarText\",\n                    model.config.applicationComponent,\n                    error\n                );\n                const searchCompositeControl = model.getSearchCompositeControlInstanceByChildControl(this);\n                searchCompositeControl?.errorHandler.onError(oError);\n                return this._formatFilterText(rootCondition, facets); // fallback default formatter\n            }\n        } else {\n            // 2) default formatter\n            return this._formatFilterText(rootCondition, facets);\n        }\n    }\n\n    _assembleFilterLabels(\n        rootCondition: ComplexCondition,\n        facets: Array<Facet>\n    ): Array<{ attributeName: string; attributeLabel: string; attributeFilterValueLabels: Array<string> }> {\n        const attributeFilters = [];\n        // sort filter values, use same order as in facets\n        rootCondition = this.sortConditions(rootCondition, facets);\n        // collect all filter values\n        for (let i = 0; i < rootCondition.conditions.length; ++i) {\n            const complexCondition = rootCondition.conditions[i] as ComplexCondition;\n            const model = this.getModel() as SearchModel;\n            const attribute = complexCondition.getFirstAttribute();\n            const attributeMetadata =\n                model.getProperty(\"/uiFilter\")?.dataSource.attributeMetadataMap[attribute];\n            if (\n                attributeMetadata &&\n                attributeMetadata.isHierarchy === true &&\n                attributeMetadata.hierarchyDisplayType === HierarchyDisplayType.StaticHierarchyFacet\n            ) {\n                continue;\n            }\n            const attributeFilter = {\n                attributeName: attributeMetadata?.id || attribute,\n                attributeLabel: \"\",\n                attributeFilterValueLabels: [],\n            };\n            attributeFilters.push(attributeFilter);\n            for (let j = 0; j < complexCondition.conditions.length; ++j) {\n                const filterCondition = complexCondition.conditions[j];\n                if (j === 0) {\n                    attributeFilter.attributeLabel = filterCondition.attributeLabel;\n                }\n                let label;\n                if (filterCondition instanceof SimpleCondition) {\n                    label = this._formatLabel(filterCondition.valueLabel, filterCondition.operator);\n                } else if (filterCondition instanceof ComplexCondition) {\n                    label = this._formatLabel(filterCondition.valueLabel);\n                }\n                attributeFilter.attributeFilterValueLabels.push(label);\n            }\n        }\n        return attributeFilters;\n    }\n\n    _formatFilterText(rootCondition: ComplexCondition, facets: Array<Facet>): string {\n        const attributeFilters = this._assembleFilterLabels(rootCondition, facets);\n        const result = attributeFilters.map(\n            (attributeFilter) =>\n                attributeFilter.attributeLabel +\n                \" (\" +\n                attributeFilter.attributeFilterValueLabels.join(\", \") +\n                \")\"\n        );\n        return i18n.getText(\"filtered_by\", [result.join(\", \")]);\n    }\n\n    _formatLabel(label: string, operator?: ComparisonOperator): string {\n        let labelFormatted;\n        switch (operator) {\n            case ComparisonOperator.Bw: // \"Bw\"\n                labelFormatted = label + \"*\";\n                break;\n            case ComparisonOperator.Ew: // \"Ew\"\n                labelFormatted = \"*\" + label;\n                break;\n            case ComparisonOperator.Co: // \"Co\"\n                labelFormatted = \"*\" + label + \"*\";\n                break;\n            default:\n                labelFormatted = label;\n                break;\n        }\n        return labelFormatted;\n    }\n\n    sortConditions(rootCondition: ComplexCondition, facets: Array<Facet>): ComplexCondition {\n        // cannot sort without facets\n        if (facets.length === 0) {\n            return rootCondition;\n        }\n        // helper: get attribute from a complex condition\n        const getAttribute = function (complexCondition) {\n            const firstFilter = complexCondition.conditions[0];\n            if (firstFilter.attribute) {\n                return firstFilter.attribute;\n            }\n            return firstFilter.conditions[0].attribute;\n        };\n        // helper get list index\n        const getIndex = function (list, attribute, value) {\n            for (let i = 0; i < list.length; ++i) {\n                const element = list[i];\n                if (element[attribute] === value) {\n                    return i;\n                }\n            }\n        };\n        // clone: we don't want to modify the original filter\n        rootCondition = rootCondition.clone();\n        // 1) sort complexConditons (each complexCondition holds the filters for a certain attribute)\n        rootCondition.conditions.sort(function (complexCondition1, complexCondition2) {\n            const attribute1 = getAttribute(complexCondition1);\n            const index1 = getIndex(facets, \"dimension\", attribute1);\n            const attribute2 = getAttribute(complexCondition2);\n            const index2 = getIndex(facets, \"dimension\", attribute2);\n            return index1 - index2;\n        });\n        // 2) sort filters within a complexConditon\n        const sortValues = function (complexCondition) {\n            const attribute = getAttribute(complexCondition);\n            const index = getIndex(facets, \"dimension\", attribute);\n            if (!index) {\n                return;\n            }\n            const facet = facets[index];\n            if (facet.facetType === FacetTypeUI.Hierarchy) {\n                return; // no sort for hierarchy\n            }\n            const valueSortFunction = function (filter1, filter2) {\n                return (\n                    getIndex(facet.items, \"label\", filter1.valueLabel) -\n                    getIndex(facet.items, \"label\", filter2.valueLabel)\n                );\n            };\n            complexCondition.conditions.sort(valueSortFunction);\n        };\n        for (let i = 0; i < rootCondition.conditions.length; ++i) {\n            const complexCondition = rootCondition.conditions[i];\n            sortValues(complexCondition);\n        }\n        return rootCondition;\n    }\n\n    onAfterRendering(oEvent): void {\n        super.onAfterRendering(oEvent);\n\n        // don't have model until after rendering\n        // attach press action\n        this.resetButton.attachPress(() => {\n            const model = this.getModel() as SearchModel;\n            model.eventLogger.logEvent({\n                type: UserEventType.CLEAR_ALL_FILTERS,\n                dataSourceKey: model.getDataSource().id,\n            });\n            model.resetFilterByFilterConditions(true);\n        });\n\n        // add aria label\n        const filterText = document.querySelector(\".sapUshellSearchFilterText\");\n        if (filterText) {\n            filterText.setAttribute(\"aria-label\", i18n.getText(\"filtered_by_aria_label\"));\n        }\n    }\n\n    static renderer = {\n        apiVersion: 2,\n    };\n}\n"],"mappings":"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","ignoreList":[]}