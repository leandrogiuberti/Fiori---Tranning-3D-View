{"version":3,"file":"SearchSpreadsheet-dbg.js","names":["sap","ui","define","__i18n","Spreadsheet","__ErrorHandler","Controller","SearchResultFormatter","Element","___SearchResultTableColumnType","___sinaNexTS_sina_SearchResultSetItemAttributeGroup","___sinaNexTS_sina_AttributeType","sap_ui_export_library","MessageBox","_interopRequireDefault","obj","__esModule","default","i18n","ErrorHandler","TableColumnType","SearchResultSetItemAttributeGroup","AttributeType","EdmType","SearchSpreadsheet","extend","constructor","prototype","apply","arguments","limit","onExport","_onExport","model","getProperty","information","getText","actions","Action","OK","CANCEL","emphasizedAction","onClose","oAction","isExport","controlExport","styleClass","_controlExport","lockUI","exportData","formatExportData","doUI5Export","error","errorHandler","getInstance","onError","unlockUI","_formatExportData","exportQuery","query","clone","setCalculateFacets","setTop","searchResultSet","getResultSetAsync","formatter","formattedResults","format","filter","searchTerm","suppressHighlightedValues","exportDataType","visibleColumns","getVisibleColumns","exportColumns","formatExportColumns","exportRows","formatExportRows","_getVisibleColumns","getResultViewType","getTableInitialColumns","forEach","column","visible","push","getTableColumns","_formatExportColumns","formattedAttributes","itemattributes","visibleColumn","type","TITLE","TITLE_DESCRIPTION","label","name","property","p13NColumnName","String","columnType","DETAIL","concat","formatMergedColumn","formatSeparateColumns","_formatMergedColumn","attributeId","_formatSeparateColumns","matchedAttribute","find","formattedAttribute","sinaAttribute","id","formatColumnsForGroupAttribute","formatColumnForSingleAttribute","_formatColumnsForGroupAttribute","attribute","columns","attributesInGroup","attributes","attributeInGroup","childColumns","_formatColumnForSingleAttribute","isNumberType","Number","_formatExportRows","formattedResult","formatExportRow","_formatExportRow","exportRow","title","titleDescription","formatMergedCell","formatSeparateCells","_formatMergedCell","key","value","_formatSeparateCells","formatCellsForGroupAttribute","formatCellsForSingleAttribute","_formatCellsForGroupAttribute","cells","childCells","_formatCellsForSingleAttribute","valueFormatted","_isNumberType","metadata","Double","Integer","_doUI5Export","oSettings","workbook","fileName","dataSource","build","then","_lockUI","exportButtonId","document","querySelectorAll","exportButton","getElementById","setEnabled","busyIndicator","setBusy","_unlockUI"],"sources":["SearchSpreadsheet.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../i18n\";\nimport Spreadsheet from \"sap/ui/export/Spreadsheet\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport ErrorHandler from \"../error/ErrorHandler\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport Button from \"sap/m/Button\";\nimport { SearchResultSet } from \"../sinaNexTS/sina/SearchResultSet\";\nimport SearchResultFormatter, {\n    FormattedResultItem,\n    FormattedResultItemAttribute,\n} from \"sap/esh/search/ui/SearchResultFormatter\";\nimport { Column } from \"sap/esh/search/ui/SearchResultTableFormatter\";\nimport Element from \"sap/ui/core/Element\";\nimport { TableColumnType } from \"../SearchResultTableColumnType\";\nimport { SearchResultSetItemAttributeGroup } from \"../sinaNexTS/sina/SearchResultSetItemAttributeGroup\";\nimport { SearchResultSetItemAttribute } from \"../sinaNexTS/sina/SearchResultSetItemAttribute\";\nimport { AttributeType } from \"../sinaNexTS/sina/AttributeType\";\nimport { SearchResultSetItemAttributeBase } from \"../sinaNexTS/sina/SearchResultSetItemAttributeBase\";\nimport { EdmType } from \"sap/ui/export/library\";\nimport MessageBox from \"sap/m/MessageBox\";\n// import Dialog from \"sap/m/Dialog\";\n// import Text from \"sap/m/Text\";\n// import VerticalLayout from \"sap/ui/layout/VerticalLayout\";\n// import RadioButtonGroup from \"sap/m/RadioButtonGroup\";\n// import RadioButton from \"sap/m/RadioButton\";\n// import MessageStrip from \"sap/m/MessageStrip\";\n\ninterface ExportColumn {\n    label?: string; // UI5 defined property, column label\n    property?: string; // UI5 defined property, unified id (p13NColumnName or attributeId)\n    type?: string; // UI5 defined property, excel data type\n    columnType?: TableColumnType; // column type\n}\ninterface ExportRow {\n    [property: string]: number | string;\n}\n\ninterface ExportData {\n    exportColumns: Array<ExportColumn>;\n    exportRows: Array<ExportRow>;\n}\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchSpreadsheet extends Controller {\n    private model: SearchModel;\n    private exportDataType: \"formatted\" | \"technical\";\n    private visibleColumns: Array<Column>;\n    private limit: number = 1000;\n\n    async onExport(model: SearchModel): Promise<void> {\n        this.model = model;\n\n        if (this.model.getProperty(\"/boCount\") > this.limit) {\n            MessageBox.information(i18n.getText(\"exportDataInfo\"), {\n                actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],\n                emphasizedAction: MessageBox.Action.OK,\n                onClose: async (oAction: string) => {\n                    let isExport;\n                    if (oAction == MessageBox.Action.OK) {\n                        isExport = true;\n                    }\n                    if (oAction == MessageBox.Action.CANCEL) {\n                        isExport = false;\n                    }\n                    await this.controlExport(isExport);\n                },\n                styleClass: \"sapUshellSearchResultExportDialog\",\n            });\n        } else {\n            await this.controlExport(true);\n        }\n    }\n\n    private async controlExport(isExport: boolean): Promise<void> {\n        try {\n            this.lockUI();\n            if (!isExport) {\n                return;\n            }\n            const exportData = await this.formatExportData();\n            await this.doUI5Export(exportData);\n        } catch (error) {\n            const errorHandler = ErrorHandler.getInstance();\n            errorHandler.onError(error);\n        } finally {\n            this.unlockUI();\n        }\n    }\n\n    private async formatExportData(): Promise<ExportData> {\n        // search query\n        const exportQuery = this.model.query.clone();\n        exportQuery.setCalculateFacets(false);\n        exportQuery.setTop(this.limit);\n\n        // search result format\n        const searchResultSet = (await exportQuery.getResultSetAsync()) as SearchResultSet;\n        const formatter = new SearchResultFormatter(this.model);\n        const formattedResults = formatter.format(searchResultSet, exportQuery.filter.searchTerm, {\n            suppressHighlightedValues: true,\n        });\n\n        // export data type\n        this.exportDataType = \"technical\"; // default value type\n\n        // UI visible columns\n        this.visibleColumns = this.getVisibleColumns();\n\n        // export columns\n        const exportColumns = this.formatExportColumns(formattedResults);\n\n        // export rows\n        const exportRows = this.formatExportRows(formattedResults);\n\n        return { exportColumns: exportColumns, exportRows: exportRows };\n    }\n\n    private getVisibleColumns(): Array<Column> {\n        const visibleColumns = [];\n\n        if (this.model.getResultViewType() !== \"searchResultTable\") {\n            // export columns: initial state columns, original ordering, first 6/7 visible\n            this.model.getTableInitialColumns().forEach((column) => {\n                if (column.visible === true) {\n                    visibleColumns.push(column);\n                }\n            });\n        } else {\n            // export columns: real-time table visible columns\n            this.model.getTableColumns(false).forEach((column) => {\n                if (column.visible === true) {\n                    visibleColumns.push(column);\n                }\n            });\n        }\n\n        return visibleColumns;\n    }\n\n    private formatExportColumns(formattedResults: Array<FormattedResultItem>): Array<ExportColumn> {\n        const formattedAttributes = formattedResults[0].itemattributes;\n        let exportColumns = [];\n\n        for (const visibleColumn of this.visibleColumns) {\n            switch (visibleColumn.type) {\n                case TableColumnType.TITLE:\n                case TableColumnType.TITLE_DESCRIPTION:\n                    exportColumns.push({\n                        label: visibleColumn.name,\n                        property: visibleColumn.p13NColumnName,\n                        type: EdmType.String,\n                        columnType: visibleColumn.type,\n                    });\n                    break;\n\n                case TableColumnType.DETAIL:\n                    if (this.exportDataType === \"formatted\") {\n                        // export single attribute as one column\n                        // export group attribute as one merged column\n                        exportColumns = exportColumns.concat([this.formatMergedColumn(visibleColumn)]);\n                    } else {\n                        // export single attribute as one column\n                        // export group attribute as multiple separate columns\n                        exportColumns = exportColumns.concat(\n                            this.formatSeparateColumns(visibleColumn, formattedAttributes)\n                        );\n                    }\n                    break;\n\n                default:\n                    // case TableColumnType.RELATED_APPS:\n                    // case TableColumnType.EXTEND:\n                    // don't export\n                    break;\n            }\n        }\n\n        return exportColumns;\n    }\n\n    private formatMergedColumn(visibleColumn: Column): ExportColumn {\n        return {\n            label: visibleColumn.name,\n            property: visibleColumn.attributeId,\n            type: EdmType.String,\n            columnType: TableColumnType.DETAIL,\n        };\n    }\n\n    private formatSeparateColumns(\n        visibleColumn: Column,\n        formattedAttributes: Array<FormattedResultItemAttribute>\n    ): Array<ExportColumn> {\n        const matchedAttribute = formattedAttributes.find(\n            (formattedAttribute) =>\n                (formattedAttribute?.sinaAttribute as SearchResultSetItemAttribute)?.id ===\n                visibleColumn.attributeId\n        );\n        const sinaAttribute = matchedAttribute?.sinaAttribute as SearchResultSetItemAttribute;\n        if (sinaAttribute) {\n            if (sinaAttribute instanceof SearchResultSetItemAttributeGroup) {\n                return this.formatColumnsForGroupAttribute(sinaAttribute);\n            } else {\n                return [this.formatColumnForSingleAttribute(sinaAttribute)];\n            }\n        }\n        return [];\n    }\n\n    private formatColumnsForGroupAttribute(\n        attribute: SearchResultSetItemAttributeGroup\n    ): Array<ExportColumn> {\n        const columns = [];\n        const attributesInGroup = attribute?.attributes || [];\n        for (const attributeInGroup of attributesInGroup) {\n            if (attributeInGroup?.attribute instanceof SearchResultSetItemAttributeGroup) {\n                const childColumns = this.formatColumnsForGroupAttribute(attributeInGroup?.attribute);\n                columns.push(...childColumns);\n            } else {\n                columns.push(this.formatColumnForSingleAttribute(attributeInGroup.attribute));\n            }\n        }\n        return columns;\n    }\n\n    private formatColumnForSingleAttribute(attribute: SearchResultSetItemAttributeBase): ExportColumn {\n        // return array of single column\n        if (attribute) {\n            return {\n                label: attribute?.label,\n                property: attribute?.id,\n                type: this.isNumberType(attribute) ? EdmType.Number : EdmType.String,\n                columnType: TableColumnType.DETAIL,\n            };\n        }\n        return {};\n    }\n\n    private formatExportRows(formattedResults: Array<FormattedResultItem>): Array<ExportRow> {\n        const exportRows = [];\n        for (const formattedResult of formattedResults) {\n            exportRows.push(this.formatExportRow(formattedResult));\n        }\n        return exportRows;\n    }\n\n    private formatExportRow(formattedResult: FormattedResultItem): ExportRow {\n        let exportRow = {};\n        for (const visibleColumn of this.visibleColumns) {\n            switch (visibleColumn.type) {\n                case TableColumnType.TITLE:\n                    exportRow[visibleColumn.p13NColumnName] = formattedResult.title;\n                    break;\n\n                case TableColumnType.TITLE_DESCRIPTION:\n                    exportRow[visibleColumn.p13NColumnName] = formattedResult.titleDescription;\n                    break;\n\n                case TableColumnType.DETAIL:\n                    if (this.exportDataType === \"formatted\") {\n                        // export single attribute formatted value as one cell\n                        // export group attribute formatted values as one merged cell\n                        exportRow = {\n                            ...exportRow,\n                            ...this.formatMergedCell(visibleColumn, formattedResult.itemattributes),\n                        };\n                    } else {\n                        // export single attribute technical value as one cell\n                        // export group attribute technical values as multiple separate cells\n                        exportRow = {\n                            ...exportRow,\n                            ...this.formatSeparateCells(visibleColumn, formattedResult.itemattributes),\n                        };\n                    }\n                    break;\n\n                default:\n                    // TableColumnType.DETAIL\n                    // TableColumnType.RELATED_APPS\n                    // TableColumnType.EXTEND\n                    // don't export\n                    break;\n            }\n        }\n        return exportRow;\n    }\n\n    private formatMergedCell(\n        visibleColumn: Column,\n        formattedAttributes: Array<FormattedResultItemAttribute>\n    ): ExportRow {\n        const matchedAttribute = formattedAttributes.find(\n            (formattedAttribute) => formattedAttribute?.sinaAttribute?.id === visibleColumn.attributeId\n        );\n        if (matchedAttribute) {\n            const key = visibleColumn?.attributeId;\n            const value = matchedAttribute?.value || \"\"; // formatted value\n            return {\n                [key]: value,\n            };\n        }\n        return {};\n    }\n\n    private formatSeparateCells(\n        visibleColumn: Column,\n        formattedAttributes: Array<FormattedResultItemAttribute>\n    ): ExportRow {\n        const matchedAttribute = formattedAttributes.find(\n            (formattedAttribute) => formattedAttribute?.sinaAttribute?.id === visibleColumn.attributeId\n        );\n        if (matchedAttribute) {\n            const sinaAttribute = matchedAttribute?.sinaAttribute as SearchResultSetItemAttribute;\n            if (sinaAttribute instanceof SearchResultSetItemAttributeGroup) {\n                return this.formatCellsForGroupAttribute(sinaAttribute);\n            } else {\n                return this.formatCellsForSingleAttribute(sinaAttribute);\n            }\n        }\n        return {};\n    }\n\n    private formatCellsForGroupAttribute(attribute: SearchResultSetItemAttributeGroup): ExportRow {\n        let cells = {};\n        const attributesInGroup = attribute?.attributes || [];\n        for (const attributeInGroup of attributesInGroup) {\n            // if (attributeInGroup?.attribute?.metadata?.type === AttributeType.Group) {\n            if (attributeInGroup?.attribute instanceof SearchResultSetItemAttributeGroup) {\n                const childCells = this.formatCellsForGroupAttribute(attributeInGroup?.attribute);\n                cells = { ...cells, ...childCells };\n            } else {\n                cells = {\n                    ...cells,\n                    ...this.formatCellsForSingleAttribute(\n                        attributeInGroup.attribute as SearchResultSetItemAttribute\n                    ),\n                };\n            }\n        }\n        return cells;\n    }\n\n    private formatCellsForSingleAttribute(attribute: SearchResultSetItemAttribute): ExportRow {\n        if (attribute) {\n            const key = attribute?.id;\n            let value;\n            // compatible to old version\n            if (this.isNumberType(attribute)) {\n                value = attribute?.value || \"\"; // technical value\n            } else {\n                value = attribute?.valueFormatted || \"\";\n            }\n            return {\n                [key]: value,\n            };\n        }\n        return {};\n    }\n\n    private isNumberType(attribute: SearchResultSetItemAttributeBase): boolean {\n        if (\n            attribute?.metadata?.type === AttributeType.Double ||\n            attribute?.metadata?.type === AttributeType.Integer\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private async doUI5Export(exportData: ExportData): Promise<void> {\n        const oSettings = {\n            workbook: {\n                columns: exportData.exportColumns,\n            },\n            fileName: i18n.getText(\"exportFileName\"),\n            dataSource: exportData.exportRows,\n        };\n\n        new Spreadsheet(oSettings).build().then(\n            () => {\n                // do nothing\n            },\n            (error) => {\n                const errorHandler = ErrorHandler.getInstance();\n                errorHandler.onError(error);\n            }\n        );\n    }\n\n    private lockUI(): void {\n        const exportButtonId = document?.querySelectorAll('[id$=\"ushell-search-result-dataExportButton\"]')[0]\n            ?.id;\n        const exportButton = Element.getElementById(exportButtonId) as unknown as Button;\n        exportButton?.setEnabled(false);\n        this.model?.busyIndicator?.setBusy(true);\n    }\n\n    private unlockUI(): void {\n        const exportButtonId = document?.querySelectorAll('[id$=\"ushell-search-result-dataExportButton\"]')[0]\n            ?.id;\n        const exportButton = Element.getElementById(exportButtonId) as unknown as Button;\n        exportButton?.setEnabled(true);\n        this.model?.busyIndicator?.setBusy(false);\n    }\n}\n"],"mappings":"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","ignoreList":[]}