{"version":3,"file":"SearchSpreadsheet.js","names":["sap","ui","define","__i18n","Spreadsheet","__ErrorHandler","Controller","SearchResultFormatter","Element","___SearchResultTableColumnType","___sinaNexTS_sina_SearchResultSetItemAttributeGroup","___sinaNexTS_sina_AttributeType","sap_ui_export_library","MessageBox","_interopRequireDefault","obj","__esModule","default","i18n","ErrorHandler","TableColumnType","SearchResultSetItemAttributeGroup","AttributeType","EdmType","SearchSpreadsheet","extend","constructor","prototype","apply","this","arguments","limit","onExport","async","_onExport","model","getProperty","information","getText","actions","Action","OK","CANCEL","emphasizedAction","onClose","isExport","oAction","controlExport","styleClass","_controlExport","lockUI","exportData","formatExportData","doUI5Export","error","errorHandler","getInstance","onError","unlockUI","_formatExportData","exportQuery","query","clone","setCalculateFacets","setTop","searchResultSet","getResultSetAsync","formatter","formattedResults","format","filter","searchTerm","suppressHighlightedValues","exportDataType","visibleColumns","getVisibleColumns","exportColumns","formatExportColumns","exportRows","formatExportRows","_getVisibleColumns","getResultViewType","getTableInitialColumns","forEach","column","visible","push","getTableColumns","_formatExportColumns","formattedAttributes","itemattributes","visibleColumn","type","TITLE","TITLE_DESCRIPTION","label","name","property","p13NColumnName","String","columnType","DETAIL","concat","formatMergedColumn","formatSeparateColumns","_formatMergedColumn","attributeId","_formatSeparateColumns","matchedAttribute","find","formattedAttribute","sinaAttribute","id","formatColumnsForGroupAttribute","formatColumnForSingleAttribute","_formatColumnsForGroupAttribute","attribute","columns","attributesInGroup","attributes","attributeInGroup","childColumns","_formatColumnForSingleAttribute","isNumberType","Number","_formatExportRows","formattedResult","formatExportRow","_formatExportRow","exportRow","title","titleDescription","formatMergedCell","formatSeparateCells","_formatMergedCell","key","value","_formatSeparateCells","formatCellsForGroupAttribute","formatCellsForSingleAttribute","_formatCellsForGroupAttribute","cells","childCells","_formatCellsForSingleAttribute","valueFormatted","_isNumberType","metadata","Double","Integer","_doUI5Export","oSettings","workbook","fileName","dataSource","build","then","_lockUI","exportButtonId","document","querySelectorAll","exportButton","getElementById","setEnabled","busyIndicator","setBusy","_unlockUI"],"sources":["SearchSpreadsheet.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../i18n\";\nimport Spreadsheet from \"sap/ui/export/Spreadsheet\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport ErrorHandler from \"../error/ErrorHandler\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport Button from \"sap/m/Button\";\nimport { SearchResultSet } from \"../sinaNexTS/sina/SearchResultSet\";\nimport SearchResultFormatter, {\n    FormattedResultItem,\n    FormattedResultItemAttribute,\n} from \"sap/esh/search/ui/SearchResultFormatter\";\nimport { Column } from \"sap/esh/search/ui/SearchResultTableFormatter\";\nimport Element from \"sap/ui/core/Element\";\nimport { TableColumnType } from \"../SearchResultTableColumnType\";\nimport { SearchResultSetItemAttributeGroup } from \"../sinaNexTS/sina/SearchResultSetItemAttributeGroup\";\nimport { SearchResultSetItemAttribute } from \"../sinaNexTS/sina/SearchResultSetItemAttribute\";\nimport { AttributeType } from \"../sinaNexTS/sina/AttributeType\";\nimport { SearchResultSetItemAttributeBase } from \"../sinaNexTS/sina/SearchResultSetItemAttributeBase\";\nimport { EdmType } from \"sap/ui/export/library\";\nimport MessageBox from \"sap/m/MessageBox\";\n// import Dialog from \"sap/m/Dialog\";\n// import Text from \"sap/m/Text\";\n// import VerticalLayout from \"sap/ui/layout/VerticalLayout\";\n// import RadioButtonGroup from \"sap/m/RadioButtonGroup\";\n// import RadioButton from \"sap/m/RadioButton\";\n// import MessageStrip from \"sap/m/MessageStrip\";\n\ninterface ExportColumn {\n    label?: string; // UI5 defined property, column label\n    property?: string; // UI5 defined property, unified id (p13NColumnName or attributeId)\n    type?: string; // UI5 defined property, excel data type\n    columnType?: TableColumnType; // column type\n}\ninterface ExportRow {\n    [property: string]: number | string;\n}\n\ninterface ExportData {\n    exportColumns: Array<ExportColumn>;\n    exportRows: Array<ExportRow>;\n}\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchSpreadsheet extends Controller {\n    private model: SearchModel;\n    private exportDataType: \"formatted\" | \"technical\";\n    private visibleColumns: Array<Column>;\n    private limit: number = 1000;\n\n    async onExport(model: SearchModel): Promise<void> {\n        this.model = model;\n\n        if (this.model.getProperty(\"/boCount\") > this.limit) {\n            MessageBox.information(i18n.getText(\"exportDataInfo\"), {\n                actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],\n                emphasizedAction: MessageBox.Action.OK,\n                onClose: async (oAction: string) => {\n                    let isExport;\n                    if (oAction == MessageBox.Action.OK) {\n                        isExport = true;\n                    }\n                    if (oAction == MessageBox.Action.CANCEL) {\n                        isExport = false;\n                    }\n                    await this.controlExport(isExport);\n                },\n                styleClass: \"sapUshellSearchResultExportDialog\",\n            });\n        } else {\n            await this.controlExport(true);\n        }\n    }\n\n    private async controlExport(isExport: boolean): Promise<void> {\n        try {\n            this.lockUI();\n            if (!isExport) {\n                return;\n            }\n            const exportData = await this.formatExportData();\n            await this.doUI5Export(exportData);\n        } catch (error) {\n            const errorHandler = ErrorHandler.getInstance();\n            errorHandler.onError(error);\n        } finally {\n            this.unlockUI();\n        }\n    }\n\n    private async formatExportData(): Promise<ExportData> {\n        // search query\n        const exportQuery = this.model.query.clone();\n        exportQuery.setCalculateFacets(false);\n        exportQuery.setTop(this.limit);\n\n        // search result format\n        const searchResultSet = (await exportQuery.getResultSetAsync()) as SearchResultSet;\n        const formatter = new SearchResultFormatter(this.model);\n        const formattedResults = formatter.format(searchResultSet, exportQuery.filter.searchTerm, {\n            suppressHighlightedValues: true,\n        });\n\n        // export data type\n        this.exportDataType = \"technical\"; // default value type\n\n        // UI visible columns\n        this.visibleColumns = this.getVisibleColumns();\n\n        // export columns\n        const exportColumns = this.formatExportColumns(formattedResults);\n\n        // export rows\n        const exportRows = this.formatExportRows(formattedResults);\n\n        return { exportColumns: exportColumns, exportRows: exportRows };\n    }\n\n    private getVisibleColumns(): Array<Column> {\n        const visibleColumns = [];\n\n        if (this.model.getResultViewType() !== \"searchResultTable\") {\n            // export columns: initial state columns, original ordering, first 6/7 visible\n            this.model.getTableInitialColumns().forEach((column) => {\n                if (column.visible === true) {\n                    visibleColumns.push(column);\n                }\n            });\n        } else {\n            // export columns: real-time table visible columns\n            this.model.getTableColumns(false).forEach((column) => {\n                if (column.visible === true) {\n                    visibleColumns.push(column);\n                }\n            });\n        }\n\n        return visibleColumns;\n    }\n\n    private formatExportColumns(formattedResults: Array<FormattedResultItem>): Array<ExportColumn> {\n        const formattedAttributes = formattedResults[0].itemattributes;\n        let exportColumns = [];\n\n        for (const visibleColumn of this.visibleColumns) {\n            switch (visibleColumn.type) {\n                case TableColumnType.TITLE:\n                case TableColumnType.TITLE_DESCRIPTION:\n                    exportColumns.push({\n                        label: visibleColumn.name,\n                        property: visibleColumn.p13NColumnName,\n                        type: EdmType.String,\n                        columnType: visibleColumn.type,\n                    });\n                    break;\n\n                case TableColumnType.DETAIL:\n                    if (this.exportDataType === \"formatted\") {\n                        // export single attribute as one column\n                        // export group attribute as one merged column\n                        exportColumns = exportColumns.concat([this.formatMergedColumn(visibleColumn)]);\n                    } else {\n                        // export single attribute as one column\n                        // export group attribute as multiple separate columns\n                        exportColumns = exportColumns.concat(\n                            this.formatSeparateColumns(visibleColumn, formattedAttributes)\n                        );\n                    }\n                    break;\n\n                default:\n                    // case TableColumnType.RELATED_APPS:\n                    // case TableColumnType.EXTEND:\n                    // don't export\n                    break;\n            }\n        }\n\n        return exportColumns;\n    }\n\n    private formatMergedColumn(visibleColumn: Column): ExportColumn {\n        return {\n            label: visibleColumn.name,\n            property: visibleColumn.attributeId,\n            type: EdmType.String,\n            columnType: TableColumnType.DETAIL,\n        };\n    }\n\n    private formatSeparateColumns(\n        visibleColumn: Column,\n        formattedAttributes: Array<FormattedResultItemAttribute>\n    ): Array<ExportColumn> {\n        const matchedAttribute = formattedAttributes.find(\n            (formattedAttribute) =>\n                (formattedAttribute?.sinaAttribute as SearchResultSetItemAttribute)?.id ===\n                visibleColumn.attributeId\n        );\n        const sinaAttribute = matchedAttribute?.sinaAttribute as SearchResultSetItemAttribute;\n        if (sinaAttribute) {\n            if (sinaAttribute instanceof SearchResultSetItemAttributeGroup) {\n                return this.formatColumnsForGroupAttribute(sinaAttribute);\n            } else {\n                return [this.formatColumnForSingleAttribute(sinaAttribute)];\n            }\n        }\n        return [];\n    }\n\n    private formatColumnsForGroupAttribute(\n        attribute: SearchResultSetItemAttributeGroup\n    ): Array<ExportColumn> {\n        const columns = [];\n        const attributesInGroup = attribute?.attributes || [];\n        for (const attributeInGroup of attributesInGroup) {\n            if (attributeInGroup?.attribute instanceof SearchResultSetItemAttributeGroup) {\n                const childColumns = this.formatColumnsForGroupAttribute(attributeInGroup?.attribute);\n                columns.push(...childColumns);\n            } else {\n                columns.push(this.formatColumnForSingleAttribute(attributeInGroup.attribute));\n            }\n        }\n        return columns;\n    }\n\n    private formatColumnForSingleAttribute(attribute: SearchResultSetItemAttributeBase): ExportColumn {\n        // return array of single column\n        if (attribute) {\n            return {\n                label: attribute?.label,\n                property: attribute?.id,\n                type: this.isNumberType(attribute) ? EdmType.Number : EdmType.String,\n                columnType: TableColumnType.DETAIL,\n            };\n        }\n        return {};\n    }\n\n    private formatExportRows(formattedResults: Array<FormattedResultItem>): Array<ExportRow> {\n        const exportRows = [];\n        for (const formattedResult of formattedResults) {\n            exportRows.push(this.formatExportRow(formattedResult));\n        }\n        return exportRows;\n    }\n\n    private formatExportRow(formattedResult: FormattedResultItem): ExportRow {\n        let exportRow = {};\n        for (const visibleColumn of this.visibleColumns) {\n            switch (visibleColumn.type) {\n                case TableColumnType.TITLE:\n                    exportRow[visibleColumn.p13NColumnName] = formattedResult.title;\n                    break;\n\n                case TableColumnType.TITLE_DESCRIPTION:\n                    exportRow[visibleColumn.p13NColumnName] = formattedResult.titleDescription;\n                    break;\n\n                case TableColumnType.DETAIL:\n                    if (this.exportDataType === \"formatted\") {\n                        // export single attribute formatted value as one cell\n                        // export group attribute formatted values as one merged cell\n                        exportRow = {\n                            ...exportRow,\n                            ...this.formatMergedCell(visibleColumn, formattedResult.itemattributes),\n                        };\n                    } else {\n                        // export single attribute technical value as one cell\n                        // export group attribute technical values as multiple separate cells\n                        exportRow = {\n                            ...exportRow,\n                            ...this.formatSeparateCells(visibleColumn, formattedResult.itemattributes),\n                        };\n                    }\n                    break;\n\n                default:\n                    // TableColumnType.DETAIL\n                    // TableColumnType.RELATED_APPS\n                    // TableColumnType.EXTEND\n                    // don't export\n                    break;\n            }\n        }\n        return exportRow;\n    }\n\n    private formatMergedCell(\n        visibleColumn: Column,\n        formattedAttributes: Array<FormattedResultItemAttribute>\n    ): ExportRow {\n        const matchedAttribute = formattedAttributes.find(\n            (formattedAttribute) => formattedAttribute?.sinaAttribute?.id === visibleColumn.attributeId\n        );\n        if (matchedAttribute) {\n            const key = visibleColumn?.attributeId;\n            const value = matchedAttribute?.value || \"\"; // formatted value\n            return {\n                [key]: value,\n            };\n        }\n        return {};\n    }\n\n    private formatSeparateCells(\n        visibleColumn: Column,\n        formattedAttributes: Array<FormattedResultItemAttribute>\n    ): ExportRow {\n        const matchedAttribute = formattedAttributes.find(\n            (formattedAttribute) => formattedAttribute?.sinaAttribute?.id === visibleColumn.attributeId\n        );\n        if (matchedAttribute) {\n            const sinaAttribute = matchedAttribute?.sinaAttribute as SearchResultSetItemAttribute;\n            if (sinaAttribute instanceof SearchResultSetItemAttributeGroup) {\n                return this.formatCellsForGroupAttribute(sinaAttribute);\n            } else {\n                return this.formatCellsForSingleAttribute(sinaAttribute);\n            }\n        }\n        return {};\n    }\n\n    private formatCellsForGroupAttribute(attribute: SearchResultSetItemAttributeGroup): ExportRow {\n        let cells = {};\n        const attributesInGroup = attribute?.attributes || [];\n        for (const attributeInGroup of attributesInGroup) {\n            // if (attributeInGroup?.attribute?.metadata?.type === AttributeType.Group) {\n            if (attributeInGroup?.attribute instanceof SearchResultSetItemAttributeGroup) {\n                const childCells = this.formatCellsForGroupAttribute(attributeInGroup?.attribute);\n                cells = { ...cells, ...childCells };\n            } else {\n                cells = {\n                    ...cells,\n                    ...this.formatCellsForSingleAttribute(\n                        attributeInGroup.attribute as SearchResultSetItemAttribute\n                    ),\n                };\n            }\n        }\n        return cells;\n    }\n\n    private formatCellsForSingleAttribute(attribute: SearchResultSetItemAttribute): ExportRow {\n        if (attribute) {\n            const key = attribute?.id;\n            let value;\n            // compatible to old version\n            if (this.isNumberType(attribute)) {\n                value = attribute?.value || \"\"; // technical value\n            } else {\n                value = attribute?.valueFormatted || \"\";\n            }\n            return {\n                [key]: value,\n            };\n        }\n        return {};\n    }\n\n    private isNumberType(attribute: SearchResultSetItemAttributeBase): boolean {\n        if (\n            attribute?.metadata?.type === AttributeType.Double ||\n            attribute?.metadata?.type === AttributeType.Integer\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private async doUI5Export(exportData: ExportData): Promise<void> {\n        const oSettings = {\n            workbook: {\n                columns: exportData.exportColumns,\n            },\n            fileName: i18n.getText(\"exportFileName\"),\n            dataSource: exportData.exportRows,\n        };\n\n        new Spreadsheet(oSettings).build().then(\n            () => {\n                // do nothing\n            },\n            (error) => {\n                const errorHandler = ErrorHandler.getInstance();\n                errorHandler.onError(error);\n            }\n        );\n    }\n\n    private lockUI(): void {\n        const exportButtonId = document?.querySelectorAll('[id$=\"ushell-search-result-dataExportButton\"]')[0]\n            ?.id;\n        const exportButton = Element.getElementById(exportButtonId) as unknown as Button;\n        exportButton?.setEnabled(false);\n        this.model?.busyIndicator?.setBusy(true);\n    }\n\n    private unlockUI(): void {\n        const exportButtonId = document?.querySelectorAll('[id$=\"ushell-search-result-dataExportButton\"]')[0]\n            ?.id;\n        const exportButton = Element.getElementById(exportButtonId) as unknown as Button;\n        exportButton?.setEnabled(true);\n        this.model?.busyIndicator?.setBusy(false);\n    }\n}\n"],"mappings":"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","ignoreList":[]}