{"version":3,"file":"SearchInput.js","names":["sap","ui","define","__i18n","Input","Label","Text","sap_m_library","Column","ColumnListItem","CustomListItem","FlexItemData","BusyIndicator","FlexBox","Icon","HorizontalLayout","VerticalLayout","BindingMode","SearchHelper","__SuggestionType","__SearchShellHelperHorizonTheme","____eventlogging_UserEvents","__UIEvents","Device","__SearchObjectSuggestionImage","Element","EventBus","Log","Link","_interopRequireDefault","obj","__esModule","default","i18n","FlexAlignItems","FlexDirection","FlexJustifyContent","ListType","SuggestionType","UISuggestionType","isSearchSuggestion","SearchShellHelperHorizonTheme","UserEventType","UIEvents","SearchObjectSuggestionImage","SearchInput","extend","renderer","apiVersion","constructor","_constructor","sId","options","this","logger","getLogger","triggerSuggestionItemSelected","phone","system","Input.prototype.constructor.call","decorateHandleListNavigation","setStartSuggestion","setWidth","setShowValueStateMessage","setShowTableSuggestionValueHelp","setEnableSuggestionsHighlighting","setShowSuggestion","setFilterSuggests","addSuggestionColumn","attachSuggestionItemSelected","handleSuggestionItemSelected","bind","setAutocomplete","setTooltip","getText","bindProperty","path","mode","OneWay","attachLiveChange","handleLiveChange","setValueLiveUpdate","parts","formatter","initializingObjSearch","bindAggregation","factory","oContext","suggestionItemFactory","addStyleClass","_bUseDialog","_bFullScreen","listNavigationMode","isMobileDevice","_isMobileDevice","onfocusin","_onfocusin","oEvent","Input.prototype.onfocusin.call","relatedTarget","classList","contains","isOpen","oModel","getModel","getSearchBoxTerm","length","config","bRecentSearches","aiSuggestions","doSuggestion","onsapenter","_onsapenter","args","isSuggestionFocused","getFocusedListItem","invalidateQuery","triggerSearch","prototype","apply","updateSelectionFromList","_updateSelectionFromList","item","_triggerSearch","msgPopupId","getProperty","messagePopup","getElementById","close","setVisible","subscribeOnlyOnce","ESHSearchFinished","autoStartApp","getValue","trim","isUshell","setValue","isNavigationAllowed","navigateToSearchApp","destroySuggestionRows","abortSuggestions","_isNavigationAllowed","searchBoxTerm","handler","searchTermHandlers","searchTermWasHandled","handleSearchTerm","focus","_decorateHandleListNavigation","suggestionPopover","handleListNavigation","decorated","_handleLiveChange","domRef","getDomRef","input","querySelector","setAttribute","_handleSuggestionItemSelected","suggestion","getParameter","getBindingContext","getObject","suggestionTerm","searchTerm","dataSource","getDataSource","targetURL","url","type","uiSuggestionType","Header","eventLogger","logEvent","SUGGESTION_SELECT","suggestionTitle","title","suggestionType","targetUrl","dataSourceKey","id","recentlyUsedStorage","Object","addItem","selectText","Search","titleNavigation","performNavigation","Transaction","App","indexOf","getHashFromUrl","decodeURIComponent","setSearchBoxTerm","query","filter","setDataSource","notifySubscribers","getInstance","publish","window","hasher","prependHash","slice","setHash","location","href","logRecentActivity","open","isSearchFieldExpandedByDefault","require","collapseSearch","DataSource","SearchTermData","SearchTermAI","SearchTermHistory","objectSuggestion","_logRecentActivity","Config","AppType","bLogRecentActivity","last","oRecentEntry","appType","URL","appId","ushell","Container","getRenderer","_suggestionItemFactory","objectSuggestionItemFactory","headerSuggestionItemFactory","busyIndicatorSuggestionItemFactory","regularSuggestionItemFactory","_busyIndicatorSuggestionItemFactory","cell","content","size","listItem","cells","Inactive","getVisible","assembleListNavigationModeGetVisibleFunction","_headerSuggestionItemFactory","items","leftItems","uiSuggestionTypeOfSuggestionsInSection","icon","src","push","label","text","leftContent","direction","Row","justifyContent","Start","helpLink","rightContent","target","SpaceBetween","_assembleListNavigationModeGetVisibleFunction","assembleObjectSuggestionLabels","_assembleObjectSuggestionLabels","labels","label1","addEventDelegate","onAfterRendering","boldTagUnescaper","label2","vLayout","_objectSuggestionItemFactory","suggestionParts","imageExists","imageUrl","startsWith","isCircular","suggestionPartsToAdd","Active","_regularSuggestionItemFactory","filterIcon","layoutData","shrinkFactor","minWidth","wrapping","getPath","domref","innerHTML","hasSpan","lastIndexOf","userEntered","notUserEntered","notUserEnteredHTML","boldTagUnescaperForStrings","alignItems","Center","_navigateToSearchApp","oSearchModel","isSearchAppActive","fireSearchQuery","resetSearchResultItemMemory","sHash","createSearchNavigationTargetCurrentState","updateUrl","hash","_onAfterRendering","Input.prototype.onAfterRendering.call","form","document","createElement","style","setProperty","addEventListener","e","preventDefault","inputParent","parentElement","appendChild","getId","onValueRevertedByEscape","_onValueRevertedByEscape","onsapescape","_onsapescape","Input.prototype.onsapescape.call"],"sources":["SearchInput.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../../i18n\";\nimport Input, { $InputSettings, Input$SuggestionItemSelectedEvent } from \"sap/m/Input\";\nimport Label from \"sap/m/Label\";\nimport Text from \"sap/m/Text\";\nimport { FlexAlignItems, FlexDirection, FlexJustifyContent, ListType } from \"sap/m/library\";\nimport Column from \"sap/m/Column\";\nimport ColumnListItem from \"sap/m/ColumnListItem\";\nimport CustomListItem from \"sap/m/CustomListItem\";\nimport FlexItemData from \"sap/m/FlexItemData\";\nimport BusyIndicator from \"sap/m/BusyIndicator\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport Icon from \"sap/ui/core/Icon\";\nimport HorizontalLayout from \"sap/ui/layout/HorizontalLayout\";\nimport VerticalLayout from \"sap/ui/layout/VerticalLayout\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport * as SearchHelper from \"../../SearchHelper\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport Context from \"sap/ui/model/Context\";\nimport SuggestionType, {\n    Suggestion,\n    SuggestionHeader,\n    Type as UISuggestionType,\n    UISinaObjectSuggestion,\n    isSearchSuggestion,\n} from \"../../suggestions/SuggestionType\";\nimport SearchShellHelperHorizonTheme from \"../../SearchShellHelperHorizonTheme\";\nimport { UserEventType } from \"../../eventlogging/UserEvents\";\nimport UIEvents from \"../../UIEvents\";\nimport Device from \"sap/ui/Device\";\nimport SearchObjectSuggestionImage from \"./SearchObjectSuggestionImage\";\nimport Element from \"sap/ui/core/Element\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Log from \"sap/base/Log\";\nimport Link from \"sap/m/Link\";\nimport MessagePopover from \"sap/m/MessagePopover\";\n\ndeclare global {\n    interface Window {\n        hasher: {\n            prependHash: string;\n            getHash: () => string;\n            setHash: (hash: string) => void;\n        };\n    }\n}\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchInput extends Input {\n    private _bUseDialog: boolean;\n    private _bFullScreen: boolean;\n    private logger = Log.getLogger(\"sap.esh.search.ui.SearchInput\");\n    private listNavigationMode: boolean;\n    triggerSuggestionItemSelected = false;\n\n    constructor(sId?: string, options?: $InputSettings) {\n        // ugly hack disable fullscreen input on phone - start     // ToDo: remove by switching search input to sap.m.SearchField\n        // see also method isMobileDevice\n        const phone = Device.system.phone;\n        try {\n            (Device.system as any).phone = false; // ToDo, 'phone' is a constant (read-only)\n            super(sId, options);\n        } finally {\n            (Device.system as any).phone = phone; // ToDo, 'phone' is a constant (read-only)\n            // ugly hack - end\n        }\n\n        this.decorateHandleListNavigation();\n        this.setStartSuggestion(0);\n        this.setWidth(\"100%\");\n        this.setShowValueStateMessage(false);\n        this.setShowTableSuggestionValueHelp(false);\n        this.setEnableSuggestionsHighlighting(false);\n        this.setShowSuggestion(true);\n        this.setFilterSuggests(false);\n        this.addSuggestionColumn(new Column(\"\"));\n        this.attachSuggestionItemSelected(this.handleSuggestionItemSelected.bind(this));\n        this.setAutocomplete(false);\n        this.setTooltip(i18n.getText(\"search\"));\n        this.bindProperty(\"placeholder\", {\n            path: \"/searchTermPlaceholder\",\n            mode: BindingMode.OneWay,\n        });\n        this.attachLiveChange(this.handleLiveChange.bind(this));\n        this.setValueLiveUpdate(true);\n        this.bindProperty(\"enabled\", {\n            parts: [\n                {\n                    path: \"/initializingObjSearch\",\n                },\n            ],\n            formatter: (initializingObjSearch) => !initializingObjSearch,\n        });\n        this.bindAggregation(\"suggestionRows\", {\n            path: \"/suggestions\",\n            factory: (sId, oContext) => this.suggestionItemFactory(sId, oContext),\n        });\n        this.bindProperty(\"value\", { path: \"/uiFilter/searchTerm\" });\n        this.addStyleClass(\"searchInput\");\n\n        // disable fullscreen input on phone\n        this._bUseDialog = false;\n        this._bFullScreen = false;\n\n        this.listNavigationMode = false;\n    }\n\n    isMobileDevice(): boolean {\n        // ugly hack disable fullscreen input on phone - start\n        return false;\n        // ugly hack disable fullscreen input on phone - end\n    }\n\n    onfocusin(oEvent: JQuery.Event): void {\n        // keep type 'JQuery.Event' here, because of sap.m.Input, function 'onfocusin'\n        super.onfocusin(oEvent);\n        const relatedTarget = (oEvent as unknown as FocusEvent).relatedTarget as HTMLElement | null;\n        if (\n            relatedTarget?.classList?.contains(\"searchSuggestionColumnListItem\") ||\n            this[\"_oSuggPopover\"].isOpen()\n        ) {\n            // this ignores focus events caused by clicking on suggestions items\n            // focus events on suggestions items my cause side:\n            // sometimes focus event sometimes is faster then suggestionItemSelected\n            // in case suggestion list is cleared by focus event in suggestion handler\n            // the subsequent suggestionsItem selected event fails\n            return;\n        }\n        const oModel = this.getModel() as SearchModel;\n        if (\n            oModel.getSearchBoxTerm().length === 0 &&\n            (oModel.config.bRecentSearches || oModel.config.aiSuggestions)\n        ) {\n            oModel.doSuggestion();\n        }\n    }\n\n    onsapenter(...args: Array<unknown>): void {\n        // if (!(this[\"_oSuggestionPopup\"]?.isOpen() && this[\"_oSuggPopover\"].getFocusedListItem())) {\n        //     // if (!(this._oSuggestionPopup && this._oSuggestionPopup.isOpen() && this.[\"_oSuggPopover\"]._iPopupListSelectedIndex >= 0)) {\n        //     // check that enter happened in search input box and not on a suggestion item\n        //     // enter on a suggestion is not handled in onsapenter but in handleSuggestionItemSelected\n        //     (this.getModel() as SearchModel).invalidateQuery();\n        //     this.triggerSearch();\n        // }\n        const isSuggestionFocused =\n            this[\"_oSuggestionPopup\"]?.isOpen() && this[\"_oSuggPopover\"].getFocusedListItem();\n        if (!isSuggestionFocused) {\n            // no suggestion item focused -> trigger search\n            (this.getModel() as SearchModel).invalidateQuery();\n            this.triggerSearch();\n            Input.prototype.onsapenter.apply(this, args);\n        } else {\n            // sugestion item focused -> trigger suggestion\n            this.triggerSuggestionItemSelected = true;\n            Input.prototype.onsapenter.apply(this, args);\n            this.triggerSuggestionItemSelected = false;\n        }\n        // Input.prototype.onsapenter.apply(this, args);\n    }\n\n    // overwrite of UI5 base class method\n    // this method is called by UI5 and triggers the suggestionItemSelected event\n    // the method is called when\n    // 1) suggestion popup is closed by focus out\n    // 2) suggestion popup is closed by enter on suggestion item\n    // for use case 1) we don't want that the suggestionItemSelectedEvent therefore we set triggerSelectionItemSelected=false\n    // for use case 2) the suggestionItemSelectedEvent shall be created therefore in method onsapenter we set temporary triggerSelectionItemSelected=true\n    updateSelectionFromList(item: unknown): void {\n        if (this.triggerSuggestionItemSelected) {\n            // default UI5 logic which triggers handleSuggestionItemSelected\n            // super.updateSelectionFromList(item);\n            (Input.prototype as any).updateSelectionFromList.apply(this, [item]); // alternative writing to avoid super private method call\n        } else {\n            // special logic in order to prevent that UI5 triggers handleSuggestionItemSelected\n            // this.setSelectionUpdatedFromList(false);\n            this[\"setSelectionUpdatedFromList\"](false); // alternative writing to avoid super private method call\n        }\n    }\n\n    triggerSearch(): void {\n        // the footer is rerendered after each search in stand alone UI -> error popover losts parent and jumps to the screen top.\n        // solution: if the error popover shows, set footer invisible before next search.\n        // popover.close() is not working. It is closed after footer invisible, so it still jumps\n        const msgPopupId = this.getModel().getProperty(\"/messagePopoverControlId\");\n        const messagePopup = Element.getElementById(msgPopupId) as MessagePopover;\n        if (this.getModel().getProperty(\"/errors\").length > 0 && messagePopup?.isOpen()) {\n            messagePopup.close();\n            messagePopup.setVisible(false);\n        }\n        // it is necessay to do this in search input (and not in search model) because otherwise navigating back from the app to the\n        // search UI would result in a repeated navigation to the app\n        SearchHelper.subscribeOnlyOnce(\n            \"triggerSearch\",\n            UIEvents.ESHSearchFinished,\n            function () {\n                (this.getModel() as SearchModel).autoStartApp();\n            },\n            this\n        );\n        const oModel = this.getModel() as SearchModel;\n        if (this.getValue().trim() === \"\" && oModel.config.isUshell) {\n            this.setValue(\"*\"); // special behaviour for S/4\n        }\n        if (this.isNavigationAllowed()) {\n            this.navigateToSearchApp();\n        }\n        this.destroySuggestionRows();\n        oModel.abortSuggestions();\n    }\n\n    isNavigationAllowed(): boolean {\n        const oModel = this.getModel() as SearchModel;\n        const searchBoxTerm = this.getValue();\n        for (const handler of oModel.searchTermHandlers) {\n            const searchTermWasHandled = handler.handleSearchTerm(searchBoxTerm);\n            if (searchTermWasHandled === true) {\n                this.focus(); // make sure that suggestions are visible in case there is an error message to show therein\n                return false;\n            }\n        }\n        return true;\n    }\n\n    decorateHandleListNavigation() {\n        // ugly modifiaction: headers and busy indicator in suggestions shall not be selectable\n        const suggestionPopover = this[\"_oSuggPopover\"];\n        if (\n            suggestionPopover &&\n            suggestionPopover.handleListNavigation &&\n            !suggestionPopover.handleListNavigation.decorated\n        ) {\n            const handleListNavigation = suggestionPopover.handleListNavigation;\n            suggestionPopover.handleListNavigation = (...args: unknown[]) => {\n                this.listNavigationMode = true;\n                handleListNavigation.apply(suggestionPopover, args);\n                // -handleListNavigation calls getVisible on the suggestion items in order to determine to which suggestion items we can navigate\n                // -for suggestion items of type 'header' or 'busy indicator' (to which no navigation shall take place) the getVisible function is overwritten\n                // -the overwritten getVisible function returns false only for listNavigationMode=true\n                // ==> this way suggestion items of type 'header' or 'busy indicator' are visible but we cannot navigate to them\n                this.listNavigationMode = false;\n            };\n            suggestionPopover.handleListNavigation.decorated = true;\n        }\n    }\n\n    handleLiveChange(): void {\n        const oModel = this.getModel() as SearchModel;\n        if (oModel.getSearchBoxTerm().length > 0 || oModel.config.bRecentSearches) {\n            oModel.doSuggestion();\n        } else {\n            this.destroySuggestionRows();\n            oModel.abortSuggestions();\n            // set aria-expanded to false on the input element\n            const domRef = this.getDomRef();\n            if (domRef) {\n                const input = domRef.querySelector(\"input\");\n                if (input) {\n                    input.setAttribute(\"aria-expanded\", \"false\");\n                }\n            }\n        }\n    }\n\n    handleSuggestionItemSelected(oEvent: Input$SuggestionItemSelectedEvent): void {\n        const oModel = this.getModel() as SearchModel;\n        const searchBoxTerm = oModel.getSearchBoxTerm();\n        const suggestion = oEvent.getParameter(\"selectedRow\").getBindingContext().getObject() as Suggestion;\n        const suggestionTerm = suggestion.searchTerm || \"\";\n        const dataSource = suggestion.dataSource || oModel.getDataSource();\n        let targetURL = suggestion.url;\n\n        const type = suggestion.uiSuggestionType;\n        if (type === SuggestionType.Header || type === SuggestionType.BusyIndicator) {\n            // workaroung in case someonw clicks on a header\n            this.destroySuggestionRows();\n            this.setValue(\"\");\n            return;\n        }\n\n        oModel.eventLogger.logEvent({\n            type: UserEventType.SUGGESTION_SELECT,\n            suggestionTitle: suggestion.title,\n            suggestionType: type,\n            suggestionTerm: suggestionTerm,\n            searchTerm: searchBoxTerm,\n            targetUrl: targetURL,\n            dataSourceKey: dataSource ? dataSource.id : \"\",\n        });\n\n        if (oModel.config.bRecentSearches && oModel.recentlyUsedStorage && type === SuggestionType.Object) {\n            // Object Suggestions in DSP open in new tab, thus we need to save it here.\n            // All other suggestions trigger a search which will be added as a recent item through search model.\n            oModel.recentlyUsedStorage.addItem(suggestion);\n        }\n\n        // remove any selection\n        this.selectText(0, 0);\n\n        switch (type) {\n            case SuggestionType.Search: {\n                if (isSearchSuggestion(suggestion)) {\n                    suggestion.titleNavigation.performNavigation();\n                }\n                break;\n            }\n            case SuggestionType.Transaction:\n            case SuggestionType.App:\n                // app or transactions suggestions -> start app\n\n                // starting the app by hash change closes the suggestion popup\n                // closing the suggestion popup again triggers the suggestion item selected event\n                // in order to avoid to receive the event twice the suggestions are destroyed\n                this.destroySuggestionRows();\n                oModel.abortSuggestions();\n\n                if (targetURL[0] === \"#\") {\n                    if (\n                        targetURL.indexOf(\"#Action-search\") === 0 &&\n                        (targetURL === SearchHelper.getHashFromUrl() ||\n                            targetURL === decodeURIComponent(SearchHelper.getHashFromUrl()))\n                    ) {\n                        // ugly workaround\n                        // in case the app suggestion points to the search app with query identical to current query\n                        // --> do noting except: restore query term + focus again the first item in the result list\n                        oModel.setSearchBoxTerm(oModel.query.filter.searchTerm, false);\n                        oModel.setDataSource(oModel.query.filter.dataSource, false);\n                        oModel.notifySubscribers(UIEvents.ESHSearchFinished);\n                        EventBus.getInstance().publish(UIEvents.ESHSearchFinished);\n                        return;\n                    }\n                    if (window[\"hasher\"]) {\n                        if (targetURL[1] === window.hasher.prependHash) {\n                            // hasher preprends a \"prependHash\" character between \"#\" and the rest.\n                            // so we remove the same character to have the desired string in the end after hasher changed it\n                            // this avoids a wrong url if the application does not use window.hasher.getHash which removes prependHash again\n                            targetURL = targetURL.slice(0, 1) + targetURL.slice(2);\n                        }\n                        window[\"hasher\"].setHash(targetURL);\n                    } else {\n                        window.location.href = targetURL;\n                    }\n                } else {\n                    // special logging: only for urls started via suggestions\n                    // (apps/urls started via click ontile have logger in tile click handler)\n                    this.logRecentActivity(suggestion);\n\n                    window.open(targetURL, \"_blank\", \"noopener,noreferrer\");\n                    oModel.setSearchBoxTerm(\"\", false);\n                }\n\n                // close the search field if suggestion is not search app\n                if (oModel.config.isUshell && targetURL.indexOf(\"#Action-search\") !== 0) {\n                    // 1) navigate to an app <> search\n                    if (!SearchShellHelperHorizonTheme.isSearchFieldExpandedByDefault()) {\n                        sap.ui.require(\"sap/esh/search/ui/SearchShellHelper\").collapseSearch();\n                    }\n                } else {\n                    // 2) navigate to search app\n                    this.focus();\n                }\n                break;\n            case SuggestionType.DataSource:\n                // data source suggestions\n                // -> change datasource in dropdown\n                // -> do not start search\n                oModel.setDataSource(dataSource, false);\n                oModel.setSearchBoxTerm(\"\", false);\n                this.focus();\n                break;\n            case SuggestionType.SearchTermData:\n            case SuggestionType.SearchTermAI:\n                // -> change search term + change datasource + start search\n                oModel.setDataSource(dataSource, false);\n                oModel.setSearchBoxTerm(suggestionTerm, false);\n                oModel.invalidateQuery();\n                this.navigateToSearchApp();\n                break;\n            case SuggestionType.SearchTermHistory:\n                // history\n                // -> change search term + change datasource + start search\n                oModel.setDataSource(dataSource, false);\n                oModel.setSearchBoxTerm(suggestionTerm, false);\n                oModel.invalidateQuery();\n                this.navigateToSearchApp();\n                break;\n            case SuggestionType.Object: {\n                const objectSuggestion = suggestion as UISinaObjectSuggestion;\n                if (objectSuggestion.titleNavigation) {\n                    objectSuggestion.titleNavigation.performNavigation();\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    logRecentActivity(suggestion: Suggestion): void {\n        // load ushell deps lazy only in case of FLP\n        sap.ui.require([\"sap/ushell/Config\", \"sap/ushell/services/AppType\"], function (Config, AppType) {\n            const bLogRecentActivity =\n                Config.last(\"/core/shell/enableRecentActivity\") &&\n                Config.last(\"/core/shell/enableRecentActivityLogging\");\n            if (bLogRecentActivity) {\n                const oRecentEntry = {\n                    title: suggestion.title,\n                    appType: AppType.URL,\n                    url: suggestion.url,\n                    appId: suggestion.url,\n                };\n                ((window.sap.ushell as any).Container.getRenderer(\"fiori2\") as any).logRecentActivity(\n                    oRecentEntry\n                );\n            }\n        });\n    }\n\n    suggestionItemFactory(sId: string, oContext: Context): ColumnListItem {\n        // set aria-expanded to true on the input element\n        const domRef = this.getDomRef();\n        if (domRef) {\n            const input = domRef.querySelector(\"input\");\n            if (input) {\n                input.setAttribute(\"aria-expanded\", \"true\");\n            }\n        }\n        const suggestion = oContext.getObject() as Suggestion;\n        switch (suggestion.uiSuggestionType) {\n            case SuggestionType.Object:\n                return this.objectSuggestionItemFactory(sId, oContext);\n            case SuggestionType.Header:\n                return this.headerSuggestionItemFactory(sId, oContext);\n            case SuggestionType.BusyIndicator:\n                return this.busyIndicatorSuggestionItemFactory(/* sId, oContext */);\n            default:\n                return this.regularSuggestionItemFactory(sId, oContext);\n        }\n    }\n\n    busyIndicatorSuggestionItemFactory(/* sId: string, oContext: Context */): ColumnListItem {\n        const cell = new VerticalLayout(\"\", {\n            content: [\n                new BusyIndicator(\"\", {\n                    size: \"0.6rem\",\n                }),\n            ],\n        });\n\n        cell[\"getText\"] = () => {\n            return this.getValue();\n        };\n\n        const listItem = new ColumnListItem(\"\", {\n            cells: [cell],\n            type: ListType.Inactive,\n        });\n        listItem.addStyleClass(\"searchSuggestion\");\n        listItem.addStyleClass(\"searchBusyIndicatorSuggestion\");\n        listItem.getVisible = this.assembleListNavigationModeGetVisibleFunction();\n        return listItem;\n    }\n\n    headerSuggestionItemFactory(sId: string, oContext: Context): ColumnListItem {\n        const suggestion = oContext.getObject() as SuggestionHeader;\n        const items = [];\n\n        // left\n        const leftItems = [];\n        if (suggestion.uiSuggestionTypeOfSuggestionsInSection === UISuggestionType.SearchTermAI) {\n            const icon = new Icon({ src: \"sap-icon://ai\" });\n            icon.addStyleClass(\"sapUiTinyMarginEnd\");\n            leftItems.push(icon);\n        }\n        const label = new Label(\"\", {\n            text: { path: \"label\" },\n        });\n        leftItems.push(label);\n        const leftContent = new FlexBox(\"\", {\n            direction: FlexDirection.Row,\n            justifyContent: FlexJustifyContent.Start,\n            items: leftItems,\n        });\n        items.push(leftContent);\n\n        // right\n        if (suggestion.helpLink) {\n            const rightContent = new Link({\n                text: i18n.getText(\"searchTermAILernMoreLink\"),\n                target: \"_blank\",\n                href: suggestion.helpLink,\n            });\n            items.push(rightContent);\n        }\n\n        // flexbox containing left and right\n        const cell = new FlexBox(\"\", {\n            direction: FlexDirection.Row,\n            justifyContent: FlexJustifyContent.SpaceBetween,\n            items: items,\n        });\n        cell[\"getText\"] = () => {\n            //return this.getValue();\n            return suggestion.label;\n            // workaround: return \" \" -> header cannot be auto selected by sap.m.Input because\n            // input field text != suggestion.label \" \"\n        };\n\n        // column list item containing flexbo\n        const listItem = new ColumnListItem(\"\", {\n            cells: [cell],\n            type: ListType.Inactive,\n        });\n        listItem.addStyleClass(\"searchSuggestion\");\n        listItem.addStyleClass(\"searchHeaderSuggestion\");\n        listItem.getVisible = this.assembleListNavigationModeGetVisibleFunction();\n\n        return listItem;\n    }\n\n    assembleListNavigationModeGetVisibleFunction(): () => boolean {\n        return () => {\n            if (!this.listNavigationMode) {\n                return true; // without the special list navigation mode we return the default value true\n            }\n            // in list navigation mode\n            return false;\n        };\n    }\n\n    assembleObjectSuggestionLabels(suggestion: {\n        imageUrl?: string;\n        imageExists?: true;\n        imageIsCircular?: boolean;\n        exists?: false;\n        label2?: string;\n    }): VerticalLayout {\n        // first line: label 1\n        const labels = [];\n        const label1 = new Label(\"\", {\n            text: { path: \"label1\" },\n        });\n        label1.addEventDelegate(\n            {\n                onAfterRendering: () => {\n                    SearchHelper.boldTagUnescaper(label1.getDomRef() as HTMLElement);\n                },\n            },\n            label1\n        );\n        label1.addStyleClass(\"sapUshellSearchObjectSuggestion-Label1\");\n        labels.push(label1);\n\n        // second line: label 2\n        if (suggestion.label2) {\n            const label2 = new Label(\"\", {\n                text: { path: \"label2\" },\n            });\n            label2.addEventDelegate(\n                {\n                    onAfterRendering: () => {\n                        SearchHelper.boldTagUnescaper(label2.getDomRef() as HTMLElement);\n                    },\n                },\n                label2\n            );\n            label2.addStyleClass(\"sapUshellSearchObjectSuggestion-Label2\");\n            labels.push(label2);\n        }\n\n        const vLayout = new VerticalLayout(\"\", {\n            content: labels,\n        });\n        vLayout.addStyleClass(\"sapUshellSearchObjectSuggestion-Labels\");\n        return vLayout;\n    }\n\n    objectSuggestionItemFactory(sId: string, oContext: Context): ColumnListItem {\n        const suggestion = oContext.getObject() as {\n            imageUrl?: string;\n            imageExists?: true;\n            imageIsCircular?: boolean;\n            exists?: false;\n            label2?: string;\n        };\n        const suggestionParts = [];\n\n        // image\n        if (suggestion.imageExists && suggestion.imageUrl) {\n            if (suggestion.imageUrl.startsWith(\"sap-icon://\")) {\n                suggestionParts.push(\n                    new Icon(\"\", {\n                        src: suggestion.imageUrl,\n                    }).addStyleClass(\"sapUshellSearchObjectSuggestIcon\")\n                );\n            } else {\n                suggestionParts.push(\n                    new SearchObjectSuggestionImage(\"\", {\n                        src: { path: \"imageUrl\" },\n                        isCircular: { path: \"imageIsCircular\" },\n                    })\n                );\n            }\n        }\n\n        // labels\n        const suggestionPartsToAdd = this.assembleObjectSuggestionLabels(suggestion);\n        suggestionParts.push(suggestionPartsToAdd);\n\n        // combine image and labels\n        const cell = new HorizontalLayout(\"\", {\n            content: suggestionParts,\n        });\n        cell.addStyleClass(\"sapUshellSearchObjectSuggestion-Container\");\n\n        // there is an issue with focus on suggestions, which will be triggerd by loss of focus on the suggestion item\n        // workaround: to avoid auto focus on object suggestions, we don't return the value of getText, so that the focus is not set\n        // with solution above by overwriting of private method updateSelectionFromList, it could work without workaround\n        cell[\"getText\"] = () => {\n            return this.getValue();\n        };\n\n        // suggestion list item\n        const listItem = new ColumnListItem(\"\", {\n            cells: [cell],\n            type: ListType.Active,\n        });\n        listItem.addStyleClass(\"searchSuggestion\");\n        listItem.addStyleClass(\"searchObjectSuggestion\");\n        return listItem;\n    }\n\n    regularSuggestionItemFactory(sId: string, oContext: Context): ColumnListItem {\n        // icon at the front:\n        const icon = new Icon(\"\", {\n            src: { path: \"icon\" },\n        })\n            .addStyleClass(\"suggestIcon\")\n            .addStyleClass(\"sapUshellSearchSuggestAppIcon\")\n            .addStyleClass(\"suggestListItemCell\");\n\n        // recent search suggestions which have a filter will get this additional icon\n        // at the end of the line:\n        const filterIcon = new Icon(\"\", {\n            src: { path: \"filterIcon\" },\n        })\n            .addStyleClass(\"suggestIcon\")\n            .addStyleClass(\"sapUshellSearchSuggestFilterIcon\")\n            .addStyleClass(\"suggestListItemCell\");\n\n        const layoutData = new FlexItemData(\"\", {\n            shrinkFactor: 1,\n            minWidth: \"4rem\",\n        });\n\n        // label\n        const label = new Text(\"\", {\n            text: { path: \"label\" },\n            layoutData: layoutData,\n            wrapping: false,\n        })\n            .addStyleClass(\"suggestText\")\n            .addStyleClass(\"suggestNavItem\")\n            .addStyleClass(\"suggestListItemCell\");\n\n        const suggestion = oContext.getModel().getProperty(oContext.getPath());\n\n        label.addEventDelegate(\n            {\n                onAfterRendering: () => {\n                    const domref = label.getDomRef() as HTMLElement;\n                    const innerHTML = domref.innerHTML;\n                    const hasSpan = innerHTML.lastIndexOf(\"&lt;/span&gt;\") > 0;\n                    if (suggestion.uiSuggestionType === SuggestionType.Search && hasSpan) {\n                        // recent suggestions can be entered by the user. Thus he could also enter \"<b>bold</b>\" as search term\n                        // and the boldTagUnescaper would then render the search term as bold html.\n                        // TODO: call boldTagUnescaper for everything which is not in the <span>\n                        const userEntered = innerHTML.slice(\n                            innerHTML.indexOf(\"&lt;span&gt;\") + 12,\n                            innerHTML.lastIndexOf(\"&lt;/span&gt;\")\n                        );\n                        const notUserEntered = innerHTML.slice(innerHTML.lastIndexOf(\"&lt;/span&gt;\") + 13);\n                        const notUserEnteredHTML = SearchHelper.boldTagUnescaperForStrings(notUserEntered);\n                        domref.innerHTML = \"<span>\" + userEntered + \"</span>\" + notUserEnteredHTML;\n                    } else {\n                        SearchHelper.boldTagUnescaper(label.getDomRef() as HTMLElement);\n                    }\n                },\n            },\n            label\n        );\n\n        const items = [icon, label];\n        if (suggestion.filterIcon) {\n            items.push(filterIcon);\n        }\n\n        // combine app, icon and label into cell\n        const cell = new CustomListItem(\"\", {\n            type: ListType.Active,\n            content: new FlexBox(\"\", {\n                items,\n                alignItems: FlexAlignItems.Center,\n            }),\n        });\n        cell.addStyleClass(\"searchSuggestionCustomListItem\");\n\n        cell[\"getText\"] = () => {\n            return typeof suggestion?.filter?.searchTerm === \"string\"\n                ? suggestion.filter.searchTerm\n                : this.getValue();\n        };\n        const listItem = new ColumnListItem(\"\", {\n            cells: [cell],\n            type: ListType.Active,\n        });\n        cell.addStyleClass(\"searchSuggestionColumnListItem\");\n\n        if (suggestion.uiSuggestionType === SuggestionType.App) {\n            if (suggestion.title && suggestion.title.indexOf(\"combinedAppSuggestion\") >= 0) {\n                listItem.addStyleClass(\"searchCombinedAppSuggestion\");\n            } else {\n                listItem.addStyleClass(\"searchAppSuggestion\");\n            }\n        }\n        if (suggestion.uiSuggestionType === SuggestionType.DataSource) {\n            listItem.addStyleClass(\"searchDataSourceSuggestion\");\n        }\n        if (suggestion.uiSuggestionType === SuggestionType.SearchTermData) {\n            listItem.addStyleClass(\"searchBOSuggestion\");\n        }\n        if (suggestion.uiSuggestionType === SuggestionType.SearchTermAI) {\n            listItem.addStyleClass(\"searchAISuggestion\");\n        }\n        if (suggestion.uiSuggestionType === SuggestionType.SearchTermHistory) {\n            listItem.addStyleClass(\"searchHistorySuggestion\");\n        }\n        if (suggestion.uiSuggestionType === SuggestionType.Search) {\n            listItem.addStyleClass(\"searchRecentSuggestion\");\n        }\n        listItem.addStyleClass(\"searchSuggestion\");\n\n        return listItem;\n    }\n\n    navigateToSearchApp(): void {\n        const oSearchModel = this.getModel() as SearchModel;\n        if (SearchHelper.isSearchAppActive() || !oSearchModel.config.isUshell) {\n            // app running -> just fire query\n            oSearchModel.fireSearchQuery();\n        } else {\n            // app not running -> start via hash\n            // change hash:\n            // - do not use Searchhelper.hasher here\n            // - this is starting the search app from outside\n            oSearchModel.resetSearchResultItemMemory();\n            const sHash = oSearchModel.createSearchNavigationTargetCurrentState({\n                updateUrl: true,\n            }).targetUrl;\n            window.location.hash = sHash;\n        }\n    }\n\n    onAfterRendering(oEvent): void {\n        super.onAfterRendering(oEvent);\n\n        const domRef = this.getDomRef();\n        if (!domRef) return;\n\n        const input = domRef.querySelector(\"input\");\n        if (!input) return;\n\n        // Set input attributes\n        input.setAttribute(\"autocomplete\", \"off\");\n        input.setAttribute(\"autocorrect\", \"off\");\n        // Additional hacks to show the \"search\" button on iOS keyboards:\n        input.setAttribute(\"type\", \"search\");\n        input.setAttribute(\"name\", \"search\");\n\n        // Create form element\n        const form = document.createElement(\"form\");\n        form.style.setProperty(\"width\", \"100%\");\n        form.setAttribute(\"action\", \"\");\n        form.addEventListener(\"submit\", (e) => {\n            e.preventDefault();\n            return false;\n        });\n\n        // Get parent of input\n        const inputParent = input.parentElement;\n        if (!inputParent) return;\n\n        // Append form to parent and move input into form\n        inputParent.appendChild(form);\n        form.appendChild(input);\n\n        // set ARIA attributes on the input\n        input.setAttribute(\"role\", \"combobox\");\n        input.setAttribute(\"aria-autocomplete\", \"list\");\n        input.setAttribute(\"aria-expanded\", \"false\");\n        input.setAttribute(\"aria-controls\", this.getId() + \"-popup\");\n        input.setAttribute(\"aria-label\", i18n.getText(\"search\"));\n    }\n\n    onValueRevertedByEscape(): void {\n        // this method is called if ESC was pressed and\n        // the value in it was not empty\n        if (SearchHelper.isSearchAppActive()) {\n            // dont delete the value if search app is active\n            return;\n        }\n        this.setValue(\" \"); // add space as a marker for following ESC handler\n    }\n\n    onsapescape(oEvent: JQuery.Event): void {\n        // keep type 'JQuery.Event' here, because of sap.m.Input, function 'onsapescape'\n\n        // set aria-expanded to false on the input element\n        const domRef = this.getDomRef();\n        if (domRef) {\n            const input = domRef.querySelector(\"input\");\n            if (input) {\n                input.setAttribute(\"aria-expanded\", \"false\");\n            }\n        }\n        super.onsapescape(oEvent);\n    }\n\n    static renderer = {\n        apiVersion: 2,\n    };\n}\n"],"mappings":"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","ignoreList":[]}