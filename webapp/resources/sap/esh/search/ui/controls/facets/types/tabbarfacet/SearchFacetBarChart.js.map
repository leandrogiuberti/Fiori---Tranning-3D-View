{"version":3,"file":"SearchFacetBarChart.js","names":["sap","ui","define","__i18n","ComparisonMicroChart","ComparisonMicroChartData","Control","sap_m_library","Element","_interopRequireDefault","obj","__esModule","default","i18n","ValueColor","SearchFacetBarChart","extend","renderer","apiVersion","render","oRm","oControl","openStart","openEnd","oComparisonMicroChart","width","colorPalette","tooltip","shrinkable","options","oSearchFacetDialog","setWidth","addStyleClass","addEventDelegate","onAfterRendering","chartDom","document","getElementById","this","getId","querySelector","classList","add","selectedFacetItem","getBindingContext","getObject","getDomRef","setAttribute","title","dimension","bind","barItems","getAggregation","barItems2","getProperty","length","iMissingCnt","barItem","addData","renderControl","close","metadata","properties","aItems","type","aggregations","items","multiple","constructor","_constructor","sId","settings","Control.prototype.constructor.call","bindAggregation","path","factory","oComparisonMicroChartData","value","color","formatter","isSelected","res","Good","Neutral","parts","label","displayValue","press","oEvent","context","getSource","model","getModel","data","selected","filterCondition","onDetailPageSelectionChangeCharts","removeFilterCondition","addFilterCondition","_onAfterRendering","domRef","facetIconTabBar","closest","infoZeile","oInfoZeile","id","setVisible","message","getText","setText","rerender"],"sources":["SearchFacetBarChart.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"../../../../i18n\";\nimport ComparisonMicroChart, {\n    ComparisonMicroChart$PressEvent,\n} from \"sap/suite/ui/microchart/ComparisonMicroChart\";\nimport ComparisonMicroChartData from \"sap/suite/ui/microchart/ComparisonMicroChartData\";\nimport Control, { $ControlSettings } from \"sap/ui/core/Control\";\nimport { ValueColor } from \"sap/m/library\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport FacetItem from \"../../../../FacetItem\";\nimport { ComplexCondition } from \"../../../../sinaNexTS/sina/ComplexCondition\";\nimport Label from \"sap/m/Label\";\nimport SearchFacetDialog from \"../../SearchFacetDialog\";\nimport Facet from \"../../../../Facet\";\nimport Element from \"sap/ui/core/Element\";\n\nexport interface $SearchFacetBarChartSettings extends $ControlSettings {\n    aItems: Array<ComparisonMicroChartData>;\n    items: Array<ComparisonMicroChartData>;\n    oSearchFacetDialog: SearchFacetDialog;\n}\n\n/**\n * @namespace sap.esh.search.ui.controls\n */\nexport default class SearchFacetBarChart extends Control {\n    static readonly metadata = {\n        properties: {\n            aItems: {\n                type: \"object\",\n            },\n            oSearchFacetDialog: {\n                type: \"sap.esh.search.ui.controls.SearchFacetDialog\",\n            },\n        },\n        aggregations: {\n            items: {\n                type: \"sap.suite.ui.microchart.ComparisonMicroChartData\",\n                multiple: true,\n            },\n        },\n    };\n    options: Partial<$SearchFacetBarChartSettings>;\n    iMissingCnt: number;\n\n    constructor(sId?: string, settings?: Partial<$SearchFacetBarChartSettings>) {\n        super(sId, settings);\n\n        this.options = settings || {};\n        this.bindAggregation(\"items\", {\n            path: \"items\",\n            factory: (): ComparisonMicroChartData => {\n                const oComparisonMicroChartData = new ComparisonMicroChartData({\n                    title: { path: \"label\" },\n                    value: { path: \"value\" },\n                    color: {\n                        path: \"selected\",\n                        formatter: (isSelected: boolean): string => {\n                            let res;\n                            if (isSelected) {\n                                res = ValueColor.Good;\n                            } else {\n                                res = ValueColor.Neutral;\n                            }\n                            return res;\n                        },\n                    },\n                    tooltip: {\n                        parts: [{ path: \"label\" }, { path: \"value\" }],\n                        formatter: (label, value) => {\n                            return label + \": \" + value;\n                        },\n                    },\n                    displayValue: { path: \"valueLabel\" },\n                    press: (oEvent: ComparisonMicroChart$PressEvent) => {\n                        const context = (oEvent.getSource() as Control).getBindingContext();\n                        const model = context.getModel() as SearchModel;\n                        const data = context.getObject() as FacetItem;\n                        const isSelected = data.selected;\n                        const filterCondition = data.filterCondition as ComplexCondition; // ToDo\n\n                        if (isSelected) {\n                            // deselect (remove filter)\n                            if (this.options.oSearchFacetDialog) {\n                                this.options.oSearchFacetDialog.onDetailPageSelectionChangeCharts(oEvent);\n                            } else {\n                                model.removeFilterCondition(filterCondition, true);\n                            }\n                        } else if (this.options.oSearchFacetDialog) {\n                            // select (set filter), first for searchFacetDialog\n                            this.options.oSearchFacetDialog.onDetailPageSelectionChangeCharts(oEvent);\n                        } else {\n                            // select (set filter), without searchFacetDialog / for small facets\n                            model.addFilterCondition(filterCondition, true);\n                        }\n                    },\n                });\n                return oComparisonMicroChartData;\n            },\n        });\n    }\n\n    static renderer = {\n        apiVersion: 2,\n        render(oRm: RenderManager, oControl: SearchFacetBarChart): void {\n            // render start of tile container\n            oRm.openStart(\"div\", oControl);\n            oRm.openEnd();\n\n            const oComparisonMicroChart = new ComparisonMicroChart(\"\", {\n                width: \"90%\",\n                colorPalette: [], // the colorPalette merely stops the evaluation of the bar with 'neutral', 'good' etc\n                tooltip: \"\",\n                shrinkable: true,\n            } as any) as any;\n\n            if (oControl.options?.oSearchFacetDialog) {\n                oComparisonMicroChart.setWidth(\"95%\");\n                oComparisonMicroChart.addStyleClass(\"sapUshellSearchFacetBarChartLarge\");\n            } else {\n                oComparisonMicroChart.addStyleClass(\"sapUshellSearchFacetBarChart\");\n            }\n\n            oComparisonMicroChart.addEventDelegate({\n                onAfterRendering: function () {\n                    const chartDom = document.getElementById(this.getId());\n                    if (chartDom && chartDom.querySelector(\".Good\")) {\n                        chartDom.classList.add(\"sapUshellSearchFacetBarChartSelected\");\n                    }\n                    const selectedFacetItem = this.getBindingContext().getObject() as Facet;\n                    oComparisonMicroChart\n                        .getDomRef()\n                        .setAttribute(\n                            \"data-test-id-facet-dimension-value\",\n                            `${selectedFacetItem.title}-${selectedFacetItem.dimension}`\n                        );\n                }.bind(oControl),\n            });\n\n            let barItems = oControl.getAggregation(\"items\") as Array<ComparisonMicroChartData>;\n            const barItems2 = oControl.getProperty(\"aItems\");\n            if (barItems.length === 0 && barItems2) {\n                barItems = barItems2;\n            }\n            let iMissingCnt = 0;\n            for (const barItem of barItems) {\n                if (!oControl.options.oSearchFacetDialog) {\n                    if (barItem.getProperty(\"value\")) {\n                        oComparisonMicroChart.addData(barItem);\n                    } else {\n                        iMissingCnt++;\n                    }\n                } else {\n                    oComparisonMicroChart.addData(barItem);\n                }\n            }\n            oControl.iMissingCnt = iMissingCnt;\n            oRm.renderControl(oComparisonMicroChart);\n\n            // render end of tile container\n            oRm.close(\"div\");\n        },\n    };\n\n    onAfterRendering(): void {\n        const domRef = this.getDomRef() as HTMLElement;\n        const facetIconTabBar = domRef.closest(\".sapUshellSearchFacetIconTabBar\");\n        if (!facetIconTabBar) {\n            return;\n        }\n        const infoZeile = facetIconTabBar.querySelector(\".sapUshellSearchFacetInfoZeile\") as HTMLElement;\n        if (!infoZeile) {\n            return;\n        }\n        const oInfoZeile = Element.getElementById(infoZeile.id) as Label;\n        if (this.iMissingCnt > 0) {\n            oInfoZeile.setVisible(true);\n            const message = i18n.getText(\"infoZeileNumberMoreSelected\", [this.iMissingCnt]);\n            oInfoZeile.setText(message);\n            oInfoZeile.rerender();\n        } else {\n            oInfoZeile.setVisible(false);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}