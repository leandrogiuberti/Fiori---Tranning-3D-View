{"version":3,"file":"SearchTabStripsFormatter.js","names":["sap","ui","define","__ErrorHandler","___sinaNexTS_sina_DataSourceResultSet","___sinaNexTS_sina_UserCategoryDataSource","errors","_interopRequireDefault","obj","__esModule","default","ErrorHandler","DataSourceResultSet","UserCategoryDataSource","Node","children","parent","unsureWhetherNodeisBelowRoot","tree","constructor","dataSource","count","this","equals","other","setCount","getAncestors","ancestors","currentNode","push","getChildren","i","length","child","getChildrenSortedByCount","sort","c1","c2","clearChildren","appendNode","node","appendNodeAtIndex","index","splice","insertNode","model","appDataSource","favDataSource","nodeWrk","labelPlural","removeChildNode","indexOf","hasChild","hasSibling","_findNode","result","Tree","rootNode","rootDataSource","reset","invalidate","findNode","childNode","ds1","ds2","node1","node2","removeObsoleteTreeNodes","resultDataSources","map","x","updateFromSearchResultSet","searchResultSet","currentCount","totalCount","collectDataSourcesFromResult","isIncludedInMyFavorites","myFavNode","allDataSource","isUserCategory","getProperty","updateTreeFromResultDataSources","updateCountMyFavorites","updateMyFavTreeNode","userCategoryManager","isFavActive","filter","isFavDataSource","reduce","sum","cur","measureValue","getFacets","isDataSourceResultSetItem","item","treeFacets","facets","items","sinaNext","_createDataSourceResultSetItem","subDataSources","dimensionValueFormatted","measureValueFormatted","toString","resultSet","_createDataSourceResultSet","title","query","label","facetTotalCount","undefined","type","FacetType","DataSource","includeApps","resultDataSource","isAppDataSource","DataSourceType","BusinessObject","forEach","resultNode","Category","UserCategory","Formatter","errorHandler","getInstance","format","tabStrips","generateTabStrips","doGenerateTabStrips","formattedStrips","config","tabStripsFormatter","strips","selected","err","oError","ConfigurationExitError","applicationComponent","onError","tabStripLimit","includesNode","__exports"],"sources":["SearchTabStripsFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport ErrorHandler from \"./error/ErrorHandler\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { DataSource } from \"./sinaNexTS/sina/DataSource\";\nimport { DataSourceResultSet } from \"./sinaNexTS/sina/DataSourceResultSet\";\nimport { FacetResultSet } from \"./sinaNexTS/sina/FacetResultSet\";\nimport { SearchResultSet } from \"./sinaNexTS/sina/SearchResultSet\";\nimport { UserCategoryDataSource } from \"./sinaNexTS/sina/UserCategoryDataSource\";\nimport errors from \"sap/esh/search/ui/error/errors\";\n\ninterface IDataSource {\n    dataSource: DataSource;\n    isFavDataSource: boolean;\n    isAppDataSource: boolean;\n    dimensionValueFormatted: string;\n    measureValue: number;\n    measureValueFormatted: string;\n}\n// =======================================================================\n// tree node\n// =======================================================================\n\nclass Node {\n    children: Array<Node>;\n    parent: Node;\n    unsureWhetherNodeisBelowRoot?: boolean;\n    tree: Tree;\n\n    constructor(\n        public dataSource: DataSource,\n        public count: number,\n        tree: Tree\n    ) {\n        this.children = [];\n        this.parent = null;\n        this.tree = tree;\n    }\n\n    equals(other: Node): boolean {\n        return this === other;\n    }\n\n    setCount(count: number): void {\n        this.count = count;\n    }\n\n    getAncestors(): Array<Node> {\n        /* eslint consistent-this: 0 */\n        const ancestors = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let currentNode: Node = this;\n        while (currentNode.parent) {\n            ancestors.push(currentNode.parent);\n            currentNode = currentNode.parent;\n        }\n        return ancestors;\n    }\n\n    getChildren(): Array<Node> {\n        // collect children, ignore children with unsure path information\n        const children = [];\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            if (child.unsureWhetherNodeisBelowRoot) {\n                continue;\n            }\n            children.push(child);\n        }\n        return children;\n    }\n\n    getChildrenSortedByCount(): Array<Node> {\n        // collect children, ignore children with unsure path information\n        const children = this.getChildren();\n        // sort by count\n        children.sort(function (c1, c2) {\n            return c2.count - c1.count;\n        });\n        return children;\n    }\n\n    clearChildren(): void {\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            child.parent = null;\n        }\n        this.children = [];\n    }\n\n    appendNode(node: Node): void {\n        node.parent = this;\n        this.children.push(node);\n    }\n\n    appendNodeAtIndex(node: Node, index: number): void {\n        node.parent = this;\n        this.children.splice(index, 0, node);\n    }\n\n    insertNode(node: Node): void {\n        // no siblings exist -> append the only one child node\n        if (this.children.length === 0) {\n            this.appendNode(node);\n            return;\n        }\n\n        // insert Apps node as the first child node\n        if (node.dataSource === this.tree.model.appDataSource) {\n            this.appendNodeAtIndex(node, 0);\n            return;\n        }\n\n        // insert My Favorites node as the first child node but not before the Apps node\n        if (node.dataSource === this.tree.model.favDataSource) {\n            if (this.children[0].dataSource === this.tree.model.appDataSource) {\n                this.appendNodeAtIndex(node, 1);\n            } else {\n                this.appendNodeAtIndex(node, 0);\n            }\n            return;\n        }\n\n        let index = -1;\n        let appendNode = true;\n        for (const nodeWrk of this.children) {\n            index++;\n            if (\n                nodeWrk.dataSource === this.tree.model.appDataSource ||\n                nodeWrk.dataSource === this.tree.model.favDataSource ||\n                nodeWrk.children.length > 0\n            ) {\n                // Do not compare with Apps node or MyFavorites node or folders\n                continue;\n            }\n\n            // node's position will be before existing node\n            if (\n                nodeWrk.dataSource.labelPlural &&\n                node.dataSource.labelPlural &&\n                nodeWrk.dataSource.labelPlural > node.dataSource.labelPlural\n            ) {\n                appendNode = false;\n                break;\n            }\n        }\n\n        if (appendNode) {\n            this.appendNode(node);\n        } else {\n            this.appendNodeAtIndex(node, index);\n        }\n    }\n\n    removeChildNode(node: Node): void {\n        // remove from children\n        const index = this.children.indexOf(node);\n        if (index < 0) {\n            return;\n        }\n        this.children.splice(index, 1);\n\n        // node now has no parent\n        node.parent = null;\n    }\n\n    hasChild(node: Node): boolean {\n        return this.children.indexOf(node) > -1;\n    }\n\n    hasSibling(node: Node): boolean {\n        if (this.equals(node)) {\n            return false;\n        }\n        const parent = this.parent;\n        if (!parent) {\n            return false;\n        }\n        if (parent.hasChild(node)) {\n            return true;\n        }\n        return false;\n    }\n\n    _findNode(dataSource: DataSource, result: Array<Node>): void {\n        if (this.dataSource === dataSource) {\n            result.push(this);\n            return;\n        }\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            child._findNode(dataSource, result);\n            if (result.length > 0) {\n                return;\n            }\n        }\n    }\n}\n\n// =======================================================================\n// tree\n// =======================================================================\n\nexport class Tree {\n    rootNode: Node;\n    model: SearchModel;\n\n    constructor(rootDataSource: DataSource, model: SearchModel) {\n        this.model = model;\n        this.rootNode = new Node(rootDataSource, null, this);\n    }\n\n    reset(): void {\n        this.rootNode = null;\n    }\n\n    invalidate(dataSource: DataSource): void {\n        let node = this.findNode(dataSource);\n        if (!node) {\n            this.rootNode.children = [];\n            this.rootNode.count = 0;\n            return;\n        }\n        let childNode = null;\n        while (node) {\n            node.children = childNode ? [childNode] : [];\n            node.count = null;\n            if (childNode) {\n                childNode.count = null;\n            }\n            childNode = node;\n            node = node.parent;\n        }\n    }\n\n    findNode(dataSource: DataSource): Node {\n        if (!this.rootNode) {\n            return null;\n        }\n        const result = [];\n        this.rootNode._findNode(dataSource, result);\n        return result.length > 0 ? result[0] : null;\n    }\n\n    hasChild(ds1: DataSource, ds2: DataSource): boolean {\n        if (ds2 === this.rootNode.dataSource) {\n            return false;\n        }\n        const node1 = this.findNode(ds1);\n        if (!node1) {\n            //throw 'No node for datasource ' + ds1.toString();\n            return false;\n        }\n        const node2 = this.findNode(ds2);\n        if (!node2) {\n            //throw 'No node for datasource ' + ds2.toString();\n            return false;\n        }\n        return node1.hasChild(node2);\n    }\n\n    hasSibling(ds1: DataSource, ds2: DataSource): boolean {\n        if (ds2 === this.rootNode.dataSource) {\n            return false;\n        }\n        const node1 = this.findNode(ds1);\n        if (!node1) {\n            //throw 'No node for datasource ' + ds1.toString();\n            return false;\n        }\n        const node2 = this.findNode(ds2);\n        if (!node2) {\n            //throw 'No node for datasource ' + ds2.toString();\n            return false;\n        }\n        return node1.hasSibling(node2);\n    }\n\n    removeObsoleteTreeNodes(node: Node, resultDataSources: Array<IDataSource>): void {\n        // Loop from the end because of deletion of nodes\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const childNode = node.children[i];\n            if (childNode.children.length > 0) {\n                // current node has children\n                this.removeObsoleteTreeNodes(childNode, resultDataSources);\n            }\n            // if dataSource of childNode is not included in resultDataSources -> remove it from node\n            if (resultDataSources.map((x) => x.dataSource).indexOf(childNode.dataSource) === -1) {\n                node.removeChildNode(childNode);\n            }\n        }\n    }\n\n    updateFromSearchResultSet(dataSource: DataSource, searchResultSet: SearchResultSet): void {\n        // update current tree node\n        let currentCount = 0;\n        let resultDataSources: Array<IDataSource>;\n\n        // get count from search results (from ESH search without App search result count)\n        if (searchResultSet) {\n            currentCount = searchResultSet.totalCount;\n        }\n\n        let currentNode = this.findNode(dataSource);\n        // node for dataSource already exists\n        if (currentNode) {\n            resultDataSources = this.collectDataSourcesFromResult(currentNode, searchResultSet);\n            // remove nodes if not needed for current tree\n            this.removeObsoleteTreeNodes(currentNode, resultDataSources);\n        } else {\n            // node for dataSource not found -> create new node and append temporary below root node\n            // we do not really now that this node is directly below root -> set flag unsureWhetherNodeisBelowRoot\n            // flag is evaluated later in order to correct location of node\n            currentNode = new Node(dataSource, currentCount, this);\n            resultDataSources = this.collectDataSourcesFromResult(currentNode, searchResultSet);\n            // remove nodes if not needed for current tree\n            this.removeObsoleteTreeNodes(this.rootNode, resultDataSources);\n\n            // dataSource is \"My Favorites\", node is always below \"All\"\n            if (currentNode.dataSource === this.model.favDataSource) {\n                currentNode.unsureWhetherNodeisBelowRoot = false;\n            } else {\n                currentNode.unsureWhetherNodeisBelowRoot = true;\n            }\n            if (this.isIncludedInMyFavorites(dataSource)) {\n                // dataSource is included in \"My Favorites\" -> create new node for \"My Favorites\" if not exists\n                let myFavNode = this.findNode(this.model.favDataSource);\n                if (!myFavNode) {\n                    myFavNode = new Node(this.model.favDataSource, 0, this);\n                    myFavNode.unsureWhetherNodeisBelowRoot = false;\n                    this.rootNode.insertNode(myFavNode);\n                }\n                myFavNode.insertNode(currentNode);\n            } else {\n                this.rootNode.insertNode(currentNode);\n            }\n        }\n\n        currentNode.setCount(currentCount);\n\n        // for root node: add apps count to count\n        if (dataSource === this.model.allDataSource || this.model.isUserCategory()) {\n            currentNode.setCount(currentNode.count + this.model.getProperty(\"/appCount\"));\n        } else if (dataSource === this.model.appDataSource) {\n            currentNode.setCount(this.model.getProperty(\"/appCount\"));\n        }\n\n        // update child nodes\n        this.updateTreeFromResultDataSources(currentNode, resultDataSources);\n\n        // update count for \"My Favorites\" node\n        this.updateCountMyFavorites(currentNode, resultDataSources);\n    }\n\n    updateMyFavTreeNode(currentNode: Node, resultDataSources: Array<IDataSource>): void {\n        // add node MyFavorites if dataSource = All and\n        // \"Use Personalized Search Scope\" is switched on/ My Favorites is visible\n        if (this.model.userCategoryManager && this.model.userCategoryManager.isFavActive()) {\n            if (currentNode.dataSource === this.model.allDataSource) {\n                let myFavNode = this.findNode(this.model.favDataSource);\n                if (!myFavNode) {\n                    myFavNode = new Node(\n                        this.model.favDataSource,\n                        resultDataSources\n                            .filter((x) => x.isFavDataSource)\n                            .reduce((sum, cur) => sum + cur.measureValue, 0),\n                        this\n                    );\n                    // filter all isFavDataSources from resultDataSources, from the result array sum all measureValues\n                    // 0 is start value for sum variable\n                    currentNode.unsureWhetherNodeisBelowRoot = false;\n                    currentNode.insertNode(myFavNode);\n                }\n            }\n        }\n    }\n\n    updateCountMyFavorites(currentNode: Node, resultDataSources: Array<IDataSource>): void {\n        const myFavNode = this.findNode(this.model.favDataSource);\n\n        if (myFavNode && currentNode.dataSource === this.model.allDataSource) {\n            // calculate count for All search (works only properly if no other categories exist\n            // resultDataSources must contain all dataSources for business objects (not possible with deep hierarchies)\n            myFavNode.setCount(\n                resultDataSources\n                    .filter((x) => x.isFavDataSource)\n                    .reduce((sum, cur) => sum + cur.measureValue, 0)\n            );\n            // Apps are included in \"My Favorites\" and not included in resultDataSources\n            // use case: All search with Apps in \"My Favorites\"\n            if (\n                this.isIncludedInMyFavorites(this.model.appDataSource) &&\n                resultDataSources.map((x) => x.dataSource).indexOf(this.model.appDataSource) === -1\n            ) {\n                myFavNode.setCount(myFavNode.count + this.model.getProperty(\"/appCount\"));\n            }\n        }\n    }\n\n    getFacets(currentNode: Node, searchResultSet: SearchResultSet): Array<FacetResultSet> {\n        // use facets from searchResultSet if exits\n        // else use My Favorites information from subDataSources and searchResultSet (count)\n        // for construction the needed dataSource structure for facets,\n        // only occurs if search result is from My Favorites and contains 1 business object only (facets are empty)\n        function isDataSourceResultSetItem(item: FacetResultSet): item is DataSourceResultSet {\n            return item instanceof DataSourceResultSet;\n        }\n        const treeFacets: Array<FacetResultSet> = [];\n\n        // no search results or dataSource is Apps\n        if (!searchResultSet || currentNode.dataSource === this.model.appDataSource) {\n            return treeFacets;\n        }\n\n        // special case for \"My Favorites\" with one business object with results\n        if (\n            searchResultSet.facets.length === 0 &&\n            searchResultSet.items.length > 0 &&\n            currentNode.dataSource instanceof UserCategoryDataSource\n        ) {\n            const items = [];\n            items.push(\n                this.model.sinaNext._createDataSourceResultSetItem({\n                    dataSource: currentNode.dataSource.subDataSources[0],\n                    dimensionValueFormatted: currentNode.dataSource.subDataSources[0].labelPlural,\n                    measureValue: searchResultSet.totalCount,\n                    measureValueFormatted: searchResultSet.totalCount.toString(),\n                })\n            );\n\n            const resultSet = this.model.sinaNext._createDataSourceResultSet({\n                title: this.model.query.filter.dataSource.label,\n                items: items,\n                query: this.model.query,\n                facetTotalCount: undefined,\n            });\n            treeFacets.push(resultSet);\n            return treeFacets;\n        } else if (searchResultSet.facets.length === 0) {\n            return treeFacets;\n        }\n\n        if (!isDataSourceResultSetItem(searchResultSet.facets[0])) {\n            return treeFacets;\n        }\n\n        if (searchResultSet.facets[0].type !== this.model.sinaNext.FacetType.DataSource) {\n            return treeFacets;\n        }\n        // general case\n        return searchResultSet.facets;\n    }\n\n    isIncludedInMyFavorites(dataSource: DataSource): boolean {\n        // dataSource is included in My Favorites\n        if (\n            this.model.userCategoryManager &&\n            this.model.userCategoryManager.isFavActive() &&\n            (this.model.favDataSource.subDataSources.indexOf(dataSource) > -1 ||\n                (dataSource === this.model.appDataSource && this.model.favDataSource.includeApps))\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    collectDataSourcesFromResult(currentNode: Node, searchResultSet: SearchResultSet): Array<IDataSource> {\n        function isDataSourceResultSetItem(item: FacetResultSet): item is DataSourceResultSet {\n            return item instanceof DataSourceResultSet;\n        }\n        const resultDataSources: Array<IDataSource> = [];\n\n        const resultDataSource: IDataSource = {} as IDataSource;\n\n        // Apps can only exists in All or \"My Favorites\"\n        // Apps must have results\n        if (\n            (currentNode.dataSource === this.model.allDataSource ||\n                currentNode.dataSource === this.model.favDataSource) &&\n            this.model.getProperty(\"/appCount\") > 0\n        ) {\n            resultDataSource.dataSource = this.model.appDataSource;\n            resultDataSource.isAppDataSource = true;\n\n            resultDataSource.isFavDataSource = this.model.userCategoryManager\n                ? this.model.userCategoryManager.isFavActive()\n                    ? this.model.favDataSource.includeApps\n                    : false\n                : false;\n\n            resultDataSource.measureValue = this.model.getProperty(\"/appCount\");\n            resultDataSource.measureValueFormatted = resultDataSource.measureValue.toString();\n            resultDataSource.dimensionValueFormatted = this.model.appDataSource.labelPlural;\n            // current dataSource is \"My Favorites\" and Apps is included in \"My Favorites\" or (Apps in MyFav)\n            // current dataSource is All and Apps is not included in \"My Favorites\" (Apps in All)\n            // -> add Apps to resultDataSources (not added for dataSource is All and Apps are included in MyFav)\n            if (\n                (currentNode.dataSource === this.model.favDataSource && resultDataSource.isFavDataSource) ||\n                (currentNode.dataSource === this.model.allDataSource && !resultDataSource.isFavDataSource)\n            ) {\n                resultDataSources.push(resultDataSource);\n            }\n        }\n        // Business Object\n        if (currentNode.dataSource.type === this.model.sinaNext.DataSourceType.BusinessObject) {\n            resultDataSource.dataSource = currentNode.dataSource;\n            resultDataSource.isAppDataSource = false;\n            resultDataSource.isFavDataSource = this.isIncludedInMyFavorites(currentNode.dataSource);\n            resultDataSource.measureValue = currentNode.count ? currentNode.count : 0;\n            resultDataSource.measureValueFormatted = resultDataSource.measureValue.toString();\n            resultDataSource.dimensionValueFormatted = currentNode.dataSource.labelPlural\n                ? currentNode.dataSource.labelPlural\n                : currentNode.dataSource.label;\n            resultDataSources.push(resultDataSource);\n            return resultDataSources;\n        }\n\n        // get facets from searchResultSet or from My Favorites subDataSource information\n        const facets: Array<FacetResultSet> = this.getFacets(currentNode, searchResultSet);\n\n        if (!facets || facets.length === 0 || !isDataSourceResultSetItem(facets[0])) {\n            return resultDataSources;\n        }\n\n        facets[0].items.forEach((item) =>\n            resultDataSources.push({\n                dataSource: item.dataSource,\n                isAppDataSource: false,\n                isFavDataSource: this.isIncludedInMyFavorites(item.dataSource),\n                measureValue: item.measureValue,\n                measureValueFormatted: item.measureValueFormatted,\n                dimensionValueFormatted: item.dimensionValueFormatted,\n            })\n        );\n\n        return resultDataSources;\n    }\n\n    private updateTreeFromResultDataSources(currentNode: Node, resultDataSources: Array<IDataSource>): void {\n        // dataSource is Apps or no resultDataSources\n        if (currentNode.dataSource === this.model.appDataSource || !resultDataSources) {\n            return;\n        }\n\n        // add My Favorites tree node if needed\n        this.updateMyFavTreeNode(currentNode, resultDataSources);\n        const myFavNode = this.findNode(this.model.favDataSource);\n\n        for (const resultDataSource of resultDataSources) {\n            const resultNode = this.findNode(resultDataSource.dataSource);\n            if (resultNode) {\n                if (resultNode.unsureWhetherNodeisBelowRoot) {\n                    resultNode.unsureWhetherNodeisBelowRoot = false;\n                }\n                // re-locate existing node for dataSource if neccessary\n                // currentNode is UserCategory (My Favorites) or Category and not the correct parent for the child (resultNode)\n                // -> delete the child from the wrong parent and insert to the correct node)\n                if (\n                    currentNode !== resultNode.parent &&\n                    (currentNode.dataSource.type === this.model.sinaNext.DataSourceType.Category ||\n                        currentNode.dataSource.type === this.model.sinaNext.DataSourceType.UserCategory)\n                ) {\n                    resultNode.parent.removeChildNode(resultNode);\n                    currentNode.insertNode(resultNode);\n                }\n            } else {\n                // create node for dataSource\n                const childNode = new Node(resultDataSource.dataSource, resultDataSource.measureValue, this);\n                childNode.unsureWhetherNodeisBelowRoot = false;\n                // resultDataSource is included in \"My Favorites\" and must be inserted in the \"My Favorites\" node\n                if (myFavNode && resultDataSource.isFavDataSource) {\n                    myFavNode.insertNode(childNode);\n                } else {\n                    currentNode.insertNode(childNode);\n                }\n            }\n        }\n    }\n}\n\n// =======================================================================\n// formatter\n// =======================================================================\n\nexport interface TabStrips {\n    selected: DataSource;\n    strips: Array<DataSource>;\n}\n\nexport class Formatter {\n    errorHandler: ErrorHandler;\n    tree: Tree;\n\n    constructor(rootDataSource: DataSource, model: SearchModel) {\n        this.errorHandler = ErrorHandler.getInstance();\n        this.tree = new Tree(rootDataSource, model);\n    }\n\n    format(dataSource: DataSource, searchResultSet: SearchResultSet, model: SearchModel): TabStrips {\n        this.tree.updateFromSearchResultSet(dataSource, searchResultSet);\n        const tabStrips = this.generateTabStrips(dataSource, model);\n        return tabStrips;\n    }\n\n    invalidate(dataSource: DataSource): void {\n        if (this.tree) {\n            this.tree.invalidate(dataSource);\n        }\n    }\n\n    generateTabStrips(dataSource: DataSource, model: SearchModel): TabStrips {\n        // call default tab strip generation\n        let tabStrips = this.doGenerateTabStrips(dataSource, model);\n        // modify tabstips by exit but always ensure that selected datsasource is included in the tabstrips\n        let formattedStrips;\n        try {\n            formattedStrips = model.config.tabStripsFormatter(tabStrips.strips);\n            if (formattedStrips.indexOf(tabStrips.selected) < 0) {\n                formattedStrips.splice(0, 0, tabStrips.selected); // add selected datasource\n            }\n            tabStrips.strips = formattedStrips;\n        } catch (err) {\n            const oError = new errors.ConfigurationExitError(\n                \"tabStripsFormatter\",\n                model.config.applicationComponent,\n                err\n            );\n            this.errorHandler.onError(oError);\n            // do not throw oError, use standard DS tabstrips\n            tabStrips = this.doGenerateTabStrips(dataSource, model);\n        }\n        return tabStrips;\n    }\n\n    doGenerateTabStrips(dataSource: DataSource, model: SearchModel): TabStrips {\n        /* eslint no-lonely-if:0 */\n\n        // init\n        const tabStripLimit = 9999;\n        let i: number, child: Node, children: Array<Node>;\n        const tabStrips: TabStrips = {\n            strips: [],\n            selected: null,\n        };\n        const node = this.tree.findNode(dataSource);\n\n        // 1) no node in tree -> show ALL+ current datasource (should never happen)\n        if (!node) {\n            if (dataSource !== model.allDataSource) {\n                tabStrips.strips.push(model.allDataSource);\n            }\n            tabStrips.strips.push(dataSource);\n            tabStrips.selected = dataSource;\n            return tabStrips;\n        }\n\n        // 2) node is $$ALL$$ -> show $$ALL$$ + children of $$ALL$$\n        if (node.dataSource === model.allDataSource) {\n            tabStrips.strips.push(model.allDataSource);\n            children = node.getChildrenSortedByCount();\n            for (i = 0; i < children.length && tabStrips.strips.length < tabStripLimit; ++i) {\n                child = children[i];\n                tabStrips.strips.push(child.dataSource);\n            }\n            tabStrips.selected = model.allDataSource;\n            return tabStrips;\n        }\n\n        // 3) node is direct child of $$ALL$$ -> show $$ALL$$ + children of $$ALL$$\n        if (node.parent === this.tree.rootNode && !node.unsureWhetherNodeisBelowRoot) {\n            tabStrips.strips.push(model.allDataSource);\n\n            // limit number of tabstrips but ensure that selected\n            // node is included\n            let includesNode = false;\n            children = this.tree.rootNode.getChildrenSortedByCount();\n            for (i = 0; i < children.length; ++i) {\n                child = children[i];\n                if (includesNode) {\n                    if (tabStrips.strips.length >= tabStripLimit) {\n                        break;\n                    }\n                    tabStrips.strips.push(child.dataSource);\n                } else {\n                    if (tabStrips.strips.length < tabStripLimit - 1 || node === child) {\n                        tabStrips.strips.push(child.dataSource);\n                        if (node === child) {\n                            includesNode = true;\n                        }\n                    }\n                }\n            }\n            if (children.length === 0) {\n                tabStrips.strips.push(node.dataSource);\n            }\n\n            // To be verified: move current datasource to second position\n            //                var indexOfMyDatasource = tabStrips.strips.indexOf(node.dataSource);\n            //                tabStrips.strips.splice(indexOfMyDatasource, 1);\n            //                tabStrips.strips.splice(1, 0, node.dataSource);\n\n            tabStrips.selected = node.dataSource;\n            return tabStrips;\n        }\n\n        // 4) node not direct child of $$ALL$$ or unknown whether node is direct child of $$ALL$$\n        // -> show $$ALL$$ + node\n        tabStrips.strips.push(model.allDataSource);\n        tabStrips.strips.push(node.dataSource);\n        tabStrips.selected = node.dataSource;\n        return tabStrips;\n    }\n}\n"],"mappings":"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","ignoreList":[]}