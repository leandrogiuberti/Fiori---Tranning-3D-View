{"version":3,"file":"PerformanceLogger.js","names":["sap","ui","define","LogEntryType","PerformanceLogger","performanceLog","performanceLogStartDate","constructor","this","Date","getUniqueId","getTime","enterMethod","method","parameterBag","push","type","methodName","name","start","end","time","children","stack","Error","replace","trim","leaveMethod","logEntry","printLogToBrowserConsole","console","table","getLogSummary","map","comments","String","step","secFromStart","Math","round","msecTotal","clearPerformanceLog"],"sources":["PerformanceLogger.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nexport interface MeasuredMethodId {\n    name: string;\n}\n\nexport interface PerformanceLogSummary {\n    step: string;\n    secFromStart: number;\n    msecTotal: number;\n    comments: string;\n}\n\nexport interface PerformanceLogEntry {\n    type: LogEntryType;\n    methodName: string;\n    start: Date;\n    end: Date | null;\n    time: number;\n    children: PerformanceLogEntry[];\n    stack: string;\n    parameterBag?: ParameterBag;\n}\n\nexport interface ParameterBag {\n    [name: string]: string | number | boolean | null;\n}\n\nexport enum LogEntryType {\n    enterMethod,\n    beforeMethod,\n}\n\nexport default class PerformanceLogger {\n    /**\n     * Performance log data\n     */\n    performanceLog: Array<PerformanceLogEntry>;\n\n    /**\n     * Performance log start date\n     */\n    performanceLogStartDate: Date;\n\n    constructor() {\n        this.performanceLog = [];\n        this.performanceLogStartDate = new Date();\n    }\n\n    /**\n     * Get a unique Id to be used to make 'method name' unique (see enterMethod/leaveMethod)\n     * @returns unique ID\n     */\n    getUniqueId(): number {\n        return new Date().getTime();\n    }\n\n    /**\n     * start a new step of performance logging\n     * @param {*} method name a log step you want to enter\n     * @param {*} parameterBag additional properties to log for this step\n     */\n\n    enterMethod(method: MeasuredMethodId, parameterBag: { comments?: string; isSearch?: boolean }): void {\n        this.performanceLog.push({\n            type: LogEntryType.enterMethod,\n            methodName: method.name,\n            start: new Date(),\n            end: null,\n            time: -1,\n            children: [],\n            stack: new Error().stack\n                .replace(\"Error: \\n\", \"\")\n                .trim()\n                .replace(\"at PerformanceLogger.newPerfEntry\", \"\")\n                .trim(),\n            parameterBag: parameterBag,\n        });\n    }\n\n    /**\n     * complete an open step of performance logging\n     * @param {*} method name of log step to leave\n     */\n\n    leaveMethod(method: MeasuredMethodId): void {\n        for (const logEntry of this.performanceLog) {\n            if (logEntry.methodName === method.name) {\n                logEntry.end = new Date();\n                logEntry.time = logEntry.end.getTime() - logEntry.start.getTime();\n            }\n        }\n    }\n\n    printLogToBrowserConsole(): void {\n        console.table(this.getLogSummary());\n    }\n\n    getLogSummary(): PerformanceLogSummary[] {\n        return this.performanceLog?.map((logEntry) => {\n            let comments: string = \"-\";\n            if (\n                logEntry.parameterBag &&\n                typeof logEntry.parameterBag === \"object\" &&\n                \"comments\" in logEntry.parameterBag &&\n                logEntry.parameterBag.comments\n            ) {\n                comments = String(logEntry.parameterBag.comments);\n            }\n            return {\n                step: logEntry.methodName,\n                secFromStart:\n                    Math.round((logEntry.start.getTime() - this.performanceLogStartDate.getTime()) / 100) /\n                    10,\n                msecTotal: logEntry.time,\n                comments: comments,\n            };\n        });\n    }\n\n    clearPerformanceLog(): void {\n        this.performanceLogStartDate = new Date();\n        this.performanceLog = [];\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,+BA+BYC,EAAY,SAAZA,OAAY,gCAAZA,IAAY,yCAAZA,CAAY,EAAZA,GAAY,IAKT,MAAMC,EAIjBC,eAKAC,wBAEAC,cACIC,KAAKH,eAAiB,GACtBG,KAAKF,wBAA0B,IAAIG,IACvC,CAMAC,cACI,OAAO,IAAID,MAAOE,SACtB,CAQAC,YAAYC,EAA0BC,GAClCN,KAAKH,eAAeU,KAAK,CACrBC,KAAMb,EAAaS,YACnBK,WAAYJ,EAAOK,KACnBC,MAAO,IAAIV,KACXW,IAAK,KACLC,MAAO,EACPC,SAAU,GACVC,OAAO,IAAIC,OAAQD,MACdE,QAAQ,YAAa,IACrBC,OACAD,QAAQ,oCAAqC,IAC7CC,OACLZ,aAAcA,GAEtB,CAOAa,YAAYd,GACR,IAAK,MAAMe,KAAYpB,KAAKH,eAAgB,CACxC,GAAIuB,EAASX,aAAeJ,EAAOK,KAAM,CACrCU,EAASR,IAAM,IAAIX,KACnBmB,EAASP,KAAOO,EAASR,IAAIT,UAAYiB,EAAST,MAAMR,SAC5D,CACJ,CACJ,CAEAkB,2BACIC,QAAQC,MAAMvB,KAAKwB,gBACvB,CAEAA,gBACI,OAAOxB,KAAKH,gBAAgB4B,IAAKL,IAC7B,IAAIM,EAAmB,IACvB,GACIN,EAASd,qBACFc,EAASd,eAAiB,UACjC,aAAcc,EAASd,cACvBc,EAASd,aAAaoB,SACxB,CACEA,EAAWC,OAAOP,EAASd,aAAaoB,SAC5C,CACA,MAAO,CACHE,KAAMR,EAASX,WACfoB,aACIC,KAAKC,OAAOX,EAAST,MAAMR,UAAYH,KAAKF,wBAAwBK,WAAa,KACjF,GACJ6B,UAAWZ,EAASP,KACpBa,SAAUA,IAGtB,CAEAO,sBACIjC,KAAKF,wBAA0B,IAAIG,KACnCD,KAAKH,eAAiB,EAC1B,EACHD,EAAAD,eAAA,OAAAC,CAAA","ignoreList":[]}