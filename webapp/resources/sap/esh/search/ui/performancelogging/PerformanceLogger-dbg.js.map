{"version":3,"file":"PerformanceLogger-dbg.js","names":["sap","ui","define","LogEntryType","PerformanceLogger","performanceLog","performanceLogStartDate","constructor","Date","getUniqueId","getTime","enterMethod","method","parameterBag","push","type","methodName","name","start","end","time","children","stack","Error","replace","trim","leaveMethod","logEntry","printLogToBrowserConsole","console","table","getLogSummary","map","comments","String","step","secFromStart","Math","round","msecTotal","clearPerformanceLog"],"sources":["PerformanceLogger.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nexport interface MeasuredMethodId {\n    name: string;\n}\n\nexport interface PerformanceLogSummary {\n    step: string;\n    secFromStart: number;\n    msecTotal: number;\n    comments: string;\n}\n\nexport interface PerformanceLogEntry {\n    type: LogEntryType;\n    methodName: string;\n    start: Date;\n    end: Date | null;\n    time: number;\n    children: PerformanceLogEntry[];\n    stack: string;\n    parameterBag?: ParameterBag;\n}\n\nexport interface ParameterBag {\n    [name: string]: string | number | boolean | null;\n}\n\nexport enum LogEntryType {\n    enterMethod,\n    beforeMethod,\n}\n\nexport default class PerformanceLogger {\n    /**\n     * Performance log data\n     */\n    performanceLog: Array<PerformanceLogEntry>;\n\n    /**\n     * Performance log start date\n     */\n    performanceLogStartDate: Date;\n\n    constructor() {\n        this.performanceLog = [];\n        this.performanceLogStartDate = new Date();\n    }\n\n    /**\n     * Get a unique Id to be used to make 'method name' unique (see enterMethod/leaveMethod)\n     * @returns unique ID\n     */\n    getUniqueId(): number {\n        return new Date().getTime();\n    }\n\n    /**\n     * start a new step of performance logging\n     * @param {*} method name a log step you want to enter\n     * @param {*} parameterBag additional properties to log for this step\n     */\n\n    enterMethod(method: MeasuredMethodId, parameterBag: { comments?: string; isSearch?: boolean }): void {\n        this.performanceLog.push({\n            type: LogEntryType.enterMethod,\n            methodName: method.name,\n            start: new Date(),\n            end: null,\n            time: -1,\n            children: [],\n            stack: new Error().stack\n                .replace(\"Error: \\n\", \"\")\n                .trim()\n                .replace(\"at PerformanceLogger.newPerfEntry\", \"\")\n                .trim(),\n            parameterBag: parameterBag,\n        });\n    }\n\n    /**\n     * complete an open step of performance logging\n     * @param {*} method name of log step to leave\n     */\n\n    leaveMethod(method: MeasuredMethodId): void {\n        for (const logEntry of this.performanceLog) {\n            if (logEntry.methodName === method.name) {\n                logEntry.end = new Date();\n                logEntry.time = logEntry.end.getTime() - logEntry.start.getTime();\n            }\n        }\n    }\n\n    printLogToBrowserConsole(): void {\n        console.table(this.getLogSummary());\n    }\n\n    getLogSummary(): PerformanceLogSummary[] {\n        return this.performanceLog?.map((logEntry) => {\n            let comments: string = \"-\";\n            if (\n                logEntry.parameterBag &&\n                typeof logEntry.parameterBag === \"object\" &&\n                \"comments\" in logEntry.parameterBag &&\n                logEntry.parameterBag.comments\n            ) {\n                comments = String(logEntry.parameterBag.comments);\n            }\n            return {\n                step: logEntry.methodName,\n                secFromStart:\n                    Math.round((logEntry.start.getTime() - this.performanceLogStartDate.getTime()) / 100) /\n                    10,\n                msecTotal: logEntry.time,\n                comments: comments,\n            };\n        });\n    }\n\n    clearPerformanceLog(): void {\n        this.performanceLogStartDate = new Date();\n        this.performanceLog = [];\n    }\n}\n"],"mappings":"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","ignoreList":[]}