{"version":3,"file":"timecontrolledexecutor.js","names":["sap","ui","define","___requestexecutor","RequestExecutor","RequestExecutorStatus","defaultCreateTooManyRequestsError","Error","TimeControlledExecutor","requestExecutor","outdatedLimit","createTooManyRequestsError","constructor","options","this","outdatedTimeLimit","createNewRequest","request","delete","promise","createResponseListener","execute","reuseOldRequest","clearResponseListeners","denyRequest","Promise","reject","timeInterval","Date","getTime","time","status","PENDING","getRequest","equals","__exports","__esModule"],"sources":["timecontrolledexecutor.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Request } from \"./request\";\nimport { RequestExecutor, RequestExecutorStatus } from \"./requestexecutor\";\n\ninterface TimeControlledExecutorOptions<Response> {\n    createTooManyRequestsError?: (request: Request<Response>) => Error;\n    outdatedTimeLimit: number;\n}\n\nfunction defaultCreateTooManyRequestsError(): Error {\n    return new Error(\"Too many requests\");\n}\n\nexport class TimeControlledExecutor<Response> {\n    requestExecutor: RequestExecutor<Response>;\n    outdatedLimit: number;\n    createTooManyRequestsError?: (request: Request<Response>) => Error;\n\n    constructor(options: TimeControlledExecutorOptions<Response>) {\n        this.outdatedLimit = options.outdatedTimeLimit;\n        this.createTooManyRequestsError =\n            options.createTooManyRequestsError ?? defaultCreateTooManyRequestsError;\n    }\n\n    createNewRequest(request: Request<Response>) {\n        // delete old request\n        if (this.requestExecutor) {\n            this.requestExecutor.delete();\n        }\n        // create new request\n        this.requestExecutor = new RequestExecutor(request);\n        const promise = this.requestExecutor.createResponseListener();\n        this.requestExecutor.execute();\n        return promise;\n    }\n\n    reuseOldRequest() {\n        // remove old promise (will never be resolved)\n        this.requestExecutor.clearResponseListeners();\n        // create new promise\n        return this.requestExecutor.createResponseListener();\n    }\n\n    denyRequest(request: Request<Response>) {\n        // remove old promise (will never be resolved)\n        this.requestExecutor.clearResponseListeners();\n        // create rejected promise\n        return Promise.reject(this.createTooManyRequestsError(request));\n    }\n\n    execute(request: Request<Response>): Promise<Response> {\n        // simple case: no old request -> just create new request\n        if (!this.requestExecutor) {\n            return this.createNewRequest(request);\n        }\n\n        // goals\n        // =====\n        // - prevent request overtaking\n        // - prevent two many call in a short time interval\n\n        // input:\n        // ======\n        // - old request: pending or completed\n        // - request: changed or not\n        // - time interval between request: small or large\n\n        // output:\n        // =======\n        // - new request (forget old request)\n        // - reuse old request\n        // - deny request (too many requests error)\n\n        // time between old and new request\n        const timeInterval = new Date().getTime() - this.requestExecutor.time;\n\n        if (this.requestExecutor.status === RequestExecutorStatus.PENDING) {\n            // 1. old request pending\n            if (this.requestExecutor.getRequest().equals(request)) {\n                // 1.1 request not changed\n                if (timeInterval <= this.outdatedLimit) {\n                    // 1.1.1 reuse old request\n                    return this.reuseOldRequest();\n                }\n                // 1.1.2 create new request\n                return this.createNewRequest(request);\n            } else {\n                // 1.2 request changed\n                return this.createNewRequest(request);\n            }\n        } else {\n            // 2. old request completed\n            return this.createNewRequest(request);\n        }\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,+BAAAC,GAAA,mBAMSC,EAAeD,EAAA,yBAAEE,EAAqBF,EAAA,yBAO/C,SAASG,IACL,OAAO,IAAIC,MAAM,oBACrB,CAEO,MAAMC,EACTC,gBACAC,cACAC,2BAEAC,YAAYC,GACRC,KAAKJ,cAAgBG,EAAQE,kBAC7BD,KAAKH,2BACDE,EAAQF,4BAA8BL,CAC9C,CAEAU,iBAAiBC,GAEb,GAAIH,KAAKL,gBAAiB,CACtBK,KAAKL,gBAAgBS,QACzB,CAEAJ,KAAKL,gBAAkB,IAAIL,EAAgBa,GAC3C,MAAME,EAAUL,KAAKL,gBAAgBW,yBACrCN,KAAKL,gBAAgBY,UACrB,OAAOF,CACX,CAEAG,kBAEIR,KAAKL,gBAAgBc,yBAErB,OAAOT,KAAKL,gBAAgBW,wBAChC,CAEAI,YAAYP,GAERH,KAAKL,gBAAgBc,yBAErB,OAAOE,QAAQC,OAAOZ,KAAKH,2BAA2BM,GAC1D,CAEAI,QAAQJ,GAEJ,IAAKH,KAAKL,gBAAiB,CACvB,OAAOK,KAAKE,iBAAiBC,EACjC,CAoBA,MAAMU,GAAe,IAAIC,MAAOC,UAAYf,KAAKL,gBAAgBqB,KAEjE,GAAIhB,KAAKL,gBAAgBsB,SAAW1B,EAAsB2B,QAAS,CAE/D,GAAIlB,KAAKL,gBAAgBwB,aAAaC,OAAOjB,GAAU,CAEnD,GAAIU,GAAgBb,KAAKJ,cAAe,CAEpC,OAAOI,KAAKQ,iBAChB,CAEA,OAAOR,KAAKE,iBAAiBC,EACjC,KAAO,CAEH,OAAOH,KAAKE,iBAAiBC,EACjC,CACJ,KAAO,CAEH,OAAOH,KAAKE,iBAAiBC,EACjC,CACJ,EACH,IAAAkB,EAAA,CAAAC,WAAA,MAAAD,EAAA3B,yBAAA,OAAA2B,CAAA","ignoreList":[]}