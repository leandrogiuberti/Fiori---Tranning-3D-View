{"version":3,"file":"timecontrolledexecutor-dbg.js","names":["sap","ui","define","___requestexecutor","RequestExecutor","RequestExecutorStatus","defaultCreateTooManyRequestsError","Error","TimeControlledExecutor","requestExecutor","outdatedLimit","createTooManyRequestsError","constructor","options","outdatedTimeLimit","createNewRequest","request","delete","promise","createResponseListener","execute","reuseOldRequest","clearResponseListeners","denyRequest","Promise","reject","timeInterval","Date","getTime","time","status","PENDING","getRequest","equals","__exports","__esModule"],"sources":["timecontrolledexecutor.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Request } from \"./request\";\nimport { RequestExecutor, RequestExecutorStatus } from \"./requestexecutor\";\n\ninterface TimeControlledExecutorOptions<Response> {\n    createTooManyRequestsError?: (request: Request<Response>) => Error;\n    outdatedTimeLimit: number;\n}\n\nfunction defaultCreateTooManyRequestsError(): Error {\n    return new Error(\"Too many requests\");\n}\n\nexport class TimeControlledExecutor<Response> {\n    requestExecutor: RequestExecutor<Response>;\n    outdatedLimit: number;\n    createTooManyRequestsError?: (request: Request<Response>) => Error;\n\n    constructor(options: TimeControlledExecutorOptions<Response>) {\n        this.outdatedLimit = options.outdatedTimeLimit;\n        this.createTooManyRequestsError =\n            options.createTooManyRequestsError ?? defaultCreateTooManyRequestsError;\n    }\n\n    createNewRequest(request: Request<Response>) {\n        // delete old request\n        if (this.requestExecutor) {\n            this.requestExecutor.delete();\n        }\n        // create new request\n        this.requestExecutor = new RequestExecutor(request);\n        const promise = this.requestExecutor.createResponseListener();\n        this.requestExecutor.execute();\n        return promise;\n    }\n\n    reuseOldRequest() {\n        // remove old promise (will never be resolved)\n        this.requestExecutor.clearResponseListeners();\n        // create new promise\n        return this.requestExecutor.createResponseListener();\n    }\n\n    denyRequest(request: Request<Response>) {\n        // remove old promise (will never be resolved)\n        this.requestExecutor.clearResponseListeners();\n        // create rejected promise\n        return Promise.reject(this.createTooManyRequestsError(request));\n    }\n\n    execute(request: Request<Response>): Promise<Response> {\n        // simple case: no old request -> just create new request\n        if (!this.requestExecutor) {\n            return this.createNewRequest(request);\n        }\n\n        // goals\n        // =====\n        // - prevent request overtaking\n        // - prevent two many call in a short time interval\n\n        // input:\n        // ======\n        // - old request: pending or completed\n        // - request: changed or not\n        // - time interval between request: small or large\n\n        // output:\n        // =======\n        // - new request (forget old request)\n        // - reuse old request\n        // - deny request (too many requests error)\n\n        // time between old and new request\n        const timeInterval = new Date().getTime() - this.requestExecutor.time;\n\n        if (this.requestExecutor.status === RequestExecutorStatus.PENDING) {\n            // 1. old request pending\n            if (this.requestExecutor.getRequest().equals(request)) {\n                // 1.1 request not changed\n                if (timeInterval <= this.outdatedLimit) {\n                    // 1.1.1 reuse old request\n                    return this.reuseOldRequest();\n                }\n                // 1.1.2 create new request\n                return this.createNewRequest(request);\n            } else {\n                // 1.2 request changed\n                return this.createNewRequest(request);\n            }\n        } else {\n            // 2. old request completed\n            return this.createNewRequest(request);\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,kCAAAC,kBAAA;EAAA;;EAAA,MAMSC,eAAe,GAAAD,kBAAA;EAAA,MAAEE,qBAAqB,GAAAF,kBAAA;EAO/C,SAASG,iCAAiCA,CAAA,EAAU;IAChD,OAAO,IAAIC,KAAK,CAAC,mBAAmB,CAAC;EACzC;EAEO,MAAMC,sBAAsB,CAAW;IAC1CC,eAAe;IACfC,aAAa;IACbC,0BAA0B;IAE1BC,WAAWA,CAACC,OAAgD,EAAE;MAC1D,IAAI,CAACH,aAAa,GAAGG,OAAO,CAACC,iBAAiB;MAC9C,IAAI,CAACH,0BAA0B,GAC3BE,OAAO,CAACF,0BAA0B,IAAIL,iCAAiC;IAC/E;IAEAS,gBAAgBA,CAACC,OAA0B,EAAE;MACzC;MACA,IAAI,IAAI,CAACP,eAAe,EAAE;QACtB,IAAI,CAACA,eAAe,CAACQ,MAAM,CAAC,CAAC;MACjC;MACA;MACA,IAAI,CAACR,eAAe,GAAG,IAAIL,eAAe,CAACY,OAAO,CAAC;MACnD,MAAME,OAAO,GAAG,IAAI,CAACT,eAAe,CAACU,sBAAsB,CAAC,CAAC;MAC7D,IAAI,CAACV,eAAe,CAACW,OAAO,CAAC,CAAC;MAC9B,OAAOF,OAAO;IAClB;IAEAG,eAAeA,CAAA,EAAG;MACd;MACA,IAAI,CAACZ,eAAe,CAACa,sBAAsB,CAAC,CAAC;MAC7C;MACA,OAAO,IAAI,CAACb,eAAe,CAACU,sBAAsB,CAAC,CAAC;IACxD;IAEAI,WAAWA,CAACP,OAA0B,EAAE;MACpC;MACA,IAAI,CAACP,eAAe,CAACa,sBAAsB,CAAC,CAAC;MAC7C;MACA,OAAOE,OAAO,CAACC,MAAM,CAAC,IAAI,CAACd,0BAA0B,CAACK,OAAO,CAAC,CAAC;IACnE;IAEAI,OAAOA,CAACJ,OAA0B,EAAqB;MACnD;MACA,IAAI,CAAC,IAAI,CAACP,eAAe,EAAE;QACvB,OAAO,IAAI,CAACM,gBAAgB,CAACC,OAAO,CAAC;MACzC;;MAEA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA,MAAMU,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAI,CAACnB,eAAe,CAACoB,IAAI;MAErE,IAAI,IAAI,CAACpB,eAAe,CAACqB,MAAM,KAAKzB,qBAAqB,CAAC0B,OAAO,EAAE;QAC/D;QACA,IAAI,IAAI,CAACtB,eAAe,CAACuB,UAAU,CAAC,CAAC,CAACC,MAAM,CAACjB,OAAO,CAAC,EAAE;UACnD;UACA,IAAIU,YAAY,IAAI,IAAI,CAAChB,aAAa,EAAE;YACpC;YACA,OAAO,IAAI,CAACW,eAAe,CAAC,CAAC;UACjC;UACA;UACA,OAAO,IAAI,CAACN,gBAAgB,CAACC,OAAO,CAAC;QACzC,CAAC,MAAM;UACH;UACA,OAAO,IAAI,CAACD,gBAAgB,CAACC,OAAO,CAAC;QACzC;MACJ,CAAC,MAAM;QACH;QACA,OAAO,IAAI,CAACD,gBAAgB,CAACC,OAAO,CAAC;MACzC;IACJ;EACJ;EAAC,IAAAkB,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAA1B,sBAAA,GAAAA,sBAAA;EAAA,OAAA0B,SAAA;AAAA","ignoreList":[]}