{"version":3,"file":"requestexecutor.js","names":["sap","ui","define","ResponseListener","requestExecutor","resolve","reject","promise","constructor","this","Promise","_resolve","_reject","notify","status","RequestExecutorStatus","COMPLETED","executionResult","hasError","response","error","RequestExecutor","request","copiedRequest","time","INITIAL","responseListeners","clone","getRequest","delete","clearResponseListeners","createResponseListener","responseListener","push","execute","Date","getTime","PENDING","then","notifyResponseListeners","__exports","__esModule"],"sources":["requestexecutor.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Request } from \"./request\";\n\nclass ResponseListener<Response> {\n    requestExecutor: RequestExecutor<Response>;\n    resolve: (response: Response) => void;\n    reject: (error: unknown) => void;\n    promise: Promise<Response>;\n    constructor(requestExecutor: RequestExecutor<Response>) {\n        this.requestExecutor = requestExecutor;\n        this.promise = new Promise<Response>((_resolve, _reject) => {\n            this.resolve = _resolve;\n            this.reject = _reject;\n        });\n    }\n    notify() {\n        if (this.requestExecutor.status !== RequestExecutorStatus.COMPLETED) {\n            throw \"program error\";\n        }\n        if (!this.requestExecutor.executionResult.hasError) {\n            // success\n            this.resolve(this.requestExecutor.executionResult.response);\n        } else {\n            // error\n            this.reject(this.requestExecutor.executionResult.error);\n        }\n    }\n}\n\nexport enum RequestExecutorStatus {\n    INITIAL = \"INITIAL\",\n    PENDING = \"PENDING\",\n    COMPLETED = \"COMPLETED\", // may be successful or with errors\n}\n\ninterface ExecutionResult<Response> {\n    error?: unknown;\n    response?: Response;\n    hasError?: boolean;\n}\n\nexport class RequestExecutor<Response> {\n    request: Request<Response>;\n    copiedRequest: Request<Response>;\n    time: number;\n    status: RequestExecutorStatus = RequestExecutorStatus.INITIAL;\n    executionResult: ExecutionResult<Response>;\n    responseListeners: Array<ResponseListener<Response>> = [];\n    constructor(request: Request<Response>) {\n        this.request = request;\n        this.copiedRequest = request.clone();\n    }\n    public getRequest(): Request<Response> {\n        return this.copiedRequest;\n    }\n    public delete() {\n        this.clearResponseListeners();\n    }\n    public createResponseListener(): Promise<Response> {\n        const responseListener = new ResponseListener<Response>(this);\n        if (this.status === RequestExecutorStatus.COMPLETED) {\n            responseListener.notify();\n        } else {\n            this.responseListeners.push(responseListener);\n        }\n        return responseListener.promise;\n    }\n    public clearResponseListeners() {\n        this.responseListeners = [];\n    }\n    public execute() {\n        this.time = new Date().getTime();\n        this.status = RequestExecutorStatus.PENDING;\n        if (this.executionResult) {\n            throw \"program error\";\n        }\n        this.request.execute().then(\n            (response: Response) => {\n                // success\n                this.status = RequestExecutorStatus.COMPLETED;\n                this.executionResult = { hasError: false, response: response };\n                this.notifyResponseListeners();\n            },\n            (error) => {\n                // error\n                this.status = RequestExecutorStatus.COMPLETED;\n                this.executionResult = { hasError: true, error: error };\n                this.notifyResponseListeners();\n            }\n        );\n    }\n    private notifyResponseListeners() {\n        for (const responseListener of this.responseListeners) {\n            responseListener.notify();\n        }\n        this.clearResponseListeners();\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2BAOA,MAAMC,EACFC,gBACAC,QACAC,OACAC,QACAC,YAAYJ,GACRK,KAAKL,gBAAkBA,EACvBK,KAAKF,QAAU,IAAIG,QAAkB,CAACC,EAAUC,KAC5CH,KAAKJ,QAAUM,EACfF,KAAKH,OAASM,GAEtB,CACAC,SACI,GAAIJ,KAAKL,gBAAgBU,SAAWC,EAAsBC,UAAW,CACjE,KAAM,eACV,CACA,IAAKP,KAAKL,gBAAgBa,gBAAgBC,SAAU,CAEhDT,KAAKJ,QAAQI,KAAKL,gBAAgBa,gBAAgBE,SACtD,KAAO,CAEHV,KAAKH,OAAOG,KAAKL,gBAAgBa,gBAAgBG,MACrD,CACJ,EACH,IAEWL,EAAqB,SAArBA,KAAqB,qBAArBA,EAAqB,qBAArBA,EAAqB,yBAGJ,OAHjBA,CAAqB,EAArBA,GAAqB,IAY1B,MAAMM,EACTC,QACAC,cACAC,KACAV,OAAgCC,EAAsBU,QACtDR,gBACAS,kBAAuD,GACvDlB,YAAYc,GACRb,KAAKa,QAAUA,EACfb,KAAKc,cAAgBD,EAAQK,OACjC,CACOC,aACH,OAAOnB,KAAKc,aAChB,CACOM,SACHpB,KAAKqB,wBACT,CACOC,yBACH,MAAMC,EAAmB,IAAI7B,EAA2BM,MACxD,GAAIA,KAAKK,SAAWC,EAAsBC,UAAW,CACjDgB,EAAiBnB,QACrB,KAAO,CACHJ,KAAKiB,kBAAkBO,KAAKD,EAChC,CACA,OAAOA,EAAiBzB,OAC5B,CACOuB,yBACHrB,KAAKiB,kBAAoB,EAC7B,CACOQ,UACHzB,KAAKe,MAAO,IAAIW,MAAOC,UACvB3B,KAAKK,OAASC,EAAsBsB,QACpC,GAAI5B,KAAKQ,gBAAiB,CACtB,KAAM,eACV,CACAR,KAAKa,QAAQY,UAAUI,KAClBnB,IAEGV,KAAKK,OAASC,EAAsBC,UACpCP,KAAKQ,gBAAkB,CAAEC,SAAU,MAAOC,SAAUA,GACpDV,KAAK8B,2BAERnB,IAEGX,KAAKK,OAASC,EAAsBC,UACpCP,KAAKQ,gBAAkB,CAAEC,SAAU,KAAME,MAAOA,GAChDX,KAAK8B,2BAGjB,CACQA,0BACJ,IAAK,MAAMP,KAAoBvB,KAAKiB,kBAAmB,CACnDM,EAAiBnB,QACrB,CACAJ,KAAKqB,wBACT,EACH,IAAAU,EAAA,CAAAC,WAAA,MAAAD,EAAAzB,wBAAAyB,EAAAnB,kBAAA,OAAAmB,CAAA","ignoreList":[]}