{"version":3,"file":"EventLogger-dbg.js","names":["sap","ui","define","Log","UsageAnalyticsConsumerSina","UsageAnalyticsConsumerFlp","EventLogger","consumers","searchModel","sinaNext","log","getLogger","userEventNumber","technicalEventNumber","sessionId","Date","getTime","toString","constructor","properties","consumer","eventConsumers","addConsumer","initAsync","config","isUshell","consumerFlp","e","debug","sinaConsumer","push","label","setConsumers","logEvent","event","timeStamp","eventNumber","i","length","type","JSON","stringify","err","stack","logTechnicalEvent"],"sources":["EventLogger.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport Log from \"sap/base/Log\";\nimport UsageAnalyticsConsumerSina from \"sap/esh/search/ui/eventlogging/UsageAnalyticsConsumerSina\";\nimport UsageAnalyticsConsumerFlp from \"sap/esh/search/ui/flp/UsageAnalyticsConsumerFlp\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport { AllUserEvents } from \"./UserEvents\";\nimport EventConsumer from \"./EventConsumer\";\nimport SearchModel from \"../SearchModel\";\nimport { AllTechnicalEvents } from \"./TechnicalEvents\";\n/**\n * EventLogger is responsible for logging user and technical events.\n * It manages a list of event consumers that handle the actual logging.\n * It also provides methods to log user and technical events.\n */\nexport default class EventLogger {\n    public consumers: EventConsumer[] = [];\n    private searchModel: SearchModel;\n    private sinaNext: Sina;\n    private log = Log.getLogger(\"sap.esh.search.ui.eventlogging.EventLogger\");\n    private static userEventNumber = 0;\n    private static technicalEventNumber = 0;\n    private static sessionId: string = new Date().getTime().toString();\n\n    constructor(properties: {\n        searchModel: SearchModel;\n        sinaNext: Sina;\n        eventConsumers: Array<EventConsumer>;\n    }) {\n        this.searchModel = properties.searchModel;\n        this.sinaNext = properties.sinaNext;\n        for (const consumer of properties.eventConsumers) {\n            this.addConsumer(consumer);\n        }\n    }\n\n    /**\n     * Async initialization of \"internal\" event consumers sina and flp\n     */\n    public async initAsync(): Promise<void> {\n        try {\n            if (this.searchModel.config.isUshell) {\n                const consumerFlp = new UsageAnalyticsConsumerFlp();\n                await consumerFlp.initAsync();\n                this.addConsumer(consumerFlp);\n            }\n        } catch (e) {\n            this.log.debug(\"Couldn't initialize flp user event consumer\", e);\n        }\n        try {\n            const sinaConsumer = new UsageAnalyticsConsumerSina(this.sinaNext);\n            await sinaConsumer.initAsync();\n            this.addConsumer(sinaConsumer);\n        } catch (e) {\n            this.log.debug(\"Couldn't initialize sina user event consumer\", e);\n        }\n    }\n\n    public addConsumer(consumer: EventConsumer): void {\n        this.consumers.push(consumer);\n        this.log.debug(`[${consumer.label}] Event consumer added`);\n    }\n\n    public setConsumers(consumers: EventConsumer[]): void {\n        for (const consumer of consumers) {\n            this.addConsumer(consumer);\n        }\n    }\n\n    /**\n     * Logs an event triggered by a real user.\n     * @param event - the user event to log\n     */\n    public logEvent(event: AllUserEvents): void {\n        event.sessionId = EventLogger.sessionId;\n        event.timeStamp = event.timeStamp ?? new Date().getTime().toString();\n        event.eventNumber = EventLogger.userEventNumber++;\n        for (let i = 0; i < this.consumers.length; ++i) {\n            const consumer = this.consumers[i];\n            try {\n                consumer.logEvent(event);\n                this.log.debug(\n                    `[${event.eventNumber}|${event.sessionId}|${consumer.label}] Logged user event ${event.type} - payload ${JSON.stringify(\n                        event,\n                        null,\n                        2\n                    )}`\n                );\n            } catch (err) {\n                this.log.debug(\n                    `[${consumer.label}] Error while logging user event ${event.type}`,\n                    err.stack || err\n                );\n            }\n        }\n    }\n\n    /**\n     * Logs a technical event which are rather technical in nature and not directly triggered by a user.\n     * @param event - the technical event to log\n     */\n    public logTechnicalEvent(event: AllTechnicalEvents): void {\n        event.sessionId = EventLogger.sessionId;\n        event.timeStamp = event.timeStamp ?? new Date().getTime().toString();\n        event.eventNumber = EventLogger.technicalEventNumber++;\n        for (let i = 0; i < this.consumers.length; ++i) {\n            const consumer = this.consumers[i];\n            try {\n                if (typeof consumer.logTechnicalEvent === \"function\") {\n                    consumer.logTechnicalEvent(event);\n                    this.log.debug(\n                        `[${event.eventNumber}|${event.sessionId}|${consumer.label}] Logged technical event ${event.type} - payload ${JSON.stringify(\n                            event,\n                            null,\n                            2\n                        )}`\n                    );\n                } else {\n                    // Fallback to logEvent() for backward compatibility\n                    // This will be removed in the future, so consumers should implement logTechnicalEvent()\n                    // to continue receiving technical events\n                    consumer.logEvent(event as unknown as AllUserEvents);\n                    this.log.debug(\n                        `[${event.eventNumber}|${event.sessionId}|${consumer.label}] WARNING: event ${event.type} will soon be removed from logEvent() callback, implement logTechnicalEvent() callback in your event consumer to continue receiving this event`\n                    );\n                }\n            } catch (err) {\n                this.log.debug(\n                    `[${consumer.label}] Error while logging technical event ${event.type}`,\n                    err.stack || err\n                );\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}