{"version":3,"file":"EventLogger.js","names":["sap","ui","define","Log","UsageAnalyticsConsumerSina","UsageAnalyticsConsumerFlp","EventLogger","consumers","searchModel","sinaNext","log","getLogger","static","Date","getTime","toString","constructor","properties","this","consumer","eventConsumers","addConsumer","initAsync","config","isUshell","consumerFlp","e","debug","sinaConsumer","push","label","setConsumers","logEvent","event","sessionId","timeStamp","eventNumber","userEventNumber","i","length","type","JSON","stringify","err","stack","logTechnicalEvent","technicalEventNumber"],"sources":["EventLogger.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport Log from \"sap/base/Log\";\nimport UsageAnalyticsConsumerSina from \"sap/esh/search/ui/eventlogging/UsageAnalyticsConsumerSina\";\nimport UsageAnalyticsConsumerFlp from \"sap/esh/search/ui/flp/UsageAnalyticsConsumerFlp\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport { AllUserEvents } from \"./UserEvents\";\nimport EventConsumer from \"./EventConsumer\";\nimport SearchModel from \"../SearchModel\";\nimport { AllTechnicalEvents } from \"./TechnicalEvents\";\n/**\n * EventLogger is responsible for logging user and technical events.\n * It manages a list of event consumers that handle the actual logging.\n * It also provides methods to log user and technical events.\n */\nexport default class EventLogger {\n    public consumers: EventConsumer[] = [];\n    private searchModel: SearchModel;\n    private sinaNext: Sina;\n    private log = Log.getLogger(\"sap.esh.search.ui.eventlogging.EventLogger\");\n    private static userEventNumber = 0;\n    private static technicalEventNumber = 0;\n    private static sessionId: string = new Date().getTime().toString();\n\n    constructor(properties: {\n        searchModel: SearchModel;\n        sinaNext: Sina;\n        eventConsumers: Array<EventConsumer>;\n    }) {\n        this.searchModel = properties.searchModel;\n        this.sinaNext = properties.sinaNext;\n        for (const consumer of properties.eventConsumers) {\n            this.addConsumer(consumer);\n        }\n    }\n\n    /**\n     * Async initialization of \"internal\" event consumers sina and flp\n     */\n    public async initAsync(): Promise<void> {\n        try {\n            if (this.searchModel.config.isUshell) {\n                const consumerFlp = new UsageAnalyticsConsumerFlp();\n                await consumerFlp.initAsync();\n                this.addConsumer(consumerFlp);\n            }\n        } catch (e) {\n            this.log.debug(\"Couldn't initialize flp user event consumer\", e);\n        }\n        try {\n            const sinaConsumer = new UsageAnalyticsConsumerSina(this.sinaNext);\n            await sinaConsumer.initAsync();\n            this.addConsumer(sinaConsumer);\n        } catch (e) {\n            this.log.debug(\"Couldn't initialize sina user event consumer\", e);\n        }\n    }\n\n    public addConsumer(consumer: EventConsumer): void {\n        this.consumers.push(consumer);\n        this.log.debug(`[${consumer.label}] Event consumer added`);\n    }\n\n    public setConsumers(consumers: EventConsumer[]): void {\n        for (const consumer of consumers) {\n            this.addConsumer(consumer);\n        }\n    }\n\n    /**\n     * Logs an event triggered by a real user.\n     * @param event - the user event to log\n     */\n    public logEvent(event: AllUserEvents): void {\n        event.sessionId = EventLogger.sessionId;\n        event.timeStamp = event.timeStamp ?? new Date().getTime().toString();\n        event.eventNumber = EventLogger.userEventNumber++;\n        for (let i = 0; i < this.consumers.length; ++i) {\n            const consumer = this.consumers[i];\n            try {\n                consumer.logEvent(event);\n                this.log.debug(\n                    `[${event.eventNumber}|${event.sessionId}|${consumer.label}] Logged user event ${event.type} - payload ${JSON.stringify(\n                        event,\n                        null,\n                        2\n                    )}`\n                );\n            } catch (err) {\n                this.log.debug(\n                    `[${consumer.label}] Error while logging user event ${event.type}`,\n                    err.stack || err\n                );\n            }\n        }\n    }\n\n    /**\n     * Logs a technical event which are rather technical in nature and not directly triggered by a user.\n     * @param event - the technical event to log\n     */\n    public logTechnicalEvent(event: AllTechnicalEvents): void {\n        event.sessionId = EventLogger.sessionId;\n        event.timeStamp = event.timeStamp ?? new Date().getTime().toString();\n        event.eventNumber = EventLogger.technicalEventNumber++;\n        for (let i = 0; i < this.consumers.length; ++i) {\n            const consumer = this.consumers[i];\n            try {\n                if (typeof consumer.logTechnicalEvent === \"function\") {\n                    consumer.logTechnicalEvent(event);\n                    this.log.debug(\n                        `[${event.eventNumber}|${event.sessionId}|${consumer.label}] Logged technical event ${event.type} - payload ${JSON.stringify(\n                            event,\n                            null,\n                            2\n                        )}`\n                    );\n                } else {\n                    // Fallback to logEvent() for backward compatibility\n                    // This will be removed in the future, so consumers should implement logTechnicalEvent()\n                    // to continue receiving technical events\n                    consumer.logEvent(event as unknown as AllUserEvents);\n                    this.log.debug(\n                        `[${event.eventNumber}|${event.sessionId}|${consumer.label}] WARNING: event ${event.type} will soon be removed from logEvent() callback, implement logTechnicalEvent() callback in your event consumer to continue receiving this event`\n                    );\n                }\n            } catch (err) {\n                this.log.debug(\n                    `[${consumer.label}] Error while logging technical event ${event.type}`,\n                    err.stack || err\n                );\n            }\n        }\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,wIAAAC,EAAAC,EAAAC,GAAA,aAkBe,MAAMC,EACVC,UAA6B,GAC5BC,YACAC,SACAC,IAAMP,EAAIQ,UAAU,8CAC5BC,uBAAiC,EACjCA,4BAAsC,EACtCA,kBAAmC,IAAIC,MAAOC,UAAUC,WAExDC,YAAYC,GAKRC,KAAKV,YAAcS,EAAWT,YAC9BU,KAAKT,SAAWQ,EAAWR,SAC3B,IAAK,MAAMU,KAAYF,EAAWG,eAAgB,CAC9CF,KAAKG,YAAYF,EACrB,CACJ,CAKA,eAAaG,GACT,IACI,GAAIJ,KAAKV,YAAYe,OAAOC,SAAU,CAClC,MAAMC,EAAc,IAAIpB,QAClBoB,EAAYH,YAClBJ,KAAKG,YAAYI,EACrB,CACJ,CAAE,MAAOC,GACLR,KAAKR,IAAIiB,MAAM,8CAA+CD,EAClE,CACA,IACI,MAAME,EAAe,IAAIxB,EAA2Bc,KAAKT,gBACnDmB,EAAaN,YACnBJ,KAAKG,YAAYO,EACrB,CAAE,MAAOF,GACLR,KAAKR,IAAIiB,MAAM,+CAAgDD,EACnE,CACJ,CAEOL,YAAYF,GACfD,KAAKX,UAAUsB,KAAKV,GACpBD,KAAKR,IAAIiB,MAAM,IAAIR,EAASW,8BAChC,CAEOC,aAAaxB,GAChB,IAAK,MAAMY,KAAYZ,EAAW,CAC9BW,KAAKG,YAAYF,EACrB,CACJ,CAMOa,SAASC,GACZA,EAAMC,UAAY5B,EAAY4B,UAC9BD,EAAME,UAAYF,EAAME,YAAa,IAAItB,MAAOC,UAAUC,WAC1DkB,EAAMG,YAAc9B,EAAY+B,kBAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,KAAKX,UAAUgC,SAAUD,EAAG,CAC5C,MAAMnB,EAAWD,KAAKX,UAAU+B,GAChC,IACInB,EAASa,SAASC,GAClBf,KAAKR,IAAIiB,MACL,IAAIM,EAAMG,eAAeH,EAAMC,aAAaf,EAASW,4BAA4BG,EAAMO,kBAAkBC,KAAKC,UAC1GT,EACA,KACA,KAGZ,CAAE,MAAOU,GACLzB,KAAKR,IAAIiB,MACL,IAAIR,EAASW,yCAAyCG,EAAMO,OAC5DG,EAAIC,OAASD,EAErB,CACJ,CACJ,CAMOE,kBAAkBZ,GACrBA,EAAMC,UAAY5B,EAAY4B,UAC9BD,EAAME,UAAYF,EAAME,YAAa,IAAItB,MAAOC,UAAUC,WAC1DkB,EAAMG,YAAc9B,EAAYwC,uBAChC,IAAK,IAAIR,EAAI,EAAGA,EAAIpB,KAAKX,UAAUgC,SAAUD,EAAG,CAC5C,MAAMnB,EAAWD,KAAKX,UAAU+B,GAChC,IACI,UAAWnB,EAAS0B,oBAAsB,WAAY,CAClD1B,EAAS0B,kBAAkBZ,GAC3Bf,KAAKR,IAAIiB,MACL,IAAIM,EAAMG,eAAeH,EAAMC,aAAaf,EAASW,iCAAiCG,EAAMO,kBAAkBC,KAAKC,UAC/GT,EACA,KACA,KAGZ,KAAO,CAIHd,EAASa,SAASC,GAClBf,KAAKR,IAAIiB,MACL,IAAIM,EAAMG,eAAeH,EAAMC,aAAaf,EAASW,yBAAyBG,EAAMO,qJAE5F,CACJ,CAAE,MAAOG,GACLzB,KAAKR,IAAIiB,MACL,IAAIR,EAASW,8CAA8CG,EAAMO,OACjEG,EAAIC,OAASD,EAErB,CACJ,CACJ,EACH,OAAArC,CAAA","ignoreList":[]}