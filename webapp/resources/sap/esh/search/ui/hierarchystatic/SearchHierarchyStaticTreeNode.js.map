{"version":3,"file":"SearchHierarchyStaticTreeNode.js","names":["sap","ui","define","___eventlogging_UserEvents","__TreeNode","_interopRequireDefault","obj","__esModule","default","UserEventType","TreeNode","SearchHierarchyStaticTreeNode","hasFilter","icon","constructor","props","super","this","getData","facet","setExpanded","expanded","updateUI","mixinFilterNodes","getTreeNodeFactory","toggleFilter","setFilter","activateFilters","set","filterCondition","sina","createSimpleCondition","operator","ComparisonOperator","DescendantOf","attribute","attributeId","attributeLabel","title","value","id","valueLabel","label","uiFilter","model","getProperty","removeExistingFilters","config","searchInAreaOverwriteMode","resetQuickSelectDataSourceAll","setSearchBoxTerm","resetFilterByFilterConditions","autoInsertCondition","userEventStaticFacetSelect","type","STATIC_FACET_SELECT","clickedValue","clickedLabel","clickedPosition","dataSourceKey","getDataSource","eventLogger","logEvent","autoRemoveCondition","filterConditonsForRemoval","rootCondition","getAttributeConditions","fetchChildTreeNodesImpl","getId","item","i","attributes","length","getLabel","titleAttributes","titleAttribute","startsWith","push","valueFormatted","join","getIcon","filter","createFilter","dataSource","ChildOf","query","createSearchQuery","top","resultSet","getResultSetAsync","hasErrors","getErrors","forEach","error","errorHandler","onError","childTreeNodes","items","node","treeNodeFactory","createTreeNode","expandable","attributesMap","HASHIERARCHYNODECHILD","updateNodePath","path","index","Error","pathPart","childNode","getChildTreeNodeById","addChildTreeNode"],"sources":["SearchHierarchyStaticTreeNode.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { StaticFacetSelectEvent, UserEventType } from \"../eventlogging/UserEvents\";\nimport { HierarchyNode } from \"../sinaNexTS/sina/HierarchyNode\";\nimport { SearchResultSet } from \"../sinaNexTS/sina/SearchResultSet\";\nimport TreeNode, { TreeNodeProperties } from \"../tree/TreeNode\";\nimport SearchHierarchyStaticFacet from \"./SearchHierarchyStaticFacet\";\n\ninterface SearchHierarchyStaticTreeNodeProperties extends TreeNodeProperties {\n    icon?: string;\n    facet: SearchHierarchyStaticFacet;\n}\n\nexport default class SearchHierarchyStaticTreeNode extends TreeNode {\n    hasFilter: boolean;\n    icon: string;\n    constructor(props: SearchHierarchyStaticTreeNodeProperties) {\n        super(props);\n        this.icon = props.icon;\n        this.getData().facet = props.facet;\n    }\n\n    async setExpanded(expanded: boolean, updateUI?: boolean) {\n        await super.setExpanded(expanded, false);\n        this.getData().facet.mixinFilterNodes();\n        if (updateUI) {\n            this.getTreeNodeFactory().updateUI();\n        }\n    }\n\n    async toggleFilter(): Promise<void> {\n        const facet = this.getData().facet as SearchHierarchyStaticFacet;\n        if (!this.hasFilter) {\n            // set filter\n            this.setFilter(true);\n        } else {\n            // remove filter\n            this.setFilter(false);\n        }\n        await facet.activateFilters();\n    }\n\n    setFilter(set: boolean): void {\n        const facet = this.getData().facet as SearchHierarchyStaticFacet;\n        const filterCondition = facet.sina.createSimpleCondition({\n            operator: facet.sina.ComparisonOperator.DescendantOf,\n            attribute: facet.attributeId,\n            attributeLabel: facet.title, // TODO\n            value: this.id,\n            valueLabel: this.label,\n        });\n        const uiFilter = facet.model.getProperty(\"/uiFilter\");\n        if (set) {\n            this.removeExistingFilters();\n            if (facet.model.config.searchInAreaOverwriteMode) {\n                facet.model.config.resetQuickSelectDataSourceAll(facet.model);\n            }\n            facet.model.setSearchBoxTerm(\"\", false);\n            facet.model.resetFilterByFilterConditions(false);\n            uiFilter.autoInsertCondition(filterCondition);\n            const userEventStaticFacetSelect: StaticFacetSelectEvent = {\n                type: UserEventType.STATIC_FACET_SELECT,\n                clickedValue: this.id,\n                clickedLabel: this.label,\n                clickedPosition: -1, // position is not relevant for static facets\n                dataSourceKey: facet.model.getDataSource().id,\n            };\n            facet.model.eventLogger.logEvent(userEventStaticFacetSelect);\n        } else {\n            uiFilter.autoRemoveCondition(filterCondition);\n        }\n    }\n\n    removeExistingFilters() {\n        const facet = this.getData().facet as SearchHierarchyStaticFacet;\n        const uiFilter = facet.model.getProperty(\"/uiFilter\");\n        const filterConditonsForRemoval = uiFilter.rootCondition.getAttributeConditions(facet.attributeId);\n        for (const filterCondition of filterConditonsForRemoval) {\n            uiFilter.autoRemoveCondition(filterCondition);\n        }\n    }\n\n    async fetchChildTreeNodesImpl(): Promise<Array<SearchHierarchyStaticTreeNode>> {\n        // helper functions\n        const getId = (item) => {\n            for (let i = 0; i < item.attributes.length; ++i) {\n                const attribute = item.attributes[i];\n                if (attribute.id === facet.attributeId) {\n                    return attribute.value;\n                }\n            }\n        };\n        const getLabel = (item) => {\n            const label = [];\n            for (let i = 0; i < item.titleAttributes.length; ++i) {\n                const titleAttribute = item.titleAttributes[i];\n                if (!titleAttribute.value.startsWith(\"sap-icon://\")) {\n                    label.push(titleAttribute.valueFormatted);\n                }\n            }\n            return label.join(\" \");\n        };\n        const getIcon = (item) => {\n            for (let i = 0; i < item.attributes.length; ++i) {\n                const attribute = item.attributes[i];\n                if (typeof attribute.value === \"string\" && attribute.value.startsWith(\"sap-icon://\")) {\n                    return attribute.value;\n                }\n            }\n            return \"sap-icon://none\";\n        };\n\n        const facet = this.getData().facet as SearchHierarchyStaticFacet;\n        const filter = facet.sina.createFilter({ dataSource: facet.dataSource });\n        filter.autoInsertCondition(\n            facet.sina.createSimpleCondition({\n                attribute: facet.attributeId,\n                value: this.id,\n                operator: facet.sina.ComparisonOperator.ChildOf,\n            })\n        );\n        const query = facet.sina.createSearchQuery({\n            filter: filter,\n            top: 500,\n        });\n        const resultSet = (await query.getResultSetAsync()) as SearchResultSet;\n\n        if (resultSet.hasErrors()) {\n            resultSet.getErrors().forEach((error) => facet.model.errorHandler.onError(error));\n        }\n\n        const childTreeNodes = [];\n        for (let i = 0; i < resultSet.items.length; ++i) {\n            const item = resultSet.items[i];\n            const node = facet.treeNodeFactory.createTreeNode({\n                facet: facet,\n                id: getId(item),\n                label: getLabel(item),\n                icon: getIcon(item),\n                expandable:\n                    !item.attributesMap.HASHIERARCHYNODECHILD ||\n                    item.attributesMap.HASHIERARCHYNODECHILD.value === \"true\",\n            }); // ToDo, try to get rid of artificial attribute 'HASHIERARCHYNODECHILD'\n            childTreeNodes.push(node);\n        }\n        return childTreeNodes;\n    }\n\n    updateNodePath(path: Array<HierarchyNode>, index: number): void {\n        if (path[index].id !== this.id) {\n            throw new Error(\"program error\"); // TODO\n        }\n        if (index + 1 >= path.length) {\n            return;\n        }\n        const pathPart = path[index + 1];\n        let childNode = this.getChildTreeNodeById(pathPart.id) as SearchHierarchyStaticTreeNode;\n        if (!childNode) {\n            const facet = this.getData().facet as SearchHierarchyStaticFacet;\n            childNode = facet.treeNodeFactory.createTreeNode({\n                facet: facet,\n                id: pathPart.id,\n                label: pathPart.label,\n            });\n            this.addChildTreeNode(childNode);\n        }\n        childNode.updateNodePath(path, index + 1);\n    }\n}\n"],"mappings":"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","ignoreList":[]}