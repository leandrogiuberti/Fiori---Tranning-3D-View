{"version":3,"file":"SearchHierarchyStaticFacet-dbg.js","names":["sap","ui","define","__TreeNodeFactory","__SearchHierarchyStaticTreeNode","___SearchHelperSequentializeDecorator","___controls_facets_FacetTypeUI","_interopRequireDefault","obj","__esModule","default","TreeNodeFactory","SearchHierarchyStaticTreeNode","sequentializedExecution","FacetTypeUI","SearchHierarchyStaticFacet","rootNodeId","model","attributeId","dataSource","filter","title","sina","facetType","facetIndex","position","treeNodeFactory","rootTreeNode","constructor","properties","sinaNext","HierarchyStatic","create","rootTreeNodePath","treeNodeConstructor","busyIndicator","createRootTreeNode","id","label","facet","updateTree","setFacetIndex","index","setRootTreeNodePath","initAsync","childTreeNodes","fetchChildTreeNodes","addChildTreeNodes","activateFilters","fireSearchQuery","notifyFilterChanged","doUpdateTree","updateRecursively","mixinFilterNodes","updateUI","getComplexConditionOfFacet","complexCondition","rootCondition","conditions","containsAttribute","getFilterConditions","filterConditions","condition","push","hasFilter","visitChildNodesRecursively","node","filterCondition","getTreeNode","value","autoExpandFirstFilterNode","handleModelUpdate","delete","firstFilterNode","isVisible","getParentTreeNode","expanded","updateNodesFromHierarchyNodePaths","hierarchyNodePaths","i","length","hierarchyNodePath","name","updateNodePath","path"],"sources":["SearchHierarchyStaticFacet.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/*!\n * The SearchHierarchyStaticFacet class is used for the model representation of static hierarchy facets.\n * The corresponding UI control is SearchFacetHierarchyStatic.\n */\n\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ComplexCondition } from \"../sinaNexTS/sina/ComplexCondition\";\nimport { DataSource } from \"../sinaNexTS/sina/DataSource\";\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { HierarchyNodePath } from \"../sinaNexTS/sina/HierarchyNodePath\";\nimport { SimpleCondition } from \"../sinaNexTS/sina/SimpleCondition\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport TreeNodeFactory from \"../tree/TreeNodeFactory\";\nimport SearchHierarchyStaticTreeNode from \"./SearchHierarchyStaticTreeNode\";\nimport { sequentializedExecution } from \"../SearchHelperSequentializeDecorator\";\nimport { FacetTypeUI } from \"../controls/facets/FacetTypeUI\";\n\nexport interface SearchHierarchyStaticFacetOptions {\n    model: SearchModel;\n    attributeId: string;\n    dataSource: DataSource;\n    filter: Filter;\n    title: string;\n}\nexport default class SearchHierarchyStaticFacet {\n    public static readonly rootNodeId = \"$$ROOT$$\";\n    model: SearchModel;\n    attributeId: string;\n    dataSource: DataSource;\n    filter: Filter;\n    title: string;\n    sina: Sina;\n    facetType: string; // ToDo\n    facetIndex: number;\n    position: number;\n    treeNodeFactory: TreeNodeFactory<SearchHierarchyStaticTreeNode, typeof SearchHierarchyStaticTreeNode>;\n    rootTreeNode: SearchHierarchyStaticTreeNode;\n\n    constructor(properties: SearchHierarchyStaticFacetOptions) {\n        this.model = properties.model;\n        this.sina = this.model.sinaNext;\n        this.attributeId = properties.attributeId;\n        this.dataSource = properties.dataSource;\n        this.filter = properties.filter;\n        this.facetType = FacetTypeUI.HierarchyStatic;\n        this.title = properties.title;\n        this.facetIndex = -1;\n        this.position = -1;\n        this.treeNodeFactory = TreeNodeFactory.create<\n            SearchHierarchyStaticTreeNode,\n            typeof SearchHierarchyStaticTreeNode\n        >({\n            model: this.model,\n            rootTreeNodePath: `/facets/${this.facetIndex}/rootTreeNode`, // updated in setFacetIndex\n            treeNodeConstructor: SearchHierarchyStaticTreeNode,\n            busyIndicator: this.model.busyIndicator,\n        });\n        this.rootTreeNode = this.treeNodeFactory.createRootTreeNode({\n            id: SearchHierarchyStaticFacet.rootNodeId,\n            label: \"Root\",\n            facet: this,\n        });\n        this.updateTree = sequentializedExecution(this.updateTree);\n    }\n\n    setFacetIndex(index: number) {\n        this.facetIndex = index;\n        this.treeNodeFactory.setRootTreeNodePath(`/facets/${this.facetIndex}/rootTreeNode`);\n    }\n\n    async initAsync(): Promise<void> {\n        const childTreeNodes = await this.rootTreeNode.fetchChildTreeNodes();\n        this.rootTreeNode.addChildTreeNodes(childTreeNodes);\n    }\n\n    async activateFilters(): Promise<void> {\n        try {\n            await this.model.fireSearchQuery();\n            this.model.notifyFilterChanged();\n        } finally {\n            //\n        }\n    }\n\n    updateTree(): Promise<void> {\n        // not sure whether sequentialized decorator does work on async methods\n        // therefore use this wrapper\n        return this.doUpdateTree();\n    }\n\n    async doUpdateTree(): Promise<void> {\n        await this.treeNodeFactory.updateRecursively();\n        await this.mixinFilterNodes();\n        this.treeNodeFactory.updateUI();\n    }\n    getComplexConditionOfFacet(): ComplexCondition {\n        for (const complexCondition of (this.filter.rootCondition as ComplexCondition).conditions) {\n            if (complexCondition.containsAttribute(this.attributeId)) {\n                return complexCondition as ComplexCondition;\n            }\n        }\n        return null;\n    }\n\n    getFilterConditions(): Array<SimpleCondition> {\n        const filterConditions: Array<SimpleCondition> = [];\n        const complexCondition = this.getComplexConditionOfFacet();\n        if (!complexCondition) {\n            return filterConditions;\n        }\n        for (const condition of complexCondition.conditions) {\n            filterConditions.push(condition as SimpleCondition);\n        }\n        return filterConditions;\n    }\n\n    async mixinFilterNodes(): Promise<void> {\n        // reset filter flags for complete tree\n        this.rootTreeNode.hasFilter = false;\n        this.rootTreeNode.visitChildNodesRecursively(function (node) {\n            node.hasFilter = false;\n        });\n        // set filter flag from filter conditions\n        const filterConditions = this.getFilterConditions();\n        for (const filterCondition of filterConditions) {\n            const node = this.treeNodeFactory.getTreeNode(filterCondition.value as string);\n            if (!node) {\n                continue; // TODO shall never happen\n            }\n            node.hasFilter = true;\n        }\n        // auto expand first filter\n        await this.autoExpandFirstFilterNode();\n    }\n\n    handleModelUpdate() {\n        this.treeNodeFactory.updateUI();\n    }\n\n    delete() {\n        this.treeNodeFactory.delete();\n    }\n\n    async autoExpandFirstFilterNode(): Promise<void> {\n        // determine first node with filter\n        let firstFilterNode: SearchHierarchyStaticTreeNode = null;\n        this.rootTreeNode.visitChildNodesRecursively(function (node) {\n            if (node.hasFilter && !firstFilterNode) {\n                firstFilterNode = node;\n            }\n        });\n        if (!firstFilterNode) {\n            return;\n        }\n        if (firstFilterNode.isVisible()) {\n            return;\n        }\n        // expand nodes following path to root node\n        let node = firstFilterNode.getParentTreeNode();\n        while (node) {\n            node.expanded = true;\n            node = node.getParentTreeNode();\n        }\n        // update tree\n        await this.treeNodeFactory.updateRecursively();\n    }\n\n    updateNodesFromHierarchyNodePaths(hierarchyNodePaths: Array<HierarchyNodePath>): void {\n        for (let i = 0; i < hierarchyNodePaths.length; ++i) {\n            const hierarchyNodePath = hierarchyNodePaths[i];\n            if (hierarchyNodePath.name !== this.attributeId) {\n                continue;\n            }\n            this.rootTreeNode.updateNodePath(hierarchyNodePath.path, 0);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}