{"version":3,"file":"SuggestionHandler-dbg.js","names":["sap","ui","define","Log","__i18n","__AppSuggestionProvider","__RecentlyUsedSuggestionProvider","__SinaSuggestionProvider","___SuggestionType","__TimeMerger","SearchHelper","___eventlogging_UserEvents","Element","_interopRequireDefault","obj","__esModule","default","i18n","AppSuggestionProvider","RecentlyUsedSuggestionProvider","SinaSuggestionProvider","SuggestionType","SuggestionTypeProperties","TimeMerger","UserEventType","SuggestionHandler","_oLogger","model","suggestionProviders","keyboardRelaxationTime","uiUpdateInterval","uiClearOldSuggestionsTimeOut","recentlyUsedSuggestionProvider","appSuggestionProvider","timeMerger","suggestionProvidersPromise","sinaNext","firstInsertion","busyIndicator","performanceLoggerSuggestionMethods","clearSuggestionTimer","suggestionResultSetCounter","suggestionHeaders","generatedPositions","doSuggestionInternalDelayed","constructor","params","getLogger","config","suggestionKeyboardRelaxationTime","supportsRecentlyUsedSuggestions","suggestionHandler","delayedExecution","doSuggestionInternal","bind","bRecentSearches","abortSuggestions","clearSuggestions","undefined","setProperty","clearTimeout","abort","getSuggestionProviders","then","i","length","suggestionProvider","method","performanceLogger","leaveMethod","name","initAsync","isUshell","push","searchBusinessObjects","Promise","resolve","createSinaSuggestionProviders","providerConfigurations","suggestionTypes","SearchTermHistory","SearchTermData","DataSource","boSuggestions","Object","aiSuggestions","SearchTermAI","k","providerConfiguration","isSuggestionPopupVisible","suggestions","document","querySelectorAll","Array","from","some","suggestion","offsetParent","doSuggestion","filter","searchTerm","toLocaleLowerCase","indexOf","autoSelectAppSuggestion","getSuggestions","suggestionTerm","getProperty","trim","insertSuggestions","enterMethod","isSearch","comments","eventLogger","logEvent","type","SUGGESTION_REQUEST","dataSourceKey","id","promises","pending","window","setTimeout","process","results","j","result","Error","error","stack","catch","generateSuggestionHeader","insertSuggestion","header","uiSuggestionType","App","label","getText","helpLink","aiSuggestionsHeaderHelpLink","dataSource","labelPlural","isRecentEntry","position","Header","uiSuggestionTypeOfSuggestionsInSection","enableBusyIndicator","enabled","properties","BusyIndicator","splice","checkDuplicate","checkRelevancy","action","grouped","index","slice","insertIntoSuggestionList","isWebCompSearchFieldGroupEnabled","sortSuggestions","limitSuggestions","updateSuggestions","flagReplace","maxPosition","resultSetPosition","duplicateCheckResult","isHeaderGenerationEnabled","getDataSource","appDataSource","DataSourceType","BusinessObject","sort","s1","s2","cmp","getSuggestionLimit","suggestionTypeData","Infinity","limit","allDataSource","favDataSource","limitDsAll","numberSuggestions","suggestionType","number","searchFieldInShellId","input","getElementById","suggestionKey","suggestionRows","getSuggestionRows","suggestionRow","getBindingContext","getObject","getSelected","key","_iPopupListSelectedIndex","setSelected","rerender"],"sources":["SuggestionHandler.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport Log, { Logger } from \"sap/base/Log\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport i18n from \"../i18n\";\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport AppSuggestionProvider, { AppSuggestion } from \"./AppSuggestionProvider\";\nimport RecentlyUsedSuggestionProvider from \"./RecentlyUsedSuggestionProvider\";\nimport SinaSuggestionProvider from \"./SinaSuggestionProvider\";\nimport { SuggestionProvider } from \"./SuggestionProvider\";\nimport {\n    Type as SuggestionType,\n    SuggestionType as SuggestionTypeProperties,\n    Suggestion,\n    SuggestionHeader,\n} from \"./SuggestionType\";\nimport TimeMerger from \"./TimeMerger\";\n// import TransactionSuggestionProvider, { TransactionSuggestion } from \"./TransactionSuggestionProvider\";\nimport * as SearchHelper from \"sap/esh/search/ui/SearchHelper\";\nimport { UserEventType } from \"../eventlogging/UserEvents\";\nimport { AbortableFunction } from \"sap/esh/search/ui/SearchHelper\";\nimport SearchInput from \"../controls/searchfieldgroup/SearchInput\";\nimport ColumnListItem from \"sap/m/ColumnListItem\";\nimport Element from \"sap/ui/core/Element\";\n\nexport default class SuggestionHandler {\n    private _oLogger: Logger;\n    private model: SearchModel;\n    private suggestionProviders: Array<SuggestionProvider>;\n    private keyboardRelaxationTime: number;\n    private readonly uiUpdateInterval = 500;\n    private readonly uiClearOldSuggestionsTimeOut = 1000;\n    private recentlyUsedSuggestionProvider: RecentlyUsedSuggestionProvider;\n    private appSuggestionProvider: AppSuggestionProvider;\n    private timeMerger: TimeMerger;\n    private suggestionProvidersPromise?: Promise<Array<SuggestionProvider>>;\n    private sinaNext: Sina;\n    private firstInsertion?: boolean;\n    private busyIndicator?: boolean;\n    private performanceLoggerSuggestionMethods: string[];\n    private clearSuggestionTimer?: number;\n    private suggestionResultSetCounter: number;\n    private suggestionHeaders: Record<number, boolean>;\n    private generatedPositions: { maxPosition: number; position: Record<string, number> };\n    private doSuggestionInternalDelayed: AbortableFunction<typeof this.doSuggestionInternal>;\n    // public transactionSuggestionProvider: TransactionSuggestionProvider;\n\n    // init\n    // ===================================================================\n    constructor(params: { model: SearchModel }) {\n        // members\n        this._oLogger = Log.getLogger(\"sap.esh.search.ui.suggestions.SuggestionHandler\");\n        this.model = params.model;\n        this.suggestionProviders = [];\n\n        // times\n        this.keyboardRelaxationTime = this.model.config.suggestionKeyboardRelaxationTime;\n\n        // recently used suggestion provider\n        if (this.supportsRecentlyUsedSuggestions()) {\n            this.recentlyUsedSuggestionProvider = new RecentlyUsedSuggestionProvider({\n                model: this.model,\n                suggestionHandler: this,\n            });\n        }\n\n        // apps suggestion provider\n        this.appSuggestionProvider = new AppSuggestionProvider({\n            model: this.model,\n            suggestionHandler: this,\n        });\n\n        // decorator for delayed suggestion execution, make delayed by default 400ms\n        this.doSuggestionInternalDelayed = SearchHelper.delayedExecution(\n            this.doSuggestionInternal.bind(this),\n            this.keyboardRelaxationTime\n        );\n\n        // time merger for merging returning suggestions callbacks\n        this.timeMerger = new TimeMerger();\n\n        this.performanceLoggerSuggestionMethods = []; // performance logging: Remember all method names of (open) suggestion calls (needed for 'abortSuggestion -> leaveMethod')\n    }\n\n    private supportsRecentlyUsedSuggestions(): boolean {\n        if (!this.model.config.bRecentSearches) return false;\n        return true;\n    }\n\n    // private supportsTransactionSuggestions(): boolean {\n    //     return false; // deactivate until S4 decides to activate it\n    //     // if (window.sap[\"cf\"]) return false; // no transaction suggestions in cFLP/multiprovider\n    //     // if (!this.model.config.isUshell) return false; // transaction suggestions are only shown in ushell\n    //     // if (\n    //     //     this.model.sinaNext.provider.serverInfo &&\n    //     //     this.model.sinaNext.provider.serverInfo.Services &&\n    //     //     this.model.sinaNext.provider.serverInfo.Services.results &&\n    //     //     this.model.sinaNext.provider.serverInfo.Services.results.length > 0\n    //     // ) {\n    //     //     for (const capability of this.model.sinaNext.provider.serverInfo.Services.results) {\n    //     //         if (capability.Id === \"TransactionSuggestions\") return true;\n    //     //     }\n    //     // }\n    //     // return false;\n    // }\n\n    // abort suggestions\n    // ===================================================================\n    public abortSuggestions(clearSuggestions?: boolean): void {\n        if (clearSuggestions === undefined || clearSuggestions === true) {\n            this.model.setProperty(\"/suggestions\", []);\n            this.model.setProperty(\"/isBusySuggestions\", false);\n            // console.log(\"xx sug clear\");\n        }\n        if (this.clearSuggestionTimer) {\n            clearTimeout(this.clearSuggestionTimer);\n            this.clearSuggestionTimer = null;\n        }\n        this.doSuggestionInternalDelayed.abort(); // abort time delayed calls\n        this.getSuggestionProviders().then((suggestionProviders: Array<SuggestionProvider>) => {\n            for (let i = 0; i < suggestionProviders.length; ++i) {\n                const suggestionProvider = suggestionProviders[i];\n                suggestionProvider.abortSuggestions();\n            }\n            this.timeMerger.abort();\n\n            for (const method of this.performanceLoggerSuggestionMethods) {\n                this.model.config.performanceLogger?.leaveMethod({\n                    name: method,\n                });\n            }\n            this.performanceLoggerSuggestionMethods = [];\n        });\n    }\n\n    // get suggestion providers dependend on server capabilities\n    // ===================================================================\n    private getSuggestionProviders(): Promise<Array<SuggestionProvider>> {\n        // check cache\n        if (this.suggestionProvidersPromise) {\n            return this.suggestionProvidersPromise;\n        }\n\n        this.suggestionProvidersPromise = this.model.initAsync().then(() => {\n            // link to sina\n            this.sinaNext = this.model.sinaNext;\n\n            // init list of suggestion providers (app suggestions are always available)\n            const suggestionProviders = [];\n            if (this.model.config.isUshell) {\n                suggestionProviders.push(this.appSuggestionProvider);\n            }\n\n            if (this.supportsRecentlyUsedSuggestions()) {\n                suggestionProviders.push(this.recentlyUsedSuggestionProvider);\n            }\n\n            // if no business obj search configured -> just use app suggestion provider\n            if (!this.model.config.searchBusinessObjects) {\n                return Promise.resolve(suggestionProviders);\n            }\n\n            // create sina suggestion providers\n            suggestionProviders.push(...this.createSinaSuggestionProviders());\n\n            // transactions suggestion provider\n            // if (this.supportsTransactionSuggestions()) {\n            //     this.transactionSuggestionProvider = new TransactionSuggestionProvider({\n            //         model: this.model,\n            //         suggestionHandler: this,\n            //     });\n            //     suggestionProviders.push(this.transactionSuggestionProvider);\n            // }\n\n            return Promise.resolve(suggestionProviders);\n        });\n\n        return this.suggestionProvidersPromise;\n    }\n\n    // create sina suggestion providers\n    // ===================================================================\n    private createSinaSuggestionProviders(): Array<SinaSuggestionProvider> {\n        // provider configuration\n        const providerConfigurations = [\n            {\n                suggestionTypes: [SuggestionType.SearchTermHistory],\n            },\n            {\n                suggestionTypes: [SuggestionType.SearchTermData],\n            },\n            {\n                suggestionTypes: [SuggestionType.DataSource],\n            },\n        ];\n        if (this.model.config.boSuggestions) {\n            providerConfigurations.push({\n                suggestionTypes: [SuggestionType.Object],\n            });\n        }\n        if (this.model.config.aiSuggestions) {\n            // just evaluate config flag\n            // user settings is checked in SinaSuggestionProvider and may change during runtime\n            providerConfigurations.push({\n                suggestionTypes: [SuggestionType.SearchTermAI],\n            });\n        }\n        // create suggestion providers\n        const suggestionProviders = [];\n        for (let k = 0; k < providerConfigurations.length; ++k) {\n            const providerConfiguration = providerConfigurations[k];\n            suggestionProviders.push(\n                new SinaSuggestionProvider({\n                    model: this.model,\n                    sinaNext: this.sinaNext,\n                    suggestionTypes: providerConfiguration.suggestionTypes,\n                    suggestionHandler: this,\n                })\n            );\n        }\n\n        return suggestionProviders;\n    }\n\n    // check if suggestions are visible\n    // ===================================================================\n    private isSuggestionPopupVisible(): boolean {\n        // Get all elements with class searchSuggestion\n        const suggestions = document.querySelectorAll(\".searchSuggestion\");\n        // Check if any element is visible (has offsetParent)\n        return Array.from(suggestions).some(\n            (suggestion) => (suggestion as HTMLElement).offsetParent !== null\n        );\n    }\n\n    // do suggestions\n    // ===================================================================\n    public doSuggestion(filter: Filter): void {\n        if (\n            filter?.searchTerm?.toLocaleLowerCase().indexOf(\"/o\") === 0 ||\n            filter?.searchTerm?.toLocaleLowerCase().indexOf(\"/n\") === 0\n        ) {\n            this.abortSuggestions(true);\n            // disable suggestions for tcodes\n            return;\n        }\n        const clearSuggestions = filter?.searchTerm?.length === 0;\n        // - clear suggestions only if search field was empty (ai suggestions, recent suggestions)\n        // - for other suggestions types first for some time the old suggestions are displayed (see this.clearSuggestionTimer)\n        this.abortSuggestions(clearSuggestions);\n        this.doSuggestionInternalDelayed(filter); // time delayed\n    }\n\n    // auto select app suggestion\n    // ===================================================================\n    public autoSelectAppSuggestion(filter: Filter): Promise<AppSuggestion> {\n        return this.appSuggestionProvider.getSuggestions(filter).then(function (suggestions) {\n            return suggestions[0] as AppSuggestion;\n        });\n    }\n\n    // public autoSelectTransactionSuggestion(key = \"\"): TransactionSuggestion | void {\n    //     key = key.toUpperCase();\n    //     return this.transactionSuggestionProvider?.transactionSuggestions.find((suggestion) => {\n    //         return suggestion.key === key;\n    //     });\n    // }\n\n    // do suggestion internal\n    // ===================================================================\n    private doSuggestionInternal(filter: Filter) {\n        /* eslint no-loop-func:0 */\n\n        this.firstInsertion = true;\n        this.busyIndicator = false;\n        this.model.setProperty(\"/isBusySuggestions\", false);\n        const suggestionTerm = this.model.getProperty(\"/uiFilter/searchTerm\");\n\n        // no suggestions for *\n        if (suggestionTerm.trim() === \"*\") {\n            this.insertSuggestions([], 0);\n            return;\n        }\n\n        const method = `Suggestions for term ${suggestionTerm}`;\n        this.performanceLoggerSuggestionMethods.push(method);\n        this.model.config.performanceLogger?.enterMethod(\n            { name: method },\n            { isSearch: true, comments: `suggestion term: ${suggestionTerm}` }\n        );\n\n        // log suggestion request\n        this.model.eventLogger.logEvent({\n            type: UserEventType.SUGGESTION_REQUEST,\n            suggestionTerm: this.model.getProperty(\"/uiFilter/searchTerm\"),\n            dataSourceKey: this.model.getProperty(\"/uiFilter/dataSource\").id,\n        });\n\n        // get suggestion providers\n        this.getSuggestionProviders()\n            .then((suggestionProviders: Array<SuggestionProvider>) => {\n                // get suggestion promises from all providers\n                const promises: Array<Promise<Array<Suggestion>>> = [];\n                let pending = suggestionProviders.length;\n                for (let i = 0; i < suggestionProviders.length; ++i) {\n                    const suggestionProvider = suggestionProviders[i];\n                    promises.push(suggestionProvider.getSuggestions(filter));\n                }\n\n                // display empty suggestions list just with busy indicator\n                if (this.isSuggestionPopupVisible()) {\n                    // do this time delayed in order to avoid flickering\n                    // otherwise we would have: old suggestions/busy indicator/new suggestions\n                    if (this.clearSuggestionTimer) {\n                        clearTimeout(this.clearSuggestionTimer);\n                    }\n                    this.clearSuggestionTimer = window.setTimeout(() => {\n                        this.clearSuggestionTimer = null;\n                        this.insertSuggestions([], pending);\n                    }, this.uiClearOldSuggestionsTimeOut);\n                } else {\n                    // immediately display busy indicator\n                    this.insertSuggestions([], pending);\n                }\n\n                // process suggestions using time merger\n                // (merge returning suggestion callbacks happening within a time slot\n                // in order to reduce number of UI updates)\n                this.timeMerger.abort();\n                this.timeMerger = new TimeMerger(promises, this.uiUpdateInterval);\n                this.timeMerger.process((results: Array<Array<Suggestion>>) => {\n                    pending -= results.length;\n                    const suggestions: Array<Suggestion> = [];\n                    for (let j = 0; j < results.length; ++j) {\n                        const result = results[j];\n                        if (result && result instanceof Error) {\n                            this._oLogger.error(\n                                \"A suggestion provider reported an error while getting suggestions for term '\" +\n                                    filter.searchTerm +\n                                    \"'\\n\" +\n                                    result.stack || result + \"\"\n                            );\n                            continue;\n                        }\n                        if (typeof result !== \"object\") {\n                            this._oLogger.error(\n                                \"A suggestion provider returned a bad response \" +\n                                    filter.searchTerm +\n                                    \"'\\n\" +\n                                    result\n                            );\n                            continue;\n                        }\n                        suggestions.push(...result);\n                    }\n                    if (pending > 0 && suggestions.length === 0) {\n                        return; // empty result -> return and don't update (flicker) suggestions on UI\n                    }\n                    if (this.clearSuggestionTimer) {\n                        clearTimeout(this.clearSuggestionTimer);\n                        this.clearSuggestionTimer = null;\n                    }\n                    this.insertSuggestions(suggestions, pending);\n                    if (pending === 0) {\n                        for (const method of this.performanceLoggerSuggestionMethods) {\n                            this.model.config.performanceLogger?.leaveMethod({\n                                name: method,\n                            });\n                        }\n                        this.performanceLoggerSuggestionMethods = [];\n                    }\n                });\n            })\n            .catch(() => {\n                for (const method of this.performanceLoggerSuggestionMethods) {\n                    this.model.config.performanceLogger?.leaveMethod({\n                        name: method,\n                    });\n                }\n                this.performanceLoggerSuggestionMethods = [];\n            });\n    }\n\n    // generate suggestion header\n    // ===================================================================\n    private generateSuggestionHeader(insertSuggestion): SuggestionHeader {\n        const header: Partial<SuggestionHeader> = {};\n        switch (insertSuggestion.uiSuggestionType) {\n            // case SuggestionType.Transaction:\n            //     header.label = i18n.getText(\"label_transactions\");\n            //     break;\n            case SuggestionType.App:\n                header.label = i18n.getText(\"label_apps\");\n                break;\n            case SuggestionType.DataSource:\n                header.label = i18n.getText(\"searchIn\");\n                break;\n            case SuggestionType.SearchTermData:\n            case SuggestionType.SearchTermHistory:\n                header.label = i18n.getText(\"searchFor\");\n                break;\n            case SuggestionType.SearchTermAI:\n                header.label = i18n.getText(\"searchTermAIHeader\");\n                header.helpLink = this.model.config.aiSuggestionsHeaderHelpLink;\n                break;\n            case SuggestionType.Object:\n                header.label = insertSuggestion.dataSource.labelPlural; // default label\n                header.dataSource = insertSuggestion.dataSource;\n                break;\n        }\n        if (insertSuggestion.isRecentEntry) {\n            header.label = i18n.getText(\"label_recently_used\");\n        }\n        header.position = insertSuggestion.position;\n        header.suggestionResultSetCounter = this.suggestionResultSetCounter;\n        header.uiSuggestionType = SuggestionType.Header;\n        header.uiSuggestionTypeOfSuggestionsInSection = insertSuggestion.uiSuggestionType;\n        return header as SuggestionHeader;\n    }\n\n    // enable busy indicator suggestion (waiting for suggestions)\n    // ===================================================================\n    private enableBusyIndicator(suggestions, enabled: boolean) {\n        if (enabled) {\n            // enable -> add busy indicator suggestions\n            suggestions.push({\n                position: SuggestionTypeProperties.properties[SuggestionType.BusyIndicator].position,\n                uiSuggestionType: SuggestionType.BusyIndicator,\n            });\n            return;\n        }\n        // disable -> remove busy indicator suggestion\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n            if (suggestion.uiSuggestionType === SuggestionType.BusyIndicator) {\n                suggestions.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    // check for duplicate suggestion\n    // ===================================================================\n    checkDuplicate(\n        suggestions: Array<Suggestion>,\n        insertSuggestion: Suggestion\n    ): {\n        action: \"append\" | \"replace\" | \"skip\";\n        index?: number; // only if action is replace\n    } {\n        const checkRelevancy = function (insertSuggestion: Suggestion): boolean {\n            return (\n                insertSuggestion.uiSuggestionType === SuggestionType.SearchTermHistory ||\n                (insertSuggestion.uiSuggestionType === SuggestionType.SearchTermData &&\n                    !insertSuggestion.dataSource)\n            );\n        };\n\n        if (!checkRelevancy(insertSuggestion)) {\n            return {\n                action: \"append\",\n            };\n        }\n\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n            if (!checkRelevancy(suggestion)) {\n                continue;\n            }\n            if (insertSuggestion.searchTerm === suggestion.searchTerm) {\n                if (\n                    insertSuggestion.grouped &&\n                    insertSuggestion.uiSuggestionType === SuggestionType.SearchTermData &&\n                    suggestion.uiSuggestionType === SuggestionType.SearchTermHistory\n                ) {\n                    // for the top grouped suggestions: prefer data based suggestion\n                    // over history based suggestions because\n                    // - upper lower case of history and data based suggestions may differ\n                    // - upper lower case should be identical for all grouped suggestions\n                    return {\n                        action: \"replace\",\n                        index: i,\n                    };\n                }\n                return {\n                    action: \"skip\",\n                };\n            }\n        }\n        return {\n            action: \"append\",\n        };\n    }\n\n    // insert suggestions\n    // ===================================================================\n    private insertSuggestions(insertSuggestions, pending: number): void {\n        // get suggestions from model\n        let suggestions: Array<Suggestion> = this.model.getProperty(\"/suggestions\").slice(); // copy list (updateSuggestions needs to access old list via data binding)\n\n        // unsorted insert of suggestions\n        suggestions = this.insertIntoSuggestionList(insertSuggestions, suggestions);\n\n        // adjust busy indicator\n        if (!this.busyIndicator && pending > 0) {\n            if (!this.model.config.isWebCompSearchFieldGroupEnabled()) {\n                this.enableBusyIndicator(suggestions, true);\n            }\n            this.busyIndicator = true;\n            this.model.setProperty(\"/isBusySuggestions\", true);\n        }\n        if (this.busyIndicator && pending === 0) {\n            if (!this.model.config.isWebCompSearchFieldGroupEnabled()) {\n                this.enableBusyIndicator(suggestions, false);\n            }\n            this.busyIndicator = false;\n            this.model.setProperty(\"/isBusySuggestions\", false);\n        }\n\n        // sort\n        this.sortSuggestions(suggestions);\n\n        // remove suggestions if over limit\n        // (limit needs to be done here because history and search term suggestions are merged)\n        this.limitSuggestions(suggestions);\n\n        // set suggestions in model\n        this.updateSuggestions(suggestions);\n        //this.model.setProperty('/suggestions', suggestions);\n    }\n\n    // insert into suggestion list\n    // ===================================================================\n    private insertIntoSuggestionList(\n        insertSuggestions: Array<Suggestion>,\n        suggestions: Array<Suggestion>\n    ): Array<Suggestion> {\n        // do we need to replace?\n        let flagReplace = false;\n        if (this.firstInsertion) {\n            this.firstInsertion = false;\n            flagReplace = true;\n        }\n\n        // reset global fields\n        if (flagReplace) {\n            suggestions = [];\n            this.suggestionHeaders = {};\n            this.suggestionResultSetCounter = 0;\n            this.generatedPositions = {\n                maxPosition: SuggestionTypeProperties.properties[SuggestionType.Object].position,\n                position: {},\n            };\n        }\n\n        // increase result set counter (used for sorting)\n        this.suggestionResultSetCounter += 1;\n\n        // add sorting information to the suggestions\n        for (let i = 0; i < insertSuggestions.length; ++i) {\n            const insertSuggestion = insertSuggestions[i];\n\n            // for object suggestions:\n            // overwrite position by a generated position for grouping object suggestions by datasource\n            // object suggestions from recent storage are not affected by this logic (they are displayed in the recent section)\n            if (\n                insertSuggestion.uiSuggestionType === SuggestionType.Object &&\n                !insertSuggestion.isRecentEntry\n            ) {\n                let position = this.generatedPositions.position[insertSuggestion.dataSource.id];\n                if (!position) {\n                    this.generatedPositions.maxPosition += 1;\n                    position = this.generatedPositions.maxPosition;\n                    this.generatedPositions.position[insertSuggestion.dataSource.id] = position;\n                }\n                insertSuggestion.position = position;\n            }\n\n            // set fields used in sorting\n            insertSuggestion.suggestionResultSetCounter = this.suggestionResultSetCounter;\n            insertSuggestion.resultSetPosition = i;\n\n            // additional duplicate check for search term suggestions\n            const duplicateCheckResult = this.checkDuplicate(suggestions, insertSuggestion);\n            switch (duplicateCheckResult.action) {\n                case \"append\":\n                    suggestions.push(insertSuggestion);\n                    break;\n                case \"skip\":\n                    continue;\n                case \"replace\":\n                    //var toBeReplacedSuggestion = suggestions[duplicateCheckResult.index];\n                    suggestions.splice(duplicateCheckResult.index, 1, insertSuggestion);\n                    //insertSuggestion.suggestionResultSetCounter = toBeReplacedSuggestion.suggestionResultSetCounter;\n                    //insertSuggestion.resultSetPosition = toBeReplacedSuggestion.resultSetPosition;\n                    break;\n            }\n\n            if (this.isHeaderGenerationEnabled() && !this.suggestionHeaders[insertSuggestion.position]) {\n                suggestions.push(this.generateSuggestionHeader(insertSuggestion));\n                this.suggestionHeaders[insertSuggestion.position] = true;\n            }\n        }\n\n        return suggestions;\n    }\n\n    // check whether we need to generate headers\n    // ===================================================================\n    private isHeaderGenerationEnabled(): boolean {\n        // no headings for app datsource\n        if (this.model.getDataSource() === this.model.appDataSource) {\n            return false;\n        }\n\n        // no headings if bo suggestions are deactivated datasource is businessobject (connector)\n        if (\n            !this.model.config.boSuggestions &&\n            this.model.getDataSource().type === this.sinaNext.DataSourceType.BusinessObject\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // sort suggestions\n    // ===================================================================\n    private sortSuggestions(suggestions) {\n        suggestions.sort(function (s1, s2) {\n            // position is main sort field\n            let cmp = s1.position - s2.position;\n            if (cmp !== 0) {\n                return cmp;\n            }\n\n            // headers are always on top of each section\n            if (s1.uiSuggestionType === SuggestionType.Header) {\n                return -1;\n            }\n            if (s2.uiSuggestionType === SuggestionType.Header) {\n                return 1;\n            }\n\n            // special: grouped search term suggestions on top\n            // grouped: the first search term suggestion with sub suggestions by datasource\n            // for instance: sally in All\n            //               sally in Employees\n            //               sally in Customers\n            if (s1.grouped && !s2.grouped) {\n                return -1;\n            }\n            if (!s1.grouped && s2.grouped) {\n                return 1;\n            }\n\n            // sort by result set\n            cmp = s1.suggestionResultSetCounter - s2.suggestionResultSetCounter;\n            if (cmp !== 0) {\n                return cmp;\n            }\n\n            // sort by position in result set\n            cmp = s1.resultSetPosition - s2.resultSetPosition;\n            return cmp;\n        });\n    }\n\n    // get suggestion limit\n    // ===================================================================\n    public getSuggestionLimit(uiSuggestionType: SuggestionType): number {\n        const suggestionTypeData = SuggestionTypeProperties.properties[uiSuggestionType];\n        if (typeof suggestionTypeData === \"undefined\") {\n            return Infinity;\n        }\n        let limit;\n        if (\n            this.model.getDataSource() === this.model.sinaNext.allDataSource ||\n            this.model.getDataSource() === this.model.favDataSource\n        ) {\n            limit = suggestionTypeData.limitDsAll;\n        } else {\n            limit = suggestionTypeData.limit;\n        }\n        return limit;\n    }\n\n    // limit suggestions\n    // ===================================================================\n    limitSuggestions(suggestions: Array<Suggestion>): void {\n        const numberSuggestions = {};\n\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n            let suggestionType = suggestion.uiSuggestionType;\n            if (suggestionType === SuggestionType.SearchTermHistory) {\n                suggestionType = SuggestionType.SearchTermData; // history and data suggestions are merged\n            }\n            const limit = this.getSuggestionLimit(suggestionType);\n            let number = numberSuggestions[suggestionType];\n            if (typeof number === \"undefined\") {\n                number = 0;\n                numberSuggestions[suggestionType] = number;\n            }\n            if (number >= limit) {\n                suggestions.splice(i, 1);\n                --i;\n                continue;\n            }\n            numberSuggestions[suggestionType] = number + 1;\n        }\n    }\n\n    // update suggestions with restore old selected suggestion\n    // ===================================================================\n    private updateSuggestions(suggestions: Array<Suggestion>): void {\n        const searchFieldInShellId = \"searchFieldInShell-input\";\n        let input = Element.getElementById(searchFieldInShellId) as unknown as SearchInput;\n        if (!input) {\n            input = this.model.getProperty(\"/inputHelp\");\n        }\n\n        // get selected entry in old suggestion list\n        let suggestionKey;\n        if (!this.model.config.isWebCompSearchFieldGroupEnabled()) {\n            const suggestionRows = input.getSuggestionRows() as unknown as ColumnListItem[];\n            for (let i = 0; i < suggestionRows.length; ++i) {\n                const suggestionRow = suggestionRows[i];\n                const suggestion = suggestionRow.getBindingContext().getObject() as Suggestion;\n                if (suggestionRow.getSelected()) {\n                    suggestionKey = suggestion.key;\n                }\n            }\n        }\n\n        // update suggestions\n        this.model.setProperty(\"/suggestions\", suggestions);\n        // console.log(\"xx sug update\", suggestions);\n        // console.log(\"suggestions:\", suggestions);\n\n        // restore selected entry (ugly time delayed logic)\n        if (!this.model.config.isWebCompSearchFieldGroupEnabled()) {\n            if (!suggestionKey) {\n                return;\n            }\n            window.setTimeout(() => {\n                const suggestionRows = input.getSuggestionRows() as unknown as ColumnListItem[];\n                for (let j = 0; j < suggestionRows.length; ++j) {\n                    const suggestionRow = suggestionRows[j];\n                    const suggestion = suggestionRow.getBindingContext().getObject() as Suggestion;\n                    if (suggestion.key === suggestionKey) {\n                        input[\"_oSuggPopover\"]._iPopupListSelectedIndex = j; // ugly\n                        suggestionRow.setSelected(true);\n                        suggestionRow.rerender();\n                    }\n                }\n            }, 100);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}