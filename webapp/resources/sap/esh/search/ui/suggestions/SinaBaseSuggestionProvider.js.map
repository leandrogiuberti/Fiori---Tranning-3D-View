{"version":3,"file":"SinaBaseSuggestionProvider.js","names":["sap","ui","define","___SuggestionType","UISuggestionType","SinaBaseSuggestionProvider","suggestionQuery","suggestionTypes","constructor","sinaNext","this","createSuggestionQuery","prepareSuggestionQuery","filter","resetResultSet","setFilter","sinaSuggestionTypes","assembleSinaSuggestionTypesAndCalcModes","setTypes","types","setCalculationModes","calculationModes","setTop","append","list","element","indexOf","push","result","i","length","suggestionType","SearchTermHistory","SuggestionType","SearchTerm","SuggestionCalculationMode","History","SearchTermData","Data","SearchTermAI","DataSource","Object"],"sources":["SinaBaseSuggestionProvider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport { SuggestionCalculationMode } from \"../sinaNexTS/sina/SuggestionCalculationMode\";\nimport { SuggestionQuery } from \"../sinaNexTS/sina/SuggestionQuery\";\nimport { SuggestionType as SinaSuggestionType } from \"../sinaNexTS/sina/SuggestionType\";\nimport { Type as UISuggestionType } from \"./SuggestionType\";\n\nexport default class SinaBaseSuggestionProvider {\n    protected suggestionQuery: SuggestionQuery;\n    protected suggestionTypes: Array<UISuggestionType>;\n\n    constructor(protected sinaNext: Sina) {\n        this.suggestionQuery = this.sinaNext.createSuggestionQuery();\n    }\n\n    // prepare suggestions query\n    // ===================================================================\n    prepareSuggestionQuery(filter: Filter): void {\n        this.suggestionQuery.resetResultSet();\n        this.suggestionQuery.setFilter(filter);\n        const sinaSuggestionTypes = this.assembleSinaSuggestionTypesAndCalcModes();\n        this.suggestionQuery.setTypes(sinaSuggestionTypes.types);\n        this.suggestionQuery.setCalculationModes(sinaSuggestionTypes.calculationModes);\n        this.suggestionQuery.setTop(20);\n    }\n\n    // assemble suggestion types and calculation modes\n    // ===================================================================\n    assembleSinaSuggestionTypesAndCalcModes(): {\n        types: Array<SinaSuggestionType>;\n        calculationModes: Array<SuggestionCalculationMode>;\n    } {\n        const append = function (list, element) {\n            if (list.indexOf(element) >= 0) {\n                return;\n            }\n            list.push(element);\n        };\n        const result = {\n            types: [],\n            calculationModes: [],\n        };\n        for (let i = 0; i < this.suggestionTypes.length; ++i) {\n            const suggestionType = this.suggestionTypes[i];\n            switch (suggestionType) {\n                case UISuggestionType.SearchTermHistory:\n                    append(result.types, this.sinaNext.SuggestionType.SearchTerm);\n                    append(result.calculationModes, this.sinaNext.SuggestionCalculationMode.History);\n                    break;\n                case UISuggestionType.SearchTermData:\n                    append(result.types, this.sinaNext.SuggestionType.SearchTerm);\n                    append(result.calculationModes, this.sinaNext.SuggestionCalculationMode.Data);\n                    break;\n                case UISuggestionType.SearchTermAI:\n                    append(result.types, this.sinaNext.SuggestionType.SearchTermAI);\n                    append(result.calculationModes, this.sinaNext.SuggestionCalculationMode.Data);\n                    break;\n                case UISuggestionType.DataSource:\n                    append(result.types, this.sinaNext.SuggestionType.DataSource);\n                    append(result.calculationModes, this.sinaNext.SuggestionCalculationMode.Data);\n                    break;\n                case UISuggestionType.Object:\n                    append(result.types, this.sinaNext.SuggestionType.Object);\n                    append(result.calculationModes, this.sinaNext.SuggestionCalculationMode.Data);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,8BAAAC,GAAA,mBAUiBC,EAAgBD,EAAA,QAElB,MAAME,EACPC,gBACAC,gBAEVC,YAAsBC,GAAgBC,KAAhBD,WAClBC,KAAKJ,gBAAkBI,KAAKD,SAASE,uBACzC,CAIAC,uBAAuBC,GACnBH,KAAKJ,gBAAgBQ,iBACrBJ,KAAKJ,gBAAgBS,UAAUF,GAC/B,MAAMG,EAAsBN,KAAKO,0CACjCP,KAAKJ,gBAAgBY,SAASF,EAAoBG,OAClDT,KAAKJ,gBAAgBc,oBAAoBJ,EAAoBK,kBAC7DX,KAAKJ,gBAAgBgB,OAAO,GAChC,CAIAL,0CAII,MAAMM,EAAS,SAAUC,EAAMC,GAC3B,GAAID,EAAKE,QAAQD,IAAY,EAAG,CAC5B,MACJ,CACAD,EAAKG,KAAKF,EACd,EACA,MAAMG,EAAS,CACXT,MAAO,GACPE,iBAAkB,IAEtB,IAAK,IAAIQ,EAAI,EAAGA,EAAInB,KAAKH,gBAAgBuB,SAAUD,EAAG,CAClD,MAAME,EAAiBrB,KAAKH,gBAAgBsB,GAC5C,OAAQE,GACJ,KAAK3B,EAAiB4B,kBAClBT,EAAOK,EAAOT,MAAOT,KAAKD,SAASwB,eAAeC,YAClDX,EAAOK,EAAOP,iBAAkBX,KAAKD,SAAS0B,0BAA0BC,SACxE,MACJ,KAAKhC,EAAiBiC,eAClBd,EAAOK,EAAOT,MAAOT,KAAKD,SAASwB,eAAeC,YAClDX,EAAOK,EAAOP,iBAAkBX,KAAKD,SAAS0B,0BAA0BG,MACxE,MACJ,KAAKlC,EAAiBmC,aAClBhB,EAAOK,EAAOT,MAAOT,KAAKD,SAASwB,eAAeM,cAClDhB,EAAOK,EAAOP,iBAAkBX,KAAKD,SAAS0B,0BAA0BG,MACxE,MACJ,KAAKlC,EAAiBoC,WAClBjB,EAAOK,EAAOT,MAAOT,KAAKD,SAASwB,eAAeO,YAClDjB,EAAOK,EAAOP,iBAAkBX,KAAKD,SAAS0B,0BAA0BG,MACxE,MACJ,KAAKlC,EAAiBqC,OAClBlB,EAAOK,EAAOT,MAAOT,KAAKD,SAASwB,eAAeQ,QAClDlB,EAAOK,EAAOP,iBAAkBX,KAAKD,SAAS0B,0BAA0BG,MACxE,MAEZ,CACA,OAAOV,CACX,EACH,OAAAvB,CAAA","ignoreList":[]}