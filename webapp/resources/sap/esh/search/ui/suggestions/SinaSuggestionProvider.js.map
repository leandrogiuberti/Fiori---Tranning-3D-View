{"version":3,"file":"SinaSuggestionProvider.js","names":["sap","ui","define","__i18n","__SinaBaseSuggestionProvider","__SinaObjectSuggestionFormatter","___SuggestionType","SearchHelper","___sinaNexTS_sina_SearchResultSetItemAttribute","Device","_interopRequireDefault","obj","__esModule","default","i18n","SinaBaseSuggestionProvider","SinaObjectSuggestionFormatter","UISuggestionType","UISuggestionTypeProperties","SearchResultSetItemAttribute","SinaSuggestionProvider","suggestionLimit","suggestionStartingCharacters","model","sinaObjectSuggestionFormatter","suggestions","firstObjectDataSuggestion","numberSuggestionsByType","suggestionHandler","constructor","options","super","sinaNext","this","suggestionTypes","system","phone","config","abortSuggestions","suggestionQuery","abort","getSuggestions","filter","i","types","length","suggestionType","suggestionTerm","searchTerm","indexOf","SearchTermHistory","SearchTermData","dataSource","allDataSource","Object","DataSource","getDataSource","favDataSource","SearchTermAI","isNlqActive","createAllAndAppDsSuggestions","searchBusinessObjects","Promise","resolve","appDataSource","prepareSuggestionQuery","resultSet","getResultSetAsync","sinaSuggestions","items","formatSinaSuggestions","dataSources","unshift","includeApps","suggestionTerms","getProperty","suggestionTermsIgnoreStar","replace","oTester","Tester","id","oTestResult","test","label","bMatch","isSuggestionLimitReached","suggestion","sina","getText","sHighlightedText","position","properties","type","SuggestionType","calculationMode","SuggestionCalculationMode","Data","uiSuggestionType","addSuggestion","limit","getSuggestionLimit","numberSuggestions","preFormatSuggestions","sinaSuggestion","uiSuggestion","getSuggestionType","assembleKey","childSuggestions","key","detailAttr","object","detailAttributes","objKey","value","titleNavigation","createSearchNavigationTarget","formatSearchTermDataSuggestion","Transaction","sinaObjectSuggestion","format","push","assembleSearchInSuggestionLabel","grouped","addChildSuggestions","Math","min","sinaChildSuggestion","labelPlural","SearchTerm","History","SearchTermAndDataSource"],"sources":["SinaSuggestionProvider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport i18n from \"../i18n\";\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { Suggestion as SinaSuggestion } from \"../sinaNexTS/sina/Suggestion\";\nimport SinaBaseSuggestionProvider from \"./SinaBaseSuggestionProvider\";\nimport SinaObjectSuggestionFormatter from \"./SinaObjectSuggestionFormatter\";\nimport { SuggestionProvider } from \"./SuggestionProvider\";\nimport {\n    Type as UISuggestionType,\n    SuggestionType as UISuggestionTypeProperties,\n    Suggestion,\n    UISinaSuggestion,\n    UISinaObjectSuggestion,\n} from \"./SuggestionType\";\nimport * as SearchHelper from \"sap/esh/search/ui/SearchHelper\";\nimport { SuggestionResultSet } from \"../sinaNexTS/sina/SuggestionResultSet\";\nimport { DataSource } from \"../sinaNexTS/sina/DataSource\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport SuggestionHandler from \"./SuggestionHandler\";\nimport { SearchResultSetItemAttribute } from \"../sinaNexTS/sina/SearchResultSetItemAttribute\";\nimport Device from \"sap/ui/Device\";\n\nexport interface SinaSuggestionProviderOptions {\n    model: SearchModel;\n    sinaNext: Sina;\n    suggestionTypes: Array<UISuggestionType>;\n    suggestionHandler: SuggestionHandler;\n}\n\nexport default class SinaSuggestionProvider extends SinaBaseSuggestionProvider implements SuggestionProvider {\n    suggestionLimit: number;\n    suggestionStartingCharacters: number;\n    readonly model: SearchModel;\n    private sinaObjectSuggestionFormatter: SinaObjectSuggestionFormatter;\n    suggestions: UISinaSuggestion[];\n    firstObjectDataSuggestion: boolean;\n    private numberSuggestionsByType: Partial<Record<UISuggestionType, number>>;\n    readonly suggestionHandler: SuggestionHandler;\n\n    // init\n    // ===================================================================\n    constructor(options: SinaSuggestionProviderOptions) {\n        // call super constructor\n        super(options.sinaNext);\n        this.model = options.model;\n        this.suggestionTypes = options.suggestionTypes;\n        this.suggestionHandler = options.suggestionHandler;\n        this.suggestionLimit = Device.system.phone ? 5 : 7;\n        this.suggestionStartingCharacters = this.model.config.suggestionStartingCharacters;\n        this.sinaObjectSuggestionFormatter = new SinaObjectSuggestionFormatter();\n    }\n\n    // abort suggestions\n    // ===================================================================\n    public abortSuggestions(): void {\n        this.suggestionQuery.abort();\n    }\n\n    // get suggestions\n    // ===================================================================\n    public async getSuggestions(filter: Filter): Promise<Array<Suggestion>> {\n        // reset global fields\n        this.suggestions = [];\n        this.firstObjectDataSuggestion = true;\n        this.numberSuggestionsByType = {};\n        for (let i = 0; i < UISuggestionTypeProperties.types.length; ++i) {\n            const suggestionType = UISuggestionTypeProperties.types[i];\n            this.numberSuggestionsByType[suggestionType] = 0;\n        }\n\n        // history based search term suggestions only starting by default from 1. character\n        const suggestionTerm = filter.searchTerm;\n        if (\n            this.suggestionTypes.length === 1 &&\n            this.suggestionTypes.indexOf(UISuggestionType.SearchTermHistory) >= 0 &&\n            suggestionTerm.length < 1\n        ) {\n            return [];\n        }\n\n        // data based search term suggestions only starting by default from 3. character and in general not for all datasource\n        if (\n            this.suggestionTypes.length === 1 &&\n            this.suggestionTypes.indexOf(UISuggestionType.SearchTermData) >= 0 &&\n            (suggestionTerm.length < this.suggestionStartingCharacters ||\n                filter.dataSource === this.model.allDataSource)\n        ) {\n            return [];\n        }\n\n        // object suggestions only starting by default from 3. character\n        if (\n            this.suggestionTypes.length === 1 &&\n            this.suggestionTypes.indexOf(UISuggestionType.Object) >= 0 &&\n            suggestionTerm.length < this.suggestionStartingCharacters\n        ) {\n            return [];\n        }\n\n        // data source suggestions only for ds=all and My Favorites\n        if (\n            this.suggestionTypes.length === 1 &&\n            this.suggestionTypes.indexOf(UISuggestionType.DataSource) >= 0 &&\n            this.model.getDataSource() !== this.model.sinaNext.allDataSource &&\n            this.model.getDataSource() !== this.model.favDataSource\n        ) {\n            return [];\n        }\n\n        // data source suggestions only starting from 1. character\n        if (\n            this.suggestionTypes.length === 1 &&\n            this.suggestionTypes.indexOf(UISuggestionType.DataSource) >= 0 &&\n            suggestionTerm.length < 1\n        ) {\n            return [];\n        }\n\n        // ai suggestions only if ai is active\n        if (\n            this.suggestionTypes.length === 1 &&\n            this.suggestionTypes.indexOf(UISuggestionType.SearchTermAI) >= 0 &&\n            !this.model.isNlqActive()\n        ) {\n            return [];\n        }\n\n        // handle client side datasource-suggestions for all and apps\n        this.createAllAndAppDsSuggestions();\n\n        // check that BO search is enabled\n        if (!this.model.config.searchBusinessObjects) {\n            return Promise.resolve(this.suggestions);\n        }\n\n        // no server request for ds = apps\n        if (this.model.getDataSource() === this.model.appDataSource) {\n            return Promise.resolve(this.suggestions);\n        }\n\n        // prepare sina suggestion query\n        this.prepareSuggestionQuery(filter);\n\n        // fire sina suggestion query\n        const resultSet = (await this.suggestionQuery.getResultSetAsync()) as SuggestionResultSet;\n        // concatenate searchterm + suggestion term\n        const sinaSuggestions = resultSet.items;\n\n        // assemble items from result set\n        this.formatSinaSuggestions(sinaSuggestions);\n\n        return this.suggestions;\n    }\n\n    // client side datasource suggestions for all and apps\n    // ===================================================================\n    private createAllAndAppDsSuggestions(): void {\n        if (this.suggestionTypes.indexOf(UISuggestionType.DataSource) < 0) {\n            return;\n        }\n\n        if (\n            this.model.getDataSource() !== this.model.allDataSource &&\n            this.model.getDataSource() !== this.model.favDataSource\n        ) {\n            return;\n        }\n\n        const dataSources: DataSource[] = [];\n        if (this.model.getDataSource() === this.model.allDataSource) {\n            dataSources.unshift(this.model.appDataSource);\n            dataSources.unshift(this.model.allDataSource);\n        }\n        if (this.model.getDataSource() === this.model.favDataSource) {\n            if (this.model.favDataSource.includeApps) {\n                dataSources.unshift(this.model.appDataSource);\n            }\n            dataSources.unshift(this.model.favDataSource);\n        }\n\n        const suggestionTerms: string = this.model.getProperty(\"/uiFilter/searchTerm\");\n        const suggestionTermsIgnoreStar = suggestionTerms.replace(/\\*/g, \"\");\n        const oTester = new SearchHelper.Tester(suggestionTermsIgnoreStar);\n\n        for (let i = 0; i < dataSources.length; ++i) {\n            const dataSource = dataSources[i];\n            if (dataSource.id === this.model.getDataSource().id) {\n                continue;\n            }\n            const oTestResult = oTester.test(dataSource.label);\n            if (oTestResult.bMatch === true) {\n                // limit number of suggestions\n                if (this.isSuggestionLimitReached(UISuggestionType.DataSource)) {\n                    return;\n                }\n\n                // create suggestion\n                const suggestion: UISinaSuggestion = {\n                    sina: this.sinaNext,\n                    label:\n                        \"<i>\" +\n                        i18n.getText(\"searchInPlaceholder\", [\"\"]) +\n                        \"</i> \" +\n                        oTestResult.sHighlightedText,\n                    dataSource: dataSource,\n                    position: UISuggestionTypeProperties.properties.DataSource.position,\n                    type: this.sinaNext.SuggestionType.DataSource,\n                    calculationMode: this.sinaNext.SuggestionCalculationMode.Data,\n                    uiSuggestionType: UISuggestionType.DataSource,\n                };\n                this.addSuggestion(suggestion);\n            }\n        }\n    }\n\n    // check suggestion limit\n    // ===================================================================\n    private isSuggestionLimitReached(suggestionType: UISuggestionType): boolean {\n        const limit = this.suggestionHandler.getSuggestionLimit(suggestionType);\n        const numberSuggestions = this.numberSuggestionsByType[suggestionType];\n        if (numberSuggestions >= limit) {\n            return true;\n        }\n        return false;\n    }\n\n    // preformat of suggestions: add ui position and ui suggestion type\n    // ===================================================================\n    private preFormatSuggestions(sinaSuggestions: SinaSuggestion[]): void {\n        for (let i = 0; i < sinaSuggestions.length; ++i) {\n            const sinaSuggestion = sinaSuggestions[i];\n            const uiSuggestion: Partial<UISinaSuggestion> = sinaSuggestion;\n            // suggestion type\n            uiSuggestion.uiSuggestionType = this.getSuggestionType(sinaSuggestion);\n            // set position\n            uiSuggestion.position =\n                UISuggestionTypeProperties.properties[uiSuggestion.uiSuggestionType].position;\n            // key\n            this.assembleKey(uiSuggestion);\n            // process children\n            if (uiSuggestion.childSuggestions) {\n                this.preFormatSuggestions(uiSuggestion.childSuggestions as unknown as Array<SinaSuggestion>);\n            }\n        }\n    }\n\n    // assemble key\n    // ===================================================================\n    private assembleKey(sinaSuggestion: Partial<UISinaSuggestion>): void {\n        switch (sinaSuggestion.uiSuggestionType) {\n            case UISuggestionType.DataSource:\n                sinaSuggestion.key = UISuggestionType.DataSource + sinaSuggestion.dataSource.id;\n                break;\n            case UISuggestionType.SearchTermData:\n                sinaSuggestion.key = UISuggestionType.SearchTermData + sinaSuggestion.searchTerm;\n                if (sinaSuggestion.dataSource) {\n                    sinaSuggestion.key += sinaSuggestion.dataSource.id;\n                }\n                break;\n            case UISuggestionType.SearchTermHistory:\n                sinaSuggestion.key = UISuggestionType.SearchTermData + sinaSuggestion.searchTerm; // use type SearchTermData : in ui history and data based suggestions are identical\n                if (sinaSuggestion.dataSource) {\n                    sinaSuggestion.key += sinaSuggestion.dataSource.id;\n                }\n                break;\n            case UISuggestionType.SearchTermAI:\n                sinaSuggestion.key = UISuggestionType.SearchTermAI + sinaSuggestion.searchTerm;\n                break;\n            case UISuggestionType.Object: {\n                // const objKey = sinaSuggestion.object.title\n                //     ? sinaSuggestion.object.title\n                //     : sinaSuggestion.object.detailAttributes[0].value;\n                // Does an object really have a title??\n                const detailAttr = sinaSuggestion.object.detailAttributes[0];\n                if (detailAttr instanceof SearchResultSetItemAttribute) {\n                    const objKey = detailAttr.value;\n                    sinaSuggestion.key = UISuggestionType.Object + objKey;\n                }\n                break;\n            }\n        }\n    }\n\n    // add sina suggestions\n    // ===================================================================\n    private formatSinaSuggestions(sinaSuggestions: Array<SinaSuggestion>): Array<UISinaSuggestion> {\n        // preprocess add ui position and key to all suggestions\n        this.preFormatSuggestions(sinaSuggestions);\n\n        // process suggestions\n        for (let i = 0; i < sinaSuggestions.length; ++i) {\n            const sinaSuggestion = sinaSuggestions[i] as unknown as UISinaSuggestion;\n\n            // limit number of suggestions\n            if (this.isSuggestionLimitReached(sinaSuggestion.uiSuggestionType)) {\n                continue;\n            }\n\n            // format according to type\n            switch (sinaSuggestion.uiSuggestionType) {\n                case UISuggestionType.DataSource:\n                    if (\n                        this.model.getDataSource() !== this.model.allDataSource &&\n                        this.model.getDataSource() !== this.model.favDataSource\n                    ) {\n                        continue;\n                    }\n                    //sinaSuggestion.label = /*<i>' + i18n.getText(\"searchInPlaceholder\", [\"\"]) + '</i> ' +*/ sinaSuggestion.label;\n                    this.addSuggestion(sinaSuggestion);\n                    break;\n                case UISuggestionType.SearchTermData:\n                    sinaSuggestion.titleNavigation = this.model.createSearchNavigationTarget(\n                        (sinaSuggestion as any).filter as Filter\n                    );\n                    this.formatSearchTermDataSuggestion(sinaSuggestion);\n                    break;\n                case UISuggestionType.SearchTermHistory:\n                    sinaSuggestion.titleNavigation = this.model.createSearchNavigationTarget(\n                        (sinaSuggestion as any).filter as Filter\n                    );\n                    this.addSuggestion(sinaSuggestion);\n                    break;\n                case UISuggestionType.SearchTermAI:\n                    this.addSuggestion(sinaSuggestion);\n                    break;\n                case UISuggestionType.Object:\n                case UISuggestionType.Transaction: {\n                    const sinaObjectSuggestion: UISinaObjectSuggestion = {\n                        ...sinaSuggestion,\n                        dataSource: sinaSuggestion.object.dataSource,\n                        object: sinaSuggestion.object,\n                    };\n                    this.sinaObjectSuggestionFormatter.format(this, sinaObjectSuggestion);\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n\n        return this.suggestions;\n    }\n\n    // add suggestion\n    // ===================================================================\n    public addSuggestion(suggestion: UISinaSuggestion): void {\n        this.suggestions.push(suggestion);\n        this.numberSuggestionsByType[suggestion.uiSuggestionType] += 1;\n    }\n\n    // format search term suggestion\n    // ===================================================================\n    private formatSearchTermDataSuggestion(sinaSuggestion: UISinaSuggestion): void {\n        if (this.model.getDataSource() === this.model.allDataSource) {\n            // 1. model datasource is all\n            if (this.firstObjectDataSuggestion) {\n                // 1.1 first suggestion (display also child suggestions)\n                this.firstObjectDataSuggestion = false;\n                if (sinaSuggestion.childSuggestions.length > 0) {\n                    sinaSuggestion.label = this.assembleSearchInSuggestionLabel(sinaSuggestion);\n                    sinaSuggestion.grouped = true;\n                    this.addSuggestion(sinaSuggestion);\n                    this.addChildSuggestions(sinaSuggestion);\n                } else {\n                    this.addSuggestion(sinaSuggestion);\n                }\n            } else {\n                // 1.2 subsequent suggestions (ignore child suggestions)\n                this.addSuggestion(sinaSuggestion);\n            }\n        } else {\n            // 2. model datasource is a connector\n            this.addSuggestion(sinaSuggestion);\n        }\n    }\n\n    // add child suggestions\n    // ===================================================================\n    private addChildSuggestions(sinaSuggestion: UISinaSuggestion): void {\n        // max 2 child suggestions\n        for (let i = 0; i < Math.min(2, sinaSuggestion.childSuggestions.length); ++i) {\n            // check limit\n            if (this.isSuggestionLimitReached(UISuggestionType.SearchTermData)) {\n                return;\n            }\n\n            // add suggestion\n            const sinaChildSuggestion = sinaSuggestion.childSuggestions[i];\n            sinaChildSuggestion.label = this.assembleSearchInSuggestionLabel(sinaChildSuggestion);\n            sinaChildSuggestion.grouped = true;\n            this.addSuggestion(sinaChildSuggestion);\n        }\n    }\n\n    // assemble search in suggestion label\n    // ===================================================================\n    private assembleSearchInSuggestionLabel(sinaSuggestion): string {\n        return i18n.getText(\"resultsIn\", [\n            \"<span>\" + sinaSuggestion.label + \"</span>\",\n            sinaSuggestion.filter.dataSource.labelPlural,\n        ]);\n    }\n\n    // get type of sina suggestion\n    // ===================================================================\n    private getSuggestionType(sinaSuggestion: SinaSuggestion): UISuggestionType {\n        switch (sinaSuggestion.type) {\n            case this.sinaNext.SuggestionType.SearchTerm:\n                if (sinaSuggestion.calculationMode === this.sinaNext.SuggestionCalculationMode.History) {\n                    return UISuggestionType.SearchTermHistory;\n                }\n                return UISuggestionType.SearchTermData;\n            case this.sinaNext.SuggestionType.SearchTermAndDataSource:\n                if (sinaSuggestion.calculationMode === this.sinaNext.SuggestionCalculationMode.History) {\n                    return UISuggestionType.SearchTermHistory;\n                }\n                return UISuggestionType.SearchTermData;\n            case this.sinaNext.SuggestionType.SearchTermAI:\n                return UISuggestionType.SearchTermAI;\n            case this.sinaNext.SuggestionType.DataSource:\n                return UISuggestionType.DataSource;\n            case this.sinaNext.SuggestionType.Object:\n                return UISuggestionType.Object;\n        }\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2MAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,sBAAAC,EAAAC,GAAA,OAAAA,KAAAC,mBAAAD,EAAAE,UAAA,YAAAF,EAAAE,QAAAF,CAAA,OAMOG,EAAIJ,EAAAP,GAAA,MAGJY,EAA0BL,EAAAN,GAAA,MAC1BY,EAA6BN,EAAAL,GAAA,MAGxBY,EAAgBX,EAAA,cACNY,EAA0BZ,EAAA,wBAUvCa,EAA4BX,EAAA,gCAUtB,MAAMY,UAA+BL,EAChDM,gBACAC,6BACSC,MACDC,8BACRC,YACAC,0BACQC,wBACCC,kBAITC,YAAYC,GAERC,MAAMD,EAAQE,UACdC,KAAKV,MAAQO,EAAQP,MACrBU,KAAKC,gBAAkBJ,EAAQI,gBAC/BD,KAAKL,kBAAoBE,EAAQF,kBACjCK,KAAKZ,gBAAkBZ,EAAO0B,OAAOC,MAAQ,EAAI,EACjDH,KAAKX,6BAA+BW,KAAKV,MAAMc,OAAOf,6BACtDW,KAAKT,8BAAgC,IAAIR,CAC7C,CAIOsB,mBACHL,KAAKM,gBAAgBC,OACzB,CAIA,oBAAaC,CAAeC,GAExBT,KAAKR,YAAc,GACnBQ,KAAKP,0BAA4B,KACjCO,KAAKN,wBAA0B,CAAC,EAChC,IAAK,IAAIgB,EAAI,EAAGA,EAAIzB,EAA2B0B,MAAMC,SAAUF,EAAG,CAC9D,MAAMG,EAAiB5B,EAA2B0B,MAAMD,GACxDV,KAAKN,wBAAwBmB,GAAkB,CACnD,CAGA,MAAMC,EAAiBL,EAAOM,WAC9B,GACIf,KAAKC,gBAAgBW,SAAW,GAChCZ,KAAKC,gBAAgBe,QAAQhC,EAAiBiC,oBAAsB,GACpEH,EAAeF,OAAS,EAC1B,CACE,MAAO,EACX,CAGA,GACIZ,KAAKC,gBAAgBW,SAAW,GAChCZ,KAAKC,gBAAgBe,QAAQhC,EAAiBkC,iBAAmB,IAChEJ,EAAeF,OAASZ,KAAKX,8BAC1BoB,EAAOU,aAAenB,KAAKV,MAAM8B,eACvC,CACE,MAAO,EACX,CAGA,GACIpB,KAAKC,gBAAgBW,SAAW,GAChCZ,KAAKC,gBAAgBe,QAAQhC,EAAiBqC,SAAW,GACzDP,EAAeF,OAASZ,KAAKX,6BAC/B,CACE,MAAO,EACX,CAGA,GACIW,KAAKC,gBAAgBW,SAAW,GAChCZ,KAAKC,gBAAgBe,QAAQhC,EAAiBsC,aAAe,GAC7DtB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAMS,SAASqB,eACnDpB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAMkC,cAC5C,CACE,MAAO,EACX,CAGA,GACIxB,KAAKC,gBAAgBW,SAAW,GAChCZ,KAAKC,gBAAgBe,QAAQhC,EAAiBsC,aAAe,GAC7DR,EAAeF,OAAS,EAC1B,CACE,MAAO,EACX,CAGA,GACIZ,KAAKC,gBAAgBW,SAAW,GAChCZ,KAAKC,gBAAgBe,QAAQhC,EAAiByC,eAAiB,IAC9DzB,KAAKV,MAAMoC,cACd,CACE,MAAO,EACX,CAGA1B,KAAK2B,+BAGL,IAAK3B,KAAKV,MAAMc,OAAOwB,sBAAuB,CAC1C,OAAOC,QAAQC,QAAQ9B,KAAKR,YAChC,CAGA,GAAIQ,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAMyC,cAAe,CACzD,OAAOF,QAAQC,QAAQ9B,KAAKR,YAChC,CAGAQ,KAAKgC,uBAAuBvB,GAG5B,MAAMwB,QAAmBjC,KAAKM,gBAAgB4B,oBAE9C,MAAMC,EAAkBF,EAAUG,MAGlCpC,KAAKqC,sBAAsBF,GAE3B,OAAOnC,KAAKR,WAChB,CAIQmC,+BACJ,GAAI3B,KAAKC,gBAAgBe,QAAQhC,EAAiBsC,YAAc,EAAG,CAC/D,MACJ,CAEA,GACItB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAM8B,eAC1CpB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAMkC,cAC5C,CACE,MACJ,CAEA,MAAMc,EAA4B,GAClC,GAAItC,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAM8B,cAAe,CACzDkB,EAAYC,QAAQvC,KAAKV,MAAMyC,eAC/BO,EAAYC,QAAQvC,KAAKV,MAAM8B,cACnC,CACA,GAAIpB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAMkC,cAAe,CACzD,GAAIxB,KAAKV,MAAMkC,cAAcgB,YAAa,CACtCF,EAAYC,QAAQvC,KAAKV,MAAMyC,cACnC,CACAO,EAAYC,QAAQvC,KAAKV,MAAMkC,cACnC,CAEA,MAAMiB,EAA0BzC,KAAKV,MAAMoD,YAAY,wBACvD,MAAMC,EAA4BF,EAAgBG,QAAQ,MAAO,IACjE,MAAMC,EAAU,IAAIvE,EAAawE,OAAOH,GAExC,IAAK,IAAIjC,EAAI,EAAGA,EAAI4B,EAAY1B,SAAUF,EAAG,CACzC,MAAMS,EAAamB,EAAY5B,GAC/B,GAAIS,EAAW4B,KAAO/C,KAAKV,MAAMiC,gBAAgBwB,GAAI,CACjD,QACJ,CACA,MAAMC,EAAcH,EAAQI,KAAK9B,EAAW+B,OAC5C,GAAIF,EAAYG,SAAW,KAAM,CAE7B,GAAInD,KAAKoD,yBAAyBpE,EAAiBsC,YAAa,CAC5D,MACJ,CAGA,MAAM+B,EAA+B,CACjCC,KAAMtD,KAAKD,SACXmD,MACI,MACArE,EAAK0E,QAAQ,sBAAuB,CAAC,KACrC,QACAP,EAAYQ,iBAChBrC,WAAYA,EACZsC,SAAUxE,EAA2ByE,WAAWpC,WAAWmC,SAC3DE,KAAM3D,KAAKD,SAAS6D,eAAetC,WACnCuC,gBAAiB7D,KAAKD,SAAS+D,0BAA0BC,KACzDC,iBAAkBhF,EAAiBsC,YAEvCtB,KAAKiE,cAAcZ,EACvB,CACJ,CACJ,CAIQD,yBAAyBvC,GAC7B,MAAMqD,EAAQlE,KAAKL,kBAAkBwE,mBAAmBtD,GACxD,MAAMuD,EAAoBpE,KAAKN,wBAAwBmB,GACvD,GAAIuD,GAAqBF,EAAO,CAC5B,OAAO,IACX,CACA,OAAO,KACX,CAIQG,qBAAqBlC,GACzB,IAAK,IAAIzB,EAAI,EAAGA,EAAIyB,EAAgBvB,SAAUF,EAAG,CAC7C,MAAM4D,EAAiBnC,EAAgBzB,GACvC,MAAM6D,EAA0CD,EAEhDC,EAAaP,iBAAmBhE,KAAKwE,kBAAkBF,GAEvDC,EAAad,SACTxE,EAA2ByE,WAAWa,EAAaP,kBAAkBP,SAEzEzD,KAAKyE,YAAYF,GAEjB,GAAIA,EAAaG,iBAAkB,CAC/B1E,KAAKqE,qBAAqBE,EAAaG,iBAC3C,CACJ,CACJ,CAIQD,YAAYH,GAChB,OAAQA,EAAeN,kBACnB,KAAKhF,EAAiBsC,WAClBgD,EAAeK,IAAM3F,EAAiBsC,WAAagD,EAAenD,WAAW4B,GAC7E,MACJ,KAAK/D,EAAiBkC,eAClBoD,EAAeK,IAAM3F,EAAiBkC,eAAiBoD,EAAevD,WACtE,GAAIuD,EAAenD,WAAY,CAC3BmD,EAAeK,KAAOL,EAAenD,WAAW4B,EACpD,CACA,MACJ,KAAK/D,EAAiBiC,kBAClBqD,EAAeK,IAAM3F,EAAiBkC,eAAiBoD,EAAevD,WACtE,GAAIuD,EAAenD,WAAY,CAC3BmD,EAAeK,KAAOL,EAAenD,WAAW4B,EACpD,CACA,MACJ,KAAK/D,EAAiByC,aAClB6C,EAAeK,IAAM3F,EAAiByC,aAAe6C,EAAevD,WACpE,MACJ,KAAK/B,EAAiBqC,OAAQ,CAK1B,MAAMuD,EAAaN,EAAeO,OAAOC,iBAAiB,GAC1D,GAAIF,aAAsB1F,EAA8B,CACpD,MAAM6F,EAASH,EAAWI,MAC1BV,EAAeK,IAAM3F,EAAiBqC,OAAS0D,CACnD,CACA,KACJ,EAER,CAIQ1C,sBAAsBF,GAE1BnC,KAAKqE,qBAAqBlC,GAG1B,IAAK,IAAIzB,EAAI,EAAGA,EAAIyB,EAAgBvB,SAAUF,EAAG,CAC7C,MAAM4D,EAAiBnC,EAAgBzB,GAGvC,GAAIV,KAAKoD,yBAAyBkB,EAAeN,kBAAmB,CAChE,QACJ,CAGA,OAAQM,EAAeN,kBACnB,KAAKhF,EAAiBsC,WAClB,GACItB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAM8B,eAC1CpB,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAMkC,cAC5C,CACE,QACJ,CAEAxB,KAAKiE,cAAcK,GACnB,MACJ,KAAKtF,EAAiBkC,eAClBoD,EAAeW,gBAAkBjF,KAAKV,MAAM4F,6BACvCZ,EAAuB7D,QAE5BT,KAAKmF,+BAA+Bb,GACpC,MACJ,KAAKtF,EAAiBiC,kBAClBqD,EAAeW,gBAAkBjF,KAAKV,MAAM4F,6BACvCZ,EAAuB7D,QAE5BT,KAAKiE,cAAcK,GACnB,MACJ,KAAKtF,EAAiByC,aAClBzB,KAAKiE,cAAcK,GACnB,MACJ,KAAKtF,EAAiBqC,OACtB,KAAKrC,EAAiBoG,YAAa,CAC/B,MAAMC,EAA+C,IAC9Cf,EACHnD,WAAYmD,EAAeO,OAAO1D,WAClC0D,OAAQP,EAAeO,QAE3B7E,KAAKT,8BAA8B+F,OAAOtF,KAAMqF,GAChD,KACJ,CACA,QACI,MAEZ,CAEA,OAAOrF,KAAKR,WAChB,CAIOyE,cAAcZ,GACjBrD,KAAKR,YAAY+F,KAAKlC,GACtBrD,KAAKN,wBAAwB2D,EAAWW,mBAAqB,CACjE,CAIQmB,+BAA+Bb,GACnC,GAAItE,KAAKV,MAAMiC,kBAAoBvB,KAAKV,MAAM8B,cAAe,CAEzD,GAAIpB,KAAKP,0BAA2B,CAEhCO,KAAKP,0BAA4B,MACjC,GAAI6E,EAAeI,iBAAiB9D,OAAS,EAAG,CAC5C0D,EAAepB,MAAQlD,KAAKwF,gCAAgClB,GAC5DA,EAAemB,QAAU,KACzBzF,KAAKiE,cAAcK,GACnBtE,KAAK0F,oBAAoBpB,EAC7B,KAAO,CACHtE,KAAKiE,cAAcK,EACvB,CACJ,KAAO,CAEHtE,KAAKiE,cAAcK,EACvB,CACJ,KAAO,CAEHtE,KAAKiE,cAAcK,EACvB,CACJ,CAIQoB,oBAAoBpB,GAExB,IAAK,IAAI5D,EAAI,EAAGA,EAAIiF,KAAKC,IAAI,EAAGtB,EAAeI,iBAAiB9D,UAAWF,EAAG,CAE1E,GAAIV,KAAKoD,yBAAyBpE,EAAiBkC,gBAAiB,CAChE,MACJ,CAGA,MAAM2E,EAAsBvB,EAAeI,iBAAiBhE,GAC5DmF,EAAoB3C,MAAQlD,KAAKwF,gCAAgCK,GACjEA,EAAoBJ,QAAU,KAC9BzF,KAAKiE,cAAc4B,EACvB,CACJ,CAIQL,gCAAgClB,GACpC,OAAOzF,EAAK0E,QAAQ,YAAa,CAC7B,SAAWe,EAAepB,MAAQ,UAClCoB,EAAe7D,OAAOU,WAAW2E,aAEzC,CAIQtB,kBAAkBF,GACtB,OAAQA,EAAeX,MACnB,KAAK3D,KAAKD,SAAS6D,eAAemC,WAC9B,GAAIzB,EAAeT,kBAAoB7D,KAAKD,SAAS+D,0BAA0BkC,QAAS,CACpF,OAAOhH,EAAiBiC,iBAC5B,CACA,OAAOjC,EAAiBkC,eAC5B,KAAKlB,KAAKD,SAAS6D,eAAeqC,wBAC9B,GAAI3B,EAAeT,kBAAoB7D,KAAKD,SAAS+D,0BAA0BkC,QAAS,CACpF,OAAOhH,EAAiBiC,iBAC5B,CACA,OAAOjC,EAAiBkC,eAC5B,KAAKlB,KAAKD,SAAS6D,eAAenC,aAC9B,OAAOzC,EAAiByC,aAC5B,KAAKzB,KAAKD,SAAS6D,eAAetC,WAC9B,OAAOtC,EAAiBsC,WAC5B,KAAKtB,KAAKD,SAAS6D,eAAevC,OAC9B,OAAOrC,EAAiBqC,OAEpC,EACH,OAAAlC,CAAA","ignoreList":[]}