{"version":3,"file":"AppSuggestionProvider.js","names":["sap","ui","define","__i18n","SearchHelper","___SuggestionType","Container","_interopRequireDefault","obj","__esModule","default","i18n","UISuggestionType","UISuggestionTypeProperties","AppSuggestionProvider","model","suggestApplications","suggestionHandler","constructor","options","this","refuseOutdatedRequests","suggestApplicationsNotDecorated","abortSuggestions","abort","combineSuggestionsWithIdenticalTitle","suggestions","suggestion","suggestionsTitleDict","i","length","firstAppSuggestion","title","subtitle","combinedSuggestionExists","combinedSuggestion","sortIndex","url","createSearchNavigationTarget","top","appTopDefault","filter","sinaNext","createFilter","dataSource","appDataSource","searchTerm","encodeFilter","targetUrl","label","getText","icon","keywords","uiSuggestionType","App","inApps","replace","suggestionTitle","Object","prototype","hasOwnProperty","call","push","sort","s1","s2","addAsterisk4ShowAllApps","searchTerms","searchTermsMatches","match","searchTermsArray","lastIndexOf","join","createShowMoreSuggestion","totalCount","suggestionTerm","tooltip","labelRaw","getProperty","SearchTermData","isShowMoreApps","titleNavigation","getSuggestions","getDataSource","userCategoryManager","favoritesIncludeApps","isFavActive","getCategory","includeApps","allDataSource","favDataSource","resultset","flpAppSuggestions","getElements","uiAppSuggestions","flpAppSuggestion","uiAppSuggestion","position","properties","key","appSuggestionLimit","getSuggestionLimit","slice","totalResults","service","getServiceAsync","queryApplications"],"sources":["AppSuggestionProvider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport i18n from \"../i18n\";\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { SuggestionProvider } from \"./SuggestionProvider\";\nimport * as SearchHelper from \"sap/esh/search/ui/SearchHelper\";\nimport {\n    Type as UISuggestionType,\n    SuggestionType as UISuggestionTypeProperties,\n    Suggestion,\n} from \"./SuggestionType\";\nimport { DataSource } from \"../sinaNexTS/sina/DataSource\";\nimport SuggestionHandler from \"./SuggestionHandler\";\nimport Container from \"sap/ushell/Container\";\nimport { NavigationTarget } from \"../sinaNexTS/sina/NavigationTarget\";\n\nexport interface ShowMoreAppsSuggestion extends Suggestion {\n    title: string;\n    dataSource: DataSource;\n    labelRaw: string;\n    uiSuggestionType: UISuggestionType.SearchTermData;\n    searchTerm: string;\n    tooltip: string;\n    titleNavigation: NavigationTarget;\n    isShowMoreApps: boolean;\n    totalCount: number;\n}\n\nexport interface FLPAppSuggestion extends Suggestion {\n    title: string;\n    subtitle: string;\n    sortIndex: number;\n    label: string;\n    icon: string;\n    keywords: string;\n    combinedSuggestionExists?: boolean;\n}\n\nexport interface AppSuggestion extends FLPAppSuggestion {\n    uiSuggestionType: UISuggestionType.App;\n    dataSource: DataSource;\n    position: number;\n    key: string;\n}\n\nexport default class AppSuggestionProvider implements SuggestionProvider {\n    private model: SearchModel;\n    public suggestApplications: ((searchTerm: string) => Promise<{\n        getElements: () => Array<FLPAppSuggestion>;\n        totalResults: number;\n    }>) & { abort: () => void };\n    private suggestionHandler: SuggestionHandler;\n\n    constructor(options: { model: SearchModel; suggestionHandler: SuggestionHandler }) {\n        this.model = options.model;\n        this.suggestionHandler = options.suggestionHandler;\n        // decorate suggestion methods (decorator prevents request overtaking)\n        this.suggestApplications = SearchHelper.refuseOutdatedRequests(this.suggestApplicationsNotDecorated);\n    }\n\n    abortSuggestions(): void {\n        this.suggestApplications.abort();\n    }\n\n    combineSuggestionsWithIdenticalTitle(suggestions: Array<FLPAppSuggestion>): Array<FLPAppSuggestion> {\n        //            function JSONStringifyReplacer(key, value) {\n        //                if (key === \"sina\") {\n        //                    return undefined;\n        //                }\n        //                return value;\n        //            }\n\n        // collect suggestions in suggestionsTitleDict + create combined suggestions\n        let suggestion;\n        const suggestionsTitleDict: Record<string, FLPAppSuggestion> = {};\n        for (let i = 0; i < suggestions.length; i++) {\n            suggestion = suggestions[i];\n            const firstAppSuggestion = suggestionsTitleDict[suggestion.title + suggestion.subtitle];\n            if (firstAppSuggestion) {\n                if (!firstAppSuggestion.combinedSuggestionExists) {\n                    const combinedSuggestion = {\n                        title: \"combinedAppSuggestion\" + i,\n                        subtitle: suggestion.subtitle,\n                        sortIndex: firstAppSuggestion.sortIndex,\n                        url: this.model.createSearchNavigationTarget({\n                            top: this.model.appTopDefault,\n                            filter: this.model.sinaNext.createFilter({\n                                dataSource: this.model.appDataSource,\n                                searchTerm: suggestion.title,\n                            }),\n                            encodeFilter: false,\n                        }).targetUrl,\n                        label: i18n.getText(\"suggestion_in_apps\", [suggestion.label]),\n                        icon: \"sap-icon://search\",\n                        keywords: \"\",\n                        uiSuggestionType: UISuggestionType.App,\n                    };\n                    const inApps = i18n.getText(\"suggestion_in_apps\", [\"\"]);\n                    combinedSuggestion.label = combinedSuggestion.label.replace(\n                        inApps,\n                        \"<i>\" + inApps + \"</i>\"\n                    );\n                    suggestionsTitleDict[combinedSuggestion.title + combinedSuggestion.subtitle] =\n                        combinedSuggestion;\n                    firstAppSuggestion.combinedSuggestionExists = true;\n                }\n            } else {\n                suggestion.sortIndex = i;\n                suggestionsTitleDict[suggestion.title + suggestion.subtitle] = suggestion;\n            }\n        }\n\n        // filter out combined suggestions\n        suggestions = [];\n        for (const suggestionTitle in suggestionsTitleDict) {\n            if (Object.prototype.hasOwnProperty.call(suggestionsTitleDict, suggestionTitle)) {\n                suggestion = suggestionsTitleDict[suggestionTitle];\n                if (!suggestion.combinedSuggestionExists) {\n                    suggestions.push(suggestion);\n                }\n            }\n        }\n        suggestions.sort(function (s1, s2) {\n            return s1.sortIndex - s2.sortIndex;\n        });\n\n        return suggestions;\n    }\n\n    public addAsterisk4ShowAllApps(searchTerms: string): string {\n        const searchTermsMatches = searchTerms.match(/\\S+/g);\n        if (searchTermsMatches.length > 0) {\n            let searchTerm;\n            const searchTermsArray = [];\n            for (let i = 0; i < searchTermsMatches.length; i++) {\n                searchTerm = searchTermsMatches[i];\n                if (searchTerm && searchTerm.lastIndexOf(\"*\") !== searchTerm.length - 1) {\n                    searchTermsArray.push(searchTerm + \"*\");\n                } else {\n                    searchTermsArray.push(searchTerm);\n                }\n            }\n            searchTerms = searchTermsArray.join(\" \");\n        }\n\n        return searchTerms;\n    }\n\n    private createShowMoreSuggestion(totalCount: number, suggestionTerm: string): ShowMoreAppsSuggestion {\n        let title = i18n.getText(\"showAllNApps\", [totalCount]);\n        title = title.replace(/\"/g, \"\"); //remove trailing \"\"\n        const tooltip = title;\n        const label = \"<i>\" + title + \"</i>\";\n        return {\n            title: title,\n            tooltip: tooltip,\n            label: label,\n            dataSource: this.model.appDataSource,\n            labelRaw: this.model.getProperty(\"/uiFilter/searchTerm\"),\n            uiSuggestionType: UISuggestionType.SearchTermData,\n            isShowMoreApps: true,\n            searchTerm: this.model.getProperty(\"/uiFilter/searchTerm\") || \"\",\n            titleNavigation: this.model.createSearchNavigationTarget({\n                filter: this.model.sinaNext.createFilter({\n                    searchTerm: suggestionTerm,\n                    dataSource: this.model.appDataSource,\n                }),\n            }),\n            totalCount: totalCount,\n        };\n    }\n\n    public async getSuggestions(filter: Filter): Promise<Array<AppSuggestion | ShowMoreAppsSuggestion> | []> {\n        // check that datasource is all, apps or my favorites and my favorites include apps:\n        const dataSource = this.model.getDataSource();\n        const userCategoryManager = this.model.userCategoryManager;\n        const favoritesIncludeApps =\n            userCategoryManager?.isFavActive() &&\n            userCategoryManager?.getCategory(\"MyFavorites\")?.includeApps;\n        if (\n            dataSource !== this.model.allDataSource &&\n            dataSource !== this.model.appDataSource &&\n            !(dataSource === this.model.favDataSource && favoritesIncludeApps)\n        ) {\n            return [];\n        }\n\n        // no suggestions for searchTerm length < 1\n        if (filter.searchTerm.length < 1) {\n            return [];\n        }\n\n        // get suggestions\n        const suggestionTerm = this.model.getProperty(\"/uiFilter/searchTerm\");\n        const resultset = await this.suggestApplications(suggestionTerm);\n\n        // combine suggestions with identical title\n        let flpAppSuggestions = resultset.getElements();\n        flpAppSuggestions = this.combineSuggestionsWithIdenticalTitle(flpAppSuggestions);\n        let uiAppSuggestions: Array<AppSuggestion | ShowMoreAppsSuggestion> = [];\n\n        // set type, datasource and position\n        for (const flpAppSuggestion of flpAppSuggestions) {\n            const uiAppSuggestion: AppSuggestion = {\n                ...flpAppSuggestion,\n                uiSuggestionType: UISuggestionType.App,\n                dataSource: this.model.appDataSource,\n                position: UISuggestionTypeProperties.properties.App.position,\n                key: UISuggestionTypeProperties.App + flpAppSuggestion.url + flpAppSuggestion.icon,\n            };\n            uiAppSuggestions.push(uiAppSuggestion);\n        }\n\n        // limit app suggestions\n        const appSuggestionLimit = this.suggestionHandler.getSuggestionLimit(UISuggestionType.App);\n        uiAppSuggestions = uiAppSuggestions.slice(0, appSuggestionLimit);\n\n        // if there are more apps available, add a \"show all apps\" suggestion at the end\n        // but only if datasource is apps (nestle changes)\n        if (resultset.totalResults > appSuggestionLimit && dataSource === this.model.appDataSource) {\n            uiAppSuggestions.push(this.createShowMoreSuggestion(resultset.totalResults, suggestionTerm));\n        }\n\n        return uiAppSuggestions;\n    }\n\n    private async suggestApplicationsNotDecorated(searchTerm: string): Promise<{\n        getElements: () => Array<FLPAppSuggestion>;\n        totalResults: number;\n    }> {\n        const service: {\n            queryApplications: (arg0: { searchTerm: string; suggestion: boolean }) => Promise<{\n                getElements: () => Array<FLPAppSuggestion>;\n                totalResults: number;\n            }>;\n        } = await Container.getServiceAsync(\"Search\");\n        return service.queryApplications({\n            searchTerm: searchTerm,\n            suggestion: true,\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]}