{"version":3,"file":"TransactionsHandler.js","names":["sap","ui","define","__ErrorHandler","TCodeNavigation","__i18n","_interopRequireDefault","obj","__esModule","default","ErrorHandler","i18n","TransactionsHandler","errorHandler","getInstance","constructor","searchModel","this","handleTCodeError","error","label","getText","messagecode","setProperty","handleSearchTerm","searchTerm","searchTermWasHandled","window","cf","explace","toLowerCase","indexOf","slicedSearchTerm","slice","navigateByTCode","then","setSearchBoxTerm","catch"],"sources":["TransactionsHandler.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport type SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ISearchTermHandler } from \"./ISearchTermHandler\";\nimport ErrorHandler from \"../error/ErrorHandler\";\n\n// @ts-expect-error - module will be available during transpilation. Types are not available yet.\nimport TCodeNavigation from \"sap/ushell_abap/components/TCodeNavigation\";\nimport i18n from \"../i18n\";\n\ninterface TCodeNavigationErrorResultType extends Error {\n    successful: boolean;\n    messagecode:\n        | \"NAV_SUCCESS\"\n        /** Indicates that no matching inbound was found for the transaction code or a mandatory parameter is missing. */\n        | \"NO_INBOUND_FOUND\"\n        | \"UNKNOWN_ERROR\";\n}\n\ninterface TCodeNavigationType {\n    /**\n     *\n     * @param sTcode sTCode The transaction code to search for, can also be an App ID.\n     * @param bExplace Indicates whether to open the navigation in a new tab.\n     * @returns A promise that resolves to a boolean indicating the success of the navigation.\n     */\n    navigateByTCode(sTcode: string, bExplace: boolean): Promise<boolean>;\n}\n\nexport default class TransactionsHandler implements ISearchTermHandler {\n    private readonly errorHandler = ErrorHandler.getInstance();\n\n    constructor(private readonly searchModel: SearchModel) {}\n\n    private handleTCodeError(error: TCodeNavigationErrorResultType): void {\n        let label = i18n.getText(\"error.TCodeUnknownError.message\");\n        if (error.messagecode && error.messagecode === \"NO_INBOUND_FOUND\") {\n            label = i18n.getText(\"error.TCodeNotFound.message\");\n        }\n        this.searchModel.setProperty(\"/suggestions\", [\n            {\n                label,\n            },\n        ]);\n        // if (error.messagecode && error.messagecode === \"NO_INBOUND_FOUND\") {\n        //     return new TCodeNotFoundError(error);\n        // } else {\n        //     return new TCodeUnknownError(error);\n        // }\n    }\n\n    handleSearchTerm(searchTerm: string): boolean {\n        let searchTermWasHandled = false;\n\n        if ((window.sap as any).cf) {\n            // no transaction handling in cFLP/multiprovider\n            return searchTermWasHandled;\n        }\n\n        let explace;\n        // replace current app:\n        if (searchTerm.toLowerCase().indexOf(\"/n\") === 0) {\n            explace = false;\n        }\n        // open in new window (explace):\n        if (searchTerm.toLowerCase().indexOf(\"/o\") === 0) {\n            explace = true;\n        }\n        if (typeof explace !== \"undefined\") {\n            this.searchModel.setProperty(\"/suggestions\", []);\n            searchTermWasHandled = true;\n            const slicedSearchTerm = searchTerm.slice(2);\n            (TCodeNavigation as TCodeNavigationType)\n                .navigateByTCode(slicedSearchTerm, explace)\n                .then(() => {\n                    this.searchModel.setSearchBoxTerm(\"\", false);\n                })\n                .catch((error: TCodeNavigationErrorResultType) => {\n                    this.handleTCodeError(error);\n                });\n        }\n\n        // if (searchTermWasHandled) {\n        //     // transaction is started, reset search input state:\n        //     searchInput.destroySuggestionRows();\n        //     searchInput.setValue(\"\");\n        //     // if (!SearchShellHelperHorizonTheme.isSearchFieldExpandedByDefault()) {\n        //     //     collapseSearch();\n        //     // }\n        // }\n\n        return searchTermWasHandled;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,0FAAAC,EAAAC,EAAAC,GAAA,sBAAAC,EAAAC,GAAA,OAAAA,KAAAC,mBAAAD,EAAAE,UAAA,YAAAF,EAAAE,QAAAF,CAAA,OAOOG,EAAYJ,EAAAH,GAEnB,MAEOQ,EAAIL,EAAAD,GAqBI,MAAMO,EACAC,aAAeH,EAAaI,cAE7CC,YAA6BC,GAA0BC,KAA1BD,aAA2B,CAEhDE,iBAAiBC,GACrB,IAAIC,EAAQT,EAAKU,QAAQ,mCACzB,GAAIF,EAAMG,aAAeH,EAAMG,cAAgB,mBAAoB,CAC/DF,EAAQT,EAAKU,QAAQ,8BACzB,CACAJ,KAAKD,YAAYO,YAAY,eAAgB,CACzC,CACIH,UAQZ,CAEAI,iBAAiBC,GACb,IAAIC,EAAuB,MAE3B,GAAKC,OAAO3B,IAAY4B,GAAI,CAExB,OAAOF,CACX,CAEA,IAAIG,EAEJ,GAAIJ,EAAWK,cAAcC,QAAQ,QAAU,EAAG,CAC9CF,EAAU,KACd,CAEA,GAAIJ,EAAWK,cAAcC,QAAQ,QAAU,EAAG,CAC9CF,EAAU,IACd,CACA,UAAWA,IAAY,YAAa,CAChCZ,KAAKD,YAAYO,YAAY,eAAgB,IAC7CG,EAAuB,KACvB,MAAMM,EAAmBP,EAAWQ,MAAM,GACzC7B,EACI8B,gBAAgBF,EAAkBH,GAClCM,KAAK,KACFlB,KAAKD,YAAYoB,iBAAiB,GAAI,SAEzCC,MAAOlB,IACJF,KAAKC,iBAAiBC,IAElC,CAWA,OAAOO,CACX,EACH,OAAAd,CAAA","ignoreList":[]}