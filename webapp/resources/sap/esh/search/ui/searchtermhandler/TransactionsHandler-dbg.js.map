{"version":3,"file":"TransactionsHandler-dbg.js","names":["sap","ui","define","__ErrorHandler","TCodeNavigation","__i18n","_interopRequireDefault","obj","__esModule","default","ErrorHandler","i18n","TransactionsHandler","errorHandler","getInstance","constructor","searchModel","handleTCodeError","error","label","getText","messagecode","setProperty","handleSearchTerm","searchTerm","searchTermWasHandled","window","cf","explace","toLowerCase","indexOf","slicedSearchTerm","slice","navigateByTCode","then","setSearchBoxTerm","catch"],"sources":["TransactionsHandler.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport type SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ISearchTermHandler } from \"./ISearchTermHandler\";\nimport ErrorHandler from \"../error/ErrorHandler\";\n\n// @ts-expect-error - module will be available during transpilation. Types are not available yet.\nimport TCodeNavigation from \"sap/ushell_abap/components/TCodeNavigation\";\nimport i18n from \"../i18n\";\n\ninterface TCodeNavigationErrorResultType extends Error {\n    successful: boolean;\n    messagecode:\n        | \"NAV_SUCCESS\"\n        /** Indicates that no matching inbound was found for the transaction code or a mandatory parameter is missing. */\n        | \"NO_INBOUND_FOUND\"\n        | \"UNKNOWN_ERROR\";\n}\n\ninterface TCodeNavigationType {\n    /**\n     *\n     * @param sTcode sTCode The transaction code to search for, can also be an App ID.\n     * @param bExplace Indicates whether to open the navigation in a new tab.\n     * @returns A promise that resolves to a boolean indicating the success of the navigation.\n     */\n    navigateByTCode(sTcode: string, bExplace: boolean): Promise<boolean>;\n}\n\nexport default class TransactionsHandler implements ISearchTermHandler {\n    private readonly errorHandler = ErrorHandler.getInstance();\n\n    constructor(private readonly searchModel: SearchModel) {}\n\n    private handleTCodeError(error: TCodeNavigationErrorResultType): void {\n        let label = i18n.getText(\"error.TCodeUnknownError.message\");\n        if (error.messagecode && error.messagecode === \"NO_INBOUND_FOUND\") {\n            label = i18n.getText(\"error.TCodeNotFound.message\");\n        }\n        this.searchModel.setProperty(\"/suggestions\", [\n            {\n                label,\n            },\n        ]);\n        // if (error.messagecode && error.messagecode === \"NO_INBOUND_FOUND\") {\n        //     return new TCodeNotFoundError(error);\n        // } else {\n        //     return new TCodeUnknownError(error);\n        // }\n    }\n\n    handleSearchTerm(searchTerm: string): boolean {\n        let searchTermWasHandled = false;\n\n        if ((window.sap as any).cf) {\n            // no transaction handling in cFLP/multiprovider\n            return searchTermWasHandled;\n        }\n\n        let explace;\n        // replace current app:\n        if (searchTerm.toLowerCase().indexOf(\"/n\") === 0) {\n            explace = false;\n        }\n        // open in new window (explace):\n        if (searchTerm.toLowerCase().indexOf(\"/o\") === 0) {\n            explace = true;\n        }\n        if (typeof explace !== \"undefined\") {\n            this.searchModel.setProperty(\"/suggestions\", []);\n            searchTermWasHandled = true;\n            const slicedSearchTerm = searchTerm.slice(2);\n            (TCodeNavigation as TCodeNavigationType)\n                .navigateByTCode(slicedSearchTerm, explace)\n                .then(() => {\n                    this.searchModel.setSearchBoxTerm(\"\", false);\n                })\n                .catch((error: TCodeNavigationErrorResultType) => {\n                    this.handleTCodeError(error);\n                });\n        }\n\n        // if (searchTermWasHandled) {\n        //     // transaction is started, reset search input state:\n        //     searchInput.destroySuggestionRows();\n        //     searchInput.setValue(\"\");\n        //     // if (!SearchShellHelperHorizonTheme.isSearchFieldExpandedByDefault()) {\n        //     //     collapseSearch();\n        //     // }\n        // }\n\n        return searchTermWasHandled;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,+FAAAC,cAAA,EAAAC,eAAA,EAAAC,MAAA;EAAA;;EAAA,SAAAC,uBAAAC,GAAA;IAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,CAAAE,OAAA,mBAAAF,GAAA,CAAAE,OAAA,GAAAF,GAAA;EAAA;EAAA,MAOOG,YAAY,GAAAJ,sBAAA,CAAAH,cAAA,GAEnB;EAAA,MAEOQ,IAAI,GAAAL,sBAAA,CAAAD,MAAA;EAqBI,MAAMO,mBAAmB,CAA+B;IAClDC,YAAY,GAAGH,YAAY,CAACI,WAAW,CAAC,CAAC;IAE1DC,WAAWA,CAAkBC,WAAwB,EAAE;MAAA,KAA1BA,WAAwB,GAAxBA,WAAwB;IAAG;IAEhDC,gBAAgBA,CAACC,KAAqC,EAAQ;MAClE,IAAIC,KAAK,GAAGR,IAAI,CAACS,OAAO,CAAC,iCAAiC,CAAC;MAC3D,IAAIF,KAAK,CAACG,WAAW,IAAIH,KAAK,CAACG,WAAW,KAAK,kBAAkB,EAAE;QAC/DF,KAAK,GAAGR,IAAI,CAACS,OAAO,CAAC,6BAA6B,CAAC;MACvD;MACA,IAAI,CAACJ,WAAW,CAACM,WAAW,CAAC,cAAc,EAAE,CACzC;QACIH;MACJ,CAAC,CACJ,CAAC;MACF;MACA;MACA;MACA;MACA;IACJ;IAEAI,gBAAgBA,CAACC,UAAkB,EAAW;MAC1C,IAAIC,oBAAoB,GAAG,KAAK;MAEhC,IAAKC,MAAM,CAAC1B,GAAG,CAAS2B,EAAE,EAAE;QACxB;QACA,OAAOF,oBAAoB;MAC/B;MAEA,IAAIG,OAAO;MACX;MACA,IAAIJ,UAAU,CAACK,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC9CF,OAAO,GAAG,KAAK;MACnB;MACA;MACA,IAAIJ,UAAU,CAACK,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC9CF,OAAO,GAAG,IAAI;MAClB;MACA,IAAI,OAAOA,OAAO,KAAK,WAAW,EAAE;QAChC,IAAI,CAACZ,WAAW,CAACM,WAAW,CAAC,cAAc,EAAE,EAAE,CAAC;QAChDG,oBAAoB,GAAG,IAAI;QAC3B,MAAMM,gBAAgB,GAAGP,UAAU,CAACQ,KAAK,CAAC,CAAC,CAAC;QAC3C5B,eAAe,CACX6B,eAAe,CAACF,gBAAgB,EAAEH,OAAO,CAAC,CAC1CM,IAAI,CAAC,MAAM;UACR,IAAI,CAAClB,WAAW,CAACmB,gBAAgB,CAAC,EAAE,EAAE,KAAK,CAAC;QAChD,CAAC,CAAC,CACDC,KAAK,CAAElB,KAAqC,IAAK;UAC9C,IAAI,CAACD,gBAAgB,CAACC,KAAK,CAAC;QAChC,CAAC,CAAC;MACV;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA,OAAOO,oBAAoB;IAC/B;EACJ;EAAC,OAAAb,mBAAA;AAAA","ignoreList":[]}