{"version":3,"file":"TreeNodeFactory.js","names":["sap","ui","define","___BusyIndicator","___TreeCache","DummyBusyIndicator","TreeCache","BaseTreeNodeFactory","cache","rootTreeNodePath","testMode","constructor","this","TreeNodeFactory","model","treeNodeMap","rootTreeNode","treeViews","treeNodeConstructor","busyIndicator","props","super","create","treeNodeFactory","createRootTreeNode","expandable","expanded","createTreeNode","registerTreeNode","treeNode","id","setTreeNodeFactory","deRegisterTreeNode","getTreeNode","setRootTreeNodePath","updateUI","setProperty","childTreeNodes","treeView","expandTreeNodes","saveFocus","restoreFocus","setBusy","isBusy","registerTreeView","push","deRegisterTreeView","index","indexOf","splice","getRootTreeNode","updateRecursively","delete"],"sources":["TreeNodeFactory.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport { DummyBusyIndicator, IBusyIndicator } from \"../BusyIndicator\";\nimport TreeNode from \"./TreeNode\";\nimport TreeView from \"./TreeView\";\nimport { TreeCache } from \"./TreeCache\";\n\nexport interface TreeNodeFactoryProperties<T extends TreeNode, C extends new (...args: any[]) => T> {\n    rootTreeNodePath: string;\n    model: JSONModel;\n    treeNodeConstructor: C;\n    testMode?: boolean;\n    busyIndicator: IBusyIndicator;\n}\n\nexport abstract class BaseTreeNodeFactory {\n    cache: TreeCache;\n    rootTreeNodePath: string;\n    testMode: boolean;\n    constructor(rootTreeNodePath: string, testMode: boolean) {\n        this.rootTreeNodePath = rootTreeNodePath;\n        this.testMode = testMode;\n        this.cache = new TreeCache();\n    }\n    abstract registerTreeNode(treeNode: TreeNode);\n    abstract deRegisterTreeNode(treeNode: TreeNode);\n    abstract registerTreeView(treeView: TreeView);\n    abstract deRegisterTreeView(treeView: TreeView);\n    abstract updateUI();\n    abstract saveFocus();\n    abstract restoreFocus();\n    abstract getRootTreeNode(): TreeNode;\n    abstract getTreeNode(id: string): TreeNode;\n    abstract setBusy(isBusy: boolean);\n}\nexport default class TreeNodeFactory<\n    T extends TreeNode,\n    C extends new (...args: any[]) => T,\n> extends BaseTreeNodeFactory {\n    model: JSONModel;\n    treeNodeMap: { [internalId: string]: T } = {};\n    rootTreeNode: T;\n    treeViews: Array<TreeView> = [];\n    treeNodeConstructor: C;\n    busyIndicator: IBusyIndicator;\n    constructor(props: TreeNodeFactoryProperties<T, C>) {\n        super(props.rootTreeNodePath, props.testMode);\n        this.rootTreeNodePath = props.rootTreeNodePath;\n        this.model = props.model;\n        this.treeNodeConstructor = props.treeNodeConstructor;\n        this.busyIndicator = props.busyIndicator ?? new DummyBusyIndicator();\n    }\n    static create<T extends TreeNode, C extends new (...args: any[]) => T>(\n        props: TreeNodeFactoryProperties<T, C>\n    ): TreeNodeFactory<T, C> {\n        const treeNodeFactory = new TreeNodeFactory<T, C>(props);\n        return treeNodeFactory;\n    }\n    createRootTreeNode(...props: ConstructorParameters<C>): T {\n        props[0].expandable = true;\n        props[0].expanded = true;\n        this.rootTreeNode = this.createTreeNode(...props);\n        this.registerTreeNode(this.rootTreeNode);\n        return this.rootTreeNode;\n    }\n    createTreeNode(...props: ConstructorParameters<C>): T {\n        const treeNode = new this.treeNodeConstructor(...props);\n        return treeNode;\n    }\n    registerTreeNode(treeNode: T) {\n        if (this.treeNodeMap[treeNode.id]) {\n            throw \"duplicate tree id\" + treeNode.id;\n        }\n        treeNode.setTreeNodeFactory(this);\n        this.treeNodeMap[treeNode.id] = treeNode;\n    }\n    deRegisterTreeNode(treeNode: T) {\n        treeNode.setTreeNodeFactory(null);\n        delete this.treeNodeMap[treeNode.id];\n    }\n    getTreeNode(id: string): T {\n        return this.treeNodeMap[id];\n    }\n    setRootTreeNodePath(rootTreeNodePath: string) {\n        this.rootTreeNodePath = rootTreeNodePath;\n    }\n    updateUI() {\n        this.model.setProperty(this.rootTreeNodePath, { childTreeNodes: [] });\n        this.model.setProperty(this.rootTreeNodePath, this.rootTreeNode);\n        for (const treeView of this.treeViews) {\n            treeView.expandTreeNodes();\n        }\n    }\n    saveFocus() {\n        for (const treeView of this.treeViews) {\n            treeView.saveFocus();\n        }\n    }\n    restoreFocus() {\n        for (const treeView of this.treeViews) {\n            treeView.restoreFocus();\n        }\n    }\n    setBusy(isBusy: boolean) {\n        this.busyIndicator.setBusy(isBusy);\n    }\n    registerTreeView(treeView: TreeView) {\n        this.treeViews.push(treeView);\n    }\n    deRegisterTreeView(treeView: TreeView) {\n        const index = this.treeViews.indexOf(treeView);\n        if (index >= 0) {\n            this.treeViews.splice(index, 1);\n        }\n    }\n    getRootTreeNode(): TreeNode {\n        return this.rootTreeNode;\n    }\n    async updateRecursively(updateUI?: boolean) {\n        try {\n            this.setBusy(true);\n            await this.rootTreeNode.updateRecursively();\n            if (updateUI) {\n                await this.updateUI();\n            }\n        } finally {\n            this.setBusy(false);\n        }\n    }\n    delete() {\n        this.getRootTreeNode().delete();\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,4CAAAC,EAAAC,GAAA,mBAMSC,EAAkBF,EAAA,4BAGlBG,EAASF,EAAA,aAUX,MAAeG,EAClBC,MACAC,iBACAC,SACAC,YAAYF,EAA0BC,GAClCE,KAAKH,iBAAmBA,EACxBG,KAAKF,SAAWA,EAChBE,KAAKJ,MAAQ,IAAIF,CACrB,EAYW,MAAMO,UAGXN,EACNO,MACAC,YAA2C,CAAC,EAC5CC,aACAC,UAA6B,GAC7BC,oBACAC,cACAR,YAAYS,GACRC,MAAMD,EAAMX,iBAAkBW,EAAMV,UACpCE,KAAKH,iBAAmBW,EAAMX,iBAC9BG,KAAKE,MAAQM,EAAMN,MACnBF,KAAKM,oBAAsBE,EAAMF,oBACjCN,KAAKO,cAAgBC,EAAMD,eAAiB,IAAId,CACpD,CACA,aAAOiB,CACHF,GAEA,MAAMG,EAAkB,IAAIV,EAAsBO,GAClD,OAAOG,CACX,CACAC,sBAAsBJ,GAClBA,EAAM,GAAGK,WAAa,KACtBL,EAAM,GAAGM,SAAW,KACpBd,KAAKI,aAAeJ,KAAKe,kBAAkBP,GAC3CR,KAAKgB,iBAAiBhB,KAAKI,cAC3B,OAAOJ,KAAKI,YAChB,CACAW,kBAAkBP,GACd,MAAMS,EAAW,IAAIjB,KAAKM,uBAAuBE,GACjD,OAAOS,CACX,CACAD,iBAAiBC,GACb,GAAIjB,KAAKG,YAAYc,EAASC,IAAK,CAC/B,KAAM,oBAAsBD,EAASC,EACzC,CACAD,EAASE,mBAAmBnB,MAC5BA,KAAKG,YAAYc,EAASC,IAAMD,CACpC,CACAG,mBAAmBH,GACfA,EAASE,mBAAmB,aACrBnB,KAAKG,YAAYc,EAASC,GACrC,CACAG,YAAYH,GACR,OAAOlB,KAAKG,YAAYe,EAC5B,CACAI,oBAAoBzB,GAChBG,KAAKH,iBAAmBA,CAC5B,CACA0B,WACIvB,KAAKE,MAAMsB,YAAYxB,KAAKH,iBAAkB,CAAE4B,eAAgB,KAChEzB,KAAKE,MAAMsB,YAAYxB,KAAKH,iBAAkBG,KAAKI,cACnD,IAAK,MAAMsB,KAAY1B,KAAKK,UAAW,CACnCqB,EAASC,iBACb,CACJ,CACAC,YACI,IAAK,MAAMF,KAAY1B,KAAKK,UAAW,CACnCqB,EAASE,WACb,CACJ,CACAC,eACI,IAAK,MAAMH,KAAY1B,KAAKK,UAAW,CACnCqB,EAASG,cACb,CACJ,CACAC,QAAQC,GACJ/B,KAAKO,cAAcuB,QAAQC,EAC/B,CACAC,iBAAiBN,GACb1B,KAAKK,UAAU4B,KAAKP,EACxB,CACAQ,mBAAmBR,GACf,MAAMS,EAAQnC,KAAKK,UAAU+B,QAAQV,GACrC,GAAIS,GAAS,EAAG,CACZnC,KAAKK,UAAUgC,OAAOF,EAAO,EACjC,CACJ,CACAG,kBACI,OAAOtC,KAAKI,YAChB,CACA,uBAAMmC,CAAkBhB,GACpB,IACIvB,KAAK8B,QAAQ,YACP9B,KAAKI,aAAamC,oBACxB,GAAIhB,EAAU,OACJvB,KAAKuB,UACf,CACJ,CAAC,QACGvB,KAAK8B,QAAQ,MACjB,CACJ,CACAU,SACIxC,KAAKsC,kBAAkBE,QAC3B,EACHvC,EAAAN,sBAAA,OAAAM,CAAA","ignoreList":[]}