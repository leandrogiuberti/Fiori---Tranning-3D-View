{"version":3,"file":"TreeNode-dbg.js","names":["sap","ui","define","___tmpData","createTmpData","deleteTmpData","getTmpData","TreeNode","id","label","expanded","expandable","childTreeNodes","tmpDataId","constructor","props","adjustPlaceholderChildTreeNode","setTreeNodeFactory","treeNodeFactory","getData","getTreeNodeFactory","hasPlaceholderTreeNode","find","treeNode","undefined","length","addPlaceholderTreeNode","removePlaceHolderChildTreeNode","push","splice","getChildTreeNodeById","childTreeNode","addChildTreeNode","parentTreeNode","register","addChildTreeNodes","treeNodes","addChildTreeNodeAtIndex","insertionIndex","removeChildTreeNode","index","indexOf","deRegister","delete","slice","deleteChildTreeNodes","registerTreeNode","deRegisterTreeNode","tmpData","setExpanded","updateUI","testMode","saveFocus","setBusy","fetchChildTreeNodes","setExpandable","restoreFocus","cache","get","fetchChildTreeNodesImpl","set","Promise","resolve","updateRecursively","childTreeNodesFromServer","updateChildren","selectNewChildTreeNode","childTreeNodeFromServer","oldTreeNode","getTreeNode","getParentTreeNode","i","updateTreeNodeProperties","Object","assign","targetTreeNode","sourceTreeNode","excludeProperties","propertyName","value","visitChildNodesRecursively","callback","visitParentNodesRecursively","isVisible","isExpanded","node","parentNode","hasChildNodes","hasExpandedChildNode"],"sources":["TreeNode.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { createTmpData, deleteTmpData, getTmpData, TmpData } from \"./tmpData\";\nimport { BaseTreeNodeFactory } from \"./TreeNodeFactory\";\n\nexport interface TreeNodeProperties {\n    id: string;\n    label: string;\n    expanded?: boolean;\n    expandable?: boolean;\n}\n\nexport default class TreeNode {\n    id: string;\n    label: string;\n    expanded: boolean;\n    expandable: boolean;\n    childTreeNodes: Array<TreeNode> = [];\n    tmpDataId: string; // TODO wrong naming\n    constructor(props: TreeNodeProperties) {\n        this.id = props.id;\n        this.label = props.label;\n        this.expanded = props.expanded ?? false;\n        this.expandable = props.expandable ?? false;\n        this.adjustPlaceholderChildTreeNode();\n    }\n    setTreeNodeFactory(treeNodeFactory: BaseTreeNodeFactory) {\n        this.getData().treeNodeFactory = treeNodeFactory;\n    }\n    getTreeNodeFactory(): BaseTreeNodeFactory {\n        return this.getData().treeNodeFactory;\n    }\n    hasPlaceholderTreeNode(): boolean {\n        return this.childTreeNodes.find((treeNode: TreeNode) => treeNode.id === \"dummy\") !== undefined;\n    }\n    adjustPlaceholderChildTreeNode() {\n        // TODO public/private\n        if (this.expandable) {\n            if (this.childTreeNodes.length === 0) {\n                this.addPlaceholderTreeNode(); // TODO explanation\n            }\n        } else {\n            if (this.hasPlaceholderTreeNode()) {\n                this.removePlaceHolderChildTreeNode();\n            }\n        }\n    }\n    addPlaceholderTreeNode() {\n        // TODO rename dummy -> placeholder\n        if (this.hasPlaceholderTreeNode()) {\n            return;\n        }\n        this.childTreeNodes.push({ id: \"dummy\" } as TreeNode);\n    }\n    removePlaceHolderChildTreeNode() {\n        if (!this.hasPlaceholderTreeNode()) {\n            return;\n        }\n        this.childTreeNodes.splice(0, 1);\n    }\n    getChildTreeNodeById(id: string): TreeNode {\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === id) {\n                return childTreeNode;\n            }\n        }\n    }\n    addChildTreeNode(treeNode: TreeNode) {\n        this.expandable = true;\n        this.removePlaceHolderChildTreeNode();\n        this.childTreeNodes.push(treeNode);\n        treeNode.getData().parentTreeNode = this;\n        treeNode.register();\n    }\n    addChildTreeNodes(treeNodes: Array<TreeNode>) {\n        for (const treeNode of treeNodes) {\n            this.addChildTreeNode(treeNode);\n        }\n    }\n    addChildTreeNodeAtIndex(treeNode: TreeNode, insertionIndex: number) {\n        this.expandable = true;\n        this.removePlaceHolderChildTreeNode();\n        this.childTreeNodes.splice(insertionIndex, 0, treeNode);\n        treeNode.getData().parentTreeNode = this;\n        treeNode.register();\n    }\n    removeChildTreeNode(treeNode: TreeNode) {\n        const index = this.childTreeNodes.indexOf(treeNode);\n        if (index < 0) {\n            return;\n        }\n        this.childTreeNodes.splice(index, 1);\n        treeNode.getData().parentTreeNode = null;\n        treeNode.deRegister();\n        this.adjustPlaceholderChildTreeNode();\n    }\n    delete() {\n        // delete children\n        for (const childTreeNode of this.childTreeNodes.slice()) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            childTreeNode.delete();\n        }\n        // detach from parent (+unregister)\n        const parentTreeNode = this.getData().parentTreeNode;\n        if (parentTreeNode) {\n            parentTreeNode.removeChildTreeNode(this);\n        }\n        if (this.tmpDataId) {\n            deleteTmpData(this.tmpDataId);\n        }\n    }\n    deleteChildTreeNodes() {\n        for (const childTreeNode of this.childTreeNodes.slice()) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            childTreeNode.delete();\n        }\n    }\n    register() {\n        const parentTreeNode = this.getData().parentTreeNode;\n        if (!parentTreeNode.getTreeNodeFactory()) {\n            return; // parent node not registered -> registration at the moment not possible TODO explantion\n        }\n        parentTreeNode.getTreeNodeFactory().registerTreeNode(this);\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            childTreeNode.register();\n        }\n    }\n    deRegister() {\n        if (!this.getTreeNodeFactory()) {\n            return; // not registered -> nothing todo\n        }\n        this.getTreeNodeFactory().deRegisterTreeNode(this);\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            childTreeNode.deRegister();\n        }\n    }\n    /**\n     * storage for private data TODO\n     * @returns {object}\n     */\n    getData(): TmpData {\n        if (!this.tmpDataId) {\n            const tmpData = createTmpData();\n            this.tmpDataId = tmpData.tmpDataId;\n            return tmpData;\n        }\n        return getTmpData(this.tmpDataId);\n    }\n\n    async setExpanded(expanded: boolean, updateUI?: boolean) {\n        this.expanded = expanded;\n        if (this.getTreeNodeFactory().testMode) {\n            return;\n        }\n        this.getTreeNodeFactory().saveFocus();\n        if (this.expanded) {\n            // expand\n            try {\n                this.deleteChildTreeNodes();\n                this.getTreeNodeFactory().setBusy(true);\n                const childTreeNodes = await this.fetchChildTreeNodes();\n                if (childTreeNodes.length === 0) {\n                    this.expanded = false;\n                    this.setExpandable(false);\n                } else {\n                    this.addChildTreeNodes(childTreeNodes);\n                }\n            } finally {\n                this.getTreeNodeFactory().setBusy(false);\n            }\n        } else {\n            // collapse\n            this.deleteChildTreeNodes();\n        }\n        if (updateUI) {\n            this.getTreeNodeFactory().updateUI();\n        }\n        this.getTreeNodeFactory().restoreFocus();\n    }\n\n    async fetchChildTreeNodes(): Promise<Array<TreeNode>> {\n        // check cache\n        const treeNodeFactory = this.getTreeNodeFactory();\n        let childTreeNodes: Array<TreeNode> = treeNodeFactory.cache.get(this.id) as Array<TreeNode>;\n        if (childTreeNodes) {\n            return childTreeNodes;\n        }\n        // ajax call\n        childTreeNodes = await this.fetchChildTreeNodesImpl();\n        // update cache\n        treeNodeFactory.cache.set(this.id, childTreeNodes);\n        return childTreeNodes;\n    }\n\n    fetchChildTreeNodesImpl(): Promise<Array<TreeNode>> {\n        return Promise.resolve([]);\n    }\n\n    setExpandable(expandable: boolean) {\n        this.expandable = expandable;\n        this.adjustPlaceholderChildTreeNode();\n    }\n\n    async updateRecursively(): Promise<void> {\n        const childTreeNodesFromServer = await this.fetchChildTreeNodes();\n        this.updateChildren(childTreeNodesFromServer);\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            if (!childTreeNode.expanded) {\n                continue;\n            }\n            await childTreeNode.updateRecursively();\n        }\n    }\n\n    updateChildren(childTreeNodesFromServer: Array<TreeNode>) {\n        const selectNewChildTreeNode = (childTreeNodeFromServer) => {\n            const oldTreeNode = this.getTreeNodeFactory().getTreeNode(childTreeNodeFromServer.id);\n            if (oldTreeNode) {\n                // reuse existing node\n                oldTreeNode.getParentTreeNode().removeChildTreeNode(oldTreeNode);\n                return oldTreeNode;\n            } else {\n                // use server node\n                return childTreeNodeFromServer;\n            }\n        };\n\n        if (childTreeNodesFromServer.length === 0) {\n            this.deleteChildTreeNodes();\n            this.expanded = false;\n            this.setExpandable(false);\n            return;\n        }\n        this.removePlaceHolderChildTreeNode();\n        let childTreeNode: TreeNode;\n        for (let i = 0; i < childTreeNodesFromServer.length; ++i) {\n            const childTreeNodeFromServer = childTreeNodesFromServer[i];\n            if (i <= this.childTreeNodes.length - 1) {\n                // 1 node exists at position i\n                childTreeNode = this.childTreeNodes[i];\n                if (childTreeNode.id === childTreeNodeFromServer.id) {\n                    // 1.1 correct node at position i -> nothing todo\n                } else {\n                    // 1.2 wrong node at position i -> add child node at position i\n                    childTreeNode = selectNewChildTreeNode(childTreeNodeFromServer);\n                    this.addChildTreeNodeAtIndex(childTreeNode, i);\n                }\n            } else {\n                // 2 no node at position i -> add new node\n                childTreeNode = selectNewChildTreeNode(childTreeNodeFromServer);\n                this.addChildTreeNode(childTreeNode);\n            }\n\n            // update node properties\n            //  childTreeNode.label = childTreeNodeFromServer.label;\n            this.updateTreeNodeProperties(childTreeNode, childTreeNodeFromServer);\n            Object.assign(childTreeNode.getData(), childTreeNodeFromServer.getData());\n            if (childTreeNode.expandable !== childTreeNodeFromServer.expandable) {\n                if (childTreeNodeFromServer.expandable) {\n                    childTreeNode.setExpandable(true);\n                } else {\n                    childTreeNode.deleteChildTreeNodes();\n                    childTreeNode.setExpandable(false);\n                    childTreeNode.expanded = false;\n                }\n            }\n\n            // if server node not used -> delete\n            if (childTreeNode !== childTreeNodeFromServer) {\n                childTreeNodeFromServer.delete();\n            }\n        }\n        // delete superfluous nodes\n        while (this.childTreeNodes.length > childTreeNodesFromServer.length) {\n            childTreeNode = this.childTreeNodes[this.childTreeNodes.length - 1];\n            if (childTreeNode.id === \"dummy\") {\n                this.removePlaceHolderChildTreeNode();\n            } else {\n                childTreeNode.delete();\n            }\n        }\n    }\n\n    updateTreeNodeProperties(targetTreeNode: TreeNode, sourceTreeNode: TreeNode) {\n        const excludeProperties = [\"id\", \"expanded\", \"expandable\", \"childTreeNodes\", \"tmpDataId\"];\n        for (const propertyName in sourceTreeNode) {\n            if (excludeProperties.indexOf(propertyName) >= 0) {\n                continue;\n            }\n            const value = sourceTreeNode[propertyName];\n            if ([\"number\", \"string\", \"boolean\"].indexOf(typeof value) < 0) {\n                continue;\n            }\n            targetTreeNode[propertyName] = value;\n        }\n    }\n\n    visitChildNodesRecursively(callback): void {\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            callback(childTreeNode);\n            childTreeNode.visitChildNodesRecursively(callback);\n        }\n    }\n\n    visitParentNodesRecursively(callback): void {\n        const parentTreeNode = this.getParentTreeNode();\n        if (parentTreeNode) {\n            callback(parentTreeNode);\n            parentTreeNode.visitParentNodesRecursively(callback);\n        }\n    }\n\n    getParentTreeNode(): TreeNode {\n        return this.getData().parentTreeNode;\n    }\n\n    isVisible(): boolean {\n        const isExpanded = function (node: TreeNode) {\n            if (!node.expanded) {\n                return false;\n            }\n            const parentNode = node.getParentTreeNode();\n            if (!parentNode) {\n                return true;\n            }\n            return isExpanded(parentNode);\n        };\n        const parentNode = this.getParentTreeNode();\n        if (!parentNode) {\n            return true;\n        }\n        return isExpanded(parentNode);\n    }\n\n    hasChildNodes(): boolean {\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    hasExpandedChildNode(): boolean {\n        for (const childTreeNode of this.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            if (childTreeNode.expanded || childTreeNode.hasExpandedChildNode()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]}