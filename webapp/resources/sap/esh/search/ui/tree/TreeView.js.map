{"version":3,"file":"TreeView.js","names":["sap","ui","define","Tree","___SearchHelper","sap_m_library","delayedExecution","ListSeparators","TreeView","extend","renderer","apiVersion","metadata","properties","treeNodeFactory","type","constructor","_constructor","sId","options","toggleOpenState","event","this","handleToggleOpenState","Tree.prototype.constructor.call","setShowSeparators","None","expandTreeNodes","setBusyIndicatorDelay","saveFocus","_saveFocus","domRef","getDomRef","focusTreeNodeId","undefined","childDomRefs","querySelectorAll","i","length","childDomRef","item","document","activeElement","getAttribute","restoreFocus","async","_restoreFocus","isFocused","setFocus","items","getItems","getBindingContext","getObject","id","focus","wait","delay","Promise","resolve","setTimeout","setTreeNodeFactory","_setTreeNodeFactory","setProperty","registerTreeView","getTreeNodeFactory","_getTreeNodeFactory","getProperty","destroy","_destroy","bSuppressInvalidate","Tree.prototype.destroy.call","deRegisterTreeView","_handleToggleOpenState","treeNode","getParameter","setExpanded","_expandTreeNodes","isDestroyed","collapseAll","expandTreeNodeRecursively","getRootTreeNode","_expandTreeNodeRecursively","expanded","doExpand","childTreeNode","childTreeNodes","_doExpand","context","itemTreeNode","expand"],"sources":["TreeView.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport Tree, { $TreeSettings, Tree$ToggleOpenStateEvent } from \"sap/m/Tree\";\nimport { delayedExecution } from \"../SearchHelper\";\nimport TreeNode from \"./TreeNode\";\nimport { BaseTreeNodeFactory } from \"./TreeNodeFactory\";\nimport { ListSeparators } from \"sap/m/library\";\n\ninterface $TreeViewSettings extends $TreeSettings {\n    treeNodeFactory: BaseTreeNodeFactory | string;\n}\n\n/**\n * @namespace sap.esh.search.ui.tree.TreeView\n */\nexport default class TreeView extends Tree {\n    focusTreeNodeId: string;\n    static readonly metadata = {\n        properties: {\n            treeNodeFactory: {\n                type: \"object\",\n            },\n        },\n    };\n    constructor(sId?: string, options?: $TreeViewSettings) {\n        if (typeof sId === \"object\") {\n            options = sId;\n        }\n        options.toggleOpenState = (event: Tree$ToggleOpenStateEvent) => {\n            this.handleToggleOpenState(event);\n        };\n        super(sId, options);\n        this.setShowSeparators(ListSeparators.None);\n        this.expandTreeNodes = delayedExecution(this.expandTreeNodes, 200);\n        this.setBusyIndicatorDelay(200);\n    }\n\n    saveFocus() {\n        const domRef = this.getDomRef();\n        if (!domRef) {\n            this.focusTreeNodeId = undefined;\n            return;\n        }\n        const childDomRefs = domRef.querySelectorAll(\".sapMTreeItemBase\");\n        for (let i = 0; i < childDomRefs.length; ++i) {\n            const childDomRef = childDomRefs.item(i);\n            if (childDomRef === document.activeElement) {\n                this.focusTreeNodeId = childDomRef.getAttribute(\"data-esh-tree-node-id\");\n                return;\n            }\n        }\n        this.focusTreeNodeId = undefined;\n    }\n\n    async restoreFocus() {\n        const isFocused = () => {\n            return document.activeElement.getAttribute(\"data-esh-tree-node-id\") === this.focusTreeNodeId;\n        };\n        const setFocus = () => {\n            const items = this.getItems();\n            for (const item of items) {\n                if ((item.getBindingContext().getObject() as TreeNode).id === this.focusTreeNodeId) {\n                    item.focus();\n                    return;\n                }\n            }\n        };\n        const wait = (delay) =>\n            new Promise(function (resolve) {\n                setTimeout(resolve, delay);\n            });\n        for (let i = 0; i < 10; ++i) {\n            await wait(200);\n            if (isFocused()) {\n                return;\n            }\n            setFocus();\n        }\n    }\n\n    setTreeNodeFactory(treeNodeFactory: BaseTreeNodeFactory) {\n        this.setProperty(\"treeNodeFactory\", treeNodeFactory);\n        if (treeNodeFactory) {\n            treeNodeFactory.registerTreeView(this);\n        }\n    }\n\n    getTreeNodeFactory(): BaseTreeNodeFactory {\n        return this.getProperty(\"treeNodeFactory\");\n    }\n\n    destroy(bSuppressInvalidate) {\n        super.destroy(bSuppressInvalidate);\n        this.getTreeNodeFactory().deRegisterTreeView(this);\n    }\n\n    handleToggleOpenState(event: Tree$ToggleOpenStateEvent) {\n        const treeNode: TreeNode = (event.getParameter(\"itemContext\") as any).getObject(); // TODO: remove any once ui5 type is implemented\n        treeNode.setExpanded(event.getParameter(\"expanded\"), true);\n    }\n\n    expandTreeNodes() {\n        if (this.isDestroyed()) {\n            return;\n        }\n        this.collapseAll();\n        this.expandTreeNodeRecursively(this.getTreeNodeFactory().getRootTreeNode());\n    }\n\n    expandTreeNodeRecursively(treeNode: TreeNode): void {\n        if (treeNode.expanded) {\n            this.doExpand(treeNode);\n        }\n        for (const childTreeNode of treeNode.childTreeNodes) {\n            if (childTreeNode.id === \"dummy\") {\n                continue;\n            }\n            this.expandTreeNodeRecursively(childTreeNode);\n        }\n    }\n\n    doExpand(treeNode: TreeNode): void {\n        const items = this.getItems();\n        for (let i = 0; i < items.length; ++i) {\n            const item = items[i];\n            const context = item.getBindingContext();\n            if (!context) {\n                continue;\n            }\n            const itemTreeNode = context.getObject();\n            if (itemTreeNode === treeNode) {\n                this.expand(i);\n                return;\n            }\n        }\n    }\n\n    static renderer = {\n        apiVersion: 2,\n    };\n}\n"],"mappings":"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","ignoreList":[]}