{"version":3,"file":"CharMapper.js","names":["sap","ui","define","CharMapper","charsToReplace","charsToReplaceRegExp","replaceWithChars","replaceWithCharsRegExp","constructor","this","length","Error","charToReplace","push","RegExp","replaceWithChar","map","str","index","replace","unmap"],"sources":["CharMapper.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nexport default class CharMapper {\n    private charsToReplace: Array<string>;\n    private charsToReplaceRegExp: Array<RegExp>;\n    private replaceWithChars: Array<string>;\n    private replaceWithCharsRegExp: Array<RegExp>;\n    /**\n     *\n     * @param {string[]} charsToReplace - List of characters which will be encoded and decoded.\n     * The same list of characters will make sure that the decoded string was mapped to the same\n     * characters as the to be encoded string. This is needed for ui components which would interpret\n     * encoded # or % characters as part of the url instead of an encoded search term.\n     */\n    constructor(charsToReplace: Array<string>) {\n        this.charsToReplace = charsToReplace;\n        if (charsToReplace.length === 0) {\n            throw new Error(\"No characters to replace given\");\n        }\n        if (charsToReplace.length > 10) {\n            throw new Error(\"Max number of chars to replace is 10\");\n        }\n        this.charsToReplaceRegExp = [];\n        for (const charToReplace of charsToReplace) {\n            this.charsToReplaceRegExp.push(new RegExp(charToReplace, \"g\"));\n        }\n        // private UTF-8 characters:\n        this.replaceWithChars = [\n            \"\\uF0000\",\n            \"\\uF0001\",\n            \"\\uF0002\",\n            \"\\uF0003\",\n            \"\\uF0004\",\n            \"\\uF0005\",\n            \"\\uF0006\",\n            \"\\uF0007\",\n            \"\\uF0008\",\n            \"\\uF0009\",\n        ];\n        this.replaceWithCharsRegExp = [];\n        for (const replaceWithChar of this.replaceWithChars) {\n            this.replaceWithCharsRegExp.push(new RegExp(replaceWithChar, \"g\"));\n        }\n    }\n    /**\n     * @param {string} str - the string component which shall be scanned for chars to replace\n     * @returns {string} - the same string without the replaced chars but with placeholders\n     */\n    map(str: string): string {\n        for (let index = 0; index < this.charsToReplaceRegExp.length; index++) {\n            str = str.replace(this.charsToReplaceRegExp[index], this.replaceWithChars[index]);\n        }\n        return str;\n    }\n    /**\n     * @param {string} str - the string which contains placeholders\n     * @returns {string} - the the same string without placeholders but with the original characters\n     */\n    unmap(str: string): string {\n        for (let index = 0; index < this.charsToReplaceRegExp.length; index++) {\n            str = str.replace(this.replaceWithCharsRegExp[index], this.charsToReplace[index]);\n        }\n        return str;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2BAKe,MAAMC,EACTC,eACAC,qBACAC,iBACAC,uBAQRC,YAAYJ,GACRK,KAAKL,eAAiBA,EACtB,GAAIA,EAAeM,SAAW,EAAG,CAC7B,MAAM,IAAIC,MAAM,iCACpB,CACA,GAAIP,EAAeM,OAAS,GAAI,CAC5B,MAAM,IAAIC,MAAM,uCACpB,CACAF,KAAKJ,qBAAuB,GAC5B,IAAK,MAAMO,KAAiBR,EAAgB,CACxCK,KAAKJ,qBAAqBQ,KAAK,IAAIC,OAAOF,EAAe,KAC7D,CAEAH,KAAKH,iBAAmB,CACpB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJG,KAAKF,uBAAyB,GAC9B,IAAK,MAAMQ,KAAmBN,KAAKH,iBAAkB,CACjDG,KAAKF,uBAAuBM,KAAK,IAAIC,OAAOC,EAAiB,KACjE,CACJ,CAKAC,IAAIC,GACA,IAAK,IAAIC,EAAQ,EAAGA,EAAQT,KAAKJ,qBAAqBK,OAAQQ,IAAS,CACnED,EAAMA,EAAIE,QAAQV,KAAKJ,qBAAqBa,GAAQT,KAAKH,iBAAiBY,GAC9E,CACA,OAAOD,CACX,CAKAG,MAAMH,GACF,IAAK,IAAIC,EAAQ,EAAGA,EAAQT,KAAKJ,qBAAqBK,OAAQQ,IAAS,CACnED,EAAMA,EAAIE,QAAQV,KAAKF,uBAAuBW,GAAQT,KAAKL,eAAec,GAC9E,CACA,OAAOD,CACX,EACH,OAAAd,CAAA","ignoreList":[]}