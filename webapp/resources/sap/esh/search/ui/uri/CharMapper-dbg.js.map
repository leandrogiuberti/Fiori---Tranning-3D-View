{"version":3,"file":"CharMapper-dbg.js","names":["sap","ui","define","CharMapper","charsToReplace","charsToReplaceRegExp","replaceWithChars","replaceWithCharsRegExp","constructor","length","Error","charToReplace","push","RegExp","replaceWithChar","map","str","index","replace","unmap"],"sources":["CharMapper.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nexport default class CharMapper {\n    private charsToReplace: Array<string>;\n    private charsToReplaceRegExp: Array<RegExp>;\n    private replaceWithChars: Array<string>;\n    private replaceWithCharsRegExp: Array<RegExp>;\n    /**\n     *\n     * @param {string[]} charsToReplace - List of characters which will be encoded and decoded.\n     * The same list of characters will make sure that the decoded string was mapped to the same\n     * characters as the to be encoded string. This is needed for ui components which would interpret\n     * encoded # or % characters as part of the url instead of an encoded search term.\n     */\n    constructor(charsToReplace: Array<string>) {\n        this.charsToReplace = charsToReplace;\n        if (charsToReplace.length === 0) {\n            throw new Error(\"No characters to replace given\");\n        }\n        if (charsToReplace.length > 10) {\n            throw new Error(\"Max number of chars to replace is 10\");\n        }\n        this.charsToReplaceRegExp = [];\n        for (const charToReplace of charsToReplace) {\n            this.charsToReplaceRegExp.push(new RegExp(charToReplace, \"g\"));\n        }\n        // private UTF-8 characters:\n        this.replaceWithChars = [\n            \"\\uF0000\",\n            \"\\uF0001\",\n            \"\\uF0002\",\n            \"\\uF0003\",\n            \"\\uF0004\",\n            \"\\uF0005\",\n            \"\\uF0006\",\n            \"\\uF0007\",\n            \"\\uF0008\",\n            \"\\uF0009\",\n        ];\n        this.replaceWithCharsRegExp = [];\n        for (const replaceWithChar of this.replaceWithChars) {\n            this.replaceWithCharsRegExp.push(new RegExp(replaceWithChar, \"g\"));\n        }\n    }\n    /**\n     * @param {string} str - the string component which shall be scanned for chars to replace\n     * @returns {string} - the same string without the replaced chars but with placeholders\n     */\n    map(str: string): string {\n        for (let index = 0; index < this.charsToReplaceRegExp.length; index++) {\n            str = str.replace(this.charsToReplaceRegExp[index], this.replaceWithChars[index]);\n        }\n        return str;\n    }\n    /**\n     * @param {string} str - the string which contains placeholders\n     * @returns {string} - the the same string without placeholders but with the original characters\n     */\n    unmap(str: string): string {\n        for (let index = 0; index < this.charsToReplaceRegExp.length; index++) {\n            str = str.replace(this.replaceWithCharsRegExp[index], this.charsToReplace[index]);\n        }\n        return str;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA;EAAA;;EAKe,MAAMC,UAAU,CAAC;IACpBC,cAAc;IACdC,oBAAoB;IACpBC,gBAAgB;IAChBC,sBAAsB;IAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,WAAWA,CAACJ,cAA6B,EAAE;MACvC,IAAI,CAACA,cAAc,GAAGA,cAAc;MACpC,IAAIA,cAAc,CAACK,MAAM,KAAK,CAAC,EAAE;QAC7B,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACrD;MACA,IAAIN,cAAc,CAACK,MAAM,GAAG,EAAE,EAAE;QAC5B,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MAC3D;MACA,IAAI,CAACL,oBAAoB,GAAG,EAAE;MAC9B,KAAK,MAAMM,aAAa,IAAIP,cAAc,EAAE;QACxC,IAAI,CAACC,oBAAoB,CAACO,IAAI,CAAC,IAAIC,MAAM,CAACF,aAAa,EAAE,GAAG,CAAC,CAAC;MAClE;MACA;MACA,IAAI,CAACL,gBAAgB,GAAG,CACpB,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACZ;MACD,IAAI,CAACC,sBAAsB,GAAG,EAAE;MAChC,KAAK,MAAMO,eAAe,IAAI,IAAI,CAACR,gBAAgB,EAAE;QACjD,IAAI,CAACC,sBAAsB,CAACK,IAAI,CAAC,IAAIC,MAAM,CAACC,eAAe,EAAE,GAAG,CAAC,CAAC;MACtE;IACJ;IACA;AACJ;AACA;AACA;IACIC,GAAGA,CAACC,GAAW,EAAU;MACrB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACZ,oBAAoB,CAACI,MAAM,EAAEQ,KAAK,EAAE,EAAE;QACnED,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,IAAI,CAACb,oBAAoB,CAACY,KAAK,CAAC,EAAE,IAAI,CAACX,gBAAgB,CAACW,KAAK,CAAC,CAAC;MACrF;MACA,OAAOD,GAAG;IACd;IACA;AACJ;AACA;AACA;IACIG,KAAKA,CAACH,GAAW,EAAU;MACvB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACZ,oBAAoB,CAACI,MAAM,EAAEQ,KAAK,EAAE,EAAE;QACnED,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,IAAI,CAACX,sBAAsB,CAACU,KAAK,CAAC,EAAE,IAAI,CAACb,cAAc,CAACa,KAAK,CAAC,CAAC;MACrF;MACA,OAAOD,GAAG;IACd;EACJ;EAAC,OAAAb,UAAA;AAAA","ignoreList":[]}