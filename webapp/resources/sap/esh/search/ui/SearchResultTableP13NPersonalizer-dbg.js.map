{"version":3,"file":"SearchResultTableP13NPersonalizer-dbg.js","names":["sap","ui","define","__i18n","P13NPopup","P13NPanel","Core","__ErrorHandler","_interopRequireDefault","obj","__esModule","default","i18n","ErrorHandler","SearchResultTablePersonalizer","model","table","p13nPanel","p13nPopup","resetPerformed","constructor","searchModel","initialize","createPopup","attachChange","updateOkButtonState","error","errorHandler","getInstance","onError","updateTableColumns","isReset","setTableColumns","getTableInitialColumns","p13NColumns","getP13nData","oldColumns","getTableColumns","newColumns","p13NColumn","oldColumn","p13NColumnName","name","visible","push","updateP13NColumns","isInitial","columns","map","column","label","setP13nData","showHeader","getId","title","getText","panels","warningText","reset","close","event","getParameter","update","addStyleClass","selectedCount","filter","col","length","okButtonId","okButton","byId","isEnabled","setEnabled","setTooltip","openDialog","open","destroyControllerAndDialog","destroyPanels","destroy"],"sources":["SearchResultTableP13NPersonalizer.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"./i18n\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport SearchResultTable from \"sap/esh/search/ui/controls/resultview/SearchResultTable\";\nimport P13NPopup from \"sap/m/p13n/Popup\";\nimport P13NPanel from \"sap/m/p13n/SelectionPanel\";\nimport Button from \"sap/m/Button\";\nimport Core from \"sap/ui/core/Core\";\n// import { TableColumnType } from \"./SearchResultTableColumnType\";\nimport { Column as TableColumn } from \"./SearchResultTableFormatter\";\nimport ErrorHandler from \"./error/ErrorHandler\";\n// import merge from \"sap/base/util/merge\";\n\nexport interface PersoState {\n    aColumns: Array<TableColumn>;\n    _persoSchemaVersion: \"p13n\";\n}\n\n// reference:\n// interface P13NColumn {\n//     name: string; // === TableColumn's p13NColumnName\n//     label: string;\n//     visible: boolean;\n// }\n\nexport default class SearchResultTablePersonalizer {\n    model: SearchModel;\n    table: SearchResultTable;\n    p13nPanel: P13NPanel;\n    p13nPopup: P13NPopup;\n    private resetPerformed: boolean = false;\n\n    constructor(searchModel: SearchModel) {\n        this.model = searchModel;\n    }\n\n    initialize(table: SearchResultTable): void {\n        try {\n            this.table = table;\n            if (!this.p13nPopup) {\n                this.createPopup();\n            }\n            this.p13nPanel.attachChange(() => {\n                this.resetPerformed = false;\n                this.updateOkButtonState();\n            });\n        } catch (error) {\n            const errorHandler = ErrorHandler.getInstance();\n            errorHandler.onError(error);\n        }\n    }\n\n    // update table columns by p13n popup columns (ordering and visibility)\n    private updateTableColumns(isReset: boolean): void {\n        if (isReset) {\n            this.model.setTableColumns(this.model.getTableInitialColumns(), true);\n        } else {\n            const p13NColumns = this.p13nPanel.getP13nData(false);\n            const oldColumns = this.model.getTableColumns(false);\n            const newColumns = [];\n            // loop p13NColumns, then loop oldColumns. Make sure the ordering is correct.\n            for (const p13NColumn of p13NColumns) {\n                for (const oldColumn of oldColumns) {\n                    if (oldColumn.p13NColumnName === p13NColumn.name) {\n                        oldColumn.visible = p13NColumn.visible;\n                        newColumns.push(oldColumn);\n                        break;\n                    }\n                }\n            }\n            this.model.setTableColumns(newColumns, true);\n        }\n    }\n\n    // update p13n popup columns by personalize state columns or initial columns (ordering and visibility)\n    private updateP13NColumns(isInitial: boolean): void {\n        const columns = isInitial ? this.model.getTableInitialColumns() : this.model.getTableColumns(false);\n\n        const p13NColumns = columns.map((column) => ({\n            name: column.p13NColumnName,\n            label: column.name,\n            visible: column.visible,\n        }));\n\n        this.p13nPanel.setP13nData(p13NColumns);\n    }\n\n    private createPopup(): void {\n        this.p13nPanel = new P13NPanel({ showHeader: false });\n\n        this.p13nPopup = new P13NPopup(this.table.getId() + \"-personalizer\", {\n            title: i18n.getText(\"personalizeTable\"),\n            panels: [this.p13nPanel],\n            warningText: i18n.getText(\"resetColumns\"),\n            reset: () => {\n                this.updateP13NColumns(true);\n                this.updateOkButtonState();\n                this.resetPerformed = true;\n            },\n            close: (event) => {\n                if (event.getParameter(\"reason\") === \"Ok\") {\n                    this.updateTableColumns(this.resetPerformed);\n                    this.table.update();\n                }\n                this.resetPerformed = false;\n            },\n        });\n\n        this.p13nPopup.addStyleClass(\"sapUshellSearchResultTablePersonalizationDialog\");\n    }\n\n    private updateOkButtonState(): void {\n        const p13NColumns = this.p13nPanel.getP13nData(false);\n        const selectedCount = p13NColumns.filter((col) => col.visible).length;\n\n        const okButtonId = this.table.getId() + \"-personalizer-confirmBtn\";\n        const okButton = Core.byId(okButtonId) as Button;\n        if (okButton) {\n            const isEnabled = selectedCount > 0;\n            okButton.setEnabled(isEnabled);\n            okButton.setTooltip(\n                isEnabled\n                    ? \"\" // No tooltip needed when enabled\n                    : i18n.getText(\"noColumnsSelectedTooltip\") // Tooltip when disabled\n            );\n        }\n    }\n\n    public openDialog(): void {\n        this.updateP13NColumns(false);\n        this.p13nPopup.open(null);\n        // update the ok button immediately after opening\n        this.updateOkButtonState();\n    }\n\n    public destroyControllerAndDialog(): void {\n        this.p13nPopup.destroyPanels();\n        this.p13nPopup.destroy();\n    }\n}\n"],"mappings":"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","ignoreList":[]}