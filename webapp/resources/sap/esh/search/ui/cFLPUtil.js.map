{"version":3,"file":"cFLPUtil.js","names":["sap","ui","define","___sinaNexTS_providers_multi_FederationType","___sinaNexTS_sina_SinaConfiguration","FederationType","AvailableProviders","async","createContentProviderSinaConfiguration","contentProviderId","service","window","ushell","Container","getServiceAsync","oSystemContext","getSystemContext","sRequestUrlForAppRouter","getFullyQualifiedXhrUrl","sinaProviderType","getProperty","provider","toLowerCase","label","url","readCFlpConfiguration","sinaConfigurations","cf","Promise","resolve","oApplications","getApplications","oContentProviders","Object","keys","reduce","o","sApplicationKey","oApplication","sContentProviderId","contentProviderIds","promises","i","length","push","subSinaProviderConfigurations","all","filter","elem","MULTI","subProviders","federationType","advanced_round_robin","DUMMY","__exports","__esModule"],"sources":["cFLPUtil.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { FederationType } from \"./sinaNexTS/providers/multi/FederationType\";\nimport { AvailableProviders, SinaConfiguration } from \"./sinaNexTS/sina/SinaConfiguration\";\n\nasync function createContentProviderSinaConfiguration(\n    contentProviderId: string\n): Promise<SinaConfiguration | void> {\n    const service = await (window.sap.ushell as any).Container.getServiceAsync(\"ClientSideTargetResolution\");\n    const oSystemContext = await service.getSystemContext(contentProviderId);\n\n    // uncoment for cflp jade dev env:\n    /*const fixProtocol = {\n        enable: async function () {\n            this.ctr = await (function () {\n                return new Promise((resolve) => {\n                    sap.ui.require(\n                        [\"sap/ushell/services/ClientSideTargetResolution/SystemContext\"],\n                        function (ctr) {\n                            resolve(ctr);\n                        }\n                    );\n                });\n            })();\n            this._getProtocol = this.ctr._getProtocol;\n            this.ctr._getProtocol = () => \"https\";\n        },\n        disable: function () {\n            this.ctr._getProtocol = this._getProtocol;\n        },\n    };\n    await fixProtocol.enable();*/\n\n    const sRequestUrlForAppRouter = oSystemContext.getFullyQualifiedXhrUrl(\n        \"sap/opu/odata/sap/ESH_SEARCH_SRV\"\n    );\n\n    const sinaProviderType = oSystemContext.getProperty(\"esearch.provider\");\n    if (!sinaProviderType) {\n        // destination of this content provider has no launchpad.esearch.provider property\n        // -> not relevant for search\n        return;\n    }\n    return {\n        contentProviderId,\n        provider: sinaProviderType.toLowerCase(),\n        label: contentProviderId,\n        url: sRequestUrlForAppRouter,\n    };\n}\n\nexport async function readCFlpConfiguration(\n    sinaConfigurations: Array<SinaConfiguration | AvailableProviders>\n): Promise<Array<SinaConfiguration | AvailableProviders>> {\n    if (!sap || !(sap as any).cf) {\n        return Promise.resolve(sinaConfigurations); // -> not active -> do nothing\n    }\n\n    // read content providers from cflp configuration\n    const service = await (window.sap.ushell as any).Container.getServiceAsync(\"CommonDataModel\");\n    const oApplications = await service.getApplications();\n\n    // extract content provider ids\n    const oContentProviders = Object.keys(oApplications).reduce(function (o, sApplicationKey) {\n        const oApplication = oApplications[sApplicationKey];\n        const sContentProviderId = oApplication[\"sap.app\"] && oApplication[\"sap.app\"].contentProviderId;\n        if (sContentProviderId) {\n            o[sContentProviderId] = true;\n        }\n        return o;\n    }, {});\n    const contentProviderIds = Object.keys(oContentProviders);\n\n    // create sina provider configuration\n    const promises = [];\n    for (let i = 0; i < contentProviderIds.length; ++i) {\n        const contentProviderId = contentProviderIds[i];\n        promises.push(createContentProviderSinaConfiguration(contentProviderId));\n    }\n    let subSinaProviderConfigurations: Array<SinaConfiguration> = await Promise.all(promises);\n\n    if (!subSinaProviderConfigurations || subSinaProviderConfigurations.length === 0) {\n        // fallback if configuration is empty\n        return sinaConfigurations;\n    } else {\n        // assemble multi provider configuration\n        subSinaProviderConfigurations = subSinaProviderConfigurations.filter(function (elem) {\n            if (typeof elem !== \"undefined\") {\n                return elem;\n            }\n        });\n        return [\n            {\n                provider: AvailableProviders.MULTI,\n                subProviders: subSinaProviderConfigurations,\n                federationType: FederationType.advanced_round_robin,\n                url: \"\", // not relevant for multi provider\n            },\n            AvailableProviders.DUMMY,\n        ];\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,6FAAAC,EAAAC,GAAA,mBAKSC,EAAcF,EAAA,wBACdG,EAAkBF,EAAA,sBAE3BG,eAAeC,EACXC,GAEA,MAAMC,QAAiBC,OAAOX,IAAIY,OAAeC,UAAUC,gBAAgB,8BAC3E,MAAMC,QAAuBL,EAAQM,iBAAiBP,GAwBtD,MAAMQ,EAA0BF,EAAeG,wBAC3C,oCAGJ,MAAMC,EAAmBJ,EAAeK,YAAY,oBACpD,IAAKD,EAAkB,CAGnB,MACJ,CACA,MAAO,CACHV,oBACAY,SAAUF,EAAiBG,cAC3BC,MAAOd,EACPe,IAAKP,EAEb,CAEOV,eAAekB,EAClBC,GAEA,IAAK1B,MAASA,IAAY2B,GAAI,CAC1B,OAAOC,QAAQC,QAAQH,EAC3B,CAGA,MAAMhB,QAAiBC,OAAOX,IAAIY,OAAeC,UAAUC,gBAAgB,mBAC3E,MAAMgB,QAAsBpB,EAAQqB,kBAGpC,MAAMC,EAAoBC,OAAOC,KAAKJ,GAAeK,OAAO,SAAUC,EAAGC,GACrE,MAAMC,EAAeR,EAAcO,GACnC,MAAME,EAAqBD,EAAa,YAAcA,EAAa,WAAW7B,kBAC9E,GAAI8B,EAAoB,CACpBH,EAAEG,GAAsB,IAC5B,CACA,OAAOH,CACX,EAAG,CAAC,GACJ,MAAMI,EAAqBP,OAAOC,KAAKF,GAGvC,MAAMS,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAmBG,SAAUD,EAAG,CAChD,MAAMjC,EAAoB+B,EAAmBE,GAC7CD,EAASG,KAAKpC,EAAuCC,GACzD,CACA,IAAIoC,QAAgEjB,QAAQkB,IAAIL,GAEhF,IAAKI,GAAiCA,EAA8BF,SAAW,EAAG,CAE9E,OAAOjB,CACX,KAAO,CAEHmB,EAAgCA,EAA8BE,OAAO,SAAUC,GAC3E,UAAWA,IAAS,YAAa,CAC7B,OAAOA,CACX,CACJ,GACA,MAAO,CACH,CACI3B,SAAUf,EAAmB2C,MAC7BC,aAAcL,EACdM,eAAgB9C,EAAe+C,qBAC/B5B,IAAK,IAETlB,EAAmB+C,MAE3B,CACJ,CAAC,IAAAC,EAAA,CAAAC,WAAA,MAAAD,EAAA7B,wBAAA,OAAA6B,CAAA","ignoreList":[]}