{"version":3,"file":"SearchResultTableFormatter.js","names":["sap","ui","define","__i18n","__SearchResultBaseFormatter","___SearchResultTableColumnType","___uiConstants","merge","SearchLayoutResponsive","Log","_interopRequireDefault","obj","__esModule","default","i18n","SearchResultBaseFormatter","TableColumnType","initialValueUnicode","SearchResultTableFormatter","defaultColumnWidth","logger","getLogger","constructor","model","super","this","formatColumns","results","length","preformattedColumns","preformatColumns","config","searchResultTablePersonalization","storedColumns","getTableColumns","Array","isArray","formatInitialColumns","unifyColumns","column","columns","addedAttributeKeys","Set","result","attribute","itemattributes","attributeKey","key","has","isSingleAttributeInDetail","isGroupAttributeInDetail","add","p13NColumnName","createP13NColumnName","attributeId","name","type","DETAIL","visible","push","navigationObjects","undefined","RELATED_APPS","getText","extendTableColumn","EXTEND","titleDescription","TITLE_DESCRIPTION","titleDescriptionLabel","unshift","title","titleColumnName","TITLE","hasText","getDataSource","label","forEach","i","index","tableColumns","initialColumns","sort","a","b","initialColumn","createColumnOfAdaptiveVisibleAndWidth","tempoPreformattedColumns","preformattedColumnMap","Map","map","tempoStoredColumns","storedColumnMap","unifiedColumns","storedColumn","matchedColumn","get","width","preformattedColumn","storedvisible","storedWidth","tempColumn","configWidth","getConfigWidth","FF_resizeResultTableColumns","formatRows","rows","cells","attributes","j","getAttribute","iconUrl","defaultNavigationTarget","value","formatCellText","isHighlighted","whyfound","tooltip","icon","data","id","attributesMap","favorites_user_id","cell","error","errorHandler","onError","isTitleDescriptionHighlighted","isTitleHighlighted","titleNavigation","titleIconUrl","titleInfoIconUrl","titleInfoIconTooltip","usage","getAttributeMetadata","Detail","displayOrder","warning","getAttributeGroupMetadata","p13NColumnNamePrefix","getColumnWidthInPixel","titleColumnWidth","valueString","test","parseInt","convertRemToPixel","console","warn","defaultValue","trim"],"sources":["SearchResultTableFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"./i18n\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { FormattedResultItem, FormattedResultItemAttribute } from \"sap/esh/search/ui/SearchResultFormatter\";\nimport SearchResultBaseFormatter from \"./SearchResultBaseFormatter\";\nimport { TableColumnType } from \"./SearchResultTableColumnType\";\nimport { NavigationTarget } from \"./sinaNexTS/sina/NavigationTarget\";\nimport { initialValueUnicode } from \"./uiConstants\";\nimport merge from \"sap/base/util/merge\";\nimport SearchLayoutResponsive from \"sap/esh/search/ui/controls/SearchLayoutResponsive\";\nimport Log from \"sap/base/Log\";\n\nexport interface Column {\n    p13NColumnName: string; // personalization column ID, === P13NColumn.name\n    attributeId?: string; // detail attribute id\n    type: TableColumnType;\n    name: string; // column UI label\n    index?: number; // index of initial column order\n    width?: string;\n    visible: boolean;\n}\n\nexport interface Cell {\n    p13NColumnName: string; // personalization column ID, === P13NColumn.name\n    attributeId?: string; // column of detail attribute has attribute id\n    value: string; // optional, formerly used for cell of custom column (deprecated exit extendTableColumn), as the same doesn't have value\n    icon?: string;\n    titleIconUrl?: string;\n    titleInfoIconUrl?: string;\n    titleInfoIconTooltip?: string;\n    titleNavigation?: NavigationTarget;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationObjects?: Array<NavigationTarget>;\n    iconFavorite?: string;\n    iconUnfavorite?: string;\n    itemId?: string;\n    isFavorite?: boolean;\n    isHighlighted?: boolean;\n    type?: TableColumnType;\n    tooltip?: string; // preserve SearchResultFormatter defined tooltip\n}\n\nexport interface Row {\n    cells?: Array<Cell>;\n}\n\nexport default class SearchResultTableFormatter extends SearchResultBaseFormatter {\n    defaultColumnWidth: string;\n    private logger = Log.getLogger(\"sap.esh.search.ui.SearchResultTableFormatter\");\n\n    constructor(model: SearchModel) {\n        super(model);\n        this.model = model;\n        this.defaultColumnWidth = \"100%\";\n    }\n\n    /*\n     * ===================================\n     * format columns for table view\n     * ===================================\n     */\n    formatColumns(results: Array<FormattedResultItem>): Array<Column> {\n        if (results?.length === 0) {\n            return [];\n        }\n\n        // format columns with dummy state: ordering, visible, width\n        const preformattedColumns = this.preformatColumns(results);\n\n        if (this.model.config?.searchResultTablePersonalization !== false) {\n            const storedColumns = this.model.getTableColumns(true);\n            if (Array.isArray(storedColumns) === false || storedColumns.length === 0) {\n                return this.formatInitialColumns(preformattedColumns);\n            }\n            return this.unifyColumns(preformattedColumns, storedColumns);\n        } else {\n            return this.formatInitialColumns(preformattedColumns);\n        }\n    }\n\n    private preformatColumns(results: Array<FormattedResultItem>): Array<Column> {\n        let column;\n        const columns = [];\n        const addedAttributeKeys = new Set<string>();\n        const config = this?.model?.config;\n\n        // detail columns\n        // Loop through all results and their itemattributes\n        for (const result of results || []) {\n            for (const attribute of result?.itemattributes || []) {\n                const attributeKey = attribute?.key;\n                if (\n                    !addedAttributeKeys.has(attributeKey) &&\n                    (this.isSingleAttributeInDetail(attributeKey) ||\n                        this.isGroupAttributeInDetail(attributeKey))\n                ) {\n                    // Add the attribute ID to the set to avoid duplicates\n                    addedAttributeKeys.add(attributeKey);\n\n                    column = {\n                        p13NColumnName: this.createP13NColumnName(attributeKey),\n                        attributeId: attributeKey,\n                        name: attribute.name,\n                        type: TableColumnType.DETAIL,\n                        visible: true, // dummy value\n                    };\n                    columns.push(column);\n                }\n            }\n        }\n\n        // related apps column\n        for (const result of results || []) {\n            if (result.navigationObjects !== undefined && result.navigationObjects.length > 0) {\n                column = {\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.RELATED_APPS),\n                    name: i18n.getText(\"intents\"),\n                    type: TableColumnType.RELATED_APPS,\n                    visible: true, // dummy value\n                };\n                columns.push(column);\n                break;\n            }\n        }\n\n        // extend column\n        // - 'extendTableColumn' deprecated as of version 1.141\n\n        if (config?.extendTableColumn?.column) {\n            column = {\n                p13NColumnName: this.createP13NColumnName(TableColumnType.EXTEND),\n                attributeId: config.extendTableColumn.column?.attributeId || \"\", // 'extendTableColumn' deprecated as of version 1.141\n\n                name: config.extendTableColumn.column?.name || \"\", // 'extendTableColumn' deprecated as of version 1.141\n\n                type: TableColumnType.EXTEND,\n                visible: true, // dummy value\n            };\n            columns.push(column);\n        }\n\n        // title description column\n        if (results[0].titleDescription !== undefined) {\n            column = {\n                p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE_DESCRIPTION),\n                name: results[0].titleDescriptionLabel + \" (\" + i18n.getText(\"titleDescription\") + \")\",\n                type: TableColumnType.TITLE_DESCRIPTION,\n                visible: true, // dummy value\n            };\n            columns.unshift(column);\n        }\n\n        // title column\n        if (results[0].title !== undefined) {\n            if (typeof config?.titleColumnName === \"string\" && config?.titleColumnName.length > 0) {\n                column = {\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE),\n                    name: i18n.hasText(config?.titleColumnName)\n                        ? i18n.getText(config?.titleColumnName)\n                        : config?.titleColumnName, // work around. let DSP change titleColumnName to \"Business Name\", and remove this logic\n                    type: TableColumnType.TITLE,\n                    visible: true, // dummy value\n                };\n            } else {\n                column = {\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE),\n                    name: this.model.getDataSource().label,\n                    type: TableColumnType.TITLE,\n                    visible: true, // dummy value\n                };\n            }\n            columns.unshift(column);\n        }\n\n        /*\n            original order of columns:\n            1. title\n            2. title description\n            3. detail attributes\n            4. related apps\n            5. extend column\n        */\n\n        // add index for later reset initial column\n        columns.forEach(function (column, i) {\n            column.index = i;\n        });\n\n        // set width in formatInitialColumns and unifyColumns\n\n        return columns;\n    }\n\n    public formatInitialColumns(tableColumns: Array<Column>): Array<Column> {\n        const columns = merge([], tableColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n        const initialColumns = [];\n\n        // initialize ordering\n        columns.sort((a, b) => {\n            if (a.index < b.index) {\n                return -1;\n            } else if (a.index > b.index) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // initialize width, set dummy visible false\n        for (const column of columns) {\n            const initialColumn = this.createColumnOfAdaptiveVisibleAndWidth(column, false, undefined);\n            initialColumns.push(initialColumn);\n        }\n\n        // initialize visibility\n        if (this.model?.config?.extendTableColumn?.column) {\n            // 'extendTableColumn' deprecated as of version 1.141\n            for (const initialColumn of initialColumns) {\n                initialColumn.visible =\n                    initialColumn.index < 7 || initialColumn.type === TableColumnType.EXTEND;\n            }\n        } else {\n            for (const initialColumn of initialColumns) {\n                initialColumn.visible = initialColumn.index < 6;\n            }\n        }\n\n        return initialColumns;\n    }\n\n    private unifyColumns(preformattedColumns: Array<Column>, storedColumns: Array<Column>): Array<Column> {\n        // create map for easy search\n        const tempoPreformattedColumns = merge([], preformattedColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n        const preformattedColumnMap = new Map(\n            tempoPreformattedColumns.map((column) => [column.p13NColumnName, column])\n        );\n\n        const tempoStoredColumns = merge([], storedColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n        const storedColumnMap = new Map(tempoStoredColumns.map((column) => [column.p13NColumnName, column]));\n\n        const unifiedColumns = [];\n\n        /*\n        case 1: column in preformattedColumns, column in persoStateColumns     -> \n                unified column p13NColumnName   = preformattedColumn p13NColumnName\n                unified column attributeId      = preformattedColumn attributeId\n                unified column type             = preformattedColumn type\n                unified column name             = preformattedColumn name\n                unified column index            = preformattedColumn index (IMPORTANT!)\n                unified column width            = persoStateColumn width \n                unified column visible          = persoStateColumn visible\n                unified column ordering         = persoStateColumn ordering\n    \n        case 2: column in preformattedColumns, column NOT in persoStateColumns  -> \n                unified column p13NColumnName   = preformattedColumn p13NColumnName\n                unified column attributeId      = preformattedColumn attributeId\n                unified column type             = preformattedColumn type\n                unified column name             = preformattedColumn name\n                unified column index            = preformattedColumn index (IMPORTANT!)\n                unified column width            = dummy value\n                unified column visible          = true\n                unified column ordering         = ordering at end\n\n        case 3: column NOT in preformattedColumns, column in persoStateColumns  -> \n                unified column                  = don't consider\n        */\n\n        // case 1\n        // loop in storedColumns (NOT preformattedColumns) guarantees unifiedColumns having stored column ordering.\n        for (const storedColumn of storedColumns) {\n            const matchedColumn = preformattedColumnMap.get(storedColumn.p13NColumnName);\n            if (matchedColumn) {\n                unifiedColumns.push(\n                    this.createColumnOfAdaptiveVisibleAndWidth(\n                        matchedColumn,\n                        storedColumn.visible,\n                        storedColumn.width\n                    )\n                );\n            }\n        }\n\n        // all preformattedColumns found in storage\n        if (unifiedColumns.length === preformattedColumns.length) {\n            return unifiedColumns;\n        }\n\n        // case 2\n        for (const preformattedColumn of preformattedColumns) {\n            const matchedColumn = storedColumnMap.get(preformattedColumn.p13NColumnName);\n            if (!matchedColumn) {\n                unifiedColumns.push(\n                    this.createColumnOfAdaptiveVisibleAndWidth(preformattedColumn, true, undefined)\n                );\n            }\n        }\n        return unifiedColumns;\n    }\n\n    private createColumnOfAdaptiveVisibleAndWidth(\n        column: Column,\n        storedvisible: boolean,\n        storedWidth: string\n    ): Column {\n        const tempColumn = column;\n        const configWidth = this.getConfigWidth(column);\n\n        tempColumn.visible = storedvisible || false;\n\n        if (this.model?.config?.FF_resizeResultTableColumns === true) {\n            // table resizable\n            tempColumn.width = storedWidth || configWidth || this.defaultColumnWidth; // set width by configured width or default width\n        } else {\n            // table NOT resizable\n            if (configWidth === undefined) {\n                delete tempColumn.width; // delete width\n            } else {\n                tempColumn.width = configWidth; // set configured width\n            }\n        }\n\n        return tempColumn;\n    }\n\n    /*\n     * ===================================\n     * format rows with cells for table view\n     * ===================================\n     */\n    formatRows(results: Array<FormattedResultItem>, columns: Array<Column>): Array<Row> {\n        if (results?.length === 0) {\n            return [];\n        }\n\n        if (columns?.length === 0) {\n            return [];\n        }\n\n        // format rows\n        const rows: Array<Row> = [];\n        for (let i = 0; i < results.length; i++) {\n            rows[i] = { cells: [] };\n            // detail cells\n            const attributes = results[i].itemattributes;\n            for (let j = 0; j < columns.length; j++) {\n                if (columns[j].type !== TableColumnType.DETAIL) {\n                    continue;\n                }\n                const attributeKey = columns[j].attributeId;\n                const attribute = this.getAttribute(attributes, attributeKey);\n                if (attribute !== undefined) {\n                    if (attribute.iconUrl && attribute.defaultNavigationTarget) {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            tooltip: this.formatCellText(attribute.tooltip, \"\"), // preserve SearchResultFormatter defined tooltip (hierarchical attribute of DSP)\n                            icon: attribute.iconUrl,\n                            defaultNavigationTarget: attribute.defaultNavigationTarget,\n                            type: TableColumnType.DETAIL,\n                        });\n                    } else if (attribute.iconUrl) {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            // tooltip: this.formatCellText(attribute.tooltip, \"\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                            icon: attribute.iconUrl,\n                            type: TableColumnType.DETAIL,\n                        });\n                    } else if (attribute.defaultNavigationTarget) {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            tooltip: this.formatCellText(attribute.tooltip, \"\"), // preserve SearchResultFormatter defined tooltip (hierarchical attribute of DSP)\n                            defaultNavigationTarget: attribute.defaultNavigationTarget,\n                            type: TableColumnType.DETAIL,\n                        });\n                    } else {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            // tooltip: this.formatCellText(attribute.tooltip, \"\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                            type: TableColumnType.DETAIL,\n                        });\n                    }\n                } else {\n                    rows[i].cells.push({\n                        p13NColumnName: this.createP13NColumnName(attributeKey),\n                        attributeId: attributeKey,\n                        value: this.formatCellText(\"\", initialValueUnicode), // dash\n                        isHighlighted: false,\n                        // tooltip: this.formatCellText(\"\", \"\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                        type: TableColumnType.DETAIL,\n                    });\n                }\n            }\n\n            // related apps cell\n            if (results[i].navigationObjects !== undefined && results[i].navigationObjects.length > 0) {\n                rows[i].cells.push({\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.RELATED_APPS),\n                    value: i18n.getText(\"intents\"),\n                    isHighlighted: false,\n                    // tooltip: i18n.getText(\"intents\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                    navigationObjects: results[i].navigationObjects || [],\n                    type: TableColumnType.RELATED_APPS,\n                });\n            }\n\n            // custom table columns (DSP)\n            // - 'extendTableColumn' deprecated as of version 1.141\n            if (\n                this.model?.config?.extendTableColumn &&\n                typeof this.model?.config?.extendTableColumn[\"assembleCell\"] === \"function\"\n            ) {\n                const data = {\n                    id: results[i].attributesMap[\"id\"] || results[i].attributesMap[\"ID\"],\n                    favorites_user_id:\n                        results[i].attributesMap[\"favorites_user_id\"] ||\n                        results[i].attributesMap[\"FAVORITES_USER_ID\"],\n                };\n                if (typeof data.id !== \"undefined\" && typeof data.favorites_user_id !== \"undefined\") {\n                    // response (see 'responseAttributes') might not contain these attributes\n                    try {\n                        const cell = this.model?.config?.extendTableColumn[\"assembleCell\"](data) as Cell;\n                        cell.p13NColumnName = this.createP13NColumnName(TableColumnType.EXTEND);\n                        cell.value = this.formatCellText(cell.value, initialValueUnicode); // dash\n                        cell.isHighlighted = false;\n                        // cell.tooltip = this.formatCellText(cell.value, initialValueUnicode); // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                        cell.type = TableColumnType.EXTEND;\n                        rows[i].cells.push(cell);\n                    } catch (error) {\n                        this.errorHandler.onError(error);\n                    }\n                }\n            }\n\n            // title description cell\n            if (results[i].titleDescription !== undefined) {\n                rows[i].cells.unshift({\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE_DESCRIPTION),\n                    value: this.formatCellText(results[i]?.titleDescription || \"\", initialValueUnicode), // dash\n                    isHighlighted: results[i]?.isTitleDescriptionHighlighted || false,\n                    //tooltip: // ignored, SearchResultFormatter doesn't provide\n                    type: TableColumnType.TITLE_DESCRIPTION,\n                });\n            }\n\n            // title cell\n            if (results[i].title !== undefined) {\n                rows[i].cells.unshift({\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE),\n                    value: this.formatCellText(results[i]?.title || \"\", initialValueUnicode), // dash\n                    isHighlighted: results[i]?.isTitleHighlighted || false,\n                    //tooltip: // ignored, SearchResultFormatter doesn't provide\n                    // uri: results[i][\"uri\"], // ToDo: obsolete?\n                    titleNavigation: results[i]?.titleNavigation || undefined,\n                    titleIconUrl: results[i]?.titleIconUrl || \"\",\n                    titleInfoIconUrl: results[i]?.titleInfoIconUrl || \"\",\n                    titleInfoIconTooltip: results[i]?.titleInfoIconTooltip || \"\",\n                    type: TableColumnType.TITLE,\n                });\n            }\n        }\n\n        return rows;\n    }\n\n    private isSingleAttributeInDetail(attributeId: string): boolean {\n        try {\n            // TODO: check in result metadata, not datasource metadata\n            const usage = this.model?.getDataSource()?.getAttributeMetadata(attributeId)[\"usage\"];\n            if (usage && usage.Detail && usage.Detail.displayOrder >= 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (error) {\n            this.logger.warning(\"Attribute \" + attributeId + \" is not found in metadata.\", error);\n            return false;\n        }\n    }\n\n    private isGroupAttributeInDetail(attributeId: string): boolean {\n        try {\n            // TODO: check in result metadata, not datasource metadata\n            const usage = this.model?.getDataSource()?.getAttributeGroupMetadata(attributeId)[\"usage\"];\n            if (usage && usage.Detail && usage.Detail.displayOrder >= 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (error) {\n            this.logger.warning(\"Attribute \" + attributeId + \" is not found in group metadata.\", error);\n            return false;\n        }\n    }\n\n    private createP13NColumnName(key: string | TableColumnType): string {\n        // possible key is TableColumnType or attribute id\n        const p13NColumnNamePrefix = \"TABLE-COLUMN-\";\n        return p13NColumnNamePrefix + key;\n    }\n\n    private getAttribute(\n        attributes: Array<FormattedResultItemAttribute>,\n        key: string\n    ): FormattedResultItemAttribute | undefined {\n        for (let i = 0; i < attributes.length; i++) {\n            if (attributes[i].key === key) {\n                return attributes[i];\n            }\n        }\n        return undefined;\n    }\n\n    private getConfigWidth(column: Column): string | undefined {\n        // TODO: refactoring initial column width, provide general column width configuration\n        if (\n            column?.type === TableColumnType.TITLE &&\n            this.getColumnWidthInPixel(this?.model?.config?.titleColumnWidth)\n        ) {\n            return this.getColumnWidthInPixel(this?.model?.config?.titleColumnWidth) + \"px\";\n        }\n        if (\n            // 'extendTableColumn' deprecated as of version 1.141\n            column?.type === TableColumnType.EXTEND &&\n            this.getColumnWidthInPixel(this?.model?.config?.extendTableColumn?.column?.width)\n        ) {\n            return this.getColumnWidthInPixel(this?.model?.config?.extendTableColumn?.column?.width) + \"px\";\n        }\n        return undefined;\n    }\n\n    getColumnWidthInPixel(valueString: string): number | undefined {\n        try {\n            let value = undefined;\n\n            // digits end with px\n            if (/^\\d+(px)/.test(valueString)) {\n                value = parseInt(valueString, 10);\n            }\n\n            // digits end with em or rem\n            if (/^\\d+(rem)/.test(valueString)) {\n                value = new SearchLayoutResponsive()?.convertRemToPixel(parseInt(valueString, 10));\n                value = parseInt(value);\n            }\n\n            if (value === undefined) {\n                return undefined;\n            }\n\n            if (value > 0) {\n                return value;\n            }\n\n            console.warn(\n                \"Invalid Value: Column width should be defined as a positive integer in pixels (px) or rem units. Example: '10rem'.\"\n            );\n            return undefined;\n        } catch (error) {\n            this.logger.warning(\n                \"Invalid Value: Column width should be defined as a positive integer in pixels (px) or rem units. Example: '10rem'.\",\n                error\n            );\n            return undefined;\n        }\n    }\n\n    private formatCellText(value: unknown, defaultValue: string): string {\n        if (typeof value === \"string\" && value.trim().length > 0) {\n            return value;\n        }\n        return defaultValue;\n    }\n}\n"],"mappings":"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","ignoreList":[]}