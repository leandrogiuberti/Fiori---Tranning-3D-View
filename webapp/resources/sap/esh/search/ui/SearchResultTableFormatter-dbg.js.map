{"version":3,"file":"SearchResultTableFormatter-dbg.js","names":["sap","ui","define","__i18n","__SearchResultBaseFormatter","___SearchResultTableColumnType","___uiConstants","merge","SearchLayoutResponsive","Log","_interopRequireDefault","obj","__esModule","default","i18n","SearchResultBaseFormatter","TableColumnType","initialValueUnicode","SearchResultTableFormatter","defaultColumnWidth","logger","getLogger","constructor","model","formatColumns","results","length","preformattedColumns","preformatColumns","config","searchResultTablePersonalization","storedColumns","getTableColumns","Array","isArray","formatInitialColumns","unifyColumns","column","columns","addedAttributeKeys","Set","result","attribute","itemattributes","attributeKey","key","has","isSingleAttributeInDetail","isGroupAttributeInDetail","add","p13NColumnName","createP13NColumnName","attributeId","name","type","DETAIL","visible","push","navigationObjects","undefined","RELATED_APPS","getText","extendTableColumn","EXTEND","titleDescription","TITLE_DESCRIPTION","titleDescriptionLabel","unshift","title","titleColumnName","TITLE","hasText","getDataSource","label","forEach","i","index","tableColumns","initialColumns","sort","a","b","initialColumn","createColumnOfAdaptiveVisibleAndWidth","tempoPreformattedColumns","preformattedColumnMap","Map","map","tempoStoredColumns","storedColumnMap","unifiedColumns","storedColumn","matchedColumn","get","width","preformattedColumn","storedvisible","storedWidth","tempColumn","configWidth","getConfigWidth","FF_resizeResultTableColumns","formatRows","rows","cells","attributes","j","getAttribute","iconUrl","defaultNavigationTarget","value","formatCellText","isHighlighted","whyfound","tooltip","icon","data","id","attributesMap","favorites_user_id","cell","error","errorHandler","onError","isTitleDescriptionHighlighted","isTitleHighlighted","titleNavigation","titleIconUrl","titleInfoIconUrl","titleInfoIconTooltip","usage","getAttributeMetadata","Detail","displayOrder","warning","getAttributeGroupMetadata","p13NColumnNamePrefix","getColumnWidthInPixel","titleColumnWidth","valueString","test","parseInt","convertRemToPixel","console","warn","defaultValue","trim"],"sources":["SearchResultTableFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"./i18n\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { FormattedResultItem, FormattedResultItemAttribute } from \"sap/esh/search/ui/SearchResultFormatter\";\nimport SearchResultBaseFormatter from \"./SearchResultBaseFormatter\";\nimport { TableColumnType } from \"./SearchResultTableColumnType\";\nimport { NavigationTarget } from \"./sinaNexTS/sina/NavigationTarget\";\nimport { initialValueUnicode } from \"./uiConstants\";\nimport merge from \"sap/base/util/merge\";\nimport SearchLayoutResponsive from \"sap/esh/search/ui/controls/SearchLayoutResponsive\";\nimport Log from \"sap/base/Log\";\n\nexport interface Column {\n    p13NColumnName: string; // personalization column ID, === P13NColumn.name\n    attributeId?: string; // detail attribute id\n    type: TableColumnType;\n    name: string; // column UI label\n    index?: number; // index of initial column order\n    width?: string;\n    visible: boolean;\n}\n\nexport interface Cell {\n    p13NColumnName: string; // personalization column ID, === P13NColumn.name\n    attributeId?: string; // column of detail attribute has attribute id\n    value: string; // optional, formerly used for cell of custom column (deprecated exit extendTableColumn), as the same doesn't have value\n    icon?: string;\n    titleIconUrl?: string;\n    titleInfoIconUrl?: string;\n    titleInfoIconTooltip?: string;\n    titleNavigation?: NavigationTarget;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationObjects?: Array<NavigationTarget>;\n    iconFavorite?: string;\n    iconUnfavorite?: string;\n    itemId?: string;\n    isFavorite?: boolean;\n    isHighlighted?: boolean;\n    type?: TableColumnType;\n    tooltip?: string; // preserve SearchResultFormatter defined tooltip\n}\n\nexport interface Row {\n    cells?: Array<Cell>;\n}\n\nexport default class SearchResultTableFormatter extends SearchResultBaseFormatter {\n    defaultColumnWidth: string;\n    private logger = Log.getLogger(\"sap.esh.search.ui.SearchResultTableFormatter\");\n\n    constructor(model: SearchModel) {\n        super(model);\n        this.model = model;\n        this.defaultColumnWidth = \"100%\";\n    }\n\n    /*\n     * ===================================\n     * format columns for table view\n     * ===================================\n     */\n    formatColumns(results: Array<FormattedResultItem>): Array<Column> {\n        if (results?.length === 0) {\n            return [];\n        }\n\n        // format columns with dummy state: ordering, visible, width\n        const preformattedColumns = this.preformatColumns(results);\n\n        if (this.model.config?.searchResultTablePersonalization !== false) {\n            const storedColumns = this.model.getTableColumns(true);\n            if (Array.isArray(storedColumns) === false || storedColumns.length === 0) {\n                return this.formatInitialColumns(preformattedColumns);\n            }\n            return this.unifyColumns(preformattedColumns, storedColumns);\n        } else {\n            return this.formatInitialColumns(preformattedColumns);\n        }\n    }\n\n    private preformatColumns(results: Array<FormattedResultItem>): Array<Column> {\n        let column;\n        const columns = [];\n        const addedAttributeKeys = new Set<string>();\n        const config = this?.model?.config;\n\n        // detail columns\n        // Loop through all results and their itemattributes\n        for (const result of results || []) {\n            for (const attribute of result?.itemattributes || []) {\n                const attributeKey = attribute?.key;\n                if (\n                    !addedAttributeKeys.has(attributeKey) &&\n                    (this.isSingleAttributeInDetail(attributeKey) ||\n                        this.isGroupAttributeInDetail(attributeKey))\n                ) {\n                    // Add the attribute ID to the set to avoid duplicates\n                    addedAttributeKeys.add(attributeKey);\n\n                    column = {\n                        p13NColumnName: this.createP13NColumnName(attributeKey),\n                        attributeId: attributeKey,\n                        name: attribute.name,\n                        type: TableColumnType.DETAIL,\n                        visible: true, // dummy value\n                    };\n                    columns.push(column);\n                }\n            }\n        }\n\n        // related apps column\n        for (const result of results || []) {\n            if (result.navigationObjects !== undefined && result.navigationObjects.length > 0) {\n                column = {\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.RELATED_APPS),\n                    name: i18n.getText(\"intents\"),\n                    type: TableColumnType.RELATED_APPS,\n                    visible: true, // dummy value\n                };\n                columns.push(column);\n                break;\n            }\n        }\n\n        // extend column\n        // - 'extendTableColumn' deprecated as of version 1.141\n\n        if (config?.extendTableColumn?.column) {\n            column = {\n                p13NColumnName: this.createP13NColumnName(TableColumnType.EXTEND),\n                attributeId: config.extendTableColumn.column?.attributeId || \"\", // 'extendTableColumn' deprecated as of version 1.141\n\n                name: config.extendTableColumn.column?.name || \"\", // 'extendTableColumn' deprecated as of version 1.141\n\n                type: TableColumnType.EXTEND,\n                visible: true, // dummy value\n            };\n            columns.push(column);\n        }\n\n        // title description column\n        if (results[0].titleDescription !== undefined) {\n            column = {\n                p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE_DESCRIPTION),\n                name: results[0].titleDescriptionLabel + \" (\" + i18n.getText(\"titleDescription\") + \")\",\n                type: TableColumnType.TITLE_DESCRIPTION,\n                visible: true, // dummy value\n            };\n            columns.unshift(column);\n        }\n\n        // title column\n        if (results[0].title !== undefined) {\n            if (typeof config?.titleColumnName === \"string\" && config?.titleColumnName.length > 0) {\n                column = {\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE),\n                    name: i18n.hasText(config?.titleColumnName)\n                        ? i18n.getText(config?.titleColumnName)\n                        : config?.titleColumnName, // work around. let DSP change titleColumnName to \"Business Name\", and remove this logic\n                    type: TableColumnType.TITLE,\n                    visible: true, // dummy value\n                };\n            } else {\n                column = {\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE),\n                    name: this.model.getDataSource().label,\n                    type: TableColumnType.TITLE,\n                    visible: true, // dummy value\n                };\n            }\n            columns.unshift(column);\n        }\n\n        /*\n            original order of columns:\n            1. title\n            2. title description\n            3. detail attributes\n            4. related apps\n            5. extend column\n        */\n\n        // add index for later reset initial column\n        columns.forEach(function (column, i) {\n            column.index = i;\n        });\n\n        // set width in formatInitialColumns and unifyColumns\n\n        return columns;\n    }\n\n    public formatInitialColumns(tableColumns: Array<Column>): Array<Column> {\n        const columns = merge([], tableColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n        const initialColumns = [];\n\n        // initialize ordering\n        columns.sort((a, b) => {\n            if (a.index < b.index) {\n                return -1;\n            } else if (a.index > b.index) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // initialize width, set dummy visible false\n        for (const column of columns) {\n            const initialColumn = this.createColumnOfAdaptiveVisibleAndWidth(column, false, undefined);\n            initialColumns.push(initialColumn);\n        }\n\n        // initialize visibility\n        if (this.model?.config?.extendTableColumn?.column) {\n            // 'extendTableColumn' deprecated as of version 1.141\n            for (const initialColumn of initialColumns) {\n                initialColumn.visible =\n                    initialColumn.index < 7 || initialColumn.type === TableColumnType.EXTEND;\n            }\n        } else {\n            for (const initialColumn of initialColumns) {\n                initialColumn.visible = initialColumn.index < 6;\n            }\n        }\n\n        return initialColumns;\n    }\n\n    private unifyColumns(preformattedColumns: Array<Column>, storedColumns: Array<Column>): Array<Column> {\n        // create map for easy search\n        const tempoPreformattedColumns = merge([], preformattedColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n        const preformattedColumnMap = new Map(\n            tempoPreformattedColumns.map((column) => [column.p13NColumnName, column])\n        );\n\n        const tempoStoredColumns = merge([], storedColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n        const storedColumnMap = new Map(tempoStoredColumns.map((column) => [column.p13NColumnName, column]));\n\n        const unifiedColumns = [];\n\n        /*\n        case 1: column in preformattedColumns, column in persoStateColumns     -> \n                unified column p13NColumnName   = preformattedColumn p13NColumnName\n                unified column attributeId      = preformattedColumn attributeId\n                unified column type             = preformattedColumn type\n                unified column name             = preformattedColumn name\n                unified column index            = preformattedColumn index (IMPORTANT!)\n                unified column width            = persoStateColumn width \n                unified column visible          = persoStateColumn visible\n                unified column ordering         = persoStateColumn ordering\n    \n        case 2: column in preformattedColumns, column NOT in persoStateColumns  -> \n                unified column p13NColumnName   = preformattedColumn p13NColumnName\n                unified column attributeId      = preformattedColumn attributeId\n                unified column type             = preformattedColumn type\n                unified column name             = preformattedColumn name\n                unified column index            = preformattedColumn index (IMPORTANT!)\n                unified column width            = dummy value\n                unified column visible          = true\n                unified column ordering         = ordering at end\n\n        case 3: column NOT in preformattedColumns, column in persoStateColumns  -> \n                unified column                  = don't consider\n        */\n\n        // case 1\n        // loop in storedColumns (NOT preformattedColumns) guarantees unifiedColumns having stored column ordering.\n        for (const storedColumn of storedColumns) {\n            const matchedColumn = preformattedColumnMap.get(storedColumn.p13NColumnName);\n            if (matchedColumn) {\n                unifiedColumns.push(\n                    this.createColumnOfAdaptiveVisibleAndWidth(\n                        matchedColumn,\n                        storedColumn.visible,\n                        storedColumn.width\n                    )\n                );\n            }\n        }\n\n        // all preformattedColumns found in storage\n        if (unifiedColumns.length === preformattedColumns.length) {\n            return unifiedColumns;\n        }\n\n        // case 2\n        for (const preformattedColumn of preformattedColumns) {\n            const matchedColumn = storedColumnMap.get(preformattedColumn.p13NColumnName);\n            if (!matchedColumn) {\n                unifiedColumns.push(\n                    this.createColumnOfAdaptiveVisibleAndWidth(preformattedColumn, true, undefined)\n                );\n            }\n        }\n        return unifiedColumns;\n    }\n\n    private createColumnOfAdaptiveVisibleAndWidth(\n        column: Column,\n        storedvisible: boolean,\n        storedWidth: string\n    ): Column {\n        const tempColumn = column;\n        const configWidth = this.getConfigWidth(column);\n\n        tempColumn.visible = storedvisible || false;\n\n        if (this.model?.config?.FF_resizeResultTableColumns === true) {\n            // table resizable\n            tempColumn.width = storedWidth || configWidth || this.defaultColumnWidth; // set width by configured width or default width\n        } else {\n            // table NOT resizable\n            if (configWidth === undefined) {\n                delete tempColumn.width; // delete width\n            } else {\n                tempColumn.width = configWidth; // set configured width\n            }\n        }\n\n        return tempColumn;\n    }\n\n    /*\n     * ===================================\n     * format rows with cells for table view\n     * ===================================\n     */\n    formatRows(results: Array<FormattedResultItem>, columns: Array<Column>): Array<Row> {\n        if (results?.length === 0) {\n            return [];\n        }\n\n        if (columns?.length === 0) {\n            return [];\n        }\n\n        // format rows\n        const rows: Array<Row> = [];\n        for (let i = 0; i < results.length; i++) {\n            rows[i] = { cells: [] };\n            // detail cells\n            const attributes = results[i].itemattributes;\n            for (let j = 0; j < columns.length; j++) {\n                if (columns[j].type !== TableColumnType.DETAIL) {\n                    continue;\n                }\n                const attributeKey = columns[j].attributeId;\n                const attribute = this.getAttribute(attributes, attributeKey);\n                if (attribute !== undefined) {\n                    if (attribute.iconUrl && attribute.defaultNavigationTarget) {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            tooltip: this.formatCellText(attribute.tooltip, \"\"), // preserve SearchResultFormatter defined tooltip (hierarchical attribute of DSP)\n                            icon: attribute.iconUrl,\n                            defaultNavigationTarget: attribute.defaultNavigationTarget,\n                            type: TableColumnType.DETAIL,\n                        });\n                    } else if (attribute.iconUrl) {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            // tooltip: this.formatCellText(attribute.tooltip, \"\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                            icon: attribute.iconUrl,\n                            type: TableColumnType.DETAIL,\n                        });\n                    } else if (attribute.defaultNavigationTarget) {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            tooltip: this.formatCellText(attribute.tooltip, \"\"), // preserve SearchResultFormatter defined tooltip (hierarchical attribute of DSP)\n                            defaultNavigationTarget: attribute.defaultNavigationTarget,\n                            type: TableColumnType.DETAIL,\n                        });\n                    } else {\n                        rows[i].cells.push({\n                            p13NColumnName: this.createP13NColumnName(attributeKey),\n                            attributeId: attributeKey,\n                            value: this.formatCellText(attribute.value, initialValueUnicode), // dash\n                            isHighlighted: attribute.whyfound || false,\n                            // tooltip: this.formatCellText(attribute.tooltip, \"\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                            type: TableColumnType.DETAIL,\n                        });\n                    }\n                } else {\n                    rows[i].cells.push({\n                        p13NColumnName: this.createP13NColumnName(attributeKey),\n                        attributeId: attributeKey,\n                        value: this.formatCellText(\"\", initialValueUnicode), // dash\n                        isHighlighted: false,\n                        // tooltip: this.formatCellText(\"\", \"\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                        type: TableColumnType.DETAIL,\n                    });\n                }\n            }\n\n            // related apps cell\n            if (results[i].navigationObjects !== undefined && results[i].navigationObjects.length > 0) {\n                rows[i].cells.push({\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.RELATED_APPS),\n                    value: i18n.getText(\"intents\"),\n                    isHighlighted: false,\n                    // tooltip: i18n.getText(\"intents\"), // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                    navigationObjects: results[i].navigationObjects || [],\n                    type: TableColumnType.RELATED_APPS,\n                });\n            }\n\n            // custom table columns (DSP)\n            // - 'extendTableColumn' deprecated as of version 1.141\n            if (\n                this.model?.config?.extendTableColumn &&\n                typeof this.model?.config?.extendTableColumn[\"assembleCell\"] === \"function\"\n            ) {\n                const data = {\n                    id: results[i].attributesMap[\"id\"] || results[i].attributesMap[\"ID\"],\n                    favorites_user_id:\n                        results[i].attributesMap[\"favorites_user_id\"] ||\n                        results[i].attributesMap[\"FAVORITES_USER_ID\"],\n                };\n                if (typeof data.id !== \"undefined\" && typeof data.favorites_user_id !== \"undefined\") {\n                    // response (see 'responseAttributes') might not contain these attributes\n                    try {\n                        const cell = this.model?.config?.extendTableColumn[\"assembleCell\"](data) as Cell;\n                        cell.p13NColumnName = this.createP13NColumnName(TableColumnType.EXTEND);\n                        cell.value = this.formatCellText(cell.value, initialValueUnicode); // dash\n                        cell.isHighlighted = false;\n                        // cell.tooltip = this.formatCellText(cell.value, initialValueUnicode); // ignored, UI sets tooltip by setupEllipsisAndTooltip\n                        cell.type = TableColumnType.EXTEND;\n                        rows[i].cells.push(cell);\n                    } catch (error) {\n                        this.errorHandler.onError(error);\n                    }\n                }\n            }\n\n            // title description cell\n            if (results[i].titleDescription !== undefined) {\n                rows[i].cells.unshift({\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE_DESCRIPTION),\n                    value: this.formatCellText(results[i]?.titleDescription || \"\", initialValueUnicode), // dash\n                    isHighlighted: results[i]?.isTitleDescriptionHighlighted || false,\n                    //tooltip: // ignored, SearchResultFormatter doesn't provide\n                    type: TableColumnType.TITLE_DESCRIPTION,\n                });\n            }\n\n            // title cell\n            if (results[i].title !== undefined) {\n                rows[i].cells.unshift({\n                    p13NColumnName: this.createP13NColumnName(TableColumnType.TITLE),\n                    value: this.formatCellText(results[i]?.title || \"\", initialValueUnicode), // dash\n                    isHighlighted: results[i]?.isTitleHighlighted || false,\n                    //tooltip: // ignored, SearchResultFormatter doesn't provide\n                    // uri: results[i][\"uri\"], // ToDo: obsolete?\n                    titleNavigation: results[i]?.titleNavigation || undefined,\n                    titleIconUrl: results[i]?.titleIconUrl || \"\",\n                    titleInfoIconUrl: results[i]?.titleInfoIconUrl || \"\",\n                    titleInfoIconTooltip: results[i]?.titleInfoIconTooltip || \"\",\n                    type: TableColumnType.TITLE,\n                });\n            }\n        }\n\n        return rows;\n    }\n\n    private isSingleAttributeInDetail(attributeId: string): boolean {\n        try {\n            // TODO: check in result metadata, not datasource metadata\n            const usage = this.model?.getDataSource()?.getAttributeMetadata(attributeId)[\"usage\"];\n            if (usage && usage.Detail && usage.Detail.displayOrder >= 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (error) {\n            this.logger.warning(\"Attribute \" + attributeId + \" is not found in metadata.\", error);\n            return false;\n        }\n    }\n\n    private isGroupAttributeInDetail(attributeId: string): boolean {\n        try {\n            // TODO: check in result metadata, not datasource metadata\n            const usage = this.model?.getDataSource()?.getAttributeGroupMetadata(attributeId)[\"usage\"];\n            if (usage && usage.Detail && usage.Detail.displayOrder >= 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (error) {\n            this.logger.warning(\"Attribute \" + attributeId + \" is not found in group metadata.\", error);\n            return false;\n        }\n    }\n\n    private createP13NColumnName(key: string | TableColumnType): string {\n        // possible key is TableColumnType or attribute id\n        const p13NColumnNamePrefix = \"TABLE-COLUMN-\";\n        return p13NColumnNamePrefix + key;\n    }\n\n    private getAttribute(\n        attributes: Array<FormattedResultItemAttribute>,\n        key: string\n    ): FormattedResultItemAttribute | undefined {\n        for (let i = 0; i < attributes.length; i++) {\n            if (attributes[i].key === key) {\n                return attributes[i];\n            }\n        }\n        return undefined;\n    }\n\n    private getConfigWidth(column: Column): string | undefined {\n        // TODO: refactoring initial column width, provide general column width configuration\n        if (\n            column?.type === TableColumnType.TITLE &&\n            this.getColumnWidthInPixel(this?.model?.config?.titleColumnWidth)\n        ) {\n            return this.getColumnWidthInPixel(this?.model?.config?.titleColumnWidth) + \"px\";\n        }\n        if (\n            // 'extendTableColumn' deprecated as of version 1.141\n            column?.type === TableColumnType.EXTEND &&\n            this.getColumnWidthInPixel(this?.model?.config?.extendTableColumn?.column?.width)\n        ) {\n            return this.getColumnWidthInPixel(this?.model?.config?.extendTableColumn?.column?.width) + \"px\";\n        }\n        return undefined;\n    }\n\n    getColumnWidthInPixel(valueString: string): number | undefined {\n        try {\n            let value = undefined;\n\n            // digits end with px\n            if (/^\\d+(px)/.test(valueString)) {\n                value = parseInt(valueString, 10);\n            }\n\n            // digits end with em or rem\n            if (/^\\d+(rem)/.test(valueString)) {\n                value = new SearchLayoutResponsive()?.convertRemToPixel(parseInt(valueString, 10));\n                value = parseInt(value);\n            }\n\n            if (value === undefined) {\n                return undefined;\n            }\n\n            if (value > 0) {\n                return value;\n            }\n\n            console.warn(\n                \"Invalid Value: Column width should be defined as a positive integer in pixels (px) or rem units. Example: '10rem'.\"\n            );\n            return undefined;\n        } catch (error) {\n            this.logger.warning(\n                \"Invalid Value: Column width should be defined as a positive integer in pixels (px) or rem units. Example: '10rem'.\",\n                error\n            );\n            return undefined;\n        }\n    }\n\n    private formatCellText(value: unknown, defaultValue: string): string {\n        if (typeof value === \"string\" && value.trim().length > 0) {\n            return value;\n        }\n        return defaultValue;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,oMAAAC,MAAA,EAAAC,2BAAA,EAAAC,8BAAA,EAAAC,cAAA,EAAAC,KAAA,EAAAC,sBAAA,EAAAC,GAAA;EAAA;;EAAA,SAAAC,uBAAAC,GAAA;IAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,CAAAE,OAAA,mBAAAF,GAAA,CAAAE,OAAA,GAAAF,GAAA;EAAA;EAAA,MAKOG,IAAI,GAAAJ,sBAAA,CAAAP,MAAA;EAAA,MAGJY,yBAAyB,GAAAL,sBAAA,CAAAN,2BAAA;EAAA,MACvBY,eAAe,GAAAX,8BAAA;EAAA,MAEfY,mBAAmB,GAAAX,cAAA;EAuCb,MAAMY,0BAA0B,SAASH,yBAAyB,CAAC;IAC9EI,kBAAkB;IACVC,MAAM,GAAGX,GAAG,CAACY,SAAS,CAAC,8CAA8C,CAAC;IAE9EC,WAAWA,CAACC,KAAkB,EAAE;MAC5B,KAAK,CAACA,KAAK,CAAC;MACZ,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACJ,kBAAkB,GAAG,MAAM;IACpC;;IAEA;AACJ;AACA;AACA;AACA;IACIK,aAAaA,CAACC,OAAmC,EAAiB;MAC9D,IAAIA,OAAO,EAAEC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,EAAE;MACb;;MAEA;MACA,MAAMC,mBAAmB,GAAG,IAAI,CAACC,gBAAgB,CAACH,OAAO,CAAC;MAE1D,IAAI,IAAI,CAACF,KAAK,CAACM,MAAM,EAAEC,gCAAgC,KAAK,KAAK,EAAE;QAC/D,MAAMC,aAAa,GAAG,IAAI,CAACR,KAAK,CAACS,eAAe,CAAC,IAAI,CAAC;QACtD,IAAIC,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,KAAK,KAAK,IAAIA,aAAa,CAACL,MAAM,KAAK,CAAC,EAAE;UACtE,OAAO,IAAI,CAACS,oBAAoB,CAACR,mBAAmB,CAAC;QACzD;QACA,OAAO,IAAI,CAACS,YAAY,CAACT,mBAAmB,EAAEI,aAAa,CAAC;MAChE,CAAC,MAAM;QACH,OAAO,IAAI,CAACI,oBAAoB,CAACR,mBAAmB,CAAC;MACzD;IACJ;IAEQC,gBAAgBA,CAACH,OAAmC,EAAiB;MACzE,IAAIY,MAAM;MACV,MAAMC,OAAO,GAAG,EAAE;MAClB,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAS,CAAC;MAC5C,MAAMX,MAAM,GAAG,IAAI,EAAEN,KAAK,EAAEM,MAAM;;MAElC;MACA;MACA,KAAK,MAAMY,MAAM,IAAIhB,OAAO,IAAI,EAAE,EAAE;QAChC,KAAK,MAAMiB,SAAS,IAAID,MAAM,EAAEE,cAAc,IAAI,EAAE,EAAE;UAClD,MAAMC,YAAY,GAAGF,SAAS,EAAEG,GAAG;UACnC,IACI,CAACN,kBAAkB,CAACO,GAAG,CAACF,YAAY,CAAC,KACpC,IAAI,CAACG,yBAAyB,CAACH,YAAY,CAAC,IACzC,IAAI,CAACI,wBAAwB,CAACJ,YAAY,CAAC,CAAC,EAClD;YACE;YACAL,kBAAkB,CAACU,GAAG,CAACL,YAAY,CAAC;YAEpCP,MAAM,GAAG;cACLa,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACP,YAAY,CAAC;cACvDQ,WAAW,EAAER,YAAY;cACzBS,IAAI,EAAEX,SAAS,CAACW,IAAI;cACpBC,IAAI,EAAEtC,eAAe,CAACuC,MAAM;cAC5BC,OAAO,EAAE,IAAI,CAAE;YACnB,CAAC;YACDlB,OAAO,CAACmB,IAAI,CAACpB,MAAM,CAAC;UACxB;QACJ;MACJ;;MAEA;MACA,KAAK,MAAMI,MAAM,IAAIhB,OAAO,IAAI,EAAE,EAAE;QAChC,IAAIgB,MAAM,CAACiB,iBAAiB,KAAKC,SAAS,IAAIlB,MAAM,CAACiB,iBAAiB,CAAChC,MAAM,GAAG,CAAC,EAAE;UAC/EW,MAAM,GAAG;YACLa,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAAC4C,YAAY,CAAC;YACvEP,IAAI,EAAEvC,IAAI,CAAC+C,OAAO,CAAC,SAAS,CAAC;YAC7BP,IAAI,EAAEtC,eAAe,CAAC4C,YAAY;YAClCJ,OAAO,EAAE,IAAI,CAAE;UACnB,CAAC;UACDlB,OAAO,CAACmB,IAAI,CAACpB,MAAM,CAAC;UACpB;QACJ;MACJ;;MAEA;MACA;;MAEA,IAAIR,MAAM,EAAEiC,iBAAiB,EAAEzB,MAAM,EAAE;QACnCA,MAAM,GAAG;UACLa,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAAC+C,MAAM,CAAC;UACjEX,WAAW,EAAEvB,MAAM,CAACiC,iBAAiB,CAACzB,MAAM,EAAEe,WAAW,IAAI,EAAE;UAAE;;UAEjEC,IAAI,EAAExB,MAAM,CAACiC,iBAAiB,CAACzB,MAAM,EAAEgB,IAAI,IAAI,EAAE;UAAE;;UAEnDC,IAAI,EAAEtC,eAAe,CAAC+C,MAAM;UAC5BP,OAAO,EAAE,IAAI,CAAE;QACnB,CAAC;QACDlB,OAAO,CAACmB,IAAI,CAACpB,MAAM,CAAC;MACxB;;MAEA;MACA,IAAIZ,OAAO,CAAC,CAAC,CAAC,CAACuC,gBAAgB,KAAKL,SAAS,EAAE;QAC3CtB,MAAM,GAAG;UACLa,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAACiD,iBAAiB,CAAC;UAC5EZ,IAAI,EAAE5B,OAAO,CAAC,CAAC,CAAC,CAACyC,qBAAqB,GAAG,IAAI,GAAGpD,IAAI,CAAC+C,OAAO,CAAC,kBAAkB,CAAC,GAAG,GAAG;UACtFP,IAAI,EAAEtC,eAAe,CAACiD,iBAAiB;UACvCT,OAAO,EAAE,IAAI,CAAE;QACnB,CAAC;QACDlB,OAAO,CAAC6B,OAAO,CAAC9B,MAAM,CAAC;MAC3B;;MAEA;MACA,IAAIZ,OAAO,CAAC,CAAC,CAAC,CAAC2C,KAAK,KAAKT,SAAS,EAAE;QAChC,IAAI,OAAO9B,MAAM,EAAEwC,eAAe,KAAK,QAAQ,IAAIxC,MAAM,EAAEwC,eAAe,CAAC3C,MAAM,GAAG,CAAC,EAAE;UACnFW,MAAM,GAAG;YACLa,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAACsD,KAAK,CAAC;YAChEjB,IAAI,EAAEvC,IAAI,CAACyD,OAAO,CAAC1C,MAAM,EAAEwC,eAAe,CAAC,GACrCvD,IAAI,CAAC+C,OAAO,CAAChC,MAAM,EAAEwC,eAAe,CAAC,GACrCxC,MAAM,EAAEwC,eAAe;YAAE;YAC/Bf,IAAI,EAAEtC,eAAe,CAACsD,KAAK;YAC3Bd,OAAO,EAAE,IAAI,CAAE;UACnB,CAAC;QACL,CAAC,MAAM;UACHnB,MAAM,GAAG;YACLa,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAACsD,KAAK,CAAC;YAChEjB,IAAI,EAAE,IAAI,CAAC9B,KAAK,CAACiD,aAAa,CAAC,CAAC,CAACC,KAAK;YACtCnB,IAAI,EAAEtC,eAAe,CAACsD,KAAK;YAC3Bd,OAAO,EAAE,IAAI,CAAE;UACnB,CAAC;QACL;QACAlB,OAAO,CAAC6B,OAAO,CAAC9B,MAAM,CAAC;MAC3B;;MAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;MAEQ;MACAC,OAAO,CAACoC,OAAO,CAAC,UAAUrC,MAAM,EAAEsC,CAAC,EAAE;QACjCtC,MAAM,CAACuC,KAAK,GAAGD,CAAC;MACpB,CAAC,CAAC;;MAEF;;MAEA,OAAOrC,OAAO;IAClB;IAEOH,oBAAoBA,CAAC0C,YAA2B,EAAiB;MACpE,MAAMvC,OAAO,GAAG/B,KAAK,CAAC,EAAE,EAAEsE,YAAY,CAAkB,CAAC,CAAC;MAC1D,MAAMC,cAAc,GAAG,EAAE;;MAEzB;MACAxC,OAAO,CAACyC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACnB,IAAID,CAAC,CAACJ,KAAK,GAAGK,CAAC,CAACL,KAAK,EAAE;UACnB,OAAO,CAAC,CAAC;QACb,CAAC,MAAM,IAAII,CAAC,CAACJ,KAAK,GAAGK,CAAC,CAACL,KAAK,EAAE;UAC1B,OAAO,CAAC;QACZ,CAAC,MAAM;UACH,OAAO,CAAC;QACZ;MACJ,CAAC,CAAC;;MAEF;MACA,KAAK,MAAMvC,MAAM,IAAIC,OAAO,EAAE;QAC1B,MAAM4C,aAAa,GAAG,IAAI,CAACC,qCAAqC,CAAC9C,MAAM,EAAE,KAAK,EAAEsB,SAAS,CAAC;QAC1FmB,cAAc,CAACrB,IAAI,CAACyB,aAAa,CAAC;MACtC;;MAEA;MACA,IAAI,IAAI,CAAC3D,KAAK,EAAEM,MAAM,EAAEiC,iBAAiB,EAAEzB,MAAM,EAAE;QAC/C;QACA,KAAK,MAAM6C,aAAa,IAAIJ,cAAc,EAAE;UACxCI,aAAa,CAAC1B,OAAO,GACjB0B,aAAa,CAACN,KAAK,GAAG,CAAC,IAAIM,aAAa,CAAC5B,IAAI,KAAKtC,eAAe,CAAC+C,MAAM;QAChF;MACJ,CAAC,MAAM;QACH,KAAK,MAAMmB,aAAa,IAAIJ,cAAc,EAAE;UACxCI,aAAa,CAAC1B,OAAO,GAAG0B,aAAa,CAACN,KAAK,GAAG,CAAC;QACnD;MACJ;MAEA,OAAOE,cAAc;IACzB;IAEQ1C,YAAYA,CAACT,mBAAkC,EAAEI,aAA4B,EAAiB;MAClG;MACA,MAAMqD,wBAAwB,GAAG7E,KAAK,CAAC,EAAE,EAAEoB,mBAAmB,CAAkB,CAAC,CAAC;MAClF,MAAM0D,qBAAqB,GAAG,IAAIC,GAAG,CACjCF,wBAAwB,CAACG,GAAG,CAAElD,MAAM,IAAK,CAACA,MAAM,CAACa,cAAc,EAAEb,MAAM,CAAC,CAC5E,CAAC;MAED,MAAMmD,kBAAkB,GAAGjF,KAAK,CAAC,EAAE,EAAEwB,aAAa,CAAkB,CAAC,CAAC;MACtE,MAAM0D,eAAe,GAAG,IAAIH,GAAG,CAACE,kBAAkB,CAACD,GAAG,CAAElD,MAAM,IAAK,CAACA,MAAM,CAACa,cAAc,EAAEb,MAAM,CAAC,CAAC,CAAC;MAEpG,MAAMqD,cAAc,GAAG,EAAE;;MAEzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAIQ;MACA;MACA,KAAK,MAAMC,YAAY,IAAI5D,aAAa,EAAE;QACtC,MAAM6D,aAAa,GAAGP,qBAAqB,CAACQ,GAAG,CAACF,YAAY,CAACzC,cAAc,CAAC;QAC5E,IAAI0C,aAAa,EAAE;UACfF,cAAc,CAACjC,IAAI,CACf,IAAI,CAAC0B,qCAAqC,CACtCS,aAAa,EACbD,YAAY,CAACnC,OAAO,EACpBmC,YAAY,CAACG,KACjB,CACJ,CAAC;QACL;MACJ;;MAEA;MACA,IAAIJ,cAAc,CAAChE,MAAM,KAAKC,mBAAmB,CAACD,MAAM,EAAE;QACtD,OAAOgE,cAAc;MACzB;;MAEA;MACA,KAAK,MAAMK,kBAAkB,IAAIpE,mBAAmB,EAAE;QAClD,MAAMiE,aAAa,GAAGH,eAAe,CAACI,GAAG,CAACE,kBAAkB,CAAC7C,cAAc,CAAC;QAC5E,IAAI,CAAC0C,aAAa,EAAE;UAChBF,cAAc,CAACjC,IAAI,CACf,IAAI,CAAC0B,qCAAqC,CAACY,kBAAkB,EAAE,IAAI,EAAEpC,SAAS,CAClF,CAAC;QACL;MACJ;MACA,OAAO+B,cAAc;IACzB;IAEQP,qCAAqCA,CACzC9C,MAAc,EACd2D,aAAsB,EACtBC,WAAmB,EACb;MACN,MAAMC,UAAU,GAAG7D,MAAM;MACzB,MAAM8D,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC/D,MAAM,CAAC;MAE/C6D,UAAU,CAAC1C,OAAO,GAAGwC,aAAa,IAAI,KAAK;MAE3C,IAAI,IAAI,CAACzE,KAAK,EAAEM,MAAM,EAAEwE,2BAA2B,KAAK,IAAI,EAAE;QAC1D;QACAH,UAAU,CAACJ,KAAK,GAAGG,WAAW,IAAIE,WAAW,IAAI,IAAI,CAAChF,kBAAkB,CAAC,CAAC;MAC9E,CAAC,MAAM;QACH;QACA,IAAIgF,WAAW,KAAKxC,SAAS,EAAE;UAC3B,OAAOuC,UAAU,CAACJ,KAAK,CAAC,CAAC;QAC7B,CAAC,MAAM;UACHI,UAAU,CAACJ,KAAK,GAAGK,WAAW,CAAC,CAAC;QACpC;MACJ;MAEA,OAAOD,UAAU;IACrB;;IAEA;AACJ;AACA;AACA;AACA;IACII,UAAUA,CAAC7E,OAAmC,EAAEa,OAAsB,EAAc;MAChF,IAAIb,OAAO,EAAEC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,EAAE;MACb;MAEA,IAAIY,OAAO,EAAEZ,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,EAAE;MACb;;MAEA;MACA,MAAM6E,IAAgB,GAAG,EAAE;MAC3B,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,OAAO,CAACC,MAAM,EAAEiD,CAAC,EAAE,EAAE;QACrC4B,IAAI,CAAC5B,CAAC,CAAC,GAAG;UAAE6B,KAAK,EAAE;QAAG,CAAC;QACvB;QACA,MAAMC,UAAU,GAAGhF,OAAO,CAACkD,CAAC,CAAC,CAAChC,cAAc;QAC5C,KAAK,IAAI+D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,OAAO,CAACZ,MAAM,EAAEgF,CAAC,EAAE,EAAE;UACrC,IAAIpE,OAAO,CAACoE,CAAC,CAAC,CAACpD,IAAI,KAAKtC,eAAe,CAACuC,MAAM,EAAE;YAC5C;UACJ;UACA,MAAMX,YAAY,GAAGN,OAAO,CAACoE,CAAC,CAAC,CAACtD,WAAW;UAC3C,MAAMV,SAAS,GAAG,IAAI,CAACiE,YAAY,CAACF,UAAU,EAAE7D,YAAY,CAAC;UAC7D,IAAIF,SAAS,KAAKiB,SAAS,EAAE;YACzB,IAAIjB,SAAS,CAACkE,OAAO,IAAIlE,SAAS,CAACmE,uBAAuB,EAAE;cACxDN,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC;gBACfP,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACP,YAAY,CAAC;gBACvDQ,WAAW,EAAER,YAAY;gBACzBkE,KAAK,EAAE,IAAI,CAACC,cAAc,CAACrE,SAAS,CAACoE,KAAK,EAAE7F,mBAAmB,CAAC;gBAAE;gBAClE+F,aAAa,EAAEtE,SAAS,CAACuE,QAAQ,IAAI,KAAK;gBAC1CC,OAAO,EAAE,IAAI,CAACH,cAAc,CAACrE,SAAS,CAACwE,OAAO,EAAE,EAAE,CAAC;gBAAE;gBACrDC,IAAI,EAAEzE,SAAS,CAACkE,OAAO;gBACvBC,uBAAuB,EAAEnE,SAAS,CAACmE,uBAAuB;gBAC1DvD,IAAI,EAAEtC,eAAe,CAACuC;cAC1B,CAAC,CAAC;YACN,CAAC,MAAM,IAAIb,SAAS,CAACkE,OAAO,EAAE;cAC1BL,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC;gBACfP,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACP,YAAY,CAAC;gBACvDQ,WAAW,EAAER,YAAY;gBACzBkE,KAAK,EAAE,IAAI,CAACC,cAAc,CAACrE,SAAS,CAACoE,KAAK,EAAE7F,mBAAmB,CAAC;gBAAE;gBAClE+F,aAAa,EAAEtE,SAAS,CAACuE,QAAQ,IAAI,KAAK;gBAC1C;gBACAE,IAAI,EAAEzE,SAAS,CAACkE,OAAO;gBACvBtD,IAAI,EAAEtC,eAAe,CAACuC;cAC1B,CAAC,CAAC;YACN,CAAC,MAAM,IAAIb,SAAS,CAACmE,uBAAuB,EAAE;cAC1CN,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC;gBACfP,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACP,YAAY,CAAC;gBACvDQ,WAAW,EAAER,YAAY;gBACzBkE,KAAK,EAAE,IAAI,CAACC,cAAc,CAACrE,SAAS,CAACoE,KAAK,EAAE7F,mBAAmB,CAAC;gBAAE;gBAClE+F,aAAa,EAAEtE,SAAS,CAACuE,QAAQ,IAAI,KAAK;gBAC1CC,OAAO,EAAE,IAAI,CAACH,cAAc,CAACrE,SAAS,CAACwE,OAAO,EAAE,EAAE,CAAC;gBAAE;gBACrDL,uBAAuB,EAAEnE,SAAS,CAACmE,uBAAuB;gBAC1DvD,IAAI,EAAEtC,eAAe,CAACuC;cAC1B,CAAC,CAAC;YACN,CAAC,MAAM;cACHgD,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC;gBACfP,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACP,YAAY,CAAC;gBACvDQ,WAAW,EAAER,YAAY;gBACzBkE,KAAK,EAAE,IAAI,CAACC,cAAc,CAACrE,SAAS,CAACoE,KAAK,EAAE7F,mBAAmB,CAAC;gBAAE;gBAClE+F,aAAa,EAAEtE,SAAS,CAACuE,QAAQ,IAAI,KAAK;gBAC1C;gBACA3D,IAAI,EAAEtC,eAAe,CAACuC;cAC1B,CAAC,CAAC;YACN;UACJ,CAAC,MAAM;YACHgD,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC;cACfP,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACP,YAAY,CAAC;cACvDQ,WAAW,EAAER,YAAY;cACzBkE,KAAK,EAAE,IAAI,CAACC,cAAc,CAAC,EAAE,EAAE9F,mBAAmB,CAAC;cAAE;cACrD+F,aAAa,EAAE,KAAK;cACpB;cACA1D,IAAI,EAAEtC,eAAe,CAACuC;YAC1B,CAAC,CAAC;UACN;QACJ;;QAEA;QACA,IAAI9B,OAAO,CAACkD,CAAC,CAAC,CAACjB,iBAAiB,KAAKC,SAAS,IAAIlC,OAAO,CAACkD,CAAC,CAAC,CAACjB,iBAAiB,CAAChC,MAAM,GAAG,CAAC,EAAE;UACvF6E,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC;YACfP,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAAC4C,YAAY,CAAC;YACvEkD,KAAK,EAAEhG,IAAI,CAAC+C,OAAO,CAAC,SAAS,CAAC;YAC9BmD,aAAa,EAAE,KAAK;YACpB;YACAtD,iBAAiB,EAAEjC,OAAO,CAACkD,CAAC,CAAC,CAACjB,iBAAiB,IAAI,EAAE;YACrDJ,IAAI,EAAEtC,eAAe,CAAC4C;UAC1B,CAAC,CAAC;QACN;;QAEA;QACA;QACA,IACI,IAAI,CAACrC,KAAK,EAAEM,MAAM,EAAEiC,iBAAiB,IACrC,OAAO,IAAI,CAACvC,KAAK,EAAEM,MAAM,EAAEiC,iBAAiB,CAAC,cAAc,CAAC,KAAK,UAAU,EAC7E;UACE,MAAMsD,IAAI,GAAG;YACTC,EAAE,EAAE5F,OAAO,CAACkD,CAAC,CAAC,CAAC2C,aAAa,CAAC,IAAI,CAAC,IAAI7F,OAAO,CAACkD,CAAC,CAAC,CAAC2C,aAAa,CAAC,IAAI,CAAC;YACpEC,iBAAiB,EACb9F,OAAO,CAACkD,CAAC,CAAC,CAAC2C,aAAa,CAAC,mBAAmB,CAAC,IAC7C7F,OAAO,CAACkD,CAAC,CAAC,CAAC2C,aAAa,CAAC,mBAAmB;UACpD,CAAC;UACD,IAAI,OAAOF,IAAI,CAACC,EAAE,KAAK,WAAW,IAAI,OAAOD,IAAI,CAACG,iBAAiB,KAAK,WAAW,EAAE;YACjF;YACA,IAAI;cACA,MAAMC,IAAI,GAAG,IAAI,CAACjG,KAAK,EAAEM,MAAM,EAAEiC,iBAAiB,CAAC,cAAc,CAAC,CAACsD,IAAI,CAAS;cAChFI,IAAI,CAACtE,cAAc,GAAG,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAAC+C,MAAM,CAAC;cACvEyD,IAAI,CAACV,KAAK,GAAG,IAAI,CAACC,cAAc,CAACS,IAAI,CAACV,KAAK,EAAE7F,mBAAmB,CAAC,CAAC,CAAC;cACnEuG,IAAI,CAACR,aAAa,GAAG,KAAK;cAC1B;cACAQ,IAAI,CAAClE,IAAI,GAAGtC,eAAe,CAAC+C,MAAM;cAClCwC,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAAC/C,IAAI,CAAC+D,IAAI,CAAC;YAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;cACZ,IAAI,CAACC,YAAY,CAACC,OAAO,CAACF,KAAK,CAAC;YACpC;UACJ;QACJ;;QAEA;QACA,IAAIhG,OAAO,CAACkD,CAAC,CAAC,CAACX,gBAAgB,KAAKL,SAAS,EAAE;UAC3C4C,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAACrC,OAAO,CAAC;YAClBjB,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAACiD,iBAAiB,CAAC;YAC5E6C,KAAK,EAAE,IAAI,CAACC,cAAc,CAACtF,OAAO,CAACkD,CAAC,CAAC,EAAEX,gBAAgB,IAAI,EAAE,EAAE/C,mBAAmB,CAAC;YAAE;YACrF+F,aAAa,EAAEvF,OAAO,CAACkD,CAAC,CAAC,EAAEiD,6BAA6B,IAAI,KAAK;YACjE;YACAtE,IAAI,EAAEtC,eAAe,CAACiD;UAC1B,CAAC,CAAC;QACN;;QAEA;QACA,IAAIxC,OAAO,CAACkD,CAAC,CAAC,CAACP,KAAK,KAAKT,SAAS,EAAE;UAChC4C,IAAI,CAAC5B,CAAC,CAAC,CAAC6B,KAAK,CAACrC,OAAO,CAAC;YAClBjB,cAAc,EAAE,IAAI,CAACC,oBAAoB,CAACnC,eAAe,CAACsD,KAAK,CAAC;YAChEwC,KAAK,EAAE,IAAI,CAACC,cAAc,CAACtF,OAAO,CAACkD,CAAC,CAAC,EAAEP,KAAK,IAAI,EAAE,EAAEnD,mBAAmB,CAAC;YAAE;YAC1E+F,aAAa,EAAEvF,OAAO,CAACkD,CAAC,CAAC,EAAEkD,kBAAkB,IAAI,KAAK;YACtD;YACA;YACAC,eAAe,EAAErG,OAAO,CAACkD,CAAC,CAAC,EAAEmD,eAAe,IAAInE,SAAS;YACzDoE,YAAY,EAAEtG,OAAO,CAACkD,CAAC,CAAC,EAAEoD,YAAY,IAAI,EAAE;YAC5CC,gBAAgB,EAAEvG,OAAO,CAACkD,CAAC,CAAC,EAAEqD,gBAAgB,IAAI,EAAE;YACpDC,oBAAoB,EAAExG,OAAO,CAACkD,CAAC,CAAC,EAAEsD,oBAAoB,IAAI,EAAE;YAC5D3E,IAAI,EAAEtC,eAAe,CAACsD;UAC1B,CAAC,CAAC;QACN;MACJ;MAEA,OAAOiC,IAAI;IACf;IAEQxD,yBAAyBA,CAACK,WAAmB,EAAW;MAC5D,IAAI;QACA;QACA,MAAM8E,KAAK,GAAG,IAAI,CAAC3G,KAAK,EAAEiD,aAAa,CAAC,CAAC,EAAE2D,oBAAoB,CAAC/E,WAAW,CAAC,CAAC,OAAO,CAAC;QACrF,IAAI8E,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACE,MAAM,CAACC,YAAY,IAAI,CAAC,EAAE;UACzD,OAAO,IAAI;QACf,CAAC,MAAM;UACH,OAAO,KAAK;QAChB;MACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACZ,IAAI,CAACrG,MAAM,CAACkH,OAAO,CAAC,YAAY,GAAGlF,WAAW,GAAG,4BAA4B,EAAEqE,KAAK,CAAC;QACrF,OAAO,KAAK;MAChB;IACJ;IAEQzE,wBAAwBA,CAACI,WAAmB,EAAW;MAC3D,IAAI;QACA;QACA,MAAM8E,KAAK,GAAG,IAAI,CAAC3G,KAAK,EAAEiD,aAAa,CAAC,CAAC,EAAE+D,yBAAyB,CAACnF,WAAW,CAAC,CAAC,OAAO,CAAC;QAC1F,IAAI8E,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACE,MAAM,CAACC,YAAY,IAAI,CAAC,EAAE;UACzD,OAAO,IAAI;QACf,CAAC,MAAM;UACH,OAAO,KAAK;QAChB;MACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACZ,IAAI,CAACrG,MAAM,CAACkH,OAAO,CAAC,YAAY,GAAGlF,WAAW,GAAG,kCAAkC,EAAEqE,KAAK,CAAC;QAC3F,OAAO,KAAK;MAChB;IACJ;IAEQtE,oBAAoBA,CAACN,GAA6B,EAAU;MAChE;MACA,MAAM2F,oBAAoB,GAAG,eAAe;MAC5C,OAAOA,oBAAoB,GAAG3F,GAAG;IACrC;IAEQ8D,YAAYA,CAChBF,UAA+C,EAC/C5D,GAAW,EAC6B;MACxC,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,UAAU,CAAC/E,MAAM,EAAEiD,CAAC,EAAE,EAAE;QACxC,IAAI8B,UAAU,CAAC9B,CAAC,CAAC,CAAC9B,GAAG,KAAKA,GAAG,EAAE;UAC3B,OAAO4D,UAAU,CAAC9B,CAAC,CAAC;QACxB;MACJ;MACA,OAAOhB,SAAS;IACpB;IAEQyC,cAAcA,CAAC/D,MAAc,EAAsB;MACvD;MACA,IACIA,MAAM,EAAEiB,IAAI,KAAKtC,eAAe,CAACsD,KAAK,IACtC,IAAI,CAACmE,qBAAqB,CAAC,IAAI,EAAElH,KAAK,EAAEM,MAAM,EAAE6G,gBAAgB,CAAC,EACnE;QACE,OAAO,IAAI,CAACD,qBAAqB,CAAC,IAAI,EAAElH,KAAK,EAAEM,MAAM,EAAE6G,gBAAgB,CAAC,GAAG,IAAI;MACnF;MACA;MACI;MACArG,MAAM,EAAEiB,IAAI,KAAKtC,eAAe,CAAC+C,MAAM,IACvC,IAAI,CAAC0E,qBAAqB,CAAC,IAAI,EAAElH,KAAK,EAAEM,MAAM,EAAEiC,iBAAiB,EAAEzB,MAAM,EAAEyD,KAAK,CAAC,EACnF;QACE,OAAO,IAAI,CAAC2C,qBAAqB,CAAC,IAAI,EAAElH,KAAK,EAAEM,MAAM,EAAEiC,iBAAiB,EAAEzB,MAAM,EAAEyD,KAAK,CAAC,GAAG,IAAI;MACnG;MACA,OAAOnC,SAAS;IACpB;IAEA8E,qBAAqBA,CAACE,WAAmB,EAAsB;MAC3D,IAAI;QACA,IAAI7B,KAAK,GAAGnD,SAAS;;QAErB;QACA,IAAI,UAAU,CAACiF,IAAI,CAACD,WAAW,CAAC,EAAE;UAC9B7B,KAAK,GAAG+B,QAAQ,CAACF,WAAW,EAAE,EAAE,CAAC;QACrC;;QAEA;QACA,IAAI,WAAW,CAACC,IAAI,CAACD,WAAW,CAAC,EAAE;UAC/B7B,KAAK,GAAG,IAAItG,sBAAsB,CAAC,CAAC,EAAEsI,iBAAiB,CAACD,QAAQ,CAACF,WAAW,EAAE,EAAE,CAAC,CAAC;UAClF7B,KAAK,GAAG+B,QAAQ,CAAC/B,KAAK,CAAC;QAC3B;QAEA,IAAIA,KAAK,KAAKnD,SAAS,EAAE;UACrB,OAAOA,SAAS;QACpB;QAEA,IAAImD,KAAK,GAAG,CAAC,EAAE;UACX,OAAOA,KAAK;QAChB;QAEAiC,OAAO,CAACC,IAAI,CACR,oHACJ,CAAC;QACD,OAAOrF,SAAS;MACpB,CAAC,CAAC,OAAO8D,KAAK,EAAE;QACZ,IAAI,CAACrG,MAAM,CAACkH,OAAO,CACf,oHAAoH,EACpHb,KACJ,CAAC;QACD,OAAO9D,SAAS;MACpB;IACJ;IAEQoD,cAAcA,CAACD,KAAc,EAAEmC,YAAoB,EAAU;MACjE,IAAI,OAAOnC,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACoC,IAAI,CAAC,CAAC,CAACxH,MAAM,GAAG,CAAC,EAAE;QACtD,OAAOoF,KAAK;MAChB;MACA,OAAOmC,YAAY;IACvB;EACJ;EAAC,OAAA/H,0BAAA;AAAA","ignoreList":[]}