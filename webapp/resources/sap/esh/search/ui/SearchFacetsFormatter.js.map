{"version":3,"file":"SearchFacetsFormatter.js","names":["sap","ui","define","__ErrorHandler","__SearchHierarchyDynamicFacetsFormatter","__SearchHierarchyStaticFacetsFormatter","__Facet","__FacetItem","___sinaNexTS_sina_ComparisonOperator","___controls_facets_FacetTypeUI","_interopRequireDefault","obj","__esModule","default","ErrorHandler","SearchHierarchyDynamicFacetsFormatter","SearchHierarchyStaticFacetsFormatter","Facet","FacetItem","ComparisonOperator","FacetTypeUI","SearchFacetsFormatter","searchFacetDialogModel","errorHandler","hierarchyDynamicFacetsFormatter","hierarchyStaticFacetsFormatter","treeQuickSelectDataSourceFacet","constructor","searchModel","this","getInstance","_getAncestorDataSources","aRecentDataSources","oFilterDataSource","dataSourceTree","findNode","getProperty","aAncestorNodes","getAncestors","reverse","i","length","ds","dataSource","dsFacetItem","label","labelPlural","icon","filterCondition","level","value","count","toString","push","_getSiblingDataSources","aSiblingFacetItems","currentDS","currentNode","aSiblingNodes","parent","unsureWhetherNodeisBelowRoot","getChildren","j","lenJ","fi","selected","_getChildrenDataSources","aChildFacetItems","aChildNodes","getDataSourceFacetFromTree","oDataSourceFacet","facetType","DataSource","title","aAncestors","items","aSiblings","allDataSource","_createFacetItemsFromConditionGroup","rootCondition","facetItems","conditions","complexCondition","condition","facetAttribute","type","sinaNext","ConditionType","Simple","attribute","getAttributeMetadata","isHierarchy","_formatLabel","valueLabel","operator","labelFormatted","Bw","Ew","Co","getAttributeFacetsFromResultSet","resultSet","oDataSource","getDataSource","DataSourceType","Category","Promise","resolve","aServerSideFacets","facets","filter","element","FacetType","Chart","aClientSideFacets","aClientSideFacetsByDimension","oServerSideFacet","facetTotalCount","totalCount","oClientSideFacet","Attribute","dimension","query","oFacetListItem","item","dimensionValueFormatted","measureValue","facetTitle","addDataTypeToClientSideFacets","oClientSideFacetsWithSelection","aFacetItemsWithFilterConditions","k","lenK","oSelectedFacetItem","oClientSideFacetWithSelection","indexOfClientSideFacetWithSelection","indexOf","splice","m","lenM","facetItem","equals","oFacet","metadata","dataType","error","onError","addQuickSelectDataSourceFacet","config","quickSelectDataSources","facet","createTreeQuickSelectDataSourceFacet","createListQuickSelectDataSourceFacet","QuickSelectDataSource","map","children","treeNodeProps","createTreeNodeQuickSelectDataSource","rootNode","expandPathToSelectedDataSource","collectPaths","paths","findDataSource","path","node","slice","childNode","expanded","childTreeNodeProps","dataSourceId","id","toggleExpand","getFacets","searchResultSet","resultFacets","appDataSource","sortFacets","setFacetIndex","hierarchyDynamicFacets","hierarchyStaticFacets","attributeFacets","facetIndex","facetPosition","HierarchyStatic","Hierarchy","index","position","getFilterRootCondition","containsAttribute","sort","f1","f2","getDialogFacetsFromMetaData","getAttributeDialogFacetsFromMetaData","getFacetsFromMetadata","a","b","localeCompare","oMetaData","Object","values","attributeMetadataMap","usage","AdvancedSearch","matchingStrategy","visible","getDialogFacetsFromChartQuery","filters","facetItemFoundInFacet","userDefined","advanced","listed","hasDialogFacetsFromMetaData","hasDialogFacets","handleDataSourceChanged","destroy"],"sources":["SearchFacetsFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport ErrorHandler from \"./error/ErrorHandler\";\nimport SearchHierarchyDynamicFacetsFormatter from \"./hierarchydynamic/SearchHierarchyDynamicFacetsFormatter\";\nimport SearchHierarchyStaticFacetsFormatter from \"./hierarchystatic/SearchHierarchyStaticFacetsFormatter\";\nimport Facet from \"./Facet\";\nimport FacetItem from \"./FacetItem\";\nimport { DataSource } from \"./sinaNexTS/sina/DataSource\";\nimport { SearchResultSet } from \"./sinaNexTS/sina/SearchResultSet\";\nimport { ComparisonOperator } from \"./sinaNexTS/sina/ComparisonOperator\";\nimport SearchFacetDialogModel from \"./SearchFacetDialogModel\";\nimport { ChartResultSet } from \"./sinaNexTS/sina/ChartResultSet\";\nimport SearchModel from \"./SearchModel\";\nimport { FacetTypeUI } from \"./controls/facets/FacetTypeUI\";\nimport { AttributeMetadata } from \"./sinaNexTS/sina/AttributeMetadata\";\n\ninterface TreeNode {\n    expanded: boolean;\n    type: string;\n    label: string;\n    icon: string;\n    getDataSource: () => DataSource;\n    dataSourceId: string;\n    children: Array<TreeNode>;\n    toggleExpand: () => void;\n}\n\ninterface TreeNode {\n    expanded: boolean;\n    type: string;\n    label: string;\n    icon: string;\n    getDataSource: () => DataSource;\n    dataSourceId: string;\n    children: Array<TreeNode>;\n    toggleExpand: () => void;\n}\n\nexport default class SearchFacetsFormatter {\n    searchFacetDialogModel: SearchModel;\n    errorHandler: ErrorHandler;\n    hierarchyDynamicFacetsFormatter: SearchHierarchyDynamicFacetsFormatter;\n    hierarchyStaticFacetsFormatter: SearchHierarchyStaticFacetsFormatter;\n    treeQuickSelectDataSourceFacet: any;\n\n    constructor(searchModel: SearchModel) {\n        this.searchFacetDialogModel = searchModel;\n        this.errorHandler = ErrorHandler.getInstance();\n        this.hierarchyDynamicFacetsFormatter = new SearchHierarchyDynamicFacetsFormatter(searchModel);\n        this.hierarchyStaticFacetsFormatter = new SearchHierarchyStaticFacetsFormatter(searchModel);\n    }\n\n    private _getAncestorDataSources(searchModel: SearchModel): Array<FacetItem> {\n        const aRecentDataSources: Array<FacetItem> = [];\n        const oFilterDataSource = searchModel.dataSourceTree.findNode(\n            searchModel.getProperty(\"/uiFilter/dataSource\")\n        );\n        if (oFilterDataSource) {\n            const aAncestorNodes = oFilterDataSource.getAncestors().reverse();\n            for (let i = 0; i < aAncestorNodes.length; i++) {\n                const ds = aAncestorNodes[i].dataSource;\n                const dsFacetItem = new FacetItem({\n                    label: ds.labelPlural,\n                    icon: ds.icon || \"sap-icon://none\",\n                    filterCondition: ds as any,\n                    level: 0,\n                    value: aAncestorNodes[i].count ? aAncestorNodes[i].count.toString() : \"\",\n                });\n                aRecentDataSources.push(dsFacetItem);\n            }\n        }\n        return aRecentDataSources;\n    }\n\n    private _getSiblingDataSources(searchModel: SearchModel, level: number): Array<any> {\n        const aSiblingFacetItems = [];\n        const currentDS = searchModel.getProperty(\"/uiFilter/dataSource\");\n        const currentNode = searchModel.dataSourceTree.findNode(currentDS);\n        let aSiblingNodes;\n        if (currentNode.parent && !currentNode.unsureWhetherNodeisBelowRoot) {\n            aSiblingNodes = currentNode.parent.getChildren();\n        } else {\n            aSiblingNodes = [];\n        }\n        if (aSiblingNodes.length === 0) {\n            aSiblingNodes.push(currentNode);\n        }\n        for (let j = 0, lenJ = aSiblingNodes.length; j < lenJ; j++) {\n            const ds = aSiblingNodes[j].dataSource;\n            const fi = new FacetItem({\n                label: ds.labelPlural,\n                icon: ds.icon || \"sap-icon://none\",\n                value: aSiblingNodes[j].count,\n                filterCondition: ds,\n                selected: currentDS === ds,\n                level: level,\n            });\n            aSiblingFacetItems.push(fi);\n            if (fi.selected) {\n                aSiblingFacetItems.push(...this._getChildrenDataSources(searchModel, level + 1));\n            }\n        }\n        return aSiblingFacetItems;\n    }\n\n    private _getChildrenDataSources(searchModel: SearchModel, level: number): Array<FacetItem> {\n        // add children with data from the tree\n        const aChildFacetItems: Array<FacetItem> = [];\n        const currentDS = searchModel.getProperty(\"/uiFilter/dataSource\");\n        const aChildNodes = searchModel.dataSourceTree.findNode(currentDS).getChildren();\n        for (let j = 0, lenJ = aChildNodes.length; j < lenJ; j++) {\n            const ds = aChildNodes[j].dataSource;\n            const fi = new FacetItem({\n                label: ds.labelPlural,\n                icon: ds.icon || \"sap-icon://none\",\n                value: aChildNodes[j].count ? aChildNodes[j].count.toString() : \"\",\n                filterCondition: ds as any,\n                selected: false,\n                level: level,\n            });\n            aChildFacetItems.push(fi);\n        }\n        return aChildFacetItems;\n    }\n\n    getDataSourceFacetFromTree(searchModel: SearchModel): Facet {\n        const oDataSourceFacet = new Facet({\n            facetType: FacetTypeUI.DataSource,\n            title: \"Search In\",\n        });\n        const currentDS = searchModel.getProperty(\"/uiFilter/dataSource\");\n        const aAncestors = this._getAncestorDataSources(searchModel);\n        oDataSourceFacet.items.push(...aAncestors);\n        const aSiblings = this._getSiblingDataSources(\n            searchModel,\n            searchModel.allDataSource === currentDS ? 0 : 1\n        );\n        oDataSourceFacet.items.push(...aSiblings);\n        return oDataSourceFacet;\n    }\n\n    private _createFacetItemsFromConditionGroup(\n        dataSource: DataSource,\n        rootCondition: any\n    ): Array<FacetItem> {\n        // ToDo 'any'\n        const facetItems: Array<FacetItem> = [];\n        for (let i = 0; i < rootCondition.conditions.length; i++) {\n            const complexCondition = rootCondition.conditions[i];\n            for (let j = 0; j < complexCondition.conditions.length; j++) {\n                const condition = complexCondition.conditions[j];\n                let facetAttribute;\n                if (condition.type === this.searchFacetDialogModel.sinaNext.ConditionType.Simple) {\n                    facetAttribute = condition.attribute;\n                    if ((dataSource.getAttributeMetadata(facetAttribute) as AttributeMetadata).isHierarchy) {\n                        continue;\n                    }\n                    facetItems.push(\n                        new FacetItem({\n                            facetAttribute: facetAttribute,\n                            label: this._formatLabel(condition.valueLabel, condition.operator),\n                            filterCondition: condition,\n                            selected: true,\n                        })\n                    );\n                } else {\n                    facetAttribute = condition.conditions[0].attribute;\n                    if ((dataSource.getAttributeMetadata(facetAttribute) as AttributeMetadata).isHierarchy) {\n                        continue;\n                    }\n                    facetItems.push(\n                        new FacetItem({\n                            facetAttribute: facetAttribute,\n                            label: condition.valueLabel,\n                            filterCondition: condition,\n                            selected: true,\n                        })\n                    );\n                }\n            }\n        }\n        return facetItems;\n    }\n\n    private _formatLabel(label: string, operator) {\n        let labelFormatted;\n        switch (operator) {\n            case ComparisonOperator.Bw /*\"Bw\"*/:\n                labelFormatted = label + \"*\";\n                break;\n            case ComparisonOperator.Ew /*\"Ew\"*/:\n                labelFormatted = \"*\" + label;\n                break;\n            case ComparisonOperator.Co /*\"Co\"*/:\n                labelFormatted = \"*\" + label + \"*\";\n                break;\n            default:\n                labelFormatted = label;\n                break;\n        }\n        return labelFormatted;\n    }\n\n    private getAttributeFacetsFromResultSet(resultSet: SearchResultSet, searchModel: SearchModel): any {\n        const oDataSource = searchModel.getDataSource();\n        if (oDataSource.type === searchModel.sinaNext.DataSourceType.Category) {\n            return Promise.resolve([]); // UI decision: with Category, common attributes should not be shown\n        }\n\n        // get chart facets from resultSet\n        const aServerSideFacets = resultSet.facets.filter(function (element) {\n            return element && element.type && element.type === searchModel.sinaNext.FacetType.Chart;\n        }) as Array<ChartResultSet>;\n\n        // create facets and facet items from server response\n        const aClientSideFacets = [];\n        const aClientSideFacetsByDimension = {};\n        for (const oServerSideFacet of aServerSideFacets) {\n            let facetTotalCount;\n            if (typeof oServerSideFacet?.facetTotalCount === \"number\") {\n                facetTotalCount = oServerSideFacet?.facetTotalCount;\n            } else {\n                facetTotalCount = resultSet.totalCount;\n            }\n            const oClientSideFacet = new Facet({\n                title: oServerSideFacet.title,\n                facetType: FacetTypeUI.Attribute,\n                dimension: oServerSideFacet.query.dimension,\n                totalCount: facetTotalCount,\n            });\n            if (oServerSideFacet.items.length === 0) {\n                continue;\n            }\n            for (let j = 0; j < oServerSideFacet.items.length; j++) {\n                const oFacetListItem = oServerSideFacet.items[j];\n                const item = new FacetItem({\n                    facetAttribute: oServerSideFacet.query.dimension,\n                    label: this._formatLabel(\n                        oFacetListItem.dimensionValueFormatted,\n                        oFacetListItem.filterCondition.operator\n                    ),\n                    value: oFacetListItem.measureValue as any,\n                    filterCondition: oFacetListItem.filterCondition,\n                    icon: oFacetListItem.icon,\n                });\n                item.facetTitle = oServerSideFacet.title;\n                oClientSideFacet.items.push(item);\n            }\n            aClientSideFacetsByDimension[oServerSideFacet.query.dimension] = oClientSideFacet;\n            aClientSideFacets.push(oClientSideFacet);\n        }\n\n        this.addDataTypeToClientSideFacets(aClientSideFacets, searchModel);\n\n        // create facet items from global filter\n        const oClientSideFacetsWithSelection = {};\n        const aFacetItemsWithFilterConditions = this._createFacetItemsFromConditionGroup(\n            oDataSource,\n            searchModel.getProperty(\"/uiFilter/rootCondition\")\n        );\n\n        // combine facets from global filter with facets from server\n        for (let k = 0, lenK = aFacetItemsWithFilterConditions.length; k < lenK; k++) {\n            const oSelectedFacetItem = aFacetItemsWithFilterConditions[k];\n            const oClientSideFacetWithSelection =\n                aClientSideFacetsByDimension[oSelectedFacetItem.facetAttribute];\n            if (oClientSideFacetWithSelection) {\n                // remove and insert selected facet on top, only in facet panel\n                const indexOfClientSideFacetWithSelection = aClientSideFacets.indexOf(\n                    oClientSideFacetWithSelection\n                );\n                if (indexOfClientSideFacetWithSelection > 0) {\n                    aClientSideFacets.splice(indexOfClientSideFacetWithSelection, 1);\n                    aClientSideFacets.splice(0, 0, oClientSideFacetWithSelection);\n                }\n                // facet with the same title as a already selected facetitems facet was sent by the server\n                // -> merge the item into this facet. If the same facet item already exists just select it\n                // var facetItemFoundInFacet = false;\n                for (let m = 0, lenM = oClientSideFacetWithSelection.items.length; m < lenM; m++) {\n                    const facetItem = oClientSideFacetWithSelection.items[m];\n                    if (oSelectedFacetItem.filterCondition.equals(facetItem.filterCondition)) {\n                        facetItem.selected = true;\n                    }\n                }\n            }\n            oClientSideFacetsWithSelection[oSelectedFacetItem.facetAttribute] = oClientSideFacetWithSelection;\n        }\n\n        return Promise.resolve(aClientSideFacets);\n    }\n\n    addDataTypeToClientSideFacets(aClientSideFacets, searchModel: SearchModel): void {\n        const oDataSource = searchModel.getDataSource();\n        for (let i = 0; i < aClientSideFacets.length; i++) {\n            const oFacet = aClientSideFacets[i];\n            try {\n                const metadata = oDataSource.getAttributeMetadata(oFacet.dimension);\n                oFacet.dataType = metadata.type;\n            } catch (error) {\n                this.errorHandler.onError(error);\n            }\n        }\n    }\n\n    addQuickSelectDataSourceFacet(searchModel: SearchModel, facets: Array<any>): void {\n        if (searchModel.config.quickSelectDataSources.length === 0) {\n            return;\n        }\n        const dataSource = searchModel.config.quickSelectDataSources[0];\n        let facet;\n        if (dataSource.type === \"quickSelectDataSourceTreeNode\") {\n            // tree of datasources (one catalog)\n            facet = this.createTreeQuickSelectDataSourceFacet(searchModel);\n        } else {\n            // flat list of datasources (repository explorer)\n            facet = this.createListQuickSelectDataSourceFacet(searchModel);\n        }\n        facets.push(facet);\n    }\n\n    createListQuickSelectDataSourceFacet(searchModel: SearchModel): any {\n        return {\n            facetType: FacetTypeUI.QuickSelectDataSource,\n            items: searchModel.config.quickSelectDataSources.map((ds) => {\n                return {\n                    type: \"quickSelectDataSourceListItem\",\n                    dataSource: ds,\n                };\n            }),\n        };\n    }\n\n    createTreeQuickSelectDataSourceFacet(searchModel: SearchModel): any {\n        if (!this.treeQuickSelectDataSourceFacet) {\n            // use same structure as for list display\n            // root tree node is stored as first item\n            this.treeQuickSelectDataSourceFacet = {\n                facetType: FacetTypeUI.QuickSelectDataSource,\n                items: [\n                    {\n                        type: \"quickSelectDataSourceTreeNode\",\n                        children: searchModel.config.quickSelectDataSources.map((treeNodeProps) =>\n                            this.createTreeNodeQuickSelectDataSource(treeNodeProps)\n                        ),\n                    },\n                ],\n            };\n        }\n        const rootNode = this.treeQuickSelectDataSourceFacet.items[0];\n        this.expandPathToSelectedDataSource(searchModel, rootNode);\n        return this.treeQuickSelectDataSourceFacet;\n    }\n\n    expandPathToSelectedDataSource(searchModel: SearchModel, rootNode: TreeNode) {\n        type Path = Array<TreeNode>;\n\n        // helper function for collecting all tree paths to a datasource\n        function collectPaths(rootNode: TreeNode, dataSource): Array<Path> {\n            const paths: Array<Path> = [];\n            function findDataSource(path: Array<TreeNode>, node: TreeNode) {\n                path = path.slice();\n                path.push(node);\n                if (node.getDataSource && node.getDataSource() === dataSource) {\n                    paths.push(path);\n                    return;\n                }\n                if (!node.children) {\n                    return;\n                }\n                for (const childNode of node.children) {\n                    findDataSource(path, childNode);\n                }\n            }\n            findDataSource([], rootNode);\n            return paths;\n        }\n\n        // collect all paths in the tree to the current datasource\n        const paths = collectPaths(rootNode, searchModel.getDataSource());\n\n        // expand paths\n        for (const path of paths) {\n            for (let i = 0; i < path.length - 1; ++i) {\n                // i<path.length-1 because last path element is datasource itself and does not need expansion\n                const node = path[i];\n                node.expanded = true;\n            }\n        }\n    }\n\n    createTreeNodeQuickSelectDataSource(treeNodeProps): TreeNode {\n        let children = [];\n        if (treeNodeProps.children) {\n            children = treeNodeProps.children.map((childTreeNodeProps) => {\n                return this.createTreeNodeQuickSelectDataSource(childTreeNodeProps);\n            });\n        }\n        return {\n            expanded: false,\n            type: \"quickSelectDataSourceTreeNode\",\n            label: treeNodeProps.dataSource.labelPlural,\n            icon: treeNodeProps.dataSource.icon,\n            getDataSource: () => treeNodeProps.dataSource,\n            dataSourceId: treeNodeProps.dataSource.id,\n            children: children,\n            toggleExpand: function () {\n                this.expanded = !this.expanded;\n            },\n        };\n    }\n\n    async getFacets(\n        oDataSource: DataSource,\n        searchResultSet: SearchResultSet,\n        searchModel: SearchModel\n    ): Promise<any> {\n        const resultFacets = [];\n\n        // add datasource facet\n        resultFacets.push(this.getDataSourceFacetFromTree(searchModel));\n\n        // add quick select datasource facet\n        this.addQuickSelectDataSourceFacet(searchModel, resultFacets);\n\n        // for ds=apps or ds=category -> no attribute facets, just return\n        if (\n            oDataSource === searchModel.appDataSource ||\n            oDataSource.type === searchModel.sinaNext.DataSourceType.Category\n        ) {\n            this.sortFacets(resultFacets, searchModel);\n            this.setFacetIndex(resultFacets);\n            return resultFacets;\n        }\n\n        // return if we have no searchResultSet\n        if (!searchResultSet) {\n            this.sortFacets(resultFacets, searchModel);\n            this.setFacetIndex(resultFacets);\n            return resultFacets;\n        }\n\n        // add dynamic hierarchy facets\n        const hierarchyDynamicFacets = await this.hierarchyDynamicFacetsFormatter.getFacets(\n            searchResultSet,\n            searchModel\n        );\n        resultFacets.push(...hierarchyDynamicFacets);\n\n        // add static hierarchy facets\n        const hierarchyStaticFacets = await this.hierarchyStaticFacetsFormatter.getFacets(searchResultSet);\n        resultFacets.push(...hierarchyStaticFacets);\n\n        // add attribute facets\n        const attributeFacets = await this.getAttributeFacetsFromResultSet(searchResultSet, searchModel);\n        resultFacets.push(...attributeFacets);\n\n        // sort\n        this.sortFacets(resultFacets, searchModel);\n        this.setFacetIndex(resultFacets);\n        return resultFacets;\n    }\n\n    setFacetIndex(facets): void {\n        // facet index is needed in SearchHierarchyFacet and SearchHierarchyStaticFacet for updating facets in the UI\n        // see method refreshUI\n        for (let i = 0; i < facets.length; ++i) {\n            const facet = facets[i];\n            if (facet.setFacetIndex) {\n                facet.setFacetIndex(i);\n            } else {\n                facet.facetIndex = i;\n            }\n        }\n    }\n\n    sortFacets(facets: Array<Facet>, searchModel: SearchModel) {\n        const facetPosition: { [key in FacetTypeUI]: number } = {\n            [FacetTypeUI.DataSource]: -2000, // negative in order to not interfere with DSP exit\n            [FacetTypeUI.QuickSelectDataSource]: -1000, // negative in order to not interfere with DSP exit\n            [FacetTypeUI.HierarchyStatic]: 100,\n            [FacetTypeUI.Hierarchy]: 1000,\n            [FacetTypeUI.Attribute]: 1000,\n        };\n\n        for (let index = 0; index < facets.length; ++index) {\n            const facet = facets[index];\n\n            // keep original position\n            facet.position = index;\n\n            // add offset according to type\n            facet.position += facetPosition[facet.facetType];\n\n            // move facets with filters up\n            if (facet.facetType === FacetTypeUI.Attribute || facet.facetType === FacetTypeUI.Hierarchy) {\n                if (searchModel.getFilterRootCondition().containsAttribute(facet.dimension)) {\n                    facet.position -= 500;\n                }\n            }\n        }\n        facets.sort((f1, f2) => f1.position - f2.position);\n    }\n\n    getDialogFacetsFromMetaData(\n        dataSource: DataSource,\n        searchFacetDialogModel: SearchFacetDialogModel\n    ): Array<any> {\n        const facets = [];\n        // attribute facets\n        const attributeFacets = this.getAttributeDialogFacetsFromMetaData(dataSource, searchFacetDialogModel);\n        facets.push(...attributeFacets);\n        // dynamic hierarchy attribute facets\n        const hierarchyDynamicFacets = this.hierarchyDynamicFacetsFormatter.getFacetsFromMetadata(\n            dataSource,\n            searchFacetDialogModel\n        );\n        facets.push(...hierarchyDynamicFacets);\n        // sort\n        facets.sort(function (a, b) {\n            return a.title.localeCompare(b.title);\n        });\n        // set facet index\n        this.setFacetIndex(facets);\n        return facets;\n    }\n\n    getAttributeDialogFacetsFromMetaData(\n        oMetaData: DataSource,\n        searchFacetDialogModel: SearchFacetDialogModel\n    ): Array<any> {\n        const aServerSideFacets = Object.values(oMetaData.attributeMetadataMap);\n        const aClientSideFacets = [];\n        // extract facets from server response:\n        for (const oServerSideFacet of aServerSideFacets) {\n            if (\n                (oServerSideFacet.usage.Facet || oServerSideFacet.usage.AdvancedSearch) &&\n                (oServerSideFacet as AttributeMetadata).isHierarchy !== true // Hierarchy attribute based facet is not displayed in the showmore dialog, but in static hierarchy facet.\n            ) {\n                const oClientSideFacet = new Facet({\n                    title: (oServerSideFacet as AttributeMetadata).label,\n                    facetType: FacetTypeUI.Attribute,\n                    dimension: oServerSideFacet.id,\n                    dataType: oServerSideFacet.type,\n                    matchingStrategy: (oServerSideFacet as AttributeMetadata).matchingStrategy,\n                });\n\n                const aFacetItemsWithFilterConditions = this._createFacetItemsFromConditionGroup(\n                    searchFacetDialogModel.getDataSource(),\n                    searchFacetDialogModel.getProperty(\"/uiFilter/rootCondition\")\n                );\n                let count = 0;\n                for (let k = 0, lenK = aFacetItemsWithFilterConditions.length; k < lenK; k++) {\n                    const oSelectedFacetItem = aFacetItemsWithFilterConditions[k];\n                    oSelectedFacetItem.visible = oClientSideFacet.visible;\n                    if (oSelectedFacetItem.facetAttribute === oClientSideFacet.dimension) {\n                        count++;\n                        oClientSideFacet.items.splice(0, 0, oSelectedFacetItem);\n                    }\n                }\n                oClientSideFacet[\"count\"] = count; // ToDo, 'count does not exist ?!?'\n\n                aClientSideFacets.push(oClientSideFacet);\n            }\n        }\n\n        return aClientSideFacets;\n    }\n\n    getDialogFacetsFromChartQuery(\n        resultSet: ChartResultSet,\n        searchModel: SearchModel,\n        dimension: string,\n        filters?: Array<any>\n    ): Facet {\n        const oClientSideFacet = new Facet({\n            dimension: dimension,\n            totalCount: resultSet?.facetTotalCount,\n        });\n\n        if (resultSet) {\n            for (let j = 0; j < resultSet.items.length; j++) {\n                const oFacetListItem = resultSet.items[j];\n                const item = new FacetItem({\n                    value: oFacetListItem.measureValue as any,\n                    filterCondition: oFacetListItem.filterCondition,\n                    label: oFacetListItem.dimensionValueFormatted,\n                    facetAttribute: resultSet.query.dimension,\n                });\n                oClientSideFacet.items.push(item);\n            }\n\n            // add filter conditions as facet items:\n            let aFacetItemsWithFilterConditions;\n            if (filters) {\n                aFacetItemsWithFilterConditions = filters;\n            } else {\n                aFacetItemsWithFilterConditions = this._createFacetItemsFromConditionGroup(\n                    searchModel.getDataSource(),\n                    searchModel.getProperty(\"/uiFilter/rootCondition\")\n                );\n            }\n\n            for (let k = 0, lenK = aFacetItemsWithFilterConditions.length; k < lenK; k++) {\n                const oSelectedFacetItem = aFacetItemsWithFilterConditions[k];\n                if (oSelectedFacetItem.facetAttribute === oClientSideFacet.dimension) {\n                    let facetItemFoundInFacet = false;\n                    for (let m = 0, lenM = oClientSideFacet.items.length; m < lenM; m++) {\n                        const facetItem = oClientSideFacet.items[m];\n                        if (oSelectedFacetItem.filterCondition.equals(facetItem.filterCondition)) {\n                            facetItem.selected = true;\n                            facetItemFoundInFacet = true;\n                        }\n                    }\n                    if (!facetItemFoundInFacet) {\n                        // there is no such facet item -> add the facet item to the facet\n                        oClientSideFacet.items.splice(oClientSideFacet.items.length, 0, oSelectedFacetItem);\n                        if (oSelectedFacetItem.filterCondition.userDefined) {\n                            oSelectedFacetItem.advanced = true;\n                        } else {\n                            oSelectedFacetItem.listed = true;\n                            oSelectedFacetItem.value = \"\";\n                            oSelectedFacetItem.valueLabel = \"\";\n                        }\n                    } else {\n                        oSelectedFacetItem.listed = true;\n                    }\n                }\n            }\n        }\n\n        return oClientSideFacet;\n    }\n\n    hasDialogFacetsFromMetaData(searchModel: SearchModel): boolean {\n        const oMetaData = searchModel.getDataSource();\n        const aServerSideFacets = Object.values(oMetaData.attributeMetadataMap);\n        let hasDialogFacets = false;\n\n        // extract facets from server response:\n        for (const oServerSideFacet of aServerSideFacets) {\n            if (oServerSideFacet.usage) {\n                if (oServerSideFacet.usage.Facet || oServerSideFacet.usage.AdvancedSearch) {\n                    // TODO: ||, show more displays facets + advanced search\n                    hasDialogFacets = true;\n                    break;\n                }\n            }\n        }\n        return hasDialogFacets;\n    }\n\n    handleDataSourceChanged(): void {\n        this.hierarchyDynamicFacetsFormatter.handleDataSourceChanged();\n        this.hierarchyStaticFacetsFormatter.handleDataSourceChanged();\n    }\n\n    destroy(): void {\n        this.hierarchyDynamicFacetsFormatter.destroy();\n        this.hierarchyDynamicFacetsFormatter = null;\n        this.hierarchyStaticFacetsFormatter.destroy();\n        this.hierarchyStaticFacetsFormatter = null;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,oPAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,sBAAAC,EAAAC,GAAA,OAAAA,KAAAC,mBAAAD,EAAAE,UAAA,YAAAF,EAAAE,QAAAF,CAAA,OAKOG,EAAYJ,EAAAP,GAAA,MACZY,EAAqCL,EAAAN,GAAA,MACrCY,EAAoCN,EAAAL,GAAA,MACpCY,EAAKP,EAAAJ,GAAA,MACLY,EAASR,EAAAH,GAAA,MAGPY,EAAkBX,EAAA,4BAIlBY,EAAWX,EAAA,eAyBL,MAAMY,EACjBC,uBACAC,aACAC,gCACAC,+BACAC,+BAEAC,YAAYC,GACRC,KAAKP,uBAAyBM,EAC9BC,KAAKN,aAAeT,EAAagB,cACjCD,KAAKL,gCAAkC,IAAIT,EAAsCa,GACjFC,KAAKJ,+BAAiC,IAAIT,EAAqCY,EACnF,CAEQG,wBAAwBH,GAC5B,MAAMI,EAAuC,GAC7C,MAAMC,EAAoBL,EAAYM,eAAeC,SACjDP,EAAYQ,YAAY,yBAE5B,GAAIH,EAAmB,CACnB,MAAMI,EAAiBJ,EAAkBK,eAAeC,UACxD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAeI,OAAQD,IAAK,CAC5C,MAAME,EAAKL,EAAeG,GAAGG,WAC7B,MAAMC,EAAc,IAAI1B,EAAU,CAC9B2B,MAAOH,EAAGI,YACVC,KAAML,EAAGK,MAAQ,kBACjBC,gBAAiBN,EACjBO,MAAO,EACPC,MAAOb,EAAeG,GAAGW,MAAQd,EAAeG,GAAGW,MAAMC,WAAa,KAE1EpB,EAAmBqB,KAAKT,EAC5B,CACJ,CACA,OAAOZ,CACX,CAEQsB,uBAAuB1B,EAA0BqB,GACrD,MAAMM,EAAqB,GAC3B,MAAMC,EAAY5B,EAAYQ,YAAY,wBAC1C,MAAMqB,EAAc7B,EAAYM,eAAeC,SAASqB,GACxD,IAAIE,EACJ,GAAID,EAAYE,SAAWF,EAAYG,6BAA8B,CACjEF,EAAgBD,EAAYE,OAAOE,aACvC,KAAO,CACHH,EAAgB,EACpB,CACA,GAAIA,EAAcjB,SAAW,EAAG,CAC5BiB,EAAcL,KAAKI,EACvB,CACA,IAAK,IAAIK,EAAI,EAAGC,EAAOL,EAAcjB,OAAQqB,EAAIC,EAAMD,IAAK,CACxD,MAAMpB,EAAKgB,EAAcI,GAAGnB,WAC5B,MAAMqB,EAAK,IAAI9C,EAAU,CACrB2B,MAAOH,EAAGI,YACVC,KAAML,EAAGK,MAAQ,kBACjBG,MAAOQ,EAAcI,GAAGX,MACxBH,gBAAiBN,EACjBuB,SAAUT,IAAcd,EACxBO,MAAOA,IAEXM,EAAmBF,KAAKW,GACxB,GAAIA,EAAGC,SAAU,CACbV,EAAmBF,QAAQxB,KAAKqC,wBAAwBtC,EAAaqB,EAAQ,GACjF,CACJ,CACA,OAAOM,CACX,CAEQW,wBAAwBtC,EAA0BqB,GAEtD,MAAMkB,EAAqC,GAC3C,MAAMX,EAAY5B,EAAYQ,YAAY,wBAC1C,MAAMgC,EAAcxC,EAAYM,eAAeC,SAASqB,GAAWK,cACnE,IAAK,IAAIC,EAAI,EAAGC,EAAOK,EAAY3B,OAAQqB,EAAIC,EAAMD,IAAK,CACtD,MAAMpB,EAAK0B,EAAYN,GAAGnB,WAC1B,MAAMqB,EAAK,IAAI9C,EAAU,CACrB2B,MAAOH,EAAGI,YACVC,KAAML,EAAGK,MAAQ,kBACjBG,MAAOkB,EAAYN,GAAGX,MAAQiB,EAAYN,GAAGX,MAAMC,WAAa,GAChEJ,gBAAiBN,EACjBuB,SAAU,MACVhB,MAAOA,IAEXkB,EAAiBd,KAAKW,EAC1B,CACA,OAAOG,CACX,CAEAE,2BAA2BzC,GACvB,MAAM0C,EAAmB,IAAIrD,EAAM,CAC/BsD,UAAWnD,EAAYoD,WACvBC,MAAO,cAEX,MAAMjB,EAAY5B,EAAYQ,YAAY,wBAC1C,MAAMsC,EAAa7C,KAAKE,wBAAwBH,GAChD0C,EAAiBK,MAAMtB,QAAQqB,GAC/B,MAAME,EAAY/C,KAAKyB,uBACnB1B,EACAA,EAAYiD,gBAAkBrB,EAAY,EAAI,GAElDc,EAAiBK,MAAMtB,QAAQuB,GAC/B,OAAON,CACX,CAEQQ,oCACJnC,EACAoC,GAGA,MAAMC,EAA+B,GACrC,IAAK,IAAIxC,EAAI,EAAGA,EAAIuC,EAAcE,WAAWxC,OAAQD,IAAK,CACtD,MAAM0C,EAAmBH,EAAcE,WAAWzC,GAClD,IAAK,IAAIsB,EAAI,EAAGA,EAAIoB,EAAiBD,WAAWxC,OAAQqB,IAAK,CACzD,MAAMqB,EAAYD,EAAiBD,WAAWnB,GAC9C,IAAIsB,EACJ,GAAID,EAAUE,OAASxD,KAAKP,uBAAuBgE,SAASC,cAAcC,OAAQ,CAC9EJ,EAAiBD,EAAUM,UAC3B,GAAK9C,EAAW+C,qBAAqBN,GAAsCO,YAAa,CACpF,QACJ,CACAX,EAAW3B,KACP,IAAInC,EAAU,CACVkE,eAAgBA,EAChBvC,MAAOhB,KAAK+D,aAAaT,EAAUU,WAAYV,EAAUW,UACzD9C,gBAAiBmC,EACjBlB,SAAU,OAGtB,KAAO,CACHmB,EAAiBD,EAAUF,WAAW,GAAGQ,UACzC,GAAK9C,EAAW+C,qBAAqBN,GAAsCO,YAAa,CACpF,QACJ,CACAX,EAAW3B,KACP,IAAInC,EAAU,CACVkE,eAAgBA,EAChBvC,MAAOsC,EAAUU,WACjB7C,gBAAiBmC,EACjBlB,SAAU,OAGtB,CACJ,CACJ,CACA,OAAOe,CACX,CAEQY,aAAa/C,EAAeiD,GAChC,IAAIC,EACJ,OAAQD,GACJ,KAAK3E,EAAmB6E,GACpBD,EAAiBlD,EAAQ,IACzB,MACJ,KAAK1B,EAAmB8E,GACpBF,EAAiB,IAAMlD,EACvB,MACJ,KAAK1B,EAAmB+E,GACpBH,EAAiB,IAAMlD,EAAQ,IAC/B,MACJ,QACIkD,EAAiBlD,EACjB,MAER,OAAOkD,CACX,CAEQI,gCAAgCC,EAA4BxE,GAChE,MAAMyE,EAAczE,EAAY0E,gBAChC,GAAID,EAAYhB,OAASzD,EAAY0D,SAASiB,eAAeC,SAAU,CACnE,OAAOC,QAAQC,QAAQ,GAC3B,CAGA,MAAMC,EAAoBP,EAAUQ,OAAOC,OAAO,SAAUC,GACxD,OAAOA,GAAWA,EAAQzB,MAAQyB,EAAQzB,OAASzD,EAAY0D,SAASyB,UAAUC,KACtF,GAGA,MAAMC,EAAoB,GAC1B,MAAMC,EAA+B,CAAC,EACtC,IAAK,MAAMC,KAAoBR,EAAmB,CAC9C,IAAIS,EACJ,UAAWD,GAAkBC,kBAAoB,SAAU,CACvDA,EAAkBD,GAAkBC,eACxC,KAAO,CACHA,EAAkBhB,EAAUiB,UAChC,CACA,MAAMC,EAAmB,IAAIrG,EAAM,CAC/BwD,MAAO0C,EAAiB1C,MACxBF,UAAWnD,EAAYmG,UACvBC,UAAWL,EAAiBM,MAAMD,UAClCH,WAAYD,IAEhB,GAAID,EAAiBxC,MAAMlC,SAAW,EAAG,CACrC,QACJ,CACA,IAAK,IAAIqB,EAAI,EAAGA,EAAIqD,EAAiBxC,MAAMlC,OAAQqB,IAAK,CACpD,MAAM4D,EAAiBP,EAAiBxC,MAAMb,GAC9C,MAAM6D,EAAO,IAAIzG,EAAU,CACvBkE,eAAgB+B,EAAiBM,MAAMD,UACvC3E,MAAOhB,KAAK+D,aACR8B,EAAeE,wBACfF,EAAe1E,gBAAgB8C,UAEnC5C,MAAOwE,EAAeG,aACtB7E,gBAAiB0E,EAAe1E,gBAChCD,KAAM2E,EAAe3E,OAEzB4E,EAAKG,WAAaX,EAAiB1C,MACnC6C,EAAiB3C,MAAMtB,KAAKsE,EAChC,CACAT,EAA6BC,EAAiBM,MAAMD,WAAaF,EACjEL,EAAkB5D,KAAKiE,EAC3B,CAEAzF,KAAKkG,8BAA8Bd,EAAmBrF,GAGtD,MAAMoG,EAAiC,CAAC,EACxC,MAAMC,EAAkCpG,KAAKiD,oCACzCuB,EACAzE,EAAYQ,YAAY,4BAI5B,IAAK,IAAI8F,EAAI,EAAGC,EAAOF,EAAgCxF,OAAQyF,EAAIC,EAAMD,IAAK,CAC1E,MAAME,EAAqBH,EAAgCC,GAC3D,MAAMG,EACFnB,EAA6BkB,EAAmBhD,gBACpD,GAAIiD,EAA+B,CAE/B,MAAMC,EAAsCrB,EAAkBsB,QAC1DF,GAEJ,GAAIC,EAAsC,EAAG,CACzCrB,EAAkBuB,OAAOF,EAAqC,GAC9DrB,EAAkBuB,OAAO,EAAG,EAAGH,EACnC,CAIA,IAAK,IAAII,EAAI,EAAGC,EAAOL,EAA8B1D,MAAMlC,OAAQgG,EAAIC,EAAMD,IAAK,CAC9E,MAAME,EAAYN,EAA8B1D,MAAM8D,GACtD,GAAIL,EAAmBpF,gBAAgB4F,OAAOD,EAAU3F,iBAAkB,CACtE2F,EAAU1E,SAAW,IACzB,CACJ,CACJ,CACA+D,EAA+BI,EAAmBhD,gBAAkBiD,CACxE,CAEA,OAAO5B,QAAQC,QAAQO,EAC3B,CAEAc,8BAA8Bd,EAAmBrF,GAC7C,MAAMyE,EAAczE,EAAY0E,gBAChC,IAAK,IAAI9D,EAAI,EAAGA,EAAIyE,EAAkBxE,OAAQD,IAAK,CAC/C,MAAMqG,EAAS5B,EAAkBzE,GACjC,IACI,MAAMsG,EAAWzC,EAAYX,qBAAqBmD,EAAOrB,WACzDqB,EAAOE,SAAWD,EAASzD,IAC/B,CAAE,MAAO2D,GACLnH,KAAKN,aAAa0H,QAAQD,EAC9B,CACJ,CACJ,CAEAE,8BAA8BtH,EAA0BgF,GACpD,GAAIhF,EAAYuH,OAAOC,uBAAuB3G,SAAW,EAAG,CACxD,MACJ,CACA,MAAME,EAAaf,EAAYuH,OAAOC,uBAAuB,GAC7D,IAAIC,EACJ,GAAI1G,EAAW0C,OAAS,gCAAiC,CAErDgE,EAAQxH,KAAKyH,qCAAqC1H,EACtD,KAAO,CAEHyH,EAAQxH,KAAK0H,qCAAqC3H,EACtD,CACAgF,EAAOvD,KAAKgG,EAChB,CAEAE,qCAAqC3H,GACjC,MAAO,CACH2C,UAAWnD,EAAYoI,sBACvB7E,MAAO/C,EAAYuH,OAAOC,uBAAuBK,IAAK/G,IAC3C,CACH2C,KAAM,gCACN1C,WAAYD,KAI5B,CAEA4G,qCAAqC1H,GACjC,IAAKC,KAAKH,+BAAgC,CAGtCG,KAAKH,+BAAiC,CAClC6C,UAAWnD,EAAYoI,sBACvB7E,MAAO,CACH,CACIU,KAAM,gCACNqE,SAAU9H,EAAYuH,OAAOC,uBAAuBK,IAAKE,GACrD9H,KAAK+H,oCAAoCD,MAK7D,CACA,MAAME,EAAWhI,KAAKH,+BAA+BiD,MAAM,GAC3D9C,KAAKiI,+BAA+BlI,EAAaiI,GACjD,OAAOhI,KAAKH,8BAChB,CAEAoI,+BAA+BlI,EAA0BiI,GAIrD,SAASE,EAAaF,EAAoBlH,GACtC,MAAMqH,EAAqB,GAC3B,SAASC,EAAeC,EAAuBC,GAC3CD,EAAOA,EAAKE,QACZF,EAAK7G,KAAK8G,GACV,GAAIA,EAAK7D,eAAiB6D,EAAK7D,kBAAoB3D,EAAY,CAC3DqH,EAAM3G,KAAK6G,GACX,MACJ,CACA,IAAKC,EAAKT,SAAU,CAChB,MACJ,CACA,IAAK,MAAMW,KAAaF,EAAKT,SAAU,CACnCO,EAAeC,EAAMG,EACzB,CACJ,CACAJ,EAAe,GAAIJ,GACnB,OAAOG,CACX,CAGA,MAAMA,EAAQD,EAAaF,EAAUjI,EAAY0E,iBAGjD,IAAK,MAAM4D,KAAQF,EAAO,CACtB,IAAK,IAAIxH,EAAI,EAAGA,EAAI0H,EAAKzH,OAAS,IAAKD,EAAG,CAEtC,MAAM2H,EAAOD,EAAK1H,GAClB2H,EAAKG,SAAW,IACpB,CACJ,CACJ,CAEAV,oCAAoCD,GAChC,IAAID,EAAW,GACf,GAAIC,EAAcD,SAAU,CACxBA,EAAWC,EAAcD,SAASD,IAAKc,GAC5B1I,KAAK+H,oCAAoCW,GAExD,CACA,MAAO,CACHD,SAAU,MACVjF,KAAM,gCACNxC,MAAO8G,EAAchH,WAAWG,YAChCC,KAAM4G,EAAchH,WAAWI,KAC/BuD,cAAeA,IAAMqD,EAAchH,WACnC6H,aAAcb,EAAchH,WAAW8H,GACvCf,SAAUA,EACVgB,aAAc,WACV7I,KAAKyI,UAAYzI,KAAKyI,QAC1B,EAER,CAEA,eAAMK,CACFtE,EACAuE,EACAhJ,GAEA,MAAMiJ,EAAe,GAGrBA,EAAaxH,KAAKxB,KAAKwC,2BAA2BzC,IAGlDC,KAAKqH,8BAA8BtH,EAAaiJ,GAGhD,GACIxE,IAAgBzE,EAAYkJ,eAC5BzE,EAAYhB,OAASzD,EAAY0D,SAASiB,eAAeC,SAC3D,CACE3E,KAAKkJ,WAAWF,EAAcjJ,GAC9BC,KAAKmJ,cAAcH,GACnB,OAAOA,CACX,CAGA,IAAKD,EAAiB,CAClB/I,KAAKkJ,WAAWF,EAAcjJ,GAC9BC,KAAKmJ,cAAcH,GACnB,OAAOA,CACX,CAGA,MAAMI,QAA+BpJ,KAAKL,gCAAgCmJ,UACtEC,EACAhJ,GAEJiJ,EAAaxH,QAAQ4H,GAGrB,MAAMC,QAA8BrJ,KAAKJ,+BAA+BkJ,UAAUC,GAClFC,EAAaxH,QAAQ6H,GAGrB,MAAMC,QAAwBtJ,KAAKsE,gCAAgCyE,EAAiBhJ,GACpFiJ,EAAaxH,QAAQ8H,GAGrBtJ,KAAKkJ,WAAWF,EAAcjJ,GAC9BC,KAAKmJ,cAAcH,GACnB,OAAOA,CACX,CAEAG,cAAcpE,GAGV,IAAK,IAAIpE,EAAI,EAAGA,EAAIoE,EAAOnE,SAAUD,EAAG,CACpC,MAAM6G,EAAQzC,EAAOpE,GACrB,GAAI6G,EAAM2B,cAAe,CACrB3B,EAAM2B,cAAcxI,EACxB,KAAO,CACH6G,EAAM+B,WAAa5I,CACvB,CACJ,CACJ,CAEAuI,WAAWnE,EAAsBhF,GAC7B,MAAMyJ,EAAkD,CACpD,CAACjK,EAAYoD,aAAc,IAC3B,CAACpD,EAAYoI,wBAAyB,IACtC,CAACpI,EAAYkK,iBAAkB,IAC/B,CAAClK,EAAYmK,WAAY,IACzB,CAACnK,EAAYmG,WAAY,KAG7B,IAAK,IAAIiE,EAAQ,EAAGA,EAAQ5E,EAAOnE,SAAU+I,EAAO,CAChD,MAAMnC,EAAQzC,EAAO4E,GAGrBnC,EAAMoC,SAAWD,EAGjBnC,EAAMoC,UAAYJ,EAAchC,EAAM9E,WAGtC,GAAI8E,EAAM9E,YAAcnD,EAAYmG,WAAa8B,EAAM9E,YAAcnD,EAAYmK,UAAW,CACxF,GAAI3J,EAAY8J,yBAAyBC,kBAAkBtC,EAAM7B,WAAY,CACzE6B,EAAMoC,UAAY,GACtB,CACJ,CACJ,CACA7E,EAAOgF,KAAK,CAACC,EAAIC,IAAOD,EAAGJ,SAAWK,EAAGL,SAC7C,CAEAM,4BACIpJ,EACArB,GAEA,MAAMsF,EAAS,GAEf,MAAMuE,EAAkBtJ,KAAKmK,qCAAqCrJ,EAAYrB,GAC9EsF,EAAOvD,QAAQ8H,GAEf,MAAMF,EAAyBpJ,KAAKL,gCAAgCyK,sBAChEtJ,EACArB,GAEJsF,EAAOvD,QAAQ4H,GAEfrE,EAAOgF,KAAK,SAAUM,EAAGC,GACrB,OAAOD,EAAEzH,MAAM2H,cAAcD,EAAE1H,MACnC,GAEA5C,KAAKmJ,cAAcpE,GACnB,OAAOA,CACX,CAEAoF,qCACIK,EACA/K,GAEA,MAAMqF,EAAoB2F,OAAOC,OAAOF,EAAUG,sBAClD,MAAMvF,EAAoB,GAE1B,IAAK,MAAME,KAAoBR,EAAmB,CAC9C,IACKQ,EAAiBsF,MAAMxL,OAASkG,EAAiBsF,MAAMC,iBACvDvF,EAAuCxB,cAAgB,KAC1D,CACE,MAAM2B,EAAmB,IAAIrG,EAAM,CAC/BwD,MAAQ0C,EAAuCtE,MAC/C0B,UAAWnD,EAAYmG,UACvBC,UAAWL,EAAiBsD,GAC5B1B,SAAU5B,EAAiB9B,KAC3BsH,iBAAmBxF,EAAuCwF,mBAG9D,MAAM1E,EAAkCpG,KAAKiD,oCACzCxD,EAAuBgF,gBACvBhF,EAAuBc,YAAY,4BAEvC,IAAIe,EAAQ,EACZ,IAAK,IAAI+E,EAAI,EAAGC,EAAOF,EAAgCxF,OAAQyF,EAAIC,EAAMD,IAAK,CAC1E,MAAME,EAAqBH,EAAgCC,GAC3DE,EAAmBwE,QAAUtF,EAAiBsF,QAC9C,GAAIxE,EAAmBhD,iBAAmBkC,EAAiBE,UAAW,CAClErE,IACAmE,EAAiB3C,MAAM6D,OAAO,EAAG,EAAGJ,EACxC,CACJ,CACAd,EAAiB,SAAWnE,EAE5B8D,EAAkB5D,KAAKiE,EAC3B,CACJ,CAEA,OAAOL,CACX,CAEA4F,8BACIzG,EACAxE,EACA4F,EACAsF,GAEA,MAAMxF,EAAmB,IAAIrG,EAAM,CAC/BuG,UAAWA,EACXH,WAAYjB,GAAWgB,kBAG3B,GAAIhB,EAAW,CACX,IAAK,IAAItC,EAAI,EAAGA,EAAIsC,EAAUzB,MAAMlC,OAAQqB,IAAK,CAC7C,MAAM4D,EAAiBtB,EAAUzB,MAAMb,GACvC,MAAM6D,EAAO,IAAIzG,EAAU,CACvBgC,MAAOwE,EAAeG,aACtB7E,gBAAiB0E,EAAe1E,gBAChCH,MAAO6E,EAAeE,wBACtBxC,eAAgBgB,EAAUqB,MAAMD,YAEpCF,EAAiB3C,MAAMtB,KAAKsE,EAChC,CAGA,IAAIM,EACJ,GAAI6E,EAAS,CACT7E,EAAkC6E,CACtC,KAAO,CACH7E,EAAkCpG,KAAKiD,oCACnClD,EAAY0E,gBACZ1E,EAAYQ,YAAY,2BAEhC,CAEA,IAAK,IAAI8F,EAAI,EAAGC,EAAOF,EAAgCxF,OAAQyF,EAAIC,EAAMD,IAAK,CAC1E,MAAME,EAAqBH,EAAgCC,GAC3D,GAAIE,EAAmBhD,iBAAmBkC,EAAiBE,UAAW,CAClE,IAAIuF,EAAwB,MAC5B,IAAK,IAAItE,EAAI,EAAGC,EAAOpB,EAAiB3C,MAAMlC,OAAQgG,EAAIC,EAAMD,IAAK,CACjE,MAAME,EAAYrB,EAAiB3C,MAAM8D,GACzC,GAAIL,EAAmBpF,gBAAgB4F,OAAOD,EAAU3F,iBAAkB,CACtE2F,EAAU1E,SAAW,KACrB8I,EAAwB,IAC5B,CACJ,CACA,IAAKA,EAAuB,CAExBzF,EAAiB3C,MAAM6D,OAAOlB,EAAiB3C,MAAMlC,OAAQ,EAAG2F,GAChE,GAAIA,EAAmBpF,gBAAgBgK,YAAa,CAChD5E,EAAmB6E,SAAW,IAClC,KAAO,CACH7E,EAAmB8E,OAAS,KAC5B9E,EAAmBlF,MAAQ,GAC3BkF,EAAmBvC,WAAa,EACpC,CACJ,KAAO,CACHuC,EAAmB8E,OAAS,IAChC,CACJ,CACJ,CACJ,CAEA,OAAO5F,CACX,CAEA6F,4BAA4BvL,GACxB,MAAMyK,EAAYzK,EAAY0E,gBAC9B,MAAMK,EAAoB2F,OAAOC,OAAOF,EAAUG,sBAClD,IAAIY,EAAkB,MAGtB,IAAK,MAAMjG,KAAoBR,EAAmB,CAC9C,GAAIQ,EAAiBsF,MAAO,CACxB,GAAItF,EAAiBsF,MAAMxL,OAASkG,EAAiBsF,MAAMC,eAAgB,CAEvEU,EAAkB,KAClB,KACJ,CACJ,CACJ,CACA,OAAOA,CACX,CAEAC,0BACIxL,KAAKL,gCAAgC6L,0BACrCxL,KAAKJ,+BAA+B4L,yBACxC,CAEAC,UACIzL,KAAKL,gCAAgC8L,UACrCzL,KAAKL,gCAAkC,KACvCK,KAAKJ,+BAA+B6L,UACpCzL,KAAKJ,+BAAiC,IAC1C,EACH,OAAAJ,CAAA","ignoreList":[]}