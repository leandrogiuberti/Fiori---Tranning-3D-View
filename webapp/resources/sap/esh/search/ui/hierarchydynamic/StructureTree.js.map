{"version":3,"file":"StructureTree.js","names":["sap","ui","define","StructureTreeNode","id","label","tree","childNodes","childNodeMap","parentNode","constructor","properties","this","addChildNode","node","push","update","sinaNode","i","length","sinaChildNode","childNode","createNode","StructureTree","nodeMap","options","rootNode","getNode","Error","updateFromHierarchyNodePath","hierarchyNodePath","hierarchyNode","path"],"sources":["StructureTree.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/*!\n * When manipulating the filter conditions (for instance changing the search term) hierarchy nodes may appear/disappear.\n * In case a filter is set for a disappeared hierarchy node we want to show the hierarchy node (without count) anyway.\n * The structure tree is always updated with hierarchy structure information from the server.\n * In case a node is not included in the server response the node may be taken from the structure tree.\n */\n\nimport { HierarchyNode } from \"../sinaNexTS/sina/HierarchyNode\";\nimport { HierarchyNodePath } from \"../sinaNexTS/sina/HierarchyNodePath\";\n\nexport interface StructureTreeNodeOptions {\n    id: string;\n    label: string;\n    tree?: StructureTree;\n}\nexport class StructureTreeNode {\n    id: string;\n    label: string;\n    tree: StructureTree;\n    childNodes: Array<StructureTreeNode>;\n    childNodeMap: { [key: string]: StructureTreeNode };\n    parentNode: StructureTreeNode;\n\n    constructor(properties: StructureTreeNodeOptions) {\n        this.id = properties.id;\n        this.label = properties.label;\n        this.tree = properties.tree;\n        this.childNodes = [];\n        this.childNodeMap = {};\n        this.parentNode = null;\n    }\n\n    addChildNode(node: StructureTreeNode) {\n        this.childNodes.push(node);\n        this.childNodeMap[node.id] = node;\n        node.parentNode = this;\n    }\n\n    update(sinaNode: HierarchyNode) {\n        for (let i = 0; i < sinaNode.childNodes.length; ++i) {\n            const sinaChildNode = sinaNode.childNodes[i];\n            let childNode = this.childNodeMap[sinaChildNode.id];\n            if (!childNode) {\n                childNode = this.tree.createNode({ id: sinaChildNode.id, label: sinaChildNode.label });\n                this.addChildNode(childNode);\n            }\n            childNode.update(sinaChildNode);\n        }\n    }\n}\n\nexport interface StructureTreeOptions {\n    rootNode: { id: string; label: string };\n}\nexport default class StructureTree {\n    node: StructureTreeNode;\n    nodeMap: { [key: string]: StructureTreeNode };\n\n    constructor(options: StructureTreeOptions) {\n        this.nodeMap = {};\n        this.node = this.createNode(options.rootNode);\n    }\n\n    createNode(properties: StructureTreeNodeOptions): StructureTreeNode {\n        properties.tree = this;\n        const node = new StructureTreeNode(properties);\n        this.nodeMap[properties.id] = node;\n        return node;\n    }\n\n    getNode(id: string): StructureTreeNode {\n        return this.nodeMap[id];\n    }\n\n    update(sinaNode: HierarchyNode): void {\n        const node = this.nodeMap[sinaNode.id];\n        if (!node) {\n            throw new Error(`structure tree update failed, node does not exist: ${sinaNode?.id}`);\n        }\n        node.update(sinaNode);\n    }\n\n    updateFromHierarchyNodePath(hierarchyNodePath: HierarchyNodePath) {\n        let parentNode: StructureTreeNode;\n        for (const hierarchyNode of hierarchyNodePath.path) {\n            let node = this.getNode(hierarchyNode.id);\n            if (!node) {\n                node = this.createNode({\n                    id: hierarchyNode.id,\n                    label: hierarchyNode.label || hierarchyNode.id,\n                });\n                if (!parentNode) {\n                    throw \"program error, parent node not set\";\n                }\n                parentNode.addChildNode(node);\n            }\n            parentNode = node;\n        }\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2BAoBO,MAAMC,EACTC,GACAC,MACAC,KACAC,WACAC,aACAC,WAEAC,YAAYC,GACRC,KAAKR,GAAKO,EAAWP,GACrBQ,KAAKP,MAAQM,EAAWN,MACxBO,KAAKN,KAAOK,EAAWL,KACvBM,KAAKL,WAAa,GAClBK,KAAKJ,aAAe,CAAC,EACrBI,KAAKH,WAAa,IACtB,CAEAI,aAAaC,GACTF,KAAKL,WAAWQ,KAAKD,GACrBF,KAAKJ,aAAaM,EAAKV,IAAMU,EAC7BA,EAAKL,WAAaG,IACtB,CAEAI,OAAOC,GACH,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASV,WAAWY,SAAUD,EAAG,CACjD,MAAME,EAAgBH,EAASV,WAAWW,GAC1C,IAAIG,EAAYT,KAAKJ,aAAaY,EAAchB,IAChD,IAAKiB,EAAW,CACZA,EAAYT,KAAKN,KAAKgB,WAAW,CAAElB,GAAIgB,EAAchB,GAAIC,MAAOe,EAAcf,QAC9EO,KAAKC,aAAaQ,EACtB,CACAA,EAAUL,OAAOI,EACrB,CACJ,EAMW,MAAMG,EACjBT,KACAU,QAEAd,YAAYe,GACRb,KAAKY,QAAU,CAAC,EAChBZ,KAAKE,KAAOF,KAAKU,WAAWG,EAAQC,SACxC,CAEAJ,WAAWX,GACPA,EAAWL,KAAOM,KAClB,MAAME,EAAO,IAAIX,EAAkBQ,GACnCC,KAAKY,QAAQb,EAAWP,IAAMU,EAC9B,OAAOA,CACX,CAEAa,QAAQvB,GACJ,OAAOQ,KAAKY,QAAQpB,EACxB,CAEAY,OAAOC,GACH,MAAMH,EAAOF,KAAKY,QAAQP,EAASb,IACnC,IAAKU,EAAM,CACP,MAAM,IAAIc,MAAM,sDAAsDX,GAAUb,KACpF,CACAU,EAAKE,OAAOC,EAChB,CAEAY,4BAA4BC,GACxB,IAAIrB,EACJ,IAAK,MAAMsB,KAAiBD,EAAkBE,KAAM,CAChD,IAAIlB,EAAOF,KAAKe,QAAQI,EAAc3B,IACtC,IAAKU,EAAM,CACPA,EAAOF,KAAKU,WAAW,CACnBlB,GAAI2B,EAAc3B,GAClBC,MAAO0B,EAAc1B,OAAS0B,EAAc3B,KAEhD,IAAKK,EAAY,CACb,KAAM,oCACV,CACAA,EAAWI,aAAaC,EAC5B,CACAL,EAAaK,CACjB,CACJ,EACHS,EAAApB,oBAAA,OAAAoB,CAAA","ignoreList":[]}