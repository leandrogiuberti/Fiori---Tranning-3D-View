{"version":3,"file":"SearchHierarchyDynamicFacet.js","names":["sap","ui","define","__TreeNodeFactory","__SearchHierarchyDynamicTreeNode","__StructureTree","___controls_facets_FacetTypeUI","_interopRequireDefault","obj","__esModule","default","TreeNodeFactory","SearchHierarchyDynamicTreeNode","StructureTree","FacetTypeUI","SearchHierarchyDynamicFacet","static","model","sina","dataSource","attributeId","title","filter","modelPathPrefix","isShowMoreDialog","handleSetFilter","filterCount","dimension","facetType","facetIndex","structureTree","notDisplayedFilterConditions","treeNodeFactory","rootTreeNode","constructor","properties","this","rootCondition","getAttributeConditions","length","Hierarchy","rootNode","id","rootNodeId","label","create","rootTreeNodePath","treeNodeConstructor","busyIndicator","createRootTreeNode","count","facet","setFilter","setHandleSetFilter","setFacetIndex","index","setRootTreeNodePath","updateStructureTree","sinaNode","update","activateFilters","fireSearchQuery","notifyFilterChanged","updateFromResultSet","resultSet","childTreeNodes","childNode","node","childNodes","push","createTreeNode","expandable","hasChildren","updateChildren","Promise","resolve","getComplexConditionOfFacet","i","conditions","complexCondition","containsAttribute","getFilterConditions","filterConditions","condition","mixinFilterNodes","hasFilter","visitChildNodesRecursively","treeNode","treeNodeId","filterCondition","value","getTreeNode","j","notDisplayedFilterCondition","addMissingFilterNode","splice","calculateCheckboxStatus","calculateFilterCount","setProperty","getOrCreateTreeNode","structureTreeNode","isVisible","parentNode","Error","parentTreeNode","addChildTreeNode","getNode","selected","partiallySelected","leafNodes","hasChildNodes","leafNode","calculateCheckboxStatusFromLeafNode","markPartiallySelected","getParentTreeNode","handleModelUpdate","updateUI","delete","updateNodesFromHierarchyNodePaths","hierarchyNodePaths","hierarchyNodePath","name","updateFromHierarchyNodePath"],"sources":["SearchHierarchyDynamicFacet.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/*!\n * The SearchHierarchyDynamicFacet class is used for the model representation of dynamic hierarchy facets.\n * * The corresponding UI control is SearchFacetHierarchyDynamic.\n */\n\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ComplexCondition } from \"../sinaNexTS/sina/ComplexCondition\";\nimport { Condition } from \"../sinaNexTS/sina/Condition\";\nimport { DataSource } from \"../sinaNexTS/sina/DataSource\";\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { HierarchyNode } from \"../sinaNexTS/sina/HierarchyNode\";\nimport { HierarchyNodePath } from \"../sinaNexTS/sina/HierarchyNodePath\";\nimport { HierarchyResultSet } from \"../sinaNexTS/sina/HierarchyResultSet\";\nimport { SimpleCondition } from \"../sinaNexTS/sina/SimpleCondition\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport TreeNodeFactory from \"../tree/TreeNodeFactory\";\nimport SearchHierarchyDynamicTreeNode from \"./SearchHierarchyDynamicTreeNode\";\nimport StructureTree, { StructureTreeNode } from \"./StructureTree\";\nimport { FacetTypeUI } from \"../controls/facets/FacetTypeUI\";\n\ntype SetFilterCallback = (\n    node: SearchHierarchyDynamicTreeNode,\n    set: boolean,\n    filterCondition: SimpleCondition\n) => void;\nexport interface SearchHierarchyDynamicFacetOptions {\n    model: SearchModel;\n    sina: Sina;\n    dataSource: DataSource;\n    attributeId: string;\n    title: string;\n    filter: Filter;\n    modelPathPrefix: string;\n    isShowMoreDialog?: boolean;\n    handleSetFilter?: SetFilterCallback;\n}\nexport default class SearchHierarchyDynamicFacet {\n    public static readonly rootNodeId = \"$$ROOT$$\";\n\n    model: SearchModel;\n    sina: Sina;\n    dataSource: DataSource;\n    attributeId: string;\n    title: string;\n    filter: Filter;\n    modelPathPrefix: string;\n    isShowMoreDialog: boolean;\n    handleSetFilter: SetFilterCallback;\n    filterCount?: number;\n    dimension: string;\n    facetType: string;\n    facetIndex: number;\n    structureTree: StructureTree;\n    notDisplayedFilterConditions: Array<any>;\n    treeNodeFactory: TreeNodeFactory<SearchHierarchyDynamicTreeNode, typeof SearchHierarchyDynamicTreeNode>;\n    rootTreeNode: SearchHierarchyDynamicTreeNode;\n\n    constructor(properties: SearchHierarchyDynamicFacetOptions) {\n        this.model = properties.model;\n        this.sina = properties.sina;\n        this.dataSource = properties.dataSource;\n        this.attributeId = properties.attributeId;\n        this.dimension = this.attributeId; // alias for compatability with the simple attribute facets\n        this.title = properties.title;\n        this.filter = properties.filter;\n        this.modelPathPrefix = properties.modelPathPrefix;\n        this.isShowMoreDialog = properties.isShowMoreDialog;\n        this.handleSetFilter = properties.handleSetFilter;\n        this.filterCount = (this.filter.rootCondition as ComplexCondition).getAttributeConditions(\n            this.attributeId\n        ).length;\n        this.facetType = FacetTypeUI.Hierarchy;\n        this.facetIndex = -1;\n        this.structureTree = new StructureTree({\n            rootNode: { id: SearchHierarchyDynamicFacet.rootNodeId, label: \"root\" },\n        });\n        this.notDisplayedFilterConditions = [];\n        this.treeNodeFactory = TreeNodeFactory.create<\n            SearchHierarchyDynamicTreeNode,\n            typeof SearchHierarchyDynamicTreeNode\n        >({\n            model: this.model,\n            rootTreeNodePath: `/facets/${this.facetIndex}/rootTreeNode`, // updated in setFacetIndex\n            treeNodeConstructor: SearchHierarchyDynamicTreeNode,\n            busyIndicator: this.model.busyIndicator,\n        });\n        this.rootTreeNode = this.treeNodeFactory.createRootTreeNode({\n            id: SearchHierarchyDynamicFacet.rootNodeId,\n            label: \"Root\",\n            count: 0,\n            facet: this,\n        });\n    }\n\n    setFilter(filter: Filter) {\n        this.filter = filter;\n    }\n\n    setHandleSetFilter(handleSetFilter: SetFilterCallback) {\n        this.handleSetFilter = handleSetFilter;\n    }\n\n    setFacetIndex(index: number) {\n        this.facetIndex = index;\n        this.treeNodeFactory.setRootTreeNodePath(`${this.modelPathPrefix}/${this.facetIndex}/rootTreeNode`);\n    }\n\n    updateStructureTree(sinaNode: HierarchyNode): void {\n        this.structureTree.update(sinaNode);\n    }\n\n    async activateFilters(): Promise<void> {\n        try {\n            await this.model.fireSearchQuery();\n            this.model.notifyFilterChanged();\n        } finally {\n            //\n        }\n    }\n\n    updateFromResultSet(resultSet: HierarchyResultSet): Promise<void> {\n        const childTreeNodes: Array<SearchHierarchyDynamicTreeNode> = [];\n        for (const childNode of resultSet.node.childNodes) {\n            childTreeNodes.push(\n                this.treeNodeFactory.createTreeNode({\n                    id: childNode.id,\n                    label: childNode.label,\n                    count: childNode.count,\n                    facet: this,\n                    expandable: childNode.hasChildren,\n                })\n            );\n        }\n        this.rootTreeNode.updateChildren(childTreeNodes);\n        this.updateStructureTree(resultSet.node);\n        return Promise.resolve();\n    }\n\n    getComplexConditionOfFacet(): ComplexCondition {\n        for (let i = 0; i < (this.filter.rootCondition as ComplexCondition).conditions.length; ++i) {\n            const complexCondition = (this.filter.rootCondition as ComplexCondition).conditions[\n                i\n            ] as ComplexCondition;\n            if (complexCondition.containsAttribute(this.attributeId)) {\n                return complexCondition;\n            }\n        }\n        return null;\n    }\n\n    getFilterConditions(): Array<Condition> {\n        const filterConditions = [];\n        const complexCondition = this.getComplexConditionOfFacet() as ComplexCondition;\n        if (!complexCondition) {\n            return filterConditions;\n        }\n        for (let i = 0; i < complexCondition.conditions.length; ++i) {\n            const condition = complexCondition.conditions[i];\n            filterConditions.push(condition);\n        }\n        return filterConditions;\n    }\n\n    mixinFilterNodes(): void {\n        // reset filter flag for complete tree\n        this.rootTreeNode.hasFilter = false;\n        this.rootTreeNode.visitChildNodesRecursively(function (treeNode: SearchHierarchyDynamicTreeNode) {\n            treeNode.hasFilter = false;\n        });\n        // update filter flag from filter conditions\n        let treeNodeId;\n        const notDisplayedFilterConditions = [];\n        const filterConditions = this.getFilterConditions();\n        for (let i = 0; i < filterConditions.length; ++i) {\n            const filterCondition = filterConditions[i];\n            treeNodeId = (filterCondition as any).value; // ToDo\n            const treeNode = this.treeNodeFactory.getTreeNode(treeNodeId);\n            if (treeNode) {\n                treeNode.hasFilter = true;\n            } else {\n                notDisplayedFilterConditions.push(filterCondition);\n            }\n        }\n        // add tree nodes for filters not in tree\n        for (let j = 0; j < notDisplayedFilterConditions.length; ++j) {\n            const notDisplayedFilterCondition = notDisplayedFilterConditions[j];\n            treeNodeId = notDisplayedFilterCondition.value;\n            // try to add filter node via structure tree\n            if (this.addMissingFilterNode(treeNodeId)) {\n                // in case of success delete from notDisplayedFilterConditions list\n                notDisplayedFilterConditions.splice(j, 1);\n                j--;\n            }\n        }\n        this.notDisplayedFilterConditions = notDisplayedFilterConditions;\n        this.calculateCheckboxStatus();\n        this.calculateFilterCount();\n    }\n\n    calculateFilterCount() {\n        const filterCount = (this.filter.rootCondition as ComplexCondition).getAttributeConditions(\n            this.attributeId\n        ).length;\n        this.model.setProperty(`${this.modelPathPrefix}/${this.facetIndex}/filterCount`, filterCount);\n    }\n\n    addMissingFilterNode(id: string): boolean {\n        const getOrCreateTreeNode = (\n            structureTreeNode: StructureTreeNode\n        ): SearchHierarchyDynamicTreeNode => {\n            let treeNode = this.treeNodeFactory.getTreeNode(structureTreeNode.id);\n            if (treeNode) {\n                if (treeNode.isVisible()) {\n                    return treeNode;\n                } else {\n                    return null;\n                }\n            }\n            if (!structureTreeNode.parentNode) {\n                throw new Error(\"program error parent node missing for \" + structureTreeNode.id);\n            }\n            const parentTreeNode = getOrCreateTreeNode(structureTreeNode.parentNode);\n            if (!parentTreeNode) {\n                return null;\n            }\n            treeNode = this.treeNodeFactory.createTreeNode({\n                id: structureTreeNode.id,\n                label: structureTreeNode.label,\n                count: 0,\n                facet: this,\n            });\n            parentTreeNode.addChildTreeNode(treeNode);\n            return treeNode;\n        };\n\n        const structureTreeNode = this.structureTree.getNode(id);\n        if (!structureTreeNode) {\n            return false;\n        }\n        const treeNode = getOrCreateTreeNode(structureTreeNode);\n        if (!treeNode) {\n            return false;\n        }\n        treeNode.hasFilter = true;\n        return true;\n    }\n\n    calculateCheckboxStatus(): void {\n        // reset\n        this.rootTreeNode.selected = false;\n        this.rootTreeNode.partiallySelected = false;\n        this.rootTreeNode.visitChildNodesRecursively(function (node: SearchHierarchyDynamicTreeNode) {\n            node.selected = false;\n            node.partiallySelected = false;\n        });\n        // collect leafs\n        const leafNodes = [];\n        if (!this.rootTreeNode.hasChildNodes()) {\n            leafNodes.push(this.rootTreeNode);\n        }\n        this.rootTreeNode.visitChildNodesRecursively(function (node: SearchHierarchyDynamicTreeNode) {\n            if (!node.hasChildNodes()) {\n                leafNodes.push(node);\n            }\n        });\n        // calculate selected and partiallySelected\n        for (let i = 0; i < leafNodes.length; ++i) {\n            const leafNode = leafNodes[i];\n            this.calculateCheckboxStatusFromLeafNode(leafNode);\n        }\n    }\n\n    calculateCheckboxStatusFromLeafNode(leafNode: SearchHierarchyDynamicTreeNode): void {\n        let node = leafNode;\n        let markPartiallySelected = false;\n        while (node) {\n            if (node.selected && node.partiallySelected) {\n                return;\n            }\n            if (node.hasFilter) {\n                node.selected = true;\n                node.partiallySelected = false;\n                markPartiallySelected = true;\n            } else {\n                if (markPartiallySelected) {\n                    node.selected = true;\n                    node.partiallySelected = true;\n                }\n            }\n            node = node.getParentTreeNode() as SearchHierarchyDynamicTreeNode;\n        }\n    }\n    handleModelUpdate() {\n        this.treeNodeFactory.updateUI();\n    }\n\n    delete() {\n        this.treeNodeFactory.delete();\n    }\n\n    updateNodesFromHierarchyNodePaths(hierarchyNodePaths: Array<HierarchyNodePath>) {\n        for (const hierarchyNodePath of hierarchyNodePaths) {\n            if (hierarchyNodePath.name !== this.attributeId) {\n                continue;\n            }\n            this.structureTree.updateFromHierarchyNodePath(hierarchyNodePath);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}