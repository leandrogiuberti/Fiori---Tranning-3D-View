{"version":3,"file":"SearchHierarchyDynamicFacetsFormatter.js","names":["sap","ui","define","___sinaNexTS_sina_HierarchyDisplayType","__SearchHierarchyDynamicFacet","_interopRequireDefault","obj","__esModule","default","HierarchyDisplayType","SearchHierarchyDynamicFacet","SearchHierarchyDynamicFacetsFormatter","testCounter","facetMap","facetFromMetadataMap","model","constructor","this","getFacetAttributes","resultSet","facetAttributes","i","facets","length","facetResultSet","type","sina","FacetType","Hierarchy","facetAttribute","query","attributeId","indexOf","push","filterFacetAttributes","filter","rootCondition","getAttributes","j","filterFacetAttribute","filterFacetAttributeMetadata","dataSource","getAttributeMetadata","isHierarchy","usage","Facet","displayOrder","AdvancedSearch","getFacetFromResultSet","getFacet","searchModel","attributeMetadata","facet","title","label","getProperty","modelPathPrefix","isShowMoreDialog","setFilter","containsAttribute","hasExpandedChildNode","rootTreeNode","treeNodeFactory","updateRecursively","updateFromResultSet","updateNodesFromHierarchyNodePaths","hierarchyNodePaths","mixinFilterNodes","getFacets","config","FF_dynamicHierarchyFacets","Promise","resolve","facetPromise","all","then","result","Array","from","destroy","facetAttributeId","delete","handleDataSourceChanged","getFacetFromMetadata","searchFacetDialogModel","getFacetsFromMetadata","FF_dynamicHierarchyFacetsInShowMore","attributesMetadata","hierarchyDisplayType","DynamicHierarchyFacet","id"],"sources":["SearchHierarchyDynamicFacetsFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/*!\n * The SearchHierarchyDynamicFacetsFormatter is called from the search model after each search.\n * The formatter assembles the dynamic facets from the sina search result.\n */\n\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport SearchFacetDialogModel from \"../SearchFacetDialogModel\";\nimport { DataSource } from \"../sinaNexTS/sina/DataSource\";\nimport { FacetResultSet } from \"../sinaNexTS/sina/FacetResultSet\";\nimport { HierarchyDisplayType } from \"../sinaNexTS/sina/HierarchyDisplayType\";\nimport { HierarchyResultSet } from \"../sinaNexTS/sina/HierarchyResultSet\";\nimport { SearchResultSet } from \"../sinaNexTS/sina/SearchResultSet\";\nimport SearchHierarchyDynamicFacet from \"./SearchHierarchyDynamicFacet\";\nimport { AttributeMetadata } from \"../sinaNexTS/sina/AttributeMetadata\";\n\nexport default class SearchHierarchyDynamicFacetsFormatter {\n    testCounter: number;\n    facetMap: { [key: string]: SearchHierarchyDynamicFacet };\n    facetFromMetadataMap: { [key: string]: SearchHierarchyDynamicFacet };\n    model: SearchModel;\n\n    constructor(model: SearchModel) {\n        this.testCounter = 0;\n        this.facetMap = {};\n        this.facetFromMetadataMap = {};\n        this.model = model;\n    }\n\n    getFacetAttributes(resultSet: SearchResultSet): Array<any> {\n        // display facets which are included in the server response\n        const facetAttributes = [];\n        for (let i = 0; i < resultSet.facets.length; ++i) {\n            const facetResultSet = resultSet.facets[i];\n            if (facetResultSet.type !== resultSet.sina.FacetType.Hierarchy) {\n                continue;\n            }\n            if (!facetResultSet[\"node\"]) {\n                // ToDo\n                continue; // TODO: server error?\n            }\n            const facetAttribute = (facetResultSet.query as any).attributeId; // ToDo\n            if (facetAttributes.indexOf(facetAttribute) >= 0) {\n                continue;\n            }\n            facetAttributes.push(facetAttribute);\n        }\n\n        // display facet for which filters are set\n        const filterFacetAttributes = resultSet.query.filter.rootCondition.getAttributes();\n        for (let j = 0; j < filterFacetAttributes.length; ++j) {\n            const filterFacetAttribute = filterFacetAttributes[j];\n            const filterFacetAttributeMetadata = resultSet.query.filter.dataSource.getAttributeMetadata(\n                filterFacetAttribute\n            ) as AttributeMetadata;\n            if (\n                !(\n                    filterFacetAttributeMetadata.isHierarchy &&\n                    filterFacetAttributeMetadata.usage &&\n                    ((filterFacetAttributeMetadata.usage.Facet &&\n                        typeof filterFacetAttributeMetadata.usage.Facet.displayOrder === \"number\") ||\n                        (filterFacetAttributeMetadata.usage.AdvancedSearch &&\n                            typeof filterFacetAttributeMetadata.usage.AdvancedSearch.displayOrder ===\n                                \"number\"))\n                )\n            ) {\n                continue;\n            }\n            if (facetAttributes.indexOf(filterFacetAttribute) >= 0) {\n                continue;\n            }\n            facetAttributes.push(filterFacetAttribute);\n        }\n        return facetAttributes;\n    }\n\n    getFacetFromResultSet(resultSet: SearchResultSet, attributeId: string): FacetResultSet {\n        for (let i = 0; i < resultSet.facets.length; ++i) {\n            const facetResultSet = resultSet.facets[i];\n            if (attributeId === (facetResultSet.query as any).attributeId) {\n                // ToDo\n                return facetResultSet;\n            }\n        }\n    }\n\n    async getFacet(\n        resultSet: SearchResultSet,\n        searchModel: SearchModel,\n        attributeId: string\n    ): Promise<SearchHierarchyDynamicFacet> {\n        const attributeMetadata = resultSet.query.filter.dataSource.getAttributeMetadata(\n            attributeId\n        ) as AttributeMetadata;\n        let facet = this.facetMap[attributeId];\n        if (!facet) {\n            facet = new SearchHierarchyDynamicFacet({\n                model: searchModel,\n                sina: resultSet.sina,\n                dataSource: resultSet.query.filter.dataSource,\n                attributeId: attributeId,\n                title: attributeMetadata.label,\n                filter: this.model.getProperty(\"/uiFilter\"),\n                modelPathPrefix: \"/facets\",\n                isShowMoreDialog: false,\n            });\n            this.facetMap[attributeId] = facet;\n        }\n        facet.setFilter(this.model.getProperty(\"/uiFilter\"));\n        const containsAttribute = resultSet.query.filter.rootCondition.containsAttribute(attributeId);\n        const hasExpandedChildNode = facet.rootTreeNode && facet.rootTreeNode.hasExpandedChildNode();\n        if (containsAttribute || hasExpandedChildNode) {\n            await facet.treeNodeFactory.updateRecursively();\n        } else {\n            const facetResultSet = this.getFacetFromResultSet(resultSet, attributeId);\n            facet.updateFromResultSet(facetResultSet as HierarchyResultSet);\n        }\n        facet.updateNodesFromHierarchyNodePaths(resultSet.hierarchyNodePaths);\n        facet.mixinFilterNodes();\n        return facet;\n    }\n\n    getFacets(resultSet: SearchResultSet, searchModel: SearchModel): any {\n        if (!this.model.config.FF_dynamicHierarchyFacets) {\n            return Promise.resolve([]);\n        }\n        // determine which facets to be displayed\n        const facetAttributes = this.getFacetAttributes(resultSet);\n        // create/update facets\n        const facets = [];\n        for (let i = 0; i < facetAttributes.length; ++i) {\n            const facetAttribute = facetAttributes[i];\n            const facetPromise = this.getFacet(resultSet, searchModel, facetAttribute);\n            facets.push(facetPromise);\n        }\n        return Promise.all(facets).then(function (result) {\n            return Array.from(result);\n        });\n    }\n\n    destroy(): void {\n        for (const facetAttributeId in this.facetMap) {\n            const facet = this.facetMap[facetAttributeId];\n            facet.delete();\n        }\n        this.facetMap = {};\n        for (const facetAttributeId in this.facetFromMetadataMap) {\n            const facet = this.facetFromMetadataMap[facetAttributeId];\n            facet.delete();\n        }\n        this.facetFromMetadataMap = {};\n    }\n\n    handleDataSourceChanged(): void {\n        this.destroy();\n    }\n\n    getFacetFromMetadata(\n        attributeId: string,\n        dataSource: DataSource,\n        searchFacetDialogModel: SearchFacetDialogModel\n    ): SearchHierarchyDynamicFacet {\n        let facet = this.facetFromMetadataMap[attributeId];\n        if (facet) {\n            return facet;\n        }\n        const attributeMetadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n        facet = new SearchHierarchyDynamicFacet({\n            model: searchFacetDialogModel,\n            sina: dataSource.sina,\n            dataSource: dataSource,\n            attributeId: attributeId,\n            title: attributeMetadata.label,\n            filter: this.model.getProperty(\"/uiFilter\"),\n            modelPathPrefix: \"/facetDialog\",\n            isShowMoreDialog: true,\n        });\n        this.facetFromMetadataMap[attributeId] = facet;\n        return facet;\n    }\n\n    getFacetsFromMetadata(\n        dataSource: DataSource,\n        searchFacetDialogModel: SearchFacetDialogModel\n    ): Array<SearchHierarchyDynamicFacet> {\n        const facets: Array<SearchHierarchyDynamicFacet> = [];\n        if (!searchFacetDialogModel.config.FF_dynamicHierarchyFacetsInShowMore) {\n            return facets;\n        }\n        for (const attributeMetadata of dataSource.attributesMetadata) {\n            if (\n                (attributeMetadata as AttributeMetadata).isHierarchy &&\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.DynamicHierarchyFacet\n            ) {\n                facets.push(\n                    this.getFacetFromMetadata(attributeMetadata.id, dataSource, searchFacetDialogModel)\n                );\n            }\n        }\n        return facets;\n    }\n}\n"],"mappings":"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","ignoreList":[]}