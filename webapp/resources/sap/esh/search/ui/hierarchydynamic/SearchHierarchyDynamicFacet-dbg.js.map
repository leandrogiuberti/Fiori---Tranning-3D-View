{"version":3,"file":"SearchHierarchyDynamicFacet-dbg.js","names":["sap","ui","define","__TreeNodeFactory","__SearchHierarchyDynamicTreeNode","__StructureTree","___controls_facets_FacetTypeUI","_interopRequireDefault","obj","__esModule","default","TreeNodeFactory","SearchHierarchyDynamicTreeNode","StructureTree","FacetTypeUI","SearchHierarchyDynamicFacet","rootNodeId","model","sina","dataSource","attributeId","title","filter","modelPathPrefix","isShowMoreDialog","handleSetFilter","filterCount","dimension","facetType","facetIndex","structureTree","notDisplayedFilterConditions","treeNodeFactory","rootTreeNode","constructor","properties","rootCondition","getAttributeConditions","length","Hierarchy","rootNode","id","label","create","rootTreeNodePath","treeNodeConstructor","busyIndicator","createRootTreeNode","count","facet","setFilter","setHandleSetFilter","setFacetIndex","index","setRootTreeNodePath","updateStructureTree","sinaNode","update","activateFilters","fireSearchQuery","notifyFilterChanged","updateFromResultSet","resultSet","childTreeNodes","childNode","node","childNodes","push","createTreeNode","expandable","hasChildren","updateChildren","Promise","resolve","getComplexConditionOfFacet","i","conditions","complexCondition","containsAttribute","getFilterConditions","filterConditions","condition","mixinFilterNodes","hasFilter","visitChildNodesRecursively","treeNode","treeNodeId","filterCondition","value","getTreeNode","j","notDisplayedFilterCondition","addMissingFilterNode","splice","calculateCheckboxStatus","calculateFilterCount","setProperty","getOrCreateTreeNode","structureTreeNode","isVisible","parentNode","Error","parentTreeNode","addChildTreeNode","getNode","selected","partiallySelected","leafNodes","hasChildNodes","leafNode","calculateCheckboxStatusFromLeafNode","markPartiallySelected","getParentTreeNode","handleModelUpdate","updateUI","delete","updateNodesFromHierarchyNodePaths","hierarchyNodePaths","hierarchyNodePath","name","updateFromHierarchyNodePath"],"sources":["SearchHierarchyDynamicFacet.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/*!\n * The SearchHierarchyDynamicFacet class is used for the model representation of dynamic hierarchy facets.\n * * The corresponding UI control is SearchFacetHierarchyDynamic.\n */\n\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { ComplexCondition } from \"../sinaNexTS/sina/ComplexCondition\";\nimport { Condition } from \"../sinaNexTS/sina/Condition\";\nimport { DataSource } from \"../sinaNexTS/sina/DataSource\";\nimport { Filter } from \"../sinaNexTS/sina/Filter\";\nimport { HierarchyNode } from \"../sinaNexTS/sina/HierarchyNode\";\nimport { HierarchyNodePath } from \"../sinaNexTS/sina/HierarchyNodePath\";\nimport { HierarchyResultSet } from \"../sinaNexTS/sina/HierarchyResultSet\";\nimport { SimpleCondition } from \"../sinaNexTS/sina/SimpleCondition\";\nimport { Sina } from \"../sinaNexTS/sina/Sina\";\nimport TreeNodeFactory from \"../tree/TreeNodeFactory\";\nimport SearchHierarchyDynamicTreeNode from \"./SearchHierarchyDynamicTreeNode\";\nimport StructureTree, { StructureTreeNode } from \"./StructureTree\";\nimport { FacetTypeUI } from \"../controls/facets/FacetTypeUI\";\n\ntype SetFilterCallback = (\n    node: SearchHierarchyDynamicTreeNode,\n    set: boolean,\n    filterCondition: SimpleCondition\n) => void;\nexport interface SearchHierarchyDynamicFacetOptions {\n    model: SearchModel;\n    sina: Sina;\n    dataSource: DataSource;\n    attributeId: string;\n    title: string;\n    filter: Filter;\n    modelPathPrefix: string;\n    isShowMoreDialog?: boolean;\n    handleSetFilter?: SetFilterCallback;\n}\nexport default class SearchHierarchyDynamicFacet {\n    public static readonly rootNodeId = \"$$ROOT$$\";\n\n    model: SearchModel;\n    sina: Sina;\n    dataSource: DataSource;\n    attributeId: string;\n    title: string;\n    filter: Filter;\n    modelPathPrefix: string;\n    isShowMoreDialog: boolean;\n    handleSetFilter: SetFilterCallback;\n    filterCount?: number;\n    dimension: string;\n    facetType: string;\n    facetIndex: number;\n    structureTree: StructureTree;\n    notDisplayedFilterConditions: Array<any>;\n    treeNodeFactory: TreeNodeFactory<SearchHierarchyDynamicTreeNode, typeof SearchHierarchyDynamicTreeNode>;\n    rootTreeNode: SearchHierarchyDynamicTreeNode;\n\n    constructor(properties: SearchHierarchyDynamicFacetOptions) {\n        this.model = properties.model;\n        this.sina = properties.sina;\n        this.dataSource = properties.dataSource;\n        this.attributeId = properties.attributeId;\n        this.dimension = this.attributeId; // alias for compatability with the simple attribute facets\n        this.title = properties.title;\n        this.filter = properties.filter;\n        this.modelPathPrefix = properties.modelPathPrefix;\n        this.isShowMoreDialog = properties.isShowMoreDialog;\n        this.handleSetFilter = properties.handleSetFilter;\n        this.filterCount = (this.filter.rootCondition as ComplexCondition).getAttributeConditions(\n            this.attributeId\n        ).length;\n        this.facetType = FacetTypeUI.Hierarchy;\n        this.facetIndex = -1;\n        this.structureTree = new StructureTree({\n            rootNode: { id: SearchHierarchyDynamicFacet.rootNodeId, label: \"root\" },\n        });\n        this.notDisplayedFilterConditions = [];\n        this.treeNodeFactory = TreeNodeFactory.create<\n            SearchHierarchyDynamicTreeNode,\n            typeof SearchHierarchyDynamicTreeNode\n        >({\n            model: this.model,\n            rootTreeNodePath: `/facets/${this.facetIndex}/rootTreeNode`, // updated in setFacetIndex\n            treeNodeConstructor: SearchHierarchyDynamicTreeNode,\n            busyIndicator: this.model.busyIndicator,\n        });\n        this.rootTreeNode = this.treeNodeFactory.createRootTreeNode({\n            id: SearchHierarchyDynamicFacet.rootNodeId,\n            label: \"Root\",\n            count: 0,\n            facet: this,\n        });\n    }\n\n    setFilter(filter: Filter) {\n        this.filter = filter;\n    }\n\n    setHandleSetFilter(handleSetFilter: SetFilterCallback) {\n        this.handleSetFilter = handleSetFilter;\n    }\n\n    setFacetIndex(index: number) {\n        this.facetIndex = index;\n        this.treeNodeFactory.setRootTreeNodePath(`${this.modelPathPrefix}/${this.facetIndex}/rootTreeNode`);\n    }\n\n    updateStructureTree(sinaNode: HierarchyNode): void {\n        this.structureTree.update(sinaNode);\n    }\n\n    async activateFilters(): Promise<void> {\n        try {\n            await this.model.fireSearchQuery();\n            this.model.notifyFilterChanged();\n        } finally {\n            //\n        }\n    }\n\n    updateFromResultSet(resultSet: HierarchyResultSet): Promise<void> {\n        const childTreeNodes: Array<SearchHierarchyDynamicTreeNode> = [];\n        for (const childNode of resultSet.node.childNodes) {\n            childTreeNodes.push(\n                this.treeNodeFactory.createTreeNode({\n                    id: childNode.id,\n                    label: childNode.label,\n                    count: childNode.count,\n                    facet: this,\n                    expandable: childNode.hasChildren,\n                })\n            );\n        }\n        this.rootTreeNode.updateChildren(childTreeNodes);\n        this.updateStructureTree(resultSet.node);\n        return Promise.resolve();\n    }\n\n    getComplexConditionOfFacet(): ComplexCondition {\n        for (let i = 0; i < (this.filter.rootCondition as ComplexCondition).conditions.length; ++i) {\n            const complexCondition = (this.filter.rootCondition as ComplexCondition).conditions[\n                i\n            ] as ComplexCondition;\n            if (complexCondition.containsAttribute(this.attributeId)) {\n                return complexCondition;\n            }\n        }\n        return null;\n    }\n\n    getFilterConditions(): Array<Condition> {\n        const filterConditions = [];\n        const complexCondition = this.getComplexConditionOfFacet() as ComplexCondition;\n        if (!complexCondition) {\n            return filterConditions;\n        }\n        for (let i = 0; i < complexCondition.conditions.length; ++i) {\n            const condition = complexCondition.conditions[i];\n            filterConditions.push(condition);\n        }\n        return filterConditions;\n    }\n\n    mixinFilterNodes(): void {\n        // reset filter flag for complete tree\n        this.rootTreeNode.hasFilter = false;\n        this.rootTreeNode.visitChildNodesRecursively(function (treeNode: SearchHierarchyDynamicTreeNode) {\n            treeNode.hasFilter = false;\n        });\n        // update filter flag from filter conditions\n        let treeNodeId;\n        const notDisplayedFilterConditions = [];\n        const filterConditions = this.getFilterConditions();\n        for (let i = 0; i < filterConditions.length; ++i) {\n            const filterCondition = filterConditions[i];\n            treeNodeId = (filterCondition as any).value; // ToDo\n            const treeNode = this.treeNodeFactory.getTreeNode(treeNodeId);\n            if (treeNode) {\n                treeNode.hasFilter = true;\n            } else {\n                notDisplayedFilterConditions.push(filterCondition);\n            }\n        }\n        // add tree nodes for filters not in tree\n        for (let j = 0; j < notDisplayedFilterConditions.length; ++j) {\n            const notDisplayedFilterCondition = notDisplayedFilterConditions[j];\n            treeNodeId = notDisplayedFilterCondition.value;\n            // try to add filter node via structure tree\n            if (this.addMissingFilterNode(treeNodeId)) {\n                // in case of success delete from notDisplayedFilterConditions list\n                notDisplayedFilterConditions.splice(j, 1);\n                j--;\n            }\n        }\n        this.notDisplayedFilterConditions = notDisplayedFilterConditions;\n        this.calculateCheckboxStatus();\n        this.calculateFilterCount();\n    }\n\n    calculateFilterCount() {\n        const filterCount = (this.filter.rootCondition as ComplexCondition).getAttributeConditions(\n            this.attributeId\n        ).length;\n        this.model.setProperty(`${this.modelPathPrefix}/${this.facetIndex}/filterCount`, filterCount);\n    }\n\n    addMissingFilterNode(id: string): boolean {\n        const getOrCreateTreeNode = (\n            structureTreeNode: StructureTreeNode\n        ): SearchHierarchyDynamicTreeNode => {\n            let treeNode = this.treeNodeFactory.getTreeNode(structureTreeNode.id);\n            if (treeNode) {\n                if (treeNode.isVisible()) {\n                    return treeNode;\n                } else {\n                    return null;\n                }\n            }\n            if (!structureTreeNode.parentNode) {\n                throw new Error(\"program error parent node missing for \" + structureTreeNode.id);\n            }\n            const parentTreeNode = getOrCreateTreeNode(structureTreeNode.parentNode);\n            if (!parentTreeNode) {\n                return null;\n            }\n            treeNode = this.treeNodeFactory.createTreeNode({\n                id: structureTreeNode.id,\n                label: structureTreeNode.label,\n                count: 0,\n                facet: this,\n            });\n            parentTreeNode.addChildTreeNode(treeNode);\n            return treeNode;\n        };\n\n        const structureTreeNode = this.structureTree.getNode(id);\n        if (!structureTreeNode) {\n            return false;\n        }\n        const treeNode = getOrCreateTreeNode(structureTreeNode);\n        if (!treeNode) {\n            return false;\n        }\n        treeNode.hasFilter = true;\n        return true;\n    }\n\n    calculateCheckboxStatus(): void {\n        // reset\n        this.rootTreeNode.selected = false;\n        this.rootTreeNode.partiallySelected = false;\n        this.rootTreeNode.visitChildNodesRecursively(function (node: SearchHierarchyDynamicTreeNode) {\n            node.selected = false;\n            node.partiallySelected = false;\n        });\n        // collect leafs\n        const leafNodes = [];\n        if (!this.rootTreeNode.hasChildNodes()) {\n            leafNodes.push(this.rootTreeNode);\n        }\n        this.rootTreeNode.visitChildNodesRecursively(function (node: SearchHierarchyDynamicTreeNode) {\n            if (!node.hasChildNodes()) {\n                leafNodes.push(node);\n            }\n        });\n        // calculate selected and partiallySelected\n        for (let i = 0; i < leafNodes.length; ++i) {\n            const leafNode = leafNodes[i];\n            this.calculateCheckboxStatusFromLeafNode(leafNode);\n        }\n    }\n\n    calculateCheckboxStatusFromLeafNode(leafNode: SearchHierarchyDynamicTreeNode): void {\n        let node = leafNode;\n        let markPartiallySelected = false;\n        while (node) {\n            if (node.selected && node.partiallySelected) {\n                return;\n            }\n            if (node.hasFilter) {\n                node.selected = true;\n                node.partiallySelected = false;\n                markPartiallySelected = true;\n            } else {\n                if (markPartiallySelected) {\n                    node.selected = true;\n                    node.partiallySelected = true;\n                }\n            }\n            node = node.getParentTreeNode() as SearchHierarchyDynamicTreeNode;\n        }\n    }\n    handleModelUpdate() {\n        this.treeNodeFactory.updateUI();\n    }\n\n    delete() {\n        this.treeNodeFactory.delete();\n    }\n\n    updateNodesFromHierarchyNodePaths(hierarchyNodePaths: Array<HierarchyNodePath>) {\n        for (const hierarchyNodePath of hierarchyNodePaths) {\n            if (hierarchyNodePath.name !== this.attributeId) {\n                continue;\n            }\n            this.structureTree.updateFromHierarchyNodePath(hierarchyNodePath);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}