{"version":3,"file":"ErrorHandler.js","names":["sap","ui","define","Log","MessageBox","sap_ui_core_library","MessageType","__i18n","___errors","___sinaNexTS_core_errors","_interopRequireDefault","obj","__esModule","default","TextDirection","i18n","ESHUIError","DataSourceAttributeMetadataNotFoundError","ServerError","ServerErrorCode","SinaError","ErrorHandler","label","searchModel","static","externalOnErrorHandler","_oLogger","getLogger","getInstance","properties","instance","constructor","this","model","onErrorHandler","onError","error","options","e","handleError","onErrorAsync","Promise","resolve","logError","showError","setSearchModel","setExternalOnErrorHandler","getErrorTextGeneric","logMessage","name","stack","previous","Error","getErrorText","getErrorTextEsh","code","message","details","solution","sinaNext","getDebugInfo","convertErrorToMessage","convertErrorToMessageEsh","convertErrorToMessageGeneric","title","description","getText","type","E300","showReloadPopup","showMinorErrorsAsWarnings","E100","Warning","E400","E500","push","join","confirm","onClose","event","resetDataSource","resetAllFilterConditions","reloadNavigationTarget","createSearchNavigationTargetCurrentState","window","location","href","targetUrl","reload","styleClass","showMessageBox","text","props","initialFocus","textDirection","Inherit","Information","information","warning","pushUIMessage"],"sources":["ErrorHandler.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport Log from \"sap/base/Log\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport { TextDirection } from \"sap/ui/core/library\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport i18n from \"../i18n\";\nimport { ESHUIError } from \"./errors\";\nimport {\n    DataSourceAttributeMetadataNotFoundError,\n    ServerError,\n    ServerErrorCode,\n    SinaError,\n} from \"../sinaNexTS/core/errors\";\n\nexport interface IUIMessage {\n    type: MessageType;\n    title: string;\n    description: string;\n    shownToUser?: boolean;\n}\n\nexport interface ErrorHandlingOptions {\n    showMinorErrorsAsWarnings: boolean;\n}\n\n/**\n * This ErrorHandler is used to handle thrown instances of ESHUIError.\n * The default implementation will log the error stack to the console\n * and will also show the error message to the user in a popup window.\n */\nexport default class ErrorHandler {\n    private label?: string; // label of this instance, used as logging prefix\n    private searchModel?: SearchModel;\n    private static instance: ErrorHandler;\n    private externalOnErrorHandler?: (error: ESHUIError, options?: ErrorHandlingOptions) => void;\n    private readonly _oLogger = Log.getLogger(\"sap.esh.search.ui.error.ErrorHandler\");\n\n    public static getInstance(properties?: {\n        label?: string;\n        model?: SearchModel;\n        onErrorHandler?: (error: ESHUIError, options?: ErrorHandlingOptions) => void;\n    }): ErrorHandler {\n        if (!ErrorHandler.instance) {\n            ErrorHandler.instance = new ErrorHandler(properties);\n        }\n        return ErrorHandler.instance;\n    }\n\n    private constructor(properties: {\n        label?: string;\n        model?: SearchModel;\n        onErrorHandler?: (error: ESHUIError, options?: ErrorHandlingOptions) => void;\n    }) {\n        this.label = properties?.label;\n        this.searchModel = properties?.model;\n        this.externalOnErrorHandler = properties?.onErrorHandler;\n    }\n\n    /**\n     * Will call the default error handler. The default implementation will\n     * print error details to the console and shows an error message to the user.\n     * @param error instance of error which happened\n     * @returns void\n     */\n    public onError(error: ESHUIError, options?: ErrorHandlingOptions): void {\n        if (typeof this.externalOnErrorHandler === \"function\") {\n            try {\n                this.externalOnErrorHandler(error, options);\n            } catch (e) {\n                this.handleError(e, options);\n            }\n        } else {\n            this.handleError(error, options);\n        }\n    }\n\n    /**\n     * Will call the default error handler and then returns a resolved promise which\n     * allows to continue with a registered .then() method.\n     * The default implementation will\n     * print error details to the console and shows an error message to the user.\n     * @param error instance of error which happened\n     * @returns Promise<true>\n     */\n    public onErrorAsync(error: ESHUIError, options?: ErrorHandlingOptions): Promise<true> {\n        this.onError(error, options);\n        return Promise.resolve(true);\n    }\n\n    private handleError(error: Error, options?: ErrorHandlingOptions): void {\n        // log error in console\n        this.logError(error);\n        // show error in UI (message popup)\n        this.showError(error, options);\n    }\n\n    public setSearchModel(model: SearchModel) {\n        this.searchModel = model;\n    }\n\n    public setExternalOnErrorHandler(\n        onErrorHandler: (error: ESHUIError, options?: ErrorHandlingOptions) => void\n    ) {\n        this.externalOnErrorHandler = onErrorHandler;\n    }\n\n    private getErrorTextGeneric(error): string {\n        // name\n        let logMessage = error.name;\n        // toString\n        logMessage += \" \" + error;\n        // stack\n        if (typeof error.stack !== \"undefined\") {\n            logMessage = \"\\n\" + error.stack;\n        }\n        // previous\n        if (error.previous instanceof Error) {\n            logMessage += `\\n--> Previous error was: ${this.getErrorText(error.previous)}`;\n        }\n        return logMessage;\n    }\n\n    private getErrorTextEsh(error: ESHUIError | SinaError): string {\n        // name\n        let logMessage = error.name;\n        // code\n        if (error instanceof ServerError) {\n            logMessage += \" code:\" + error.code;\n        }\n        // message\n        logMessage += \" \" + error.message;\n        // details\n        if (error?.details) {\n            logMessage += \"\\n\" + error.details;\n        }\n        // solution\n        if (error?.solution) {\n            logMessage += \"\\n\" + error.solution;\n        }\n        // stack\n        if (typeof error.stack !== \"undefined\") {\n            logMessage += \"\\n\" + error.stack;\n        }\n        // previous\n        if (error.previous instanceof Error) {\n            logMessage += `\\n--> Previous error was: ${this.getErrorText(error.previous)}`;\n        }\n        return logMessage;\n    }\n\n    private getErrorText(error: Error): string {\n        if (error instanceof SinaError || error instanceof ESHUIError) {\n            return this.getErrorTextEsh(error);\n        } else {\n            return this.getErrorTextGeneric(error);\n        }\n    }\n\n    private logError(error: Error): void {\n        // error to string\n        let logMessage = this.label ? this.label + \": \" : \"\";\n        logMessage += this.getErrorText(error) + \"\\n\";\n        // add debug info\n        if (this.searchModel && this.searchModel.sinaNext) {\n            logMessage += this.searchModel.sinaNext.getDebugInfo() + \"\\n\";\n        }\n        // write into log\n        this._oLogger.error(logMessage, \"ErrorHandler\");\n    }\n\n    private convertErrorToMessage(error: Error, options?: ErrorHandlingOptions): IUIMessage {\n        if (error instanceof ESHUIError || error instanceof SinaError) {\n            return this.convertErrorToMessageEsh(error, options);\n        } else {\n            return this.convertErrorToMessageGeneric(error);\n        }\n    }\n\n    private convertErrorToMessageGeneric(error: Error): IUIMessage {\n        let title, description;\n        switch (error.name) {\n            case \"TypeError\":\n                title = i18n.getText(\"error.TypeError.message\");\n                description = i18n.getText(\"error.TypeError.solution\");\n                break;\n            case \"URIError\":\n                title = i18n.getText(\"searchError\");\n                description = i18n.getText(\"error.URIError.solution\");\n                break;\n            default:\n                title = \"\" + error;\n                description = \"\";\n        }\n        return { title, description, type: MessageType.Error };\n    }\n\n    private convertErrorToMessageEsh(\n        error: ESHUIError | SinaError,\n        options?: ErrorHandlingOptions\n    ): IUIMessage {\n        // handle reload errors\n        if (\n            (error instanceof ServerError && error.code === ServerErrorCode.E300) ||\n            error instanceof DataSourceAttributeMetadataNotFoundError\n        ) {\n            this.showReloadPopup();\n            return null;\n        }\n\n        // type\n        let type = MessageType.Error;\n        if (options?.showMinorErrorsAsWarnings) {\n            switch (error.name) {\n                case \"ServerError\":\n                    switch ((error as ServerError).code) {\n                        case ServerErrorCode.E100: // The search result is incomplete because some search connectors are temporary not available.\n                            type = MessageType.Warning;\n                            break;\n                        case ServerErrorCode.E400: //\tDuplicate search result list items\n                            type = MessageType.Warning;\n                            break;\n                        case ServerErrorCode.E500: //\tAI/nlq service not available\n                            type = MessageType.Warning;\n                            break;\n                    }\n            }\n        }\n\n        // title\n        const title = error.message || i18n.getText(\"searchError\");\n\n        // description\n        const description = [];\n        if (error.details) {\n            description.push(error.details);\n        }\n        if (error.solution) {\n            description.push(error.solution);\n        }\n        let code = \"\";\n        if (error.name === \"ServerError\") {\n            code = \" \" + (error as ServerError).code;\n        }\n        description.push(\"(\" + error.name + code + \")\");\n\n        return { title: title, description: description.join(\"\\n\"), type: type };\n    }\n\n    private showReloadPopup() {\n        MessageBox.confirm(i18n.getText(\"searchModelChanged\"), {\n            onClose: (event) => {\n                if (event === \"OK\") {\n                    if (this.searchModel) {\n                        this.searchModel.resetDataSource(false);\n                        this.searchModel.resetAllFilterConditions(false);\n                        const reloadNavigationTarget =\n                            this.searchModel.createSearchNavigationTargetCurrentState();\n                        window.location.href = reloadNavigationTarget.targetUrl;\n                    }\n                    window.location.reload();\n                }\n            },\n            styleClass: \"sapUshellSearchMessageBox\", // selector for closePopovers\n        });\n    }\n\n    private showMessageBox(message: IUIMessage) {\n        const text = message.title + \"\\n\" + message.description;\n        const props = {\n            onClose: null,\n            initialFocus: null,\n            textDirection: TextDirection.Inherit,\n            styleClass: \"sapUshellSearchMessageBox\", // selector for closePopovers\n        };\n        switch (message.type) {\n            case MessageType.Information:\n                MessageBox.information(text, props);\n                break;\n            case MessageType.Warning:\n                MessageBox.warning(text, props);\n                break;\n            case MessageType.Error:\n                MessageBox.error(text, props);\n                break;\n            default:\n                MessageBox.error(text, props);\n                break;\n        }\n    }\n\n    private showError(error: Error, options?: ErrorHandlingOptions): void {\n        const message = this.convertErrorToMessage(error, options);\n        if (!message) {\n            return;\n        }\n        if (this.searchModel) {\n            // display in message popover\n            this.searchModel.pushUIMessage(message);\n        } else {\n            // display in raw message box\n            this.showMessageBox(message);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}