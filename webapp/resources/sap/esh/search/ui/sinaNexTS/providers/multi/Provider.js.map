{"version":3,"file":"Provider.js","names":["sap","ui","define","___AbstractProvider","___FacetMode","___FederationType","___ProviderHelper","____sina_Sina","FederationMethod","____core_Log","____sina_SinaConfiguration","___abap_odata_Provider","___hana_odata_Provider","___sample_Provider","___sample2_Provider","___inav2_Provider","___dummy_Provider","____core_errors","____sina_FacetType","__ui5_require_async","path","Promise","resolve","reject","require","module","__esModule","endsWith","default","Object","defineProperty","value","err","AbstractProvider","FacetMode","FederationType","ProviderHelper","Sina","Log","AvailableProviders","_normalizeConfiguration","ABAPODataProvider","HANAODataProvider","SampleProvider","Sample2Provider","INAV2Provider","DummyProvider","NotImplementedError","FacetType","FilterDataSourceType","MultiProvider","log","id","facetMode","federationType","multiSina","multiDataSourceMap","providerHelper","federationMethod","initAsync","properties","this","sina","flat","advanced_round_robin","dataSourceMap","allDataSource","AdvancedRoundRobin","ranking","Ranking","round_robin","RoundRobin","capabilities","_createCapabilities","fuzzy","creationPromises","subProviders","forEach","configuration","creationPromise","createAsync","then","childSina","updateProviderId","i","dataSources","length","childDataSource","multiId","calculateMultiDataSourceId","provider","createMultiDataSource","push","hasSubProvider","promises","allSettled","promise","status","warn","reason","stack","subProvidersString","map","label","contentProviderId","join","error","sort","a","b","labelPlural","localeCompare","debug","normalizedConfiguration","providerInstance","HANA_ODATA","ABAP_ODATA","INAV2","MULTI","SAMPLE","SAMPLE2","MOCK_NLQRESULTS","MockNlqResultsProvider","MOCK_SUGGESTIONTYPES","MockSuggestionTypesProvider","DUMMY","MOCK_DELETEANDREORDER","MockDeleteAndReorderProvider","Error","getFilterDataSourceType","dataSource","All","type","DataSourceType","UserCategory","BusinessObject","Category","handleAllSearch","query","childQuery","queries","searchResultSet","initializeSearchResultSet","searchResultSetItemList","facets","_createDataSourceResultSet","title","filter","items","facetTotalCount","undefined","createSearchQuery","calculateFacets","multiSelectFacets","searchTerm","getSearchTerm","top","skip","nlq","sortOrder","getResultSetAsync","all","result","j","querySearchResultSet","k","resultItem","totalCount","tree","getDataSource","_createDataSourceResultSetItem","dimensionValueFormatted","calculateMultiDataSourceLabel","measureValue","measureValueFormatted","toString","dataSourceFacets","updateDataSourceFacets","facetItem","slice","handleUserCategorySearch","myFavorites","childFavorites","startsWith","childFavoritesDataSourceId","providerFavorite","createDataSource","subDataSources","undefinedSubDataSourceIds","subDataSource","childDataSourceSina","childFavorite","childDataSourceResultSet","Chart","DataSource","concat","handleBusinessObjectSearch","rootCondition","getRootCondition","clone","updateRootCondition","resultItemMultiId","updateAttributesMetadata","multiFacets","chartResultSet","createMultiChartResultSet","_createSearchResultSet","executeSearchQuery","executeChartQuery","that","createChartQuery","dimension","executeHierarchyQuery","handleAllSuggestionSearch","createSuggestionQuery","types","calculationModes","results","mergedSuggestionResultSet","_createSuggestionResultSet","suggestionResultSet","updateSuggestionDataSource","mergeMultiResults","handleUserCategorySuggestionSearch","indexOf","SuggestionType","emptySuggestionResultSet","handleBusinessObjectSuggestionSearch","childFilter","createFilter","executeSuggestionQuery","__exports"],"sources":["Provider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/* eslint-disable @typescript-eslint/no-this-alias */\nimport { AbstractProvider } from \"../AbstractProvider\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { FacetMode } from \"./FacetMode\";\nimport { FederationType } from \"./FederationType\";\nimport { ProviderHelper } from \"./ProviderHelper\";\nimport { Sina } from \"../../sina/Sina\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport * as FederationMethod from \"./FederationMethod\";\nimport { SearchResultSet } from \"../../sina/SearchResultSet\";\nimport { Log } from \"../../core/Log\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport { HierarchyResultSet } from \"../../sina/HierarchyResultSet\";\nimport { HierarchyQuery } from \"../../sina/HierarchyQuery\";\nimport { DataSourceResultSetItem } from \"../../sina/DataSourceResultSetItem\";\nimport { AvailableProviders, SinaConfiguration, _normalizeConfiguration } from \"../../sina/SinaConfiguration\";\nimport { Provider as ABAPODataProvider } from \"../abap_odata/Provider\";\nimport { Provider as HANAODataProvider } from \"../hana_odata/Provider\";\nimport { Provider as SampleProvider } from \"../sample/Provider\";\nimport { Provider as Sample2Provider } from \"../sample2/Provider\";\nimport { Provider as INAV2Provider } from \"../inav2/Provider\";\nimport { Provider as DummyProvider } from \"../dummy/Provider\";\nimport { UserCategoryDataSource } from \"../../sina/UserCategoryDataSource\";\nimport { NotImplementedError } from \"../../core/errors\";\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\nimport { FacetType } from \"../../sina/FacetType\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\n\nenum FilterDataSourceType {\n    All = \"All\",\n    UserCategory = \"UserCategory\",\n    BusinessObject = \"BusinessObject\",\n    Category = \"Category\",\n}\nexport class MultiProvider extends AbstractProvider {\n    log: Log;\n    readonly id = \"multi\";\n    facetMode: FacetMode;\n    federationType: FederationType;\n    multiSina: Sina[];\n    multiDataSourceMap: { [key: string]: DataSource };\n    providerHelper: ProviderHelper;\n    federationMethod: FederationMethod.IFederationMethod;\n\n    async initAsync(properties: SinaConfiguration): Promise<Sina> {\n        this.log = new Log(\"MultiProvider\");\n        this.sina = properties.sina;\n        this.facetMode = FacetMode[properties.facetMode] || FacetMode.flat;\n        this.federationType =\n            FederationType[properties.federationType] || FederationType.advanced_round_robin;\n        this.multiSina = [];\n        this.multiDataSourceMap = {}; //key: multiId, value: originalDataSource\n        this.sina.dataSourceMap[this.sina.allDataSource.id] = this.sina.allDataSource;\n        this.providerHelper = new ProviderHelper(this);\n        switch (this.federationType) {\n            case FederationType.advanced_round_robin: {\n                this.federationMethod = new FederationMethod.AdvancedRoundRobin();\n                break;\n            }\n            case FederationType.ranking: {\n                this.federationMethod = new FederationMethod.Ranking();\n                break;\n            }\n            case FederationType.round_robin: {\n                this.federationMethod = new FederationMethod.RoundRobin();\n                break;\n            }\n        }\n        this.sina.capabilities = this.sina._createCapabilities({\n            fuzzy: false,\n        });\n\n        const creationPromises: Array<Promise<Sina>> = [];\n        properties.subProviders.forEach((configuration: SinaConfiguration) => {\n            const creationPromise = this.createAsync(configuration).then((childSina) => {\n                this.providerHelper.updateProviderId(childSina);\n                for (let i = 0; i < childSina.dataSources.length; i++) {\n                    const childDataSource = childSina.dataSources[i];\n                    const multiId = this.providerHelper.calculateMultiDataSourceId(\n                        childDataSource.id,\n                        childSina.provider.id\n                    );\n                    this.providerHelper.createMultiDataSource(multiId, childDataSource);\n                    this.multiDataSourceMap[multiId] = childDataSource;\n                }\n                this.multiSina.push(childSina);\n                return childSina;\n            });\n            creationPromises.push(creationPromise);\n        });\n\n        let hasSubProvider = false;\n        // straightforward workaround to use Promise.allSettled() with older Typescript version\n        const promises = await Promise.allSettled(creationPromises);\n        promises.forEach((promise) => {\n            if (promise.status === \"rejected\") {\n                this.log.warn(`Error during creation of subprovider: ${promise.reason.stack}`);\n            } else if (promise.status === \"fulfilled\") {\n                hasSubProvider = true;\n                if (promise.value.capabilities.fuzzy) {\n                    this.sina.capabilities.fuzzy = true;\n                }\n            }\n        });\n        if (!hasSubProvider) {\n            const subProvidersString = properties.subProviders\n                .map((configuration: SinaConfiguration) => {\n                    return configuration.label || configuration.contentProviderId;\n                })\n                .join(\", \");\n            this.log.error(\n                `Error during creation of multi provider: No valid subproviders: ${subProvidersString}`\n            );\n            return Promise.reject();\n        }\n\n        this.sina.dataSources.sort(function (a, b) {\n            return a.labelPlural.localeCompare(b.labelPlural);\n        });\n\n        return this.sina;\n    }\n\n    async createAsync(configuration: SinaConfiguration): Promise<Sina> {\n        this.log.debug(`Creating new sina (esh client) instance using provider ${configuration.provider}`);\n        const normalizedConfiguration = await _normalizeConfiguration(configuration);\n        let providerInstance: AbstractProvider;\n        switch (normalizedConfiguration.provider) {\n            case AvailableProviders.HANA_ODATA: {\n                providerInstance = new HANAODataProvider();\n                break;\n            }\n            case AvailableProviders.ABAP_ODATA: {\n                providerInstance = new ABAPODataProvider();\n                break;\n            }\n            case AvailableProviders.INAV2: {\n                providerInstance = new INAV2Provider();\n                break;\n            }\n            case AvailableProviders.MULTI: {\n                providerInstance = new MultiProvider();\n                break;\n            }\n            case AvailableProviders.SAMPLE: {\n                providerInstance = new SampleProvider();\n                break;\n            }\n            case AvailableProviders.SAMPLE2: {\n                providerInstance = new Sample2Provider();\n                break;\n            }\n            case AvailableProviders.MOCK_NLQRESULTS: {\n                const module = await import(\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockNlqResultsProvider\"\n                );\n                providerInstance = new module.MockNlqResultsProvider();\n                break;\n            }\n            case AvailableProviders.MOCK_SUGGESTIONTYPES: {\n                const module = await import(\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockSuggestionTypesProvider\"\n                );\n                providerInstance = new module.MockSuggestionTypesProvider();\n                break;\n            }\n            case AvailableProviders.DUMMY: {\n                providerInstance = new DummyProvider();\n                break;\n            }\n            case AvailableProviders.MOCK_DELETEANDREORDER: {\n                const module = await import(\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockDeleteAndReorderProvider\"\n                );\n                providerInstance = new module.MockDeleteAndReorderProvider();\n                break;\n            }\n            default: {\n                throw new Error(\n                    `Unknown Provider: '${configuration.provider}' - Available Providers: ${AvailableProviders.HANA_ODATA}, ${AvailableProviders.ABAP_ODATA}, ${AvailableProviders.INAV2}, ${AvailableProviders.MULTI}, ${AvailableProviders.SAMPLE}, ${AvailableProviders.SAMPLE2}, ${AvailableProviders.DUMMY}.`\n                );\n            }\n        }\n\n        const sina = new Sina(providerInstance);\n        await sina.initAsync(normalizedConfiguration);\n        return sina;\n    }\n    // return the filter datasource type of the datasource (All, UserCategory, BusinessObject, Category)\n    getFilterDataSourceType(dataSource: DataSource): FilterDataSourceType {\n        if (dataSource === this.sina.allDataSource) {\n            return FilterDataSourceType.All;\n        }\n        if (dataSource.type === this.sina.DataSourceType.UserCategory) {\n            return FilterDataSourceType.UserCategory;\n        }\n        if (dataSource.type === this.sina.DataSourceType.BusinessObject) {\n            return FilterDataSourceType.BusinessObject;\n        }\n        if (dataSource.type === this.sina.DataSourceType.Category) {\n            return FilterDataSourceType.Category;\n        }\n    }\n\n    async handleAllSearch(query: SearchQuery): Promise<SearchResultSet> {\n        let childQuery: SearchQuery;\n        const queries: Promise<SearchResultSet>[] = [];\n        const searchResultSet: SearchResultSet = this.initializeSearchResultSet(query);\n        const searchResultSetItemList: SearchResultSetItem[] = [];\n\n        // search with all dataSource\n        searchResultSet.facets.push(\n            this.sina._createDataSourceResultSet({\n                title: query.filter.dataSource.label,\n                items: [],\n                query: query,\n                facetTotalCount: undefined,\n            })\n        );\n\n        for (let i = 0; i < this.multiSina.length; i++) {\n            childQuery = this.multiSina[i].createSearchQuery({\n                calculateFacets: query.calculateFacets,\n                multiSelectFacets: query.multiSelectFacets,\n                dataSource: this.multiSina[i].allDataSource,\n                searchTerm: query.getSearchTerm(),\n                top: query.top,\n                skip: query.skip,\n                nlq: query.nlq,\n                sortOrder: query.sortOrder,\n                sina: this.multiSina[i],\n            });\n            queries.push(childQuery.getResultSetAsync() as Promise<SearchResultSet>);\n        }\n        return Promise.all(queries).then((result) => {\n            for (let j = 0; j < result.length; j++) {\n                const querySearchResultSet: SearchResultSet = result[j];\n                for (let k = 0; k < querySearchResultSet.items.length; k++) {\n                    const resultItem = querySearchResultSet.items[k];\n                    const multiId = this.providerHelper.calculateMultiDataSourceId(\n                        resultItem.dataSource.id,\n                        resultItem.sina.provider.id\n                    );\n                    const dataSource = this.sina.dataSourceMap[multiId];\n                    resultItem.dataSource = dataSource;\n                    resultItem.sina = this.sina;\n                }\n                searchResultSet.totalCount += querySearchResultSet.totalCount;\n                searchResultSetItemList.push(...querySearchResultSet.items);\n\n                if (querySearchResultSet.facets[0]) {\n                    if (this.facetMode === FacetMode.tree) {\n                        const childDataSource = this.sina.getDataSource(\n                            this.providerHelper.calculateMultiDataSourceId(\n                                querySearchResultSet.query.filter.dataSource.id,\n                                querySearchResultSet.sina.provider.id\n                            )\n                        );\n                        searchResultSet.facets[0].items.push(\n                            this.sina._createDataSourceResultSetItem({\n                                dataSource: childDataSource,\n                                dimensionValueFormatted: this.providerHelper.calculateMultiDataSourceLabel(\n                                    querySearchResultSet.query.filter.dataSource.label,\n                                    querySearchResultSet.sina.provider\n                                ),\n                                measureValue: querySearchResultSet.totalCount,\n                                measureValueFormatted: querySearchResultSet.totalCount.toString(),\n                            })\n                        );\n                    } else {\n                        const dataSourceFacets = this.providerHelper.updateDataSourceFacets(\n                            querySearchResultSet.facets\n                        );\n                        dataSourceFacets[0].items.forEach((facetItem) => {\n                            searchResultSet.facets[0].items.push(facetItem);\n                        });\n                    }\n                }\n            }\n            searchResultSet.items = this.federationMethod.sort(searchResultSetItemList);\n            searchResultSet.items = searchResultSet.items.slice(query.skip, query.top);\n\n            return searchResultSet;\n        });\n    }\n\n    async handleUserCategorySearch(query: SearchQuery): Promise<SearchResultSet> {\n        let childQuery: SearchQuery;\n        const queries: Promise<SearchResultSet>[] = [];\n        const searchResultSet: SearchResultSet = this.initializeSearchResultSet(query);\n        const searchResultSetItemList: SearchResultSetItem[] = [];\n\n        // search with user defined dataSources (DataSourceType = \"UserCategory\")\n        const myFavorites: UserCategoryDataSource = query.filter.dataSource as UserCategoryDataSource;\n\n        const childFavorites = [];\n        this.multiSina.forEach((childSina) => {\n            // supported provider (abap_odata, sample), create child favorites dataSource\n            if (\n                childSina.provider.id.startsWith(\"abap_odata\") ||\n                childSina.provider.id.startsWith(\"sample\")\n            ) {\n                const childFavoritesDataSourceId = this.providerHelper.calculateMultiDataSourceId(\n                    myFavorites.id,\n                    childSina.provider.id\n                );\n                let providerFavorite: UserCategoryDataSource = this.multiDataSourceMap[\n                    childFavoritesDataSourceId\n                ] as UserCategoryDataSource;\n                // check if providerFavorite is included in this.multiDataSourceMap\n                if (!providerFavorite) {\n                    providerFavorite = childSina.createDataSource({\n                        id: childFavoritesDataSourceId,\n                        label: myFavorites.label,\n                        labelPlural: myFavorites.labelPlural,\n                        type: myFavorites.type,\n                        subDataSources: [],\n                        undefinedSubDataSourceIds: [],\n                    } as UserCategoryDataSource) as UserCategoryDataSource;\n                    // add providerFavorite to this.multiDataSourceMap\n                    this.multiDataSourceMap[childFavoritesDataSourceId] = providerFavorite;\n                } else {\n                    // providerFavorite exists in this.multiDataSourceMap (initalize subDataSources)\n                    providerFavorite.subDataSources = [];\n                }\n            }\n        });\n        // loop subDataSources, split to get a list childFavorites with different providers\n        myFavorites.subDataSources.forEach((subDataSource) => {\n            const childDataSource = this.multiDataSourceMap[subDataSource.id];\n            const childDataSourceSina = childDataSource.sina;\n            // abap_odata and sample provider can search with subDataSources, split with each abap_odata and sample provider\n            if (\n                childDataSourceSina.provider.id.startsWith(\"abap_odata\") ||\n                childDataSourceSina.provider.id.startsWith(\"sample\")\n            ) {\n                const childFavoritesDataSourceId = this.providerHelper.calculateMultiDataSourceId(\n                    myFavorites.id,\n                    childDataSourceSina.provider.id\n                );\n                const providerFavorite: UserCategoryDataSource = this.multiDataSourceMap[\n                    childFavoritesDataSourceId\n                ] as UserCategoryDataSource;\n                if (providerFavorite.subDataSources.length === 0) {\n                    childFavorites.push(providerFavorite);\n                }\n                providerFavorite.subDataSources.push(childDataSource);\n            }\n            // other providers can only search with one dataSource, split as single dataSource\n            // delete possible (else)\n            else {\n                childFavorites.push(childDataSource);\n            }\n        });\n\n        childFavorites.forEach((childFavorite) => {\n            childQuery = childFavorite.sina.createSearchQuery({\n                calculateFacets: query.calculateFacets,\n                multiSelectFacets: query.multiSelectFacets,\n                dataSource: childFavorite,\n                searchTerm: query.getSearchTerm(),\n                top: query.top,\n                skip: query.skip,\n                nlq: query.nlq,\n                sortOrder: query.sortOrder,\n                sina: childFavorite.sina,\n            });\n            queries.push(childQuery.getResultSetAsync() as Promise<SearchResultSet>);\n        });\n        return Promise.all(queries).then((result) => {\n            searchResultSet.facets.push(\n                this.sina._createDataSourceResultSet({\n                    title: query.filter.dataSource.label,\n                    items: [],\n                    query: query,\n                    facetTotalCount: undefined,\n                })\n            );\n            for (let j = 0; j < result.length; j++) {\n                const querySearchResultSet = result[j];\n                for (let k = 0; k < querySearchResultSet.items.length; k++) {\n                    const resultItem = querySearchResultSet.items[k];\n                    const multiId = this.providerHelper.calculateMultiDataSourceId(\n                        resultItem.dataSource.id,\n                        resultItem.sina.provider.id\n                    );\n                    const dataSource = this.sina.dataSourceMap[multiId];\n                    // update dataSource consisting of provider Id and dataSource Id\n                    resultItem.dataSource = dataSource;\n                    resultItem.sina = this.sina;\n                }\n                searchResultSet.totalCount += querySearchResultSet.totalCount;\n                searchResultSetItemList.push(...querySearchResultSet.items);\n\n                // favorite should certainly be a dataSource facet\n                if (query.calculateFacets) {\n                    const childDataSource = querySearchResultSet.query.filter\n                        .dataSource as UserCategoryDataSource;\n                    const childDataSourceResultSet = querySearchResultSet.sina._createDataSourceResultSet({\n                        title: childDataSource.label,\n                        items: [],\n                        query: querySearchResultSet.query,\n                        facetTotalCount: undefined,\n                    });\n                    // manually create a dataSourceResultSet for abap_odata/sample one dataSource child favorite, resultSet has no facet\n                    if (querySearchResultSet.facets.length === 0 && querySearchResultSet.items.length > 0) {\n                        childDataSourceResultSet.items.push(\n                            querySearchResultSet.sina._createDataSourceResultSetItem({\n                                dataSource: childDataSource.subDataSources[0],\n                                dimensionValueFormatted: childDataSource.subDataSources[0].label,\n                                measureValue: querySearchResultSet.totalCount,\n                                measureValueFormatted: querySearchResultSet.totalCount.toString(),\n                            })\n                        );\n                        querySearchResultSet.facets.push(childDataSourceResultSet);\n                    }\n                    // manually update a dataSourceResultSet for non abap_odata favorite, resultSet has chart facet\n                    if (\n                        querySearchResultSet.facets.length > 0 &&\n                        querySearchResultSet.facets[0].type === FacetType.Chart &&\n                        querySearchResultSet.items.length > 0\n                    ) {\n                        childDataSourceResultSet.items.push(\n                            querySearchResultSet.sina._createDataSourceResultSetItem({\n                                dataSource: childDataSource,\n                                dimensionValueFormatted: childDataSource.label,\n                                measureValue: querySearchResultSet.totalCount,\n                                measureValueFormatted: querySearchResultSet.totalCount.toString(),\n                            })\n                        );\n                        querySearchResultSet.facets = [childDataSourceResultSet];\n                    }\n                    // normally update a dataSourceResultSet\n                    if (\n                        querySearchResultSet.facets.length === 1 &&\n                        querySearchResultSet.facets[0].type === FacetType.DataSource\n                    ) {\n                        this.providerHelper.updateDataSourceFacets(querySearchResultSet.facets);\n                        searchResultSet.facets[0].items = searchResultSet.facets[0].items.concat(\n                            querySearchResultSet.facets[0].items\n                        );\n                    }\n                }\n            }\n            searchResultSet.items = this.federationMethod.sort(searchResultSetItemList);\n            searchResultSet.items = searchResultSet.items.slice(query.skip, query.top);\n\n            return searchResultSet;\n        });\n    }\n\n    async handleBusinessObjectSearch(query: SearchQuery): Promise<SearchResultSet> {\n        // search with single child provider dataSource\n        const childDataSource = this.multiDataSourceMap[query.filter.dataSource.id];\n        if (childDataSource === undefined) {\n            // data source does not exist (or is a category)\n            //    - example: On facet panel of FLP search click category, afterwards reload the page.\n            //               -> This will fail because categories are not part of the data source droptown of FLP\n            throw new Error(`Data source with id '${query.filter.dataSource.id}' does not exist.`);\n        }\n        const rootCondition = query.getRootCondition().clone();\n        const searchResultSet: SearchResultSet = this.initializeSearchResultSet(query);\n\n        this.providerHelper.updateRootCondition(rootCondition as ComplexCondition, childDataSource.sina);\n        const childQuery = childDataSource.sina.createSearchQuery({\n            calculateFacets: query.calculateFacets,\n            multiSelectFacets: query.multiSelectFacets,\n            dataSource: childDataSource,\n            searchTerm: query.getSearchTerm(),\n            rootCondition: query.getRootCondition(),\n            top: query.top,\n            skip: query.skip,\n            nlq: query.nlq,\n            sortOrder: query.sortOrder,\n            sina: childDataSource.sina,\n        });\n        return childQuery.getResultSetAsync().then((querySearchResultSet: SearchResultSet) => {\n            searchResultSet.items = querySearchResultSet.items;\n            searchResultSet.totalCount = querySearchResultSet.totalCount;\n\n            for (let i = 0; i < searchResultSet.items.length; i++) {\n                const resultItem = searchResultSet.items[i];\n                const resultItemMultiId = this.providerHelper.calculateMultiDataSourceId(\n                    resultItem.dataSource.id,\n                    resultItem.sina.provider.id\n                );\n                //update attributes metadata\n                this.providerHelper.updateAttributesMetadata(\n                    resultItem.dataSource,\n                    this.sina.dataSourceMap[resultItemMultiId]\n                );\n                //set the facet result item dataSource as multi provider dataSource\n                resultItem.dataSource = this.sina.dataSourceMap[resultItemMultiId];\n                resultItem.sina = this.sina;\n            }\n\n            let multiFacets;\n            //dataSource facet\n            if (\n                querySearchResultSet.facets.length === 1 &&\n                (querySearchResultSet.facets[0].items[0] as DataSourceResultSetItem).dataSource\n            ) {\n                multiFacets = querySearchResultSet.facets;\n                multiFacets[0].title = this.providerHelper.calculateMultiDataSourceLabel(\n                    querySearchResultSet.facets[0].title,\n                    querySearchResultSet.facets[0].sina.provider\n                );\n                this.providerHelper.updateDataSourceFacets(multiFacets);\n            } else {\n                //chart facet\n                multiFacets = [];\n                for (let k = 0; k < querySearchResultSet.facets.length; k++) {\n                    const chartResultSet = querySearchResultSet.facets[k];\n                    multiFacets.push(this.providerHelper.createMultiChartResultSet(chartResultSet));\n                }\n            }\n            searchResultSet.facets = multiFacets;\n\n            return searchResultSet;\n        });\n    }\n\n    initializeSearchResultSet(query: SearchQuery): SearchResultSet {\n        return this.sina._createSearchResultSet({\n            title: \"Search Multi Result List\",\n            query: query,\n            items: [],\n            totalCount: 0,\n            facets: [],\n        });\n    }\n\n    executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        switch (this.getFilterDataSourceType(query.filter.dataSource)) {\n            // dataSource All\n            case FilterDataSourceType.All:\n                return this.handleAllSearch(query);\n            // dataSource My Favorites\n            case FilterDataSourceType.UserCategory:\n                return this.handleUserCategorySearch(query);\n            // dataSource Connector or Category\n            case FilterDataSourceType.BusinessObject:\n            case FilterDataSourceType.Category:\n                return this.handleBusinessObjectSearch(query);\n        }\n    }\n\n    executeChartQuery(query: ChartQuery): Promise<ChartResultSet> {\n        const that = this;\n        const childDataSource = that.multiDataSourceMap[query.filter.dataSource.id];\n        const rootCondition = query.getRootCondition().clone();\n        that.providerHelper.updateRootCondition(rootCondition as ComplexCondition, childDataSource.sina);\n        const childQuery = childDataSource.sina.createChartQuery({\n            dimension: query.dimension,\n            dataSource: childDataSource,\n            searchTerm: query.getSearchTerm(),\n            rootCondition: rootCondition,\n            top: query.top,\n            skip: query.skip,\n            nlq: query.nlq,\n            sortOrder: query.sortOrder,\n        });\n        return childQuery.getResultSetAsync().then(function (chartResultSet) {\n            return that.providerHelper.createMultiChartResultSet(chartResultSet);\n        });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    executeHierarchyQuery(query: HierarchyQuery): Promise<HierarchyResultSet> {\n        throw new NotImplementedError();\n    }\n\n    async handleAllSuggestionSearch(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        let childQuery: SuggestionQuery;\n        const queries = [];\n        for (let i = 0; i < this.multiSina.length; i++) {\n            childQuery = this.multiSina[i].createSuggestionQuery({\n                types: query.types,\n                calculationModes: query.calculationModes,\n                dataSource: this.multiSina[i].allDataSource,\n                searchTerm: query.getSearchTerm(),\n                top: query.top,\n                skip: query.skip,\n                sortOrder: query.sortOrder,\n            });\n            queries.push(childQuery.getResultSetAsync());\n        }\n\n        return Promise.allSettled(queries).then((results) => {\n            const mergedSuggestionResultSet = this.sina._createSuggestionResultSet({\n                title: \"Multi Suggestions\",\n                query: query,\n                items: [],\n            });\n            for (let j = 0; j < results.length; j++) {\n                const result = results[j];\n                if (result.status === \"fulfilled\") {\n                    const suggestionResultSet = this.providerHelper.updateSuggestionDataSource(result.value);\n                    mergedSuggestionResultSet.items = new FederationMethod.RoundRobin().mergeMultiResults(\n                        mergedSuggestionResultSet.items,\n                        suggestionResultSet.items,\n                        j + 1\n                    );\n                }\n            }\n            return mergedSuggestionResultSet;\n        });\n    }\n\n    async handleUserCategorySuggestionSearch(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        if (query.types.indexOf(this.sina.SuggestionType.DataSource) >= 0) {\n            return this.handleAllSuggestionSearch(query);\n        } else {\n            const emptySuggestionResultSet = this.sina._createSuggestionResultSet({\n                title: \"Multi Suggestions - My Favorites\",\n                query: query,\n                items: [],\n            });\n            return Promise.resolve(emptySuggestionResultSet);\n        }\n    }\n\n    async handleBusinessObjectSuggestionSearch(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        const childDataSource = this.multiDataSourceMap[query.filter.dataSource.id];\n        const childFilter = childDataSource.sina.createFilter({\n            searchTerm: query.getSearchTerm(),\n            dataSource: childDataSource,\n            rootCondition: query.filter.rootCondition.clone(),\n        });\n        const childQuery = childDataSource.sina.createSuggestionQuery({\n            types: query.types,\n            calculationModes: query.calculationModes,\n            top: query.top,\n            skip: query.skip,\n            sortOrder: query.sortOrder,\n            filter: childFilter,\n        });\n\n        return childQuery.getResultSetAsync().then((results) => {\n            return this.providerHelper.updateSuggestionDataSource(results);\n        });\n    }\n    executeSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        switch (this.getFilterDataSourceType(query.filter.dataSource)) {\n            // dataSource All\n            case FilterDataSourceType.All:\n                return this.handleAllSuggestionSearch(query);\n            // dataSource My Favorites\n            case FilterDataSourceType.UserCategory:\n                return this.handleUserCategorySuggestionSearch(query);\n            // dataSource Connector or Category\n            case FilterDataSourceType.BusinessObject:\n            case FilterDataSourceType.Category:\n                return this.handleBusinessObjectSuggestionSearch(query);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}