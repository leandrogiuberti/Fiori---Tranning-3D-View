{"version":3,"file":"FacetParser.js","names":["sap","ui","define","____sina_SearchQuery","typeConverter","____sina_LogicalOperator","____sina_ComparisonOperator","____sina_ChartQuery","____core_Log","____core_errors","___HierarchyParser","SearchQuery","LogicalOperator","ComparisonOperator","ChartQuery","Log","FacetsParseError","HierarchyParser","FacetParser","log","provider","sina","constructor","this","parse","query","data","hierarchyParser","value","Promise","resolve","error","warn","message","facets","i","length","facetData","resultSet","filter","dataSource","getAllDataSource","parseDataSourceFacet","e1","type","DataSourceType","Category","Dimensions","PropertyType","attributeMetadata","parseFacetAttribute","isHierarchy","parseHierarchyFacet","parseChartFacet","undefined","itemsInString","Items","Array","isArray","JSON","stringify","push","all","dataSourceQuery","createDataSourceQuery","clone","nlq","items","cell","getDataSource","scope","createDataSource","id","ValueLow","label","Description","_createDataSourceResultSetItem","dimensionValueFormatted","labelPlural","measureValue","_Count","measureValueFormatted","toString","_createDataSourceResultSet","title","facetTotalCount","_setResultSet","createAttributeFilterCondition","attributeId","metadata","Object","prototype","hasOwnProperty","call","finalCondition","createComplexCondition","attributeLabel","valueLabel","formatFacetValue","operator","And","conditions","lowBoundCondition","upperBoundCondition","From","createSimpleCondition","attribute","Le","odata2Sina","To","Ge","convertValueToString","textElementValue","startsWith","initialValue","dimension","PropertyName","getAttributeMetadata","chartQuery","setDataSource","setRootCondition","rootCondition","createChartQuery","iconPropertyName","usage","AdvancedSearch","iconUrlAttributeName","isIconContained","findIndex","item","icon","_createChartResultSetItem","filterCondition","_createChartResultSet","__exports","__esModule"],"sources":["FacetParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport {\n    HANAOdataSearchResponseResult,\n    HANAOdataSearchResponseResultFacetAllInfo,\n    Provider,\n} from \"./Provider\";\nimport { Query } from \"../../sina/Query\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport * as typeConverter from \"./typeConverter\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Log } from \"../../core/Log\";\nimport { FacetsParseError } from \"../../core/errors\";\nimport { HierarchyParser } from \"./HierarchyParser\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { HierarchyResultSet } from \"../../sina/HierarchyResultSet\";\nimport { DataSourceResultSet } from \"../../sina/DataSourceResultSet\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\n\nexport class FacetParser {\n    log: Log;\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider: Provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n        this.log = new Log(\"hana_odata facet parser\");\n    }\n\n    async parse(query: SearchQuery | SuggestionQuery | ChartQuery, data: HANAOdataSearchResponseResult) {\n        const hierarchyParser = new HierarchyParser();\n        const value = data[\n            \"@com.sap.vocabularies.Search.v1.Facets\"\n        ] as Array<HANAOdataSearchResponseResultFacetAllInfo>;\n\n        if (!value) {\n            return Promise.resolve([]);\n        }\n\n        if (data.error) {\n            this.log.warn(\"Server-side Warning: \" + data.error.message);\n        }\n\n        const facets: Array<DataSourceResultSet | HierarchyResultSet | ChartResultSet> = [];\n\n        for (let i = 0; i < value.length; i++) {\n            const facetData = value[i];\n\n            // var dimension = '';\n            // if (query.dimension) {\n            //     dimension = query.dimension;\n            // } else if (facetData[\"@com.sap.vocabularies.Search.v1.Facet\"] && facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions && facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions[0] && facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions[0].PropertyName) {\n            //     dimension = facetData[\"@com.sap.vocabularies.Search.v1.Facet\"][\"Dimensions\"][0].PropertyName;\n            // }\n\n            let resultSet;\n            if (query.filter.dataSource === query.sina.getAllDataSource()) {\n                try {\n                    resultSet = this.parseDataSourceFacet(query, facetData);\n                } catch (e1) {\n                    this.log.warn(\"Error occurred by parsing dataource item number \" + i + \": \" + e1.message);\n                    continue;\n                }\n            } else {\n                if (query.filter.dataSource.type === query.sina.DataSourceType.Category) {\n                    continue; // ignore common attributes facets\n                }\n                if (\n                    facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions[0].PropertyType ===\n                    \"GeometryPolygonFacet\"\n                ) {\n                    continue;\n                }\n\n                try {\n                    const attributeMetadata = this.parseFacetAttribute(query, facetData);\n                    if (attributeMetadata.isHierarchy) {\n                        resultSet = hierarchyParser.parseHierarchyFacet(query, attributeMetadata, facetData);\n                    } else {\n                        resultSet = this.parseChartFacet(\n                            query,\n                            attributeMetadata,\n                            facetData,\n                            data[\"@odata.count\"] || undefined\n                        );\n                    }\n                } catch (e1) {\n                    let itemsInString = \"\";\n                    if (facetData.Items && Array.isArray(facetData.Items)) {\n                        itemsInString = JSON.stringify(facetData);\n                    }\n                    this.log.warn(\n                        \"Error occurred by parsing facet \" +\n                            (facetData[\"@com.sap.vocabularies.Common.v1.Label\"] || \"\") +\n                            \"', facet position: \" +\n                            i +\n                            \": \" +\n                            e1.message +\n                            \"; item data: \" +\n                            itemsInString\n                    );\n                    continue;\n                }\n            }\n            facets.push(resultSet);\n        }\n        return Promise.all(facets);\n    }\n\n    parseDataSourceFacet(query: Query, facetData) {\n        // for search query with datasource facet: create corresponding datasource query\n        let dataSourceQuery = query;\n        if (query instanceof SearchQuery) {\n            dataSourceQuery = this.sina.createDataSourceQuery({\n                dataSource: query.filter.dataSource,\n                filter: query.filter.clone(),\n                nlq: query.nlq,\n            });\n        }\n\n        // assemble results set items\n        const items = [];\n        for (let i = 0; i < facetData.Items.length; i++) {\n            const cell = facetData.Items[i];\n\n            // create filter (used when clicking on the item)\n            let dataSource = this.sina.getDataSource(cell.scope);\n            if (!dataSource) {\n                dataSource = this.sina.createDataSource({\n                    type: this.sina.DataSourceType.Category,\n                    id: cell.ValueLow,\n                    label: cell.Description,\n                });\n            }\n\n            // create item\n            items.push(\n                this.sina._createDataSourceResultSetItem({\n                    dataSource: dataSource,\n                    dimensionValueFormatted: dataSource.labelPlural,\n                    measureValue: cell._Count,\n                    measureValueFormatted: cell._Count.toString(),\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createDataSourceResultSet({\n            title: query.filter.dataSource.label,\n            items: items,\n            query: dataSourceQuery,\n            facetTotalCount: undefined,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return dataSourceQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n\n    createAttributeFilterCondition(attributeId, metadata, cell) {\n        if (\n            typeof cell[attributeId] === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(cell[attributeId], \"From\") ||\n                Object.prototype.hasOwnProperty.call(cell[attributeId], \"From\"))\n        ) {\n            // Range Condition\n            const finalCondition = this.sina.createComplexCondition({\n                attributeLabel: metadata.label,\n                valueLabel: this.formatFacetValue(cell[attributeId]),\n                operator: LogicalOperator.And,\n                conditions: [],\n            });\n            let lowBoundCondition, upperBoundCondition;\n            if (!cell[attributeId].From) {\n                upperBoundCondition = this.sina.createSimpleCondition({\n                    attribute: attributeId,\n                    operator: ComparisonOperator.Le,\n                    value: typeConverter.odata2Sina(metadata.type, cell[attributeId].To),\n                });\n                finalCondition.conditions.push(upperBoundCondition);\n            } else if (!cell[attributeId].To) {\n                lowBoundCondition = this.sina.createSimpleCondition({\n                    attribute: attributeId,\n                    operator: ComparisonOperator.Ge,\n                    value: typeConverter.odata2Sina(metadata.type, cell[attributeId].From),\n                });\n                finalCondition.conditions.push(lowBoundCondition);\n            } else {\n                lowBoundCondition = this.sina.createSimpleCondition({\n                    attribute: attributeId,\n                    operator: ComparisonOperator.Ge,\n                    value: typeConverter.odata2Sina(metadata.type, cell[attributeId].From),\n                });\n                finalCondition.conditions.push(lowBoundCondition);\n                upperBoundCondition = this.sina.createSimpleCondition({\n                    attribute: attributeId,\n                    operator: ComparisonOperator.Le,\n                    value: typeConverter.odata2Sina(metadata.type, cell[attributeId].To),\n                });\n                finalCondition.conditions.push(upperBoundCondition);\n            }\n            return finalCondition;\n        }\n        // Single Condition\n        let valueLabel = typeConverter.convertValueToString(\n            typeConverter.odata2Sina(metadata.type, cell[attributeId])\n        );\n        const textElementValue = cell[attributeId + \"@com.sap.vocabularies.Common.v1.Text\"];\n        if (typeof textElementValue === \"string\" && textElementValue.length > 0) {\n            if (textElementValue.startsWith(\"sap-icon://\") === false) {\n                valueLabel = textElementValue;\n            }\n        }\n        return this.sina.createSimpleCondition({\n            attributeLabel: metadata.label,\n            attribute: attributeId,\n            value: cell[attributeId],\n            valueLabel: valueLabel,\n        });\n    }\n\n    formatFacetValue(value /**metadata*/) {\n        const initialValue = \"\";\n        // if (metadata.type === 'Double' || metadata.type === 'Integer') {\n        //     initialValue = 0;\n        // }\n\n        if (value[\"@com.sap.vocabularies.Common.v1.Label\"]) {\n            return value[\"@com.sap.vocabularies.Common.v1.Label\"];\n        }\n        if (\n            typeof value === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(value, \"From\") ||\n                Object.prototype.hasOwnProperty.call(value, \"To\"))\n        ) {\n            value = (value.From || initialValue) + \"...\" + (value.To || initialValue);\n        }\n        return value;\n    }\n\n    parseFacetAttribute(query: SearchQuery | SuggestionQuery | ChartQuery, facetData): AttributeMetadata {\n        const dataSource = query.filter.dataSource;\n        let attributeId = \"\";\n        if (query instanceof ChartQuery && query.dimension) {\n            attributeId = query.dimension;\n        } else {\n            if (\n                facetData[\"@com.sap.vocabularies.Search.v1.Facet\"] &&\n                facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions &&\n                facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions[0] &&\n                facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions[0].PropertyName\n            ) {\n                attributeId = facetData[\"@com.sap.vocabularies.Search.v1.Facet\"].Dimensions[0].PropertyName;\n            } else {\n                throw new FacetsParseError();\n            }\n        }\n        const metadata = dataSource.getAttributeMetadata(attributeId);\n        return metadata as AttributeMetadata;\n    }\n\n    private async parseChartFacet(\n        query: ChartQuery | SearchQuery | SuggestionQuery,\n        attributeMetadata: AttributeMetadata,\n        facetData,\n        facetTotalCount: number\n    ): Promise<ChartResultSet> {\n        const dataSource = query.filter.dataSource;\n\n        const items = [];\n        // for search query with attribute facet: create corresponding chart query\n        let chartQuery = query;\n        const filter = query.filter.clone();\n        filter.setDataSource(dataSource); // relevant only for common attribute facets\n        filter.setRootCondition(query.filter.rootCondition.clone()); // changing ds removes condition\n        chartQuery = this.sina.createChartQuery({\n            filter: filter,\n            dimension: attributeMetadata.id,\n            nlq: query.nlq,\n        });\n        // Check whether items contains at least one icon\n        // If yes, placeholder sap-icon://none shall be applied for items that have no icon in this facet\n\n        // TODO: attributeMetadata.id + \"@com.sap.vocabularies.Common.v1.Text\" for facet icon is used in repo as a workaround\n        // and will be replaced by attributeMetadata.usage?.AdvancedSearch?.iconUrlAttributeName\n        // Facet doesn't need to be checked becaused Facet is always AdvancedSearch\n        const iconPropertyName =\n            attributeMetadata.usage?.AdvancedSearch?.iconUrlAttributeName ||\n            attributeMetadata.id + \"@com.sap.vocabularies.Common.v1.Text\";\n        const isIconContained =\n            facetData.Items.findIndex((item) => item[iconPropertyName]?.startsWith(\"sap-icon://\")) > -1;\n        // create result set items\n        for (let i = 0; i < facetData.Items.length; i++) {\n            const cell = facetData.Items[i];\n            const textElementValue = cell[attributeMetadata.id + \"@com.sap.vocabularies.Common.v1.Text\"];\n            let icon = \"\";\n            if (isIconContained === true) {\n                icon = \"sap-icon://none\";\n            }\n            let dimensionValueFormatted = this.formatFacetValue(cell[attributeMetadata.id]);\n            if (typeof textElementValue === \"string\" && textElementValue.length > 0) {\n                if (textElementValue.startsWith(\"sap-icon://\")) {\n                    icon = textElementValue;\n                } else {\n                    dimensionValueFormatted = textElementValue;\n                    icon = cell[attributeMetadata.usage?.AdvancedSearch?.iconUrlAttributeName] || icon;\n                }\n            } else {\n                icon = cell[attributeMetadata.usage?.AdvancedSearch?.iconUrlAttributeName] || icon;\n            }\n            items.push(\n                this.sina._createChartResultSetItem({\n                    filterCondition: this.createAttributeFilterCondition(\n                        attributeMetadata.id,\n                        attributeMetadata,\n                        cell\n                    ),\n                    dimensionValueFormatted: dimensionValueFormatted,\n                    measureValue: cell._Count,\n                    measureValueFormatted: cell._Count,\n                    icon: icon,\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createChartResultSet({\n            title: attributeMetadata.label,\n            items: items,\n            query: chartQuery,\n            facetTotalCount: facetTotalCount,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return chartQuery._setResultSet(resultSet) as Promise<ChartResultSet>;\n        }\n\n        return resultSet;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,oMAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAWSC,EAAWR,EAAA,qBAEXS,EAAeP,EAAA,yBACfQ,EAAkBP,EAAA,4BAClBQ,EAAUP,EAAA,oBAEVQ,EAAGP,EAAA,aACHQ,EAAgBP,EAAA,0BAChBQ,EAAeP,EAAA,mBAOjB,MAAMQ,EACTC,IACAC,SACAC,KAEAC,YAAYF,GACRG,KAAKH,SAAWA,EAChBG,KAAKF,KAAOD,EAASC,KACrBE,KAAKJ,IAAM,IAAIJ,EAAI,0BACvB,CAEA,WAAMS,CAAMC,EAAmDC,GAC3D,MAAMC,EAAkB,IAAIV,EAC5B,MAAMW,EAAQF,EACV,0CAGJ,IAAKE,EAAO,CACR,OAAOC,QAAQC,QAAQ,GAC3B,CAEA,GAAIJ,EAAKK,MAAO,CACZR,KAAKJ,IAAIa,KAAK,wBAA0BN,EAAKK,MAAME,QACvD,CAEA,MAAMC,EAA2E,GAEjF,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACnC,MAAME,EAAYT,EAAMO,GASxB,IAAIG,EACJ,GAAIb,EAAMc,OAAOC,aAAef,EAAMJ,KAAKoB,mBAAoB,CAC3D,IACIH,EAAYf,KAAKmB,qBAAqBjB,EAAOY,EACjD,CAAE,MAAOM,GACLpB,KAAKJ,IAAIa,KAAK,mDAAqDG,EAAI,KAAOQ,EAAGV,SACjF,QACJ,CACJ,KAAO,CACH,GAAIR,EAAMc,OAAOC,WAAWI,OAASnB,EAAMJ,KAAKwB,eAAeC,SAAU,CACrE,QACJ,CACA,GACIT,EAAU,yCAAyCU,WAAW,GAAGC,eACjE,uBACF,CACE,QACJ,CAEA,IACI,MAAMC,EAAoB1B,KAAK2B,oBAAoBzB,EAAOY,GAC1D,GAAIY,EAAkBE,YAAa,CAC/Bb,EAAYX,EAAgByB,oBAAoB3B,EAAOwB,EAAmBZ,EAC9E,KAAO,CACHC,EAAYf,KAAK8B,gBACb5B,EACAwB,EACAZ,EACAX,EAAK,iBAAmB4B,UAEhC,CACJ,CAAE,MAAOX,GACL,IAAIY,EAAgB,GACpB,GAAIlB,EAAUmB,OAASC,MAAMC,QAAQrB,EAAUmB,OAAQ,CACnDD,EAAgBI,KAAKC,UAAUvB,EACnC,CACAd,KAAKJ,IAAIa,KACL,oCACKK,EAAU,0CAA4C,IACvD,sBACAF,EACA,KACAQ,EAAGV,QACH,gBACAsB,GAER,QACJ,CACJ,CACArB,EAAO2B,KAAKvB,EAChB,CACA,OAAOT,QAAQiC,IAAI5B,EACvB,CAEAQ,qBAAqBjB,EAAcY,GAE/B,IAAI0B,EAAkBtC,EACtB,GAAIA,aAAiBd,EAAa,CAC9BoD,EAAkBxC,KAAKF,KAAK2C,sBAAsB,CAC9CxB,WAAYf,EAAMc,OAAOC,WACzBD,OAAQd,EAAMc,OAAO0B,QACrBC,IAAKzC,EAAMyC,KAEnB,CAGA,MAAMC,EAAQ,GACd,IAAK,IAAIhC,EAAI,EAAGA,EAAIE,EAAUmB,MAAMpB,OAAQD,IAAK,CAC7C,MAAMiC,EAAO/B,EAAUmB,MAAMrB,GAG7B,IAAIK,EAAajB,KAAKF,KAAKgD,cAAcD,EAAKE,OAC9C,IAAK9B,EAAY,CACbA,EAAajB,KAAKF,KAAKkD,iBAAiB,CACpC3B,KAAMrB,KAAKF,KAAKwB,eAAeC,SAC/B0B,GAAIJ,EAAKK,SACTC,MAAON,EAAKO,aAEpB,CAGAR,EAAMN,KACFtC,KAAKF,KAAKuD,+BAA+B,CACrCpC,WAAYA,EACZqC,wBAAyBrC,EAAWsC,YACpCC,aAAcX,EAAKY,OACnBC,sBAAuBb,EAAKY,OAAOE,aAG/C,CAGA,MAAM5C,EAAYf,KAAKF,KAAK8D,2BAA2B,CACnDC,MAAO3D,EAAMc,OAAOC,WAAWkC,MAC/BP,MAAOA,EACP1C,MAAOsC,EACPsB,gBAAiB/B,YAIrB,GAAI7B,aAAiBd,EAAa,CAC9B,OAAOoD,EAAgBuB,cAAchD,EACzC,CAEA,OAAOA,CACX,CAEAiD,+BAA+BC,EAAaC,EAAUrB,GAClD,UACWA,EAAKoB,KAAiB,WAC5BE,OAAOC,UAAUC,eAAeC,KAAKzB,EAAKoB,GAAc,SACrDE,OAAOC,UAAUC,eAAeC,KAAKzB,EAAKoB,GAAc,SAC9D,CAEE,MAAMM,EAAiBvE,KAAKF,KAAK0E,uBAAuB,CACpDC,eAAgBP,EAASf,MACzBuB,WAAY1E,KAAK2E,iBAAiB9B,EAAKoB,IACvCW,SAAUvF,EAAgBwF,IAC1BC,WAAY,KAEhB,IAAIC,EAAmBC,EACvB,IAAKnC,EAAKoB,GAAagB,KAAM,CACzBD,EAAsBhF,KAAKF,KAAKoF,sBAAsB,CAClDC,UAAWlB,EACXW,SAAUtF,EAAmB8F,GAC7B/E,MAAOxB,EAAcwG,WAAWnB,EAAS7C,KAAMwB,EAAKoB,GAAaqB,MAErEf,EAAeO,WAAWxC,KAAK0C,EACnC,MAAO,IAAKnC,EAAKoB,GAAaqB,GAAI,CAC9BP,EAAoB/E,KAAKF,KAAKoF,sBAAsB,CAChDC,UAAWlB,EACXW,SAAUtF,EAAmBiG,GAC7BlF,MAAOxB,EAAcwG,WAAWnB,EAAS7C,KAAMwB,EAAKoB,GAAagB,QAErEV,EAAeO,WAAWxC,KAAKyC,EACnC,KAAO,CACHA,EAAoB/E,KAAKF,KAAKoF,sBAAsB,CAChDC,UAAWlB,EACXW,SAAUtF,EAAmBiG,GAC7BlF,MAAOxB,EAAcwG,WAAWnB,EAAS7C,KAAMwB,EAAKoB,GAAagB,QAErEV,EAAeO,WAAWxC,KAAKyC,GAC/BC,EAAsBhF,KAAKF,KAAKoF,sBAAsB,CAClDC,UAAWlB,EACXW,SAAUtF,EAAmB8F,GAC7B/E,MAAOxB,EAAcwG,WAAWnB,EAAS7C,KAAMwB,EAAKoB,GAAaqB,MAErEf,EAAeO,WAAWxC,KAAK0C,EACnC,CACA,OAAOT,CACX,CAEA,IAAIG,EAAa7F,EAAc2G,qBAC3B3G,EAAcwG,WAAWnB,EAAS7C,KAAMwB,EAAKoB,KAEjD,MAAMwB,EAAmB5C,EAAKoB,EAAc,wCAC5C,UAAWwB,IAAqB,UAAYA,EAAiB5E,OAAS,EAAG,CACrE,GAAI4E,EAAiBC,WAAW,iBAAmB,MAAO,CACtDhB,EAAae,CACjB,CACJ,CACA,OAAOzF,KAAKF,KAAKoF,sBAAsB,CACnCT,eAAgBP,EAASf,MACzBgC,UAAWlB,EACX5D,MAAOwC,EAAKoB,GACZS,WAAYA,GAEpB,CAEAC,iBAAiBtE,GACb,MAAMsF,EAAe,GAKrB,GAAItF,EAAM,yCAA0C,CAChD,OAAOA,EAAM,wCACjB,CACA,UACWA,IAAU,WAChB8D,OAAOC,UAAUC,eAAeC,KAAKjE,EAAO,SACzC8D,OAAOC,UAAUC,eAAeC,KAAKjE,EAAO,OAClD,CACEA,GAASA,EAAM4E,MAAQU,GAAgB,OAAStF,EAAMiF,IAAMK,EAChE,CACA,OAAOtF,CACX,CAEAsB,oBAAoBzB,EAAmDY,GACnE,MAAMG,EAAaf,EAAMc,OAAOC,WAChC,IAAIgD,EAAc,GAClB,GAAI/D,aAAiBX,GAAcW,EAAM0F,UAAW,CAChD3B,EAAc/D,EAAM0F,SACxB,KAAO,CACH,GACI9E,EAAU,0CACVA,EAAU,yCAAyCU,YACnDV,EAAU,yCAAyCU,WAAW,IAC9DV,EAAU,yCAAyCU,WAAW,GAAGqE,aACnE,CACE5B,EAAcnD,EAAU,yCAAyCU,WAAW,GAAGqE,YACnF,KAAO,CACH,MAAM,IAAIpG,CACd,CACJ,CACA,MAAMyE,EAAWjD,EAAW6E,qBAAqB7B,GACjD,OAAOC,CACX,CAEA,qBAAcpC,CACV5B,EACAwB,EACAZ,EACAgD,GAEA,MAAM7C,EAAaf,EAAMc,OAAOC,WAEhC,MAAM2B,EAAQ,GAEd,IAAImD,EAAa7F,EACjB,MAAMc,EAASd,EAAMc,OAAO0B,QAC5B1B,EAAOgF,cAAc/E,GACrBD,EAAOiF,iBAAiB/F,EAAMc,OAAOkF,cAAcxD,SACnDqD,EAAa/F,KAAKF,KAAKqG,iBAAiB,CACpCnF,OAAQA,EACR4E,UAAWlE,EAAkBuB,GAC7BN,IAAKzC,EAAMyC,MAQf,MAAMyD,EACF1E,EAAkB2E,OAAOC,gBAAgBC,sBACzC7E,EAAkBuB,GAAK,uCAC3B,MAAMuD,EACF1F,EAAUmB,MAAMwE,UAAWC,GAASA,EAAKN,IAAmBV,WAAW,iBAAmB,EAE9F,IAAK,IAAI9E,EAAI,EAAGA,EAAIE,EAAUmB,MAAMpB,OAAQD,IAAK,CAC7C,MAAMiC,EAAO/B,EAAUmB,MAAMrB,GAC7B,MAAM6E,EAAmB5C,EAAKnB,EAAkBuB,GAAK,wCACrD,IAAI0D,EAAO,GACX,GAAIH,IAAoB,KAAM,CAC1BG,EAAO,iBACX,CACA,IAAIrD,EAA0BtD,KAAK2E,iBAAiB9B,EAAKnB,EAAkBuB,KAC3E,UAAWwC,IAAqB,UAAYA,EAAiB5E,OAAS,EAAG,CACrE,GAAI4E,EAAiBC,WAAW,eAAgB,CAC5CiB,EAAOlB,CACX,KAAO,CACHnC,EAA0BmC,EAC1BkB,EAAO9D,EAAKnB,EAAkB2E,OAAOC,gBAAgBC,uBAAyBI,CAClF,CACJ,KAAO,CACHA,EAAO9D,EAAKnB,EAAkB2E,OAAOC,gBAAgBC,uBAAyBI,CAClF,CACA/D,EAAMN,KACFtC,KAAKF,KAAK8G,0BAA0B,CAChCC,gBAAiB7G,KAAKgE,+BAClBtC,EAAkBuB,GAClBvB,EACAmB,GAEJS,wBAAyBA,EACzBE,aAAcX,EAAKY,OACnBC,sBAAuBb,EAAKY,OAC5BkD,KAAMA,IAGlB,CAGA,MAAM5F,EAAYf,KAAKF,KAAKgH,sBAAsB,CAC9CjD,MAAOnC,EAAkByB,MACzBP,MAAOA,EACP1C,MAAO6F,EACPjC,gBAAiBA,IAIrB,GAAI5D,aAAiBd,EAAa,CAC9B,OAAO2G,EAAWhC,cAAchD,EACpC,CAEA,OAAOA,CACX,EACH,IAAAgG,EAAA,CAAAC,WAAA,MAAAD,EAAApH,cAAA,OAAAoH,CAAA","ignoreList":[]}