{"version":3,"file":"ItemParser.js","names":["sap","ui","define","____sina_SinaObject","util","typeConverter","____sina_AttributeType","___tools_WhyfoundProcessor","SinaObject","AttributeType","WhyfoundProcessor","ItemParser","provider","suvNavTargetResolver","constructor","super","this","sina","_createSuvNavTargetResolver","parse","searchQuery","data","ResultList","SearchResults","Promise","resolve","itemsData","results","parseItems","itemProms","i","length","itemData","itemProm","parseItem","push","all","j","allAttributes","titleAttributes","titleDescriptionAttributes","attributes","detailAttributes","semanticObjectTypeAttributes","fallbackDefaultNavigationTarget","dataSource","getDataSource","DataSourceId","attributeData","metadata","attribute","semanticObjectType","score","Number","Score","suvHighlightTerms","suvAttribute","suvAttributeName","suvUrlAttribute","suvMimeTypeAttribute","suvAttributes","whyFounds","whyFoundProcessor","Attributes","getAttributeMetadata","Id","_createSearchResultSetItemAttribute","id","label","value","odata2Sina","type","Value","valueFormatted","Timestamp","undefined","ValueFormatted","valueHighlighted","Snippet","isHighlighted","indexOf","groups","appendRemovingDuplicates","extractHighlightedTerms","suvThumbnailAttribute","suvTargetUrlAttribute","suvTargetMimeTypeAttribute","usage","Navigation","mainNavigation","createNavigationTarget","text","targetUrl","target","Detail","Title","TitleDescription","attributeMetadataMap","_private","name","descriptionAttribute","_isVisible","sort","a1","a2","displayOrder","resolveSuvNavTargets","searchResultSetItem","_createSearchResultSetItem","defaultNavigationTarget","navigationTargets","allAttributesMap","itemPostParser","_createItemPostParser","ungrouppedDetailAttributes","postResultSetItem","postParseResultSetItem","_pushAdditionalWhyFounds","processAdditionalWhyfoundAttributes","isDescription","Array","isArray","group","_isInTamplate","template","nameInTemplate","_getNameInGroup","includes","attributesInGroup","nameInGroup","HitAttributes","_isUngrouppedDetailAttribute","k","__exports","__esModule"],"sources":["ItemParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SinaObject } from \"../../sina/SinaObject\";\nimport * as util from \"../../core/util\";\nimport * as typeConverter from \"./typeConverter\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { SuvAttribute, SuvNavTargetResolver } from \"../tools/fiori/SuvNavTargetResolver\";\nimport { Provider, OdataEDMType } from \"./Provider\";\nimport { SearchResultSetItemAttributeBase } from \"../../sina/SearchResultSetItemAttributeBase\";\nimport { WhyfoundProcessor } from \"../tools/WhyfoundProcessor\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\n\n// import { ObjectSuggestion } from \"../../sina/ObjectSuggestion\";\n\nexport interface ABAPOdataSearchResponse {\n    DataSourceId: string;\n    Attributes: { results: Array<AttributesResult> };\n    HitAttributes: { results: Array<HitAttributesResult> };\n    Score: string;\n}\n\nexport interface AttributesResult {\n    Boosted: boolean;\n    Id: string;\n    Name: string;\n    Snippet: string;\n    Value: string;\n    ValueFormatted: string;\n}\nexport interface HitAttributesResult {\n    EDMType: OdataEDMType | \"\";\n    Id: string;\n    Name: string;\n    Snippet: string;\n}\n\nexport class ItemParser extends SinaObject {\n    provider: Provider;\n    suvNavTargetResolver: SuvNavTargetResolver;\n\n    constructor(provider: Provider) {\n        super();\n        this.provider = provider;\n        this.sina = provider.sina;\n        this.suvNavTargetResolver = this.sina._createSuvNavTargetResolver();\n    }\n\n    public parse(searchQuery: SearchQuery, data): Promise<Array<SearchResultSetItem>> {\n        if (data.ResultList.SearchResults === null) {\n            return Promise.resolve([]);\n        }\n        const itemsData = data.ResultList.SearchResults.results;\n        return this.parseItems(itemsData);\n    }\n\n    public parseItems(itemsData: Array<ABAPOdataSearchResponse>): Promise<Array<SearchResultSetItem>> {\n        const itemProms = [];\n        for (let i = 0; i < itemsData.length; ++i) {\n            const itemData = itemsData[i];\n            const itemProm = this.parseItem(itemData);\n            itemProms.push(itemProm);\n        }\n        return Promise.all(itemProms);\n    }\n\n    public async parseItem(itemData: ABAPOdataSearchResponse): Promise<SearchResultSetItem> {\n        let j;\n        const allAttributes = {}; // all server attributes (response attributes, hit attributes, ...)\n        const titleAttributes = [];\n        const titleDescriptionAttributes = [];\n        const attributes = [];\n        const detailAttributes = [];\n        const semanticObjectTypeAttributes = [];\n        let fallbackDefaultNavigationTarget;\n        const dataSource = this.sina.getDataSource(itemData.DataSourceId);\n        let attributeData, metadata, attribute, semanticObjectType;\n        const score = Number(itemData.Score) / 100;\n        const suvHighlightTerms = [];\n        let suvAttribute, suvAttributeName, suvUrlAttribute, suvMimeTypeAttribute;\n        const suvAttributes: { [key: string]: SuvAttribute } = {};\n        let whyFounds = {};\n\n        const whyFoundProcessor = new WhyfoundProcessor(this.sina);\n\n        for (j = 0; j < itemData.Attributes.results.length; j++) {\n            attributeData = itemData.Attributes.results[j];\n            metadata = dataSource.getAttributeMetadata(attributeData.Id);\n\n            attribute = this.sina._createSearchResultSetItemAttribute({\n                id: attributeData.Id,\n                label: metadata.label,\n                value: typeConverter.odata2Sina(metadata.type, attributeData.Value),\n                valueFormatted:\n                    metadata.type === AttributeType.Timestamp ? undefined : attributeData.ValueFormatted,\n                // Problem: Backend is not able to format timestamp value according to browser time zone.\n                // Solution: ignore server timestamp valueFomatted and format raw value in ResultValueFormatter\n                valueHighlighted: attributeData.Snippet,\n                isHighlighted:\n                    attributeData.Snippet.indexOf(\"<b>\") > -1 && attributeData.Snippet.indexOf(\"</b>\") > -1,\n                metadata: metadata,\n                groups: [],\n            });\n\n            // envalue valueFormatted in ResultValueFormatter.js\n            //attribute.valueFormatted = attributeData.ValueFormatted;\n            //attribute.valueHighlighted = attributeData.Snippet || attributeData.ValueFormatted;\n\n            allAttributes[attribute.id] = attribute;\n\n            // collect highlight terms needed for creation of suv viewer link\n            util.appendRemovingDuplicates(\n                suvHighlightTerms,\n                util.extractHighlightedTerms(attribute.valueHighlighted)\n            );\n\n            if (metadata.suvUrlAttribute && metadata.suvMimeTypeAttribute) {\n                suvUrlAttribute = allAttributes[metadata.suvUrlAttribute] || metadata.suvUrlAttribute.id;\n                suvMimeTypeAttribute =\n                    allAttributes[metadata.suvMimeTypeAttribute] || metadata.suvMimeTypeAttribute.id;\n                suvAttributes[attributeData.Id] = {\n                    suvThumbnailAttribute: attribute,\n                    suvTargetUrlAttribute: suvUrlAttribute,\n                    suvTargetMimeTypeAttribute: suvMimeTypeAttribute,\n                };\n            }\n\n            if (metadata.usage.Navigation) {\n                if (metadata.usage.Navigation.mainNavigation) {\n                    fallbackDefaultNavigationTarget = this.sina.createNavigationTarget({\n                        text: attribute.value,\n                        targetUrl: attribute.value,\n                        target: \"_blank\",\n                    });\n                }\n            }\n\n            attributes.push(attribute);\n            if (metadata.usage.Detail) {\n                detailAttributes.push(attribute);\n            }\n\n            if (metadata.usage.Title) {\n                titleAttributes.push(attribute);\n            }\n            if (metadata.usage.TitleDescription) {\n                titleDescriptionAttributes.push(attribute);\n            }\n\n            semanticObjectType = dataSource.attributeMetadataMap[attribute.id]._private.semanticObjectType;\n\n            if (semanticObjectType && semanticObjectType.length > 0) {\n                semanticObjectTypeAttributes.push({\n                    name: semanticObjectType,\n                    value: attribute.value,\n                    type: attribute.metadata.type,\n                });\n            }\n\n            // push response attributes (highlighted and not visible) to whyFounds\n            if (\n                attribute.isHighlighted ||\n                (attribute.descriptionAttribute && attribute.descriptionAttribute.isHighlighted)\n            ) {\n                if (!this._isVisible(metadata) && typeof whyFounds[attribute.id] === \"undefined\") {\n                    // this._isVisible means:\n                    // attribute is used as title or title description or detail, or\n                    // attribute is in Template of ancestor group attribute, that is used as title or title description or detail\n                    whyFounds[attribute.id] = [attribute.valueHighlighted];\n                }\n            }\n        }\n\n        for (suvAttributeName in suvAttributes) {\n            suvAttribute = suvAttributes[suvAttributeName];\n            if (typeof suvAttribute.suvTargetUrlAttribute === \"string\") {\n                suvAttribute.suvTargetUrlAttribute = allAttributes[suvAttribute.suvTargetUrlAttribute];\n            }\n            if (typeof suvAttribute.suvTargetMimeTypeAttribute === \"string\") {\n                suvAttribute.suvTargetMimeTypeAttribute =\n                    allAttributes[suvAttribute.suvTargetMimeTypeAttribute];\n            }\n            if (!(suvAttribute.suvTargetUrlAttribute || suvAttribute.suvTargetMimeTypeAttribute)) {\n                delete suvAttributes[suvAttributeName];\n            }\n        }\n\n        // sort attributes\n        titleAttributes.sort(function (a1, a2) {\n            return a1.metadata.usage.Title.displayOrder - a2.metadata.usage.Title.displayOrder;\n        });\n\n        detailAttributes.sort(function (a1, a2) {\n            return a1.metadata.usage.Detail.displayOrder - a2.metadata.usage.Detail.displayOrder;\n        });\n\n        this.suvNavTargetResolver.resolveSuvNavTargets(dataSource, suvAttributes, suvHighlightTerms);\n\n        const searchResultSetItem = this.sina._createSearchResultSetItem({\n            dataSource: dataSource,\n            attributes: attributes,\n            titleAttributes: titleAttributes,\n            titleDescriptionAttributes: titleDescriptionAttributes,\n            detailAttributes: detailAttributes,\n            defaultNavigationTarget: fallbackDefaultNavigationTarget,\n            navigationTargets: [],\n            score: score,\n        });\n        searchResultSetItem._private.allAttributesMap = allAttributes;\n        searchResultSetItem._private.semanticObjectTypeAttributes = semanticObjectTypeAttributes;\n\n        const itemPostParser = this.sina._createItemPostParser({\n            searchResultSetItem: searchResultSetItem,\n        });\n\n        const ungrouppedDetailAttributes = searchResultSetItem.detailAttributes;\n        const postResultSetItem = await itemPostParser.postParseResultSetItem();\n        whyFounds = this._pushAdditionalWhyFounds(itemData, whyFounds, ungrouppedDetailAttributes); // push request attributes (highlighted and not visible) to whyFounds\n        return await whyFoundProcessor.processAdditionalWhyfoundAttributes(whyFounds, postResultSetItem);\n    }\n\n    // check single attribute is visible (stand-alone or in group attribute)\n    _isVisible(metadata): boolean {\n        if (\n            typeof metadata.usage.Title !== \"undefined\" ||\n            typeof metadata.usage.Detail !== \"undefined\" ||\n            typeof metadata.isDescription !== \"undefined\"\n        ) {\n            return true;\n        }\n\n        if (Array.isArray(metadata.groups)) {\n            // const isVisible = false;\n            for (let i = 0; i < metadata.groups.length; i++) {\n                const group = metadata.groups[i].group;\n                if (this._isVisible(group) && this._isInTamplate(metadata.id, group)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        return false;\n    }\n\n    // check child attribute in template of group attribute\n    _isInTamplate(id, group): boolean {\n        if (group.template && group.attributes && group.attributes.length > 0) {\n            const nameInTemplate = this._getNameInGroup(id, group.attributes);\n            if (nameInTemplate && group.template.includes(\"{\" + nameInTemplate + \"}\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // get child attribute's alias name used in template of group attribute\n    // eslint-disable-next-line\n    _getNameInGroup(id: string, attributesInGroup: any): string | undefined {\n        for (let i = 0; i < attributesInGroup.length; i++) {\n            if (attributesInGroup[i].attribute.id === id) {\n                return attributesInGroup[i].nameInGroup;\n            }\n        }\n        return undefined;\n    }\n\n    // push highlighted request attribute\n\n    private _pushAdditionalWhyFounds(\n        itemData: ABAPOdataSearchResponse,\n        whyFounds: Record<string, Array<string>>,\n        ungrouppedDetailAttributes: Array<SearchResultSetItemAttributeBase>\n    ): Record<string, Array<string>> {\n        if (itemData.HitAttributes && Array.isArray(itemData.HitAttributes.results)) {\n            for (let i = 0; i < itemData.HitAttributes.results.length; i++) {\n                const attributeData = itemData.HitAttributes.results[i];\n                if (\n                    typeof whyFounds[attributeData.Id] === \"undefined\" &&\n                    !this._isUngrouppedDetailAttribute(attributeData.Id, ungrouppedDetailAttributes)\n                ) {\n                    // avoid duplicated whyfounds:\n                    // attribute is a response attribute + highlighted + visible\n                    // and it is a request attribute + highlighted (hitAttribute)\n                    whyFounds[attributeData.Id] = [attributeData.Snippet];\n                }\n            }\n        }\n        return whyFounds;\n    }\n\n    // check attribute (hitAttribue) has been already in ungroupped detail attribute set\n    // eslint-disable-next-line\n    _isUngrouppedDetailAttribute(id: string, ungrouppedDetailAttributes: Array<any>): boolean {\n        for (let k = 0; k < ungrouppedDetailAttributes.length; k++) {\n            if (id === ungrouppedDetailAttributes[k].id) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]}