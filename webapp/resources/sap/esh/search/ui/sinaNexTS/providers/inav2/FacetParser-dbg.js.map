{"version":3,"file":"FacetParser-dbg.js","names":["sap","ui","define","pivotTableParser","typeConverter","____sina_ComparisonOperator","____sina_SearchQuery","____sina_LogicalOperator","____core_errors","ComparisonOperator","SearchQuery","LogicalOperator","FacetsParseError","FacetParser","provider","sina","constructor","parse","query","data","facets","ResultsetFacets","Elements","i","length","facetData","dimension","Metadata","Cube","ObjectName","push","parseDataSourceFacet","filter","dataSource","type","DataSourceType","Category","parseChartFacet","undefined","Promise","all","dataSourceQuery","createDataSourceQuery","clone","nlq","facet","ResultSet","items","cells","cell","getDataSource","$$DataSource$$","Value","_createDataSource","id","label","ValueFormatted","_createDataSourceResultSetItem","dimensionValueFormatted","measureValue","measureValueFormatted","resultSet","_createDataSourceResultSet","title","facetTotalCount","_setResultSet","createAttributeFilterCondition","attributeId","metadata","$$AttributeValue$$","createSimpleCondition","attribute","value","ina2Sina","attributeLabel","valueLabel","complexCondition","createComplexCondition","operator","And","conditions","Ge","Le","DataSource","getAttributeMetadata","chartQuery","setDataSource","setRootCondition","rootCondition","createChartQuery","_createChartResultSetItem","filterCondition","_createChartResultSet","__exports","__esModule"],"sources":["FacetParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport * as pivotTableParser from \"./pivotTableParser\";\nimport * as typeConverter from \"./typeConverter\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { Sina } from \"../../sina/Sina\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { Provider } from \"./Provider\";\nimport { FacetsParseError } from \"../../core/errors\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\n\nexport class FacetParser {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider: Provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    parse(query, data) {\n        const facets = [];\n        if (!data.ResultsetFacets || !data.ResultsetFacets.Elements) {\n            return [];\n        }\n        for (let i = 0; i < data.ResultsetFacets.Elements.length; i++) {\n            const facetData = data.ResultsetFacets.Elements[i];\n            const dimension = facetData.Metadata.Cube.ObjectName;\n            if (dimension === \"$$DataSources$$\") {\n                facets.push(this.parseDataSourceFacet(query, facetData));\n            } else {\n                if (query.filter.dataSource.type === query.sina.DataSourceType.Category) {\n                    continue; // ignore common attributes facets\n                }\n                facets.push(this.parseChartFacet(query, facetData, undefined)); // ToDo: Fill with total count of all facet items -> see getDataForPieChart of SearchFacetPieChart.ts\n            }\n        }\n        return Promise.all(facets);\n    }\n\n    parseDataSourceFacet(query, facetData) {\n        // for search query with datasource facet: create corresponding datasource query\n        let dataSourceQuery = query;\n        if (query instanceof SearchQuery) {\n            dataSourceQuery = this.sina.createDataSourceQuery({\n                dataSource: query.filter.dataSource,\n                filter: query.filter.clone(),\n                nlq: query.nlq,\n            });\n        }\n\n        // assemble results set items\n        const facet = pivotTableParser.parse(facetData.ResultSet);\n        const items = [];\n        for (let i = 0; i < facet.cells.length; i++) {\n            const cell = facet.cells[i];\n\n            // create filter (used when clicking on the item)\n            let dataSource = this.sina.getDataSource(cell.$$DataSource$$[0].Value);\n            if (!dataSource) {\n                dataSource = this.sina._createDataSource({\n                    type: this.sina.DataSourceType.Category,\n                    id: cell.$$DataSource$$[0].Value,\n                    label: cell.$$DataSource$$[0].ValueFormatted,\n                });\n            }\n\n            // create item\n            items.push(\n                this.sina._createDataSourceResultSetItem({\n                    dataSource: dataSource,\n                    dimensionValueFormatted: cell.$$DataSource$$[0].ValueFormatted,\n                    measureValue: cell.Value,\n                    measureValueFormatted: cell.ValueFormatted,\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createDataSourceResultSet({\n            title: query.filter.dataSource.label,\n            items: items,\n            query: dataSourceQuery,\n            facetTotalCount: undefined,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return dataSourceQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n\n    createAttributeFilterCondition(attributeId, metadata, cell) {\n        switch (cell.$$AttributeValue$$.length) {\n            case 2:\n                return this.sina.createSimpleCondition({\n                    attribute: attributeId,\n                    value: typeConverter.ina2Sina(metadata.type, cell.$$AttributeValue$$[0].Value),\n                    attributeLabel: metadata.label,\n                    valueLabel: cell.$$AttributeValue$$[0].ValueFormatted,\n                });\n            case 3: {\n                const complexCondition = this.sina.createComplexCondition({\n                    attributeLabel: metadata.label,\n                    valueLabel: cell.$$AttributeValue$$[0].ValueFormatted,\n                    operator: LogicalOperator.And,\n                });\n                const conditions = [];\n                if (cell.$$AttributeValue$$[1].Value) {\n                    conditions.push(\n                        this.sina.createSimpleCondition({\n                            attribute: attributeId,\n                            operator: ComparisonOperator.Ge,\n                            value: typeConverter.ina2Sina(metadata.type, cell.$$AttributeValue$$[1].Value),\n                        })\n                    );\n                }\n                if (cell.$$AttributeValue$$[2].Value) {\n                    conditions.push(\n                        this.sina.createSimpleCondition({\n                            attribute: attributeId,\n                            operator: ComparisonOperator.Le,\n                            value: typeConverter.ina2Sina(metadata.type, cell.$$AttributeValue$$[2].Value),\n                        })\n                    );\n                }\n                complexCondition.conditions = conditions;\n                return complexCondition;\n            }\n            default:\n                throw new FacetsParseError();\n        }\n    }\n\n    parseChartFacet(query, facetData, facetTotalCount: number): ChartResultSet {\n        const dataSource = this.sina.getDataSource(facetData.Metadata.Cube.DataSource.ObjectName);\n        const attributeId = facetData.Metadata.Cube.ObjectName;\n        const metadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n\n        // for search query with attribute facet: create corresponding chart query\n        let chartQuery = query;\n        if (query instanceof SearchQuery) {\n            const filter = query.filter.clone();\n            filter.setDataSource(dataSource); // relevant only for common attribute facets\n            filter.setRootCondition(query.filter.rootCondition.clone()); // changing ds removes condition\n            chartQuery = this.sina.createChartQuery({\n                filter: filter,\n                dimension: facetData.Metadata.Cube.ObjectName,\n                nlq: query.nlq,\n            });\n        }\n\n        // create result set items\n        const facet = pivotTableParser.parse(facetData.ResultSet);\n        const items = [];\n        for (let i = 0; i < facet.cells.length; i++) {\n            const cell = facet.cells[i];\n            items.push(\n                this.sina._createChartResultSetItem({\n                    filterCondition: this.createAttributeFilterCondition(attributeId, metadata, cell),\n                    dimensionValueFormatted:\n                        cell.$$AttributeValue$$[0].ValueFormatted || cell.$$AttributeValue$$[0].Value,\n                    measureValue: cell.Value,\n                    measureValueFormatted: cell.ValueFormatted,\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createChartResultSet({\n            title: metadata.label,\n            items: items,\n            query: chartQuery,\n            facetTotalCount: facetTotalCount,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return chartQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n}\n"],"mappings":"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","ignoreList":[]}