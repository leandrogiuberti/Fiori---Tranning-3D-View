{"version":3,"file":"FacetService-dbg.js","names":["sap","ui","define","____sina_FacetType","____sina_AttributeType","___Util","FacetType","AttributeType","format10Power","FacetService","sina","dataSourceIds","constructor","searchEngine","createFacetsByDataSourceId","dataSourceId","records","length","undefined","createDataSourceFacetSet","attributes","getDataSource","attributesMetadata","facetAttributes","filter","attribute","usage","Facet","facetAttributesSorted","sort","a","b","displayOrder","createAttributeFacetSet","facetSet","facets","facet","id","label","type","DataSource","position","items","dataSources","ds","recordService","push","description","count","getRecordsByDataSourceId","rawValueLow","rawValueHigh","stringValueLow","stringValueHigh","top","createAttributeFacet","AdvancedSearch","valueMap","Chart","facetTotalCount","itemsData","String","getPointItemsData","item","lowStringValue","lowRawValue","Double","Integer","getNumberRangeItemsData","highStringValue","highRawValue","Timestamp","Date","Time","getDateRangeItemsData","attributeId","map","Map","facetItemsData","record","value","stringValue","get","set","Number","isInteger","slice","numberOfRanges","sortedRecords","sortRecords","minValue","rawValue","maxValue","min10Power","range","i","startValue","endValue","rds","toFixed","toString","now","todayEnd","getFullYear","getMonth","getDate","futureStart","getTime","last7DaysStart","setHours","last30DaysStart","thisYearStart","thisYearEnd","lastYearStart","lastYearEnd","last3YearStart","last5YearStart","ranges","__exports","__esModule"],"sources":["FacetService.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { FacetType } from \"../../sina/FacetType\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Record } from \"./RecordService\";\nimport { Value as RawValue } from \"../../sina/types\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { format10Power } from \"./Util\";\nimport { SearchEngine } from \"./SearchEngine\";\n\nexport interface FacetSet {\n    dataSourceId: string;\n    facets: Facet[];\n}\n\nexport interface Facet {\n    id: string;\n    label: string;\n    type: FacetType;\n    facetTotalCount: number;\n    position: number;\n    items: FacetItem[];\n}\n\nexport interface FacetItem {\n    description: string;\n    count: number;\n    rawValueLow: RawValue;\n    rawValueHigh: RawValue;\n    stringValueLow: string;\n    stringValueHigh: string;\n    // type: \"AttributeValue\",\n}\n\nexport interface FacetItemData {\n    lowStringValue: string;\n    lowRawValue: RawValue;\n    highStringValue: string;\n    highRawValue: RawValue;\n    count: number;\n}\n\nexport class FacetService {\n    sina: Sina;\n    dataSourceIds = [] as string[];\n\n    constructor(\n        sina: Sina,\n        dataSourceIds: string[],\n        readonly searchEngine: SearchEngine\n    ) {\n        this.sina = sina;\n        this.dataSourceIds = dataSourceIds;\n    }\n\n    createFacetsByDataSourceId(dataSourceId: string, records: Record[]): FacetSet | undefined {\n        if (records.length === 0) {\n            return undefined;\n        }\n\n        if (dataSourceId === \"All\") {\n            return this.createDataSourceFacetSet(records);\n        } else {\n            const attributes = this.sina.getDataSource(dataSourceId).attributesMetadata;\n            const facetAttributes = attributes.filter((attribute) => attribute.usage.Facet !== undefined);\n            const facetAttributesSorted = facetAttributes.sort(\n                (a, b) => (a.usage.Facet.displayOrder || 0) - (b.usage.Facet.displayOrder || 0)\n            ) as Array<AttributeMetadata>;\n            return this.createAttributeFacetSet(records, facetAttributesSorted, 5);\n        }\n    }\n\n    createDataSourceFacetSet(records: Record[]): FacetSet {\n        const facetSet = {\n            dataSourceId: \"All\",\n            facets: [],\n        } as FacetSet;\n\n        const facet = {\n            id: \"DataSource\",\n            label: \"Data Sources\",\n            type: FacetType.DataSource,\n            position: 0,\n            items: [],\n        } as Facet;\n\n        const dataSources = this.sina.dataSources.filter((ds) => ds.type === \"BusinessObject\");\n        const recordService = this.searchEngine.recordService;\n        for (const ds of dataSources) {\n            facet.items.push({\n                description: ds.label,\n                count: recordService.getRecordsByDataSourceId(ds.id, records).length,\n                rawValueLow: ds.id,\n                rawValueHigh: \"\",\n                stringValueLow: ds.label,\n                stringValueHigh: \"\",\n                // type: \"View\",\n            } as FacetItem);\n        }\n\n        facetSet.facets.push(facet);\n\n        return facetSet;\n    }\n\n    createAttributeFacetSet(\n        records: Record[],\n        facetAttributes: Array<AttributeMetadata>,\n        top?: number\n    ): FacetSet {\n        if (records.length === 0) {\n            return undefined;\n        }\n\n        const dataSourceId = records[0].dataSourceId;\n        const facetSet = {\n            dataSourceId: dataSourceId,\n            facets: [],\n        } as FacetSet;\n\n        for (const attribute of facetAttributes ? facetAttributes : []) {\n            const facet = this.createAttributeFacet(records, attribute, top);\n            if (facet) {\n                facetSet.facets.push(facet);\n            }\n        }\n\n        return facetSet;\n    }\n\n    createAttributeFacet(records: Record[], attribute: AttributeMetadata, top?: number): Facet | undefined {\n        if (attribute.usage?.Facet === undefined && attribute.usage?.AdvancedSearch === undefined) {\n            return undefined;\n        }\n\n        // facet attribute may not be found in results, facet items and counts are not available\n        if (records[0]?.valueMap[attribute.id] === undefined) {\n            return undefined;\n        }\n\n        const facet = {\n            id: attribute.id,\n            label: attribute.label,\n            type: FacetType.Chart,\n            position:\n                attribute.usage?.Facet?.displayOrder || attribute.usage?.AdvancedSearch?.displayOrder || 0,\n            items: [],\n            facetTotalCount: 99999, // ToDo: Fill with total count of all facet items -> see getDataForPieChart of SearchFacetPieChart.ts\n        } as Facet;\n\n        let itemsData = [] as FacetItemData[];\n\n        // create attribute facet according to attribute type\n        switch (attribute.type) {\n            case AttributeType.String:\n                itemsData = this.getPointItemsData(records, attribute.id, top);\n                for (const item of itemsData) {\n                    facet.items.push({\n                        description: item.lowStringValue,\n                        count: item.count,\n                        rawValueLow: item.lowRawValue,\n                        rawValueHigh: \"\",\n                        stringValueLow: item.lowStringValue,\n                        stringValueHigh: \"\",\n                        // type: \"AttributeValue\",\n                    } as FacetItem);\n                }\n                break;\n\n            case AttributeType.Double:\n            case AttributeType.Integer:\n                itemsData = this.getNumberRangeItemsData(records, attribute.id, top);\n                for (const item of itemsData) {\n                    facet.items.push({\n                        description: item.lowStringValue + \" ... \" + item.highStringValue,\n                        count: item.count,\n                        rawValueLow: item.lowRawValue,\n                        rawValueHigh: item.highRawValue,\n                        stringValueLow: item.lowStringValue,\n                        stringValueHigh: item.highStringValue,\n                        // type: \"AttributeValue\",\n                    } as FacetItem);\n                }\n                break;\n\n            case AttributeType.Timestamp:\n            case AttributeType.Date:\n            case AttributeType.Time:\n                itemsData = this.getDateRangeItemsData(records, attribute.id, top);\n                for (const item of itemsData) {\n                    facet.items.push({\n                        description: item.lowStringValue,\n                        count: item.count,\n                        rawValueLow: item.lowRawValue,\n                        rawValueHigh: item.highRawValue,\n                        stringValueLow: item.lowStringValue,\n                        stringValueHigh: item.highStringValue,\n                        // type: \"AttributeValue\",\n                    } as FacetItem);\n                }\n                break;\n\n            default:\n            // case AttributeType.ImageUrl\n            // case AttributeType.ImageBlob\n            // case AttributeType.GeoJson\n            // case AttributeType.Group\n            // case AttributeType.INAV2_SearchTerms\n            // case AttributeType.INAV2_SuggestionTerms\n            // do nothing\n        }\n\n        return facet.items.length > 0 ? facet : undefined;\n    }\n\n    private getPointItemsData(records: Record[], attributeId: string, top?: number): FacetItemData[] {\n        const map = new Map();\n        const facetItemsData: FacetItemData[] = [];\n\n        // 1. create hash map of attribute value and count\n        for (const record of records) {\n            const value = record?.valueMap[attributeId]?.stringValue;\n            if (map.get(value) === undefined) {\n                map.set(value, 1);\n            } else {\n                map.set(value, map.get(value) + 1);\n            }\n        }\n\n        // 2. set facet items data\n        for (const [value, count] of map) {\n            if (count > 0) {\n                facetItemsData.push({\n                    lowStringValue: value,\n                    lowRawValue: value,\n                    highStringValue: undefined,\n                    highRawValue: undefined,\n                    count: count,\n                });\n            }\n        }\n\n        // 3. sort facet items data by count descending, and limit to top\n        if (Number.isInteger(top) && top > 0) {\n            return facetItemsData.sort((a, b) => b.count - a.count).slice(0, top);\n        } else {\n            return facetItemsData.sort((a, b) => b.count - a.count);\n        }\n    }\n\n    private getNumberRangeItemsData(records: Record[], attributeId: string, top?: number): FacetItemData[] {\n        const facetItemsData: FacetItemData[] = [];\n        const numberOfRanges = top || 100;\n\n        // 1. sort records by attribute value, records with same attribute value following each other\n        const sortedRecords = this.searchEngine.recordService.sortRecords(records, attributeId, \"Ascending\");\n\n        // 2. get minimal and maximal attribute raw value, and range size\n        const minValue = sortedRecords[0].valueMap[attributeId].rawValue as number;\n        const maxValue = sortedRecords[sortedRecords.length - 1].valueMap[attributeId].rawValue as number;\n        const min10Power = format10Power(minValue, false);\n        const range = format10Power((maxValue - minValue) / numberOfRanges, true);\n\n        // 3. calculate range items data\n        for (let i = 0; i < numberOfRanges; i++) {\n            const startValue = min10Power + i * range;\n            const endValue = startValue + range; // last item end Value is max attribute value\n\n            const rds = records.filter((record) => {\n                const value = record.valueMap[attributeId].rawValue as number;\n                return value >= startValue && value < endValue;\n            });\n\n            if (rds.length > 0) {\n                facetItemsData.push({\n                    lowStringValue: startValue.toFixed(2).toString(),\n                    lowRawValue: startValue,\n                    highStringValue: endValue.toFixed(2).toString(),\n                    highRawValue: endValue,\n                    count: rds.length,\n                });\n            }\n        }\n\n        // 4. limit to top, don't sort by count\n        if (Number.isInteger(top) && top > 0) {\n            return facetItemsData.slice(0, top);\n        } else {\n            return facetItemsData;\n        }\n    }\n\n    private getDateRangeItemsData(records: Record[], attributeId: string, top?: number): FacetItemData[] {\n        const facetItemsData: FacetItemData[] = [];\n\n        // 1. define possible date ranges\n        const now = new Date();\n        const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);\n        const futureStart = new Date(todayEnd.getTime() + 1);\n        const last7DaysStart = new Date(\n            new Date(todayEnd.getTime() - 6 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0)\n        );\n        const last30DaysStart = new Date(\n            new Date(todayEnd.getTime() - 29 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0)\n        );\n        const thisYearStart = new Date(todayEnd.getFullYear(), 0, 1, 0, 0, 0, 0);\n        const thisYearEnd = new Date(new Date(todayEnd.getFullYear() + 1, 0, 1).getTime() - 1);\n        const lastYearStart = new Date(todayEnd.getFullYear() - 1, 0, 1, 0, 0, 0, 0);\n        const lastYearEnd = new Date(new Date(todayEnd.getFullYear(), 0, 1).getTime() - 1);\n        const last3YearStart = new Date(todayEnd.getFullYear() - 3, 0, 1, 0, 0, 0, 0);\n        const last5YearStart = new Date(todayEnd.getFullYear() - 5, 0, 1, 0, 0, 0, 0);\n        const ranges = [\n            { label: \"Future\", startValue: futureStart, endValue: new Date(8.64e15) }, // futurist date object\n            { label: \"Last 7 Days\", startValue: last7DaysStart, endValue: todayEnd },\n            { label: \"Last 30 Days\", startValue: last30DaysStart, endValue: todayEnd },\n            { label: \"This Year\", startValue: thisYearStart, endValue: thisYearEnd },\n            { label: \"Last Year\", startValue: lastYearStart, endValue: lastYearEnd },\n            { label: \"Last 3 Years\", startValue: last3YearStart, endValue: todayEnd },\n            { label: \"Last 5 Years\", startValue: last5YearStart, endValue: todayEnd },\n            {\n                label: \"Older Than 5 Years\",\n                startValue: new Date(-8640000000000000), // earliest date object\n                endValue: new Date(last5YearStart.getTime() - 1),\n            },\n        ];\n\n        // 2. calculate range items data\n        for (let i = 0; i < ranges.length; i++) {\n            const startValue = ranges[i].startValue;\n            const endValue = ranges[i].endValue;\n\n            // const rds = sortedRecords.filter((record) => {\n            const rds = records.filter((record) => {\n                const value = record.valueMap[attributeId].rawValue as Date;\n                if (startValue != undefined) {\n                    return value >= startValue && value <= endValue;\n                } else {\n                    return value <= endValue;\n                }\n            });\n\n            if (rds.length > 0) {\n                facetItemsData.push({\n                    lowStringValue: ranges[i].label,\n                    lowRawValue: startValue,\n                    highStringValue: undefined,\n                    highRawValue: endValue,\n                    count: rds.length,\n                });\n            }\n        }\n\n        // 3. limit to top, Don't sort by count\n        if (Number.isInteger(top) && top > 0) {\n            return facetItemsData.slice(0, top);\n        } else {\n            return facetItemsData;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}