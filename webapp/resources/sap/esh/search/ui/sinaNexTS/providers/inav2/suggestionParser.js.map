{"version":3,"file":"suggestionParser.js","names":["sap","ui","define","____sina_SuggestionCalculationMode","pivotTableParser","SuggestionCalculationMode","SuggestionParser","provider","sina","constructor","this","parseSuggestions","query","data","parse","suggestions","suggestion","parentSuggestion","i","cells","length","cell","$$Attribute$$","$$Term$$","Scope","$$DataSource$$","parseSearchTermSuggestion","parseSearchTermAndDataSourceSuggestion","filter","dataSource","childSuggestions","push","parseDataSourceSuggestion","getDataSource","Value","clone","setDataSource","_createDataSourceSuggestion","calculationMode","Data","label","ValueFormatted","parseCalculationMode","setSearchTerm","_createSearchTermSuggestion","searchTerm","_createSearchTermAndDataSourceSuggestion","scope","History","suggestionQuery","suggestionParser","__exports","__esModule"],"sources":["suggestionParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { SuggestionCalculationMode } from \"../../sina/SuggestionCalculationMode\";\nimport { Provider } from \"./Provider\";\nimport * as pivotTableParser from \"./pivotTableParser\";\n\nclass SuggestionParser {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    parseSuggestions(query, data) {\n        data = pivotTableParser.parse(data);\n        const suggestions = [];\n        let suggestion;\n        let parentSuggestion;\n\n        for (let i = 0; i < data.cells.length; i++) {\n            suggestion = null;\n            const cell = data.cells[i];\n            if (cell.$$Attribute$$ !== \"$$AllAttributes$$\") {\n                continue;\n            }\n            switch (cell.$$Term$$.Scope) {\n                case \"SearchHistory\":\n                    if (cell.$$DataSource$$ === \"$$AllDataSources$$\") {\n                        suggestion = this.parseSearchTermSuggestion(query, cell);\n                    }\n                    break;\n                case \"ObjectData\":\n                    if (cell.$$DataSource$$ === \"$$AllDataSources$$\") {\n                        suggestion = this.parseSearchTermSuggestion(query, cell);\n                        parentSuggestion = suggestion;\n                    } else {\n                        suggestion = this.parseSearchTermAndDataSourceSuggestion(query, cell);\n                        if (\n                            suggestion &&\n                            suggestion.filter.dataSource !== parentSuggestion.filter.dataSource\n                        ) {\n                            parentSuggestion.childSuggestions.push(suggestion);\n                        }\n                        suggestion = null;\n                    }\n                    break;\n                case \"DataSources\":\n                    if (cell.$$DataSource$$ === \"$$AllDataSources$$\") {\n                        suggestion = this.parseDataSourceSuggestion(query, cell);\n                    }\n                    break;\n            }\n            if (suggestion) {\n                suggestions.push(suggestion);\n            }\n        }\n        return suggestions;\n    }\n\n    parseDataSourceSuggestion(query, cell) {\n        const dataSource = this.sina.getDataSource(cell.$$Term$$.Value);\n        if (!dataSource) {\n            return null;\n        }\n        const filter = query.filter.clone();\n        filter.setDataSource(dataSource);\n        return this.sina._createDataSourceSuggestion({\n            calculationMode: SuggestionCalculationMode.Data,\n            dataSource: dataSource,\n            label: cell.$$Term$$.ValueFormatted,\n        });\n    }\n\n    parseSearchTermSuggestion(query, cell) {\n        const calculationMode = this.parseCalculationMode(cell.$$Term$$.Scope);\n        const filter = query.filter.clone();\n        filter.setSearchTerm(cell.$$Term$$.Value);\n        return this.sina._createSearchTermSuggestion({\n            searchTerm: cell.$$Term$$.Value,\n            calculationMode: calculationMode,\n            filter: filter,\n            label: cell.$$Term$$.ValueFormatted,\n        });\n    }\n\n    parseSearchTermAndDataSourceSuggestion(query, cell) {\n        const calculationMode = this.parseCalculationMode(cell.$$Term$$.Scope);\n        const filter = query.filter.clone();\n        filter.setSearchTerm(cell.$$Term$$.Value);\n        const dataSource = this.sina.getDataSource(cell.$$DataSource$$);\n        if (!dataSource) {\n            return null;\n        }\n        filter.setDataSource(dataSource);\n        return this.sina._createSearchTermAndDataSourceSuggestion({\n            searchTerm: cell.$$Term$$.Value,\n            dataSource: dataSource,\n            calculationMode: calculationMode,\n            filter: filter,\n            label: cell.$$Term$$.ValueFormatted,\n        });\n    }\n\n    parseCalculationMode(scope) {\n        switch (scope) {\n            case \"SearchHistory\":\n                return SuggestionCalculationMode.History;\n            case \"ObjectData\":\n                return SuggestionCalculationMode.Data;\n        }\n    }\n}\n\nexport function parse(provider, suggestionQuery, data) {\n    const suggestionParser = new SuggestionParser(provider);\n    return suggestionParser.parseSuggestions(suggestionQuery, data);\n}\n"],"mappings":"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","ignoreList":[]}