{"version":3,"file":"FederationMethod-dbg.js","names":["sap","ui","define","Ranking","sort","resultSetItemList","results","j","length","concat","a","b","ret","score","RoundRobin","sortedResults","i","mergeMultiResults","firstResults","secondResults","mergeIndex","firstLength","secondLength","k","push","splice","slice","AdvancedRoundRobin","dataSourceId","dataSourceIdMap","dataSource","id","dataSourceScoreArray","index","key","item","dsIndex","r","selectDs","selectRs","shift","__exports","__esModule"],"sources":["FederationMethod.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\n\nexport interface IFederationMethod {\n    sort: (resultSetItemList: Array<SearchResultSetItem>) => Array<SearchResultSetItem>;\n}\n\nexport class Ranking implements IFederationMethod {\n    //sorting method according ranking\n    sort(resultSetItemList) {\n        let results = [];\n        for (let j = 0; j < resultSetItemList.length; j++) {\n            results = results.concat(resultSetItemList[j]);\n        }\n        results.sort(function (a, b) {\n            const ret = b.score - a.score; //high score is first\n            return ret;\n        });\n        return results;\n    }\n}\n\nexport class RoundRobin implements IFederationMethod {\n    //simple round robin method\n    sort(resultSetItemList) {\n        let sortedResults = [];\n        for (let i = 0; i < resultSetItemList.length; i++) {\n            sortedResults = this.mergeMultiResults(sortedResults, resultSetItemList[i], i + 1);\n        }\n        return sortedResults;\n    }\n\n    mergeMultiResults(firstResults, secondResults, mergeIndex) {\n        if (mergeIndex < 1) {\n            return [];\n        }\n        if (mergeIndex === 1) {\n            return secondResults;\n        }\n        const firstLength = firstResults.length;\n        const secondLength = secondResults.length;\n        let results = [];\n        for (let k = 0; k < firstLength; k++) {\n            results.push(firstResults[k]);\n        }\n        for (let i = 0; i < firstLength; i++) {\n            if (i >= secondLength) {\n                break;\n            }\n            results.splice(mergeIndex * (i + 1) - 1, 0, secondResults[i]);\n        }\n        if (secondLength > firstLength) {\n            results = results.concat(secondResults.slice(firstLength - secondLength));\n        }\n        return results;\n    }\n}\n\nexport class AdvancedRoundRobin implements IFederationMethod {\n    //advanced round robin method\n    sort(resultSetItemList) {\n        let results = [];\n        for (let j = 0; j < resultSetItemList.length; j++) {\n            results = results.concat(resultSetItemList[j]);\n        }\n\n        let dataSourceId;\n\n        //result list map, key: dataSourceId, value: array list of resultlist\n        const dataSourceIdMap = {};\n        for (let i = 0; i < results.length; i++) {\n            dataSourceId = results[i].dataSource.id;\n            if (!dataSourceIdMap[dataSourceId]) {\n                dataSourceIdMap[dataSourceId] = [];\n            }\n            dataSourceIdMap[dataSourceId].push(results[i]);\n        }\n\n        //array of objects: dataSouceId, high score, original index\n        const dataSourceScoreArray = [];\n        let index = 0;\n        for (const key in dataSourceIdMap) {\n            const item = dataSourceIdMap[key][0];\n            dataSourceId = item.dataSource.id;\n            const score = item.score;\n            dataSourceScoreArray.push({\n                dataSourceId: dataSourceId,\n                score: score,\n                index: index,\n            });\n            index++;\n        }\n\n        //sort dataSourceScoreArray\n        dataSourceScoreArray.sort(function (a, b) {\n            let ret = b.score - a.score; //high score is first\n            if (ret === 0) {\n                ret = a.index - b.index; //low index is first\n            }\n            return ret;\n        });\n\n        //rebuild the results\n        const sortedResults = [];\n        let dsIndex = 0;\n        for (let r = 0; r < results.length; ) {\n            const selectDs = dataSourceScoreArray[dsIndex];\n            const selectRs = dataSourceIdMap[selectDs.dataSourceId];\n            if (selectRs.length > 0) {\n                sortedResults.push(selectRs.shift());\n                r++;\n            }\n            dsIndex = (dsIndex + 1) % dataSourceScoreArray.length;\n        }\n\n        return sortedResults;\n    }\n}\n"],"mappings":"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","ignoreList":[]}