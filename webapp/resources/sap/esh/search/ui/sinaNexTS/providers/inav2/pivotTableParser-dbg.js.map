{"version":3,"file":"pivotTableParser-dbg.js","names":["sap","ui","define","core","ResultSetParser","resultSet","constructor","options","parseNamedValue","namedValue","value","name","complexValue","prop","Value","formatItem","item","list","NamedValues","obj","i","length","parsedNamedValue","formatItems","items","result","formattedItem","extend","parse","Grids","Axes","cells","axes","enhance","grid","Cells","parseWithCells","parseWithoutCells","cell","j","Index","index","axis","axisItems","resolve","push","measureValue","axisElements","Tuples","tuples","itemIndex","Dimensions","ItemList","Items","itemListByName","ItemLists","itemList","Name","h","k","dimension","ItemListName","parser","__exports","__esModule"],"sources":["pivotTableParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../../core/core\";\n\ntype AxisServerData = object;\ninterface GridServerData {\n    Axes: Array<AxisServerData>;\n    Cells: Array<unknown>;\n}\ninterface PivotTableServerData {\n    Grids: Array<GridServerData>;\n}\nexport class ResultSetParser {\n    resultSet: PivotTableServerData;\n\n    constructor(options) {\n        this.resultSet = options.resultSet;\n    }\n\n    parseNamedValue(namedValue) {\n        let value;\n        let name;\n        let complexValue;\n        for (const prop in namedValue) {\n            switch (prop) {\n                case \"Name\":\n                    name = namedValue[prop];\n                    break;\n                case \"Value\":\n                    value = namedValue[prop];\n                    break;\n                default:\n                    if (!complexValue) {\n                        complexValue = {};\n                    }\n                    complexValue[prop] = namedValue[prop];\n            }\n        }\n        if (complexValue) {\n            complexValue.Value = value;\n            return {\n                name: name,\n                value: complexValue,\n            };\n        }\n        return {\n            name: name,\n            value: value,\n        };\n    }\n\n    formatItem(item) {\n        let list;\n        if (item.NamedValues) {\n            list = item.NamedValues;\n        }\n        if (!list) {\n            return item;\n        }\n\n        const obj = {};\n        for (let i = 0; i < list.length; ++i) {\n            const namedValue = list[i];\n            const parsedNamedValue = this.parseNamedValue(namedValue);\n            obj[parsedNamedValue.name] = this.formatItem(parsedNamedValue.value);\n        }\n        return obj;\n    }\n\n    formatItems(items) {\n        const result = {};\n        for (let i = 0; i < items.length; ++i) {\n            const item = items[i];\n            const formattedItem = this.formatItem(item);\n            core.extend(result, formattedItem);\n        }\n        return result;\n    }\n\n    parse() {\n        // check for data\n        if (!this.resultSet.Grids || !this.resultSet.Grids[0] || !this.resultSet.Grids[0].Axes) {\n            return {\n                cells: [],\n                axes: [],\n            };\n        }\n\n        // enhance result set:\n        // -> create link to item lists in dimensions of axes\n        this.enhance(this.resultSet);\n\n        // get reference to grid,row axis,col axis\n        const grid = this.resultSet.Grids[0];\n\n        // parse\n        if (grid.Cells.length > 0) {\n            return this.parseWithCells(grid);\n        }\n        return this.parseWithoutCells(grid);\n    }\n\n    parseWithCells(grid) {\n        const result = {\n            axes: [],\n            cells: [],\n        };\n\n        for (let i = 0; i < grid.Cells.length; i++) {\n            const cell = grid.Cells[i];\n\n            const items = [];\n            for (let j = 0; j < cell.Index.length; j++) {\n                const index = cell.Index[j];\n                const axis = grid.Axes[j];\n                const axisItems = this.resolve(axis, index);\n                items.push(...axisItems);\n            }\n\n            const measureValue = core.extend({}, cell);\n            delete measureValue.Index;\n            items.push(measureValue);\n\n            result.cells.push(this.formatItems(items));\n        }\n\n        return result;\n    }\n\n    parseWithoutCells(grid) {\n        const result = {\n            axes: [],\n            cells: [],\n        };\n\n        for (let i = 0; i < grid.Axes.length; ++i) {\n            const axis = grid.Axes[i];\n            const axisElements = [];\n            result.axes.push(axisElements);\n            for (let j = 0; j < axis.Tuples.length; ++j) {\n                const items = this.resolve(axis, j);\n                axisElements.push(this.formatItems(items));\n            }\n        }\n\n        return result;\n    }\n\n    resolve(axis, index) {\n        const items = [];\n        if (axis.Tuples.length === 0) {\n            return items;\n        }\n        const tuples = axis.Tuples[index];\n        for (let i = 0; i < tuples.length; ++i) {\n            const itemIndex = tuples[i];\n            const item = axis.Dimensions[i].ItemList.Items[itemIndex];\n            items.push(item);\n        }\n        return items;\n    }\n\n    enhance(resultSet) {\n        // create dictionary with item lists\n        const itemListByName = {};\n        for (let i = 0; i < resultSet.ItemLists.length; ++i) {\n            const itemList = resultSet.ItemLists[i];\n            itemListByName[itemList.Name] = itemList;\n        }\n\n        // loop at all dimensions and set link to item list\n        for (let h = 0; h < resultSet.Grids.length; ++h) {\n            const grid = resultSet.Grids[h];\n            for (let j = 0; j < grid.Axes.length; ++j) {\n                const axis = grid.Axes[j];\n                for (let k = 0; k < axis.Dimensions.length; ++k) {\n                    const dimension = axis.Dimensions[k];\n                    dimension.ItemList = itemListByName[dimension.ItemListName];\n                }\n            }\n        }\n    }\n}\n\nexport function parse(resultSet) {\n    const parser = new ResultSetParser({\n        resultSet: resultSet,\n    });\n    return parser.parse();\n}\n"],"mappings":"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","ignoreList":[]}