{"version":3,"file":"MetadataParser.js","names":["sap","ui","define","___labelCalculation","____sina_SinaObject","____sina_MatchingStrategy","____sina_AttributeType","____sina_AttributeFormatType","____core_errors","____sina_System","____core_Log","createLabelCalculator","SinaObject","MatchingStrategy","AttributeType","AttributeFormatType","UnknownDataTypeError","UnknownPresentationUsageError","System","Log","MetadataParser","_provider","_sina","_labelCalculator","_appSearchDataSource","log","constructor","provider","super","this","sina","undefined","getAppSearchDataSource","parseDataSourceData","dataSourcesData","sorsNavigationTargetGenerator","i","length","dataSourceData","label","Name","Id","labelPlural","NamePlural","dataSource","createDataSource","id","type","DataSourceType","BusinessObject","usage","endsWith","appSearch","attributesMetadata","isKey","nlq","IsNLSEnabled","system","SourceSystem","SourceClient","_private","semanticObjectType","SemanticObjectTypeId","annotations","Annotations","results","calculateLabel","_fillMetadataBufferForDataSource","Attributes","registerObjectType","properties","attributes","attributeMetadataMap","titleAttributes","detailAttributesPrio1","detailAttributesPrio2","detailAttributes","attributeMetadata","cdsAnnotations","dataSourceAnnotations","attributeAnnotations","_parseAnnotationsIntoJsonStructure","publicAttributeMetadata","_fillMetadataBufferForAttribute","attributeAnnotationsSrc","toUpperCase","_parseSemanticsAnnotation","temporaryUsage","Title","push","Detail","isSummary","cdsAnnotationsParser","_createCDSAnnotationsParser","parsingResult","parseCDSAnnotationsForDataSource","dataSourceIsCdsBased","_sortAttributesOfNonCDSBasedDataSource","usageName","displayOrderIndex","Displayed","DisplayOrder","typeAndFormat","_parseAttributeTypeAndFormat","_createAttributeMetadata","Key","isSortable","Sortable","format","matchingStrategy","_parseMatchingStrategy","UIAreas","_parseUsage","rawAttributeMetadata","hasSemanticsAnnotation","semanticsPrefix","annotationName","substr","Semantics","semanticsValue","UnitAttribute","sort","_createSortFunction","attributeId","getAttributeMetadata","displayOrder","sortFunction","_arrayIncludesEntry","array","entry","compareFunction","j","parsedAnnotations","annotationArrayRegex","arrayMatch","annotationPointer","annotationNameParts","annotationsWithDummyArrays","dummyEntry","compareDummyEntriesFunction","entry1","entry2","split","exec","substring","index","Value","parentAnnotation","annotationWithDummyArrays","actualArray","dummyArrayName","artificialEntry","dummyArrayKeyRegex","match","Object","keys","e","warn","usagePropery","a1","a2","TextIndexed","Text","Exact","presentationUsage","ImageUrl","String","LongText","EDMType","Double","Integer","Time","TypeLength","Timestamp","Date","GeoJson","usagesInResponse","advancedSearch","AdvancedSearchRelevant","facet","Facet","forEach","elem","AdvancedSearch","parseDynamicMetadata","searchResult","items","ResultList","SearchResults","item","HitAttributes","getDataSource","DataSourceId","hitAttributes","hitAttribute","parseDynamicAtributeMetadata","dynamicAttributeMetadata","metadata","dynamic","__exports","__esModule"],"sources":["MetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { createLabelCalculator } from \"./labelCalculation\";\nimport { SinaObject } from \"../../sina/SinaObject\";\nimport { LabelCalculator } from \"../../core/LabelCalculator\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Provider } from \"./Provider\";\nimport { MatchingStrategy } from \"../../sina/MatchingStrategy\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { AttributeFormatType } from \"../../sina/AttributeFormatType\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { UnknownDataTypeError, UnknownPresentationUsageError } from \"../../core/errors\";\nimport { System } from \"../../sina/System\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { AttributeUsageType } from \"../../sina/AttributeUsageType\";\nimport { HANAOdataMetadataResponse } from \"../hana_odata/Provider\";\nimport { Log } from \"../../core/Log\";\nimport { CDSAnnotations } from \"../tools/cds/CDSAnnotationsParser\";\n\nexport class MetadataParser extends SinaObject {\n    private _provider: Provider;\n    private _sina: Sina;\n    private _labelCalculator: LabelCalculator;\n    private _appSearchDataSource?: DataSource;\n    private log = new Log(\"ABAP MetadataParser\");\n\n    constructor(provider: Provider) {\n        super();\n        this._provider = provider;\n        this._sina = provider.sina;\n        this._labelCalculator = createLabelCalculator();\n        this._appSearchDataSource = undefined;\n    }\n\n    getAppSearchDataSource(): DataSource {\n        return this._appSearchDataSource;\n    }\n\n    parseDataSourceData(dataSourcesData, sorsNavigationTargetGenerator): void {\n        for (let i = 0; i < dataSourcesData.length; ++i) {\n            const dataSourceData = dataSourcesData[i];\n\n            let label = dataSourceData.Name;\n            if (!label) {\n                label = dataSourceData.Id;\n            }\n\n            let labelPlural = dataSourceData.NamePlural;\n            if (!labelPlural) {\n                labelPlural = label;\n            }\n\n            const dataSource = this._sina.createDataSource({\n                id: dataSourceData.Id,\n                label: label,\n                labelPlural: labelPlural,\n                type: this._sina.DataSourceType.BusinessObject,\n                usage: dataSourceData.Id.endsWith(\"TRANSACTIONS~\")\n                    ? {\n                          appSearch: {},\n                      }\n                    : {},\n                attributesMetadata: [\n                    {\n                        id: \"dummy\",\n                        isKey: false,\n                        label: \"\",\n                        type: \"String\",\n                    },\n                ] as Array<AttributeMetadata>, // fill with dummy attribute\n                nlq: dataSourceData.IsNLSEnabled,\n            });\n\n            dataSource.system = new System({\n                id: dataSourceData.SourceSystem + \".\" + dataSourceData.SourceClient,\n                label: dataSourceData.SourceSystem + \" \" + dataSourceData.SourceClient,\n            });\n\n            dataSource._private.semanticObjectType = dataSourceData.SemanticObjectTypeId;\n            dataSource._private.annotations =\n                (dataSourceData.Annotations && dataSourceData.Annotations.results) || [];\n\n            this._labelCalculator.calculateLabel(dataSource);\n\n            this._fillMetadataBufferForDataSource(dataSource, dataSourceData.Attributes.results);\n\n            sorsNavigationTargetGenerator.registerObjectType({\n                type: dataSource.id,\n                label: dataSource.label,\n                properties: dataSource.attributesMetadata,\n            });\n\n            if (dataSource.id.endsWith(\"TRANSACTIONS~\") && this._appSearchDataSource === undefined) {\n                this._appSearchDataSource = dataSource;\n            }\n        }\n    }\n\n    _fillMetadataBufferForDataSource(dataSource: DataSource, attributes): void {\n        if (dataSource.attributesMetadata[0].id !== \"dummy\") {\n            // check if buffer already filled\n            return;\n        }\n        dataSource.attributesMetadata = [];\n        dataSource.attributeMetadataMap = {};\n        let i;\n        const titleAttributes = [];\n        const detailAttributesPrio1 = [];\n        const detailAttributesPrio2 = [];\n        const detailAttributes = [];\n        let attributeMetadata;\n\n        const cdsAnnotations: CDSAnnotations = {\n            dataSourceAnnotations: {}, // Key-Value-Map for CDS annotations\n            attributeAnnotations: {}, // Key-Value-Map (keys: attribute names) of Key-Value-Maps (keys: annotation names) for CDS annotations\n        };\n\n        // Prepare data source annotations for being passed to CDS annotations parser\n        cdsAnnotations.dataSourceAnnotations = this._parseAnnotationsIntoJsonStructure(\n            dataSource._private.annotations\n        );\n\n        for (i = 0; i < attributes.length; i++) {\n            attributeMetadata = attributes[i];\n\n            const publicAttributeMetadata = this._fillMetadataBufferForAttribute(\n                dataSource,\n                attributeMetadata\n            );\n\n            // prepare attribute annotations for being passed over to the CDS annotations parser\n            const attributeAnnotationsSrc =\n                (attributeMetadata.Annotations && attributeMetadata.Annotations.results) || [];\n            const attributeAnnotations = this._parseAnnotationsIntoJsonStructure(attributeAnnotationsSrc);\n            cdsAnnotations.attributeAnnotations[publicAttributeMetadata.id.toUpperCase()] =\n                attributeAnnotations;\n\n            // if this attribute has a Semantics property but no semantics annotation, create a new semantics annotation that corresponds to Semantics property.\n            this._parseSemanticsAnnotation(attributeMetadata, attributeAnnotations);\n\n            if (publicAttributeMetadata._private.temporaryUsage.Title !== undefined) {\n                titleAttributes.push(publicAttributeMetadata);\n            }\n            if (publicAttributeMetadata._private.temporaryUsage.Detail !== undefined) {\n                if (attributeMetadata.isSummary) {\n                    detailAttributesPrio1.push(publicAttributeMetadata);\n                } else {\n                    detailAttributesPrio2.push(publicAttributeMetadata);\n                }\n            }\n        }\n\n        ///////////////////////////////////////////\n        // Parse CDS Annotations for Data Source\n        const cdsAnnotationsParser = this._sina._createCDSAnnotationsParser({\n            dataSource: dataSource,\n            cdsAnnotations: cdsAnnotations,\n        });\n        const parsingResult = cdsAnnotationsParser.parseCDSAnnotationsForDataSource();\n        if (!parsingResult.dataSourceIsCdsBased) {\n            this._sortAttributesOfNonCDSBasedDataSource(\n                dataSource,\n                titleAttributes,\n                detailAttributes,\n                detailAttributesPrio1,\n                detailAttributesPrio2\n            );\n        }\n\n        ///////////////////////////////////////////////////////////////////////\n        // add any usage that is neither Title nor Detail to attribute usage\n        for (i = 0; i < dataSource.attributesMetadata.length; i++) {\n            attributeMetadata = dataSource.attributesMetadata[i];\n            if (attributeMetadata._private.temporaryUsage) {\n                for (const usageName in attributeMetadata._private.temporaryUsage) {\n                    if (usageName != \"Title\" && usageName != \"Detail\") {\n                        attributeMetadata.usage[usageName] =\n                            attributeMetadata._private.temporaryUsage[usageName];\n                    }\n                }\n                // delete attributeMetadata._private.temporaryUsage;\n            }\n        }\n    }\n\n    _fillMetadataBufferForAttribute(dataSource: DataSource, attributeMetadata: HANAOdataMetadataResponse) {\n        const displayOrderIndex =\n            attributeMetadata.Displayed && attributeMetadata.DisplayOrder\n                ? attributeMetadata.DisplayOrder\n                : -1; // oliver\n\n        const typeAndFormat = this._parseAttributeTypeAndFormat(attributeMetadata);\n\n        const publicAttributeMetadata = this._sina._createAttributeMetadata({\n            id: attributeMetadata.Id,\n            label: attributeMetadata.Name !== \"\" ? attributeMetadata.Name : attributeMetadata.Id,\n            isKey: attributeMetadata.Key,\n            isSortable: attributeMetadata.Sortable,\n            usage: {}, //attributeMetadata.UIAreas ? this._parseUsage(attributeMetadata, displayOrderIndex) : {},\n            type: typeAndFormat.type,\n            format: typeAndFormat.format,\n            matchingStrategy: this._parseMatchingStrategy(attributeMetadata),\n        });\n\n        publicAttributeMetadata._private.semanticObjectType = attributeMetadata.SemanticObjectTypeId;\n\n        // temporaly store usage in this property.\n        // we\"ll decide later whether we use this, or whether we use annotations for setting the usage.\n        publicAttributeMetadata._private.temporaryUsage = attributeMetadata.UIAreas\n            ? this._parseUsage(attributeMetadata, displayOrderIndex)\n            : {};\n\n        dataSource.attributesMetadata.push(publicAttributeMetadata);\n        dataSource.attributeMetadataMap[publicAttributeMetadata.id] = publicAttributeMetadata;\n\n        return publicAttributeMetadata;\n    }\n\n    _parseSemanticsAnnotation(rawAttributeMetadata, attributeAnnotations) {\n        let hasSemanticsAnnotation = false;\n        const semanticsPrefix = \"SEMANTICS\";\n        for (const annotationName in attributeAnnotations) {\n            if (annotationName.substr(0, semanticsPrefix.length) == semanticsPrefix) {\n                hasSemanticsAnnotation = true;\n                break;\n            }\n        }\n        if (rawAttributeMetadata.Semantics && !hasSemanticsAnnotation) {\n            let semanticsValue;\n            switch (rawAttributeMetadata.Semantics) {\n                case \"EMAIL.ADDRESS\":\n                case \"TELEPHONE.TYPE\":\n                case \"CURRENCYCODE\":\n                case \"UNITOFMEASURE\":\n                    semanticsValue = \"TRUE\";\n                    break;\n                case \"QUANTITY.UNITOFMEASURE\":\n                case \"AMOUNT.CURRENCYCODE\":\n                    semanticsValue = rawAttributeMetadata.UnitAttribute;\n                    break;\n            }\n            if (semanticsValue) {\n                attributeAnnotations[semanticsPrefix + rawAttributeMetadata.Semantics] = semanticsValue;\n            }\n        }\n    }\n\n    _sortAttributesOfNonCDSBasedDataSource(\n        dataSource,\n        titleAttributes,\n        detailAttributes,\n        detailAttributesPrio1,\n        detailAttributesPrio2\n    ) {\n        let i, attributeMetadata;\n        titleAttributes.sort(this._createSortFunction(\"Title\"));\n        for (i = 0; i < titleAttributes.length; ++i) {\n            const attributeId = titleAttributes[i].id;\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId);\n            attributeMetadata.usage.Title = attributeMetadata._private.temporaryUsage.Title;\n            attributeMetadata.usage.Title.displayOrder = i;\n        }\n\n        // calculate attribute area display order\n        const sortFunction = this._createSortFunction(\"Detail\");\n        detailAttributesPrio1.sort(sortFunction);\n        detailAttributesPrio2.sort(sortFunction);\n        detailAttributes.push(...detailAttributesPrio1);\n        detailAttributes.push(...detailAttributesPrio2);\n        for (i = 0; i < detailAttributes.length; ++i) {\n            detailAttributes[i].usage.Detail = detailAttributes[i]._private.temporaryUsage.Detail;\n            detailAttributes[i].usage.Detail.displayOrder = i;\n        }\n    }\n\n    _arrayIncludesEntry(array, entry, compareFunction) {\n        let i;\n        if (compareFunction) {\n            for (i = 0; i < array.length; i++) {\n                if (compareFunction(array[i], entry)) {\n                    return true;\n                }\n            }\n        } else {\n            for (i = 0; i < array.length; i++) {\n                if (array[i] == entry) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    _parseAnnotationsIntoJsonStructure(annotations) {\n        if (annotations.length == 0) {\n            return {};\n        }\n        let i, j;\n        const parsedAnnotations = {};\n        let annotationArrayRegex, arrayMatch;\n        let annotationName, annotationPointer;\n        let annotationNameParts;\n        const annotationsWithDummyArrays = [];\n        let dummyEntry;\n\n        const compareDummyEntriesFunction = function (entry1, entry2) {\n            return (\n                entry1.annotationPointer == entry2.annotationPointer &&\n                entry1.annotationName == entry2.annotationName\n            );\n        };\n\n        try {\n            // first step: parse flattened annotations into JSON structure (including dummy arrays)\n            for (j = 0; j < annotations.length; j++) {\n                annotationArrayRegex = /\\[\\d+\\]$/g;\n                annotationPointer = parsedAnnotations;\n\n                annotationNameParts = annotations[j].Name.split(\".\");\n                for (i = 0; i < annotationNameParts.length; i++) {\n                    annotationName = annotationNameParts[i].toUpperCase();\n                    arrayMatch = annotationArrayRegex.exec(annotationName);\n                    if (arrayMatch !== null) {\n                        annotationName = annotationName.substring(0, arrayMatch.index);\n                    }\n\n                    annotationPointer[annotationName] = annotationPointer[annotationName] || {};\n\n                    if (arrayMatch !== null && arrayMatch[0].length > 0) {\n                        //if (Object.keys(annotationPointer[annotationName]).length == 0) {\n                        dummyEntry = {\n                            annotationPointer: annotationPointer,\n                            annotationName: annotationName,\n                        };\n                        if (\n                            !this._arrayIncludesEntry(\n                                annotationsWithDummyArrays,\n                                dummyEntry,\n                                compareDummyEntriesFunction\n                            )\n                        ) {\n                            annotationsWithDummyArrays.push(dummyEntry);\n                        }\n                        if (i < annotationNameParts.length - 1) {\n                            annotationPointer[annotationName][arrayMatch[0]] =\n                                annotationPointer[annotationName][arrayMatch[0]] || {};\n                            annotationPointer = annotationPointer[annotationName][arrayMatch[0]];\n                        } else {\n                            annotationPointer[annotationName][arrayMatch[0]] = annotations[j].Value;\n                        }\n                    } else if (i < annotationNameParts.length - 1) {\n                        annotationPointer = annotationPointer[annotationName];\n                    } else {\n                        annotationPointer[annotationName] = annotations[j].Value;\n                    }\n                }\n            }\n\n            let parentAnnotation;\n            let annotationWithDummyArrays;\n            let actualArray, dummyArrayName, artificialEntry;\n            const dummyArrayKeyRegex = /\\[\\d+\\]/g;\n\n            // second step: replace dummy arrays with real arrays\n            for (j = 0; j < annotationsWithDummyArrays.length; j++) {\n                parentAnnotation = annotationsWithDummyArrays[j].annotationPointer;\n                annotationName = annotationsWithDummyArrays[j].annotationName;\n                annotationWithDummyArrays = parentAnnotation[annotationName];\n                actualArray = [];\n                artificialEntry = {};\n                for (dummyArrayName in annotationWithDummyArrays) {\n                    if (dummyArrayName.match(dummyArrayKeyRegex)) {\n                        actualArray.push(annotationWithDummyArrays[dummyArrayName]);\n                    } else {\n                        // seems to be an entry that was defined besides the actual array in CDS, eg like this:\n                        // @UI.identification: [{ position: 4 }]\n                        // @UI.identification.position: 6\n                        // .. so we put it into its own array entry\n                        artificialEntry[dummyArrayName] = annotationWithDummyArrays[dummyArrayName];\n                    }\n                }\n                if (Object.keys(artificialEntry).length > 0) {\n                    actualArray.push(artificialEntry);\n                }\n                parentAnnotation[annotationName] = actualArray;\n            }\n        } catch (e) {\n            this.log.warn(\"Error while parsing annotations: \" + e);\n            return {};\n        }\n        return parsedAnnotations;\n    }\n\n    _createSortFunction(usagePropery) {\n        return function (a1, a2) {\n            if (\n                a1._private.temporaryUsage[usagePropery].displayOrder <\n                a2._private.temporaryUsage[usagePropery].displayOrder\n            ) {\n                return -1;\n            } else if (\n                a1._private.temporaryUsage[usagePropery].displayOrder >\n                a2._private.temporaryUsage[usagePropery].displayOrder\n            ) {\n                return 1;\n            }\n            return 0;\n        };\n    }\n\n    _parseMatchingStrategy(attributeMetadata) {\n        if (attributeMetadata.TextIndexed) {\n            return MatchingStrategy.Text;\n        }\n        return MatchingStrategy.Exact;\n    }\n\n    _parseAttributeTypeAndFormat(attributeMetadata) {\n        for (let i = 0; i < attributeMetadata.UIAreas.results.length; i++) {\n            const presentationUsage = attributeMetadata.UIAreas.results[i];\n            const id = presentationUsage.Id;\n            switch (id) {\n                case \"SUMMARY\":\n                    continue;\n                case \"DETAILS\":\n                    continue;\n                case \"TITLE\":\n                    continue;\n                case \"#HIDDEN\":\n                case \"HIDDEN\":\n                    continue;\n                case \"FACTSHEET\":\n                    continue;\n                case \"DETAILIMAGE\":\n                case \"PREVIEWIMAGE\":\n                    return {\n                        type: AttributeType.ImageUrl,\n                    };\n                case \"LONGTEXT\":\n                    return {\n                        type: AttributeType.String,\n                        format: AttributeFormatType.LongText,\n                    };\n                default:\n                    throw new UnknownPresentationUsageError(presentationUsage);\n            }\n        }\n\n        switch (attributeMetadata.EDMType) {\n            case \"Edm.String\":\n            case \"Edm.Binary\":\n            case \"Edm.Boolean\":\n            case \"Edm.Byte\":\n            case \"Edm.Guid\":\n                return {\n                    type: AttributeType.String,\n                };\n\n            case \"Edm.Double\":\n            case \"Edm.Decimal\":\n            case \"Edm.Float\":\n            case \"Edm.Single\":\n                return {\n                    type: AttributeType.Double,\n                };\n\n            case \"Edm.Int16\":\n            case \"Edm.Int32\":\n            case \"Edm.Int64\":\n                return {\n                    type: AttributeType.Integer,\n                };\n\n            case \"Edm.Time\":\n                return {\n                    type: AttributeType.Time,\n                };\n\n            case \"Edm.DateTime\":\n            case \"Edm.DateTimeOffset\":\n                if (attributeMetadata?.TypeLength > 8) {\n                    return {\n                        type: AttributeType.Timestamp,\n                    };\n                }\n                return {\n                    type: AttributeType.Date,\n                };\n            case \"GeoJson\":\n                return {\n                    type: AttributeType.GeoJson,\n                };\n            default:\n                throw new UnknownDataTypeError(attributeMetadata.EDMType);\n        }\n    }\n\n    _parseUsage(attributeMetadata, displayOrderIndex) {\n        const usagesInResponse = attributeMetadata.UIAreas.results;\n        const advancedSearch = attributeMetadata.AdvancedSearchRelevant;\n        const facet = attributeMetadata.Facet;\n        const usage: AttributeUsageType = {};\n        usagesInResponse.forEach(function (elem) {\n            const id = elem.Id;\n            if (id === \"TITLE\") {\n                usage.Title = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n\n            if (id === \"SUMMARY\" || id === \"DETAILIMAGE\" || id === \"PREVIEWIMAGE\") {\n                attributeMetadata.isSummary = true;\n                usage.Detail = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n\n            if (\n                id === \"DETAILS\" ||\n                id === \"LONGTEXT\"\n                //||id === \"#HIDDEN\"\n            ) {\n                usage.Detail = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n        });\n\n        if (advancedSearch) {\n            usage.AdvancedSearch = {};\n        }\n\n        if (facet) {\n            usage.Facet = {};\n        }\n\n        return usage;\n    }\n\n    parseDynamicMetadata(searchResult) {\n        // get items from response\n        let items;\n        try {\n            items = searchResult.ResultList.SearchResults.results;\n        } catch (e) {\n            this.log.warn(\"Error while parsing dynamic metadata: \" + e);\n            return;\n        }\n        // process all items\n        for (let i = 0; i < items.length; ++i) {\n            const item = items[i];\n            if (!item.HitAttributes || !item.HitAttributes.results) {\n                continue;\n            }\n            const dataSource = this._sina.getDataSource(item.DataSourceId);\n            const hitAttributes = item.HitAttributes.results;\n            for (let j = 0; j < hitAttributes.length; ++j) {\n                const hitAttribute = hitAttributes[j];\n                this.parseDynamicAtributeMetadata(dataSource, hitAttribute);\n            }\n        }\n    }\n\n    parseDynamicAtributeMetadata(dataSource: DataSource, dynamicAttributeMetadata) {\n        let typeAndFormat;\n        let metadata = dataSource.getAttributeMetadata(dynamicAttributeMetadata.Id) as AttributeMetadata;\n        if (metadata) {\n            // update\n            if (!metadata._private.dynamic) {\n                return; // only update dynamic attributes\n            }\n            dynamicAttributeMetadata.UIAreas = dynamicAttributeMetadata.UIAreas || {\n                results: [],\n            };\n            typeAndFormat = this._parseAttributeTypeAndFormat(dynamicAttributeMetadata);\n            metadata.label = dynamicAttributeMetadata.Name;\n            metadata.type = typeAndFormat.type;\n            metadata.format = typeAndFormat.format;\n        } else {\n            // append\n            dynamicAttributeMetadata.UIAreas = dynamicAttributeMetadata.UIAreas || {\n                results: [],\n            };\n            typeAndFormat = this._parseAttributeTypeAndFormat(dynamicAttributeMetadata);\n            metadata = this._sina._createAttributeMetadata({\n                id: dynamicAttributeMetadata.Id,\n                label: dynamicAttributeMetadata.Name,\n                isKey: false,\n                isSortable: false,\n                usage: {},\n                type: typeAndFormat.type,\n                format: typeAndFormat.format,\n                matchingStrategy: MatchingStrategy.Exact,\n                _private: {\n                    dynamic: true,\n                },\n            });\n            dataSource.attributesMetadata.push(metadata);\n            dataSource.attributeMetadataMap[metadata.id] = metadata;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}