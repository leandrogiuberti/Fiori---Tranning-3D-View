{"version":3,"file":"utils.js","names":["sap","ui","define","___definitions","Term","Phrase","Expression","SearchQueryLogicalOperator","CustomFunction","FilterFunction","LogicalOperator","SEARCH_DEFAULTS","escapeQuery","States","createEshSearchQuery","options","metadataCall","path","resourcePath","metadataObjects","entitySets","format","collectionReference","contextEntitySet","primitiveTyp","parameters","searchPath","suggestTerm","encodeURIComponent","replace","eshParameters","customParameters","key","Object","keys","push","length","join","newODataFilter","operator","and","items","query","scope","$select","facets","oDataFilter","urlSearchPath","searchQueryFilter","searchQueryFilterStatement","toStatement","trim","freeStyleText","freeStyleTextExpression","parseFreeStyleText","optionKey","$apply","filter","groupby","properties","aggregateCountAlias","$orderby","map","i","order","facetroot","dynamicview","dynamicView","apply","getEshSearchQuery","createdQuery","stringParams","term","state","currentChar","substring","indexOf","phrase","TIGHT_AND","__exports","__esModule"],"sources":["utils.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/** Copyright 2019 SAP SE or an SAP affiliate company. All rights reserved. */\nimport { Term, Phrase, Expression, SearchQueryLogicalOperator, IToStatement, IESSearchOptions, CustomFunction, FilterFunction, IEsearchRequestInterface, LogicalOperator, SEARCH_DEFAULTS, escapeQuery} from \"./definitions\"\n\n\nenum States {\n  Term,\n  Phrase\n}\n\n\n\nexport const createEshSearchQuery = (options: IESSearchOptions = {}): IEsearchRequestInterface => {\n  if (options.metadataCall) {\n    let path: string = options.resourcePath ? options.resourcePath : \"/$metadata\";\n    if (options.metadataObjects) {\n      if (options.metadataObjects.entitySets) {\n        path += \"/EntitySets(\" + options.metadataObjects.entitySets + \")\";\n      } else {\n        if (options.metadataObjects.format) {\n          path += \"?$format=\" + options.metadataObjects.format;\n        }\n        if (options.metadataObjects.collectionReference) {\n          path += \"#\" + options.metadataObjects.collectionReference;\n        }\n        if (options.metadataObjects.contextEntitySet && options.metadataObjects.primitiveTyp) {\n          path += \"#\" + options.metadataObjects.contextEntitySet + \"(\" + options.metadataObjects.primitiveTyp + \")\";\n        } else if (options.metadataObjects.contextEntitySet) {\n          path += \"#\" + options.metadataObjects.contextEntitySet;\n        } else if (options.metadataObjects.primitiveTyp) {\n          path += \"#\" + options.metadataObjects.primitiveTyp;\n        }\n      }\n    }\n    return {\n      path: path,\n      parameters: {},\n    };\n  }\n  /*\n  let searchPath1 = \"\";\n  if (options?.resourcePath) {\n    searchPath1 = options?.resourcePath\n  } else {\n    searchPath1 = (options && options.suggestTerm) ? `/$all/${encodeURIComponent(\"GetSuggestion(term='\" + options.suggestTerm.replace(\"'\", \"''\").replace(\"\\\\?\", \"?\") + \"')\")}` : \"/$all\";\n  }*/\n\n  let searchPath = \"/$all\";\n  if (options.resourcePath) {\n    searchPath = options.resourcePath;\n  }\n  if (options?.suggestTerm) {\n    searchPath += `/${encodeURIComponent(\"GetSuggestion(term='\" + options.suggestTerm.replace(/'/g, \"''\") + \"')\")}`;\n  }\n\n\n  if (options.eshParameters) {\n    const customParameters = []\n    for (const key of Object.keys(options.eshParameters)) {\n      customParameters.push(key + \"='\" + encodeURIComponent(options.eshParameters[key]) + \"'\");\n    }\n    if (customParameters.length > 0) {\n      searchPath += \"(\" + customParameters.join(\",\") + \")\"\n    }\n  }\n  const newODataFilter = new Expression({\n    operator: LogicalOperator.and,\n    items: [],\n  });\n  if (!options) {\n    options = {\n      query: SEARCH_DEFAULTS.query,\n      scope: SEARCH_DEFAULTS.scope,\n      $select: [],\n      facets: [],\n    };\n  } else {\n    if (!options.query) {\n      options.query = SEARCH_DEFAULTS.query;\n    }\n    /*\n    if (!options.scope) {\n      options.scope = SEARCH_DEFAULTS.scope;\n    }*/\n    if (!options.$select) {\n      options.$select = [];\n    }\n    if (!options.facets) {\n      options.facets = [];\n    }\n  }\n  if (options.oDataFilter) {\n    newODataFilter.items.push(options.oDataFilter);\n  }\n\n  if (newODataFilter.items.length > 0) {\n    options.oDataFilter = newODataFilter;\n  }\n\n  const urlSearchPath = searchPath;\n  let query = options.scope ? \"SCOPE:\" + options.scope : \"\";\n\n  if (options.searchQueryFilter) {\n    const searchQueryFilterStatement = options.searchQueryFilter.toStatement().trim();\n    if (searchQueryFilterStatement.length > 0) {\n      if (query !== \"\") {\n        query += \" \";\n      }\n      query += searchQueryFilterStatement;\n    }\n  }\n  if (options.freeStyleText) {\n    if (query !== \"\") {\n      query += \" \";\n    }\n    const freeStyleTextExpression = parseFreeStyleText(options.freeStyleText)\n    query += freeStyleTextExpression.toStatement();\n  }\n  if (options.query && options.query !== \"\") {\n    if (query !== \"\") {\n      query += \" \";\n    }\n    query += escapeQuery(options.query);\n  }\n  const parameters: any = {};\n  for (const optionKey of Object.keys(options)) {\n    switch (optionKey) {\n      case \"query\":\n        if (options.$apply) {\n          // it is not allowed to use query and $apply together\n          break;\n        }\n        let filter = query === \"\" ? \"\" : \"filter(Search.search(query='\" + query + \"')\";\n        if (options.oDataFilter && options.oDataFilter.items.length > 0) {\n          filter += \" and \" + options.oDataFilter.toStatement();\n        }\n        if (query !== \"\") {\n          filter += \")\";\n        }\n        if (options.groupby && options.groupby.properties && (options.groupby.properties.length > 0)) {\n          filter += `/groupby((${options.groupby.properties.join(\",\")})`;\n          if (options.groupby.aggregateCountAlias && options.groupby.aggregateCountAlias !== \"\") {\n            filter += `,aggregate($count as ${options.groupby.aggregateCountAlias})`;\n          }\n          filter += \")\";\n        }\n        if (filter !== \"\") {\n          parameters.$apply = filter;\n        }\n        break;\n      case \"$orderby\":\n        if (options.$orderby && options.$orderby.length > 0) {\n          parameters.$orderby = options.$orderby.map(i => i.order ? `${i.key} ${i.order}` : i.key).join(\",\");\n        }\n        break;\n      case \"facets\":\n        if (options.facets && options.facets.length > 0) {\n          parameters[optionKey] = options.facets.join(\",\");\n        }\n        break;\n      case \"$select\":\n        if (options.$select && options.$select.length > 0) {\n          parameters[optionKey] = options.$select.join(\",\");\n        }\n        break;\n      case \"facetroot\":\n        if (options.facetroot && options.facetroot.length > 0) {\n          parameters.facetroot = options.facetroot.map(i => i.toStatement()).join(\",\");\n        }\n        break;\n      case \"$top\":\n      case \"$skip\":\n      case \"$count\":\n      case \"whyfound\":\n      case \"estimate\":\n      case \"wherefound\":\n      case \"facetlimit\":\n      case \"valuehierarchy\":\n      case \"filteredgroupby\":\n        parameters[optionKey] = options[optionKey];\n        break;\n      case \"dynamicview\":\n        if (options.dynamicview) {\n          parameters[optionKey] = options.dynamicview.map(dynamicView => {\n            return dynamicView.toStatement()\n          }).join(\" \");  \n        }\n        break;\n      case \"$apply\":\n        if ((options[optionKey] instanceof CustomFunction) || (options[optionKey] instanceof FilterFunction)) {\n          let apply = (options[optionKey] as IToStatement).toStatement(); \n          if (options.groupby && options.groupby.properties && (options.groupby.properties.length > 0)) {\n            apply += `/groupby((${options.groupby.properties.join(\",\")})`;\n            if (options.groupby.aggregateCountAlias && options.groupby.aggregateCountAlias !== \"\") {\n              apply += `,aggregate($count as ${options.groupby.aggregateCountAlias})`;\n            }\n            apply += \")\";\n          };\n          parameters[optionKey] = apply;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  return {\n    path: urlSearchPath,\n    parameters,\n  };\n};\n\nexport const getEshSearchQuery = (options?: IESSearchOptions): string => {\n  const createdQuery = createEshSearchQuery(options);\n  const stringParams = Object.keys(createdQuery.parameters).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(createdQuery.parameters[key]);\n  }).join(\"&\");\n  if (stringParams && stringParams !== \"\") {\n    return `${createdQuery.path}?${stringParams}`;\n  }\n  return createdQuery.path;\n};\n\nexport const parseFreeStyleText = (freeStyleText: string): Expression => {\n  const items: (Term | Phrase)[] = []\n  let term = \"\";\n  let state: States = States.Term;\n  for (let i = 0; i < freeStyleText.length; i++) {\n    const currentChar = freeStyleText[i];\n    if (currentChar === '\"') {\n      if (state == States.Term) {\n        // check if there is closing \"\n        if (freeStyleText.substring(i+1).indexOf('\"') >= 0) {\n            items.push(new Term({term: term.trim()}));\n            state = States.Phrase;\n            term = '';\n        } else {\n          items.push(new Term({term: (term + freeStyleText.substring(i)).trim()}));\n          term = '';\n          break;\n        }\n      } else {\n        items.push(new Phrase({phrase: term}));\n        state = States.Term;\n        term = '';\n      }\n    } else {\n      term += freeStyleText[i];\n    }\n  }\n  if (term.length > 0) {\n    items.push(new Term({term: term.trim()}));\n  }\n  return new Expression({\n    operator: SearchQueryLogicalOperator.TIGHT_AND,\n    items\n  });\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2BAAAC,GAAA;8EAKA,MACSC,EAAID,EAAA,cAAEE,EAAMF,EAAA,gBAAEG,EAAUH,EAAA,oBAAEI,EAA0BJ,EAAA,oCAAkCK,EAAcL,EAAA,wBAAEM,EAAcN,EAAA,wBAA4BO,EAAeP,EAAA,yBAAEQ,EAAeR,EAAA,yBAAES,EAAWT,EAAA,mBAGjMU,EAAM,SAANA,OAAM,kBAANA,IAAM,6BAANA,CAAM,EAANA,GAAM,IAOJ,MAAMC,EAAuBA,CAACC,EAA4B,CAAC,KAChE,GAAIA,EAAQC,aAAc,CACxB,IAAIC,EAAeF,EAAQG,aAAeH,EAAQG,aAAe,aACjE,GAAIH,EAAQI,gBAAiB,CAC3B,GAAIJ,EAAQI,gBAAgBC,WAAY,CACtCH,GAAQ,eAAiBF,EAAQI,gBAAgBC,WAAa,GAChE,KAAO,CACL,GAAIL,EAAQI,gBAAgBE,OAAQ,CAClCJ,GAAQ,YAAcF,EAAQI,gBAAgBE,MAChD,CACA,GAAIN,EAAQI,gBAAgBG,oBAAqB,CAC/CL,GAAQ,IAAMF,EAAQI,gBAAgBG,mBACxC,CACA,GAAIP,EAAQI,gBAAgBI,kBAAoBR,EAAQI,gBAAgBK,aAAc,CACpFP,GAAQ,IAAMF,EAAQI,gBAAgBI,iBAAmB,IAAMR,EAAQI,gBAAgBK,aAAe,GACxG,MAAO,GAAIT,EAAQI,gBAAgBI,iBAAkB,CACnDN,GAAQ,IAAMF,EAAQI,gBAAgBI,gBACxC,MAAO,GAAIR,EAAQI,gBAAgBK,aAAc,CAC/CP,GAAQ,IAAMF,EAAQI,gBAAgBK,YACxC,CACF,CACF,CACA,MAAO,CACLP,KAAMA,EACNQ,WAAY,CAAC,EAEjB,CASA,IAAIC,EAAa,QACjB,GAAIX,EAAQG,aAAc,CACxBQ,EAAaX,EAAQG,YACvB,CACA,GAAIH,GAASY,YAAa,CACxBD,GAAc,IAAIE,mBAAmB,uBAAyBb,EAAQY,YAAYE,QAAQ,KAAM,MAAQ,OAC1G,CAGA,GAAId,EAAQe,cAAe,CACzB,MAAMC,EAAmB,GACzB,IAAK,MAAMC,KAAOC,OAAOC,KAAKnB,EAAQe,eAAgB,CACpDC,EAAiBI,KAAKH,EAAM,KAAOJ,mBAAmBb,EAAQe,cAAcE,IAAQ,IACtF,CACA,GAAID,EAAiBK,OAAS,EAAG,CAC/BV,GAAc,IAAMK,EAAiBM,KAAK,KAAO,GACnD,CACF,CACA,MAAMC,EAAiB,IAAIhC,EAAW,CACpCiC,SAAU7B,EAAgB8B,IAC1BC,MAAO,KAET,IAAK1B,EAAS,CACZA,EAAU,CACR2B,MAAO/B,EAAgB+B,MACvBC,MAAOhC,EAAgBgC,MACvBC,QAAS,GACTC,OAAQ,GAEZ,KAAO,CACL,IAAK9B,EAAQ2B,MAAO,CAClB3B,EAAQ2B,MAAQ/B,EAAgB+B,KAClC,CAKA,IAAK3B,EAAQ6B,QAAS,CACpB7B,EAAQ6B,QAAU,EACpB,CACA,IAAK7B,EAAQ8B,OAAQ,CACnB9B,EAAQ8B,OAAS,EACnB,CACF,CACA,GAAI9B,EAAQ+B,YAAa,CACvBR,EAAeG,MAAMN,KAAKpB,EAAQ+B,YACpC,CAEA,GAAIR,EAAeG,MAAML,OAAS,EAAG,CACnCrB,EAAQ+B,YAAcR,CACxB,CAEA,MAAMS,EAAgBrB,EACtB,IAAIgB,EAAQ3B,EAAQ4B,MAAQ,SAAW5B,EAAQ4B,MAAQ,GAEvD,GAAI5B,EAAQiC,kBAAmB,CAC7B,MAAMC,EAA6BlC,EAAQiC,kBAAkBE,cAAcC,OAC3E,GAAIF,EAA2Bb,OAAS,EAAG,CACzC,GAAIM,IAAU,GAAI,CAChBA,GAAS,GACX,CACAA,GAASO,CACX,CACF,CACA,GAAIlC,EAAQqC,cAAe,CACzB,GAAIV,IAAU,GAAI,CAChBA,GAAS,GACX,CACA,MAAMW,EAA0BC,EAAmBvC,EAAQqC,eAC3DV,GAASW,EAAwBH,aACnC,CACA,GAAInC,EAAQ2B,OAAS3B,EAAQ2B,QAAU,GAAI,CACzC,GAAIA,IAAU,GAAI,CAChBA,GAAS,GACX,CACAA,GAAS9B,EAAYG,EAAQ2B,MAC/B,CACA,MAAMjB,EAAkB,CAAC,EACzB,IAAK,MAAM8B,KAAatB,OAAOC,KAAKnB,GAAU,CAC5C,OAAQwC,GACN,IAAK,QACH,GAAIxC,EAAQyC,OAAQ,CAElB,KACF,CACA,IAAIC,EAASf,IAAU,GAAK,GAAK,+BAAiCA,EAAQ,KAC1E,GAAI3B,EAAQ+B,aAAe/B,EAAQ+B,YAAYL,MAAML,OAAS,EAAG,CAC/DqB,GAAU,QAAU1C,EAAQ+B,YAAYI,aAC1C,CACA,GAAIR,IAAU,GAAI,CAChBe,GAAU,GACZ,CACA,GAAI1C,EAAQ2C,SAAW3C,EAAQ2C,QAAQC,YAAe5C,EAAQ2C,QAAQC,WAAWvB,OAAS,EAAI,CAC5FqB,GAAU,aAAa1C,EAAQ2C,QAAQC,WAAWtB,KAAK,QACvD,GAAItB,EAAQ2C,QAAQE,qBAAuB7C,EAAQ2C,QAAQE,sBAAwB,GAAI,CACrFH,GAAU,wBAAwB1C,EAAQ2C,QAAQE,sBACpD,CACAH,GAAU,GACZ,CACA,GAAIA,IAAW,GAAI,CACjBhC,EAAW+B,OAASC,CACtB,CACA,MACF,IAAK,WACH,GAAI1C,EAAQ8C,UAAY9C,EAAQ8C,SAASzB,OAAS,EAAG,CACnDX,EAAWoC,SAAW9C,EAAQ8C,SAASC,IAAIC,GAAKA,EAAEC,MAAQ,GAAGD,EAAE/B,OAAO+B,EAAEC,QAAUD,EAAE/B,KAAKK,KAAK,IAChG,CACA,MACF,IAAK,SACH,GAAItB,EAAQ8B,QAAU9B,EAAQ8B,OAAOT,OAAS,EAAG,CAC/CX,EAAW8B,GAAaxC,EAAQ8B,OAAOR,KAAK,IAC9C,CACA,MACF,IAAK,UACH,GAAItB,EAAQ6B,SAAW7B,EAAQ6B,QAAQR,OAAS,EAAG,CACjDX,EAAW8B,GAAaxC,EAAQ6B,QAAQP,KAAK,IAC/C,CACA,MACF,IAAK,YACH,GAAItB,EAAQkD,WAAalD,EAAQkD,UAAU7B,OAAS,EAAG,CACrDX,EAAWwC,UAAYlD,EAAQkD,UAAUH,IAAIC,GAAKA,EAAEb,eAAeb,KAAK,IAC1E,CACA,MACF,IAAK,OACL,IAAK,QACL,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,aACL,IAAK,aACL,IAAK,iBACL,IAAK,kBACHZ,EAAW8B,GAAaxC,EAAQwC,GAChC,MACF,IAAK,cACH,GAAIxC,EAAQmD,YAAa,CACvBzC,EAAW8B,GAAaxC,EAAQmD,YAAYJ,IAAIK,GACvCA,EAAYjB,eAClBb,KAAK,IACV,CACA,MACF,IAAK,SACH,GAAKtB,EAAQwC,aAAsB/C,GAAoBO,EAAQwC,aAAsB9C,EAAiB,CACpG,IAAI2D,EAASrD,EAAQwC,GAA4BL,cACjD,GAAInC,EAAQ2C,SAAW3C,EAAQ2C,QAAQC,YAAe5C,EAAQ2C,QAAQC,WAAWvB,OAAS,EAAI,CAC5FgC,GAAS,aAAarD,EAAQ2C,QAAQC,WAAWtB,KAAK,QACtD,GAAItB,EAAQ2C,QAAQE,qBAAuB7C,EAAQ2C,QAAQE,sBAAwB,GAAI,CACrFQ,GAAS,wBAAwBrD,EAAQ2C,QAAQE,sBACnD,CACAQ,GAAS,GACX,CACA3C,EAAW8B,GAAaa,CAC1B,CACA,MACF,QACE,MAEN,CACA,MAAO,CACLnD,KAAM8B,EACNtB,eAIG,MAAM4C,EAAqBtD,IAChC,MAAMuD,EAAexD,EAAqBC,GAC1C,MAAMwD,EAAetC,OAAOC,KAAKoC,EAAa7C,YAAYqC,IAAI,SAAU9B,GACtE,OAAOJ,mBAAmBI,GAAO,IAAMJ,mBAAmB0C,EAAa7C,WAAWO,GACpF,GAAGK,KAAK,KACR,GAAIkC,GAAgBA,IAAiB,GAAI,CACvC,MAAO,GAAGD,EAAarD,QAAQsD,GACjC,CACA,OAAOD,EAAarD,MAGf,MAAMqC,EAAsBF,IACjC,MAAMX,EAA2B,GACjC,IAAI+B,EAAO,GACX,IAAIC,EAAgB5D,EAAOT,KAC3B,IAAK,IAAI2D,EAAI,EAAGA,EAAIX,EAAchB,OAAQ2B,IAAK,CAC7C,MAAMW,EAActB,EAAcW,GAClC,GAAIW,IAAgB,IAAK,CACvB,GAAID,GAAS5D,EAAOT,KAAM,CAExB,GAAIgD,EAAcuB,UAAUZ,EAAE,GAAGa,QAAQ,MAAQ,EAAG,CAChDnC,EAAMN,KAAK,IAAI/B,EAAK,CAACoE,KAAMA,EAAKrB,UAChCsB,EAAQ5D,EAAOR,OACfmE,EAAO,EACX,KAAO,CACL/B,EAAMN,KAAK,IAAI/B,EAAK,CAACoE,MAAOA,EAAOpB,EAAcuB,UAAUZ,IAAIZ,UAC/DqB,EAAO,GACP,KACF,CACF,KAAO,CACL/B,EAAMN,KAAK,IAAI9B,EAAO,CAACwE,OAAQL,KAC/BC,EAAQ5D,EAAOT,KACfoE,EAAO,EACT,CACF,KAAO,CACLA,GAAQpB,EAAcW,EACxB,CACF,CACA,GAAIS,EAAKpC,OAAS,EAAG,CACnBK,EAAMN,KAAK,IAAI/B,EAAK,CAACoE,KAAMA,EAAKrB,SAClC,CACA,OAAO,IAAI7C,EAAW,CACpBiC,SAAUhC,EAA2BuE,UACrCrC,WAEH,IAAAsC,EAAA,CAAAC,WAAA,MAAAD,EAAAjE,uBAAAiE,EAAAV,oBAAAU,EAAAzB,qBAAA,OAAAyB,CAAA","ignoreList":[]}