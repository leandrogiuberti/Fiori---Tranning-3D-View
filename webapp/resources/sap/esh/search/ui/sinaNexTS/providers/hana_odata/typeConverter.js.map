{"version":3,"file":"typeConverter.js","names":["sap","ui","define","sinaUtil","____sina_AttributeType","____core_errors","___tools_TypeConverterUtil","AttributeType","UnknownAttributeTypeError","convertToSinaDouble","convertToSinaInteger","convertToSinaStringImageUrlImageBlob","convertToSinaGeoJson","convertToSinaDate","convertToSinaTime","convertToSinaTimestamp","sina2Odata","attributeType","value","context","Double","toString","Integer","String","sina2OdataString","ImageUrl","ImageBlob","GeoJson","JSON","stringify","Date","sina2OdataDate","Time","sina2OdataTime","Timestamp","sina2OdataTimestamp","convertOperator2Wildcards","operator","odata2Sina","convertValueToString","toLocaleDateString","length","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","result","addLeadingZeros","slice","__exports","__esModule"],"sources":["typeConverter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as sinaUtil from \"../../sina/util\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { UnknownAttributeTypeError } from \"../../core/errors\";\nimport { Value } from \"../../sina/types\";\nimport { ODataValue } from \"../../sina/odatatypes\";\nimport {\n    convertToSinaDouble,\n    convertToSinaInteger,\n    convertToSinaStringImageUrlImageBlob,\n    convertToSinaGeoJson,\n    convertToSinaDate,\n    convertToSinaTime,\n    convertToSinaTimestamp,\n} from \"../tools/TypeConverterUtil\";\n\nexport function sina2Odata(attributeType: AttributeType, value, context) {\n    switch (attributeType) {\n        case AttributeType.Double:\n            return value.toString();\n        case AttributeType.Integer:\n            return value.toString();\n        case AttributeType.String:\n            return sina2OdataString(value, context);\n        case AttributeType.ImageUrl:\n        case AttributeType.ImageBlob:\n            return value;\n        case AttributeType.GeoJson:\n            return JSON.stringify(value);\n        case AttributeType.Date:\n            return sina2OdataDate(value);\n        case AttributeType.Time:\n            return sina2OdataTime(value);\n        case AttributeType.Timestamp:\n            return sina2OdataTimestamp(value);\n        default:\n            throw new UnknownAttributeTypeError(attributeType);\n    }\n}\n\nexport function sina2OdataString(value, context) {\n    return sinaUtil.convertOperator2Wildcards(value, context?.operator);\n}\n\nexport function odata2Sina(attributeType: AttributeType, value: ODataValue): Value {\n    switch (attributeType) {\n        case AttributeType.Double:\n            return convertToSinaDouble(value);\n        case AttributeType.Integer:\n            return convertToSinaInteger(value);\n        case AttributeType.String:\n        case AttributeType.ImageUrl:\n        case AttributeType.ImageBlob:\n            return convertToSinaStringImageUrlImageBlob(attributeType, value);\n        case AttributeType.GeoJson:\n            return convertToSinaGeoJson(attributeType, value);\n        case AttributeType.Date:\n            return convertToSinaDate(value);\n        case AttributeType.Time:\n            return convertToSinaTime(value);\n        case AttributeType.Timestamp:\n            return convertToSinaTimestamp(value);\n        default:\n            throw new UnknownAttributeTypeError(attributeType);\n    }\n}\n\nexport function convertValueToString(value: Value): string {\n    if (!value) {\n        return \"\";\n    } else if (typeof value === \"string\") {\n        return value;\n    } else if (typeof value === \"boolean\" || typeof value === \"number\" || typeof value === \"bigint\") {\n        return value.toString();\n    } else if (value instanceof Date) {\n        return value.toLocaleDateString();\n    } else if (typeof value === \"object\") {\n        return JSON.stringify(value);\n    } else {\n        return \"\";\n    }\n}\n\nexport function sina2OdataTimestamp(value: Date | \"$$now$$\"): string {\n    // odata:2017-12-31T23:59:59.0000000Z\n    // sina: Date object\n\n    if (typeof value === \"string\") {\n        if (value.length === 0) {\n            return \"\";\n        }\n        if (value === \"$$now$$\") {\n            value = new Date();\n        }\n    }\n\n    const year = value.getUTCFullYear();\n    const month = value.getUTCMonth() + 1;\n    const day = value.getUTCDate();\n    const hour = value.getUTCHours();\n    const minute = value.getUTCMinutes();\n    const seconds = value.getUTCSeconds();\n\n    // Why not use Date.toISOString()?\n    const result =\n        addLeadingZeros(year.toString(), 4) +\n        \"-\" +\n        addLeadingZeros(month.toString(), 2) +\n        \"-\" +\n        addLeadingZeros(day.toString(), 2) +\n        \"T\" +\n        addLeadingZeros(hour.toString(), 2) +\n        \":\" +\n        addLeadingZeros(minute.toString(), 2) +\n        \":\" +\n        addLeadingZeros(seconds.toString(), 2) +\n        \"Z\";\n    // this.addLeadingZeros(microseconds.toString(), 7) + 'Z'; // According to oData standard, it should be omitted\n\n    return result;\n}\n\nexport function sina2OdataTime(value: string): string {\n    // odata: hh:mm:ss\n    // sina: hh:mm:ss\n    return value;\n    //            return value.slice(0, 2) + value.slice(3, 5) + value.slice(6, 8);\n}\n\nexport function sina2OdataDate(value: string): string {\n    // odata: YYYY-MM-DD\n    // sina: YYYY/MM/DD\n    if (value.length === 0) {\n        return \"\";\n    }\n    return value.slice(0, 4) + \"-\" + value.slice(5, 7) + \"-\" + value.slice(8, 10);\n    //return value.slice(0, 4) + value.slice(5, 7) + value.slice(8, 10);\n}\n\nexport function addLeadingZeros(value, length) {\n    return \"00000000000000\".slice(0, length - value.length) + value;\n}\n"],"mappings":"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","ignoreList":[]}