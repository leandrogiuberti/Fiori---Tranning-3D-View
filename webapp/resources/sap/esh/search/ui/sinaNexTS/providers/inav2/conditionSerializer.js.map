{"version":3,"file":"conditionSerializer.js","names":["sap","ui","define","____core_errors","____sina_AttributeType","____sina_ComparisonOperator","____sina_ComplexCondition","typeConverter","UnknownComparisonOperatorError","AttributeType","ComparisonOperator","ComplexCondition","ConditionSerializer","dataSource","constructor","this","convertSinaToInaOperator","sinaOperator","Eq","Lt","Gt","Le","Ge","Co","Bw","Ew","serializeComplexCondition","condition","result","Selection","Operator","Code","operator","SubSelections","subConditions","conditions","i","length","subCondition","push","serialize","serializeSimpleCondition","value","undefined","attributeId","attribute","type","slice","String","metadata","getAttributeMetadata","operand","AttributeName","Comparison","Value","sina2Ina","serializer","__exports","__esModule"],"sources":["conditionSerializer.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { UnknownComparisonOperatorError } from \"../../core/errors\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { Condition } from \"../../sina/Condition\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport * as typeConverter from \"./typeConverter\";\n\nclass ConditionSerializer {\n    dataSource: DataSource;\n\n    constructor(dataSource: DataSource) {\n        this.dataSource = dataSource;\n    }\n\n    convertSinaToInaOperator(sinaOperator) {\n        switch (sinaOperator) {\n            case ComparisonOperator.Eq:\n                return \"=\";\n            case ComparisonOperator.Lt:\n                return \"<\";\n            case ComparisonOperator.Gt:\n                return \">\";\n            case ComparisonOperator.Le:\n                return \"<=\";\n            case ComparisonOperator.Ge:\n                return \">=\";\n            case ComparisonOperator.Co:\n                return \"=\";\n            case ComparisonOperator.Bw:\n                return \"=\";\n            case ComparisonOperator.Ew:\n                return \"=\";\n            default:\n                throw new UnknownComparisonOperatorError(sinaOperator);\n        }\n    }\n\n    serializeComplexCondition(condition) {\n        const result = {\n            Selection: {\n                Operator: {\n                    Code: condition.operator,\n                    SubSelections: [],\n                },\n            },\n        };\n        const subConditions = condition.conditions;\n        for (let i = 0; i < subConditions.length; ++i) {\n            const subCondition = subConditions[i];\n            result.Selection.Operator.SubSelections.push(this.serialize(subCondition));\n        }\n        return result;\n    }\n\n    serializeSimpleCondition(condition) {\n        if (!condition.value) {\n            return undefined;\n        }\n\n        // get type of attribute in condition\n        const attributeId = condition.attribute;\n        let type;\n        if (attributeId.slice(0, 2) === \"$$\") {\n            type = AttributeType.String;\n        } else {\n            const metadata = this.dataSource.getAttributeMetadata(attributeId);\n            type = metadata.type;\n        }\n\n        // set operand\n        let operand = \"MemberOperand\";\n        if (attributeId === \"$$SuggestionTerms$$\" || attributeId === \"$$SearchTerms$$\") {\n            operand = \"SearchOperand\";\n        }\n\n        // assemble condition\n        const result = {};\n        result[operand] = {\n            AttributeName: attributeId,\n            Comparison: this.convertSinaToInaOperator(condition.operator),\n            Value: typeConverter.sina2Ina(type, condition.value, {\n                operator: condition.operator,\n            }),\n        };\n        return result;\n    }\n\n    serialize(condition) {\n        if (condition instanceof ComplexCondition) {\n            return this.serializeComplexCondition(condition);\n        }\n        return this.serializeSimpleCondition(condition);\n    }\n}\n\nexport function serialize(dataSource: DataSource, condition: Condition) {\n    const serializer = new ConditionSerializer(dataSource);\n    return serializer.serialize(condition);\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,0IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAKSC,EAA8BL,EAAA,wCAC9BM,EAAaL,EAAA,uBACbM,EAAkBL,EAAA,4BAClBM,EAAgBL,EAAA,oBAKzB,MAAMM,EACFC,WAEAC,YAAYD,GACRE,KAAKF,WAAaA,CACtB,CAEAG,yBAAyBC,GACrB,OAAQA,GACJ,KAAKP,EAAmBQ,GACpB,MAAO,IACX,KAAKR,EAAmBS,GACpB,MAAO,IACX,KAAKT,EAAmBU,GACpB,MAAO,IACX,KAAKV,EAAmBW,GACpB,MAAO,KACX,KAAKX,EAAmBY,GACpB,MAAO,KACX,KAAKZ,EAAmBa,GACpB,MAAO,IACX,KAAKb,EAAmBc,GACpB,MAAO,IACX,KAAKd,EAAmBe,GACpB,MAAO,IACX,QACI,MAAM,IAAIjB,EAA+BS,GAErD,CAEAS,0BAA0BC,GACtB,MAAMC,EAAS,CACXC,UAAW,CACPC,SAAU,CACNC,KAAMJ,EAAUK,SAChBC,cAAe,MAI3B,MAAMC,EAAgBP,EAAUQ,WAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAcG,SAAUD,EAAG,CAC3C,MAAME,EAAeJ,EAAcE,GACnCR,EAAOC,UAAUC,SAASG,cAAcM,KAAKxB,KAAKyB,UAAUF,GAChE,CACA,OAAOV,CACX,CAEAa,yBAAyBd,GACrB,IAAKA,EAAUe,MAAO,CAClB,OAAOC,SACX,CAGA,MAAMC,EAAcjB,EAAUkB,UAC9B,IAAIC,EACJ,GAAIF,EAAYG,MAAM,EAAG,KAAO,KAAM,CAClCD,EAAOrC,EAAcuC,MACzB,KAAO,CACH,MAAMC,EAAWlC,KAAKF,WAAWqC,qBAAqBN,GACtDE,EAAOG,EAASH,IACpB,CAGA,IAAIK,EAAU,gBACd,GAAIP,IAAgB,uBAAyBA,IAAgB,kBAAmB,CAC5EO,EAAU,eACd,CAGA,MAAMvB,EAAS,CAAC,EAChBA,EAAOuB,GAAW,CACdC,cAAeR,EACfS,WAAYtC,KAAKC,yBAAyBW,EAAUK,UACpDsB,MAAO/C,EAAcgD,SAAST,EAAMnB,EAAUe,MAAO,CACjDV,SAAUL,EAAUK,YAG5B,OAAOJ,CACX,CAEAY,UAAUb,GACN,GAAIA,aAAqBhB,EAAkB,CACvC,OAAOI,KAAKW,0BAA0BC,EAC1C,CACA,OAAOZ,KAAK0B,yBAAyBd,EACzC,EAGG,SAASa,EAAU3B,EAAwBc,GAC9C,MAAM6B,EAAa,IAAI5C,EAAoBC,GAC3C,OAAO2C,EAAWhB,UAAUb,EAChC,CAAC,IAAA8B,EAAA,CAAAC,WAAA,MAAAD,EAAAjB,YAAA,OAAAiB,CAAA","ignoreList":[]}