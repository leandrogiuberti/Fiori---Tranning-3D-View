{"version":3,"file":"MetadataParser-dbg.js","names":["sap","ui","define","____core_errors","____sina_AttributeFormatType","____sina_AttributeType","____sina_MatchingStrategy","UnknownDataTypeError","UnknownPresentationUsageError","AttributeFormatType","AttributeType","MatchingStrategy","MetadataParser","provider","sina","constructor","normalizeAttributeMetadata","attributeMetadata","IsKey","isKey","parseRequestAttributes","dataSource","data","dimensions","Cube","Dimensions","filteredAttributes","i","length","dimension","Name","slice","attribute","Attributes","push","fillInternalMetadata","parseResponseAttributes","attributes","parseMetadataRequestMetadata","metadataLoadStatus","getInternalMetadataLoadStatus","metadataRequest","fillPublicMetadataBuffer","parseSearchRequestMetadata","itemData","getDataSource","$$DataSourceMetaData$$","ObjectName","searchRequest","$$AttributeMetadata$$","calculateAttributeDisplayOrder","attributesMetadata","attributeMetadataMap","getInternalMetadataAttributes","attributeTypeAndFormat","_parseAttributeTypeAndFormat","publicAttributeMetadata","_createAttributeMetadata","type","format","id","label","Description","isSortable","_parseIsSortable","matchingStrategy","_parseMatchingStrategy","usage","_parseUsage","_configure","attributeId","titleAttributes","detailAttributesPrio1","detailAttributesPrio2","detailAttributes","j","$$ResultItemAttributes$$","attributeData","attributeInternalMetadata","getInternalMetadataAttribute","presentationUsage","indexOf","IsTitle","getAttributeMetadata","Title","displayOrder","Detail","IsSortable","hasFulltextIndex","Text","Exact","accessUsage","Facet","AdvancedSearch","ImageUrl","String","LongText","DataType","Integer","Double","Date","Time","Timestamp","GeoJson","__exports","__esModule"],"sources":["MetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { UnknownDataTypeError, UnknownPresentationUsageError } from \"../../core/errors\";\nimport { AttributeFormatType } from \"../../sina/AttributeFormatType\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { AttributeUsageType } from \"../../sina/AttributeUsageType\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { MatchingStrategy } from \"../../sina/MatchingStrategy\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Provider } from \"./Provider\";\n\nexport class MetadataParser {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    normalizeAttributeMetadata(attributeMetadata) {\n        attributeMetadata.IsKey = attributeMetadata.isKey; // normalize, probably a typo in abap ina\n    }\n\n    parseRequestAttributes(dataSource, data) {\n        const dimensions = data.Cube.Dimensions;\n        const filteredAttributes = [];\n        for (let i = 0; i < dimensions.length; ++i) {\n            const dimension = dimensions[i];\n            if (dimension.Name.slice(0, 2) === \"$$\") {\n                continue;\n            }\n            const attribute = dimension.Attributes[0];\n            this.normalizeAttributeMetadata(attribute);\n            filteredAttributes.push(attribute);\n        }\n        this.provider.fillInternalMetadata(dataSource, \"metadataRequest\", filteredAttributes);\n    }\n\n    parseResponseAttributes(dataSource, data) {\n        const filteredAttributes = [];\n        const attributes = data.Cube.Dimensions[0].Attributes;\n        for (let i = 0; i < attributes.length; ++i) {\n            const attribute = attributes[i];\n            if (attribute.Name.slice(0, 2) === \"$$\") {\n                continue;\n            }\n            this.normalizeAttributeMetadata(attribute);\n            filteredAttributes.push(attribute);\n        }\n        this.provider.fillInternalMetadata(dataSource, \"metadataRequest\", filteredAttributes);\n    }\n\n    parseMetadataRequestMetadata(dataSource, data) {\n        // parse metadata loaded via explicitely metadata request\n        // (this metadata includes hasFulltextIndex information but not the display order information)\n\n        // check whether buffer already filled\n        const metadataLoadStatus = this.provider.getInternalMetadataLoadStatus(dataSource);\n        if (metadataLoadStatus.metadataRequest) {\n            return;\n        }\n        // parse attribute metadata\n        this.parseRequestAttributes(dataSource, data);\n        this.parseResponseAttributes(dataSource, data);\n        // fill public metadata from internal metadata\n        this.fillPublicMetadataBuffer(dataSource);\n    }\n\n    parseSearchRequestMetadata(itemData) {\n        // parse metadata loaded implicitly by search request\n        // (this metadata includes the display order information but not the hasFulltextIndex information)\n\n        // get data source from data\n        const dataSource = this.sina.getDataSource(itemData.$$DataSourceMetaData$$[0].ObjectName);\n        // check whether buffer already filled\n        const metadataLoadStatus = this.provider.getInternalMetadataLoadStatus(dataSource);\n        if (metadataLoadStatus.searchRequest) {\n            return;\n        }\n        // fill internal metadata buffer\n        this.provider.fillInternalMetadata(dataSource, \"searchRequest\", itemData.$$AttributeMetadata$$);\n        // fill public metadata from internal metadata\n        this.fillPublicMetadataBuffer(dataSource);\n        // calculate attribute display sequence from sequence in result item\n        this.calculateAttributeDisplayOrder(dataSource, itemData);\n    }\n\n    fillPublicMetadataBuffer(dataSource: DataSource) {\n        // clear old public metadata\n        dataSource.attributesMetadata = [];\n        dataSource.attributeMetadataMap = {};\n        // create new public metadata\n        const attributesMetadata = this.provider.getInternalMetadataAttributes(dataSource);\n        for (let i = 0; i < attributesMetadata.length; ++i) {\n            const attributeMetadata = attributesMetadata[i];\n            const attributeTypeAndFormat = this._parseAttributeTypeAndFormat(attributeMetadata);\n            const publicAttributeMetadata = this.sina._createAttributeMetadata({\n                type: attributeTypeAndFormat.type,\n                format: attributeTypeAndFormat.format,\n                id: attributeMetadata.Name,\n                label: attributeMetadata.Description,\n                isSortable: this._parseIsSortable(attributeMetadata),\n                isKey: attributeMetadata.IsKey,\n                matchingStrategy: this._parseMatchingStrategy(attributeMetadata),\n                usage: this._parseUsage(attributeMetadata),\n            });\n            dataSource.attributesMetadata.push(publicAttributeMetadata);\n            dataSource.attributeMetadataMap[attributeMetadata.Name] = publicAttributeMetadata;\n        }\n        dataSource._configure();\n    }\n\n    calculateAttributeDisplayOrder(dataSource, itemData) {\n        let attributeId, attributeMetadata, i;\n        const titleAttributes = [];\n        const detailAttributesPrio1 = [];\n        const detailAttributesPrio2 = [];\n        const detailAttributes = [];\n\n        // distribute attributes in lists according to presentationUsage\n        for (let j = 0; j < itemData.$$ResultItemAttributes$$.length; ++j) {\n            const attributeData = itemData.$$ResultItemAttributes$$[j];\n            const attributeInternalMetadata = this.provider.getInternalMetadataAttribute(\n                dataSource,\n                attributeData.Name\n            );\n\n            if (\n                attributeInternalMetadata.presentationUsage.indexOf(\"Title\") >= 0 ||\n                attributeInternalMetadata.IsTitle\n            ) {\n                titleAttributes.push(attributeData.Name);\n            }\n            if (\n                attributeInternalMetadata.presentationUsage.indexOf(\"Summary\") >= 0 ||\n                attributeInternalMetadata.presentationUsage.indexOf(\"Image\") >= 0 ||\n                attributeInternalMetadata.presentationUsage.indexOf(\"Thumbnail\") >= 0\n            ) {\n                detailAttributesPrio1.push(attributeData.Name);\n            } else if (attributeInternalMetadata.presentationUsage.indexOf(\"Detail\") >= 0) {\n                detailAttributesPrio2.push(attributeData.Name);\n            }\n        }\n\n        // calculate title display order\n        for (i = 0; i < titleAttributes.length; ++i) {\n            attributeId = titleAttributes[i];\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId);\n            attributeMetadata.usage.Title.displayOrder = i;\n        }\n\n        // calculate attribute area display order\n        detailAttributes.push(...detailAttributesPrio1);\n        detailAttributes.push(...detailAttributesPrio2);\n        for (i = 0; i < detailAttributes.length; ++i) {\n            attributeId = detailAttributes[i];\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId);\n            attributeMetadata.usage.Detail.displayOrder = i;\n        }\n    }\n\n    _parseIsSortable(attributeMetadata) {\n        if (typeof attributeMetadata.IsSortable === \"undefined\") {\n            return false;\n        }\n        return attributeMetadata.IsSortable;\n    }\n\n    _parseMatchingStrategy(attributeMetadata) {\n        if (attributeMetadata.hasFulltextIndex) {\n            return MatchingStrategy.Text;\n        }\n        return MatchingStrategy.Exact;\n    }\n\n    _parseUsage(attributeMetadata) {\n        const usage: AttributeUsageType = {};\n        if (attributeMetadata.presentationUsage.indexOf(\"Title\") >= 0 || attributeMetadata.IsTitle) {\n            usage.Title = {\n                displayOrder: 0,\n            };\n        }\n        if (\n            attributeMetadata.presentationUsage.indexOf(\"Summary\") >= 0 ||\n            attributeMetadata.presentationUsage.indexOf(\"Image\") >= 0 ||\n            attributeMetadata.presentationUsage.indexOf(\"Thumbnail\") >= 0 ||\n            attributeMetadata.presentationUsage.indexOf(\"Detail\") >= 0\n        ) {\n            usage.Detail = {\n                displayOrder: 0,\n            };\n        }\n        if (attributeMetadata.accessUsage.indexOf(\"AutoFacet\") >= 0) {\n            usage.Facet = {\n                displayOrder: 0,\n            };\n        }\n        if (attributeMetadata.accessUsage.indexOf(\"AdvancedSearch\") >= 0) {\n            usage.AdvancedSearch = {\n                displayOrder: 0,\n            };\n        }\n        return usage;\n    }\n\n    _parseAttributeTypeAndFormat(attributeMetadata) {\n        // 1. evaluate presentation usage\n        for (let i = 0; i < attributeMetadata.presentationUsage.length; i++) {\n            const presentationUsage = attributeMetadata.presentationUsage[i];\n            switch (presentationUsage) {\n                case \"Summary\":\n                    continue;\n                case \"Detail\":\n                    continue;\n                case \"Title\":\n                    continue;\n                case \"Hidden\":\n                    continue;\n                case \"FactSheet\":\n                    continue;\n                case \"Thumbnail\":\n                case \"Image\":\n                    return {\n                        type: AttributeType.ImageUrl,\n                    };\n                case \"Text\":\n                    return {\n                        type: AttributeType.String,\n                        format: AttributeFormatType.LongText,\n                    };\n                default:\n                    throw new UnknownPresentationUsageError(presentationUsage);\n            }\n        }\n\n        // 2. evaluate data type\n        switch (attributeMetadata.DataType) {\n            case \"Integer\":\n            case \"Long\":\n                return {\n                    type: AttributeType.Integer,\n                };\n            case \"Double\":\n                return {\n                    type: AttributeType.Double,\n                };\n            case \"String\":\n                return {\n                    type: AttributeType.String,\n                };\n            case \"Date\":\n                return {\n                    type: AttributeType.Date,\n                };\n            case \"Time\":\n                return {\n                    type: AttributeType.Time,\n                };\n            case \"Timestamp\":\n                return {\n                    type: AttributeType.Timestamp,\n                };\n            case \"GeoJson\":\n                return {\n                    type: AttributeType.GeoJson,\n                };\n            default:\n                throw new UnknownDataTypeError(attributeMetadata.DataType);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}