{"version":3,"file":"HierarchyMetadataParser.js","names":["sap","ui","define","____sina_HierarchyDisplayType","HierarchyDisplayType","HierarchyMetadataParser","jQuery","constructor","this","parse","entityTypeName","hierarchAnnotationNode","that","hierarchyDefinitionsMap","find","each","hierarchyDefinition","parseRecord","attributeName","recordNode","name","displayType","DynamicHierarchyFacet","isHierarchyDefinition","parentAttributeName","childAttributeName","attr","StaticHierarchyFacet","HierarchyResultView","Object","assign","parseRecurse","calculateIsHierarchyDefinition","endsWith","slice","replace","recurseNode","result","parseCollection","collectionNode","text","__exports","__esModule"],"sources":["HierarchyMetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { HierarchyDisplayType } from \"../../sina/HierarchyDisplayType\";\n\nexport interface HierarchyDefinition {\n    name: string;\n    attributeName: string;\n    displayType?: HierarchyDisplayType;\n    isHierarchyDefinition: boolean;\n    parentAttributeName: string;\n    childAttributeName: string;\n}\n\nexport class HierarchyMetadataParser {\n    jQuery: JQueryStatic;\n    constructor(jQuery: JQueryStatic) {\n        this.jQuery = jQuery;\n    }\n    parse(entityTypeName: string, hierarchAnnotationNode: Element): { [name: string]: HierarchyDefinition } {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const hierarchyDefinitionsMap = {};\n        that.jQuery(hierarchAnnotationNode)\n            .find(\">Collection\")\n            .each(function () {\n                that.jQuery(this)\n                    .find(\">Record\")\n                    .each(function () {\n                        const hierarchyDefinition = that.parseRecord(entityTypeName, this);\n                        hierarchyDefinitionsMap[hierarchyDefinition.attributeName] = hierarchyDefinition;\n                    });\n            });\n        return hierarchyDefinitionsMap;\n    }\n\n    parseRecord(entityTypeName: string, recordNode: Element): HierarchyDefinition {\n        const hierarchyDefinition: HierarchyDefinition = {\n            name: \"\", // name of hierarchy\n            attributeName: \"\", // name of attribute\n            displayType: HierarchyDisplayType.DynamicHierarchyFacet,\n            isHierarchyDefinition: false, // entity set represents the hierarchy (self reference)\n            parentAttributeName: \"\",\n            childAttributeName: \"\",\n        };\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        that.jQuery(recordNode)\n            .find(\">PropertyValue\")\n            .each(function () {\n                switch (that.jQuery(this).attr(\"Property\")) {\n                    case \"Definition\":\n                        hierarchyDefinition.name = that.jQuery(this).attr(\"String\");\n                        break;\n                    case \"Name\":\n                        hierarchyDefinition.attributeName = that.jQuery(this).attr(\"String\");\n                        break;\n                    case \"displayType\":\n                        switch (that.jQuery(this).attr(\"String\")) {\n                            case \"TREE\":\n                                hierarchyDefinition.displayType = HierarchyDisplayType.StaticHierarchyFacet;\n                                break;\n                            case \"FLAT\":\n                                hierarchyDefinition.displayType = HierarchyDisplayType.HierarchyResultView;\n                                break;\n                        }\n                        break;\n                    case \"Recurse\":\n                        Object.assign(hierarchyDefinition, that.parseRecurse(this));\n                }\n            });\n        hierarchyDefinition.isHierarchyDefinition = that.calculateIsHierarchyDefinition(\n            entityTypeName,\n            hierarchyDefinition.name\n        );\n\n        // this is a helper hierarchy datasource, no displayType\n        // displayType is defined by the hierarchy attribute of the main datasource\n        if (hierarchyDefinition.isHierarchyDefinition) {\n            delete hierarchyDefinition.displayType;\n        }\n        return hierarchyDefinition;\n    }\n\n    calculateIsHierarchyDefinition(entityTypeName: string, name: string): boolean {\n        // normalize entityTypeName\n        if (entityTypeName.endsWith(\"Type\")) {\n            entityTypeName = entityTypeName.slice(0, -4);\n        }\n        // normalize hierarchy name\n        name = name.replace(/[.:]/g, \"\");\n        return entityTypeName === name;\n    }\n\n    parseRecurse(recurseNode: Element): { parentAttributeName: string; childAttributeName: string } {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const result = { parentAttributeName: \"\", childAttributeName: \"\" };\n        that.jQuery(recurseNode)\n            .find(\"PropertyValue\")\n            .each(function () {\n                switch (that.jQuery(this).attr(\"Property\")) {\n                    case \"Parent\":\n                        that.jQuery(this)\n                            .find(\"Collection\")\n                            .each(function () {\n                                result.parentAttributeName = that.parseCollection(this);\n                            });\n                        break;\n                    case \"Child\":\n                        that.jQuery(this)\n                            .find(\">Collection\")\n                            .each(function () {\n                                result.childAttributeName = that.parseCollection(this);\n                            });\n                }\n            });\n        return result;\n    }\n\n    parseCollection(collectionNode: Element): string {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        let attributeName;\n        that.jQuery(collectionNode)\n            .find(\">PropertyPath\")\n            .each(function () {\n                attributeName = that.jQuery(this).text();\n            });\n        return attributeName;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,6CAAAC,GAAA,mBAKSC,EAAoBD,EAAA,wBAWtB,MAAME,EACTC,OACAC,YAAYD,QACRE,KAAKF,OAASA,MAClB,CACAG,MAAMC,EAAwBC,GAE1B,MAAMC,EAAOJ,KACb,MAAMK,EAA0B,CAAC,EACjCD,EAAKN,OAAOK,GACPG,KAAK,eACLC,KAAK,WACFH,EAAKN,OAAOE,MACPM,KAAK,WACLC,KAAK,WACF,MAAMC,EAAsBJ,EAAKK,YAAYP,EAAgBF,MAC7DK,EAAwBG,EAAoBE,eAAiBF,CACjE,EACR,GACJ,OAAOH,CACX,CAEAI,YAAYP,EAAwBS,GAChC,MAAMH,EAA2C,CAC7CI,KAAM,GACNF,cAAe,GACfG,YAAajB,EAAqBkB,sBAClCC,sBAAuB,MACvBC,oBAAqB,GACrBC,mBAAoB,IAGxB,MAAMb,EAAOJ,KACbI,EAAKN,OAAOa,GACPL,KAAK,kBACLC,KAAK,WACF,OAAQH,EAAKN,OAAOE,MAAMkB,KAAK,aAC3B,IAAK,aACDV,EAAoBI,KAAOR,EAAKN,OAAOE,MAAMkB,KAAK,UAClD,MACJ,IAAK,OACDV,EAAoBE,cAAgBN,EAAKN,OAAOE,MAAMkB,KAAK,UAC3D,MACJ,IAAK,cACD,OAAQd,EAAKN,OAAOE,MAAMkB,KAAK,WAC3B,IAAK,OACDV,EAAoBK,YAAcjB,EAAqBuB,qBACvD,MACJ,IAAK,OACDX,EAAoBK,YAAcjB,EAAqBwB,oBACvD,MAER,MACJ,IAAK,UACDC,OAAOC,OAAOd,EAAqBJ,EAAKmB,aAAavB,OAEjE,GACJQ,EAAoBO,sBAAwBX,EAAKoB,+BAC7CtB,EACAM,EAAoBI,MAKxB,GAAIJ,EAAoBO,sBAAuB,QACpCP,EAAoBK,WAC/B,CACA,OAAOL,CACX,CAEAgB,+BAA+BtB,EAAwBU,GAEnD,GAAIV,EAAeuB,SAAS,QAAS,CACjCvB,EAAiBA,EAAewB,MAAM,GAAI,EAC9C,CAEAd,EAAOA,EAAKe,QAAQ,QAAS,IAC7B,OAAOzB,IAAmBU,CAC9B,CAEAW,aAAaK,GAET,MAAMxB,EAAOJ,KACb,MAAM6B,EAAS,CAAEb,oBAAqB,GAAIC,mBAAoB,IAC9Db,EAAKN,OAAO8B,GACPtB,KAAK,iBACLC,KAAK,WACF,OAAQH,EAAKN,OAAOE,MAAMkB,KAAK,aAC3B,IAAK,SACDd,EAAKN,OAAOE,MACPM,KAAK,cACLC,KAAK,WACFsB,EAAOb,oBAAsBZ,EAAK0B,gBAAgB9B,KACtD,GACJ,MACJ,IAAK,QACDI,EAAKN,OAAOE,MACPM,KAAK,eACLC,KAAK,WACFsB,EAAOZ,mBAAqBb,EAAK0B,gBAAgB9B,KACrD,GAEhB,GACJ,OAAO6B,CACX,CAEAC,gBAAgBC,GAEZ,MAAM3B,EAAOJ,KACb,IAAIU,EACJN,EAAKN,OAAOiC,GACPzB,KAAK,iBACLC,KAAK,WACFG,EAAgBN,EAAKN,OAAOE,MAAMgC,MACtC,GACJ,OAAOtB,CACX,EACH,IAAAuB,EAAA,CAAAC,WAAA,MAAAD,EAAApC,0BAAA,OAAAoC,CAAA","ignoreList":[]}