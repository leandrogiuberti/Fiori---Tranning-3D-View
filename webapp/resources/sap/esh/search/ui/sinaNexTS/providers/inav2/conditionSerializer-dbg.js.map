{"version":3,"file":"conditionSerializer-dbg.js","names":["sap","ui","define","____core_errors","____sina_AttributeType","____sina_ComparisonOperator","____sina_ComplexCondition","typeConverter","UnknownComparisonOperatorError","AttributeType","ComparisonOperator","ComplexCondition","ConditionSerializer","dataSource","constructor","convertSinaToInaOperator","sinaOperator","Eq","Lt","Gt","Le","Ge","Co","Bw","Ew","serializeComplexCondition","condition","result","Selection","Operator","Code","operator","SubSelections","subConditions","conditions","i","length","subCondition","push","serialize","serializeSimpleCondition","value","undefined","attributeId","attribute","type","slice","String","metadata","getAttributeMetadata","operand","AttributeName","Comparison","Value","sina2Ina","serializer","__exports","__esModule"],"sources":["conditionSerializer.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { UnknownComparisonOperatorError } from \"../../core/errors\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { Condition } from \"../../sina/Condition\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport * as typeConverter from \"./typeConverter\";\n\nclass ConditionSerializer {\n    dataSource: DataSource;\n\n    constructor(dataSource: DataSource) {\n        this.dataSource = dataSource;\n    }\n\n    convertSinaToInaOperator(sinaOperator) {\n        switch (sinaOperator) {\n            case ComparisonOperator.Eq:\n                return \"=\";\n            case ComparisonOperator.Lt:\n                return \"<\";\n            case ComparisonOperator.Gt:\n                return \">\";\n            case ComparisonOperator.Le:\n                return \"<=\";\n            case ComparisonOperator.Ge:\n                return \">=\";\n            case ComparisonOperator.Co:\n                return \"=\";\n            case ComparisonOperator.Bw:\n                return \"=\";\n            case ComparisonOperator.Ew:\n                return \"=\";\n            default:\n                throw new UnknownComparisonOperatorError(sinaOperator);\n        }\n    }\n\n    serializeComplexCondition(condition) {\n        const result = {\n            Selection: {\n                Operator: {\n                    Code: condition.operator,\n                    SubSelections: [],\n                },\n            },\n        };\n        const subConditions = condition.conditions;\n        for (let i = 0; i < subConditions.length; ++i) {\n            const subCondition = subConditions[i];\n            result.Selection.Operator.SubSelections.push(this.serialize(subCondition));\n        }\n        return result;\n    }\n\n    serializeSimpleCondition(condition) {\n        if (!condition.value) {\n            return undefined;\n        }\n\n        // get type of attribute in condition\n        const attributeId = condition.attribute;\n        let type;\n        if (attributeId.slice(0, 2) === \"$$\") {\n            type = AttributeType.String;\n        } else {\n            const metadata = this.dataSource.getAttributeMetadata(attributeId);\n            type = metadata.type;\n        }\n\n        // set operand\n        let operand = \"MemberOperand\";\n        if (attributeId === \"$$SuggestionTerms$$\" || attributeId === \"$$SearchTerms$$\") {\n            operand = \"SearchOperand\";\n        }\n\n        // assemble condition\n        const result = {};\n        result[operand] = {\n            AttributeName: attributeId,\n            Comparison: this.convertSinaToInaOperator(condition.operator),\n            Value: typeConverter.sina2Ina(type, condition.value, {\n                operator: condition.operator,\n            }),\n        };\n        return result;\n    }\n\n    serialize(condition) {\n        if (condition instanceof ComplexCondition) {\n            return this.serializeComplexCondition(condition);\n        }\n        return this.serializeSimpleCondition(condition);\n    }\n}\n\nexport function serialize(dataSource: DataSource, condition: Condition) {\n    const serializer = new ConditionSerializer(dataSource);\n    return serializer.serialize(condition);\n}\n"],"mappings":"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","ignoreList":[]}