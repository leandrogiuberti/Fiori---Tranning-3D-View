{"version":3,"file":"ajaxErrorFactory.js","names":["sap","ui","define","____core_errors","____sina_i18n","ServerErrorCode","ServerError","getText","parseCode","code","includes","E001","parseDetails","message","details","Array","isArray","JSON","stringify","result","detail","push","length","undefined","join","parseGlobalError","parsedError","error","dataSource","parseDataSourceErrors","searchStatistics","connectorStatistics","ConnectorStatistics","dataSourceErrors","connectorStatistic","Name","calculateErrorCode","codes","resultCode","ajaxErrorFactory","request","response","dataJSON","globalError","map","dataSourceError","dataSourceLabels","de","__exports","__esModule"],"sources":["ajaxErrorFactory.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { RequestProperties, ResponseProperties } from \"../../core/ajax\";\nimport { ServerErrorCode, SinaError, ServerError, DataSourceError } from \"../../core/errors\";\nimport { getText } from \"../../sina/i18n\";\n\nfunction parseCode(code: string): ServerErrorCode {\n    if ([\"E100\", \"E101\", \"E102\", \"E200\", \"E201\", \"E202\", \"E203\", \"E300\", \"E400\"].includes(code)) {\n        return code as ServerErrorCode; // these hana odata error codes are identical to the sina error codes\n    }\n    return ServerErrorCode.E001; // unknown error code -> convert to general error\n}\n\nfunction parseDetails(message: string, details: Array<{ code: string; message: string }>): string {\n    if (!details) {\n        return; // return undefined\n    }\n    if (!details || !Array.isArray(details)) {\n        return JSON.stringify(details);\n    }\n    const result = [];\n    for (const detail of details) {\n        if (detail.message === message) {\n            continue;\n        }\n        result.push(detail.code + \":\" + detail.message);\n    }\n    if (result.length === 0) {\n        return undefined;\n    }\n    return result.join(\"\\n\");\n}\n\nfunction parseGlobalError(parsedError): DataSourceError {\n    // check for error\n    if (!parsedError.error) {\n        return;\n    }\n    const error = parsedError.error;\n    return {\n        dataSource: \"dummy\",\n        code: parseCode(error.code),\n        message: error.message,\n        details: parseDetails(error.message, error.details),\n    };\n}\n\nfunction parseDataSourceErrors(parsedError): Array<DataSourceError> {\n    const searchStatistics = parsedError[\"@com.sap.vocabularies.Search.v1.SearchStatistics\"];\n    if (!searchStatistics) {\n        return [];\n    }\n    const connectorStatistics = searchStatistics.ConnectorStatistics;\n    if (!connectorStatistics) {\n        return [];\n    }\n    if (!Array.isArray(connectorStatistics)) {\n        return [];\n    }\n    const dataSourceErrors: Array<DataSourceError> = [];\n    for (const connectorStatistic of connectorStatistics) {\n        if (!connectorStatistic.error) {\n            continue;\n        }\n        const error = connectorStatistic.error;\n        dataSourceErrors.push({\n            dataSource: connectorStatistic.Name,\n            code: parseCode(error.code),\n            message: error.message,\n            details: parseDetails(error.message, error.details),\n        });\n    }\n    return dataSourceErrors;\n}\n\nfunction calculateErrorCode(codes: Array<ServerErrorCode>): ServerErrorCode {\n    let resultCode: ServerErrorCode;\n    for (const code of codes) {\n        if (!resultCode) {\n            resultCode = code;\n        }\n        if (code !== resultCode) {\n            return ServerErrorCode.E001; // fallback to general error\n        }\n    }\n    if (!resultCode) {\n        resultCode = ServerErrorCode.E001;\n    }\n    return resultCode;\n}\n\nexport function ajaxErrorFactory(request: RequestProperties, response: ResponseProperties): SinaError {\n    // check for json\n    const parsedError = response.dataJSON;\n    if (!parsedError) {\n        return;\n    }\n\n    const globalError = parseGlobalError(parsedError);\n    const dataSourceErrors = parseDataSourceErrors(parsedError);\n\n    if (globalError) {\n        return new ServerError({\n            request: request,\n            response: response,\n            code: calculateErrorCode([\n                globalError.code,\n                ...dataSourceErrors.map((dataSourceError) => dataSourceError.code),\n            ]),\n            message: globalError.message,\n            details: globalError.details,\n            dataSourceErrors: dataSourceErrors,\n        });\n    } else {\n        let dataSourceLabels;\n        switch (dataSourceErrors.length) {\n            case 0:\n                // no error at all -> return\n                return;\n            case 1:\n                // main error message is taken from error message on datasource level\n                return new ServerError({\n                    request: request,\n                    response: response,\n                    code: dataSourceErrors[0].code,\n                    message: dataSourceErrors[0].message,\n                    details: dataSourceErrors[0].details,\n                    dataSourceErrors: dataSourceErrors,\n                });\n            default:\n                // main error message: just list affected datasources\n                dataSourceLabels = dataSourceErrors.map((de) => de.dataSource).join(\", \");\n                return new ServerError({\n                    request: request,\n                    response: response,\n                    code: calculateErrorCode(dataSourceErrors.map((dataSourceError) => dataSourceError.code)),\n                    message: getText(\"error.sina.errorInMultipleDataSources\", [dataSourceLabels]),\n                    dataSourceErrors: dataSourceErrors,\n                });\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}