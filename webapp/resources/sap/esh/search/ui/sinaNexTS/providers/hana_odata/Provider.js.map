{"version":3,"file":"Provider.js","names":["sap","ui","define","core","___MetadataParserXML","___MetadataParserJson","___ItemParser","___FacetParser","___suggestionParser","___eshObjects_src_index","conditionSerializer","____core_Log","____sina_SearchQuery","____sina_SortOrder","___AbstractProvider","____sina_SuggestionType","____sina_ComplexCondition","____core_errors","___HierarchyParser","___HierarchyNodePathParser","____sina_SuggestionCalculationMode","____sina_DataSource","___hana_odata_ajax","___tools_util","___nlqParser","MetadataParserXML","MetadataParserJson","ItemParser","FacetParser","SuggestionParser","getEshSearchQuery","Comparison","Phrase","Term","EshObjComparisonOperator","ESOrderType","HierarchyFacet","Log","SearchQuery","SortOrder","AbstractProvider","SuggestionType","ComplexCondition","ESHNoBusinessObjectDatasourceError","ESHNotActiveError","InternalSinaError","HierarchyParser","HierarchyNodePathParser","SuggestionCalculationMode","DataSource","createAjaxClient","handleError","parseNlqInfo","PresentationUsage","Provider","id","ajaxClient","requestPrefix","metadataParser","itemParser","facetParser","suggestionParser","odataVersion","responseAttributes","facetAttributes","dataSourceConfigurations","metaDataSuffix","hierarchyNodePathParser","getTextFromResourceBundle","initAsync","configuration","this","url","sina","length","querySuffix","push","filterCondition","getLanguage","undefined","requestFormatters","ajaxRequestFormatters","responseFormatters","ajaxResponseFormatters","metaDataJsonType","serverInfo","loadServerInfo","supports","loadBusinessObjectDataSources","getBusinessObjectDataSources","Promise","reject","capabilities","_createCapabilities","fuzzy","nlq","service","capability","supportedServices","services","supportedService","supportedCapabilities","Capabilities","j","checkCapability","simulatedHanaServerinfo","rawServerInfo","Services","Service","Capability","Suggestions","suggestionTypes","Search","_prepareMetadataRequest","requestObj","metadataCall","resourcePath","getPrefix","metadataObjects","entitySets","assembleUrl","requestUrl","response","fireRequest","allMetaDataMap","parseResponse","i","dataSourcesList","dataSource","fillMetadataBuffer","businessObjectMap","assembleOrderBy","query","result","Array","isArray","sortOrder","sortKey","order","Descending","Ascending","key","assembleGroupBy","groupBy","attributeName","properties","aggregateCountAlias","executeSearchQuery","oUrlData","_prepareSearchObjectSuggestionRequest","fireSearchQuery","rootCondition","filter","clone","serialize","items","searchTerms","searchTerm","addFilterConditionToFilter","top","skip","searchOptions","$top","$skip","whyfound","$count","$orderby","freeStyleText","searchQueryFilter","getAllDataSource","scope","useValueHierarchy","hierarchyAttribute","helperHierarchyDataource","getHierarchyDataSource","valuehierarchy","$select","calculateFacets","facets","facetlimit","facetTop","groupby","queryData","doNotEsacpeFreeStyleText","enableQueryLanguage","oInputData","async","getJson","data","parseSearchResponse","responseData","parseDynamicMetadata","hierarchyNodePaths","parse","statistics","ConnectorStatistics","getDataSource","constructedDataSourceFacets","Dimensions","PropertyName","isConnectorFacet","Items","OdataID","_Count","nlqResult","_createSearchResultSet","title","totalCount","_fireObjectSuggestionsQuery","searchItems","objectSuggestions","parseObjectSuggestions","_createSuggestionResultSet","_prepareChartQueryRequest","resultDeletion","isValueHelpMode","deleted","valueString","value","match","property","attribute","operator","term","EqualCaseInsensitive","phrase","chartOptions","facetScope","dimension","metadata","getAttributeMetadata","type","executeChartQuery","log","removeAttributeConditions","metadataLabel","label","_createChartResultSet","facetTotalCount","executeHierarchyQuery","hierarchyParser","attributeId","facetroot","facetColumn","rootIds","nodeId","levels","attributeMetadata","facet","find","getProperty","parseHierarchyFacet","executeSuggestionQuery","regularSuggestionsResultSet","objectSuggestionsResultSet","all","executeRegularSuggestionQuery","executeObjectSuggestionQuery","resultSet","addErrors","getErrors","isObjectSuggestionQuery","types","indexOf","Object","DataSourceType","BusinessObject","resolve","calculationModes","includes","Data","SearchTerm","SearchTermAI","_fireSuggestionQuery","_prepareSuggestionQueryRequest","suggestionOptions","suggestTerm","message","workaroundForEmptySuggestionTerm","suggestions","dataSourceConfig","dsConfig","convertFilterConditionToExpression","prefix","filterConditionExpression","getDebugInfo","extendedSearchOptions","dummyFreeStyleText","workaroundSuggestTerm","index","slice","replace","encodeURIComponent","__exports","__esModule"],"sources":["Provider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../../core/core\";\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport { MetadataParser } from \"./MetadataParser\";\nimport { MetadataParserXML } from \"./MetadataParserXML\";\nimport { MetadataParserJson } from \"./MetadataParserJson\";\nimport { ItemParser } from \"./ItemParser\";\nimport { FacetParser } from \"./FacetParser\";\nimport { SuggestionParser } from \"./suggestionParser\";\nimport {\n    IESSearchOptions,\n    getEshSearchQuery,\n    Expression,\n    Comparison,\n    Phrase,\n    Term,\n    SearchQueryComparisonOperator as EshObjComparisonOperator,\n    IESOrdering,\n    ESOrderType,\n    IGroupBy,\n    HierarchyFacet,\n} from \"./eshObjects/src/index\";\nimport * as conditionSerializer from \"./conditionSerializerEshObj\";\nimport { Log } from \"../../core/Log\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { SortOrder } from \"../../sina/SortOrder\";\nimport { AbstractProviderConfiguration, AbstractProvider } from \"../AbstractProvider\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport { SearchResultSet } from \"../../sina/SearchResultSet\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { Query } from \"../../sina/Query\";\nimport { ComplexCondition, RemoveConditionResult } from \"../../sina/ComplexCondition\";\nimport { ESHNoBusinessObjectDatasourceError, ESHNotActiveError, InternalSinaError } from \"../../core/errors\";\nimport { Capabilities } from \"../../sina/Capabilities\";\nimport { HierarchyQuery } from \"../../sina/HierarchyQuery\";\nimport { HierarchyResultSet } from \"../../sina/HierarchyResultSet\";\nimport { HierarchyParser } from \"./HierarchyParser\";\nimport { HierarchyNodePathParser } from \"./HierarchyNodePathParser\";\nimport { SuggestionCalculationMode } from \"../../sina/SuggestionCalculationMode\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { DataSourceResultSet } from \"../../sina/DataSourceResultSet\";\nimport { SearchTermSuggestion } from \"../../sina/SearchTermSuggestion\";\nimport { DataSourceConfiguration } from \"../../sina/DataSourceConfiguration\";\nimport { ODataValue } from \"../../sina/odatatypes\";\nimport { createAjaxClient } from \"../hana_odata/ajax\";\nimport { HierarchyDefinition } from \"./HierarchyMetadataParser\";\nimport { handleError } from \"../tools/util\";\nimport { parseNlqInfo } from \"./nlqParser\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { Condition } from \"../../sina/Condition\";\n\ninterface ExtendedSearchOptions {\n    nlq?: boolean;\n    workaroundForEmptySuggestionTerm?: boolean;\n    doNotEsacpeFreeStyleText?: boolean;\n}\n\ninterface HANAODataSearchQueryData {\n    url: string;\n    query: SearchQuery | SuggestionQuery;\n}\n\nexport interface ServerInfo {\n    rawServerInfo: {\n        Services: Array<{\n            Service: string;\n            Capabilities: Array<{\n                Capability: string;\n            }>;\n        }>;\n    };\n    services: {\n        Suggestions: {\n            suggestionTypes: Array<string>;\n        };\n        Search: {\n            capabilities: Array<string>;\n        };\n    };\n}\n\nexport interface ProviderConfiguration extends AbstractProviderConfiguration {\n    getTextFromResourceBundle: (url: string, text: string) => Promise<string>; // needed for hana odata annotation \"ENTERPRISESEARCHHANA.UIRESOURCE.LABEL.KEY\"\n    odataVersion: string;\n    responseAttributes?: Array<string>;\n    facetAttributes?: Array<string>;\n    querySuffix?: ComplexCondition; // ToDo: Remove as soon as all stakeholders have switched to 'dataSourceConfigurations'\n    dataSourceConfigurations?: Array<DataSourceConfiguration>;\n    metaDataSuffix: string;\n    metaDataJsonType: boolean;\n}\n\nexport enum PresentationUsage {\n    \"TITLE\" = \"TITLE\",\n    \"SUMMARY\" = \"SUMMARY\",\n    \"DETAIL\" = \"DETAIL\",\n    \"IMAGE\" = \"IMAGE\",\n    \"THUMBNAIL\" = \"THUMBNAIL\",\n    \"HIDDEN\" = \"HIDDEN\",\n}\n\nexport interface HANAOdataMetadataResponse {\n    Id: string;\n    Name: string;\n    Key: boolean;\n    Sortable: boolean;\n    SemanticObjectTypeId: string;\n    UIAreas: object;\n    Displayed: boolean;\n    DisplayOrder: number;\n    displayOrder: number;\n    labelRaw: string;\n    label: string;\n    isKey: boolean;\n    isSortable: boolean;\n    supportsTextSearch: boolean;\n    presentationUsage: PresentationUsage[];\n    type: string; // TODO: define type\n    TypeLength: number;\n    annotationsAttr: any; //TODO: define semantics type\n    hierarchyDefinition: HierarchyDefinition;\n}\n\nexport interface HANAOdataSearchResponseDataSourceNlqInfo {\n    Name: string;\n    ai: boolean;\n    filter: {\n        natural_language: string;\n        query_language: string;\n    };\n}\n\nexport interface HANAOdataSearchResponseResult {\n    \"@com.sap.vocabularies.Search.v1.ParentHierarchies\"?: Array<HANAOdataParentHierarchies>;\n    \"@com.sap.vocabularies.Search.v1.SearchStatistics\"?: HANAOdataSearchResponseResultStatistics;\n    \"@com.sap.vocabularies.Search.v1.Facets\"?: Array<HANAOdataSearchResponseResultFacetAllInfo>;\n    \"@com.sap.vocabularies.Search.v1.Nlq\"?: Array<HANAOdataSearchResponseDataSourceNlqInfo>;\n    value?: Array<HANAOdataSearchResponseResultItem>;\n    error?: HANAOdataSearchResponseResultError;\n    \"@odata.count\"?: number;\n}\nexport interface HANAOdataSuggestionResponseResult {\n    \"@com.sap.vocabularies.Search.v1.SearchStatistics\"?: HANAOdataSearchResponseResultStatistics;\n    \"@com.sap.vocabularies.Search.v1.Facets\"?: Array<HANAOdataSearchResponseResultFacetAllInfo>;\n    value?: Array<HANAOdataSuggestionResponseResultItem>;\n    error?: HANAOdataSearchResponseResultError;\n    \"@odata.context\"?: string;\n}\nexport interface HANAOdataSearchResponseResultError {\n    message?: string;\n}\nexport interface HANAOdataSearchResponseResultStatistics {\n    ConnectorStatistics?: Array<HANAOdataSearchResponseResultConnectorStatistic>;\n    StatusCode: string;\n}\nexport interface HANAOdataSearchResponseResultConnectorStatistic {\n    \"@com.sap.vocabularies.Search.v1.CPUTime\": string;\n    \"@com.sap.vocabularies.Search.v1.SearchTime\": string;\n    Name?: string;\n    OdataID?: string;\n    Schema?: string;\n    StatusCode: string;\n}\nexport interface HANAOdataSearchResponseResultItem {\n    \"@com.sap.vocabularies.Search.v1.ParentHierarchies\"?: Array<HANAOdataParentHierarchies>;\n    \"@com.sap.vocabularies.Search.v1.WhyFound\"?: Record<string, ODataValue>;\n    \"@com.sap.vocabularies.Search.v1.Ranking\"?: string;\n    \"@odata.context\"?: string;\n    [key: string]: ODataValue;\n}\nexport interface HANAOdataSuggestionResponseResultItem {\n    highlighted?: string;\n    rank?: string;\n    scope?: string;\n    term?: string;\n}\nexport interface HANAOdataSearchResponseResultFacetAllInfo {\n    \"@com.sap.vocabularies.Common.v1.Label\"?: string;\n    \"@com.sap.vocabularies.Search.v1.Facet\": HANAOdataSearchResponseResultFacet; // TODO: naming HANAOdataSearchResponseResultFacetMetaData?\n    \"@odata.context\"?: string;\n    Items: Array<HANAOdataSearchResponseResultFacetItem>;\n}\nexport interface HANAOdataSearchResponseResultFacet {\n    Dimensions: Array<HANAOdataSearchResponseResultFacetMetaDataProperty>;\n    URI?: string;\n}\nexport interface HANAOdataSearchResponseResultFacetItem {\n    _Count: number;\n    scope?: string;\n}\nexport interface HANAOdataSearchResponseResultFacetMetaDataProperty {\n    FilterProperty?: string;\n    PropertyName?: string;\n    PropertyType?: string;\n    isConnectorFacet?: boolean;\n}\n\nexport interface HANAOdataParentHierarchies {\n    scope: string;\n    hierarchy: Array<Record<string, string>>;\n}\n\nexport class Provider extends AbstractProvider {\n    readonly id = \"hana_odata\";\n    declare serverInfo: ServerInfo;\n    ajaxClient: Client;\n    requestPrefix: string;\n    metadataParser: MetadataParser;\n    itemParser: ItemParser;\n    facetParser: FacetParser;\n    suggestionParser: SuggestionParser;\n    odataVersion: string;\n    responseAttributes?: Array<string>;\n    facetAttributes?: Array<string>;\n    dataSourceConfigurations?: Array<DataSourceConfiguration>;\n    metaDataSuffix: string;\n    hierarchyNodePathParser: HierarchyNodePathParser;\n    getTextFromResourceBundle: (url: string, text: string) => Promise<string>;\n\n    async initAsync(configuration: ProviderConfiguration): Promise<{\n        capabilities: Capabilities;\n    }> {\n        this.getTextFromResourceBundle = configuration.getTextFromResourceBundle;\n        this.requestPrefix = configuration.url;\n        this.odataVersion = configuration.odataVersion;\n        this.responseAttributes = configuration?.responseAttributes;\n        this.facetAttributes = configuration?.facetAttributes;\n        this.sina = configuration.sina;\n        this.dataSourceConfigurations = configuration?.dataSourceConfigurations || [];\n        if (this.dataSourceConfigurations.length === 0 && configuration.querySuffix) {\n            // ToDo: Remove as soon as DSP has been migrated (querySuffix->dataSourceConfigurations)\n            this.dataSourceConfigurations.push({\n                id: \"SEARCH_DESIGN\",\n                filterCondition: configuration.querySuffix,\n            });\n        }\n\n        this.metaDataSuffix = configuration.metaDataSuffix ?? \"\";\n\n        this.ajaxClient =\n            configuration.ajaxClient ??\n            createAjaxClient({\n                getLanguage:\n                    typeof configuration.getLanguage === \"function\" ? configuration.getLanguage : undefined,\n                requestFormatters: configuration.ajaxRequestFormatters,\n                responseFormatters: configuration.ajaxResponseFormatters,\n            });\n\n        const metaDataJsonType = configuration.metaDataJsonType;\n        if (metaDataJsonType) {\n            this.metadataParser = new MetadataParserJson(this);\n        } else {\n            this.metadataParser = new MetadataParserXML(this);\n        }\n\n        this.itemParser = new ItemParser(this);\n        this.facetParser = new FacetParser(this);\n        this.suggestionParser = new SuggestionParser(this);\n        this.hierarchyNodePathParser = new HierarchyNodePathParser(this.sina);\n\n        this.serverInfo = await this.loadServerInfo();\n        if (!this.supports(\"Search\")) {\n            throw new ESHNotActiveError();\n        }\n        await this.loadBusinessObjectDataSources();\n        if (this.sina.getBusinessObjectDataSources().length === 0) {\n            return Promise.reject(new ESHNoBusinessObjectDatasourceError());\n        }\n        return {\n            capabilities: this.sina._createCapabilities({\n                fuzzy: false,\n                nlq: true, // there is not server info call at the moment so we assume always true configuration needs to be performed by configuration flag aiNlq\n            }),\n        };\n    }\n\n    supports(service: string, capability?: undefined): boolean {\n        const supportedServices = this.serverInfo.services;\n        for (const supportedService in supportedServices) {\n            if (supportedService === service) {\n                if (!capability) {\n                    return true;\n                }\n                const supportedCapabilities = supportedServices[supportedService].Capabilities;\n                for (let j = 0; j < supportedCapabilities.length; ++j) {\n                    const checkCapability = supportedCapabilities[j];\n                    if (checkCapability === capability) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    async loadServerInfo(): Promise<ServerInfo> {\n        const simulatedHanaServerinfo = {\n            rawServerInfo: {\n                Services: [\n                    {\n                        Service: \"Search\",\n                        Capabilities: [\n                            {\n                                Capability: \"SemanticObjectType\",\n                            },\n                        ],\n                    },\n                    {\n                        Service: \"Suggestions2\",\n                        Capabilities: [\n                            {\n                                Capability: \"ScopeTypes\",\n                            },\n                        ],\n                    },\n                ],\n            },\n            services: {\n                Suggestions: {\n                    suggestionTypes: [\"objectdata\"],\n                },\n                Search: {\n                    capabilities: [\"SemanticObjectType\"],\n                },\n            },\n        };\n        return simulatedHanaServerinfo;\n    }\n\n    _prepareMetadataRequest(): string {\n        const requestObj: IESSearchOptions = {\n            metadataCall: true,\n            resourcePath: this.getPrefix() + \"/$metadata\",\n        };\n\n        if (typeof this.metaDataSuffix === \"string\" && this.metaDataSuffix.length > 0) {\n            // TODO: for the temp compatibility of import wizard call, metaDataSuffix shall only contains entityset\n            /* if (this.metaDataSuffix.startsWith(\"/EntitySets\")) {\n                this.metaDataSuffix = this.metaDataSuffix.replace(/\\/EntitySets\\(/, \"\");\n                this.metaDataSuffix = this.metaDataSuffix.substring(0, this.metaDataSuffix.length - 1);\n            } */\n            requestObj.metadataObjects = {\n                entitySets: this.metaDataSuffix,\n            };\n        }\n        return this.assembleUrl(requestObj);\n    }\n\n    async loadBusinessObjectDataSources(): Promise<void> {\n        const requestUrl = this._prepareMetadataRequest();\n        const response = await this.metadataParser.fireRequest(this.ajaxClient, requestUrl);\n        const allMetaDataMap = await this.metadataParser.parseResponse(response);\n\n        for (let i = 0; i < allMetaDataMap.dataSourcesList.length; ++i) {\n            const dataSource = allMetaDataMap.dataSourcesList[i];\n            this.metadataParser.fillMetadataBuffer(\n                dataSource,\n                allMetaDataMap.businessObjectMap[dataSource.id]\n            );\n        }\n    }\n\n    assembleOrderBy(query: Query): Array<IESOrdering> {\n        const result = [];\n        if (Array.isArray(query.sortOrder)) {\n            for (let i = 0; i < query.sortOrder.length; ++i) {\n                const sortKey = query.sortOrder[i];\n                const sortOrder =\n                    sortKey.order === SortOrder.Descending ? ESOrderType.Descending : ESOrderType.Ascending;\n                result.push({\n                    key: sortKey.id,\n                    order: sortOrder,\n                });\n            }\n        }\n        return result;\n    }\n\n    assembleGroupBy(query: SearchQuery): IGroupBy {\n        const result: IGroupBy = null;\n        if (query.groupBy && query.groupBy.attributeName && query.groupBy.attributeName.length > 0) {\n            result.properties = query.groupBy.attributeName;\n\n            if (query.groupBy.aggregateCountAlias && query.groupBy.aggregateCountAlias !== \"\") {\n                result.aggregateCountAlias = query.groupBy.aggregateCountAlias;\n            }\n        }\n        return result;\n    }\n\n    executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        const oUrlData = this._prepareSearchObjectSuggestionRequest(query);\n        return this.fireSearchQuery(oUrlData);\n    }\n\n    _prepareSearchObjectSuggestionRequest(query: SearchQuery | SuggestionQuery): HANAODataSearchQueryData {\n        // assemble request object\n        const rootCondition = query.filter.rootCondition.clone();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        const searchTerms = query.filter.searchTerm || \"*\";\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        const dataSource = query.filter.dataSource;\n        const top = query.top || 10;\n        const skip = query.skip || 0;\n\n        const sortOrder: Array<IESOrdering> = this.assembleOrderBy(query);\n\n        const searchOptions: IESSearchOptions = {\n            // query: searchTerms,\n            resourcePath: this.getPrefix() + \"/$all\",\n            $top: top,\n            $skip: skip,\n            whyfound: true,\n            $count: true,\n            $orderby: sortOrder,\n            freeStyleText: searchTerms,\n            searchQueryFilter: filter,\n        };\n        if (dataSource !== this.sina.getAllDataSource()) {\n            searchOptions.scope = dataSource.id;\n        }\n        // The second condition is to exclude hierarchy facets and object suggestions which are also SearchQuery\n        if (this.sina?.configuration?.useValueHierarchy === true && top < 100) {\n            let hierarchyAttribute = dataSource.hierarchyAttribute;\n            const helperHierarchyDataource = dataSource.getHierarchyDataSource();\n            if (helperHierarchyDataource instanceof DataSource) {\n                hierarchyAttribute = helperHierarchyDataource.hierarchyAttribute;\n            }\n            if (hierarchyAttribute) {\n                searchOptions.valuehierarchy = hierarchyAttribute;\n            }\n        }\n        if (query instanceof SearchQuery) {\n            if (typeof this.responseAttributes !== \"undefined\") {\n                // an empty array is also supported. Even if there seems to be no enduser value, tests might want to check performance of a such request\n                searchOptions.$select = this.responseAttributes; // rendering currently failing, if not all properties of metadata are requested\n            }\n            if (query.calculateFacets) {\n                if (typeof this.facetAttributes !== \"undefined\") {\n                    // an empty array is also supported. Even if there seems to be no enduser value, tests might want to check performance of a such request\n                    searchOptions.facets = this.facetAttributes;\n                } else {\n                    searchOptions.facets = [\"all\"];\n                }\n                searchOptions.facetlimit = query.facetTop || 5;\n            }\n            const groupBy = this.assembleGroupBy(query);\n            if (groupBy) {\n                searchOptions.groupby = groupBy;\n                searchOptions.whyfound = false;\n            }\n        }\n\n        const queryData: HANAODataSearchQueryData = {\n            url: this.assembleUrl(searchOptions, {\n                nlq: query.nlq,\n                doNotEsacpeFreeStyleText: this.sina?.configuration?.enableQueryLanguage,\n            }),\n            query: query,\n        };\n        return queryData;\n    }\n\n    private async fireSearchQuery(oInputData: HANAODataSearchQueryData): Promise<SearchResultSet> {\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(oInputData.url))?.data as HANAOdataSearchResponseResult;\n            },\n            async (responseData: HANAOdataSearchResponseResult) => {\n                // 2) parse\n                return await this.parseSearchResponse(oInputData, responseData);\n            }\n        );\n    }\n\n    private async parseSearchResponse(\n        oInputData: HANAODataSearchQueryData,\n        response: HANAOdataSearchResponseResult\n    ): Promise<SearchResultSet> {\n        this.metadataParser.parseDynamicMetadata(response);\n        const hierarchyNodePaths = this.hierarchyNodePathParser.parse(\n            response?.[\"@com.sap.vocabularies.Search.v1.ParentHierarchies\"],\n            oInputData.query\n        );\n        const items = await this.itemParser.parse(oInputData.query as SearchQuery, response);\n        let facets: Array<DataSourceResultSet | HierarchyResultSet | ChartResultSet>;\n        const statistics = response[\"@com.sap.vocabularies.Search.v1.SearchStatistics\"]?.ConnectorStatistics;\n        if (\n            oInputData.query.getDataSource() === this.sina.getAllDataSource() &&\n            statistics &&\n            Array.isArray(statistics) &&\n            statistics.length === 1\n        ) {\n            const constructedDataSourceFacets: HANAOdataSearchResponseResult = {\n                \"@com.sap.vocabularies.Search.v1.Facets\": [\n                    {\n                        \"@com.sap.vocabularies.Search.v1.Facet\": {\n                            Dimensions: [{ PropertyName: \"scope\", isConnectorFacet: true }],\n                        },\n                        Items: [\n                            {\n                                scope: statistics[0].OdataID,\n                                _Count: response[\"@odata.count\"],\n                            },\n                        ],\n                    },\n                ],\n            };\n            facets = await this.facetParser.parse(oInputData.query, constructedDataSourceFacets);\n        } else {\n            facets = await this.facetParser.parse(oInputData.query, response);\n        }\n\n        const nlqResult = parseNlqInfo(this.sina, response[\"@com.sap.vocabularies.Search.v1.Nlq\"]);\n\n        return this.sina._createSearchResultSet({\n            title: \"Search Result List\",\n            query: oInputData.query,\n            items: items,\n            totalCount: response[\"@odata.count\"] || 0,\n            facets: facets,\n            hierarchyNodePaths: hierarchyNodePaths,\n            nlqResult: nlqResult,\n        });\n    }\n\n    private async _fireObjectSuggestionsQuery(\n        query: SuggestionQuery,\n        oInputData: HANAODataSearchQueryData\n    ): Promise<SuggestionResultSet> {\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(oInputData.url))?.data as HANAOdataSearchResponseResult;\n            },\n            async (responseData: HANAOdataSearchResponseResult) => {\n                // 2) parse\n                this.metadataParser.parseDynamicMetadata(responseData);\n                const searchItems = await this.itemParser.parse(\n                    oInputData.query as SearchQuery,\n                    responseData\n                );\n                const objectSuggestions = this.suggestionParser.parseObjectSuggestions(\n                    oInputData.query as SuggestionQuery /* cast from generic to specific struct */,\n                    searchItems\n                );\n                return this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: objectSuggestions,\n                });\n            }\n        );\n    }\n\n    _prepareChartQueryRequest(\n        query: ChartQuery,\n        rootCondition: Condition,\n        resultDeletion: RemoveConditionResult\n    ): string {\n        const searchTerms = query.filter.searchTerm;\n        const dataSource = query.filter.dataSource;\n\n        const facetTop = 15; // default value for numeric range/interval facets\n\n        // in value help mode delete current condition from root and prepare to construct the value help part of query\n        const isValueHelpMode = resultDeletion.deleted || false;\n\n        const filter = conditionSerializer.serialize(dataSource, rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        const top = query.top || 5;\n\n        // construct search part of $apply\n        if (isValueHelpMode === true) {\n            // value help mode\n            // attribute value \"*\" can only be used without EQ part\n            // this will be changed on serverside later\n            const valueString = resultDeletion.value as string;\n            if (\n                !resultDeletion.value ||\n                resultDeletion.value === \"\" ||\n                valueString.match(/^[*\\s]+$/g) !== null\n            ) {\n                resultDeletion.value = \"*\";\n                filter.items.push(\n                    new Comparison({\n                        property: resultDeletion.attribute,\n                        operator: EshObjComparisonOperator.Search,\n                        value: new Term({ term: \"*\" }),\n                    })\n                );\n            } else {\n                filter.items.push(\n                    new Comparison({\n                        property: resultDeletion.attribute,\n                        operator: EshObjComparisonOperator.EqualCaseInsensitive,\n                        value: new Phrase({\n                            phrase: resultDeletion.value + \"*\",\n                        }),\n                    })\n                );\n            }\n        }\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        const chartOptions: IESSearchOptions = {\n            resourcePath: this.getPrefix() + \"/$all\",\n            $top: 0,\n            $count: true,\n            searchQueryFilter: filter,\n            freeStyleText: searchTerms,\n        };\n\n        if (dataSource !== this.sina.getAllDataSource()) {\n            chartOptions.scope = dataSource.id;\n        }\n\n        const facetScope = [];\n        chartOptions.facetlimit = top;\n        if (query.dimension) {\n            facetScope.push(query.dimension);\n            const metadata = query.filter.dataSource.getAttributeMetadata(query.dimension);\n            if (metadata && (metadata.type === \"Double\" || metadata.type === \"Integer\") && top >= 20) {\n                // facet limit decides number of intervals/ranges of numeric data types, but has no effect on date/time ranges\n                chartOptions.facetlimit = facetTop;\n            }\n        }\n\n        // no need to use this.responseAttributes/this.facetAttributes here ($select/facets)\n\n        // just require own chart facet in case that\n        chartOptions.facets = facetScope;\n\n        // get Query Url\n        return this.assembleUrl(chartOptions, { nlq: query.nlq });\n    }\n\n    async executeChartQuery(query: ChartQuery): Promise<ChartResultSet> {\n        const log = new Log();\n        // in value help mode delete current condition from root and prepare to construct the value help part of query\n        const rootCondition = query.filter.rootCondition.clone();\n        const resultDeletion = (rootCondition as ComplexCondition).removeAttributeConditions(query.dimension);\n        const url = this._prepareChartQueryRequest(query, rootCondition, resultDeletion);\n\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(url))?.data as HANAOdataSearchResponseResult;\n            },\n            async (responseData: HANAOdataSearchResponseResult) => {\n                // 2) parse\n                const facets = await this.facetParser.parse(query, responseData);\n                if (facets.length > 0) {\n                    return facets[0];\n                }\n                let metadataLabel = \"\";\n                const metadata = query.filter.dataSource.getAttributeMetadata(\n                    query.dimension\n                ) as AttributeMetadata;\n                if (metadata && metadata.label) {\n                    metadataLabel = metadata.label;\n                }\n                return this.sina._createChartResultSet({\n                    title: metadataLabel,\n                    items: [],\n                    query: query,\n                    log: log,\n                    facetTotalCount: undefined,\n                });\n            }\n        );\n    }\n\n    async executeHierarchyQuery(query: HierarchyQuery): Promise<HierarchyResultSet> {\n        const hierarchyParser = new HierarchyParser();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, query.filter.rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        // get Query Url\n        const requestUrl = this.assembleUrl(\n            {\n                resourcePath: this.getPrefix() + \"/$all\",\n                $top: 0,\n                searchQueryFilter: filter,\n                freeStyleText: query.filter.searchTerm,\n                scope: query.filter.dataSource.id,\n                facets: [query.attributeId],\n                facetroot: [\n                    new HierarchyFacet({\n                        facetColumn: query.attributeId,\n                        rootIds: [query.nodeId],\n                        levels: 1,\n                    }),\n                ],\n                // no need to use this.responseAttributes/this.facetAttributes here ($select/facets)\n            },\n            { nlq: query.nlq }\n        );\n\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(requestUrl))?.data;\n            },\n            async (responseData) => {\n                // 2) parse\n                const attributeMetadata = query.filter.dataSource.getAttributeMetadata(\n                    query.attributeId\n                ) as AttributeMetadata;\n                const facets = responseData[\"@com.sap.vocabularies.Search.v1.Facets\"] || [];\n                const facet = facets.find((facet) => {\n                    const attributeId = core.getProperty(facet, [\n                        \"@com.sap.vocabularies.Search.v1.Facet\",\n                        \"Dimensions\",\n                        0,\n                        \"PropertyName\",\n                    ]);\n                    return attributeId === query.attributeId;\n                });\n                return hierarchyParser.parseHierarchyFacet(query, attributeMetadata, facet || {});\n            }\n        );\n    }\n\n    async executeSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // handle regular suggestions and object suggestion separately because\n        // object suggestions have only searchterms and no suggestionInput\n        const [regularSuggestionsResultSet, objectSuggestionsResultSet] = await Promise.all([\n            this.executeRegularSuggestionQuery(query),\n            this.executeObjectSuggestionQuery(query),\n        ]);\n        const resultSet: SuggestionResultSet = this.sina._createSuggestionResultSet({\n            title: \"Suggestions\",\n            query: query,\n            items: [...objectSuggestionsResultSet.items, ...regularSuggestionsResultSet.items],\n        });\n        resultSet.addErrors(regularSuggestionsResultSet.getErrors());\n        resultSet.addErrors(objectSuggestionsResultSet.getErrors());\n        return resultSet;\n    }\n\n    isObjectSuggestionQuery(query: SuggestionQuery): boolean {\n        return (\n            query.types.indexOf(SuggestionType.Object) >= 0 &&\n            query.filter.dataSource.type === query.sina.DataSourceType.BusinessObject\n        );\n    }\n\n    private async executeObjectSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // check query type\n        if (!this.isObjectSuggestionQuery(query)) {\n            return Promise.resolve(\n                this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: [],\n                })\n            );\n        }\n        const oUrlData = this._prepareSearchObjectSuggestionRequest(query);\n        return this._fireObjectSuggestionsQuery(query, oUrlData);\n    }\n\n    private executeRegularSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // HANA only supports searchterm suggestions without history\n        if (\n            query.calculationModes.includes(SuggestionCalculationMode.Data) &&\n            (query.types.includes(SuggestionType.SearchTerm) ||\n                query.types.includes(SuggestionType.SearchTermAI))\n        ) {\n            return this._fireSuggestionQuery(query);\n        }\n        return Promise.resolve(\n            this.sina._createSuggestionResultSet({\n                title: \"Suggestions\",\n                query: query,\n                items: [],\n            })\n        );\n    }\n\n    _prepareSuggestionQueryRequest(query: SuggestionQuery): string {\n        /*\n            type=scope for search connector names \n            currently only for technical names, shall be discussed\n            Do we need count?\n            $apply=filter part exactly as search query but move search terms to term parameter in getSuggestion\n        */\n\n        // split search term in query into (1) searchTerm (2) suggestionTerm\n        // const searchTerm = this._escapeSearchTerm(query.filter.searchTerm);\n        // const searchTerm = encodeURIComponent(\n        //     query.filter.searchTerm\n        // );\n        const searchTerms = query.filter.searchTerm;\n        const dataSource = query.filter.dataSource;\n        const rootCondition = query.filter.rootCondition.clone();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        const top = query.top || 10;\n        const skip = query.skip || 0;\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        /* test ai suggestions\n        if (query.types.indexOf(SuggestionType.SearchTermAI) >= 0) {\n            searchTerms = \"\";\n        }*/\n\n        const suggestionOptions: IESSearchOptions = {\n            suggestTerm: searchTerms,\n            resourcePath: this.getPrefix() + \"/$all\",\n            $top: top,\n            $skip: skip,\n            searchQueryFilter: filter,\n            // no need to use this.responseAttributes/this.facetAttributes here ($select/facets)\n        };\n\n        if (dataSource !== this.sina.getAllDataSource()) {\n            suggestionOptions.scope = dataSource.id;\n        }\n\n        let nlq = query.nlq;\n\n        // for search term ai suggestions set nlq flag\n        if (query.types.indexOf(SuggestionType.SearchTermAI) >= 0) {\n            if (query.types.length > 1) {\n                throw new InternalSinaError({\n                    message: \"inconsistent suggestion query: ai suggestion mixed with other suggestion\",\n                });\n            }\n            nlq = true;\n        }\n\n        return this.assembleUrl(suggestionOptions, {\n            nlq: nlq,\n            workaroundForEmptySuggestionTerm: true,\n        });\n    }\n\n    private async _fireSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        const url = this._prepareSuggestionQueryRequest(query);\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(url))?.data as unknown as {\n                    value: Array<HANAOdataSuggestionResponseResult>;\n                };\n            },\n            async (responseData: { value: Array<HANAOdataSuggestionResponseResult> }) => {\n                // 2) parse\n                let suggestions = [];\n                if (responseData.value) {\n                    suggestions = this.suggestionParser.parse(\n                        query,\n                        responseData.value\n                    ) as Array<SearchTermSuggestion>;\n                }\n                return this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: suggestions,\n                });\n            }\n        );\n    }\n\n    private addFilterConditionToFilter(query, filter, dataSourceConfigurations) {\n        if (dataSourceConfigurations) {\n            const dataSourceConfig = dataSourceConfigurations.filter(\n                (dsConfig) => dsConfig.id === query.filter.dataSource.id\n            )[0];\n            if (dataSourceConfig?.filterCondition) {\n                filter.items.push(this.convertFilterConditionToExpression(dataSourceConfig.filterCondition));\n            }\n        }\n    }\n\n    // getFilterValueFromConditionTree(\n    //     dimension: any,\n    //     conditionTree: {\n    //         ConditionAttribute: any;\n    //         ConditionValue: any;\n    //         SubFilters: string | any[];\n    //     }\n    // ) {\n    //     if (\n    //         conditionTree.ConditionAttribute &&\n    //         conditionTree.ConditionAttribute === dimension\n    //     ) {\n    //         return conditionTree.ConditionValue;\n    //     } else if (conditionTree.SubFilters) {\n    //         let i: number;\n    //         let result = null;\n    //         for (\n    //             i = 0;\n    //             result === null && i < conditionTree.SubFilters.length;\n    //             i++\n    //         ) {\n    //             result = this.getFilterValueFromConditionTree(\n    //                 dimension,\n    //                 conditionTree.SubFilters[i]\n    //             );\n    //         }\n    //         return result;\n    //     }\n    //     return null;\n    // }\n\n    getPrefix(): string {\n        const odataVersion = this.odataVersion ?? \"/v20411\";\n        const requestPrefix = this.requestPrefix ?? \"/sap/es/odata\";\n        const prefix = requestPrefix + odataVersion;\n        return prefix;\n    }\n\n    convertFilterConditionToExpression(filterCondition: ComplexCondition): Expression {\n        let filterConditionExpression = null;\n        if (filterCondition && filterCondition instanceof ComplexCondition) {\n            filterConditionExpression = conditionSerializer.serialize(null, filterCondition);\n        }\n        return filterConditionExpression;\n    }\n\n    getDebugInfo(): string {\n        return \"ESH API Provider: \" + this.id;\n    }\n\n    assembleUrl(searchOptions: IESSearchOptions, extendedSearchOptions?: ExtendedSearchOptions): string {\n        // wrapper for getEshSearchQuery which adds functionality missing in getEshSearchQuery\n        // missing functionality in getEshSearchQuery:\n        // - cannot handle empty suggestions term\n        // - cannot add nlq flag\n        // - not escaping free style text\n\n        // translate free style text to random string\n        const dummyFreeStyleText = \"FDGhfdhgfHFGHrdthfgcvgzjmbvndf\";\n        const freeStyleText = searchOptions?.freeStyleText;\n        if (extendedSearchOptions?.doNotEsacpeFreeStyleText && searchOptions?.freeStyleText) {\n            searchOptions.freeStyleText = dummyFreeStyleText;\n        }\n\n        // translate suggest term to random string\n        const workaroundSuggestTerm = \"fdjksghdfjkhvbbnfydfsd\";\n        if (extendedSearchOptions?.workaroundForEmptySuggestionTerm) {\n            if (searchOptions.suggestTerm === \"\") {\n                searchOptions.suggestTerm = workaroundSuggestTerm;\n            }\n        }\n\n        // call original getEshSearchQuery\n        let url = getEshSearchQuery(searchOptions);\n\n        // add nlq parameter\n        if (extendedSearchOptions?.nlq) {\n            const index = url.indexOf(\"?\");\n            if (index >= 0) {\n                url = url.slice(0, index + 1) + \"nlq=true&\" + url.slice(index + 1);\n            } else {\n                url += \"?nlq=true\";\n            }\n        }\n\n        // backtranslate free style text\n        if (extendedSearchOptions?.doNotEsacpeFreeStyleText) {\n            if (searchOptions?.freeStyleText === dummyFreeStyleText) {\n                url = url.replace(dummyFreeStyleText, encodeURIComponent(\"(\" + freeStyleText + \")\"));\n            }\n        }\n\n        // backtranslate suggest term\n        if (extendedSearchOptions?.workaroundForEmptySuggestionTerm) {\n            if (searchOptions.suggestTerm === workaroundSuggestTerm) {\n                url = url.replace(workaroundSuggestTerm, \"\");\n            }\n        }\n\n        return url;\n    }\n}\n"],"mappings":"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","ignoreList":[]}