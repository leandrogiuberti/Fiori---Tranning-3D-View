{"version":3,"file":"DataSourceService-dbg.js","names":["sap","ui","define","___Util","____sina_DataSourceType","getMatchedStringValues","readFile","DataSourceType","DataSourceService","sina","dataSourceIds","constructor","loadDataSources","dataSources","some","dataSource","type","BusinessObject","dataSourceId","content","dataSourceFromJson","JSON","parse","getDataSourceById","find","id","getResponse","query","matchedDataSources","labelPlural","label","filter","searchTerm","length","push","results","totalCount","__exports","__esModule"],"sources":["DataSourceService.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { getMatchedStringValues, readFile } from \"./Util\";\nimport { DataSourceType } from \"../../sina/DataSourceType\";\n\nexport interface DataSourceResponse {\n    results: DataSource[]; // total results\n    totalCount: number;\n}\n\nexport class DataSourceService {\n    sina: Sina;\n    dataSourceIds = [] as string[];\n\n    constructor(sina: Sina, dataSourceIds: string[]) {\n        this.sina = sina;\n        this.dataSourceIds = dataSourceIds;\n    }\n\n    async loadDataSources(): Promise<void> {\n        // data sources have been loaded\n        if (this.sina.dataSources.some((dataSource) => dataSource.type === DataSourceType.BusinessObject)) {\n            return;\n        }\n\n        // data sources have not been loaded yet, load them from JSON files\n        for (const dataSourceId of this.dataSourceIds) {\n            const content = await readFile(\n                `/resources/sap/esh/search/ui/sinaNexTS/providers/sample2/data/${dataSourceId}.json`\n            );\n            this.sina.dataSourceFromJson(JSON.parse(content));\n        }\n    }\n\n    getDataSourceById(dataSourceId: string): DataSource {\n        return this.sina.dataSources.find((dataSource) => dataSource.id === dataSourceId);\n    }\n\n    getResponse(query: SuggestionQuery): DataSourceResponse {\n        const matchedDataSources = [];\n        for (const dataSource of this.sina.dataSources) {\n            if (\n                getMatchedStringValues([dataSource.labelPlural, dataSource.label], query.filter.searchTerm)\n                    .length > 0\n            ) {\n                matchedDataSources.push(dataSource);\n            }\n        }\n        return { results: matchedDataSources, totalCount: matchedDataSources.length };\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,oDAAAC,OAAA,EAAAC,uBAAA;EAAA;;EAAA,MAQSC,sBAAsB,GAAAF,OAAA;EAAA,MAAEG,QAAQ,GAAAH,OAAA;EAAA,MAChCI,cAAc,GAAAH,uBAAA;EAOhB,MAAMI,iBAAiB,CAAC;IAC3BC,IAAI;IACJC,aAAa,GAAG,EAAE;IAElBC,WAAWA,CAACF,IAAU,EAAEC,aAAuB,EAAE;MAC7C,IAAI,CAACD,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,aAAa,GAAGA,aAAa;IACtC;IAEA,MAAME,eAAeA,CAAA,EAAkB;MACnC;MACA,IAAI,IAAI,CAACH,IAAI,CAACI,WAAW,CAACC,IAAI,CAAEC,UAAU,IAAKA,UAAU,CAACC,IAAI,KAAKT,cAAc,CAACU,cAAc,CAAC,EAAE;QAC/F;MACJ;;MAEA;MACA,KAAK,MAAMC,YAAY,IAAI,IAAI,CAACR,aAAa,EAAE;QAC3C,MAAMS,OAAO,GAAG,MAAMb,QAAQ,CAC1B,iEAAiEY,YAAY,OACjF,CAAC;QACD,IAAI,CAACT,IAAI,CAACW,kBAAkB,CAACC,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC,CAAC;MACrD;IACJ;IAEAI,iBAAiBA,CAACL,YAAoB,EAAc;MAChD,OAAO,IAAI,CAACT,IAAI,CAACI,WAAW,CAACW,IAAI,CAAET,UAAU,IAAKA,UAAU,CAACU,EAAE,KAAKP,YAAY,CAAC;IACrF;IAEAQ,WAAWA,CAACC,KAAsB,EAAsB;MACpD,MAAMC,kBAAkB,GAAG,EAAE;MAC7B,KAAK,MAAMb,UAAU,IAAI,IAAI,CAACN,IAAI,CAACI,WAAW,EAAE;QAC5C,IACIR,sBAAsB,CAAC,CAACU,UAAU,CAACc,WAAW,EAAEd,UAAU,CAACe,KAAK,CAAC,EAAEH,KAAK,CAACI,MAAM,CAACC,UAAU,CAAC,CACtFC,MAAM,GAAG,CAAC,EACjB;UACEL,kBAAkB,CAACM,IAAI,CAACnB,UAAU,CAAC;QACvC;MACJ;MACA,OAAO;QAAEoB,OAAO,EAAEP,kBAAkB;QAAEQ,UAAU,EAAER,kBAAkB,CAACK;MAAO,CAAC;IACjF;EACJ;EAAC,IAAAI,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAA7B,iBAAA,GAAAA,iBAAA;EAAA,OAAA6B,SAAA;AAAA","ignoreList":[]}