{"version":3,"file":"FacetService.js","names":["sap","ui","define","____sina_FacetType","____sina_AttributeType","___Util","FacetType","AttributeType","format10Power","FacetService","sina","dataSourceIds","constructor","searchEngine","this","createFacetsByDataSourceId","dataSourceId","records","length","undefined","createDataSourceFacetSet","attributes","getDataSource","attributesMetadata","facetAttributes","filter","attribute","usage","Facet","facetAttributesSorted","sort","a","b","displayOrder","createAttributeFacetSet","facetSet","facets","facet","id","label","type","DataSource","position","items","dataSources","ds","recordService","push","description","count","getRecordsByDataSourceId","rawValueLow","rawValueHigh","stringValueLow","stringValueHigh","top","createAttributeFacet","AdvancedSearch","valueMap","Chart","facetTotalCount","itemsData","String","getPointItemsData","item","lowStringValue","lowRawValue","Double","Integer","getNumberRangeItemsData","highStringValue","highRawValue","Timestamp","Date","Time","getDateRangeItemsData","attributeId","map","Map","facetItemsData","record","value","stringValue","get","set","Number","isInteger","slice","numberOfRanges","sortedRecords","sortRecords","minValue","rawValue","maxValue","min10Power","range","i","startValue","endValue","rds","toFixed","toString","now","todayEnd","getFullYear","getMonth","getDate","futureStart","getTime","last7DaysStart","setHours","last30DaysStart","thisYearStart","thisYearEnd","lastYearStart","lastYearEnd","last3YearStart","last5YearStart","ranges","__exports","__esModule"],"sources":["FacetService.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { FacetType } from \"../../sina/FacetType\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Record } from \"./RecordService\";\nimport { Value as RawValue } from \"../../sina/types\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { format10Power } from \"./Util\";\nimport { SearchEngine } from \"./SearchEngine\";\n\nexport interface FacetSet {\n    dataSourceId: string;\n    facets: Facet[];\n}\n\nexport interface Facet {\n    id: string;\n    label: string;\n    type: FacetType;\n    facetTotalCount: number;\n    position: number;\n    items: FacetItem[];\n}\n\nexport interface FacetItem {\n    description: string;\n    count: number;\n    rawValueLow: RawValue;\n    rawValueHigh: RawValue;\n    stringValueLow: string;\n    stringValueHigh: string;\n    // type: \"AttributeValue\",\n}\n\nexport interface FacetItemData {\n    lowStringValue: string;\n    lowRawValue: RawValue;\n    highStringValue: string;\n    highRawValue: RawValue;\n    count: number;\n}\n\nexport class FacetService {\n    sina: Sina;\n    dataSourceIds = [] as string[];\n\n    constructor(\n        sina: Sina,\n        dataSourceIds: string[],\n        readonly searchEngine: SearchEngine\n    ) {\n        this.sina = sina;\n        this.dataSourceIds = dataSourceIds;\n    }\n\n    createFacetsByDataSourceId(dataSourceId: string, records: Record[]): FacetSet | undefined {\n        if (records.length === 0) {\n            return undefined;\n        }\n\n        if (dataSourceId === \"All\") {\n            return this.createDataSourceFacetSet(records);\n        } else {\n            const attributes = this.sina.getDataSource(dataSourceId).attributesMetadata;\n            const facetAttributes = attributes.filter((attribute) => attribute.usage.Facet !== undefined);\n            const facetAttributesSorted = facetAttributes.sort(\n                (a, b) => (a.usage.Facet.displayOrder || 0) - (b.usage.Facet.displayOrder || 0)\n            ) as Array<AttributeMetadata>;\n            return this.createAttributeFacetSet(records, facetAttributesSorted, 5);\n        }\n    }\n\n    createDataSourceFacetSet(records: Record[]): FacetSet {\n        const facetSet = {\n            dataSourceId: \"All\",\n            facets: [],\n        } as FacetSet;\n\n        const facet = {\n            id: \"DataSource\",\n            label: \"Data Sources\",\n            type: FacetType.DataSource,\n            position: 0,\n            items: [],\n        } as Facet;\n\n        const dataSources = this.sina.dataSources.filter((ds) => ds.type === \"BusinessObject\");\n        const recordService = this.searchEngine.recordService;\n        for (const ds of dataSources) {\n            facet.items.push({\n                description: ds.label,\n                count: recordService.getRecordsByDataSourceId(ds.id, records).length,\n                rawValueLow: ds.id,\n                rawValueHigh: \"\",\n                stringValueLow: ds.label,\n                stringValueHigh: \"\",\n                // type: \"View\",\n            } as FacetItem);\n        }\n\n        facetSet.facets.push(facet);\n\n        return facetSet;\n    }\n\n    createAttributeFacetSet(\n        records: Record[],\n        facetAttributes: Array<AttributeMetadata>,\n        top?: number\n    ): FacetSet {\n        if (records.length === 0) {\n            return undefined;\n        }\n\n        const dataSourceId = records[0].dataSourceId;\n        const facetSet = {\n            dataSourceId: dataSourceId,\n            facets: [],\n        } as FacetSet;\n\n        for (const attribute of facetAttributes ? facetAttributes : []) {\n            const facet = this.createAttributeFacet(records, attribute, top);\n            if (facet) {\n                facetSet.facets.push(facet);\n            }\n        }\n\n        return facetSet;\n    }\n\n    createAttributeFacet(records: Record[], attribute: AttributeMetadata, top?: number): Facet | undefined {\n        if (attribute.usage?.Facet === undefined && attribute.usage?.AdvancedSearch === undefined) {\n            return undefined;\n        }\n\n        // facet attribute may not be found in results, facet items and counts are not available\n        if (records[0]?.valueMap[attribute.id] === undefined) {\n            return undefined;\n        }\n\n        const facet = {\n            id: attribute.id,\n            label: attribute.label,\n            type: FacetType.Chart,\n            position:\n                attribute.usage?.Facet?.displayOrder || attribute.usage?.AdvancedSearch?.displayOrder || 0,\n            items: [],\n            facetTotalCount: 99999, // ToDo: Fill with total count of all facet items -> see getDataForPieChart of SearchFacetPieChart.ts\n        } as Facet;\n\n        let itemsData = [] as FacetItemData[];\n\n        // create attribute facet according to attribute type\n        switch (attribute.type) {\n            case AttributeType.String:\n                itemsData = this.getPointItemsData(records, attribute.id, top);\n                for (const item of itemsData) {\n                    facet.items.push({\n                        description: item.lowStringValue,\n                        count: item.count,\n                        rawValueLow: item.lowRawValue,\n                        rawValueHigh: \"\",\n                        stringValueLow: item.lowStringValue,\n                        stringValueHigh: \"\",\n                        // type: \"AttributeValue\",\n                    } as FacetItem);\n                }\n                break;\n\n            case AttributeType.Double:\n            case AttributeType.Integer:\n                itemsData = this.getNumberRangeItemsData(records, attribute.id, top);\n                for (const item of itemsData) {\n                    facet.items.push({\n                        description: item.lowStringValue + \" ... \" + item.highStringValue,\n                        count: item.count,\n                        rawValueLow: item.lowRawValue,\n                        rawValueHigh: item.highRawValue,\n                        stringValueLow: item.lowStringValue,\n                        stringValueHigh: item.highStringValue,\n                        // type: \"AttributeValue\",\n                    } as FacetItem);\n                }\n                break;\n\n            case AttributeType.Timestamp:\n            case AttributeType.Date:\n            case AttributeType.Time:\n                itemsData = this.getDateRangeItemsData(records, attribute.id, top);\n                for (const item of itemsData) {\n                    facet.items.push({\n                        description: item.lowStringValue,\n                        count: item.count,\n                        rawValueLow: item.lowRawValue,\n                        rawValueHigh: item.highRawValue,\n                        stringValueLow: item.lowStringValue,\n                        stringValueHigh: item.highStringValue,\n                        // type: \"AttributeValue\",\n                    } as FacetItem);\n                }\n                break;\n\n            default:\n            // case AttributeType.ImageUrl\n            // case AttributeType.ImageBlob\n            // case AttributeType.GeoJson\n            // case AttributeType.Group\n            // case AttributeType.INAV2_SearchTerms\n            // case AttributeType.INAV2_SuggestionTerms\n            // do nothing\n        }\n\n        return facet.items.length > 0 ? facet : undefined;\n    }\n\n    private getPointItemsData(records: Record[], attributeId: string, top?: number): FacetItemData[] {\n        const map = new Map();\n        const facetItemsData: FacetItemData[] = [];\n\n        // 1. create hash map of attribute value and count\n        for (const record of records) {\n            const value = record?.valueMap[attributeId]?.stringValue;\n            if (map.get(value) === undefined) {\n                map.set(value, 1);\n            } else {\n                map.set(value, map.get(value) + 1);\n            }\n        }\n\n        // 2. set facet items data\n        for (const [value, count] of map) {\n            if (count > 0) {\n                facetItemsData.push({\n                    lowStringValue: value,\n                    lowRawValue: value,\n                    highStringValue: undefined,\n                    highRawValue: undefined,\n                    count: count,\n                });\n            }\n        }\n\n        // 3. sort facet items data by count descending, and limit to top\n        if (Number.isInteger(top) && top > 0) {\n            return facetItemsData.sort((a, b) => b.count - a.count).slice(0, top);\n        } else {\n            return facetItemsData.sort((a, b) => b.count - a.count);\n        }\n    }\n\n    private getNumberRangeItemsData(records: Record[], attributeId: string, top?: number): FacetItemData[] {\n        const facetItemsData: FacetItemData[] = [];\n        const numberOfRanges = top || 100;\n\n        // 1. sort records by attribute value, records with same attribute value following each other\n        const sortedRecords = this.searchEngine.recordService.sortRecords(records, attributeId, \"Ascending\");\n\n        // 2. get minimal and maximal attribute raw value, and range size\n        const minValue = sortedRecords[0].valueMap[attributeId].rawValue as number;\n        const maxValue = sortedRecords[sortedRecords.length - 1].valueMap[attributeId].rawValue as number;\n        const min10Power = format10Power(minValue, false);\n        const range = format10Power((maxValue - minValue) / numberOfRanges, true);\n\n        // 3. calculate range items data\n        for (let i = 0; i < numberOfRanges; i++) {\n            const startValue = min10Power + i * range;\n            const endValue = startValue + range; // last item end Value is max attribute value\n\n            const rds = records.filter((record) => {\n                const value = record.valueMap[attributeId].rawValue as number;\n                return value >= startValue && value < endValue;\n            });\n\n            if (rds.length > 0) {\n                facetItemsData.push({\n                    lowStringValue: startValue.toFixed(2).toString(),\n                    lowRawValue: startValue,\n                    highStringValue: endValue.toFixed(2).toString(),\n                    highRawValue: endValue,\n                    count: rds.length,\n                });\n            }\n        }\n\n        // 4. limit to top, don't sort by count\n        if (Number.isInteger(top) && top > 0) {\n            return facetItemsData.slice(0, top);\n        } else {\n            return facetItemsData;\n        }\n    }\n\n    private getDateRangeItemsData(records: Record[], attributeId: string, top?: number): FacetItemData[] {\n        const facetItemsData: FacetItemData[] = [];\n\n        // 1. define possible date ranges\n        const now = new Date();\n        const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);\n        const futureStart = new Date(todayEnd.getTime() + 1);\n        const last7DaysStart = new Date(\n            new Date(todayEnd.getTime() - 6 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0)\n        );\n        const last30DaysStart = new Date(\n            new Date(todayEnd.getTime() - 29 * 24 * 60 * 60 * 1000).setHours(0, 0, 0, 0)\n        );\n        const thisYearStart = new Date(todayEnd.getFullYear(), 0, 1, 0, 0, 0, 0);\n        const thisYearEnd = new Date(new Date(todayEnd.getFullYear() + 1, 0, 1).getTime() - 1);\n        const lastYearStart = new Date(todayEnd.getFullYear() - 1, 0, 1, 0, 0, 0, 0);\n        const lastYearEnd = new Date(new Date(todayEnd.getFullYear(), 0, 1).getTime() - 1);\n        const last3YearStart = new Date(todayEnd.getFullYear() - 3, 0, 1, 0, 0, 0, 0);\n        const last5YearStart = new Date(todayEnd.getFullYear() - 5, 0, 1, 0, 0, 0, 0);\n        const ranges = [\n            { label: \"Future\", startValue: futureStart, endValue: new Date(8.64e15) }, // futurist date object\n            { label: \"Last 7 Days\", startValue: last7DaysStart, endValue: todayEnd },\n            { label: \"Last 30 Days\", startValue: last30DaysStart, endValue: todayEnd },\n            { label: \"This Year\", startValue: thisYearStart, endValue: thisYearEnd },\n            { label: \"Last Year\", startValue: lastYearStart, endValue: lastYearEnd },\n            { label: \"Last 3 Years\", startValue: last3YearStart, endValue: todayEnd },\n            { label: \"Last 5 Years\", startValue: last5YearStart, endValue: todayEnd },\n            {\n                label: \"Older Than 5 Years\",\n                startValue: new Date(-8640000000000000), // earliest date object\n                endValue: new Date(last5YearStart.getTime() - 1),\n            },\n        ];\n\n        // 2. calculate range items data\n        for (let i = 0; i < ranges.length; i++) {\n            const startValue = ranges[i].startValue;\n            const endValue = ranges[i].endValue;\n\n            // const rds = sortedRecords.filter((record) => {\n            const rds = records.filter((record) => {\n                const value = record.valueMap[attributeId].rawValue as Date;\n                if (startValue != undefined) {\n                    return value >= startValue && value <= endValue;\n                } else {\n                    return value <= endValue;\n                }\n            });\n\n            if (rds.length > 0) {\n                facetItemsData.push({\n                    lowStringValue: ranges[i].label,\n                    lowRawValue: startValue,\n                    highStringValue: undefined,\n                    highRawValue: endValue,\n                    count: rds.length,\n                });\n            }\n        }\n\n        // 3. limit to top, Don't sort by count\n        if (Number.isInteger(top) && top > 0) {\n            return facetItemsData.slice(0, top);\n        } else {\n            return facetItemsData;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}