{"version":3,"file":"suggestionTermSplitter.js","names":["sap","ui","define","____sina_SuggestionType","SuggestionType","isSuggestionWithFilter","suggestion","type","SearchTerm","SearchTermAndDataSource","SuggestionTermSplitter","split","term","splitPos","lastIndexOf","searchTerm","suggestionTerm","slice","replace","length","concatenate","splittedSuggestionTerm","suggestions","searchTerms","splittedSuggestionTerms","k","trim","push","regExp","RegExp","this","escapeRegExp","i","notFoundSearchTerms","j","test","filter","prefixBold","prefix","join","l","prefixBoldStr","label","childSuggestions","str","suggestionTermSplitter","splittedTerm","__exports","__esModule"],"sources":["suggestionTermSplitter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSourceSuggestion } from \"../../sina/DataSourceSuggestion\";\nimport { SearchTermAndDataSourceSuggestion } from \"../../sina/SearchTermAndDataSourceSuggestion\";\nimport { SearchTermSuggestion } from \"../../sina/SearchTermSuggestion\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\n\ninterface ISplittedSuggestionTerm {\n    searchTerm: string;\n    suggestionTerm: string;\n}\n\nfunction isSuggestionWithFilter(\n    suggestion: unknown\n): suggestion is SearchTermSuggestion | SearchTermAndDataSourceSuggestion {\n    return (\n        typeof suggestion === \"object\" &&\n        suggestion !== null &&\n        \"type\" in suggestion &&\n        (suggestion.type === SuggestionType.SearchTerm ||\n            suggestion.type === SuggestionType.SearchTermAndDataSource)\n    );\n}\n\nclass SuggestionTermSplitter {\n    split(term: string): { searchTerm: string | null; suggestionTerm: string } {\n        // check for last blank\n        const splitPos = term.lastIndexOf(\" \");\n        if (splitPos < 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split search term\n        let searchTerm = term.slice(0, splitPos);\n        searchTerm = searchTerm.replace(/\\s+$/, \"\"); // right trim\n        if (searchTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split suggestion term\n        let suggestionTerm = term.slice(splitPos);\n        suggestionTerm = suggestionTerm.replace(/^\\s+/, \"\"); // left trim\n        if (suggestionTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // return result\n        return {\n            searchTerm: searchTerm,\n            suggestionTerm: suggestionTerm,\n        };\n    }\n\n    concatenate(\n        splittedSuggestionTerm: ISplittedSuggestionTerm,\n        suggestions: (SearchTermSuggestion | SearchTermAndDataSourceSuggestion | DataSourceSuggestion)[]\n    ) {\n        // no search term -> nothing to do\n        if (!splittedSuggestionTerm.searchTerm) {\n            return;\n        }\n\n        // split search terms\n        let term: string;\n        const searchTerms: Array<{ term: string; regExp: RegExp }> = [];\n        const splittedSuggestionTerms = splittedSuggestionTerm.searchTerm.split(\" \");\n        for (let k = 0; k < splittedSuggestionTerms.length; k++) {\n            term = splittedSuggestionTerms[k];\n            term = term.trim();\n            searchTerms.push({\n                term: term,\n                regExp: new RegExp(this.escapeRegExp(term), \"i\"),\n            });\n        }\n\n        // process all suggestions\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n\n            if (!isSuggestionWithFilter(suggestion)) {\n                continue;\n            }\n\n            // identify all search terms not included in suggestion\n            const notFoundSearchTerms = [];\n            for (let j = 0; j < searchTerms.length; ++j) {\n                const searchTerm = searchTerms[j];\n                if (!searchTerm.regExp.test(suggestion.filter.searchTerm)) {\n                    notFoundSearchTerms.push(searchTerm.term);\n                }\n            }\n\n            // prefix for suggestion = all search terms not included in suggestions\n            const prefixBold = [];\n            const prefix = notFoundSearchTerms.join(\" \");\n            for (let l = 0; l < notFoundSearchTerms.length; l++) {\n                term = notFoundSearchTerms[l];\n                /* eslint no-loop-func:0 */\n                prefixBold.push(\"<b>\" + term + \"</b>\");\n            }\n            const prefixBoldStr = prefixBold.join(\" \");\n            suggestion.label = prefixBoldStr + \" \" + suggestion.label;\n            suggestion.filter.searchTerm = suggestion.searchTerm =\n                prefix + \" \" + suggestion.filter.searchTerm;\n\n            // process children\n            if (suggestion.childSuggestions && suggestion.childSuggestions.length > 0) {\n                this.concatenate(\n                    splittedSuggestionTerm,\n                    suggestion.childSuggestions as (\n                        | SearchTermSuggestion\n                        | SearchTermAndDataSourceSuggestion\n                        | DataSourceSuggestion\n                    )[]\n                );\n            }\n        }\n    }\n\n    escapeRegExp(str: string): string {\n        /* eslint no-useless-escape:0 */\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n}\n\n/**\n * Splits a suggestion term into\n * prefix = which is used as search term filter\n * suffix = which is actually used as thes suggestion term\n * split position is last space\n * reason:\n * document contains: \"Sally Spring\"\n * search input box: sally  s-> suggestion sally spring\n *                   spring s-> suggestion spring sally\n * last suggestion would not happen when just using\n * \"spring s \" as suggestion term\n * @param term suggestion term to split\n * @returns a splitted suggestion term which contains the search term and the suggestion term\n */\nexport function split(term: string) {\n    const suggestionTermSplitter = new SuggestionTermSplitter();\n    return suggestionTermSplitter.split(term);\n}\n\nexport function concatenate(\n    splittedTerm: ISplittedSuggestionTerm,\n    suggestions: (SearchTermSuggestion | SearchTermAndDataSourceSuggestion | DataSourceSuggestion)[]\n) {\n    const suggestionTermSplitter = new SuggestionTermSplitter();\n    return suggestionTermSplitter.concatenate(splittedTerm, suggestions);\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,uCAAAC,GAAA,mBAQSC,EAAcD,EAAA,kBAOvB,SAASE,EACLC,GAEA,cACWA,IAAe,UACtBA,IAAe,MACf,SAAUA,IACTA,EAAWC,OAASH,EAAeI,YAChCF,EAAWC,OAASH,EAAeK,wBAE/C,CAEA,MAAMC,EACFC,MAAMC,GAEF,MAAMC,EAAWD,EAAKE,YAAY,KAClC,GAAID,EAAW,EAAG,CACd,MAAO,CACHE,WAAY,KACZC,eAAgBJ,EAExB,CAGA,IAAIG,EAAaH,EAAKK,MAAM,EAAGJ,GAC/BE,EAAaA,EAAWG,QAAQ,OAAQ,IACxC,GAAIH,EAAWI,SAAW,EAAG,CACzB,MAAO,CACHJ,WAAY,KACZC,eAAgBJ,EAExB,CAGA,IAAII,EAAiBJ,EAAKK,MAAMJ,GAChCG,EAAiBA,EAAeE,QAAQ,OAAQ,IAChD,GAAIF,EAAeG,SAAW,EAAG,CAC7B,MAAO,CACHJ,WAAY,KACZC,eAAgBJ,EAExB,CAGA,MAAO,CACHG,WAAYA,EACZC,eAAgBA,EAExB,CAEAI,YACIC,EACAC,GAGA,IAAKD,EAAuBN,WAAY,CACpC,MACJ,CAGA,IAAIH,EACJ,MAAMW,EAAuD,GAC7D,MAAMC,EAA0BH,EAAuBN,WAAWJ,MAAM,KACxE,IAAK,IAAIc,EAAI,EAAGA,EAAID,EAAwBL,OAAQM,IAAK,CACrDb,EAAOY,EAAwBC,GAC/Bb,EAAOA,EAAKc,OACZH,EAAYI,KAAK,CACbf,KAAMA,EACNgB,OAAQ,IAAIC,OAAOC,KAAKC,aAAanB,GAAO,MAEpD,CAGA,IAAK,IAAIoB,EAAI,EAAGA,EAAIV,EAAYH,SAAUa,EAAG,CACzC,MAAM1B,EAAagB,EAAYU,GAE/B,IAAK3B,EAAuBC,GAAa,CACrC,QACJ,CAGA,MAAM2B,EAAsB,GAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAYJ,SAAUe,EAAG,CACzC,MAAMnB,EAAaQ,EAAYW,GAC/B,IAAKnB,EAAWa,OAAOO,KAAK7B,EAAW8B,OAAOrB,YAAa,CACvDkB,EAAoBN,KAAKZ,EAAWH,KACxC,CACJ,CAGA,MAAMyB,EAAa,GACnB,MAAMC,EAASL,EAAoBM,KAAK,KACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAoBd,OAAQqB,IAAK,CACjD5B,EAAOqB,EAAoBO,GAE3BH,EAAWV,KAAK,MAAQf,EAAO,OACnC,CACA,MAAM6B,EAAgBJ,EAAWE,KAAK,KACtCjC,EAAWoC,MAAQD,EAAgB,IAAMnC,EAAWoC,MACpDpC,EAAW8B,OAAOrB,WAAaT,EAAWS,WACtCuB,EAAS,IAAMhC,EAAW8B,OAAOrB,WAGrC,GAAIT,EAAWqC,kBAAoBrC,EAAWqC,iBAAiBxB,OAAS,EAAG,CACvEW,KAAKV,YACDC,EACAf,EAAWqC,iBAMnB,CACJ,CACJ,CAEAZ,aAAaa,GAET,OAAOA,EAAI1B,QAAQ,sCAAuC,OAC9D,EAiBG,SAASP,EAAMC,GAClB,MAAMiC,EAAyB,IAAInC,EACnC,OAAOmC,EAAuBlC,MAAMC,EACxC,CAEO,SAASQ,EACZ0B,EACAxB,GAEA,MAAMuB,EAAyB,IAAInC,EACnC,OAAOmC,EAAuBzB,YAAY0B,EAAcxB,EAC5D,CAAC,IAAAyB,EAAA,CAAAC,WAAA,MAAAD,EAAApC,QAAAoC,EAAA3B,cAAA,OAAA2B,CAAA","ignoreList":[]}