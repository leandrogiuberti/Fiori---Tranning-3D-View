{"version":3,"file":"Provider-dbg.js","names":["sap","ui","define","core","___MetadataParserXML","___MetadataParserJson","___ItemParser","___FacetParser","___suggestionParser","___eshObjects_src_index","conditionSerializer","____core_Log","____sina_SearchQuery","____sina_SortOrder","___AbstractProvider","____sina_SuggestionType","____sina_ComplexCondition","____core_errors","___HierarchyParser","___HierarchyNodePathParser","____sina_SuggestionCalculationMode","____sina_DataSource","___hana_odata_ajax","___tools_util","___nlqParser","MetadataParserXML","MetadataParserJson","ItemParser","FacetParser","SuggestionParser","getEshSearchQuery","Comparison","Phrase","Term","EshObjComparisonOperator","ESOrderType","HierarchyFacet","Log","SearchQuery","SortOrder","AbstractProvider","SuggestionType","ComplexCondition","ESHNoBusinessObjectDatasourceError","ESHNotActiveError","InternalSinaError","HierarchyParser","HierarchyNodePathParser","SuggestionCalculationMode","DataSource","createAjaxClient","handleError","parseNlqInfo","PresentationUsage","Provider","id","ajaxClient","requestPrefix","metadataParser","itemParser","facetParser","suggestionParser","odataVersion","responseAttributes","facetAttributes","dataSourceConfigurations","metaDataSuffix","hierarchyNodePathParser","getTextFromResourceBundle","initAsync","configuration","url","sina","length","querySuffix","push","filterCondition","getLanguage","undefined","requestFormatters","ajaxRequestFormatters","responseFormatters","ajaxResponseFormatters","metaDataJsonType","serverInfo","loadServerInfo","supports","loadBusinessObjectDataSources","getBusinessObjectDataSources","Promise","reject","capabilities","_createCapabilities","fuzzy","nlq","service","capability","supportedServices","services","supportedService","supportedCapabilities","Capabilities","j","checkCapability","simulatedHanaServerinfo","rawServerInfo","Services","Service","Capability","Suggestions","suggestionTypes","Search","_prepareMetadataRequest","requestObj","metadataCall","resourcePath","getPrefix","metadataObjects","entitySets","assembleUrl","requestUrl","response","fireRequest","allMetaDataMap","parseResponse","i","dataSourcesList","dataSource","fillMetadataBuffer","businessObjectMap","assembleOrderBy","query","result","Array","isArray","sortOrder","sortKey","order","Descending","Ascending","key","assembleGroupBy","groupBy","attributeName","properties","aggregateCountAlias","executeSearchQuery","oUrlData","_prepareSearchObjectSuggestionRequest","fireSearchQuery","rootCondition","filter","clone","serialize","items","searchTerms","searchTerm","addFilterConditionToFilter","top","skip","searchOptions","$top","$skip","whyfound","$count","$orderby","freeStyleText","searchQueryFilter","getAllDataSource","scope","useValueHierarchy","hierarchyAttribute","helperHierarchyDataource","getHierarchyDataSource","valuehierarchy","$select","calculateFacets","facets","facetlimit","facetTop","groupby","queryData","doNotEsacpeFreeStyleText","enableQueryLanguage","oInputData","getJson","data","responseData","parseSearchResponse","parseDynamicMetadata","hierarchyNodePaths","parse","statistics","ConnectorStatistics","getDataSource","constructedDataSourceFacets","Dimensions","PropertyName","isConnectorFacet","Items","OdataID","_Count","nlqResult","_createSearchResultSet","title","totalCount","_fireObjectSuggestionsQuery","searchItems","objectSuggestions","parseObjectSuggestions","_createSuggestionResultSet","_prepareChartQueryRequest","resultDeletion","isValueHelpMode","deleted","valueString","value","match","property","attribute","operator","term","EqualCaseInsensitive","phrase","chartOptions","facetScope","dimension","metadata","getAttributeMetadata","type","executeChartQuery","log","removeAttributeConditions","metadataLabel","label","_createChartResultSet","facetTotalCount","executeHierarchyQuery","hierarchyParser","attributeId","facetroot","facetColumn","rootIds","nodeId","levels","attributeMetadata","facet","find","getProperty","parseHierarchyFacet","executeSuggestionQuery","regularSuggestionsResultSet","objectSuggestionsResultSet","all","executeRegularSuggestionQuery","executeObjectSuggestionQuery","resultSet","addErrors","getErrors","isObjectSuggestionQuery","types","indexOf","Object","DataSourceType","BusinessObject","resolve","calculationModes","includes","Data","SearchTerm","SearchTermAI","_fireSuggestionQuery","_prepareSuggestionQueryRequest","suggestionOptions","suggestTerm","message","workaroundForEmptySuggestionTerm","suggestions","dataSourceConfig","dsConfig","convertFilterConditionToExpression","prefix","filterConditionExpression","getDebugInfo","extendedSearchOptions","dummyFreeStyleText","workaroundSuggestTerm","index","slice","replace","encodeURIComponent","__exports","__esModule"],"sources":["Provider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../../core/core\";\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport { MetadataParser } from \"./MetadataParser\";\nimport { MetadataParserXML } from \"./MetadataParserXML\";\nimport { MetadataParserJson } from \"./MetadataParserJson\";\nimport { ItemParser } from \"./ItemParser\";\nimport { FacetParser } from \"./FacetParser\";\nimport { SuggestionParser } from \"./suggestionParser\";\nimport {\n    IESSearchOptions,\n    getEshSearchQuery,\n    Expression,\n    Comparison,\n    Phrase,\n    Term,\n    SearchQueryComparisonOperator as EshObjComparisonOperator,\n    IESOrdering,\n    ESOrderType,\n    IGroupBy,\n    HierarchyFacet,\n} from \"./eshObjects/src/index\";\nimport * as conditionSerializer from \"./conditionSerializerEshObj\";\nimport { Log } from \"../../core/Log\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { SortOrder } from \"../../sina/SortOrder\";\nimport { AbstractProviderConfiguration, AbstractProvider } from \"../AbstractProvider\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport { SearchResultSet } from \"../../sina/SearchResultSet\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { Query } from \"../../sina/Query\";\nimport { ComplexCondition, RemoveConditionResult } from \"../../sina/ComplexCondition\";\nimport { ESHNoBusinessObjectDatasourceError, ESHNotActiveError, InternalSinaError } from \"../../core/errors\";\nimport { Capabilities } from \"../../sina/Capabilities\";\nimport { HierarchyQuery } from \"../../sina/HierarchyQuery\";\nimport { HierarchyResultSet } from \"../../sina/HierarchyResultSet\";\nimport { HierarchyParser } from \"./HierarchyParser\";\nimport { HierarchyNodePathParser } from \"./HierarchyNodePathParser\";\nimport { SuggestionCalculationMode } from \"../../sina/SuggestionCalculationMode\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { DataSourceResultSet } from \"../../sina/DataSourceResultSet\";\nimport { SearchTermSuggestion } from \"../../sina/SearchTermSuggestion\";\nimport { DataSourceConfiguration } from \"../../sina/DataSourceConfiguration\";\nimport { ODataValue } from \"../../sina/odatatypes\";\nimport { createAjaxClient } from \"../hana_odata/ajax\";\nimport { HierarchyDefinition } from \"./HierarchyMetadataParser\";\nimport { handleError } from \"../tools/util\";\nimport { parseNlqInfo } from \"./nlqParser\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { Condition } from \"../../sina/Condition\";\n\ninterface ExtendedSearchOptions {\n    nlq?: boolean;\n    workaroundForEmptySuggestionTerm?: boolean;\n    doNotEsacpeFreeStyleText?: boolean;\n}\n\ninterface HANAODataSearchQueryData {\n    url: string;\n    query: SearchQuery | SuggestionQuery;\n}\n\nexport interface ServerInfo {\n    rawServerInfo: {\n        Services: Array<{\n            Service: string;\n            Capabilities: Array<{\n                Capability: string;\n            }>;\n        }>;\n    };\n    services: {\n        Suggestions: {\n            suggestionTypes: Array<string>;\n        };\n        Search: {\n            capabilities: Array<string>;\n        };\n    };\n}\n\nexport interface ProviderConfiguration extends AbstractProviderConfiguration {\n    getTextFromResourceBundle: (url: string, text: string) => Promise<string>; // needed for hana odata annotation \"ENTERPRISESEARCHHANA.UIRESOURCE.LABEL.KEY\"\n    odataVersion: string;\n    responseAttributes?: Array<string>;\n    facetAttributes?: Array<string>;\n    querySuffix?: ComplexCondition; // ToDo: Remove as soon as all stakeholders have switched to 'dataSourceConfigurations'\n    dataSourceConfigurations?: Array<DataSourceConfiguration>;\n    metaDataSuffix: string;\n    metaDataJsonType: boolean;\n}\n\nexport enum PresentationUsage {\n    \"TITLE\" = \"TITLE\",\n    \"SUMMARY\" = \"SUMMARY\",\n    \"DETAIL\" = \"DETAIL\",\n    \"IMAGE\" = \"IMAGE\",\n    \"THUMBNAIL\" = \"THUMBNAIL\",\n    \"HIDDEN\" = \"HIDDEN\",\n}\n\nexport interface HANAOdataMetadataResponse {\n    Id: string;\n    Name: string;\n    Key: boolean;\n    Sortable: boolean;\n    SemanticObjectTypeId: string;\n    UIAreas: object;\n    Displayed: boolean;\n    DisplayOrder: number;\n    displayOrder: number;\n    labelRaw: string;\n    label: string;\n    isKey: boolean;\n    isSortable: boolean;\n    supportsTextSearch: boolean;\n    presentationUsage: PresentationUsage[];\n    type: string; // TODO: define type\n    TypeLength: number;\n    annotationsAttr: any; //TODO: define semantics type\n    hierarchyDefinition: HierarchyDefinition;\n}\n\nexport interface HANAOdataSearchResponseDataSourceNlqInfo {\n    Name: string;\n    ai: boolean;\n    filter: {\n        natural_language: string;\n        query_language: string;\n    };\n}\n\nexport interface HANAOdataSearchResponseResult {\n    \"@com.sap.vocabularies.Search.v1.ParentHierarchies\"?: Array<HANAOdataParentHierarchies>;\n    \"@com.sap.vocabularies.Search.v1.SearchStatistics\"?: HANAOdataSearchResponseResultStatistics;\n    \"@com.sap.vocabularies.Search.v1.Facets\"?: Array<HANAOdataSearchResponseResultFacetAllInfo>;\n    \"@com.sap.vocabularies.Search.v1.Nlq\"?: Array<HANAOdataSearchResponseDataSourceNlqInfo>;\n    value?: Array<HANAOdataSearchResponseResultItem>;\n    error?: HANAOdataSearchResponseResultError;\n    \"@odata.count\"?: number;\n}\nexport interface HANAOdataSuggestionResponseResult {\n    \"@com.sap.vocabularies.Search.v1.SearchStatistics\"?: HANAOdataSearchResponseResultStatistics;\n    \"@com.sap.vocabularies.Search.v1.Facets\"?: Array<HANAOdataSearchResponseResultFacetAllInfo>;\n    value?: Array<HANAOdataSuggestionResponseResultItem>;\n    error?: HANAOdataSearchResponseResultError;\n    \"@odata.context\"?: string;\n}\nexport interface HANAOdataSearchResponseResultError {\n    message?: string;\n}\nexport interface HANAOdataSearchResponseResultStatistics {\n    ConnectorStatistics?: Array<HANAOdataSearchResponseResultConnectorStatistic>;\n    StatusCode: string;\n}\nexport interface HANAOdataSearchResponseResultConnectorStatistic {\n    \"@com.sap.vocabularies.Search.v1.CPUTime\": string;\n    \"@com.sap.vocabularies.Search.v1.SearchTime\": string;\n    Name?: string;\n    OdataID?: string;\n    Schema?: string;\n    StatusCode: string;\n}\nexport interface HANAOdataSearchResponseResultItem {\n    \"@com.sap.vocabularies.Search.v1.ParentHierarchies\"?: Array<HANAOdataParentHierarchies>;\n    \"@com.sap.vocabularies.Search.v1.WhyFound\"?: Record<string, ODataValue>;\n    \"@com.sap.vocabularies.Search.v1.Ranking\"?: string;\n    \"@odata.context\"?: string;\n    [key: string]: ODataValue;\n}\nexport interface HANAOdataSuggestionResponseResultItem {\n    highlighted?: string;\n    rank?: string;\n    scope?: string;\n    term?: string;\n}\nexport interface HANAOdataSearchResponseResultFacetAllInfo {\n    \"@com.sap.vocabularies.Common.v1.Label\"?: string;\n    \"@com.sap.vocabularies.Search.v1.Facet\": HANAOdataSearchResponseResultFacet; // TODO: naming HANAOdataSearchResponseResultFacetMetaData?\n    \"@odata.context\"?: string;\n    Items: Array<HANAOdataSearchResponseResultFacetItem>;\n}\nexport interface HANAOdataSearchResponseResultFacet {\n    Dimensions: Array<HANAOdataSearchResponseResultFacetMetaDataProperty>;\n    URI?: string;\n}\nexport interface HANAOdataSearchResponseResultFacetItem {\n    _Count: number;\n    scope?: string;\n}\nexport interface HANAOdataSearchResponseResultFacetMetaDataProperty {\n    FilterProperty?: string;\n    PropertyName?: string;\n    PropertyType?: string;\n    isConnectorFacet?: boolean;\n}\n\nexport interface HANAOdataParentHierarchies {\n    scope: string;\n    hierarchy: Array<Record<string, string>>;\n}\n\nexport class Provider extends AbstractProvider {\n    readonly id = \"hana_odata\";\n    declare serverInfo: ServerInfo;\n    ajaxClient: Client;\n    requestPrefix: string;\n    metadataParser: MetadataParser;\n    itemParser: ItemParser;\n    facetParser: FacetParser;\n    suggestionParser: SuggestionParser;\n    odataVersion: string;\n    responseAttributes?: Array<string>;\n    facetAttributes?: Array<string>;\n    dataSourceConfigurations?: Array<DataSourceConfiguration>;\n    metaDataSuffix: string;\n    hierarchyNodePathParser: HierarchyNodePathParser;\n    getTextFromResourceBundle: (url: string, text: string) => Promise<string>;\n\n    async initAsync(configuration: ProviderConfiguration): Promise<{\n        capabilities: Capabilities;\n    }> {\n        this.getTextFromResourceBundle = configuration.getTextFromResourceBundle;\n        this.requestPrefix = configuration.url;\n        this.odataVersion = configuration.odataVersion;\n        this.responseAttributes = configuration?.responseAttributes;\n        this.facetAttributes = configuration?.facetAttributes;\n        this.sina = configuration.sina;\n        this.dataSourceConfigurations = configuration?.dataSourceConfigurations || [];\n        if (this.dataSourceConfigurations.length === 0 && configuration.querySuffix) {\n            // ToDo: Remove as soon as DSP has been migrated (querySuffix->dataSourceConfigurations)\n            this.dataSourceConfigurations.push({\n                id: \"SEARCH_DESIGN\",\n                filterCondition: configuration.querySuffix,\n            });\n        }\n\n        this.metaDataSuffix = configuration.metaDataSuffix ?? \"\";\n\n        this.ajaxClient =\n            configuration.ajaxClient ??\n            createAjaxClient({\n                getLanguage:\n                    typeof configuration.getLanguage === \"function\" ? configuration.getLanguage : undefined,\n                requestFormatters: configuration.ajaxRequestFormatters,\n                responseFormatters: configuration.ajaxResponseFormatters,\n            });\n\n        const metaDataJsonType = configuration.metaDataJsonType;\n        if (metaDataJsonType) {\n            this.metadataParser = new MetadataParserJson(this);\n        } else {\n            this.metadataParser = new MetadataParserXML(this);\n        }\n\n        this.itemParser = new ItemParser(this);\n        this.facetParser = new FacetParser(this);\n        this.suggestionParser = new SuggestionParser(this);\n        this.hierarchyNodePathParser = new HierarchyNodePathParser(this.sina);\n\n        this.serverInfo = await this.loadServerInfo();\n        if (!this.supports(\"Search\")) {\n            throw new ESHNotActiveError();\n        }\n        await this.loadBusinessObjectDataSources();\n        if (this.sina.getBusinessObjectDataSources().length === 0) {\n            return Promise.reject(new ESHNoBusinessObjectDatasourceError());\n        }\n        return {\n            capabilities: this.sina._createCapabilities({\n                fuzzy: false,\n                nlq: true, // there is not server info call at the moment so we assume always true configuration needs to be performed by configuration flag aiNlq\n            }),\n        };\n    }\n\n    supports(service: string, capability?: undefined): boolean {\n        const supportedServices = this.serverInfo.services;\n        for (const supportedService in supportedServices) {\n            if (supportedService === service) {\n                if (!capability) {\n                    return true;\n                }\n                const supportedCapabilities = supportedServices[supportedService].Capabilities;\n                for (let j = 0; j < supportedCapabilities.length; ++j) {\n                    const checkCapability = supportedCapabilities[j];\n                    if (checkCapability === capability) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    async loadServerInfo(): Promise<ServerInfo> {\n        const simulatedHanaServerinfo = {\n            rawServerInfo: {\n                Services: [\n                    {\n                        Service: \"Search\",\n                        Capabilities: [\n                            {\n                                Capability: \"SemanticObjectType\",\n                            },\n                        ],\n                    },\n                    {\n                        Service: \"Suggestions2\",\n                        Capabilities: [\n                            {\n                                Capability: \"ScopeTypes\",\n                            },\n                        ],\n                    },\n                ],\n            },\n            services: {\n                Suggestions: {\n                    suggestionTypes: [\"objectdata\"],\n                },\n                Search: {\n                    capabilities: [\"SemanticObjectType\"],\n                },\n            },\n        };\n        return simulatedHanaServerinfo;\n    }\n\n    _prepareMetadataRequest(): string {\n        const requestObj: IESSearchOptions = {\n            metadataCall: true,\n            resourcePath: this.getPrefix() + \"/$metadata\",\n        };\n\n        if (typeof this.metaDataSuffix === \"string\" && this.metaDataSuffix.length > 0) {\n            // TODO: for the temp compatibility of import wizard call, metaDataSuffix shall only contains entityset\n            /* if (this.metaDataSuffix.startsWith(\"/EntitySets\")) {\n                this.metaDataSuffix = this.metaDataSuffix.replace(/\\/EntitySets\\(/, \"\");\n                this.metaDataSuffix = this.metaDataSuffix.substring(0, this.metaDataSuffix.length - 1);\n            } */\n            requestObj.metadataObjects = {\n                entitySets: this.metaDataSuffix,\n            };\n        }\n        return this.assembleUrl(requestObj);\n    }\n\n    async loadBusinessObjectDataSources(): Promise<void> {\n        const requestUrl = this._prepareMetadataRequest();\n        const response = await this.metadataParser.fireRequest(this.ajaxClient, requestUrl);\n        const allMetaDataMap = await this.metadataParser.parseResponse(response);\n\n        for (let i = 0; i < allMetaDataMap.dataSourcesList.length; ++i) {\n            const dataSource = allMetaDataMap.dataSourcesList[i];\n            this.metadataParser.fillMetadataBuffer(\n                dataSource,\n                allMetaDataMap.businessObjectMap[dataSource.id]\n            );\n        }\n    }\n\n    assembleOrderBy(query: Query): Array<IESOrdering> {\n        const result = [];\n        if (Array.isArray(query.sortOrder)) {\n            for (let i = 0; i < query.sortOrder.length; ++i) {\n                const sortKey = query.sortOrder[i];\n                const sortOrder =\n                    sortKey.order === SortOrder.Descending ? ESOrderType.Descending : ESOrderType.Ascending;\n                result.push({\n                    key: sortKey.id,\n                    order: sortOrder,\n                });\n            }\n        }\n        return result;\n    }\n\n    assembleGroupBy(query: SearchQuery): IGroupBy {\n        const result: IGroupBy = null;\n        if (query.groupBy && query.groupBy.attributeName && query.groupBy.attributeName.length > 0) {\n            result.properties = query.groupBy.attributeName;\n\n            if (query.groupBy.aggregateCountAlias && query.groupBy.aggregateCountAlias !== \"\") {\n                result.aggregateCountAlias = query.groupBy.aggregateCountAlias;\n            }\n        }\n        return result;\n    }\n\n    executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        const oUrlData = this._prepareSearchObjectSuggestionRequest(query);\n        return this.fireSearchQuery(oUrlData);\n    }\n\n    _prepareSearchObjectSuggestionRequest(query: SearchQuery | SuggestionQuery): HANAODataSearchQueryData {\n        // assemble request object\n        const rootCondition = query.filter.rootCondition.clone();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        const searchTerms = query.filter.searchTerm || \"*\";\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        const dataSource = query.filter.dataSource;\n        const top = query.top || 10;\n        const skip = query.skip || 0;\n\n        const sortOrder: Array<IESOrdering> = this.assembleOrderBy(query);\n\n        const searchOptions: IESSearchOptions = {\n            // query: searchTerms,\n            resourcePath: this.getPrefix() + \"/$all\",\n            $top: top,\n            $skip: skip,\n            whyfound: true,\n            $count: true,\n            $orderby: sortOrder,\n            freeStyleText: searchTerms,\n            searchQueryFilter: filter,\n        };\n        if (dataSource !== this.sina.getAllDataSource()) {\n            searchOptions.scope = dataSource.id;\n        }\n        // The second condition is to exclude hierarchy facets and object suggestions which are also SearchQuery\n        if (this.sina?.configuration?.useValueHierarchy === true && top < 100) {\n            let hierarchyAttribute = dataSource.hierarchyAttribute;\n            const helperHierarchyDataource = dataSource.getHierarchyDataSource();\n            if (helperHierarchyDataource instanceof DataSource) {\n                hierarchyAttribute = helperHierarchyDataource.hierarchyAttribute;\n            }\n            if (hierarchyAttribute) {\n                searchOptions.valuehierarchy = hierarchyAttribute;\n            }\n        }\n        if (query instanceof SearchQuery) {\n            if (typeof this.responseAttributes !== \"undefined\") {\n                // an empty array is also supported. Even if there seems to be no enduser value, tests might want to check performance of a such request\n                searchOptions.$select = this.responseAttributes; // rendering currently failing, if not all properties of metadata are requested\n            }\n            if (query.calculateFacets) {\n                if (typeof this.facetAttributes !== \"undefined\") {\n                    // an empty array is also supported. Even if there seems to be no enduser value, tests might want to check performance of a such request\n                    searchOptions.facets = this.facetAttributes;\n                } else {\n                    searchOptions.facets = [\"all\"];\n                }\n                searchOptions.facetlimit = query.facetTop || 5;\n            }\n            const groupBy = this.assembleGroupBy(query);\n            if (groupBy) {\n                searchOptions.groupby = groupBy;\n                searchOptions.whyfound = false;\n            }\n        }\n\n        const queryData: HANAODataSearchQueryData = {\n            url: this.assembleUrl(searchOptions, {\n                nlq: query.nlq,\n                doNotEsacpeFreeStyleText: this.sina?.configuration?.enableQueryLanguage,\n            }),\n            query: query,\n        };\n        return queryData;\n    }\n\n    private async fireSearchQuery(oInputData: HANAODataSearchQueryData): Promise<SearchResultSet> {\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(oInputData.url))?.data as HANAOdataSearchResponseResult;\n            },\n            async (responseData: HANAOdataSearchResponseResult) => {\n                // 2) parse\n                return await this.parseSearchResponse(oInputData, responseData);\n            }\n        );\n    }\n\n    private async parseSearchResponse(\n        oInputData: HANAODataSearchQueryData,\n        response: HANAOdataSearchResponseResult\n    ): Promise<SearchResultSet> {\n        this.metadataParser.parseDynamicMetadata(response);\n        const hierarchyNodePaths = this.hierarchyNodePathParser.parse(\n            response?.[\"@com.sap.vocabularies.Search.v1.ParentHierarchies\"],\n            oInputData.query\n        );\n        const items = await this.itemParser.parse(oInputData.query as SearchQuery, response);\n        let facets: Array<DataSourceResultSet | HierarchyResultSet | ChartResultSet>;\n        const statistics = response[\"@com.sap.vocabularies.Search.v1.SearchStatistics\"]?.ConnectorStatistics;\n        if (\n            oInputData.query.getDataSource() === this.sina.getAllDataSource() &&\n            statistics &&\n            Array.isArray(statistics) &&\n            statistics.length === 1\n        ) {\n            const constructedDataSourceFacets: HANAOdataSearchResponseResult = {\n                \"@com.sap.vocabularies.Search.v1.Facets\": [\n                    {\n                        \"@com.sap.vocabularies.Search.v1.Facet\": {\n                            Dimensions: [{ PropertyName: \"scope\", isConnectorFacet: true }],\n                        },\n                        Items: [\n                            {\n                                scope: statistics[0].OdataID,\n                                _Count: response[\"@odata.count\"],\n                            },\n                        ],\n                    },\n                ],\n            };\n            facets = await this.facetParser.parse(oInputData.query, constructedDataSourceFacets);\n        } else {\n            facets = await this.facetParser.parse(oInputData.query, response);\n        }\n\n        const nlqResult = parseNlqInfo(this.sina, response[\"@com.sap.vocabularies.Search.v1.Nlq\"]);\n\n        return this.sina._createSearchResultSet({\n            title: \"Search Result List\",\n            query: oInputData.query,\n            items: items,\n            totalCount: response[\"@odata.count\"] || 0,\n            facets: facets,\n            hierarchyNodePaths: hierarchyNodePaths,\n            nlqResult: nlqResult,\n        });\n    }\n\n    private async _fireObjectSuggestionsQuery(\n        query: SuggestionQuery,\n        oInputData: HANAODataSearchQueryData\n    ): Promise<SuggestionResultSet> {\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(oInputData.url))?.data as HANAOdataSearchResponseResult;\n            },\n            async (responseData: HANAOdataSearchResponseResult) => {\n                // 2) parse\n                this.metadataParser.parseDynamicMetadata(responseData);\n                const searchItems = await this.itemParser.parse(\n                    oInputData.query as SearchQuery,\n                    responseData\n                );\n                const objectSuggestions = this.suggestionParser.parseObjectSuggestions(\n                    oInputData.query as SuggestionQuery /* cast from generic to specific struct */,\n                    searchItems\n                );\n                return this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: objectSuggestions,\n                });\n            }\n        );\n    }\n\n    _prepareChartQueryRequest(\n        query: ChartQuery,\n        rootCondition: Condition,\n        resultDeletion: RemoveConditionResult\n    ): string {\n        const searchTerms = query.filter.searchTerm;\n        const dataSource = query.filter.dataSource;\n\n        const facetTop = 15; // default value for numeric range/interval facets\n\n        // in value help mode delete current condition from root and prepare to construct the value help part of query\n        const isValueHelpMode = resultDeletion.deleted || false;\n\n        const filter = conditionSerializer.serialize(dataSource, rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        const top = query.top || 5;\n\n        // construct search part of $apply\n        if (isValueHelpMode === true) {\n            // value help mode\n            // attribute value \"*\" can only be used without EQ part\n            // this will be changed on serverside later\n            const valueString = resultDeletion.value as string;\n            if (\n                !resultDeletion.value ||\n                resultDeletion.value === \"\" ||\n                valueString.match(/^[*\\s]+$/g) !== null\n            ) {\n                resultDeletion.value = \"*\";\n                filter.items.push(\n                    new Comparison({\n                        property: resultDeletion.attribute,\n                        operator: EshObjComparisonOperator.Search,\n                        value: new Term({ term: \"*\" }),\n                    })\n                );\n            } else {\n                filter.items.push(\n                    new Comparison({\n                        property: resultDeletion.attribute,\n                        operator: EshObjComparisonOperator.EqualCaseInsensitive,\n                        value: new Phrase({\n                            phrase: resultDeletion.value + \"*\",\n                        }),\n                    })\n                );\n            }\n        }\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        const chartOptions: IESSearchOptions = {\n            resourcePath: this.getPrefix() + \"/$all\",\n            $top: 0,\n            $count: true,\n            searchQueryFilter: filter,\n            freeStyleText: searchTerms,\n        };\n\n        if (dataSource !== this.sina.getAllDataSource()) {\n            chartOptions.scope = dataSource.id;\n        }\n\n        const facetScope = [];\n        chartOptions.facetlimit = top;\n        if (query.dimension) {\n            facetScope.push(query.dimension);\n            const metadata = query.filter.dataSource.getAttributeMetadata(query.dimension);\n            if (metadata && (metadata.type === \"Double\" || metadata.type === \"Integer\") && top >= 20) {\n                // facet limit decides number of intervals/ranges of numeric data types, but has no effect on date/time ranges\n                chartOptions.facetlimit = facetTop;\n            }\n        }\n\n        // no need to use this.responseAttributes/this.facetAttributes here ($select/facets)\n\n        // just require own chart facet in case that\n        chartOptions.facets = facetScope;\n\n        // get Query Url\n        return this.assembleUrl(chartOptions, { nlq: query.nlq });\n    }\n\n    async executeChartQuery(query: ChartQuery): Promise<ChartResultSet> {\n        const log = new Log();\n        // in value help mode delete current condition from root and prepare to construct the value help part of query\n        const rootCondition = query.filter.rootCondition.clone();\n        const resultDeletion = (rootCondition as ComplexCondition).removeAttributeConditions(query.dimension);\n        const url = this._prepareChartQueryRequest(query, rootCondition, resultDeletion);\n\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(url))?.data as HANAOdataSearchResponseResult;\n            },\n            async (responseData: HANAOdataSearchResponseResult) => {\n                // 2) parse\n                const facets = await this.facetParser.parse(query, responseData);\n                if (facets.length > 0) {\n                    return facets[0];\n                }\n                let metadataLabel = \"\";\n                const metadata = query.filter.dataSource.getAttributeMetadata(\n                    query.dimension\n                ) as AttributeMetadata;\n                if (metadata && metadata.label) {\n                    metadataLabel = metadata.label;\n                }\n                return this.sina._createChartResultSet({\n                    title: metadataLabel,\n                    items: [],\n                    query: query,\n                    log: log,\n                    facetTotalCount: undefined,\n                });\n            }\n        );\n    }\n\n    async executeHierarchyQuery(query: HierarchyQuery): Promise<HierarchyResultSet> {\n        const hierarchyParser = new HierarchyParser();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, query.filter.rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        // get Query Url\n        const requestUrl = this.assembleUrl(\n            {\n                resourcePath: this.getPrefix() + \"/$all\",\n                $top: 0,\n                searchQueryFilter: filter,\n                freeStyleText: query.filter.searchTerm,\n                scope: query.filter.dataSource.id,\n                facets: [query.attributeId],\n                facetroot: [\n                    new HierarchyFacet({\n                        facetColumn: query.attributeId,\n                        rootIds: [query.nodeId],\n                        levels: 1,\n                    }),\n                ],\n                // no need to use this.responseAttributes/this.facetAttributes here ($select/facets)\n            },\n            { nlq: query.nlq }\n        );\n\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(requestUrl))?.data;\n            },\n            async (responseData) => {\n                // 2) parse\n                const attributeMetadata = query.filter.dataSource.getAttributeMetadata(\n                    query.attributeId\n                ) as AttributeMetadata;\n                const facets = responseData[\"@com.sap.vocabularies.Search.v1.Facets\"] || [];\n                const facet = facets.find((facet) => {\n                    const attributeId = core.getProperty(facet, [\n                        \"@com.sap.vocabularies.Search.v1.Facet\",\n                        \"Dimensions\",\n                        0,\n                        \"PropertyName\",\n                    ]);\n                    return attributeId === query.attributeId;\n                });\n                return hierarchyParser.parseHierarchyFacet(query, attributeMetadata, facet || {});\n            }\n        );\n    }\n\n    async executeSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // handle regular suggestions and object suggestion separately because\n        // object suggestions have only searchterms and no suggestionInput\n        const [regularSuggestionsResultSet, objectSuggestionsResultSet] = await Promise.all([\n            this.executeRegularSuggestionQuery(query),\n            this.executeObjectSuggestionQuery(query),\n        ]);\n        const resultSet: SuggestionResultSet = this.sina._createSuggestionResultSet({\n            title: \"Suggestions\",\n            query: query,\n            items: [...objectSuggestionsResultSet.items, ...regularSuggestionsResultSet.items],\n        });\n        resultSet.addErrors(regularSuggestionsResultSet.getErrors());\n        resultSet.addErrors(objectSuggestionsResultSet.getErrors());\n        return resultSet;\n    }\n\n    isObjectSuggestionQuery(query: SuggestionQuery): boolean {\n        return (\n            query.types.indexOf(SuggestionType.Object) >= 0 &&\n            query.filter.dataSource.type === query.sina.DataSourceType.BusinessObject\n        );\n    }\n\n    private async executeObjectSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // check query type\n        if (!this.isObjectSuggestionQuery(query)) {\n            return Promise.resolve(\n                this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: [],\n                })\n            );\n        }\n        const oUrlData = this._prepareSearchObjectSuggestionRequest(query);\n        return this._fireObjectSuggestionsQuery(query, oUrlData);\n    }\n\n    private executeRegularSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // HANA only supports searchterm suggestions without history\n        if (\n            query.calculationModes.includes(SuggestionCalculationMode.Data) &&\n            (query.types.includes(SuggestionType.SearchTerm) ||\n                query.types.includes(SuggestionType.SearchTermAI))\n        ) {\n            return this._fireSuggestionQuery(query);\n        }\n        return Promise.resolve(\n            this.sina._createSuggestionResultSet({\n                title: \"Suggestions\",\n                query: query,\n                items: [],\n            })\n        );\n    }\n\n    _prepareSuggestionQueryRequest(query: SuggestionQuery): string {\n        /*\n            type=scope for search connector names \n            currently only for technical names, shall be discussed\n            Do we need count?\n            $apply=filter part exactly as search query but move search terms to term parameter in getSuggestion\n        */\n\n        // split search term in query into (1) searchTerm (2) suggestionTerm\n        // const searchTerm = this._escapeSearchTerm(query.filter.searchTerm);\n        // const searchTerm = encodeURIComponent(\n        //     query.filter.searchTerm\n        // );\n        const searchTerms = query.filter.searchTerm;\n        const dataSource = query.filter.dataSource;\n        const rootCondition = query.filter.rootCondition.clone();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n        if (!Array.isArray(filter.items)) {\n            filter.items = [];\n        }\n\n        const top = query.top || 10;\n        const skip = query.skip || 0;\n\n        this.addFilterConditionToFilter(query, filter, this.dataSourceConfigurations);\n\n        /* test ai suggestions\n        if (query.types.indexOf(SuggestionType.SearchTermAI) >= 0) {\n            searchTerms = \"\";\n        }*/\n\n        const suggestionOptions: IESSearchOptions = {\n            suggestTerm: searchTerms,\n            resourcePath: this.getPrefix() + \"/$all\",\n            $top: top,\n            $skip: skip,\n            searchQueryFilter: filter,\n            // no need to use this.responseAttributes/this.facetAttributes here ($select/facets)\n        };\n\n        if (dataSource !== this.sina.getAllDataSource()) {\n            suggestionOptions.scope = dataSource.id;\n        }\n\n        let nlq = query.nlq;\n\n        // for search term ai suggestions set nlq flag\n        if (query.types.indexOf(SuggestionType.SearchTermAI) >= 0) {\n            if (query.types.length > 1) {\n                throw new InternalSinaError({\n                    message: \"inconsistent suggestion query: ai suggestion mixed with other suggestion\",\n                });\n            }\n            nlq = true;\n        }\n\n        return this.assembleUrl(suggestionOptions, {\n            nlq: nlq,\n            workaroundForEmptySuggestionTerm: true,\n        });\n    }\n\n    private async _fireSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        const url = this._prepareSuggestionQueryRequest(query);\n        return await handleError(\n            async () => {\n                // 1) fetch\n                return (await this.ajaxClient.getJson(url))?.data as unknown as {\n                    value: Array<HANAOdataSuggestionResponseResult>;\n                };\n            },\n            async (responseData: { value: Array<HANAOdataSuggestionResponseResult> }) => {\n                // 2) parse\n                let suggestions = [];\n                if (responseData.value) {\n                    suggestions = this.suggestionParser.parse(\n                        query,\n                        responseData.value\n                    ) as Array<SearchTermSuggestion>;\n                }\n                return this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: suggestions,\n                });\n            }\n        );\n    }\n\n    private addFilterConditionToFilter(query, filter, dataSourceConfigurations) {\n        if (dataSourceConfigurations) {\n            const dataSourceConfig = dataSourceConfigurations.filter(\n                (dsConfig) => dsConfig.id === query.filter.dataSource.id\n            )[0];\n            if (dataSourceConfig?.filterCondition) {\n                filter.items.push(this.convertFilterConditionToExpression(dataSourceConfig.filterCondition));\n            }\n        }\n    }\n\n    // getFilterValueFromConditionTree(\n    //     dimension: any,\n    //     conditionTree: {\n    //         ConditionAttribute: any;\n    //         ConditionValue: any;\n    //         SubFilters: string | any[];\n    //     }\n    // ) {\n    //     if (\n    //         conditionTree.ConditionAttribute &&\n    //         conditionTree.ConditionAttribute === dimension\n    //     ) {\n    //         return conditionTree.ConditionValue;\n    //     } else if (conditionTree.SubFilters) {\n    //         let i: number;\n    //         let result = null;\n    //         for (\n    //             i = 0;\n    //             result === null && i < conditionTree.SubFilters.length;\n    //             i++\n    //         ) {\n    //             result = this.getFilterValueFromConditionTree(\n    //                 dimension,\n    //                 conditionTree.SubFilters[i]\n    //             );\n    //         }\n    //         return result;\n    //     }\n    //     return null;\n    // }\n\n    getPrefix(): string {\n        const odataVersion = this.odataVersion ?? \"/v20411\";\n        const requestPrefix = this.requestPrefix ?? \"/sap/es/odata\";\n        const prefix = requestPrefix + odataVersion;\n        return prefix;\n    }\n\n    convertFilterConditionToExpression(filterCondition: ComplexCondition): Expression {\n        let filterConditionExpression = null;\n        if (filterCondition && filterCondition instanceof ComplexCondition) {\n            filterConditionExpression = conditionSerializer.serialize(null, filterCondition);\n        }\n        return filterConditionExpression;\n    }\n\n    getDebugInfo(): string {\n        return \"ESH API Provider: \" + this.id;\n    }\n\n    assembleUrl(searchOptions: IESSearchOptions, extendedSearchOptions?: ExtendedSearchOptions): string {\n        // wrapper for getEshSearchQuery which adds functionality missing in getEshSearchQuery\n        // missing functionality in getEshSearchQuery:\n        // - cannot handle empty suggestions term\n        // - cannot add nlq flag\n        // - not escaping free style text\n\n        // translate free style text to random string\n        const dummyFreeStyleText = \"FDGhfdhgfHFGHrdthfgcvgzjmbvndf\";\n        const freeStyleText = searchOptions?.freeStyleText;\n        if (extendedSearchOptions?.doNotEsacpeFreeStyleText && searchOptions?.freeStyleText) {\n            searchOptions.freeStyleText = dummyFreeStyleText;\n        }\n\n        // translate suggest term to random string\n        const workaroundSuggestTerm = \"fdjksghdfjkhvbbnfydfsd\";\n        if (extendedSearchOptions?.workaroundForEmptySuggestionTerm) {\n            if (searchOptions.suggestTerm === \"\") {\n                searchOptions.suggestTerm = workaroundSuggestTerm;\n            }\n        }\n\n        // call original getEshSearchQuery\n        let url = getEshSearchQuery(searchOptions);\n\n        // add nlq parameter\n        if (extendedSearchOptions?.nlq) {\n            const index = url.indexOf(\"?\");\n            if (index >= 0) {\n                url = url.slice(0, index + 1) + \"nlq=true&\" + url.slice(index + 1);\n            } else {\n                url += \"?nlq=true\";\n            }\n        }\n\n        // backtranslate free style text\n        if (extendedSearchOptions?.doNotEsacpeFreeStyleText) {\n            if (searchOptions?.freeStyleText === dummyFreeStyleText) {\n                url = url.replace(dummyFreeStyleText, encodeURIComponent(\"(\" + freeStyleText + \")\"));\n            }\n        }\n\n        // backtranslate suggest term\n        if (extendedSearchOptions?.workaroundForEmptySuggestionTerm) {\n            if (searchOptions.suggestTerm === workaroundSuggestTerm) {\n                url = url.replace(workaroundSuggestTerm, \"\");\n            }\n        }\n\n        return url;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,ohBAAAC,IAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,aAAA,EAAAC,cAAA,EAAAC,mBAAA,EAAAC,uBAAA,EAAAC,mBAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,kBAAA,EAAAC,mBAAA,EAAAC,uBAAA,EAAAC,yBAAA,EAAAC,eAAA,EAAAC,kBAAA,EAAAC,0BAAA,EAAAC,kCAAA,EAAAC,mBAAA,EAAAC,kBAAA,EAAAC,aAAA,EAAAC,YAAA;EAAA;;EAAA,MAQSC,iBAAiB,GAAArB,oBAAA;EAAA,MACjBsB,kBAAkB,GAAArB,qBAAA;EAAA,MAClBsB,UAAU,GAAArB,aAAA;EAAA,MACVsB,WAAW,GAAArB,cAAA;EAAA,MACXsB,gBAAgB,GAAArB,mBAAA;EAAA,MAGrBsB,iBAAiB,GAAArB,uBAAA;EAAA,MAEjBsB,UAAU,GAAAtB,uBAAA;EAAA,MACVuB,MAAM,GAAAvB,uBAAA;EAAA,MACNwB,IAAI,GAAAxB,uBAAA;EAAA,MAC6ByB,wBAAwB,GAAAzB,uBAAA;EAAA,MAEzD0B,WAAW,GAAA1B,uBAAA;EAAA,MAEX2B,cAAc,GAAA3B,uBAAA;EAAA,MAGT4B,GAAG,GAAA1B,YAAA;EAAA,MACH2B,WAAW,GAAA1B,oBAAA;EAAA,MAGX2B,SAAS,GAAA1B,kBAAA;EAAA,MACsB2B,gBAAgB,GAAA1B,mBAAA;EAAA,MAC/C2B,cAAc,GAAA1B,uBAAA;EAAA,MAKd2B,gBAAgB,GAAA1B,yBAAA;EAAA,MAChB2B,kCAAkC,GAAA1B,eAAA;EAAA,MAAE2B,iBAAiB,GAAA3B,eAAA;EAAA,MAAE4B,iBAAiB,GAAA5B,eAAA;EAAA,MAIxE6B,eAAe,GAAA5B,kBAAA;EAAA,MACf6B,uBAAuB,GAAA5B,0BAAA;EAAA,MACvB6B,yBAAyB,GAAA5B,kCAAA;EAAA,MACzB6B,UAAU,GAAA5B,mBAAA;EAAA,MAKV6B,gBAAgB,GAAA5B,kBAAA;EAAA,MAEhB6B,WAAW,GAAA5B,aAAA;EAAA,MACX6B,YAAY,GAAA5B,YAAA;EAAA,IA6CT6B,iBAAiB,0BAAjBA,iBAAiB;IAAjBA,iBAAiB;IAAjBA,iBAAiB;IAAjBA,iBAAiB;IAAjBA,iBAAiB;IAAjBA,iBAAiB;IAAjBA,iBAAiB;IAAA,OAAjBA,iBAAiB;EAAA,EAAjBA,iBAAiB;EA8GtB,MAAMC,QAAQ,SAASd,gBAAgB,CAAC;IAClCe,EAAE,GAAG,YAAY;IAE1BC,UAAU;IACVC,aAAa;IACbC,cAAc;IACdC,UAAU;IACVC,WAAW;IACXC,gBAAgB;IAChBC,YAAY;IACZC,kBAAkB;IAClBC,eAAe;IACfC,wBAAwB;IACxBC,cAAc;IACdC,uBAAuB;IACvBC,yBAAyB;IAEzB,MAAMC,SAASA,CAACC,aAAoC,EAEjD;MACC,IAAI,CAACF,yBAAyB,GAAGE,aAAa,CAACF,yBAAyB;MACxE,IAAI,CAACX,aAAa,GAAGa,aAAa,CAACC,GAAG;MACtC,IAAI,CAACT,YAAY,GAAGQ,aAAa,CAACR,YAAY;MAC9C,IAAI,CAACC,kBAAkB,GAAGO,aAAa,EAAEP,kBAAkB;MAC3D,IAAI,CAACC,eAAe,GAAGM,aAAa,EAAEN,eAAe;MACrD,IAAI,CAACQ,IAAI,GAAGF,aAAa,CAACE,IAAI;MAC9B,IAAI,CAACP,wBAAwB,GAAGK,aAAa,EAAEL,wBAAwB,IAAI,EAAE;MAC7E,IAAI,IAAI,CAACA,wBAAwB,CAACQ,MAAM,KAAK,CAAC,IAAIH,aAAa,CAACI,WAAW,EAAE;QACzE;QACA,IAAI,CAACT,wBAAwB,CAACU,IAAI,CAAC;UAC/BpB,EAAE,EAAE,eAAe;UACnBqB,eAAe,EAAEN,aAAa,CAACI;QACnC,CAAC,CAAC;MACN;MAEA,IAAI,CAACR,cAAc,GAAGI,aAAa,CAACJ,cAAc,IAAI,EAAE;MAExD,IAAI,CAACV,UAAU,GACXc,aAAa,CAACd,UAAU,IACxBN,gBAAgB,CAAC;QACb2B,WAAW,EACP,OAAOP,aAAa,CAACO,WAAW,KAAK,UAAU,GAAGP,aAAa,CAACO,WAAW,GAAGC,SAAS;QAC3FC,iBAAiB,EAAET,aAAa,CAACU,qBAAqB;QACtDC,kBAAkB,EAAEX,aAAa,CAACY;MACtC,CAAC,CAAC;MAEN,MAAMC,gBAAgB,GAAGb,aAAa,CAACa,gBAAgB;MACvD,IAAIA,gBAAgB,EAAE;QAClB,IAAI,CAACzB,cAAc,GAAG,IAAIhC,kBAAkB,CAAC,IAAI,CAAC;MACtD,CAAC,MAAM;QACH,IAAI,CAACgC,cAAc,GAAG,IAAIjC,iBAAiB,CAAC,IAAI,CAAC;MACrD;MAEA,IAAI,CAACkC,UAAU,GAAG,IAAIhC,UAAU,CAAC,IAAI,CAAC;MACtC,IAAI,CAACiC,WAAW,GAAG,IAAIhC,WAAW,CAAC,IAAI,CAAC;MACxC,IAAI,CAACiC,gBAAgB,GAAG,IAAIhC,gBAAgB,CAAC,IAAI,CAAC;MAClD,IAAI,CAACsC,uBAAuB,GAAG,IAAIpB,uBAAuB,CAAC,IAAI,CAACyB,IAAI,CAAC;MAErE,IAAI,CAACY,UAAU,GAAG,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;MAC7C,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC1B,MAAM,IAAI1C,iBAAiB,CAAC,CAAC;MACjC;MACA,MAAM,IAAI,CAAC2C,6BAA6B,CAAC,CAAC;MAC1C,IAAI,IAAI,CAACf,IAAI,CAACgB,4BAA4B,CAAC,CAAC,CAACf,MAAM,KAAK,CAAC,EAAE;QACvD,OAAOgB,OAAO,CAACC,MAAM,CAAC,IAAI/C,kCAAkC,CAAC,CAAC,CAAC;MACnE;MACA,OAAO;QACHgD,YAAY,EAAE,IAAI,CAACnB,IAAI,CAACoB,mBAAmB,CAAC;UACxCC,KAAK,EAAE,KAAK;UACZC,GAAG,EAAE,IAAI,CAAE;QACf,CAAC;MACL,CAAC;IACL;IAEAR,QAAQA,CAACS,OAAe,EAAEC,UAAsB,EAAW;MACvD,MAAMC,iBAAiB,GAAG,IAAI,CAACb,UAAU,CAACc,QAAQ;MAClD,KAAK,MAAMC,gBAAgB,IAAIF,iBAAiB,EAAE;QAC9C,IAAIE,gBAAgB,KAAKJ,OAAO,EAAE;UAC9B,IAAI,CAACC,UAAU,EAAE;YACb,OAAO,IAAI;UACf;UACA,MAAMI,qBAAqB,GAAGH,iBAAiB,CAACE,gBAAgB,CAAC,CAACE,YAAY;UAC9E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,qBAAqB,CAAC3B,MAAM,EAAE,EAAE6B,CAAC,EAAE;YACnD,MAAMC,eAAe,GAAGH,qBAAqB,CAACE,CAAC,CAAC;YAChD,IAAIC,eAAe,KAAKP,UAAU,EAAE;cAChC,OAAO,IAAI;YACf;UACJ;QACJ;MACJ;MAEA,OAAO,KAAK;IAChB;IAEA,MAAMX,cAAcA,CAAA,EAAwB;MACxC,MAAMmB,uBAAuB,GAAG;QAC5BC,aAAa,EAAE;UACXC,QAAQ,EAAE,CACN;YACIC,OAAO,EAAE,QAAQ;YACjBN,YAAY,EAAE,CACV;cACIO,UAAU,EAAE;YAChB,CAAC;UAET,CAAC,EACD;YACID,OAAO,EAAE,cAAc;YACvBN,YAAY,EAAE,CACV;cACIO,UAAU,EAAE;YAChB,CAAC;UAET,CAAC;QAET,CAAC;QACDV,QAAQ,EAAE;UACNW,WAAW,EAAE;YACTC,eAAe,EAAE,CAAC,YAAY;UAClC,CAAC;UACDC,MAAM,EAAE;YACJpB,YAAY,EAAE,CAAC,oBAAoB;UACvC;QACJ;MACJ,CAAC;MACD,OAAOa,uBAAuB;IAClC;IAEAQ,uBAAuBA,CAAA,EAAW;MAC9B,MAAMC,UAA4B,GAAG;QACjCC,YAAY,EAAE,IAAI;QAClBC,YAAY,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG;MACrC,CAAC;MAED,IAAI,OAAO,IAAI,CAAClD,cAAc,KAAK,QAAQ,IAAI,IAAI,CAACA,cAAc,CAACO,MAAM,GAAG,CAAC,EAAE;QAC3E;QACA;AACZ;AACA;AACA;QACYwC,UAAU,CAACI,eAAe,GAAG;UACzBC,UAAU,EAAE,IAAI,CAACpD;QACrB,CAAC;MACL;MACA,OAAO,IAAI,CAACqD,WAAW,CAACN,UAAU,CAAC;IACvC;IAEA,MAAM1B,6BAA6BA,CAAA,EAAkB;MACjD,MAAMiC,UAAU,GAAG,IAAI,CAACR,uBAAuB,CAAC,CAAC;MACjD,MAAMS,QAAQ,GAAG,MAAM,IAAI,CAAC/D,cAAc,CAACgE,WAAW,CAAC,IAAI,CAAClE,UAAU,EAAEgE,UAAU,CAAC;MACnF,MAAMG,cAAc,GAAG,MAAM,IAAI,CAACjE,cAAc,CAACkE,aAAa,CAACH,QAAQ,CAAC;MAExE,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,cAAc,CAACG,eAAe,CAACrD,MAAM,EAAE,EAAEoD,CAAC,EAAE;QAC5D,MAAME,UAAU,GAAGJ,cAAc,CAACG,eAAe,CAACD,CAAC,CAAC;QACpD,IAAI,CAACnE,cAAc,CAACsE,kBAAkB,CAClCD,UAAU,EACVJ,cAAc,CAACM,iBAAiB,CAACF,UAAU,CAACxE,EAAE,CAClD,CAAC;MACL;IACJ;IAEA2E,eAAeA,CAACC,KAAY,EAAsB;MAC9C,MAAMC,MAAM,GAAG,EAAE;MACjB,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACI,SAAS,CAAC,EAAE;QAChC,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,KAAK,CAACI,SAAS,CAAC9D,MAAM,EAAE,EAAEoD,CAAC,EAAE;UAC7C,MAAMW,OAAO,GAAGL,KAAK,CAACI,SAAS,CAACV,CAAC,CAAC;UAClC,MAAMU,SAAS,GACXC,OAAO,CAACC,KAAK,KAAKlG,SAAS,CAACmG,UAAU,GAAGvG,WAAW,CAACuG,UAAU,GAAGvG,WAAW,CAACwG,SAAS;UAC3FP,MAAM,CAACzD,IAAI,CAAC;YACRiE,GAAG,EAAEJ,OAAO,CAACjF,EAAE;YACfkF,KAAK,EAAEF;UACX,CAAC,CAAC;QACN;MACJ;MACA,OAAOH,MAAM;IACjB;IAEAS,eAAeA,CAACV,KAAkB,EAAY;MAC1C,MAAMC,MAAgB,GAAG,IAAI;MAC7B,IAAID,KAAK,CAACW,OAAO,IAAIX,KAAK,CAACW,OAAO,CAACC,aAAa,IAAIZ,KAAK,CAACW,OAAO,CAACC,aAAa,CAACtE,MAAM,GAAG,CAAC,EAAE;QACxF2D,MAAM,CAACY,UAAU,GAAGb,KAAK,CAACW,OAAO,CAACC,aAAa;QAE/C,IAAIZ,KAAK,CAACW,OAAO,CAACG,mBAAmB,IAAId,KAAK,CAACW,OAAO,CAACG,mBAAmB,KAAK,EAAE,EAAE;UAC/Eb,MAAM,CAACa,mBAAmB,GAAGd,KAAK,CAACW,OAAO,CAACG,mBAAmB;QAClE;MACJ;MACA,OAAOb,MAAM;IACjB;IAEAc,kBAAkBA,CAACf,KAAkB,EAA4B;MAC7D,MAAMgB,QAAQ,GAAG,IAAI,CAACC,qCAAqC,CAACjB,KAAK,CAAC;MAClE,OAAO,IAAI,CAACkB,eAAe,CAACF,QAAQ,CAAC;IACzC;IAEAC,qCAAqCA,CAACjB,KAAoC,EAA4B;MAClG;MACA,MAAMmB,aAAa,GAAGnB,KAAK,CAACoB,MAAM,CAACD,aAAa,CAACE,KAAK,CAAC,CAAC;MACxD,MAAMD,MAAM,GAAG7I,mBAAmB,CAAC+I,SAAS,CAACtB,KAAK,CAACoB,MAAM,CAACxB,UAAU,EAAEuB,aAAa,CAAC;MACpF,IAAI,CAACjB,KAAK,CAACC,OAAO,CAACiB,MAAM,CAACG,KAAK,CAAC,EAAE;QAC9BH,MAAM,CAACG,KAAK,GAAG,EAAE;MACrB;MAEA,MAAMC,WAAW,GAAGxB,KAAK,CAACoB,MAAM,CAACK,UAAU,IAAI,GAAG;MAElD,IAAI,CAACC,0BAA0B,CAAC1B,KAAK,EAAEoB,MAAM,EAAE,IAAI,CAACtF,wBAAwB,CAAC;MAE7E,MAAM8D,UAAU,GAAGI,KAAK,CAACoB,MAAM,CAACxB,UAAU;MAC1C,MAAM+B,GAAG,GAAG3B,KAAK,CAAC2B,GAAG,IAAI,EAAE;MAC3B,MAAMC,IAAI,GAAG5B,KAAK,CAAC4B,IAAI,IAAI,CAAC;MAE5B,MAAMxB,SAA6B,GAAG,IAAI,CAACL,eAAe,CAACC,KAAK,CAAC;MAEjE,MAAM6B,aAA+B,GAAG;QACpC;QACA7C,YAAY,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG,OAAO;QACxC6C,IAAI,EAAEH,GAAG;QACTI,KAAK,EAAEH,IAAI;QACXI,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE,IAAI;QACZC,QAAQ,EAAE9B,SAAS;QACnB+B,aAAa,EAAEX,WAAW;QAC1BY,iBAAiB,EAAEhB;MACvB,CAAC;MACD,IAAIxB,UAAU,KAAK,IAAI,CAACvD,IAAI,CAACgG,gBAAgB,CAAC,CAAC,EAAE;QAC7CR,aAAa,CAACS,KAAK,GAAG1C,UAAU,CAACxE,EAAE;MACvC;MACA;MACA,IAAI,IAAI,CAACiB,IAAI,EAAEF,aAAa,EAAEoG,iBAAiB,KAAK,IAAI,IAAIZ,GAAG,GAAG,GAAG,EAAE;QACnE,IAAIa,kBAAkB,GAAG5C,UAAU,CAAC4C,kBAAkB;QACtD,MAAMC,wBAAwB,GAAG7C,UAAU,CAAC8C,sBAAsB,CAAC,CAAC;QACpE,IAAID,wBAAwB,YAAY3H,UAAU,EAAE;UAChD0H,kBAAkB,GAAGC,wBAAwB,CAACD,kBAAkB;QACpE;QACA,IAAIA,kBAAkB,EAAE;UACpBX,aAAa,CAACc,cAAc,GAAGH,kBAAkB;QACrD;MACJ;MACA,IAAIxC,KAAK,YAAY7F,WAAW,EAAE;QAC9B,IAAI,OAAO,IAAI,CAACyB,kBAAkB,KAAK,WAAW,EAAE;UAChD;UACAiG,aAAa,CAACe,OAAO,GAAG,IAAI,CAAChH,kBAAkB,CAAC,CAAC;QACrD;QACA,IAAIoE,KAAK,CAAC6C,eAAe,EAAE;UACvB,IAAI,OAAO,IAAI,CAAChH,eAAe,KAAK,WAAW,EAAE;YAC7C;YACAgG,aAAa,CAACiB,MAAM,GAAG,IAAI,CAACjH,eAAe;UAC/C,CAAC,MAAM;YACHgG,aAAa,CAACiB,MAAM,GAAG,CAAC,KAAK,CAAC;UAClC;UACAjB,aAAa,CAACkB,UAAU,GAAG/C,KAAK,CAACgD,QAAQ,IAAI,CAAC;QAClD;QACA,MAAMrC,OAAO,GAAG,IAAI,CAACD,eAAe,CAACV,KAAK,CAAC;QAC3C,IAAIW,OAAO,EAAE;UACTkB,aAAa,CAACoB,OAAO,GAAGtC,OAAO;UAC/BkB,aAAa,CAACG,QAAQ,GAAG,KAAK;QAClC;MACJ;MAEA,MAAMkB,SAAmC,GAAG;QACxC9G,GAAG,EAAE,IAAI,CAACgD,WAAW,CAACyC,aAAa,EAAE;UACjClE,GAAG,EAAEqC,KAAK,CAACrC,GAAG;UACdwF,wBAAwB,EAAE,IAAI,CAAC9G,IAAI,EAAEF,aAAa,EAAEiH;QACxD,CAAC,CAAC;QACFpD,KAAK,EAAEA;MACX,CAAC;MACD,OAAOkD,SAAS;IACpB;IAEA,MAAchC,eAAeA,CAACmC,UAAoC,EAA4B;MAC1F,OAAO,MAAMrI,WAAW,CACpB,YAAY;QACR;QACA,OAAO,CAAC,MAAM,IAAI,CAACK,UAAU,CAACiI,OAAO,CAACD,UAAU,CAACjH,GAAG,CAAC,GAAGmH,IAAI;MAChE,CAAC,EACD,MAAOC,YAA2C,IAAK;QACnD;QACA,OAAO,MAAM,IAAI,CAACC,mBAAmB,CAACJ,UAAU,EAAEG,YAAY,CAAC;MACnE,CACJ,CAAC;IACL;IAEA,MAAcC,mBAAmBA,CAC7BJ,UAAoC,EACpC/D,QAAuC,EACf;MACxB,IAAI,CAAC/D,cAAc,CAACmI,oBAAoB,CAACpE,QAAQ,CAAC;MAClD,MAAMqE,kBAAkB,GAAG,IAAI,CAAC3H,uBAAuB,CAAC4H,KAAK,CACzDtE,QAAQ,GAAG,mDAAmD,CAAC,EAC/D+D,UAAU,CAACrD,KACf,CAAC;MACD,MAAMuB,KAAK,GAAG,MAAM,IAAI,CAAC/F,UAAU,CAACoI,KAAK,CAACP,UAAU,CAACrD,KAAK,EAAiBV,QAAQ,CAAC;MACpF,IAAIwD,MAAwE;MAC5E,MAAMe,UAAU,GAAGvE,QAAQ,CAAC,kDAAkD,CAAC,EAAEwE,mBAAmB;MACpG,IACIT,UAAU,CAACrD,KAAK,CAAC+D,aAAa,CAAC,CAAC,KAAK,IAAI,CAAC1H,IAAI,CAACgG,gBAAgB,CAAC,CAAC,IACjEwB,UAAU,IACV3D,KAAK,CAACC,OAAO,CAAC0D,UAAU,CAAC,IACzBA,UAAU,CAACvH,MAAM,KAAK,CAAC,EACzB;QACE,MAAM0H,2BAA0D,GAAG;UAC/D,wCAAwC,EAAE,CACtC;YACI,uCAAuC,EAAE;cACrCC,UAAU,EAAE,CAAC;gBAAEC,YAAY,EAAE,OAAO;gBAAEC,gBAAgB,EAAE;cAAK,CAAC;YAClE,CAAC;YACDC,KAAK,EAAE,CACH;cACI9B,KAAK,EAAEuB,UAAU,CAAC,CAAC,CAAC,CAACQ,OAAO;cAC5BC,MAAM,EAAEhF,QAAQ,CAAC,cAAc;YACnC,CAAC;UAET,CAAC;QAET,CAAC;QACDwD,MAAM,GAAG,MAAM,IAAI,CAACrH,WAAW,CAACmI,KAAK,CAACP,UAAU,CAACrD,KAAK,EAAEgE,2BAA2B,CAAC;MACxF,CAAC,MAAM;QACHlB,MAAM,GAAG,MAAM,IAAI,CAACrH,WAAW,CAACmI,KAAK,CAACP,UAAU,CAACrD,KAAK,EAAEV,QAAQ,CAAC;MACrE;MAEA,MAAMiF,SAAS,GAAGtJ,YAAY,CAAC,IAAI,CAACoB,IAAI,EAAEiD,QAAQ,CAAC,qCAAqC,CAAC,CAAC;MAE1F,OAAO,IAAI,CAACjD,IAAI,CAACmI,sBAAsB,CAAC;QACpCC,KAAK,EAAE,oBAAoB;QAC3BzE,KAAK,EAAEqD,UAAU,CAACrD,KAAK;QACvBuB,KAAK,EAAEA,KAAK;QACZmD,UAAU,EAAEpF,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC;QACzCwD,MAAM,EAAEA,MAAM;QACda,kBAAkB,EAAEA,kBAAkB;QACtCY,SAAS,EAAEA;MACf,CAAC,CAAC;IACN;IAEA,MAAcI,2BAA2BA,CACrC3E,KAAsB,EACtBqD,UAAoC,EACR;MAC5B,OAAO,MAAMrI,WAAW,CACpB,YAAY;QACR;QACA,OAAO,CAAC,MAAM,IAAI,CAACK,UAAU,CAACiI,OAAO,CAACD,UAAU,CAACjH,GAAG,CAAC,GAAGmH,IAAI;MAChE,CAAC,EACD,MAAOC,YAA2C,IAAK;QACnD;QACA,IAAI,CAACjI,cAAc,CAACmI,oBAAoB,CAACF,YAAY,CAAC;QACtD,MAAMoB,WAAW,GAAG,MAAM,IAAI,CAACpJ,UAAU,CAACoI,KAAK,CAC3CP,UAAU,CAACrD,KAAK,EAChBwD,YACJ,CAAC;QACD,MAAMqB,iBAAiB,GAAG,IAAI,CAACnJ,gBAAgB,CAACoJ,sBAAsB,CAClEzB,UAAU,CAACrD,KAAK,CAAoB,4CACpC4E,WACJ,CAAC;QACD,OAAO,IAAI,CAACvI,IAAI,CAAC0I,0BAA0B,CAAC;UACxCN,KAAK,EAAE,aAAa;UACpBzE,KAAK,EAAEA,KAAK;UACZuB,KAAK,EAAEsD;QACX,CAAC,CAAC;MACN,CACJ,CAAC;IACL;IAEAG,yBAAyBA,CACrBhF,KAAiB,EACjBmB,aAAwB,EACxB8D,cAAqC,EAC/B;MACN,MAAMzD,WAAW,GAAGxB,KAAK,CAACoB,MAAM,CAACK,UAAU;MAC3C,MAAM7B,UAAU,GAAGI,KAAK,CAACoB,MAAM,CAACxB,UAAU;MAE1C,MAAMoD,QAAQ,GAAG,EAAE,CAAC,CAAC;;MAErB;MACA,MAAMkC,eAAe,GAAGD,cAAc,CAACE,OAAO,IAAI,KAAK;MAEvD,MAAM/D,MAAM,GAAG7I,mBAAmB,CAAC+I,SAAS,CAAC1B,UAAU,EAAEuB,aAAa,CAAC;MACvE,IAAI,CAACjB,KAAK,CAACC,OAAO,CAACiB,MAAM,CAACG,KAAK,CAAC,EAAE;QAC9BH,MAAM,CAACG,KAAK,GAAG,EAAE;MACrB;MAEA,MAAMI,GAAG,GAAG3B,KAAK,CAAC2B,GAAG,IAAI,CAAC;;MAE1B;MACA,IAAIuD,eAAe,KAAK,IAAI,EAAE;QAC1B;QACA;QACA;QACA,MAAME,WAAW,GAAGH,cAAc,CAACI,KAAe;QAClD,IACI,CAACJ,cAAc,CAACI,KAAK,IACrBJ,cAAc,CAACI,KAAK,KAAK,EAAE,IAC3BD,WAAW,CAACE,KAAK,CAAC,WAAW,CAAC,KAAK,IAAI,EACzC;UACEL,cAAc,CAACI,KAAK,GAAG,GAAG;UAC1BjE,MAAM,CAACG,KAAK,CAAC/E,IAAI,CACb,IAAI5C,UAAU,CAAC;YACX2L,QAAQ,EAAEN,cAAc,CAACO,SAAS;YAClCC,QAAQ,EAAE1L,wBAAwB,CAAC6E,MAAM;YACzCyG,KAAK,EAAE,IAAIvL,IAAI,CAAC;cAAE4L,IAAI,EAAE;YAAI,CAAC;UACjC,CAAC,CACL,CAAC;QACL,CAAC,MAAM;UACHtE,MAAM,CAACG,KAAK,CAAC/E,IAAI,CACb,IAAI5C,UAAU,CAAC;YACX2L,QAAQ,EAAEN,cAAc,CAACO,SAAS;YAClCC,QAAQ,EAAE1L,wBAAwB,CAAC4L,oBAAoB;YACvDN,KAAK,EAAE,IAAIxL,MAAM,CAAC;cACd+L,MAAM,EAAEX,cAAc,CAACI,KAAK,GAAG;YACnC,CAAC;UACL,CAAC,CACL,CAAC;QACL;MACJ;MAEA,IAAI,CAAC3D,0BAA0B,CAAC1B,KAAK,EAAEoB,MAAM,EAAE,IAAI,CAACtF,wBAAwB,CAAC;MAE7E,MAAM+J,YAA8B,GAAG;QACnC7G,YAAY,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG,OAAO;QACxC6C,IAAI,EAAE,CAAC;QACPG,MAAM,EAAE,IAAI;QACZG,iBAAiB,EAAEhB,MAAM;QACzBe,aAAa,EAAEX;MACnB,CAAC;MAED,IAAI5B,UAAU,KAAK,IAAI,CAACvD,IAAI,CAACgG,gBAAgB,CAAC,CAAC,EAAE;QAC7CwD,YAAY,CAACvD,KAAK,GAAG1C,UAAU,CAACxE,EAAE;MACtC;MAEA,MAAM0K,UAAU,GAAG,EAAE;MACrBD,YAAY,CAAC9C,UAAU,GAAGpB,GAAG;MAC7B,IAAI3B,KAAK,CAAC+F,SAAS,EAAE;QACjBD,UAAU,CAACtJ,IAAI,CAACwD,KAAK,CAAC+F,SAAS,CAAC;QAChC,MAAMC,QAAQ,GAAGhG,KAAK,CAACoB,MAAM,CAACxB,UAAU,CAACqG,oBAAoB,CAACjG,KAAK,CAAC+F,SAAS,CAAC;QAC9E,IAAIC,QAAQ,KAAKA,QAAQ,CAACE,IAAI,KAAK,QAAQ,IAAIF,QAAQ,CAACE,IAAI,KAAK,SAAS,CAAC,IAAIvE,GAAG,IAAI,EAAE,EAAE;UACtF;UACAkE,YAAY,CAAC9C,UAAU,GAAGC,QAAQ;QACtC;MACJ;;MAEA;;MAEA;MACA6C,YAAY,CAAC/C,MAAM,GAAGgD,UAAU;;MAEhC;MACA,OAAO,IAAI,CAAC1G,WAAW,CAACyG,YAAY,EAAE;QAAElI,GAAG,EAAEqC,KAAK,CAACrC;MAAI,CAAC,CAAC;IAC7D;IAEA,MAAMwI,iBAAiBA,CAACnG,KAAiB,EAA2B;MAChE,MAAMoG,GAAG,GAAG,IAAIlM,GAAG,CAAC,CAAC;MACrB;MACA,MAAMiH,aAAa,GAAGnB,KAAK,CAACoB,MAAM,CAACD,aAAa,CAACE,KAAK,CAAC,CAAC;MACxD,MAAM4D,cAAc,GAAI9D,aAAa,CAAsBkF,yBAAyB,CAACrG,KAAK,CAAC+F,SAAS,CAAC;MACrG,MAAM3J,GAAG,GAAG,IAAI,CAAC4I,yBAAyB,CAAChF,KAAK,EAAEmB,aAAa,EAAE8D,cAAc,CAAC;MAEhF,OAAO,MAAMjK,WAAW,CACpB,YAAY;QACR;QACA,OAAO,CAAC,MAAM,IAAI,CAACK,UAAU,CAACiI,OAAO,CAAClH,GAAG,CAAC,GAAGmH,IAAI;MACrD,CAAC,EACD,MAAOC,YAA2C,IAAK;QACnD;QACA,MAAMV,MAAM,GAAG,MAAM,IAAI,CAACrH,WAAW,CAACmI,KAAK,CAAC5D,KAAK,EAAEwD,YAAY,CAAC;QAChE,IAAIV,MAAM,CAACxG,MAAM,GAAG,CAAC,EAAE;UACnB,OAAOwG,MAAM,CAAC,CAAC,CAAC;QACpB;QACA,IAAIwD,aAAa,GAAG,EAAE;QACtB,MAAMN,QAAQ,GAAGhG,KAAK,CAACoB,MAAM,CAACxB,UAAU,CAACqG,oBAAoB,CACzDjG,KAAK,CAAC+F,SACV,CAAsB;QACtB,IAAIC,QAAQ,IAAIA,QAAQ,CAACO,KAAK,EAAE;UAC5BD,aAAa,GAAGN,QAAQ,CAACO,KAAK;QAClC;QACA,OAAO,IAAI,CAAClK,IAAI,CAACmK,qBAAqB,CAAC;UACnC/B,KAAK,EAAE6B,aAAa;UACpB/E,KAAK,EAAE,EAAE;UACTvB,KAAK,EAAEA,KAAK;UACZoG,GAAG,EAAEA,GAAG;UACRK,eAAe,EAAE9J;QACrB,CAAC,CAAC;MACN,CACJ,CAAC;IACL;IAEA,MAAM+J,qBAAqBA,CAAC1G,KAAqB,EAA+B;MAC5E,MAAM2G,eAAe,GAAG,IAAIhM,eAAe,CAAC,CAAC;MAC7C,MAAMyG,MAAM,GAAG7I,mBAAmB,CAAC+I,SAAS,CAACtB,KAAK,CAACoB,MAAM,CAACxB,UAAU,EAAEI,KAAK,CAACoB,MAAM,CAACD,aAAa,CAAC;MACjG,IAAI,CAACjB,KAAK,CAACC,OAAO,CAACiB,MAAM,CAACG,KAAK,CAAC,EAAE;QAC9BH,MAAM,CAACG,KAAK,GAAG,EAAE;MACrB;MAEA,IAAI,CAACG,0BAA0B,CAAC1B,KAAK,EAAEoB,MAAM,EAAE,IAAI,CAACtF,wBAAwB,CAAC;;MAE7E;MACA,MAAMuD,UAAU,GAAG,IAAI,CAACD,WAAW,CAC/B;QACIJ,YAAY,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG,OAAO;QACxC6C,IAAI,EAAE,CAAC;QACPM,iBAAiB,EAAEhB,MAAM;QACzBe,aAAa,EAAEnC,KAAK,CAACoB,MAAM,CAACK,UAAU;QACtCa,KAAK,EAAEtC,KAAK,CAACoB,MAAM,CAACxB,UAAU,CAACxE,EAAE;QACjC0H,MAAM,EAAE,CAAC9C,KAAK,CAAC4G,WAAW,CAAC;QAC3BC,SAAS,EAAE,CACP,IAAI5M,cAAc,CAAC;UACf6M,WAAW,EAAE9G,KAAK,CAAC4G,WAAW;UAC9BG,OAAO,EAAE,CAAC/G,KAAK,CAACgH,MAAM,CAAC;UACvBC,MAAM,EAAE;QACZ,CAAC,CAAC;QAEN;MACJ,CAAC,EACD;QAAEtJ,GAAG,EAAEqC,KAAK,CAACrC;MAAI,CACrB,CAAC;MAED,OAAO,MAAM3C,WAAW,CACpB,YAAY;QACR;QACA,OAAO,CAAC,MAAM,IAAI,CAACK,UAAU,CAACiI,OAAO,CAACjE,UAAU,CAAC,GAAGkE,IAAI;MAC5D,CAAC,EACD,MAAOC,YAAY,IAAK;QACpB;QACA,MAAM0D,iBAAiB,GAAGlH,KAAK,CAACoB,MAAM,CAACxB,UAAU,CAACqG,oBAAoB,CAClEjG,KAAK,CAAC4G,WACV,CAAsB;QACtB,MAAM9D,MAAM,GAAGU,YAAY,CAAC,wCAAwC,CAAC,IAAI,EAAE;QAC3E,MAAM2D,KAAK,GAAGrE,MAAM,CAACsE,IAAI,CAAED,KAAK,IAAK;UACjC,MAAMP,WAAW,GAAG5O,IAAI,CAACqP,WAAW,CAACF,KAAK,EAAE,CACxC,uCAAuC,EACvC,YAAY,EACZ,CAAC,EACD,cAAc,CACjB,CAAC;UACF,OAAOP,WAAW,KAAK5G,KAAK,CAAC4G,WAAW;QAC5C,CAAC,CAAC;QACF,OAAOD,eAAe,CAACW,mBAAmB,CAACtH,KAAK,EAAEkH,iBAAiB,EAAEC,KAAK,IAAI,CAAC,CAAC,CAAC;MACrF,CACJ,CAAC;IACL;IAEA,MAAMI,sBAAsBA,CAACvH,KAAsB,EAAgC;MAC/E;MACA;MACA,MAAM,CAACwH,2BAA2B,EAAEC,0BAA0B,CAAC,GAAG,MAAMnK,OAAO,CAACoK,GAAG,CAAC,CAChF,IAAI,CAACC,6BAA6B,CAAC3H,KAAK,CAAC,EACzC,IAAI,CAAC4H,4BAA4B,CAAC5H,KAAK,CAAC,CAC3C,CAAC;MACF,MAAM6H,SAA8B,GAAG,IAAI,CAACxL,IAAI,CAAC0I,0BAA0B,CAAC;QACxEN,KAAK,EAAE,aAAa;QACpBzE,KAAK,EAAEA,KAAK;QACZuB,KAAK,EAAE,CAAC,GAAGkG,0BAA0B,CAAClG,KAAK,EAAE,GAAGiG,2BAA2B,CAACjG,KAAK;MACrF,CAAC,CAAC;MACFsG,SAAS,CAACC,SAAS,CAACN,2BAA2B,CAACO,SAAS,CAAC,CAAC,CAAC;MAC5DF,SAAS,CAACC,SAAS,CAACL,0BAA0B,CAACM,SAAS,CAAC,CAAC,CAAC;MAC3D,OAAOF,SAAS;IACpB;IAEAG,uBAAuBA,CAAChI,KAAsB,EAAW;MACrD,OACIA,KAAK,CAACiI,KAAK,CAACC,OAAO,CAAC5N,cAAc,CAAC6N,MAAM,CAAC,IAAI,CAAC,IAC/CnI,KAAK,CAACoB,MAAM,CAACxB,UAAU,CAACsG,IAAI,KAAKlG,KAAK,CAAC3D,IAAI,CAAC+L,cAAc,CAACC,cAAc;IAEjF;IAEA,MAAcT,4BAA4BA,CAAC5H,KAAsB,EAAgC;MAC7F;MACA,IAAI,CAAC,IAAI,CAACgI,uBAAuB,CAAChI,KAAK,CAAC,EAAE;QACtC,OAAO1C,OAAO,CAACgL,OAAO,CAClB,IAAI,CAACjM,IAAI,CAAC0I,0BAA0B,CAAC;UACjCN,KAAK,EAAE,aAAa;UACpBzE,KAAK,EAAEA,KAAK;UACZuB,KAAK,EAAE;QACX,CAAC,CACL,CAAC;MACL;MACA,MAAMP,QAAQ,GAAG,IAAI,CAACC,qCAAqC,CAACjB,KAAK,CAAC;MAClE,OAAO,IAAI,CAAC2E,2BAA2B,CAAC3E,KAAK,EAAEgB,QAAQ,CAAC;IAC5D;IAEQ2G,6BAA6BA,CAAC3H,KAAsB,EAAgC;MACxF;MACA,IACIA,KAAK,CAACuI,gBAAgB,CAACC,QAAQ,CAAC3N,yBAAyB,CAAC4N,IAAI,CAAC,KAC9DzI,KAAK,CAACiI,KAAK,CAACO,QAAQ,CAAClO,cAAc,CAACoO,UAAU,CAAC,IAC5C1I,KAAK,CAACiI,KAAK,CAACO,QAAQ,CAAClO,cAAc,CAACqO,YAAY,CAAC,CAAC,EACxD;QACE,OAAO,IAAI,CAACC,oBAAoB,CAAC5I,KAAK,CAAC;MAC3C;MACA,OAAO1C,OAAO,CAACgL,OAAO,CAClB,IAAI,CAACjM,IAAI,CAAC0I,0BAA0B,CAAC;QACjCN,KAAK,EAAE,aAAa;QACpBzE,KAAK,EAAEA,KAAK;QACZuB,KAAK,EAAE;MACX,CAAC,CACL,CAAC;IACL;IAEAsH,8BAA8BA,CAAC7I,KAAsB,EAAU;MAC3D;AACR;AACA;AACA;AACA;AACA;;MAEQ;MACA;MACA;MACA;MACA;MACA,MAAMwB,WAAW,GAAGxB,KAAK,CAACoB,MAAM,CAACK,UAAU;MAC3C,MAAM7B,UAAU,GAAGI,KAAK,CAACoB,MAAM,CAACxB,UAAU;MAC1C,MAAMuB,aAAa,GAAGnB,KAAK,CAACoB,MAAM,CAACD,aAAa,CAACE,KAAK,CAAC,CAAC;MACxD,MAAMD,MAAM,GAAG7I,mBAAmB,CAAC+I,SAAS,CAACtB,KAAK,CAACoB,MAAM,CAACxB,UAAU,EAAEuB,aAAa,CAAC;MACpF,IAAI,CAACjB,KAAK,CAACC,OAAO,CAACiB,MAAM,CAACG,KAAK,CAAC,EAAE;QAC9BH,MAAM,CAACG,KAAK,GAAG,EAAE;MACrB;MAEA,MAAMI,GAAG,GAAG3B,KAAK,CAAC2B,GAAG,IAAI,EAAE;MAC3B,MAAMC,IAAI,GAAG5B,KAAK,CAAC4B,IAAI,IAAI,CAAC;MAE5B,IAAI,CAACF,0BAA0B,CAAC1B,KAAK,EAAEoB,MAAM,EAAE,IAAI,CAACtF,wBAAwB,CAAC;;MAE7E;AACR;AACA;AACA;;MAEQ,MAAMgN,iBAAmC,GAAG;QACxCC,WAAW,EAAEvH,WAAW;QACxBxC,YAAY,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG,OAAO;QACxC6C,IAAI,EAAEH,GAAG;QACTI,KAAK,EAAEH,IAAI;QACXQ,iBAAiB,EAAEhB;QACnB;MACJ,CAAC;MAED,IAAIxB,UAAU,KAAK,IAAI,CAACvD,IAAI,CAACgG,gBAAgB,CAAC,CAAC,EAAE;QAC7CyG,iBAAiB,CAACxG,KAAK,GAAG1C,UAAU,CAACxE,EAAE;MAC3C;MAEA,IAAIuC,GAAG,GAAGqC,KAAK,CAACrC,GAAG;;MAEnB;MACA,IAAIqC,KAAK,CAACiI,KAAK,CAACC,OAAO,CAAC5N,cAAc,CAACqO,YAAY,CAAC,IAAI,CAAC,EAAE;QACvD,IAAI3I,KAAK,CAACiI,KAAK,CAAC3L,MAAM,GAAG,CAAC,EAAE;UACxB,MAAM,IAAI5B,iBAAiB,CAAC;YACxBsO,OAAO,EAAE;UACb,CAAC,CAAC;QACN;QACArL,GAAG,GAAG,IAAI;MACd;MAEA,OAAO,IAAI,CAACyB,WAAW,CAAC0J,iBAAiB,EAAE;QACvCnL,GAAG,EAAEA,GAAG;QACRsL,gCAAgC,EAAE;MACtC,CAAC,CAAC;IACN;IAEA,MAAcL,oBAAoBA,CAAC5I,KAAsB,EAAgC;MACrF,MAAM5D,GAAG,GAAG,IAAI,CAACyM,8BAA8B,CAAC7I,KAAK,CAAC;MACtD,OAAO,MAAMhF,WAAW,CACpB,YAAY;QACR;QACA,OAAO,CAAC,MAAM,IAAI,CAACK,UAAU,CAACiI,OAAO,CAAClH,GAAG,CAAC,GAAGmH,IAAI;MAGrD,CAAC,EACD,MAAOC,YAAiE,IAAK;QACzE;QACA,IAAI0F,WAAW,GAAG,EAAE;QACpB,IAAI1F,YAAY,CAAC6B,KAAK,EAAE;UACpB6D,WAAW,GAAG,IAAI,CAACxN,gBAAgB,CAACkI,KAAK,CACrC5D,KAAK,EACLwD,YAAY,CAAC6B,KACjB,CAAgC;QACpC;QACA,OAAO,IAAI,CAAChJ,IAAI,CAAC0I,0BAA0B,CAAC;UACxCN,KAAK,EAAE,aAAa;UACpBzE,KAAK,EAAEA,KAAK;UACZuB,KAAK,EAAE2H;QACX,CAAC,CAAC;MACN,CACJ,CAAC;IACL;IAEQxH,0BAA0BA,CAAC1B,KAAK,EAAEoB,MAAM,EAAEtF,wBAAwB,EAAE;MACxE,IAAIA,wBAAwB,EAAE;QAC1B,MAAMqN,gBAAgB,GAAGrN,wBAAwB,CAACsF,MAAM,CACnDgI,QAAQ,IAAKA,QAAQ,CAAChO,EAAE,KAAK4E,KAAK,CAACoB,MAAM,CAACxB,UAAU,CAACxE,EAC1D,CAAC,CAAC,CAAC,CAAC;QACJ,IAAI+N,gBAAgB,EAAE1M,eAAe,EAAE;UACnC2E,MAAM,CAACG,KAAK,CAAC/E,IAAI,CAAC,IAAI,CAAC6M,kCAAkC,CAACF,gBAAgB,CAAC1M,eAAe,CAAC,CAAC;QAChG;MACJ;IACJ;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAwC,SAASA,CAAA,EAAW;MAChB,MAAMtD,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI,SAAS;MACnD,MAAML,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,eAAe;MAC3D,MAAMgO,MAAM,GAAGhO,aAAa,GAAGK,YAAY;MAC3C,OAAO2N,MAAM;IACjB;IAEAD,kCAAkCA,CAAC5M,eAAiC,EAAc;MAC9E,IAAI8M,yBAAyB,GAAG,IAAI;MACpC,IAAI9M,eAAe,IAAIA,eAAe,YAAYlC,gBAAgB,EAAE;QAChEgP,yBAAyB,GAAGhR,mBAAmB,CAAC+I,SAAS,CAAC,IAAI,EAAE7E,eAAe,CAAC;MACpF;MACA,OAAO8M,yBAAyB;IACpC;IAEAC,YAAYA,CAAA,EAAW;MACnB,OAAO,oBAAoB,GAAG,IAAI,CAACpO,EAAE;IACzC;IAEAgE,WAAWA,CAACyC,aAA+B,EAAE4H,qBAA6C,EAAU;MAChG;MACA;MACA;MACA;MACA;;MAEA;MACA,MAAMC,kBAAkB,GAAG,gCAAgC;MAC3D,MAAMvH,aAAa,GAAGN,aAAa,EAAEM,aAAa;MAClD,IAAIsH,qBAAqB,EAAEtG,wBAAwB,IAAItB,aAAa,EAAEM,aAAa,EAAE;QACjFN,aAAa,CAACM,aAAa,GAAGuH,kBAAkB;MACpD;;MAEA;MACA,MAAMC,qBAAqB,GAAG,wBAAwB;MACtD,IAAIF,qBAAqB,EAAER,gCAAgC,EAAE;QACzD,IAAIpH,aAAa,CAACkH,WAAW,KAAK,EAAE,EAAE;UAClClH,aAAa,CAACkH,WAAW,GAAGY,qBAAqB;QACrD;MACJ;;MAEA;MACA,IAAIvN,GAAG,GAAGzC,iBAAiB,CAACkI,aAAa,CAAC;;MAE1C;MACA,IAAI4H,qBAAqB,EAAE9L,GAAG,EAAE;QAC5B,MAAMiM,KAAK,GAAGxN,GAAG,CAAC8L,OAAO,CAAC,GAAG,CAAC;QAC9B,IAAI0B,KAAK,IAAI,CAAC,EAAE;UACZxN,GAAG,GAAGA,GAAG,CAACyN,KAAK,CAAC,CAAC,EAAED,KAAK,GAAG,CAAC,CAAC,GAAG,WAAW,GAAGxN,GAAG,CAACyN,KAAK,CAACD,KAAK,GAAG,CAAC,CAAC;QACtE,CAAC,MAAM;UACHxN,GAAG,IAAI,WAAW;QACtB;MACJ;;MAEA;MACA,IAAIqN,qBAAqB,EAAEtG,wBAAwB,EAAE;QACjD,IAAItB,aAAa,EAAEM,aAAa,KAAKuH,kBAAkB,EAAE;UACrDtN,GAAG,GAAGA,GAAG,CAAC0N,OAAO,CAACJ,kBAAkB,EAAEK,kBAAkB,CAAC,GAAG,GAAG5H,aAAa,GAAG,GAAG,CAAC,CAAC;QACxF;MACJ;;MAEA;MACA,IAAIsH,qBAAqB,EAAER,gCAAgC,EAAE;QACzD,IAAIpH,aAAa,CAACkH,WAAW,KAAKY,qBAAqB,EAAE;UACrDvN,GAAG,GAAGA,GAAG,CAAC0N,OAAO,CAACH,qBAAqB,EAAE,EAAE,CAAC;QAChD;MACJ;MAEA,OAAOvN,GAAG;IACd;EACJ;EAAC,IAAA4N,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAA9O,iBAAA,GAAAA,iBAAA;EAAA8O,SAAA,CAAA7O,QAAA,GAAAA,QAAA;EAAA,OAAA6O,SAAA;AAAA","ignoreList":[]}