{"version":3,"file":"conditionSerializer.js","names":["sap","ui","define","____sina_ComparisonOperator","typeConverter","____sina_ComplexCondition","____sina_SimpleCondition","____core_errors","___ComparisonOperator","____sina_LogicalOperator","ComparisonOperator","ComplexCondition","SimpleCondition","InBetweenConditionInConsistent","UnknownComparisonOperatorError","ABAPODataComparisonOperator","LogicalOperator","ConditionSerializer","dataSource","constructor","this","convertSinaToOdataOperator","sinaOperator","Eq","Lt","Gt","Le","Ge","Co","Bw","Ew","And","Or","serializeComplexCondition","condition","result","ActAsQueryPart","Id","OperatorType","operator","SubFilters","actAsQueryPartPath","sina","provider","isQueryPropertySupported","subConditions","conditions","i","length","subCondition","push","serialize","serializeSimpleCondition","metadata","getAttributeMetadata","attribute","type","conditionObj","ConditionAttribute","ConditionOperator","ConditionValue","isDynamicValue","value","sina2Odata","serializeBetweenCondition","valueLow","valueHigh","rangeStartCondition","rangeEndCondition","Bt","ConditionValueHigh","serializer","__exports","__esModule"],"sources":["conditionSerializer.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport * as typeConverter from \"./typeConverter\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { Condition } from \"../../sina/Condition\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\nimport { InBetweenConditionInConsistent, UnknownComparisonOperatorError } from \"../../core/errors\";\nimport { ABAPODataComparisonOperator } from \"./ComparisonOperator\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\n\nexport interface SerializedBetweenCondition {\n    ConditionAttribute: string;\n    ConditionOperator: ABAPODataComparisonOperator.Bt;\n    ConditionValue: string | number | boolean;\n    ConditionValueHigh: string | number | boolean;\n    SubFilters: Condition[];\n}\n\nexport interface SerializedSimpleCondition {\n    ConditionAttribute: string;\n    ConditionOperator: string;\n    ConditionValue: string | number | boolean;\n    SubFilters: Condition[];\n}\n\nexport interface SerializedComplexCondition {\n    ActAsQueryPart: boolean;\n    Id: number;\n    OperatorType: string;\n    SubFilters: Condition[];\n}\n\nclass ConditionSerializer {\n    dataSource: DataSource;\n\n    constructor(dataSource: DataSource) {\n        this.dataSource = dataSource;\n    }\n\n    convertSinaToOdataOperator(sinaOperator: ComparisonOperator | LogicalOperator) {\n        switch (sinaOperator) {\n            case ComparisonOperator.Eq:\n                return \"EQ\";\n            case ComparisonOperator.Lt:\n                return \"LT\";\n            case ComparisonOperator.Gt:\n                return \"GT\";\n            case ComparisonOperator.Le:\n                return \"LE\";\n            case ComparisonOperator.Ge:\n                return \"GE\";\n            case ComparisonOperator.Co:\n                return \"EQ\";\n            case ComparisonOperator.Bw:\n                return \"EQ\";\n            case ComparisonOperator.Ew:\n                return \"EQ\";\n            case LogicalOperator.And:\n                return \"AND\";\n            case LogicalOperator.Or:\n                return \"OR\";\n            default:\n                throw new UnknownComparisonOperatorError(sinaOperator);\n        }\n    }\n\n    serializeComplexCondition(condition: ComplexCondition): SerializedComplexCondition {\n        const result = {\n            ActAsQueryPart: false,\n            Id: 1,\n            OperatorType: this.convertSinaToOdataOperator(condition.operator),\n            SubFilters: [],\n        };\n\n        const actAsQueryPartPath =\n            \"Schema[Namespace=ESH_SEARCH_SRV]>EntityType[Name=SearchFilter]>Property[Name=ActAsQueryPart]\";\n        if (condition.sina.provider.isQueryPropertySupported(actAsQueryPartPath)) {\n            result.ActAsQueryPart = true;\n        }\n\n        const subConditions = condition.conditions;\n        for (let i = 0; i < subConditions.length; ++i) {\n            const subCondition = subConditions[i];\n            result.SubFilters.push(this.serialize(subCondition));\n        }\n        return result;\n    }\n\n    serializeSimpleCondition(condition: SimpleCondition): SerializedSimpleCondition {\n        const metadata = this.dataSource.getAttributeMetadata(condition.attribute);\n        const type = metadata.type;\n        const conditionObj = {\n            ConditionAttribute: condition.attribute,\n            ConditionOperator: this.convertSinaToOdataOperator(condition.operator),\n            ConditionValue: condition.isDynamicValue\n                ? condition.value\n                : typeConverter.sina2Odata(type, condition.value, {\n                      operator: condition.operator,\n                  }),\n            SubFilters: [],\n        };\n\n        return conditionObj;\n    }\n\n    serializeBetweenCondition(condition: ComplexCondition): SerializedBetweenCondition {\n        let valueLow;\n        let valueHigh;\n\n        const rangeStartCondition = condition.conditions[0];\n        const rangeEndCondition = condition.conditions[1];\n        if (rangeStartCondition instanceof SimpleCondition && rangeEndCondition instanceof SimpleCondition) {\n            const metadata = this.dataSource.getAttributeMetadata(rangeStartCondition.attribute);\n            const type = metadata.type;\n\n            if (rangeStartCondition.operator === ComparisonOperator.Ge) {\n                valueLow = rangeStartCondition.value;\n                valueHigh = rangeEndCondition.value;\n            } else {\n                valueLow = rangeEndCondition.value;\n                valueHigh = rangeStartCondition.value;\n            }\n            const conditionObj = {\n                ConditionAttribute: rangeStartCondition.attribute,\n                ConditionOperator: ABAPODataComparisonOperator.Bt,\n                ConditionValue: typeConverter.sina2Odata(type, valueLow),\n                ConditionValueHigh: typeConverter.sina2Odata(type, valueHigh),\n                SubFilters: [],\n            };\n\n            return conditionObj;\n        }\n\n        throw new InBetweenConditionInConsistent();\n    }\n\n    serialize(\n        condition: Condition\n    ): SerializedSimpleCondition | SerializedComplexCondition | SerializedBetweenCondition {\n        if (condition instanceof ComplexCondition) {\n            if (\n                condition.operator === LogicalOperator.And &&\n                condition.conditions[0] &&\n                (condition.conditions[0].operator === ComparisonOperator.Ge ||\n                    condition.conditions[0].operator === ComparisonOperator.Gt ||\n                    condition.conditions[0].operator === ComparisonOperator.Le ||\n                    condition.conditions[0].operator === ComparisonOperator.Lt)\n            ) {\n                if (condition.conditions.length === 1) {\n                    // condition example: \"\" ... \"100\"\n                    return this.serializeSimpleCondition(condition.conditions[0] as SimpleCondition);\n                }\n                // condition example: \"10\" ... \"100\"\n                return this.serializeBetweenCondition(condition);\n            }\n            return this.serializeComplexCondition(condition);\n        }\n        // condition example: \"USA\"\n        if (condition instanceof SimpleCondition) {\n            return this.serializeSimpleCondition(condition);\n        }\n    }\n}\n\nexport function serialize(\n    dataSource: DataSource,\n    condition: Condition\n): SerializedSimpleCondition | SerializedComplexCondition | SerializedBetweenCondition {\n    const serializer = new ConditionSerializer(dataSource);\n    return serializer.serialize(condition);\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,gMAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAKSC,EAAkBP,EAAA,4BAGlBQ,EAAgBN,EAAA,0BAEhBO,EAAeN,EAAA,yBACfO,EAA8BN,EAAA,wCAAEO,EAA8BP,EAAA,wCAC9DQ,EAA2BP,EAAA,qCAC3BQ,EAAeP,EAAA,mBAwBxB,MAAMQ,EACFC,WAEAC,YAAYD,GACRE,KAAKF,WAAaA,CACtB,CAEAG,2BAA2BC,GACvB,OAAQA,GACJ,KAAKZ,EAAmBa,GACpB,MAAO,KACX,KAAKb,EAAmBc,GACpB,MAAO,KACX,KAAKd,EAAmBe,GACpB,MAAO,KACX,KAAKf,EAAmBgB,GACpB,MAAO,KACX,KAAKhB,EAAmBiB,GACpB,MAAO,KACX,KAAKjB,EAAmBkB,GACpB,MAAO,KACX,KAAKlB,EAAmBmB,GACpB,MAAO,KACX,KAAKnB,EAAmBoB,GACpB,MAAO,KACX,KAAKd,EAAgBe,IACjB,MAAO,MACX,KAAKf,EAAgBgB,GACjB,MAAO,KACX,QACI,MAAM,IAAIlB,EAA+BQ,GAErD,CAEAW,0BAA0BC,GACtB,MAAMC,EAAS,CACXC,eAAgB,MAChBC,GAAI,EACJC,aAAclB,KAAKC,2BAA2Ba,EAAUK,UACxDC,WAAY,IAGhB,MAAMC,EACF,+FACJ,GAAIP,EAAUQ,KAAKC,SAASC,yBAAyBH,GAAqB,CACtEN,EAAOC,eAAiB,IAC5B,CAEA,MAAMS,EAAgBX,EAAUY,WAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAcG,SAAUD,EAAG,CAC3C,MAAME,EAAeJ,EAAcE,GACnCZ,EAAOK,WAAWU,KAAK9B,KAAK+B,UAAUF,GAC1C,CACA,OAAOd,CACX,CAEAiB,yBAAyBlB,GACrB,MAAMmB,EAAWjC,KAAKF,WAAWoC,qBAAqBpB,EAAUqB,WAChE,MAAMC,EAAOH,EAASG,KACtB,MAAMC,EAAe,CACjBC,mBAAoBxB,EAAUqB,UAC9BI,kBAAmBvC,KAAKC,2BAA2Ba,EAAUK,UAC7DqB,eAAgB1B,EAAU2B,eACpB3B,EAAU4B,MACV1D,EAAc2D,WAAWP,EAAMtB,EAAU4B,MAAO,CAC5CvB,SAAUL,EAAUK,WAE9BC,WAAY,IAGhB,OAAOiB,CACX,CAEAO,0BAA0B9B,GACtB,IAAI+B,EACJ,IAAIC,EAEJ,MAAMC,EAAsBjC,EAAUY,WAAW,GACjD,MAAMsB,EAAoBlC,EAAUY,WAAW,GAC/C,GAAIqB,aAA+BvD,GAAmBwD,aAA6BxD,EAAiB,CAChG,MAAMyC,EAAWjC,KAAKF,WAAWoC,qBAAqBa,EAAoBZ,WAC1E,MAAMC,EAAOH,EAASG,KAEtB,GAAIW,EAAoB5B,WAAa7B,EAAmBiB,GAAI,CACxDsC,EAAWE,EAAoBL,MAC/BI,EAAYE,EAAkBN,KAClC,KAAO,CACHG,EAAWG,EAAkBN,MAC7BI,EAAYC,EAAoBL,KACpC,CACA,MAAML,EAAe,CACjBC,mBAAoBS,EAAoBZ,UACxCI,kBAAmB5C,EAA4BsD,GAC/CT,eAAgBxD,EAAc2D,WAAWP,EAAMS,GAC/CK,mBAAoBlE,EAAc2D,WAAWP,EAAMU,GACnD1B,WAAY,IAGhB,OAAOiB,CACX,CAEA,MAAM,IAAI5C,CACd,CAEAsC,UACIjB,GAEA,GAAIA,aAAqBvB,EAAkB,CACvC,GACIuB,EAAUK,WAAavB,EAAgBe,KACvCG,EAAUY,WAAW,KACpBZ,EAAUY,WAAW,GAAGP,WAAa7B,EAAmBiB,IACrDO,EAAUY,WAAW,GAAGP,WAAa7B,EAAmBe,IACxDS,EAAUY,WAAW,GAAGP,WAAa7B,EAAmBgB,IACxDQ,EAAUY,WAAW,GAAGP,WAAa7B,EAAmBc,IAC9D,CACE,GAAIU,EAAUY,WAAWE,SAAW,EAAG,CAEnC,OAAO5B,KAAKgC,yBAAyBlB,EAAUY,WAAW,GAC9D,CAEA,OAAO1B,KAAK4C,0BAA0B9B,EAC1C,CACA,OAAOd,KAAKa,0BAA0BC,EAC1C,CAEA,GAAIA,aAAqBtB,EAAiB,CACtC,OAAOQ,KAAKgC,yBAAyBlB,EACzC,CACJ,EAGG,SAASiB,EACZjC,EACAgB,GAEA,MAAMqC,EAAa,IAAItD,EAAoBC,GAC3C,OAAOqD,EAAWpB,UAAUjB,EAChC,CAAC,IAAAsC,EAAA,CAAAC,WAAA,MAAAD,EAAArB,YAAA,OAAAqB,CAAA","ignoreList":[]}