{"version":3,"file":"NavigationTargetGenerator.js","names":["sap","ui","define","util","core","___JoinConditions","_____sina_SinaObject","JoinConditions","SinaObject","NavigationTargetGenerator","active","getPropertyMetadata","urlPrefix","navigationTargetTemplatesInitialized","navigationTargetTemplatesMap","objectTypeMap","ignoredSemanticObjectTypes","constructor","properties","super","this","checkActive","LastChangedByUser","CreationDate","CreatedByUser","sors","getUrlParameter","cleanup","registerObjectType","objectTypeMetadata","metadata","type","label","propertyMap","i","length","property","propertyMetadata","filterSemanticObjectType","name","semanticObjectType","finishRegistration","calculateNavigationTargetTemplates","joinConditionsMap","collectJoinConditions","createNavTargetTemplatesFromJoinConditions","sourceObjectType","objectTypeJoinConditionsMap","navigationTargets","targetObjectType","joinConditions","push","generateNavigationTargetTemplates","semanticObjectTypeMap","createIndex","objectType","collectJoinConditionsForObjectType","isEmptyObject","getJoinConditions","sina","navigationTargetGenerator","bind","propertyName","response","targetObjectTypeMap","targetObjectTypeMetadata","targetPropertyNameMap","targetPropertyName","targetProperty","request","add","sourcePropertyName","createIndexForObjectType","propertyNameMap","propertyFlag","formatItem","item","collectAttributes","data","attributes","attribute","id","detailAttributes","titleAttributes","generateNavigationTargetsForItem","navigationTargetTemplates","dataSource","undefined","formattedItem","navigationTargetTemplate","navigationTarget","generate","generateNavigationTargets","searchResultSet","items","setNavigationTargets","__exports","__esModule"],"sources":["NavigationTargetGenerator.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as util from \"../../../core/util\";\nimport * as core from \"../../../core/core\";\nimport { JoinConditions } from \"./JoinConditions\";\nimport { SinaObject, SinaObjectProperties } from \"../../../sina/SinaObject\";\n\nexport interface NavigationTargetGeneratorOptions extends SinaObjectProperties {\n    getPropertyMetadata: any;\n    urlPrefix: string;\n}\nexport class NavigationTargetGenerator extends SinaObject {\n    active: boolean;\n    getPropertyMetadata: any;\n    urlPrefix: string;\n    navigationTargetTemplatesInitialized: boolean;\n    navigationTargetTemplatesMap: Record<string, any>;\n    objectTypeMap: Record<string, any>;\n    ignoredSemanticObjectTypes: {\n        LastChangedByUser: boolean;\n        CreationDate: boolean;\n        CreatedByUser: boolean;\n    };\n\n    constructor(properties: NavigationTargetGeneratorOptions) {\n        super(properties);\n        this.active = this.checkActive();\n        this.getPropertyMetadata = properties.getPropertyMetadata;\n        this.urlPrefix = properties.urlPrefix;\n        this.navigationTargetTemplatesInitialized = false;\n        this.navigationTargetTemplatesMap = {};\n        this.objectTypeMap = {};\n        this.ignoredSemanticObjectTypes = {\n            LastChangedByUser: true,\n            CreationDate: true,\n            CreatedByUser: true,\n        };\n    }\n\n    checkActive() {\n        const sors = util.getUrlParameter(\"sors\");\n        if (sors === \"true\") {\n            return true;\n        }\n        return false;\n    }\n\n    cleanup() {\n        this.objectTypeMap = null;\n    }\n\n    registerObjectType(objectTypeMetadata) {\n        if (!this.active) {\n            return;\n        }\n        const metadata = {\n            type: objectTypeMetadata.type,\n            label: objectTypeMetadata.label,\n            propertyMap: {},\n        };\n        this.objectTypeMap[objectTypeMetadata.type] = metadata;\n        for (let i = 0; i < objectTypeMetadata.properties.length; ++i) {\n            const property = objectTypeMetadata.properties[i];\n            const propertyMetadata = this.getPropertyMetadata(property);\n            this.filterSemanticObjectType(propertyMetadata);\n            metadata.propertyMap[propertyMetadata.name] = propertyMetadata;\n        }\n    }\n\n    filterSemanticObjectType(property) {\n        if (this.ignoredSemanticObjectTypes[property.semanticObjectType]) {\n            delete property.semanticObjectType;\n        }\n    }\n\n    finishRegistration() {\n        if (!this.active) {\n            return;\n        }\n        this.calculateNavigationTargetTemplates();\n    }\n\n    calculateNavigationTargetTemplates() {\n        if (this.navigationTargetTemplatesInitialized) {\n            return;\n        }\n        const joinConditionsMap = this.collectJoinConditions();\n        this.navigationTargetTemplatesMap =\n            this.createNavTargetTemplatesFromJoinConditions(joinConditionsMap);\n        this.cleanup();\n        this.navigationTargetTemplatesInitialized = true;\n    }\n\n    createNavTargetTemplatesFromJoinConditions(joinConditionsMap) {\n        const navigationTargetTemplatesMap = {};\n        for (const sourceObjectType in joinConditionsMap) {\n            const objectTypeJoinConditionsMap = joinConditionsMap[sourceObjectType];\n            const navigationTargets = [];\n            for (const targetObjectType in objectTypeJoinConditionsMap) {\n                const joinConditions = objectTypeJoinConditionsMap[targetObjectType];\n                if (!joinConditions) {\n                    continue;\n                }\n                navigationTargets.push(...joinConditions.generateNavigationTargetTemplates());\n            }\n            if (navigationTargets.length !== 0) {\n                navigationTargetTemplatesMap[sourceObjectType] = navigationTargets;\n            }\n        }\n        return navigationTargetTemplatesMap;\n    }\n\n    collectJoinConditions() {\n        const semanticObjectTypeMap = this.createIndex();\n        const joinConditionsMap = {};\n        for (const objectType in this.objectTypeMap) {\n            const objectTypeJoinConditionsMap = this.collectJoinConditionsForObjectType(\n                semanticObjectTypeMap,\n                objectType\n            );\n            if (!core.isEmptyObject(objectTypeJoinConditionsMap)) {\n                joinConditionsMap[objectType] = objectTypeJoinConditionsMap;\n            }\n        }\n        return joinConditionsMap;\n    }\n\n    collectJoinConditionsForObjectType(semanticObjectTypeMap, objectType) {\n        const objectTypeJoinConditionsMap = {};\n        const objectTypeMetadata = this.objectTypeMap[objectType];\n        const getJoinConditions = function (targetObjectType) {\n            let joinConditions = objectTypeJoinConditionsMap[targetObjectType];\n            if (!joinConditions) {\n                joinConditions = new JoinConditions({\n                    sina: this.sina,\n                    navigationTargetGenerator: this,\n                    sourceObjectType: objectType,\n                    targetObjectType: targetObjectType,\n                });\n                objectTypeJoinConditionsMap[targetObjectType] = joinConditions;\n            }\n            return joinConditions;\n        }.bind(this);\n\n        for (const propertyName in objectTypeMetadata.propertyMap) {\n            const property = objectTypeMetadata.propertyMap[propertyName];\n            const semanticObjectType = property.semanticObjectType;\n\n            if (!property.response) {\n                continue;\n            }\n\n            if (!semanticObjectType) {\n                continue;\n            }\n\n            const targetObjectTypeMap = semanticObjectTypeMap[semanticObjectType];\n            for (const targetObjectType in targetObjectTypeMap) {\n                if (targetObjectType === objectTypeMetadata.type) {\n                    continue;\n                }\n                const targetObjectTypeMetadata = this.objectTypeMap[targetObjectType];\n                const targetPropertyNameMap = targetObjectTypeMap[targetObjectType];\n                for (const targetPropertyName in targetPropertyNameMap) {\n                    const targetProperty = targetObjectTypeMetadata.propertyMap[targetPropertyName];\n                    if (!targetProperty.request) {\n                        continue;\n                    }\n                    const joinConditions = getJoinConditions(targetObjectType);\n                    joinConditions.add({\n                        sourcePropertyName: propertyName,\n                        targetPropertyName: targetPropertyName,\n                        semanticObjectType: semanticObjectType,\n                    });\n                }\n            }\n        }\n\n        return objectTypeJoinConditionsMap;\n    }\n\n    createIndex() {\n        const semanticObjectTypeMap = {}; // semantic object type / business object type / property name\n        for (const objectType in this.objectTypeMap) {\n            this.createIndexForObjectType(semanticObjectTypeMap, objectType);\n        }\n        return semanticObjectTypeMap;\n    }\n\n    createIndexForObjectType(semanticObjectTypeMap, objectType) {\n        const objectTypeMetadata = this.objectTypeMap[objectType];\n\n        for (const propertyName in objectTypeMetadata.propertyMap) {\n            const property = objectTypeMetadata.propertyMap[propertyName];\n            const semanticObjectType = property.semanticObjectType;\n\n            if (!semanticObjectType) {\n                continue;\n            }\n\n            let objectTypeMap = semanticObjectTypeMap[semanticObjectType];\n            if (!objectTypeMap) {\n                objectTypeMap = {};\n                semanticObjectTypeMap[semanticObjectType] = objectTypeMap;\n            }\n\n            let propertyNameMap = objectTypeMap[objectTypeMetadata.type];\n            if (!propertyNameMap) {\n                propertyNameMap = {};\n                objectTypeMap[objectTypeMetadata.type] = propertyNameMap;\n            }\n\n            let propertyFlag = propertyNameMap[propertyName];\n            if (!propertyFlag) {\n                propertyFlag = true;\n                propertyNameMap[propertyName] = true;\n            }\n        }\n    }\n\n    formatItem(item) {\n        const collectAttributes = function (data, attributes) {\n            for (let i = 0; i < attributes.length; ++i) {\n                const attribute = attributes[i];\n                data[attribute.id] = attribute;\n            }\n        };\n        const data = {};\n        collectAttributes(data, item.detailAttributes);\n        collectAttributes(data, item.titleAttributes);\n        return data;\n    }\n\n    generateNavigationTargetsForItem(item) {\n        const navigationTargetTemplates = this.navigationTargetTemplatesMap[item.dataSource.id];\n        if (!navigationTargetTemplates) {\n            return undefined;\n        }\n        const formattedItem = this.formatItem(item);\n        const navigationTargets = [];\n        for (let i = 0; i < navigationTargetTemplates.length; ++i) {\n            const navigationTargetTemplate = navigationTargetTemplates[i];\n            const navigationTarget = navigationTargetTemplate.generate(formattedItem);\n            if (!navigationTarget) {\n                continue;\n            }\n            navigationTargets.push(navigationTarget);\n        }\n        return navigationTargets;\n    }\n\n    generateNavigationTargets(searchResultSet) {\n        if (!this.active) {\n            return;\n        }\n        for (let i = 0; i < searchResultSet.items.length; ++i) {\n            const item = searchResultSet.items[i];\n            const navigationTargets = this.generateNavigationTargetsForItem(item);\n            item.setNavigationTargets(navigationTargets);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}