{"version":3,"file":"DataSourceService.js","names":["sap","ui","define","___Util","____sina_DataSourceType","getMatchedStringValues","readFile","DataSourceType","DataSourceService","sina","dataSourceIds","constructor","this","loadDataSources","dataSources","some","dataSource","type","BusinessObject","dataSourceId","content","dataSourceFromJson","JSON","parse","getDataSourceById","find","id","getResponse","query","matchedDataSources","labelPlural","label","filter","searchTerm","length","push","results","totalCount","__exports","__esModule"],"sources":["DataSourceService.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { getMatchedStringValues, readFile } from \"./Util\";\nimport { DataSourceType } from \"../../sina/DataSourceType\";\n\nexport interface DataSourceResponse {\n    results: DataSource[]; // total results\n    totalCount: number;\n}\n\nexport class DataSourceService {\n    sina: Sina;\n    dataSourceIds = [] as string[];\n\n    constructor(sina: Sina, dataSourceIds: string[]) {\n        this.sina = sina;\n        this.dataSourceIds = dataSourceIds;\n    }\n\n    async loadDataSources(): Promise<void> {\n        // data sources have been loaded\n        if (this.sina.dataSources.some((dataSource) => dataSource.type === DataSourceType.BusinessObject)) {\n            return;\n        }\n\n        // data sources have not been loaded yet, load them from JSON files\n        for (const dataSourceId of this.dataSourceIds) {\n            const content = await readFile(\n                `/resources/sap/esh/search/ui/sinaNexTS/providers/sample2/data/${dataSourceId}.json`\n            );\n            this.sina.dataSourceFromJson(JSON.parse(content));\n        }\n    }\n\n    getDataSourceById(dataSourceId: string): DataSource {\n        return this.sina.dataSources.find((dataSource) => dataSource.id === dataSourceId);\n    }\n\n    getResponse(query: SuggestionQuery): DataSourceResponse {\n        const matchedDataSources = [];\n        for (const dataSource of this.sina.dataSources) {\n            if (\n                getMatchedStringValues([dataSource.labelPlural, dataSource.label], query.filter.searchTerm)\n                    .length > 0\n            ) {\n                matchedDataSources.push(dataSource);\n            }\n        }\n        return { results: matchedDataSources, totalCount: matchedDataSources.length };\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,gDAAAC,EAAAC,GAAA,mBAQSC,EAAsBF,EAAA,gCAAEG,EAAQH,EAAA,kBAChCI,EAAcH,EAAA,kBAOhB,MAAMI,EACTC,KACAC,cAAgB,GAEhBC,YAAYF,EAAYC,GACpBE,KAAKH,KAAOA,EACZG,KAAKF,cAAgBA,CACzB,CAEA,qBAAMG,GAEF,GAAID,KAAKH,KAAKK,YAAYC,KAAMC,GAAeA,EAAWC,OAASV,EAAeW,gBAAiB,CAC/F,MACJ,CAGA,IAAK,MAAMC,KAAgBP,KAAKF,cAAe,CAC3C,MAAMU,QAAgBd,EAClB,iEAAiEa,UAErEP,KAAKH,KAAKY,mBAAmBC,KAAKC,MAAMH,GAC5C,CACJ,CAEAI,kBAAkBL,GACd,OAAOP,KAAKH,KAAKK,YAAYW,KAAMT,GAAeA,EAAWU,KAAOP,EACxE,CAEAQ,YAAYC,GACR,MAAMC,EAAqB,GAC3B,IAAK,MAAMb,KAAcJ,KAAKH,KAAKK,YAAa,CAC5C,GACIT,EAAuB,CAACW,EAAWc,YAAad,EAAWe,OAAQH,EAAMI,OAAOC,YAC3EC,OAAS,EAChB,CACEL,EAAmBM,KAAKnB,EAC5B,CACJ,CACA,MAAO,CAAEoB,QAASP,EAAoBQ,WAAYR,EAAmBK,OACzE,EACH,IAAAI,EAAA,CAAAC,WAAA,MAAAD,EAAA9B,oBAAA,OAAA8B,CAAA","ignoreList":[]}