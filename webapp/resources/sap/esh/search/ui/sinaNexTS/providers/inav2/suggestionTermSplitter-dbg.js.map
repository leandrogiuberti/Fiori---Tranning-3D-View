{"version":3,"file":"suggestionTermSplitter-dbg.js","names":["sap","ui","define","____sina_SuggestionType","SuggestionType","SuggestionTermSplitter","provider","sina","constructor","split","term","splitPos","lastIndexOf","searchTerm","suggestionTerm","slice","replace","length","concatenate","splittedSuggestionTerm","suggestions","searchTerms","splittedSuggestionTerms","k","trim","push","regExp","RegExp","escapeRegExp","i","suggestion","suggestionType","SearchTerm","SearchTermAndDataSource","notFoundSearchTerms","j","test","filter","prefixBold","prefix","join","l","prefixBoldStr","label","childSuggestions","str","suggestionTermSplitter","splittedTerm","__exports","__esModule"],"sources":["suggestionTermSplitter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\nimport { Provider } from \"./Provider\";\n\nclass SuggestionTermSplitter {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    split(term) {\n        // split suggestions term into\n        // prefix = which is used as search term filter\n        // suffix = which is actually used as thes suggestion term\n        // split position is last space\n        // reason:\n        // document contains: \"Sally Spring\"\n        // search input box: sally  s-> suggestion sally spring\n        //                   spring s-> suggestion spring sally\n        // last suggestion would not happend when just using\n        // \"spring s \" as suggestion term\n\n        // check for last blank\n        const splitPos = term.lastIndexOf(\" \");\n        if (splitPos < 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split search term\n        let searchTerm = term.slice(0, splitPos);\n        searchTerm = searchTerm.replace(/\\s+$/, \"\"); // right trim\n        if (searchTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split suggestion term\n        let suggestionTerm = term.slice(splitPos);\n        suggestionTerm = suggestionTerm.replace(/^\\s+/, \"\"); // left trim\n        if (suggestionTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // return result\n        return {\n            searchTerm: searchTerm,\n            suggestionTerm: suggestionTerm,\n        };\n    }\n\n    concatenate(splittedSuggestionTerm, suggestions) {\n        // no search term -> nothing to do\n        if (!splittedSuggestionTerm.searchTerm) {\n            return;\n        }\n\n        // split search terms\n        let term;\n        const searchTerms = [];\n        const splittedSuggestionTerms = splittedSuggestionTerm.searchTerm.split(\" \");\n        for (let k = 0; k < splittedSuggestionTerms.length; k++) {\n            term = splittedSuggestionTerms[k];\n            term = term.trim();\n            searchTerms.push({\n                term: term,\n                regExp: new RegExp(this.escapeRegExp(term), \"i\"),\n            });\n        }\n\n        // process all suggestions\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n\n            // process only SearchTerm and SearchTermAndDataSource suggestions\n            if (\n                suggestion.suggestionType !== SuggestionType.SearchTerm &&\n                suggestion.suggestionType !== SuggestionType.SearchTermAndDataSource\n            ) {\n                continue;\n            }\n\n            // identify all search terms not included in suggestion\n            const notFoundSearchTerms = [];\n            for (let j = 0; j < searchTerms.length; ++j) {\n                const searchTerm = searchTerms[j];\n                if (!searchTerm.regExp.test(suggestion.filter.searchTerm)) {\n                    notFoundSearchTerms.push(searchTerm.term);\n                }\n            }\n\n            // prefix for suggestion = all search terms not included in suggestions\n            const prefixBold = [];\n            const prefix = notFoundSearchTerms.join(\" \");\n            for (let l = 0; l < notFoundSearchTerms.length; l++) {\n                term = notFoundSearchTerms[l];\n                /* eslint no-loop-func:0 */\n                prefixBold.push(\"<b>\" + term + \"</b>\");\n            }\n            const prefixBoldStr = prefixBold.join(\" \");\n            suggestion.label = prefixBoldStr + \" \" + suggestion.label;\n            suggestion.filter.searchTerm = suggestion.searchTerm =\n                prefix + \" \" + suggestion.filter.searchTerm;\n\n            // process children\n            this.concatenate(splittedSuggestionTerm, suggestion.childSuggestions);\n        }\n    }\n\n    escapeRegExp(str) {\n        /* eslint no-useless-escape:0 */\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n}\n\nexport function split(provider, term) {\n    const suggestionTermSplitter = new SuggestionTermSplitter(provider);\n    return suggestionTermSplitter.split(term);\n}\nexport function concatenate(provider, splittedTerm, suggestions) {\n    const suggestionTermSplitter = new SuggestionTermSplitter(provider);\n    return suggestionTermSplitter.concatenate(splittedTerm, suggestions);\n}\n"],"mappings":"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","ignoreList":[]}