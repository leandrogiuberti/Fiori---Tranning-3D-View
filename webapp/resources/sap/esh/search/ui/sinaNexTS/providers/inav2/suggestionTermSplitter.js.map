{"version":3,"file":"suggestionTermSplitter.js","names":["sap","ui","define","____sina_SuggestionType","SuggestionType","SuggestionTermSplitter","provider","sina","constructor","this","split","term","splitPos","lastIndexOf","searchTerm","suggestionTerm","slice","replace","length","concatenate","splittedSuggestionTerm","suggestions","searchTerms","splittedSuggestionTerms","k","trim","push","regExp","RegExp","escapeRegExp","i","suggestion","suggestionType","SearchTerm","SearchTermAndDataSource","notFoundSearchTerms","j","test","filter","prefixBold","prefix","join","l","prefixBoldStr","label","childSuggestions","str","suggestionTermSplitter","splittedTerm","__exports","__esModule"],"sources":["suggestionTermSplitter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\nimport { Provider } from \"./Provider\";\n\nclass SuggestionTermSplitter {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    split(term) {\n        // split suggestions term into\n        // prefix = which is used as search term filter\n        // suffix = which is actually used as thes suggestion term\n        // split position is last space\n        // reason:\n        // document contains: \"Sally Spring\"\n        // search input box: sally  s-> suggestion sally spring\n        //                   spring s-> suggestion spring sally\n        // last suggestion would not happend when just using\n        // \"spring s \" as suggestion term\n\n        // check for last blank\n        const splitPos = term.lastIndexOf(\" \");\n        if (splitPos < 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split search term\n        let searchTerm = term.slice(0, splitPos);\n        searchTerm = searchTerm.replace(/\\s+$/, \"\"); // right trim\n        if (searchTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split suggestion term\n        let suggestionTerm = term.slice(splitPos);\n        suggestionTerm = suggestionTerm.replace(/^\\s+/, \"\"); // left trim\n        if (suggestionTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // return result\n        return {\n            searchTerm: searchTerm,\n            suggestionTerm: suggestionTerm,\n        };\n    }\n\n    concatenate(splittedSuggestionTerm, suggestions) {\n        // no search term -> nothing to do\n        if (!splittedSuggestionTerm.searchTerm) {\n            return;\n        }\n\n        // split search terms\n        let term;\n        const searchTerms = [];\n        const splittedSuggestionTerms = splittedSuggestionTerm.searchTerm.split(\" \");\n        for (let k = 0; k < splittedSuggestionTerms.length; k++) {\n            term = splittedSuggestionTerms[k];\n            term = term.trim();\n            searchTerms.push({\n                term: term,\n                regExp: new RegExp(this.escapeRegExp(term), \"i\"),\n            });\n        }\n\n        // process all suggestions\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n\n            // process only SearchTerm and SearchTermAndDataSource suggestions\n            if (\n                suggestion.suggestionType !== SuggestionType.SearchTerm &&\n                suggestion.suggestionType !== SuggestionType.SearchTermAndDataSource\n            ) {\n                continue;\n            }\n\n            // identify all search terms not included in suggestion\n            const notFoundSearchTerms = [];\n            for (let j = 0; j < searchTerms.length; ++j) {\n                const searchTerm = searchTerms[j];\n                if (!searchTerm.regExp.test(suggestion.filter.searchTerm)) {\n                    notFoundSearchTerms.push(searchTerm.term);\n                }\n            }\n\n            // prefix for suggestion = all search terms not included in suggestions\n            const prefixBold = [];\n            const prefix = notFoundSearchTerms.join(\" \");\n            for (let l = 0; l < notFoundSearchTerms.length; l++) {\n                term = notFoundSearchTerms[l];\n                /* eslint no-loop-func:0 */\n                prefixBold.push(\"<b>\" + term + \"</b>\");\n            }\n            const prefixBoldStr = prefixBold.join(\" \");\n            suggestion.label = prefixBoldStr + \" \" + suggestion.label;\n            suggestion.filter.searchTerm = suggestion.searchTerm =\n                prefix + \" \" + suggestion.filter.searchTerm;\n\n            // process children\n            this.concatenate(splittedSuggestionTerm, suggestion.childSuggestions);\n        }\n    }\n\n    escapeRegExp(str) {\n        /* eslint no-useless-escape:0 */\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n}\n\nexport function split(provider, term) {\n    const suggestionTermSplitter = new SuggestionTermSplitter(provider);\n    return suggestionTermSplitter.split(term);\n}\nexport function concatenate(provider, splittedTerm, suggestions) {\n    const suggestionTermSplitter = new SuggestionTermSplitter(provider);\n    return suggestionTermSplitter.concatenate(splittedTerm, suggestions);\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,uCAAAC,GAAA,mBAMSC,EAAcD,EAAA,kBAGvB,MAAME,EACFC,SACAC,KAEAC,YAAYF,GACRG,KAAKH,SAAWA,EAChBG,KAAKF,KAAOD,EAASC,IACzB,CAEAG,MAAMC,GAaF,MAAMC,EAAWD,EAAKE,YAAY,KAClC,GAAID,EAAW,EAAG,CACd,MAAO,CACHE,WAAY,KACZC,eAAgBJ,EAExB,CAGA,IAAIG,EAAaH,EAAKK,MAAM,EAAGJ,GAC/BE,EAAaA,EAAWG,QAAQ,OAAQ,IACxC,GAAIH,EAAWI,SAAW,EAAG,CACzB,MAAO,CACHJ,WAAY,KACZC,eAAgBJ,EAExB,CAGA,IAAII,EAAiBJ,EAAKK,MAAMJ,GAChCG,EAAiBA,EAAeE,QAAQ,OAAQ,IAChD,GAAIF,EAAeG,SAAW,EAAG,CAC7B,MAAO,CACHJ,WAAY,KACZC,eAAgBJ,EAExB,CAGA,MAAO,CACHG,WAAYA,EACZC,eAAgBA,EAExB,CAEAI,YAAYC,EAAwBC,GAEhC,IAAKD,EAAuBN,WAAY,CACpC,MACJ,CAGA,IAAIH,EACJ,MAAMW,EAAc,GACpB,MAAMC,EAA0BH,EAAuBN,WAAWJ,MAAM,KACxE,IAAK,IAAIc,EAAI,EAAGA,EAAID,EAAwBL,OAAQM,IAAK,CACrDb,EAAOY,EAAwBC,GAC/Bb,EAAOA,EAAKc,OACZH,EAAYI,KAAK,CACbf,KAAMA,EACNgB,OAAQ,IAAIC,OAAOnB,KAAKoB,aAAalB,GAAO,MAEpD,CAGA,IAAK,IAAImB,EAAI,EAAGA,EAAIT,EAAYH,SAAUY,EAAG,CACzC,MAAMC,EAAaV,EAAYS,GAG/B,GACIC,EAAWC,iBAAmB5B,EAAe6B,YAC7CF,EAAWC,iBAAmB5B,EAAe8B,wBAC/C,CACE,QACJ,CAGA,MAAMC,EAAsB,GAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAYJ,SAAUkB,EAAG,CACzC,MAAMtB,EAAaQ,EAAYc,GAC/B,IAAKtB,EAAWa,OAAOU,KAAKN,EAAWO,OAAOxB,YAAa,CACvDqB,EAAoBT,KAAKZ,EAAWH,KACxC,CACJ,CAGA,MAAM4B,EAAa,GACnB,MAAMC,EAASL,EAAoBM,KAAK,KACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAoBjB,OAAQwB,IAAK,CACjD/B,EAAOwB,EAAoBO,GAE3BH,EAAWb,KAAK,MAAQf,EAAO,OACnC,CACA,MAAMgC,EAAgBJ,EAAWE,KAAK,KACtCV,EAAWa,MAAQD,EAAgB,IAAMZ,EAAWa,MACpDb,EAAWO,OAAOxB,WAAaiB,EAAWjB,WACtC0B,EAAS,IAAMT,EAAWO,OAAOxB,WAGrCL,KAAKU,YAAYC,EAAwBW,EAAWc,iBACxD,CACJ,CAEAhB,aAAaiB,GAET,OAAOA,EAAI7B,QAAQ,sCAAuC,OAC9D,EAGG,SAASP,EAAMJ,EAAUK,GAC5B,MAAMoC,EAAyB,IAAI1C,EAAuBC,GAC1D,OAAOyC,EAAuBrC,MAAMC,EACxC,CACO,SAASQ,EAAYb,EAAU0C,EAAc3B,GAChD,MAAM0B,EAAyB,IAAI1C,EAAuBC,GAC1D,OAAOyC,EAAuB5B,YAAY6B,EAAc3B,EAC5D,CAAC,IAAA4B,EAAA,CAAAC,WAAA,MAAAD,EAAAvC,QAAAuC,EAAA9B,cAAA,OAAA8B,CAAA","ignoreList":[]}