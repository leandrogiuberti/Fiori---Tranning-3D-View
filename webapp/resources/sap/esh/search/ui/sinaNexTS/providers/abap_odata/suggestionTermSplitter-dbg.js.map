{"version":3,"file":"suggestionTermSplitter-dbg.js","names":["sap","ui","define","____sina_SuggestionType","SuggestionType","isSuggestionWithFilter","suggestion","type","SearchTerm","SearchTermAndDataSource","SuggestionTermSplitter","split","term","splitPos","lastIndexOf","searchTerm","suggestionTerm","slice","replace","length","concatenate","splittedSuggestionTerm","suggestions","searchTerms","splittedSuggestionTerms","k","trim","push","regExp","RegExp","escapeRegExp","i","notFoundSearchTerms","j","test","filter","prefixBold","prefix","join","l","prefixBoldStr","label","childSuggestions","str","suggestionTermSplitter","splittedTerm","__exports","__esModule"],"sources":["suggestionTermSplitter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSourceSuggestion } from \"../../sina/DataSourceSuggestion\";\nimport { SearchTermAndDataSourceSuggestion } from \"../../sina/SearchTermAndDataSourceSuggestion\";\nimport { SearchTermSuggestion } from \"../../sina/SearchTermSuggestion\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\n\ninterface ISplittedSuggestionTerm {\n    searchTerm: string;\n    suggestionTerm: string;\n}\n\nfunction isSuggestionWithFilter(\n    suggestion: unknown\n): suggestion is SearchTermSuggestion | SearchTermAndDataSourceSuggestion {\n    return (\n        typeof suggestion === \"object\" &&\n        suggestion !== null &&\n        \"type\" in suggestion &&\n        (suggestion.type === SuggestionType.SearchTerm ||\n            suggestion.type === SuggestionType.SearchTermAndDataSource)\n    );\n}\n\nclass SuggestionTermSplitter {\n    split(term: string): { searchTerm: string | null; suggestionTerm: string } {\n        // check for last blank\n        const splitPos = term.lastIndexOf(\" \");\n        if (splitPos < 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split search term\n        let searchTerm = term.slice(0, splitPos);\n        searchTerm = searchTerm.replace(/\\s+$/, \"\"); // right trim\n        if (searchTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // split suggestion term\n        let suggestionTerm = term.slice(splitPos);\n        suggestionTerm = suggestionTerm.replace(/^\\s+/, \"\"); // left trim\n        if (suggestionTerm.length === 0) {\n            return {\n                searchTerm: null,\n                suggestionTerm: term,\n            };\n        }\n\n        // return result\n        return {\n            searchTerm: searchTerm,\n            suggestionTerm: suggestionTerm,\n        };\n    }\n\n    concatenate(\n        splittedSuggestionTerm: ISplittedSuggestionTerm,\n        suggestions: (SearchTermSuggestion | SearchTermAndDataSourceSuggestion | DataSourceSuggestion)[]\n    ) {\n        // no search term -> nothing to do\n        if (!splittedSuggestionTerm.searchTerm) {\n            return;\n        }\n\n        // split search terms\n        let term: string;\n        const searchTerms: Array<{ term: string; regExp: RegExp }> = [];\n        const splittedSuggestionTerms = splittedSuggestionTerm.searchTerm.split(\" \");\n        for (let k = 0; k < splittedSuggestionTerms.length; k++) {\n            term = splittedSuggestionTerms[k];\n            term = term.trim();\n            searchTerms.push({\n                term: term,\n                regExp: new RegExp(this.escapeRegExp(term), \"i\"),\n            });\n        }\n\n        // process all suggestions\n        for (let i = 0; i < suggestions.length; ++i) {\n            const suggestion = suggestions[i];\n\n            if (!isSuggestionWithFilter(suggestion)) {\n                continue;\n            }\n\n            // identify all search terms not included in suggestion\n            const notFoundSearchTerms = [];\n            for (let j = 0; j < searchTerms.length; ++j) {\n                const searchTerm = searchTerms[j];\n                if (!searchTerm.regExp.test(suggestion.filter.searchTerm)) {\n                    notFoundSearchTerms.push(searchTerm.term);\n                }\n            }\n\n            // prefix for suggestion = all search terms not included in suggestions\n            const prefixBold = [];\n            const prefix = notFoundSearchTerms.join(\" \");\n            for (let l = 0; l < notFoundSearchTerms.length; l++) {\n                term = notFoundSearchTerms[l];\n                /* eslint no-loop-func:0 */\n                prefixBold.push(\"<b>\" + term + \"</b>\");\n            }\n            const prefixBoldStr = prefixBold.join(\" \");\n            suggestion.label = prefixBoldStr + \" \" + suggestion.label;\n            suggestion.filter.searchTerm = suggestion.searchTerm =\n                prefix + \" \" + suggestion.filter.searchTerm;\n\n            // process children\n            if (suggestion.childSuggestions && suggestion.childSuggestions.length > 0) {\n                this.concatenate(\n                    splittedSuggestionTerm,\n                    suggestion.childSuggestions as (\n                        | SearchTermSuggestion\n                        | SearchTermAndDataSourceSuggestion\n                        | DataSourceSuggestion\n                    )[]\n                );\n            }\n        }\n    }\n\n    escapeRegExp(str: string): string {\n        /* eslint no-useless-escape:0 */\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n}\n\n/**\n * Splits a suggestion term into\n * prefix = which is used as search term filter\n * suffix = which is actually used as thes suggestion term\n * split position is last space\n * reason:\n * document contains: \"Sally Spring\"\n * search input box: sally  s-> suggestion sally spring\n *                   spring s-> suggestion spring sally\n * last suggestion would not happen when just using\n * \"spring s \" as suggestion term\n * @param term suggestion term to split\n * @returns a splitted suggestion term which contains the search term and the suggestion term\n */\nexport function split(term: string) {\n    const suggestionTermSplitter = new SuggestionTermSplitter();\n    return suggestionTermSplitter.split(term);\n}\n\nexport function concatenate(\n    splittedTerm: ISplittedSuggestionTerm,\n    suggestions: (SearchTermSuggestion | SearchTermAndDataSourceSuggestion | DataSourceSuggestion)[]\n) {\n    const suggestionTermSplitter = new SuggestionTermSplitter();\n    return suggestionTermSplitter.concatenate(splittedTerm, suggestions);\n}\n"],"mappings":"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","ignoreList":[]}