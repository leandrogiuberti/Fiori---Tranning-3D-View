{"version":3,"file":"HierarchyMetadataParser-dbg.js","names":["sap","ui","define","____sina_HierarchyDisplayType","HierarchyDisplayType","HierarchyMetadataParser","jQuery","constructor","parse","entityTypeName","hierarchAnnotationNode","that","hierarchyDefinitionsMap","find","each","hierarchyDefinition","parseRecord","attributeName","recordNode","name","displayType","DynamicHierarchyFacet","isHierarchyDefinition","parentAttributeName","childAttributeName","attr","StaticHierarchyFacet","HierarchyResultView","Object","assign","parseRecurse","calculateIsHierarchyDefinition","endsWith","slice","replace","recurseNode","result","parseCollection","collectionNode","text","__exports","__esModule"],"sources":["HierarchyMetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { HierarchyDisplayType } from \"../../sina/HierarchyDisplayType\";\n\nexport interface HierarchyDefinition {\n    name: string;\n    attributeName: string;\n    displayType?: HierarchyDisplayType;\n    isHierarchyDefinition: boolean;\n    parentAttributeName: string;\n    childAttributeName: string;\n}\n\nexport class HierarchyMetadataParser {\n    jQuery: JQueryStatic;\n    constructor(jQuery: JQueryStatic) {\n        this.jQuery = jQuery;\n    }\n    parse(entityTypeName: string, hierarchAnnotationNode: Element): { [name: string]: HierarchyDefinition } {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const hierarchyDefinitionsMap = {};\n        that.jQuery(hierarchAnnotationNode)\n            .find(\">Collection\")\n            .each(function () {\n                that.jQuery(this)\n                    .find(\">Record\")\n                    .each(function () {\n                        const hierarchyDefinition = that.parseRecord(entityTypeName, this);\n                        hierarchyDefinitionsMap[hierarchyDefinition.attributeName] = hierarchyDefinition;\n                    });\n            });\n        return hierarchyDefinitionsMap;\n    }\n\n    parseRecord(entityTypeName: string, recordNode: Element): HierarchyDefinition {\n        const hierarchyDefinition: HierarchyDefinition = {\n            name: \"\", // name of hierarchy\n            attributeName: \"\", // name of attribute\n            displayType: HierarchyDisplayType.DynamicHierarchyFacet,\n            isHierarchyDefinition: false, // entity set represents the hierarchy (self reference)\n            parentAttributeName: \"\",\n            childAttributeName: \"\",\n        };\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        that.jQuery(recordNode)\n            .find(\">PropertyValue\")\n            .each(function () {\n                switch (that.jQuery(this).attr(\"Property\")) {\n                    case \"Definition\":\n                        hierarchyDefinition.name = that.jQuery(this).attr(\"String\");\n                        break;\n                    case \"Name\":\n                        hierarchyDefinition.attributeName = that.jQuery(this).attr(\"String\");\n                        break;\n                    case \"displayType\":\n                        switch (that.jQuery(this).attr(\"String\")) {\n                            case \"TREE\":\n                                hierarchyDefinition.displayType = HierarchyDisplayType.StaticHierarchyFacet;\n                                break;\n                            case \"FLAT\":\n                                hierarchyDefinition.displayType = HierarchyDisplayType.HierarchyResultView;\n                                break;\n                        }\n                        break;\n                    case \"Recurse\":\n                        Object.assign(hierarchyDefinition, that.parseRecurse(this));\n                }\n            });\n        hierarchyDefinition.isHierarchyDefinition = that.calculateIsHierarchyDefinition(\n            entityTypeName,\n            hierarchyDefinition.name\n        );\n\n        // this is a helper hierarchy datasource, no displayType\n        // displayType is defined by the hierarchy attribute of the main datasource\n        if (hierarchyDefinition.isHierarchyDefinition) {\n            delete hierarchyDefinition.displayType;\n        }\n        return hierarchyDefinition;\n    }\n\n    calculateIsHierarchyDefinition(entityTypeName: string, name: string): boolean {\n        // normalize entityTypeName\n        if (entityTypeName.endsWith(\"Type\")) {\n            entityTypeName = entityTypeName.slice(0, -4);\n        }\n        // normalize hierarchy name\n        name = name.replace(/[.:]/g, \"\");\n        return entityTypeName === name;\n    }\n\n    parseRecurse(recurseNode: Element): { parentAttributeName: string; childAttributeName: string } {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const result = { parentAttributeName: \"\", childAttributeName: \"\" };\n        that.jQuery(recurseNode)\n            .find(\"PropertyValue\")\n            .each(function () {\n                switch (that.jQuery(this).attr(\"Property\")) {\n                    case \"Parent\":\n                        that.jQuery(this)\n                            .find(\"Collection\")\n                            .each(function () {\n                                result.parentAttributeName = that.parseCollection(this);\n                            });\n                        break;\n                    case \"Child\":\n                        that.jQuery(this)\n                            .find(\">Collection\")\n                            .each(function () {\n                                result.childAttributeName = that.parseCollection(this);\n                            });\n                }\n            });\n        return result;\n    }\n\n    parseCollection(collectionNode: Element): string {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        let attributeName;\n        that.jQuery(collectionNode)\n            .find(\">PropertyPath\")\n            .each(function () {\n                attributeName = that.jQuery(this).text();\n            });\n        return attributeName;\n    }\n}\n"],"mappings":"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","ignoreList":[]}