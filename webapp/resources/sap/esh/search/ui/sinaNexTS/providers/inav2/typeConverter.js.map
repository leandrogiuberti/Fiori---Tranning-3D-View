{"version":3,"file":"typeConverter.js","names":["sap","ui","define","sinaUtil","____sina_AttributeType","____sina_ComparisonOperator","____core_errors","AttributeType","ComparisonOperator","DateConversionError","NotImplementedError","TimeConversionError","UnknownAttributeTypeError","sina2Ina","attributeType","value","context","Double","toString","Integer","String","this","sina2InaString","ImageUrl","ImageBlob","GeoJson","Date","sina2InaDate","Time","sina2InaTime","Timestamp","sina2InaTimestamp","ina2Sina","parseFloat","parseInt","ina2SinaDate","ina2SinaTime","ina2SinaTimestamp","trim","year","month","day","hour","minute","seconds","microseconds","indexOf","slice","d","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","result","addLeadingZeros","length","operator","Lt","Le","convertOperator2Wildcards","__exports","__esModule"],"sources":["typeConverter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as sinaUtil from \"../../sina/util\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport {\n    DateConversionError,\n    NotImplementedError,\n    TimeConversionError,\n    UnknownAttributeTypeError,\n} from \"../../core/errors\";\nimport { Value } from \"../../sina/types\";\n\nexport function sina2Ina(attributeType: AttributeType, value: Value, context?: unknown): string {\n    context = context || {};\n    switch (attributeType) {\n        case AttributeType.Double:\n            return value.toString();\n        case AttributeType.Integer:\n            return value.toString();\n        case AttributeType.String:\n            return this.sina2InaString(value, context);\n        case AttributeType.ImageUrl:\n            return value as string;\n        case AttributeType.ImageBlob:\n            throw new NotImplementedError();\n        case AttributeType.GeoJson:\n            return value as string;\n        case AttributeType.Date:\n            return this.sina2InaDate(value, context);\n        case AttributeType.Time:\n            return this.sina2InaTime(value);\n        case AttributeType.Timestamp:\n            return this.sina2InaTimestamp(value);\n        default:\n            throw new UnknownAttributeTypeError(attributeType);\n    }\n}\n\nexport function ina2Sina(attributeType: AttributeType, value: string) {\n    // TODO: actually the return type is Value but it leads to a lot of type issues\n    switch (attributeType) {\n        case AttributeType.Double:\n            return parseFloat(value);\n        case AttributeType.Integer:\n            return parseInt(value, 10);\n        case AttributeType.String:\n            return value;\n        case AttributeType.ImageUrl:\n            return value;\n        case AttributeType.ImageBlob:\n            throw new NotImplementedError();\n        case AttributeType.GeoJson:\n            return value;\n        case AttributeType.Date:\n            return this.ina2SinaDate(value);\n        case AttributeType.Time:\n            return this.ina2SinaTime(value);\n        case AttributeType.Timestamp:\n            return this.ina2SinaTimestamp(value);\n        default:\n            throw new UnknownAttributeTypeError(attributeType);\n    }\n}\n\nexport function ina2SinaTimestamp(value): Date {\n    value = value.trim();\n\n    let year, month, day, hour, minute, seconds, microseconds;\n    if (value.indexOf(\"-\") >= 0) {\n        // ina:2017-01-01 00:00:00.0000000\n        // sina: Date object\n        year = parseInt(value.slice(0, 4), 10);\n        month = parseInt(value.slice(5, 7), 10);\n        day = parseInt(value.slice(8, 10), 10);\n        hour = parseInt(value.slice(11, 13), 10);\n        minute = parseInt(value.slice(14, 16), 10);\n        seconds = parseInt(value.slice(17, 19), 10);\n        microseconds = parseInt(value.slice(20, 20 + 6), 10);\n    } else {\n        // ina:20170201105936.0000000\n        // sina: Date object\n        year = parseInt(value.slice(0, 4), 10);\n        month = parseInt(value.slice(4, 6), 10);\n        day = parseInt(value.slice(6, 8), 10);\n        hour = parseInt(value.slice(8, 10), 10);\n        minute = parseInt(value.slice(10, 12), 10);\n        seconds = parseInt(value.slice(12, 14), 10);\n        microseconds = parseInt(value.slice(15, 15 + 6), 10);\n    }\n\n    const d = new Date(Date.UTC(year, month - 1, day, hour, minute, seconds, microseconds / 1000));\n    return d;\n}\n\nexport function sina2InaTimestamp(value): string {\n    // ina:2017-01-01 00:00:00.0000000\n    // sina: Date object\n    const year = value.getUTCFullYear();\n    const month = value.getUTCMonth() + 1;\n    const day = value.getUTCDate();\n    const hour = value.getUTCHours();\n    const minute = value.getUTCMinutes();\n    const seconds = value.getUTCSeconds();\n    const microseconds = value.getUTCMilliseconds() * 1000;\n\n    const result =\n        this.addLeadingZeros(year.toString(), 4) +\n        \"-\" +\n        this.addLeadingZeros(month.toString(), 2) +\n        \"-\" +\n        this.addLeadingZeros(day.toString(), 2) +\n        \" \" +\n        this.addLeadingZeros(hour.toString(), 2) +\n        \":\" +\n        this.addLeadingZeros(minute.toString(), 2) +\n        \":\" +\n        this.addLeadingZeros(seconds.toString(), 2) +\n        \".\" +\n        this.addLeadingZeros(microseconds.toString(), 6);\n\n    return result;\n}\n\nexport function ina2SinaTime(value): string {\n    value = value.trim();\n    if (value.length === 6) {\n        // conversion for result list\n        // ina: hhmmss\n        // sina: hh:mm:ss\n        return value.slice(0, 2) + \":\" + value.slice(2, 4) + \":\" + value.slice(4, 6);\n    }\n    if (value.length === 8) {\n        // conversion for facet item\n        // ina: hh:mm:ss\n        // sina: hh:mm:ss\n        return value.slice(0, 2) + \":\" + value.slice(3, 5) + \":\" + value.slice(6, 8);\n    }\n    throw new TimeConversionError(value);\n}\n\nexport function sina2InaTime(value): string {\n    // conversion for filter condition\n    // ina: hhmmss\n    // sina: hh:mm:ss\n    return value.slice(0, 2) + \":\" + value.slice(3, 5) + \":\" + value.slice(6, 8);\n}\n\nexport function ina2SinaDate(value): string {\n    value = value.trim();\n    if (value.length === 8) {\n        // conversion for result list\n        // ina: YYYYMMDD\n        // sina: YYYY/MM/DD\n        return value.slice(0, 4) + \"/\" + value.slice(4, 6) + \"/\" + value.slice(6, 8);\n    }\n    if (value.length === 27) {\n        // conversion for facet item\n        // ina: YYYY-MM-DD HH:MM:SS.SSSSSSS\n        // sina: YYYY/MM/DD\n        return value.slice(0, 4) + \"/\" + value.slice(5, 7) + \"/\" + value.slice(8, 10);\n    }\n    throw new DateConversionError(value);\n}\n\nexport function sina2InaDate(value, context): string {\n    // conversion for filter condition\n    // ina: YYYY-MM-DD HH:MM:SS.SSSSSSS\n    // sina: YYYY/MM/DD\n    let result = value.slice(0, 4) + \"-\" + value.slice(5, 7) + \"-\" + value.slice(8, 10);\n    if (context.operator === ComparisonOperator.Lt || context.operator === ComparisonOperator.Le) {\n        result += \" 23:59:59.0000000\";\n    } else {\n        result += \" 00:00:00.0000000\";\n    }\n    return result;\n}\n\nexport function sina2InaString(value: string, context): string {\n    return sinaUtil.convertOperator2Wildcards(value, context.operator);\n}\n\nexport function addLeadingZeros(value: string, length: int): string {\n    return \"00000000000000\".slice(0, length - value.length) + value;\n}\n"],"mappings":"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","ignoreList":[]}