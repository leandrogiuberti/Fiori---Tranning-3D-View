{"version":3,"file":"MetadataParser-dbg.js","names":["sap","ui","define","____core_Log","____sina_AttributeType","____sina_AttributeFormatType","____sina_MatchingStrategy","____core_errors","____sina_i18n","Log","AttributeType","AttributeFormatType","MatchingStrategy","UnknownAttributeTypeError","UnknownPresentationUsageError","getText","AccessUsageConversionMap","PresentationUsageConversionMap","MetadataParser","log","provider","presentationUsageConversionMap","accessUsageConversionMap","sina","constructor","_setAnnotationValue","annotations","annotationName","value","annotationParts","split","annotationPart","annotationPointer","dummyEntryName","i","length","undefined","Array","isArray","push","concat","propName","fillMetadataBuffer","dataSource","attributes","attributesMetadata","id","attributeMetadataMap","cdsAnnotations","dataSourceAnnotations","attributeAnnotations","attributeMetadata","attributeMap","fillPublicMetadataBuffer","e","error","label","toString","parser","_createCDSAnnotationsParser","parseCDSAnnotationsForDataSource","displayOrderIndex","displayOrder","labelRaw","annotationsAttr","typeAndFormat","_parseAttributeTypeAndFormat","type","publicAttributeMetadata","_createAttributeMetadata","isKey","isSortable","usage","_parseUsage","format","matchingStrategy","_parseMatchingStrategy","isHierarchy","hierarchyDefinition","hierarchyName","name","hierarchyDisplayType","displayType","isHierarchyDefinition","isHierarchyDataSource","hierarchyAttribute","attributeName","_private","semanticObjectType","SemanticObjectTypeId","supportsTextSearch","Text","Exact","attributeId","presentationUsage","toUpperCase","ImageUrl","String","LongText","SEMANTICS","CONTACT","PHOTO","IMAGEURL","ImageBlob","Double","Integer","Time","Date","Timestamp","GeoJson","startsWith","warn","Title","Detail","isFacet","AdvancedSearch","facetPosition","iconUrlAttributeName","facetIconUrlAttributeName","Facet","isFilteringAttribute","parseDynamicMetadata","searchResult","metadata","dataSourceId","dataSourceMetadata","dynamicAttributeMetadata","parseDynamicAttributeMetadata","getDataSource","$Type","getAttributeMetadata","dynamic","getUniqueDataSourceFromSearchResult","data","items","prevDataSourceId","item","context","__exports","__esModule"],"sources":["MetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Log } from \"../../core/Log\";\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport { HANAOdataMetadataResponse, Provider } from \"./Provider\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { AttributeFormatType } from \"../../sina/AttributeFormatType\";\nimport { MatchingStrategy } from \"../../sina/MatchingStrategy\";\nimport { Sina } from \"../../sina/Sina\";\nimport { UnknownAttributeTypeError, UnknownPresentationUsageError } from \"../../core/errors\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { HANAOdataSearchResponseResult } from \"./Provider\";\nimport { AttributeUsageType } from \"../../sina/AttributeUsageType\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { HierarchyDefinition } from \"./HierarchyMetadataParser\";\nimport { getText } from \"../../sina/i18n\";\n\nenum AccessUsageConversionMap {\n    \"AUTO_FACET\",\n    \"SUGGESTION\",\n}\n\nenum PresentationUsageConversionMap {\n    \"TITLE\",\n    \"SUMMARY\",\n    \"DETAIL\",\n    \"IMAGE\",\n    \"THUMBNAIL\",\n    \"HIDDEN\",\n}\n\nexport interface Attribute {\n    isFilteringAttribute: boolean;\n    labelRaw: string;\n    label: string;\n    type: string;\n    presentationUsage: string[];\n    // accessUsage: [],\n    isFacet: boolean;\n    facetPosition: number;\n    facetIconUrlAttributeName: string;\n    isSortable: boolean;\n    supportsTextSearch: boolean;\n    displayOrder: number;\n    annotationsAttr: any;\n    unknownAnnotation: unknown[];\n    hierarchyDefinition: Map<string, HierarchyDefinition>;\n    isKey: boolean;\n}\n\nexport interface EntitySet {\n    schema: string;\n    keys: string[];\n    attributeMap: Map<string, Attribute>;\n    resourceBundle?: string; // url pointing to resource bundle\n    labelResourceBundle?: string;\n    label: string;\n    labelPlural: string;\n    annotations: Record<string, object>;\n    hierarchyDefinitionsMap: object;\n    icon: string;\n    name: string;\n    dataSource: DataSource;\n}\n\nexport interface ServerMetadataMap {\n    businessObjectMap: Map<string, unknown>; // entity map with attributes and datasource id as key\n    businessObjectList: unknown[]; // list of all entities for convenience\n    dataSourceMap: Map<string, DataSource>; // datasource map with entityset name as key\n    dataSourcesList: DataSource[]; // list of all datasources for convenience\n}\n\nexport abstract class MetadataParser {\n    log: Log;\n    provider: Provider;\n    presentationUsageConversionMap: PresentationUsageConversionMap;\n    accessUsageConversionMap: AccessUsageConversionMap;\n    sina: Sina;\n\n    constructor(provider: Provider) {\n        this.log = new Log(\"hana_odata metadata parser\");\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    abstract fireRequest(client: Client, url: string): Promise<unknown>;\n    abstract parseResponse(metaXML: unknown): Promise<ServerMetadataMap>;\n\n    // annotations: Object to store parsed annotations as properties\n    // annotationName: Name of annotation in Dot Notation: UI.IDENTIFICATION.POSITION\n    // value: can be a single value, like a string, or an array of objects, like UI.IDENTIFICATION = [ { POSITION: 5 }, { POSITION: 6, TYPE:AS_CONNECTED_FIELD, VALUEQUALIFIER:'somegroup' } ]\n    protected _setAnnotationValue(annotations: object, annotationName: string, value): void {\n        const annotationParts = annotationName.split(\".\");\n        let annotationPart;\n        let annotationPointer = annotations;\n        const dummyEntryName = \"___temporaryDummyEntriesForArrays___\";\n        let i;\n\n        // Step 01: create object structure for annoation\n        for (i = 0; i < annotationParts.length - 1; i++) {\n            annotationPart = annotationParts[i];\n            if (annotationPointer[annotationPart] === undefined) {\n                annotationPointer[annotationPart] = {};\n                annotationPointer = annotationPointer[annotationPart];\n            } else if (Array.isArray(annotationPointer[annotationPart])) {\n                // at this level an array was created for a previous annotation with the same name\n                // thus we need to create a dummy entry in that array for merging the current\n                // annotation into the array structure\n                annotationPointer[dummyEntryName] = annotationPointer[dummyEntryName] || {};\n                if (!annotationPointer[dummyEntryName][annotationPart]) {\n                    annotationPointer[dummyEntryName][annotationPart] = {};\n                    annotationPointer[annotationPart].push(annotationPointer[dummyEntryName][annotationPart]);\n                }\n                annotationPointer = annotationPointer[dummyEntryName][annotationPart];\n            } else if (typeof annotationPointer[annotationPart] === \"object\") {\n                annotationPointer = annotationPointer[annotationPart];\n            } else if (typeof annotationPointer[annotationPart] === \"boolean\") {\n                // for handling something like this:\n                //      @Semantics.URL: true\n                //      @Semantics.URL.mimeType: \"anotherAttribute\"\n                // if @Semantics.URL.mimeType is set, than @Semantics.URL is implicitely assumed to be 'true'\n                annotationPointer[annotationPart] = {};\n                annotationPointer = annotationPointer[annotationPart];\n            } else {\n                // should never happen!\n                return;\n            }\n        }\n\n        // Step 02: set value for annotation.\n        if (i < annotationParts.length) {\n            annotationPart = annotationParts[i];\n            if (annotationPointer[annotationPart] === undefined) {\n                // value can be simple value, like string, or array\n                annotationPointer[annotationPart] = value;\n            } else if (Array.isArray(annotationPointer[annotationPart])) {\n                // existing value could be an array, in which case the new value needs to be mixed in\n                if (Array.isArray(value)) {\n                    // new value is an array, which can be appended to the existing array value\n                    annotationPointer[annotationPart] = annotationPointer[annotationPart].concat(value);\n                } else {\n                    // new value is a simple value. In this case create a dummy entry in the existing array\n                    // (or use the dummy entry which had been created before) and add the new value to that entry.\n                    annotationPointer[dummyEntryName] = annotationPointer[dummyEntryName] || {};\n                    if (!annotationPointer[dummyEntryName][annotationPart]) {\n                        annotationPointer[dummyEntryName][annotationPart] = value;\n                        annotationPointer[annotationPart].push(\n                            annotationPointer[dummyEntryName][annotationPart]\n                        );\n                    } else {\n                        for (const propName in value) {\n                            if (!annotationPointer[dummyEntryName][annotationPart][propName]) {\n                                annotationPointer[dummyEntryName][annotationPart][propName] = value[propName];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public fillMetadataBuffer(dataSource: DataSource, attributes: EntitySet): void {\n        if (dataSource.attributesMetadata[0].id !== \"dummy\") {\n            // check if buffer already filled\n            return;\n        }\n        dataSource.attributesMetadata = [];\n        dataSource.attributeMetadataMap = {};\n\n        const cdsAnnotations = {\n            dataSourceAnnotations: {}, // Key-Value-Map for CDS annotations\n            attributeAnnotations: {}, // Key-Value-Map (keys: attribute names) of Key-Value-Maps (keys: annotation names) for CDS annotations\n        };\n\n        cdsAnnotations.dataSourceAnnotations = dataSource.annotations;\n\n        for (const attributeMetadata in attributes.attributeMap) {\n            try {\n                this.fillPublicMetadataBuffer(\n                    dataSource,\n                    attributes.attributeMap[attributeMetadata],\n                    cdsAnnotations\n                );\n            } catch (e) {\n                // not allowed by linter:\n                this.log.error(\n                    \"Attribue \" +\n                        attributeMetadata +\n                        \" of DataSource \" +\n                        dataSource.label +\n                        \" can not be filled in meta data\" +\n                        e.toString()\n                );\n            }\n        }\n\n        const parser = this.sina._createCDSAnnotationsParser({\n            dataSource: dataSource,\n            cdsAnnotations: cdsAnnotations,\n        });\n        parser.parseCDSAnnotationsForDataSource();\n    }\n\n    public fillPublicMetadataBuffer(\n        dataSource: DataSource,\n        attributeMetadata: HANAOdataMetadataResponse,\n        cdsAnnotations\n    ) {\n        const displayOrderIndex = attributeMetadata.displayOrder;\n\n        // Prepare annotations for being passed over to the CDS annotations parser\n        const attributeAnnotations = (cdsAnnotations.attributeAnnotations[attributeMetadata.labelRaw] = {});\n\n        for (const propName in attributeMetadata.annotationsAttr) {\n            attributeAnnotations[propName] = attributeMetadata.annotationsAttr[propName];\n        }\n\n        const typeAndFormat = this._parseAttributeTypeAndFormat(\n            attributeMetadata,\n            dataSource,\n            attributeMetadata.labelRaw\n        );\n\n        if (typeAndFormat && typeAndFormat.type) {\n            const publicAttributeMetadata = this.sina._createAttributeMetadata({\n                id: attributeMetadata.labelRaw,\n                label: attributeMetadata.label || attributeMetadata.labelRaw,\n                isKey: attributeMetadata.isKey || false,\n                isSortable: attributeMetadata.isSortable,\n                usage: this._parseUsage(attributeMetadata, displayOrderIndex) || {},\n                type: typeAndFormat.type,\n                format: typeAndFormat.format,\n                matchingStrategy: this._parseMatchingStrategy(attributeMetadata),\n                isHierarchy: !!attributeMetadata.hierarchyDefinition,\n                hierarchyName: attributeMetadata?.hierarchyDefinition?.name,\n                hierarchyDisplayType: attributeMetadata?.hierarchyDefinition?.displayType,\n            });\n\n            // move flag isHierarchyDefinition from attribute to datasource\n            if (\n                attributeMetadata.hierarchyDefinition &&\n                attributeMetadata.hierarchyDefinition?.isHierarchyDefinition\n            ) {\n                dataSource.isHierarchyDataSource = true;\n                dataSource.hierarchyName = attributeMetadata.hierarchyDefinition?.name;\n                dataSource.hierarchyAttribute = attributeMetadata.hierarchyDefinition?.attributeName;\n                dataSource.hierarchyDisplayType = attributeMetadata.hierarchyDefinition?.displayType;\n            }\n            publicAttributeMetadata._private.semanticObjectType = attributeMetadata.SemanticObjectTypeId;\n\n            dataSource.attributesMetadata.push(publicAttributeMetadata);\n            dataSource.attributeMetadataMap[publicAttributeMetadata.id] = publicAttributeMetadata;\n        }\n    }\n\n    private _parseMatchingStrategy(attributeMetadata: HANAOdataMetadataResponse): MatchingStrategy {\n        if (attributeMetadata.supportsTextSearch === true) {\n            return MatchingStrategy.Text;\n        }\n        return MatchingStrategy.Exact;\n    }\n\n    private _parseAttributeTypeAndFormat(\n        attributeMetadata: Partial<HANAOdataMetadataResponse>, // server side attribute metadata\n        dataSource: DataSource,\n        attributeId: string\n    ): {\n        type: AttributeType;\n        format?: AttributeFormatType;\n    } {\n        for (let i = 0; i < attributeMetadata.presentationUsage.length; i++) {\n            const presentationUsage = attributeMetadata.presentationUsage[i] || \"\";\n            switch (presentationUsage.toUpperCase()) {\n                case \"SUMMARY\":\n                    continue;\n                case \"DETAIL\":\n                    continue;\n                case \"TITLE\":\n                    continue;\n                case \"HIDDEN\":\n                    continue;\n                case \"FACTSHEET\":\n                    continue;\n                case \"THUMBNAIL\":\n                case \"IMAGE\":\n                    return {\n                        type: AttributeType.ImageUrl,\n                    };\n                case \"LONGTEXT\":\n                    return {\n                        type: AttributeType.String,\n                        format: AttributeFormatType.LongText,\n                    };\n                default:\n                    throw new UnknownPresentationUsageError(presentationUsage);\n            }\n        }\n\n        switch (attributeMetadata.type) {\n            case \"Edm.Binary\":\n                if (attributeMetadata.annotationsAttr) {\n                    if (\n                        (attributeMetadata.annotationsAttr.SEMANTICS &&\n                            attributeMetadata.annotationsAttr.SEMANTICS.CONTACT &&\n                            attributeMetadata.annotationsAttr.SEMANTICS.CONTACT.PHOTO) ||\n                        (attributeMetadata.annotationsAttr.SEMANTICS &&\n                            attributeMetadata.annotationsAttr.SEMANTICS.IMAGEURL)\n                    ) {\n                        return {\n                            type: AttributeType.ImageBlob,\n                        };\n                    }\n                }\n                return {\n                    type: AttributeType.String,\n                };\n                break;\n            case \"Edm.String\":\n            case \"Edm.PrimitiveType\":\n            case \"Edm.Boolean\":\n            case \"Edm.Byte\":\n            case \"Edm.Guid\":\n                return {\n                    type: AttributeType.String,\n                };\n            case \"Edm.Double\":\n            case \"Edm.Decimal\":\n            case \"Edm.Float\":\n            case \"Edm.Single\":\n            case \"Edm.SingleRange\":\n                return {\n                    type: AttributeType.Double,\n                };\n            case \"Edm.Int16\":\n            case \"Edm.Int32\":\n            case \"Edm.Int64\":\n                return {\n                    type: AttributeType.Integer,\n                };\n            // case \"Edm.Time\": // HANA 1.0 types not supported anymore\n            case \"Edm.TimeOfDay\":\n                return {\n                    type: AttributeType.Time,\n                };\n            case \"Edm.Date\":\n                return {\n                    type: AttributeType.Date,\n                };\n            // case \"Edm.DateTime\": // HANA 1.0 types not supported anymore\n            case \"Edm.DateTimeOffset\":\n                return {\n                    type: AttributeType.Timestamp,\n                };\n            case \"Collection(Edm.String)\":\n                return {\n                    type: AttributeType.String,\n                };\n            case \"Edm.GeometryPoint\":\n            case \"Edm.GeographyPoint\":\n            case \"GeoJson\":\n                return {\n                    type: AttributeType.GeoJson,\n                };\n            default:\n                if (attributeMetadata.type && attributeMetadata.type.startsWith(\"Collection\")) {\n                    this.log.warn(\n                        \"Unsupported data type \" +\n                            attributeMetadata.type +\n                            \" of attribute \" +\n                            attributeMetadata.labelRaw +\n                            \" in \" +\n                            dataSource.label\n                    );\n                    return {\n                        type: AttributeType.String,\n                    };\n                }\n\n                throw new UnknownAttributeTypeError(\n                    getText(\"error.sina.unsupportedOdataType\", [\n                        attributeMetadata.type,\n                        attributeMetadata.labelRaw || attributeId,\n                        dataSource.label,\n                    ])\n                );\n        }\n    }\n\n    private _parseUsage(attributeMetadata, displayOrderIndex: number): AttributeUsageType {\n        const usage: AttributeUsageType = {};\n        for (let i = 0; i < attributeMetadata.presentationUsage.length; i++) {\n            const id = attributeMetadata.presentationUsage[i].toUpperCase() || \"\";\n            if (id === \"TITLE\") {\n                usage.Title = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n\n            if (\n                id === \"SUMMARY\" ||\n                id === \"DETAIL\" ||\n                id === \"IMAGE\" ||\n                id === \"THUMBNAIL\" ||\n                id === \"LONGTEXT\"\n                //||id === \"#HIDDEN\"\n            ) {\n                usage.Detail = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n        }\n\n        if (attributeMetadata.isFacet) {\n            usage.AdvancedSearch = {\n                displayOrder: attributeMetadata.facetPosition || displayOrderIndex || 100,\n                iconUrlAttributeName: attributeMetadata.facetIconUrlAttributeName,\n            };\n            usage.Facet = {\n                displayOrder: attributeMetadata.facetPosition || displayOrderIndex || 100,\n                iconUrlAttributeName: attributeMetadata.facetIconUrlAttributeName,\n            };\n        }\n\n        if (attributeMetadata.isFilteringAttribute) {\n            usage.AdvancedSearch = {\n                displayOrder: attributeMetadata.facetPosition || displayOrderIndex || 100,\n                iconUrlAttributeName: attributeMetadata.facetIconUrlAttributeName,\n            };\n        }\n\n        return usage;\n    }\n\n    public parseDynamicMetadata(searchResult: HANAOdataSearchResponseResult) {\n        // check that we have dynamic metadata\n        if (!searchResult) {\n            return;\n        }\n        const metadata = searchResult[\"@com.sap.vocabularies.Search.v1.Metadata\"];\n        if (!metadata) {\n            return;\n        }\n\n        // generate attributes from dynamic metadata\n        for (const dataSourceId in metadata) {\n            const dataSourceMetadata = metadata[dataSourceId];\n            for (const attributeId in dataSourceMetadata) {\n                if (attributeId === \"$Kind\") {\n                    continue;\n                }\n                const dynamicAttributeMetadata = dataSourceMetadata[attributeId];\n                this.parseDynamicAttributeMetadata(\n                    this.sina.getDataSource(dataSourceId),\n                    attributeId,\n                    dynamicAttributeMetadata\n                );\n            }\n        }\n    }\n\n    public parseDynamicAttributeMetadata(\n        dataSource: DataSource,\n        attributeId: string,\n        dynamicAttributeMetadata\n    ): void {\n        const typeAndFormat = this._parseAttributeTypeAndFormat(\n            {\n                presentationUsage: [],\n                type: dynamicAttributeMetadata.$Type,\n            },\n            dataSource,\n            attributeId\n        );\n\n        let attributeMetadata: AttributeMetadata;\n        try {\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n        } catch (e) {\n            this.log.warn(\"Error while getting attribute metadata: \" + e);\n        }\n\n        if (attributeMetadata) {\n            // update\n            if (!attributeMetadata._private.dynamic) {\n                return; // only update dynamic attributes\n            }\n            attributeMetadata.label = dynamicAttributeMetadata[\"@SAP.Common.Label\"];\n            attributeMetadata.type = typeAndFormat.type;\n            attributeMetadata.format = typeAndFormat?.format;\n            attributeMetadata.usage =\n                dynamicAttributeMetadata[\"@EnterpriseSearch.filteringFacet.default\"] === true\n                    ? {\n                          Facet: {\n                              displayOrder:\n                                  dynamicAttributeMetadata[\n                                      \"@EnterpriseSearch.filteringFacet.displayPosition\"\n                                  ] ||\n                                  attributeMetadata.usage?.Facet?.displayOrder ||\n                                  20,\n                              iconUrlAttributeName:\n                                  dynamicAttributeMetadata[\"@EnterpriseSearch.filteringFacet.iconUrl\"] ||\n                                  attributeMetadata.iconUrlAttributeName ||\n                                  \"\",\n                          },\n                      }\n                    : {};\n            attributeMetadata.isSortable =\n                dynamicAttributeMetadata[\"@EnterpriseSearchHana.isSortable\"] ||\n                attributeMetadata.isSortable ||\n                false;\n        } else {\n            // append\n            attributeMetadata = this.sina._createAttributeMetadata({\n                id: attributeId,\n                label: dynamicAttributeMetadata[\"@SAP.Common.Label\"],\n                isKey: false,\n                isSortable: dynamicAttributeMetadata[\"@EnterpriseSearchHana.isSortable\"] || false,\n                usage:\n                    dynamicAttributeMetadata[\"@EnterpriseSearch.filteringFacet.default\"] === true\n                        ? {\n                              Facet: {\n                                  displayOrder:\n                                      dynamicAttributeMetadata[\n                                          \"@EnterpriseSearch.filteringFacet.displayPosition\"\n                                      ] || 20,\n                                  iconUrlAttributeName:\n                                      dynamicAttributeMetadata[\"@EnterpriseSearch.filteringFacet.iconUrl\"] ||\n                                      \"\",\n                              },\n                          }\n                        : {},\n                type: typeAndFormat.type,\n                format: typeAndFormat?.format,\n                matchingStrategy: MatchingStrategy.Exact,\n                _private: {\n                    dynamic: true,\n                },\n            });\n            dataSource.attributesMetadata.push(attributeMetadata);\n            dataSource.attributeMetadataMap[attributeMetadata.id] = attributeMetadata;\n        }\n    }\n\n    public getUniqueDataSourceFromSearchResult(searchResult): DataSource {\n        const data = searchResult.data;\n        if (!data) {\n            return;\n        }\n        const items = data.value;\n        if (!items) {\n            return;\n        }\n        let dataSourceId, prevDataSourceId;\n        for (let i = 0; i < items.length; ++i) {\n            const item = items[i];\n            const context = item[\"@odata.context\"];\n            if (!context) {\n                return;\n            }\n            dataSourceId = context.split(\"#\")[1];\n            if (!dataSourceId) {\n                return;\n            }\n            if (prevDataSourceId && prevDataSourceId !== dataSourceId) {\n                return;\n            }\n            prevDataSourceId = dataSourceId;\n        }\n        return this.sina.getDataSource(dataSourceId);\n    }\n}\n"],"mappings":"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","ignoreList":[]}