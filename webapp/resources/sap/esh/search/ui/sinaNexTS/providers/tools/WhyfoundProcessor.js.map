{"version":3,"file":"WhyfoundProcessor.js","names":["sap","ui","define","____sina_SearchResultSetItemAttributeGroup","SearchResultSetItemAttributeGroup","WhyfoundProcessor","sina","constructor","this","processRegularWhyFoundAttributes","attributeName","structuredAttribute","whyFounds","metadata","attrWhyFound","attributeNameWhyfound","usage","Title","TitleDescription","Detail","calculateValueHighlighted","processAdditionalWhyfoundAttributes","searchResultSetItem","restWhyfoundAttribute","dataSource","getAttributeMetadata","attributeId","id","valueTemp","valueFormattedTemp","attributesMap","valueFormatted","JSON","stringify","valueHighlightedTemp","wAttribute","_createSearchResultSetItemAttribute","label","value","valueHighlighted","isHighlighted","originalAttribute","attributes","find","attr","detailAttributes","isAttributeDisplayed","undefined","push","_getFirstItemIfArray","Array","isArray","identifierHighlight","identifierSnippet","format","calIsHighlighted","length","indexOf","__exports","__esModule"],"sources":["WhyfoundProcessor.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\nimport { SearchResultSetItemAttributeGroup } from \"../../sina/SearchResultSetItemAttributeGroup\";\nimport { Sina } from \"../../sina/Sina\";\nimport { ODataValue } from \"../../sina/odatatypes\";\n\nexport class WhyfoundProcessor {\n    sina: Sina;\n\n    constructor(sina: Sina) {\n        this.sina = sina;\n    }\n\n    processRegularWhyFoundAttributes(\n        attributeName: string,\n        structuredAttribute: Record<\"value\", ODataValue>,\n        whyFounds: Record<string, ODataValue>,\n        metadata: AttributeMetadata\n    ): string {\n        let attrWhyFound;\n\n        // Process whyfound attributes which belongs to title, title description and detail\n        for (const attributeNameWhyfound in whyFounds) {\n            if (attributeNameWhyfound === attributeName && whyFounds[attributeNameWhyfound][0]) {\n                // replace attribue value with whyfound value\n                attrWhyFound = whyFounds[attributeNameWhyfound][0];\n                if (metadata.usage.Title || metadata.usage.TitleDescription || metadata.usage.Detail) {\n                    delete whyFounds[attributeNameWhyfound];\n                }\n            }\n        }\n\n        attrWhyFound = this.calculateValueHighlighted(structuredAttribute, metadata, attrWhyFound);\n        return attrWhyFound;\n    }\n\n    // Precondition: attribute group has been prepared in itemPostParser\n    // If a remaining whyfound attribute (after the regular processing above) is no displayAttribute in a attribute group\n    // it's either not modeled for display or just a request attribute.\n    // Add it to detail attributes and will be displayed in case of no hit in other displayed attributes.\n    async processAdditionalWhyfoundAttributes(\n        whyFounds: Record<string, string | ODataValue>,\n        searchResultSetItem: SearchResultSetItem\n    ): Promise<SearchResultSetItem> {\n        // Check whether there is still whyfoundattr remaining\n        // If yes, it means hits in request attributes\n        // Convert it to attribute and concat it to detailAttributes\n        // No display order normally, candidates for the additional line for whyfounds\n        for (const restWhyfoundAttribute in whyFounds) {\n            if (whyFounds[restWhyfoundAttribute] && whyFounds[restWhyfoundAttribute][0]) {\n                const metadata = searchResultSetItem.dataSource.getAttributeMetadata(\n                    restWhyfoundAttribute\n                ) as AttributeMetadata;\n                const attributeId = metadata.id || restWhyfoundAttribute;\n                const valueTemp = whyFounds[restWhyfoundAttribute][0];\n                let valueFormattedTemp = \"\";\n                if (searchResultSetItem.attributesMap[restWhyfoundAttribute]) {\n                    valueFormattedTemp =\n                        searchResultSetItem.attributesMap[restWhyfoundAttribute].valueFormatted;\n                    valueFormattedTemp =\n                        typeof valueFormattedTemp === \"string\"\n                            ? valueFormattedTemp\n                            : JSON.stringify(valueFormattedTemp);\n                }\n                const valueHighlightedTemp =\n                    typeof valueTemp === \"string\" ? valueTemp : JSON.stringify(valueTemp);\n                const wAttribute = this.sina._createSearchResultSetItemAttribute({\n                    id: attributeId,\n                    label: metadata.label || restWhyfoundAttribute,\n                    value: \"\",\n                    valueFormatted: valueFormattedTemp,\n                    valueHighlighted: valueHighlightedTemp,\n                    isHighlighted: true,\n                    metadata: metadata,\n                });\n\n                const originalAttribute = searchResultSetItem.attributes.find(\n                    (attr) => attr.id === attributeId\n                );\n\n                // If the attribute is already part of display attribute of a group\n                // it unnecessary to add it to detail attributes\n                if (\n                    searchResultSetItem.detailAttributes.find(\n                        (attr) =>\n                            attr instanceof SearchResultSetItemAttributeGroup &&\n                            attr.isAttributeDisplayed(attributeId)\n                    ) === undefined\n                ) {\n                    // If wAttribute is not in the original attributes, e.g. a request attribute, just add it\n                    if (originalAttribute === undefined) {\n                        searchResultSetItem.detailAttributes.push(wAttribute);\n                        searchResultSetItem.attributes.push(wAttribute);\n                        searchResultSetItem.attributesMap[attributeId] = wAttribute;\n                    } else if (originalAttribute.isHighlighted === true) {\n                        // Already highlighted originalAttribute\n                        searchResultSetItem.detailAttributes.push(originalAttribute);\n                    } else {\n                        // If wAttribute is already in the list of original attributes and not marked as highlighted yet,\n                        // replace valueHighlighted of originalAttribute from wAttribute and set isHighlighted to true\n                        originalAttribute.valueHighlighted = wAttribute.valueHighlighted;\n                        originalAttribute.isHighlighted = true;\n                        searchResultSetItem.detailAttributes.push(originalAttribute);\n                    }\n                }\n\n                delete whyFounds[restWhyfoundAttribute];\n            }\n        }\n        return searchResultSetItem;\n    }\n\n    _getFirstItemIfArray(value) {\n        if (Array.isArray(value)) {\n            value = value[0];\n        }\n        return value;\n    }\n\n    // valueHiglighted  =\n    // multiline: true => input.highlighted | input.snippet | why found\n    // multiline: false => input.snippet | input.highlighted | why found\n    calculateValueHighlighted(structuredAttribute, metadata: AttributeMetadata, attrWhyFound) {\n        const identifierHighlight = \"com.sap.vocabularies.Search.v1.Highlighted\";\n        const identifierSnippet = \"com.sap.vocabularies.Search.v1.Snippets\";\n        let value = \"\";\n        if (metadata.format === \"MultilineText\") {\n            value = structuredAttribute[identifierHighlight];\n            if (value) {\n                return this._getFirstItemIfArray(value);\n            }\n            value = structuredAttribute[identifierSnippet];\n            if (value) {\n                return this._getFirstItemIfArray(value);\n            }\n            return attrWhyFound;\n        }\n        value = structuredAttribute[identifierSnippet];\n        if (value) {\n            return this._getFirstItemIfArray(value);\n        }\n        value = structuredAttribute[identifierHighlight];\n        if (value) {\n            return this._getFirstItemIfArray(value);\n        }\n        return this._getFirstItemIfArray(attrWhyFound);\n    }\n\n    calIsHighlighted(attrWhyFound): boolean {\n        if (\n            typeof attrWhyFound === \"string\" &&\n            attrWhyFound.length > 0 &&\n            attrWhyFound.indexOf(\"<b>\") > -1 &&\n            attrWhyFound.indexOf(\"</b>\") > -1\n        ) {\n            return true;\n        }\n\n        // Must not come from Snippets and Highlighted\n        if (Array.isArray(attrWhyFound) && attrWhyFound.length > 0) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]}