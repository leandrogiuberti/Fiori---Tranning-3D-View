{"version":3,"file":"CDSAnnotationsParser.js","names":["sap","ui","define","_____sina_SinaObject","_____sina_AttributeGroupTextArrangement","_____sina_AttributeType","_____sina_AttributeFormatType","_____sina_AttributeSemanticsType","_____core_Log","SinaObject","AttributeGroupTextArrangement","AttributeType","AttributeFormatType","AttributeSemanticsType","Log","CDSAnnotationsParser","_datasource","_cdsAnnotations","_parsedAttributes","_knownAttributeGroups","_knownAttributeGroupsArray","_attributeGroupReplacements","_AttributeUsagePrio","_detailUsageStubsMap","_detailUsageStubsPrioHigh","_detailUsageStubsPrioMedium","_detailUsageStubsPrioNone","_defaultTextArrangement","_parsingResult","log","constructor","properties","super","this","dataSource","cdsAnnotations","HIGH","MEDIUM","NONE","TextLast","parseCDSAnnotationsForDataSource","dataSourceIsCdsBased","detailAttributesAreSorted","titleAttributesAreSorted","_parseDefaultTextArrangement","_parseAttributeAnnotations","_parseDataSourceAnnotations","_addDetailUsageStub","attribute","displayOrder","prio","attributeId","undefined","id","usageStub","obsolete","push","_getDetailUsageStub","_setParsedAttribute","attributeName","toUpperCase","_getParsedAttribute","_setknownAttributeGroup","qualifier","attributeGroup","_getknownAttributeGroup","defaultTextArrangement","_deriveTextArrangementFromCdsAnnotation","dataSourceAnnotations","UI","TEXTARRANGEMENT","e","warn","Object","keys","length","headerInfo","HEADERINFO","title","TITLE","type","groupQualifier","TYPE","VALUEQUALIFIER","trim","usage","Title","titleAttributeName","VALUE","titleAttribute","urlAttributeName","URL","urlAttribute","Navigation","mainNavigation","description","DESCRIPTION","TitleDescription","titleDescriptionAttributeName","titleDescriptionAttribute","titleIconAttributeName","IMAGEURL","titleIconAttribute","sina","ImageUrl","attributeMetadataMap","_parseSingleAttribute","attributesMetadata","concat","assign","_sortAttributes","parsedAttribute","_getPropertyFromObject","attributeAnnotations","_parseSingleAnnotationOrArray","IDENTIFICATION","_parseIdentification","CONNECTEDFIELDS","_parseConnectedFields","_parseURLsForDocumentResultItemThumbnail","SEMANTICS","MULTILINETEXT","format","MultilineText","_parseSemantics","_parseDescriptionAttribute","OBJECTMODEL","connectedFields","QUALIFIER","attributesMap","NAME","_createAttributeGroup","GROUPLABEL","TEMPLATE","label","template","displayAttributes","_createAttributeGroupMetadata","Group","attributes","attributeGroupsMetadata","attributeGroupMetadataMap","nameOfAttributeInGroup","attributeGroupMembership","_createAttributeGroupMembership","group","nameInGroup","groups","identification","_parseAttributePositions","_parseIconUrlAttributeName","Array","isArray","i","ICONURL","iconUrlAttibuteName","iconUrlAttributeName","importance","IMPORTANCE","position","POSITION","Number","MAX_VALUE","_parsePosition","semantics","urlAttributeAnnotations","mimeTypeAttributeName","MIMETYPE","mimeTypeAttribute","suvUrlAttribute","suvMimeTypeAttribute","DocumentThumbnail","CONTACT","PHOTO","Round","ImageBlob","GIVENNAME","FirstName","FAMILYNAME","LastName","EMAIL","ADDRESS","EmailAddress","TELEPHONE","PhoneNr","HTTPURL","CURRENCYCODE","_private","isCurrency","UNITOFMEASURE","isUnitOfMeasure","unitOfMeasureAttribute","currencyCodeAttribute","unitOfMeasure","QUANTITY","isQuantity","_createAttributeGroupForParentChildAttributes","currencyCode","AMOUNT","objectModel","descriptionAttributeName","TEXT","ELEMENT","descriptionAttribute","textArrangement","useParentheses","parenthesesOpen","parenthesesClose","TextFirst","TextOnly","isDescription","cdsTextArrangement","TextSeparate","parentAttribute","childAttribute","qualifierSuffix","obsoleteUsageStub","_replaceAttributeWithGroup","attributeGroupReplacement","groupMembership","sortFunction","entry1","entry2","allEntries","sort","_allEntries","entry","Detail","annotation","parseFunction","j","apply","parseInt","isNaN","object","propertyName","toLowerCase","key","__exports","__esModule"],"sources":["CDSAnnotationsParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SinaObject, SinaObjectProperties } from \"../../../sina/SinaObject\";\nimport { DataSource } from \"../../../sina/DataSource\";\nimport { AttributeGroupTextArrangement } from \"../../../sina/AttributeGroupTextArrangement\";\nimport { AttributeType } from \"../../../sina/AttributeType\";\nimport { AttributeFormatType } from \"../../../sina/AttributeFormatType\";\nimport { AttributeSemanticsType } from \"../../../sina/AttributeSemanticsType\";\nimport { Log } from \"../../../core/Log\";\nimport { AttributeGroupMetadata } from \"../../../sina/AttributeGroupMetadata\";\n\nexport interface CDSAnnotations {\n    // JSON object representing the structure of CDS annotations\n    dataSourceAnnotations: {\n        UI?: {\n            TEXTARRANGEMENT?: string;\n            HEADERINFO?: {\n                TITLE?: {\n                    TYPE?: string;\n                    VALUE?: string;\n                    VALUEQUALIFIER?: string;\n                    URL?: string;\n                };\n                DESCRIPTION?: {\n                    TYPE?: string;\n                    VALUE?: string;\n                    VALUEQUALIFIER?: string;\n                };\n                IMAGEURL?: string;\n            };\n        };\n    };\n    // Key-Value-Map (keys: attribute names) of JSON objects representing the structure of CDS annotations per attribute\n    attributeAnnotations: Record<\n        string,\n        {\n            UI?: {\n                IDENTIFICATION?: {\n                    TYPE?: string;\n                    POSITION?: number;\n                    ICONURL?: string;\n                };\n                CONNECTEDFIELDS?: {\n                    QUALIFIER?: string;\n                    GROUPLABEL?: string;\n                    TEMPLATE?: string;\n                    NAME?: string;\n                };\n                MULTILINETEXT?: string;\n            };\n            SEMANTICS?: {\n                CONTACT?: {\n                    PHOTO?: string;\n                };\n                IMAGEURL?: string;\n                NAME?: {\n                    GIVENNAME?: string;\n                    FAMILYNAME?: string;\n                };\n                EMAIL?: {\n                    ADDRESS?: string;\n                };\n                TELEPHONE?: {\n                    TYPE?: string;\n                };\n                URL?: string;\n                CURRENCYCODE?: string;\n                UNITOFMEASURE?: string;\n                QUANTITY?: {\n                    UNITOFMEASURE?: string;\n                };\n                AMOUNT?: {\n                    CURRENCYCODE?: string;\n                };\n            };\n            OBJECTMODEL?: {\n                TEXT?: {\n                    ELEMENT?: string;\n                };\n            };\n        }\n    >;\n}\n\nexport interface CDSAnnotationsParserOptions extends SinaObjectProperties {\n    dataSource: DataSource;\n    cdsAnnotations: CDSAnnotations;\n}\n\nexport class CDSAnnotationsParser extends SinaObject {\n    private _datasource: DataSource;\n    private _cdsAnnotations: CDSAnnotations;\n    private _parsedAttributes: object;\n    private _knownAttributeGroups: object;\n    private _knownAttributeGroupsArray: any[];\n    private _attributeGroupReplacements: object;\n    private _AttributeUsagePrio: { HIGH: string; MEDIUM: string; NONE: string };\n    private _detailUsageStubsMap: object;\n    private _detailUsageStubsPrioHigh: any[];\n    private _detailUsageStubsPrioMedium: any[];\n    private _detailUsageStubsPrioNone: any[];\n    private _defaultTextArrangement: any;\n    private _parsingResult: {\n        dataSourceIsCdsBased: boolean;\n        detailAttributesAreSorted: boolean;\n        titleAttributesAreSorted: boolean;\n    };\n    private log: Log = new Log(\"hana odata cds annotations parser\");\n\n    constructor(properties: CDSAnnotationsParserOptions) {\n        super(properties);\n        this._datasource = properties.dataSource;\n        this._cdsAnnotations = properties.cdsAnnotations;\n\n        this._parsedAttributes = {};\n\n        this._knownAttributeGroups = {};\n        this._knownAttributeGroupsArray = [];\n\n        this._attributeGroupReplacements = {};\n\n        this._AttributeUsagePrio = {\n            HIGH: \"HIGH\",\n            MEDIUM: \"MEDIUM\",\n            NONE: \"NONE\",\n        };\n\n        /*\n                Example Usage Stub:\n                var usage = {\n                    attribute: <some attribute or attribute group object>,\n                    displayOrder: <integer vaue>,\n                    prio: <Enumeration this._AttributeUsagePrio>,\n                    obsolete: <boolean>\n                }\n             */\n        this._detailUsageStubsMap = {};\n        this._detailUsageStubsPrioHigh = [];\n        this._detailUsageStubsPrioMedium = [];\n        this._detailUsageStubsPrioNone = [];\n\n        this._defaultTextArrangement = AttributeGroupTextArrangement.TextLast;\n    }\n\n    /////////////////////////////////\n    // Main Parse Function\n    ///\n    parseCDSAnnotationsForDataSource() {\n        this._parsingResult = {\n            dataSourceIsCdsBased: false,\n            detailAttributesAreSorted: false,\n            titleAttributesAreSorted: false,\n        };\n\n        // CDS Annotations Object looks like:\n        // cdsAnnotations = {\n        //     dataSourceAnnotations: {}, // JSON object representing the structure of CDS annotations\n        //     attributeAnnotations: {} // Key-Value-Map (keys: attribute names) of JSON objects representing the structure of CDS annotations per attribute\n        // };\n\n        this._parseDefaultTextArrangement();\n        this._parseAttributeAnnotations();\n        this._parseDataSourceAnnotations();\n\n        return this._parsingResult;\n    }\n\n    //////////////////////////////////////////////////////////\n    // Setters and Getters for internal Variables\n    //////////////////////////////////////////////////////////\n\n    _addDetailUsageStub(attribute, displayOrder, prio) {\n        let attributeId;\n        if (typeof attribute === \"string\") {\n            attributeId = attribute;\n            attribute = undefined;\n        } else {\n            attributeId = attribute.id;\n        }\n        const usageStub = {\n            attribute: attribute,\n            displayOrder: displayOrder,\n            prio: prio,\n            obsolete: false,\n        };\n        this._detailUsageStubsMap[attributeId] = usageStub;\n        if (prio === this._AttributeUsagePrio.HIGH) {\n            this._detailUsageStubsPrioHigh.push(usageStub);\n        } else if (prio === this._AttributeUsagePrio.MEDIUM) {\n            this._detailUsageStubsPrioMedium.push(usageStub);\n        } else {\n            this._detailUsageStubsPrioNone.push(usageStub);\n        }\n    }\n\n    _getDetailUsageStub(attribute) {\n        if (!attribute) {\n            return undefined;\n        }\n        let attributeId;\n        if (typeof attribute === \"string\") {\n            attributeId = attribute;\n        } else {\n            attributeId = attribute.id;\n        }\n        return this._detailUsageStubsMap[attributeId];\n    }\n\n    _setParsedAttribute(attributeName, attribute) {\n        this._parsedAttributes[attributeName.toUpperCase()] = attribute;\n    }\n\n    _getParsedAttribute(attributeName) {\n        return this._parsedAttributes[attributeName.toUpperCase()];\n    }\n\n    _setknownAttributeGroup(qualifier, attributeGroup) {\n        this._knownAttributeGroups[qualifier.toUpperCase()] = attributeGroup;\n    }\n\n    _getknownAttributeGroup(qualifier) {\n        return this._knownAttributeGroups[qualifier.toUpperCase()];\n    }\n\n    ////////////////////////////////////////////////////\n    // Set default Text Arrangement for Descriptions\n    ///\n    _parseDefaultTextArrangement() {\n        try {\n            const defaultTextArrangement = this._deriveTextArrangementFromCdsAnnotation(\n                this._cdsAnnotations.dataSourceAnnotations.UI &&\n                    this._cdsAnnotations.dataSourceAnnotations.UI.TEXTARRANGEMENT\n            );\n            this._defaultTextArrangement = defaultTextArrangement || this._defaultTextArrangement;\n        } catch (e) {\n            this.log.warn(\"Could not parse default text arrangement for datasource: \" + e);\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////\n    // Parse Data Source Annotations\n    //////////////////////////////////////////////////////////////////////\n\n    _parseDataSourceAnnotations() {\n        if (Object.keys(this._cdsAnnotations.dataSourceAnnotations).length > 0) {\n            try {\n                const ui = this._cdsAnnotations.dataSourceAnnotations.UI;\n                const headerInfo = ui && ui.HEADERINFO;\n                const title = headerInfo && headerInfo.TITLE;\n                let type, groupQualifier, attributeGroup;\n\n                if (title) {\n                    type = title.TYPE && title.TYPE.toUpperCase();\n                    if (type === \"AS_CONNECTED_FIELDS\") {\n                        groupQualifier = title.VALUEQUALIFIER;\n                        if (groupQualifier && groupQualifier.trim().length > 0) {\n                            attributeGroup = this._getknownAttributeGroup(groupQualifier);\n                            if (attributeGroup) {\n                                //&& attributeGroup === titleAttribute.group) {\n                                attributeGroup.usage.Title = {\n                                    displayOrder: 1,\n                                };\n                            }\n                        }\n                    } else if (!type) {\n                        const titleAttributeName = title.VALUE;\n                        if (titleAttributeName) {\n                            const titleAttribute = this._getParsedAttribute(titleAttributeName);\n                            if (titleAttribute) {\n                                titleAttribute.usage.Title = {\n                                    displayOrder: 1,\n                                };\n                            }\n                        }\n                    }\n\n                    const urlAttributeName = title.URL;\n                    if (urlAttributeName) {\n                        const urlAttribute = this._getParsedAttribute(urlAttributeName);\n                        if (urlAttribute) {\n                            urlAttribute.usage.Navigation = {\n                                mainNavigation: true,\n                            };\n                        }\n                    }\n                }\n\n                const description = headerInfo && headerInfo.DESCRIPTION;\n                if (description) {\n                    type = description.TYPE;\n                    if (type === \"AS_CONNECTED_FIELDS\") {\n                        groupQualifier = description.VALUEQUALIFIER;\n                        if (groupQualifier && groupQualifier.trim().length > 0) {\n                            attributeGroup = this._getknownAttributeGroup(groupQualifier);\n                            if (attributeGroup) {\n                                //&& attributeGroup === titleAttribute.group) {\n                                attributeGroup.usage.TitleDescription = {\n                                    displayOrder: 1,\n                                };\n                            }\n                        }\n                    } else if (!type) {\n                        const titleDescriptionAttributeName = description.VALUE;\n                        if (titleDescriptionAttributeName) {\n                            const titleDescriptionAttribute = this._getParsedAttribute(\n                                titleDescriptionAttributeName\n                            );\n                            if (titleDescriptionAttribute) {\n                                titleDescriptionAttribute.usage.TitleDescription = {};\n                            }\n                        }\n                    }\n                }\n\n                const titleIconAttributeName = headerInfo && headerInfo.IMAGEURL;\n                if (titleIconAttributeName) {\n                    const titleIconAttribute = this._getParsedAttribute(titleIconAttributeName);\n                    if (titleIconAttribute) {\n                        titleIconAttribute.usage.Title = {};\n                        titleIconAttribute.type = this.sina.AttributeType.ImageUrl;\n                    }\n                }\n            } catch (e) {\n                this.log.warn(\"Could not parse attribute for datasource: \" + e);\n            }\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////\n    // Parse Attribute Annotations\n    //////////////////////////////////////////////////////////////////////\n\n    _parseAttributeAnnotations() {\n        for (const attributeId in this._datasource.attributeMetadataMap) {\n            this._parseSingleAttribute(attributeId);\n        }\n\n        this._datasource.attributesMetadata = this._datasource.attributesMetadata.concat(\n            this._knownAttributeGroupsArray\n        );\n        this._datasource.attributeMetadataMap = Object.assign(\n            this._datasource.attributeMetadataMap,\n            this._knownAttributeGroups\n        );\n\n        this._sortAttributes();\n    }\n\n    _parseSingleAttribute(attributeId) {\n        let parsedAttribute = this._getParsedAttribute(attributeId);\n        if (!parsedAttribute) {\n            parsedAttribute = this._getPropertyFromObject(this._datasource.attributeMetadataMap, attributeId);\n            if (parsedAttribute && parsedAttribute.id) {\n                this._setParsedAttribute(parsedAttribute.id, parsedAttribute);\n                const attributeAnnotations = this._cdsAnnotations.attributeAnnotations[parsedAttribute.id];\n\n                if (\n                    typeof attributeAnnotations === \"object\" &&\n                    Object.keys(attributeAnnotations).length > 0\n                ) {\n                    this._parsingResult.dataSourceIsCdsBased = true;\n\n                    try {\n                        // catch and write any parsing error to browser console\n\n                        if (attributeAnnotations.UI !== undefined) {\n                            /// Identification (Positions, URLs)\n                            this._parseSingleAnnotationOrArray(\n                                parsedAttribute,\n                                attributeAnnotations.UI.IDENTIFICATION,\n                                this._parseIdentification\n                            );\n\n                            /// Groups\n                            this._parseSingleAnnotationOrArray(\n                                parsedAttribute,\n                                attributeAnnotations.UI.CONNECTEDFIELDS,\n                                this._parseConnectedFields\n                            );\n\n                            this._parseURLsForDocumentResultItemThumbnail(\n                                parsedAttribute,\n                                attributeAnnotations.UI.IDENTIFICATION,\n                                attributeAnnotations.SEMANTICS\n                            );\n\n                            if (attributeAnnotations.UI.MULTILINETEXT !== undefined) {\n                                parsedAttribute.format = AttributeFormatType.MultilineText;\n                            }\n                        }\n\n                        this._parseSemantics(parsedAttribute, attributeAnnotations.SEMANTICS);\n                        this._parseDescriptionAttribute(\n                            parsedAttribute,\n                            attributeAnnotations.OBJECTMODEL,\n                            attributeAnnotations.UI\n                        );\n                    } catch (e) {\n                        this.log.warn(\"Could not parse attribute for datasource: \" + e);\n                    }\n                }\n            }\n        }\n        return parsedAttribute;\n    }\n\n    _parseConnectedFields(attribute, connectedFields) {\n        const qualifier = connectedFields.QUALIFIER;\n        if (qualifier) {\n            const attributesMap = {};\n            if (connectedFields.NAME) {\n                attributesMap[connectedFields.NAME] = attribute;\n            }\n            this._createAttributeGroup(\n                qualifier,\n                connectedFields.GROUPLABEL,\n                connectedFields.TEMPLATE,\n                attributesMap\n            );\n        }\n    }\n\n    _createAttributeGroup(\n        qualifier,\n        label,\n        template,\n        attributesMap,\n        displayAttributes?\n    ): AttributeGroupMetadata {\n        let attributeGroup = this._getknownAttributeGroup(qualifier);\n        if (!attributeGroup) {\n            attributeGroup = this.sina._createAttributeGroupMetadata({\n                id: qualifier, // equals original qualifier (not converted to lower case)\n                label: label || \"\",\n                type: AttributeType.Group,\n                template: template || \"\",\n                attributes: [],\n                usage: {},\n                displayAttributes: displayAttributes || [],\n            });\n            this._setknownAttributeGroup(qualifier, attributeGroup);\n            this._knownAttributeGroupsArray.push(attributeGroup);\n            this._datasource.attributeGroupsMetadata.push(attributeGroup);\n            this._datasource.attributeGroupMetadataMap[qualifier] = attributeGroup;\n\n            const usageStub = this._getDetailUsageStub(qualifier);\n            if (usageStub) {\n                usageStub.attribute = attributeGroup;\n            }\n        } else {\n            if (label && !attributeGroup.label) {\n                attributeGroup.label = label;\n            }\n            if (template && !attributeGroup.template) {\n                attributeGroup.template = template;\n            }\n            if (displayAttributes && !attributeGroup.displayAttributes) {\n                attributeGroup.displayAttributes = displayAttributes;\n            }\n        }\n        if (attributesMap) {\n            for (const nameOfAttributeInGroup in attributesMap) {\n                const attribute = attributesMap[nameOfAttributeInGroup];\n                const attributeGroupMembership = this.sina._createAttributeGroupMembership({\n                    group: attributeGroup,\n                    attribute: attribute,\n                    nameInGroup: nameOfAttributeInGroup,\n                });\n                attributeGroup.attributes.push(attributeGroupMembership);\n                attribute.groups.push(attributeGroupMembership);\n            }\n        }\n        return attributeGroup;\n    }\n\n    // display position and potential iconUrlAttribute which referred to attribute\n    _parseIdentification(attribute, identification) {\n        this._parseAttributePositions(attribute, identification);\n        this._parseIconUrlAttributeName(attribute, identification);\n    }\n\n    _parseIconUrlAttributeName(attribute, identification) {\n        if (identification) {\n            if (Array.isArray(identification)) {\n                // in case @UI.identification is an array, we look for the first entry which holds a URL sub-entry\n                for (let i = 0; i < identification.length; i++) {\n                    if (identification[i].ICONURL) {\n                        attribute.iconUrlAttibuteName = identification[i].ICONURL;\n                        break;\n                    }\n                }\n            } else if (identification.ICONURL) {\n                attribute.iconUrlAttributeName = identification.ICONURL;\n            }\n        }\n    }\n\n    _parseAttributePositions(attribute, identification) {\n        // Following also takes care of a fallback:\n        // in case that there is an importance, but no position (like it could have happened in the past), set position to a default (Number.MAX_VALUE)\n\n        const importance = identification.IMPORTANCE && identification.IMPORTANCE.toUpperCase();\n        let position = identification.POSITION;\n        if (importance && !position) {\n            position = Number.MAX_VALUE;\n        }\n        if (position !== undefined) {\n            switch (importance) {\n                case \"HIGH\":\n                case \"MEDIUM\":\n                case undefined: {\n                    position = this._parsePosition(position);\n\n                    const type = identification.TYPE && identification.TYPE.toUpperCase();\n                    switch (type) {\n                        case \"AS_CONNECTED_FIELDS\": {\n                            const qualifier = identification.VALUEQUALIFIER;\n                            if (qualifier) {\n                                const attributeGroup = this._getknownAttributeGroup(qualifier);\n                                if (attributeGroup) {\n                                    // We already know the group\n                                    attribute = attributeGroup;\n                                } else {\n                                    // We don't know the group yet, so we remember the usage for later\n                                    attribute = qualifier;\n                                }\n                            }\n                        }\n                        // fall-through to undefined case..\n                        // eslint-disable-next-line no-fallthrough\n                        case undefined: {\n                            // if type is anything but AS_CONNECTED_FIELDS or undefined, we'll ignore the position\n                            const usageStub = this._getDetailUsageStub(attribute);\n                            if (usageStub) {\n                                if (!usageStub.attribute && typeof attribute !== \"string\") {\n                                    usageStub.attribute = attribute;\n                                }\n                            } else {\n                                let prio;\n                                if (importance === \"HIGH\") {\n                                    prio = this._AttributeUsagePrio.HIGH;\n                                } else if (importance === \"MEDIUM\") {\n                                    prio = this._AttributeUsagePrio.MEDIUM;\n                                } else {\n                                    prio = this._AttributeUsagePrio.NONE;\n                                }\n                                this._addDetailUsageStub(attribute, position, prio);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // @UI.identification.url: 'SUV_URL'\n    // @Semantics.imageUrl\n    // ESH_FL_TASK.THUMBNAIL_URL AS THUMB_URL,\n    //\n    // @Semantics.url.mimeType: ‘SUV_MIME‘\n    // @UI.hidden\n    // ESH_FL_TASK.SUV_URL AS SUV_URL,\n    //\n    // @UI.hidden\n    // ESH_FL_TAS.SUV_MIME AS SUV_MIME,\n    //\n    _parseURLsForDocumentResultItemThumbnail(attribute, identification, semantics) {\n        if (!(semantics && semantics.IMAGEURL)) {\n            return;\n        }\n        let urlAttributeName;\n        if (identification) {\n            if (Array.isArray(identification)) {\n                // in case @UI.identification is an array, we look for the first entry which holds a URL sub-entry\n                for (let i = 0; i < identification.length; i++) {\n                    if (identification[i].URL) {\n                        urlAttributeName = identification[i].URL;\n                        break;\n                    }\n                }\n            } else {\n                urlAttributeName = identification.URL;\n            }\n        }\n        if (urlAttributeName && semantics && semantics.IMAGEURL) {\n            const urlAttributeAnnotations = this._getPropertyFromObject(\n                this._cdsAnnotations.attributeAnnotations,\n                urlAttributeName\n            );\n            if (urlAttributeAnnotations) {\n                const mimeTypeAttributeName =\n                    urlAttributeAnnotations.SEMANTICS &&\n                    urlAttributeAnnotations.SEMANTICS.URL &&\n                    urlAttributeAnnotations.SEMANTICS.URL.MIMETYPE;\n                if (mimeTypeAttributeName) {\n                    const urlAttribute = this._getPropertyFromObject(\n                        this._datasource.attributeMetadataMap,\n                        urlAttributeName\n                    );\n                    const mimeTypeAttribute = this._getPropertyFromObject(\n                        this._datasource.attributeMetadataMap,\n                        mimeTypeAttributeName\n                    );\n\n                    attribute.suvUrlAttribute = urlAttribute;\n                    attribute.suvMimeTypeAttribute = mimeTypeAttribute;\n\n                    attribute.format = AttributeFormatType.DocumentThumbnail;\n                }\n            }\n        }\n    }\n\n    _parseSemantics(attribute, semantics) {\n        if (semantics) {\n            if (semantics.CONTACT && semantics.CONTACT.PHOTO !== undefined) {\n                attribute.format = AttributeFormatType.Round;\n                if (attribute.type !== AttributeType.ImageBlob) {\n                    attribute.type = AttributeType.ImageUrl;\n                }\n            }\n\n            if (semantics.IMAGEURL !== undefined) {\n                if (attribute.type !== AttributeType.ImageBlob) {\n                    attribute.type = AttributeType.ImageUrl;\n                }\n            }\n\n            if (semantics.NAME !== undefined) {\n                if (semantics.NAME.GIVENNAME !== undefined) {\n                    attribute.semantics = AttributeSemanticsType.FirstName;\n                }\n\n                if (semantics.NAME.FAMILYNAME !== undefined) {\n                    attribute.semantics = AttributeSemanticsType.LastName;\n                }\n            }\n\n            if (semantics.EMAIL && semantics.EMAIL.ADDRESS !== undefined) {\n                attribute.semantics = AttributeSemanticsType.EmailAddress;\n            }\n\n            if (semantics.TELEPHONE && semantics.TELEPHONE.TYPE !== undefined) {\n                attribute.semantics = AttributeSemanticsType.PhoneNr;\n            }\n\n            if (semantics && semantics.URL !== undefined) {\n                attribute.semantics = AttributeSemanticsType.HTTPURL;\n            }\n\n            if (semantics && semantics.CURRENCYCODE !== undefined) {\n                attribute._private.isCurrency = true;\n            }\n\n            if (semantics && semantics.UNITOFMEASURE !== undefined) {\n                attribute._private.isUnitOfMeasure = true;\n            }\n\n            let unitOfMeasureAttribute, currencyCodeAttribute, template;\n            let displayAttributes: Array<string>;\n\n            const unitOfMeasure = semantics.QUANTITY && semantics.QUANTITY.UNITOFMEASURE;\n            if (unitOfMeasure) {\n                displayAttributes = [];\n                attribute._private.isQuantity = true;\n                unitOfMeasureAttribute = this._parseSingleAttribute(unitOfMeasure);\n                if (unitOfMeasureAttribute) {\n                    if (unitOfMeasureAttribute._private.isUnitOfMeasure) {\n                        template = \"{\" + attribute.id + \"} {\" + unitOfMeasureAttribute.id + \"}\";\n                        displayAttributes.push(attribute.id);\n                        displayAttributes.push(unitOfMeasureAttribute.id);\n                        this._createAttributeGroupForParentChildAttributes(\n                            attribute,\n                            unitOfMeasureAttribute,\n                            \"____UnitOfMeasureGroup\",\n                            template,\n                            displayAttributes\n                        );\n                    }\n                }\n            }\n\n            const currencyCode = semantics.AMOUNT && semantics.AMOUNT.CURRENCYCODE;\n            if (currencyCode) {\n                displayAttributes = [];\n                currencyCodeAttribute = this._parseSingleAttribute(currencyCode);\n                if (currencyCodeAttribute) {\n                    if (currencyCodeAttribute._private.isCurrency) {\n                        template = \"{\" + attribute.id + \"} {\" + currencyCodeAttribute.id + \"}\";\n                        displayAttributes.push(attribute.id);\n                        displayAttributes.push(currencyCodeAttribute.id);\n                        this._createAttributeGroupForParentChildAttributes(\n                            attribute,\n                            currencyCodeAttribute,\n                            \"____CurrencyGroup\",\n                            template,\n                            displayAttributes\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    _parseDescriptionAttribute(attribute, objectModel, ui) {\n        let descriptionAttributeName = objectModel && objectModel.TEXT && objectModel.TEXT.ELEMENT;\n        if (descriptionAttributeName) {\n            if (Array.isArray(descriptionAttributeName)) {\n                if (descriptionAttributeName.length > 0) {\n                    descriptionAttributeName = descriptionAttributeName[0];\n                } else {\n                    return;\n                }\n            }\n            const descriptionAttribute = this._parseSingleAttribute(descriptionAttributeName);\n            if (descriptionAttribute) {\n                const textArrangement =\n                    this._deriveTextArrangementFromCdsAnnotation(ui && ui.TEXTARRANGEMENT) ||\n                    this._defaultTextArrangement;\n\n                const useParentheses = !(\n                    (attribute.semantics == AttributeSemanticsType.FirstName &&\n                        descriptionAttribute.semantics == AttributeSemanticsType.LastName) ||\n                    (descriptionAttribute.semantics == AttributeSemanticsType.FirstName &&\n                        attribute.semantics == AttributeSemanticsType.LastName)\n                );\n                const parenthesesOpen = useParentheses ? \"(\" : \"\";\n                const parenthesesClose = useParentheses ? \")\" : \"\";\n\n                let template;\n                if (textArrangement === AttributeGroupTextArrangement.TextFirst) {\n                    template =\n                        \"{\" +\n                        descriptionAttribute.id +\n                        \"} \" +\n                        parenthesesOpen +\n                        \"{\" +\n                        attribute.id +\n                        \"}\" +\n                        parenthesesClose;\n                } else if (textArrangement === AttributeGroupTextArrangement.TextLast) {\n                    template =\n                        \"{\" +\n                        attribute.id +\n                        \"} \" +\n                        parenthesesOpen +\n                        \"{\" +\n                        descriptionAttribute.id +\n                        \"}\" +\n                        parenthesesClose;\n                } else if (textArrangement === AttributeGroupTextArrangement.TextOnly) {\n                    template = \"{\" + descriptionAttribute.id + \"}\";\n                } else {\n                    template =\n                        \"{\" +\n                        attribute.id +\n                        \"} \" +\n                        parenthesesOpen +\n                        \"{\" +\n                        descriptionAttribute.id +\n                        \"}\" +\n                        parenthesesClose;\n                }\n\n                // Prepare the list of attributes to be displayed in UI\n                const displayAttributes: Array<string> = [];\n                if (textArrangement === AttributeGroupTextArrangement.TextOnly) {\n                    displayAttributes.push(descriptionAttribute.id);\n                } else {\n                    displayAttributes.push(attribute.id);\n                    displayAttributes.push(descriptionAttribute.id);\n                }\n                const attributeGroup = this._createAttributeGroupForParentChildAttributes(\n                    attribute,\n                    descriptionAttribute,\n                    \"____Description\",\n                    template,\n                    displayAttributes\n                );\n\n                attributeGroup._private.isDescription = true;\n                attributeGroup._private.textArrangement = textArrangement;\n\n                if (attribute._private.isUnitOfMeasure || descriptionAttribute._private.isUnitOfMeasure) {\n                    attributeGroup._private.isUnitOfMeasure = true;\n                }\n\n                if (attribute._private.isCurrency || descriptionAttribute._private.isCurrency) {\n                    attributeGroup._private.isCurrency = true;\n                }\n            }\n        }\n    }\n\n    _deriveTextArrangementFromCdsAnnotation(cdsTextArrangement): AttributeGroupTextArrangement {\n        if (cdsTextArrangement) {\n            switch (cdsTextArrangement.toUpperCase()) {\n                case \"TEXT_FIRST\":\n                    return AttributeGroupTextArrangement.TextFirst;\n                case \"TEXT_LAST\":\n                    return AttributeGroupTextArrangement.TextLast;\n                case \"TEXT_ONLY\":\n                case \"#TEXT_ONLY\":\n                    return AttributeGroupTextArrangement.TextOnly;\n                case \"TEXT_SEPARATE\":\n                    return AttributeGroupTextArrangement.TextSeparate;\n            }\n        }\n        return undefined;\n    }\n\n    _createAttributeGroupForParentChildAttributes(\n        parentAttribute,\n        childAttribute,\n        qualifierSuffix,\n        template,\n        displayAttributes?\n    ) {\n        const qualifier = parentAttribute.id + qualifierSuffix;\n        const attributesMap = {};\n        attributesMap[parentAttribute.id] = parentAttribute;\n        attributesMap[childAttribute.id] = childAttribute;\n\n        const attributeGroup: AttributeGroupMetadata = this._createAttributeGroup(\n            qualifier,\n            parentAttribute.label,\n            template,\n            attributesMap,\n            displayAttributes\n        );\n\n        const obsoleteUsageStub = this._getDetailUsageStub(parentAttribute);\n        if (obsoleteUsageStub) {\n            obsoleteUsageStub.obsolete = true;\n            this._addDetailUsageStub(attributeGroup, obsoleteUsageStub.displayOrder, obsoleteUsageStub.prio);\n        }\n\n        this._replaceAttributeWithGroup(parentAttribute, attributeGroup);\n\n        attributeGroup._private.parentAttribute = parentAttribute;\n        attributeGroup._private.childAttribute = childAttribute;\n\n        if (childAttribute._private && childAttribute._private.isCurrency) {\n            attributeGroup._private.isCurrency = true;\n        }\n        if (childAttribute._private && childAttribute._private.isUnitOfMeasure) {\n            attributeGroup._private.isUnitOfMeasure = true;\n        }\n\n        return attributeGroup;\n    }\n\n    _replaceAttributeWithGroup(attribute, attributeGroupReplacement) {\n        this._setParsedAttribute(attribute.id, attributeGroupReplacement);\n        for (let i = 0; i < attribute.groups.length; i++) {\n            const groupMembership = attribute.groups[i];\n            if (groupMembership.group != attributeGroupReplacement) {\n                groupMembership.attribute = attributeGroupReplacement;\n            }\n        }\n    }\n\n    _sortAttributes() {\n        const sortFunction = function (entry1, entry2) {\n            if (entry1.displayOrder < entry2.displayOrder) {\n                return -1;\n            } else if (entry1.displayOrder > entry2.displayOrder) {\n                return 1;\n            }\n            return 0;\n        };\n\n        let i, allEntries;\n\n        if (this._detailUsageStubsPrioHigh.length > 0 || this._detailUsageStubsPrioMedium.length > 0) {\n            this._detailUsageStubsPrioHigh.sort(sortFunction);\n            this._detailUsageStubsPrioMedium.sort(sortFunction);\n\n            const _allEntries = this._detailUsageStubsPrioHigh.concat(this._detailUsageStubsPrioMedium);\n            for (i = 0; i < _allEntries.length; i++) {\n                if (!_allEntries[i].obsolete) {\n                    allEntries = _allEntries;\n                    break;\n                }\n            }\n        }\n\n        if (!allEntries) {\n            allEntries = this._detailUsageStubsPrioNone.sort(sortFunction);\n        }\n\n        for (i = 0; i < allEntries.length; i++) {\n            const entry = allEntries[i];\n            if (!entry.obsolete && entry.attribute && typeof entry.attribute !== \"string\") {\n                entry.attribute.usage = entry.attribute.usage || {};\n                entry.attribute.usage.Detail = {\n                    displayOrder: i,\n                };\n            }\n        }\n\n        this._parsingResult.detailAttributesAreSorted = true;\n    }\n\n    _parseSingleAnnotationOrArray(attribute, annotation, parseFunction) {\n        if (annotation !== undefined) {\n            if (Array.isArray(annotation)) {\n                for (let j = 0; j < annotation.length; j++) {\n                    parseFunction.apply(this, [attribute, annotation[j]]);\n                }\n            } else {\n                parseFunction.apply(this, [attribute, annotation]);\n            }\n        }\n    }\n\n    _parsePosition(position) {\n        if (typeof position === \"string\") {\n            try {\n                position = parseInt(position, 10);\n            } catch (e) {\n                this.log.warn(\"Could not parse position as integer: \" + position + \" (\" + e + \")\");\n                position = Number.MAX_VALUE;\n            }\n        }\n        if (typeof position !== \"number\" || isNaN(position)) {\n            position = Number.MAX_VALUE; // or use Number.POSITIVE_INFINITY ?\n        }\n\n        return position;\n    }\n\n    // get a property from an object, even if the property names differ regarding case-sensitivity\n    _getPropertyFromObject(object, propertyName) {\n        if (object[propertyName]) {\n            return object[propertyName];\n        }\n        propertyName = propertyName.toLowerCase();\n        for (const key in object) {\n            if (key.toLowerCase() === propertyName) {\n                return object[key];\n            }\n        }\n        return undefined;\n    }\n}\n"],"mappings":"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","ignoreList":[]}