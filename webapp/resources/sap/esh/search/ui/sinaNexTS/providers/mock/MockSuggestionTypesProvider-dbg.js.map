{"version":3,"file":"MockSuggestionTypesProvider-dbg.js","names":["sap","ui","define","____sina_Capabilities","___sample2_Provider","Capabilities","Sample2Provider","MockSuggestionTypesProvider","id","aiSuggestionConfig","count","timeout","initAsync","properties","returnVal","capabilities","nlq","nlqEnabledInfoOnDataSource","executeSuggestionQuery","query","searchTerm","getSearchTerm","suggestionCfgsFromSearchTerm","split","map","term","trim","reduce","acc","type","countStr","timeoutStr","parseInt","console","log","JSON","stringify","suggestionCfgs","ai","suggestionItemCfgs","dataSource","getDataSource","queryTypes","types","queryCalculationModes","calculationModes","isRequested","includes","bo","history","maxTimeout","Object","entries","i","push","toUpperCase","Math","max","items","cfg","_createSuggestion","filter","_","dir","Promise","resolve","setTimeout","sina","_createSuggestionResultSet","title","label","undefined","_createSearchTermSuggestion","calculationMode","SuggestionCalculationMode","History","createFilter","Data","_createSearchTermAISuggestion","_createDataSourceSuggestion","__exports","__esModule"],"sources":["MockSuggestionTypesProvider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Capabilities } from \"../../sina/Capabilities\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport { AbstractProviderConfiguration } from \"../AbstractProvider\";\nimport { Provider as Sample2Provider } from \"../sample2/Provider\";\n\n// SuggestionTypeNameInSearchbox copied from SuggestionTypes\nexport type SuggestionTypeNameInSearchbox = \"bo\" | \"history\" | \"dataSource\" | \"ai\";\n\nexport class MockSuggestionTypesProvider extends Sample2Provider {\n    readonly id = \"mock_suggestiontypes\";\n\n    aiSuggestionConfig: { count: number; timeout: number } = {\n        count: 0,\n        timeout: 0,\n    };\n\n    override async initAsync(\n        properties: AbstractProviderConfiguration\n    ): Promise<{ capabilities: Capabilities }> {\n        let returnVal = await super.initAsync(properties);\n\n        // take over returnValue, but add nlq capabilities\n        returnVal = {\n            ...returnVal,\n            capabilities: new Capabilities({\n                ...returnVal?.capabilities,\n                nlq: true,\n                nlqEnabledInfoOnDataSource: true,\n            }),\n        };\n        return returnVal;\n    }\n    // Overwrite suggestion logic from mock/SuggestionTypes\n    override async executeSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // searchTerm:3:2000ms history:1:10000ms dataSource:5:12000ms searchTermAndDataSource:5:12000ms\n        // ignore 'ms' for now\n        // TODO add icons (to some? configurable?)\n\n        // parse and split search term\n        const searchTerm = query.getSearchTerm();\n        const suggestionCfgsFromSearchTerm: Record<\n            SuggestionTypeNameInSearchbox,\n            { count: number; timeout: number }\n        > = searchTerm\n            .split(/ +/g) // split by space\n            .map((term) => term.trim().split(\":\"))\n            // type, count, timeout: // on clashes last definition wins\n            .reduce(\n                (acc, [type, countStr, timeoutStr]) => ({\n                    ...acc,\n                    [type]: {\n                        count: parseInt(countStr, 10) || 0,\n                        timeout: parseInt(timeoutStr, 10) || 0,\n                    },\n                }),\n                {} as Record<SuggestionTypeNameInSearchbox, { count: number; timeout: number }>\n            );\n\n        // for ai suggestions as these are sent only with empty-searchTerm adding SearchTermAI:x:y configuration just\n        // changes the configuration state here, so that upon next empty searchTerm the AI suggestions are added\n        if (suggestionCfgsFromSearchTerm[\"ai\"]) {\n            // update ai-state from searchTerm\n            this.aiSuggestionConfig = suggestionCfgsFromSearchTerm[\"ai\"];\n            console.log(`AI suggestion updated: ${JSON.stringify(this.aiSuggestionConfig)}`);\n        }\n\n        // combine searchterm & AI suggestion\n        const suggestionCfgs = {\n            ...{ ai: this.aiSuggestionConfig },\n            ...suggestionCfgsFromSearchTerm,\n        };\n\n        // create individual configurations for all suggestion items\n        const suggestionItemCfgs: Array<{\n            type: SuggestionTypeNameInSearchbox;\n            searchTerm: string;\n            dataSource: string;\n        }> = [];\n\n        // figure out what is requested, possibly multiple are possible\n        const dataSource = query.getDataSource().id;\n        const queryTypes = (query.types || []) as string[];\n        const queryCalculationModes = (query.calculationModes || []) as string[];\n        const isRequested: Record<SuggestionTypeNameInSearchbox, boolean> = {\n            dataSource:\n                queryTypes.includes(\"DataSource\") && //\n                !queryCalculationModes.includes(\"History\"),\n            bo:\n                (queryTypes.includes(\"SearchTerm\") || //\n                    queryTypes.includes(\"SearchTermAndDataSource\")) &&\n                !queryCalculationModes.includes(\"History\"),\n            history: queryCalculationModes.includes(\"History\"),\n            ai:\n                queryTypes.includes(\"SearchTermAI\") && //\n                queryCalculationModes.includes(\"Data\"),\n        };\n\n        let maxTimeout = 0;\n        // go through configurations and check if current request is asking for it, if yes, create suggestion items\n        for (const [type, { count, timeout }] of Object.entries(suggestionCfgs)) {\n            if (!isRequested[type] || count <= 0) {\n                // skip if not requested\n                continue;\n            }\n            for (let i = 0; i < count; i++) {\n                suggestionItemCfgs.push({\n                    //\n                    type: type as SuggestionTypeNameInSearchbox,\n                    searchTerm: `${type} ${i + 1}/${count} <b>${type?.toUpperCase() + \" \" + (i + 1)}</b> of ${count}`,\n                    dataSource,\n                });\n            }\n            maxTimeout = Math.max(maxTimeout, timeout);\n        }\n\n        const items = suggestionItemCfgs\n            .map((cfg) => this._createSuggestion(cfg)) //\n            .filter((_) => _); // remove undefined\n\n        console.log(`SuggestionTypes: suggestion (${query.types} - ${query.calculationModes})`);\n        console.dir(items);\n\n        // wait for timeout, simulate backend\n        if (maxTimeout > 0) {\n            await new Promise((resolve) => setTimeout(resolve, maxTimeout));\n        }\n\n        return this.sina._createSuggestionResultSet({\n            title: \"Suggestions\",\n            query,\n            items,\n        });\n    }\n\n    //configurations: { [name: string]: string[] } = {\n    //    default: [\"emptyDataSource\"],\n    //};\n\n    _createSuggestion(cfg: {\n        type: SuggestionTypeNameInSearchbox;\n        searchTerm?: string;\n        label?: string;\n        dataSource?: string;\n    }) {\n        // create suggestions based on config array\n        const searchTerm = cfg.searchTerm ?? \"\";\n        const label = cfg.label ?? searchTerm;\n        const dataSource = cfg.dataSource ? this.sina.getDataSource(cfg.dataSource) : undefined;\n\n        switch (cfg.type) {\n            case \"history\":\n                return this.sina._createSearchTermSuggestion({\n                    searchTerm,\n                    label,\n                    calculationMode: this.sina.SuggestionCalculationMode.History,\n                    filter: this.sina.createFilter({\n                        dataSource,\n                        searchTerm,\n                    }),\n                });\n            // case \"searchTerm\":\n            case \"bo\":\n                return this.sina._createSearchTermSuggestion({\n                    searchTerm,\n                    label,\n                    calculationMode: this.sina.SuggestionCalculationMode.Data,\n                    filter: this.sina.createFilter({\n                        dataSource,\n                        searchTerm,\n                    }),\n                });\n            case \"ai\":\n                return this.sina._createSearchTermAISuggestion({\n                    searchTerm,\n                    label,\n                    calculationMode: this.sina.SuggestionCalculationMode.Data,\n                    filter: this.sina.createFilter({\n                        dataSource,\n                        searchTerm,\n                    }),\n                });\n            case \"dataSource\":\n                return this.sina._createDataSourceSuggestion({\n                    calculationMode: this.sina.SuggestionCalculationMode.Data,\n                    dataSource,\n                    label,\n                });\n            // case \"searchTermAndDataSource\":\n            //     return this.sina._createSearchTermAndDataSourceSuggestion({\n            //         searchTerm,\n            //         dataSource,\n            //         label,\n            //         calculationMode: this.sina.SuggestionCalculationMode.Data,\n            //         filter: this.sina.createFilter({\n            //             dataSource,\n            //             searchTerm,\n            //         }),\n            //     });\n            default:\n                return undefined;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}