{"version":3,"file":"suggestionParser.js","names":["sap","ui","define","____sina_SearchResultSetItemAttribute","____sina_SuggestionCalculationMode","SearchResultSetItemAttribute","SuggestionCalculationMode","SuggestionParser","provider","sina","itemParser","constructor","this","parseObjectSuggestions","query","data","d","ObjectSuggestions","SearchResults","results","suggestionPromises","objectSuggestions","i","length","objectSuggestion","push","parseObjectSuggestion","Promise","all","parseItem","then","object","fillValueHighlighted","title","titleAttributes","filter","attribute","map","valueFormatted","join","_createObjectSuggestion","calculationMode","Data","label","bind","doFillValueHighlighted","attributes","valueHighlighted","detailAttributes","parseRegularSuggestions","suggestions","suggestion","parentSuggestion","parentSuggestions","cell","parentCell","Suggestions","Type","parseSearchTermSuggestion","parseSearchTermAndDataSourceSuggestion","parseDataSourceSuggestion","type","SuggestionType","SearchTermAndDataSource","searchTerm","undefined","_getParentCell","childSuggestions","Object","keys","forEach","key","dataSource","getDataSource","FromDataSource","clone","setDataSource","_createDataSourceSuggestion","SearchTermsHighlighted","parseCalculationMode","setSearchTerm","SearchTerms","_createSearchTermSuggestion","_createSearchTermAndDataSourceSuggestion","scope","History","FromDataSourceAttribute","__exports","__esModule"],"sources":["suggestionParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSourceSuggestion } from \"../../sina/DataSourceSuggestion\";\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\nimport { SearchResultSetItemAttribute } from \"../../sina/SearchResultSetItemAttribute\";\nimport { SearchTermAndDataSourceSuggestion } from \"../../sina/SearchTermAndDataSourceSuggestion\";\nimport { SearchTermSuggestion } from \"../../sina/SearchTermSuggestion\";\nimport { Sina } from \"../../sina/Sina\";\nimport { SuggestionCalculationMode } from \"../../sina/SuggestionCalculationMode\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { ItemParser, ABAPOdataSearchResponse } from \"./ItemParser\";\nimport { Provider } from \"./Provider\";\n\nexport interface ICell {\n    FromDataSource: string;\n    FromDataSourceAttribute: string;\n    SearchTerms: string;\n    SearchTermsHighlighted: string;\n    Type: string;\n}\n\nexport interface ABAPOdataSuggestionResponse {\n    d: {\n        DataSources: { results: Array<unknown> };\n        DetailLevel: number;\n        Id: string;\n        IncludeAttributeSuggestions: boolean;\n        IncludeDataSourceSuggestions: boolean;\n        IncludeHistorySuggestions: boolean;\n        ObjectSuggestions: Record<string, unknown>;\n        SuggestionInput: string;\n        Suggestions: {\n            results: Array<{\n                FromDataSource: string;\n                FromDataSourceAttribute: string;\n                NumberOfObjects: number;\n                Score: string;\n                SearchTerms: string;\n                SearchTermsHighlighted: string;\n                Type: string;\n            }>;\n        };\n    };\n}\n\nexport class SuggestionParser {\n    provider: Provider;\n    sina: Sina;\n    itemParser: ItemParser;\n\n    constructor(provider: Provider, itemParser: ItemParser) {\n        this.provider = provider;\n        this.sina = provider.sina;\n        this.itemParser = itemParser;\n    }\n\n    parseObjectSuggestions(query, data) {\n        if (\n            !data.d.ObjectSuggestions ||\n            !data.d.ObjectSuggestions.SearchResults ||\n            !data.d.ObjectSuggestions.SearchResults.results\n        ) {\n            return [];\n        }\n        const suggestionPromises = [];\n        const objectSuggestions = data.d.ObjectSuggestions.SearchResults.results;\n        for (let i = 0; i < objectSuggestions.length; ++i) {\n            const objectSuggestion = objectSuggestions[i];\n            suggestionPromises.push(this.parseObjectSuggestion(objectSuggestion));\n        }\n        return Promise.all(suggestionPromises);\n    }\n\n    private parseObjectSuggestion(objectSuggestion: ABAPOdataSearchResponse) {\n        return this.itemParser.parseItem(objectSuggestion).then(\n            function (object: SearchResultSetItem) {\n                // fill highlighted value: actually it would be better to call\n                // the search result set formatter like for a regular result\n                // set\n                this.fillValueHighlighted(object);\n\n                const title = object.titleAttributes\n                    .filter((attribute) => attribute instanceof SearchResultSetItemAttribute)\n                    .map(function (attribute: SearchResultSetItemAttribute) {\n                        return attribute.valueFormatted;\n                    })\n                    .join(\" \");\n                return this.sina._createObjectSuggestion({\n                    calculationMode: SuggestionCalculationMode.Data,\n                    label: title,\n                    object: object,\n                });\n            }.bind(this)\n        );\n    }\n\n    fillValueHighlighted(object): void {\n        const doFillValueHighlighted = function (attributes) {\n            if (!attributes) {\n                return;\n            }\n            for (let i = 0; i < attributes.length; ++i) {\n                const attribute = attributes[i];\n                if (!attribute.valueHighlighted) {\n                    attribute.valueHighlighted = attribute.valueFormatted;\n                }\n            }\n        };\n        doFillValueHighlighted(object.detailAttributes);\n        doFillValueHighlighted(object.titleAttributes);\n    }\n\n    public parseRegularSuggestions(\n        query: SuggestionQuery,\n        data: ABAPOdataSuggestionResponse\n    ): Array<SearchTermSuggestion | SearchTermAndDataSourceSuggestion | DataSourceSuggestion> {\n        const suggestions: Array<\n            SearchTermSuggestion | SearchTermAndDataSourceSuggestion | DataSourceSuggestion\n        > = [];\n        let suggestion;\n        let parentSuggestion;\n        const parentSuggestions = [];\n        let cell: ICell;\n        let parentCell: ICell;\n\n        if (!data.d.Suggestions || !data.d.Suggestions.results) {\n            return [];\n        }\n\n        const results = data.d.Suggestions.results;\n        for (let i = 0; i < results.length; i++) {\n            suggestion = null;\n            cell = results[i];\n\n            switch (cell.Type) {\n                case \"H\":\n                    suggestion = this.parseSearchTermSuggestion(query, cell);\n                    break;\n                case \"A\":\n                    suggestion = this.parseSearchTermAndDataSourceSuggestion(query, cell);\n                    // attach type and cell information\n                    // suggestion.type = \"A\";\n                    suggestion.cell = cell;\n                    break;\n                case \"M\":\n                    suggestion = this.parseDataSourceSuggestion(query, cell);\n                    break;\n            }\n\n            if (suggestion) {\n                if (suggestion.type === this.sina.SuggestionType.SearchTermAndDataSource) {\n                    // set parent sugestion\n                    if (parentSuggestions[suggestion.searchTerm] === undefined) {\n                        parentCell = this._getParentCell(suggestion.cell);\n                        parentSuggestion = this.parseSearchTermSuggestion(query, parentCell);\n                        parentSuggestions[suggestion.searchTerm] = parentSuggestion;\n                    }\n                    // remove type and cell information\n                    delete suggestion.cell;\n                    // attach children\n                    parentSuggestions[suggestion.searchTerm].childSuggestions.push(suggestion);\n                } else {\n                    // push non-attribute suggestion\n                    suggestions.push(suggestion);\n                }\n            }\n        }\n\n        // push attribute suggestion\n        Object.keys(parentSuggestions).forEach(function (key) {\n            suggestions.push(parentSuggestions[key]);\n        });\n\n        return suggestions;\n    }\n\n    parseDataSourceSuggestion(query: SuggestionQuery, cell: ICell): DataSourceSuggestion {\n        const calculationMode = SuggestionCalculationMode.Data; // always data suggestion\n        const dataSource = this.sina.getDataSource(cell.FromDataSource);\n        if (!dataSource) {\n            return null;\n        }\n        const filter = query.filter.clone();\n        filter.setDataSource(dataSource);\n        return this.sina._createDataSourceSuggestion({\n            calculationMode: calculationMode,\n            dataSource: dataSource,\n            label: cell.SearchTermsHighlighted,\n        });\n    }\n\n    parseSearchTermSuggestion(query: SuggestionQuery, cell: ICell): SearchTermSuggestion {\n        const calculationMode = this.parseCalculationMode(cell.Type);\n        const filter = query.filter.clone();\n        filter.setSearchTerm(cell.SearchTerms);\n        return this.sina._createSearchTermSuggestion({\n            searchTerm: cell.SearchTerms,\n            calculationMode: calculationMode,\n            filter: filter,\n            label: cell.SearchTermsHighlighted,\n        });\n    }\n\n    parseSearchTermAndDataSourceSuggestion(\n        query: SuggestionQuery,\n        cell: ICell\n    ): SearchTermAndDataSourceSuggestion {\n        const calculationMode = this.parseCalculationMode(cell.Type);\n        const filter = query.filter.clone();\n        filter.setSearchTerm(cell.SearchTerms);\n        const dataSource = this.sina.getDataSource(cell.FromDataSource);\n        if (!dataSource) {\n            return null;\n        }\n        filter.setDataSource(dataSource);\n        return this.sina._createSearchTermAndDataSourceSuggestion({\n            searchTerm: cell.SearchTerms,\n            dataSource: dataSource,\n            calculationMode: calculationMode,\n            filter: filter,\n            label: cell.SearchTermsHighlighted,\n        });\n    }\n\n    parseCalculationMode(scope: string): SuggestionCalculationMode {\n        switch (scope) {\n            case \"H\":\n                return SuggestionCalculationMode.History;\n            case \"A\":\n            case \"M\":\n                return SuggestionCalculationMode.Data;\n        }\n    }\n\n    private _getParentCell(cell: ICell): ICell {\n        const parentCell = cell;\n        parentCell.FromDataSource = \"<All>\";\n        parentCell.FromDataSourceAttribute = \"\";\n        parentCell.Type = \"A\";\n        return parentCell;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,4FAAAC,EAAAC,GAAA,mBAOSC,EAA4BF,EAAA,sCAI5BG,EAAyBF,EAAA,6BAqC3B,MAAMG,EACTC,SACAC,KACAC,WAEAC,YAAYH,EAAoBE,GAC5BE,KAAKJ,SAAWA,EAChBI,KAAKH,KAAOD,EAASC,KACrBG,KAAKF,WAAaA,CACtB,CAEAG,uBAAuBC,EAAOC,GAC1B,IACKA,EAAKC,EAAEC,oBACPF,EAAKC,EAAEC,kBAAkBC,gBACzBH,EAAKC,EAAEC,kBAAkBC,cAAcC,QAC1C,CACE,MAAO,EACX,CACA,MAAMC,EAAqB,GAC3B,MAAMC,EAAoBN,EAAKC,EAAEC,kBAAkBC,cAAcC,QACjE,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAkBE,SAAUD,EAAG,CAC/C,MAAME,EAAmBH,EAAkBC,GAC3CF,EAAmBK,KAAKb,KAAKc,sBAAsBF,GACvD,CACA,OAAOG,QAAQC,IAAIR,EACvB,CAEQM,sBAAsBF,GAC1B,OAAOZ,KAAKF,WAAWmB,UAAUL,GAAkBM,KAC/C,SAAUC,GAINnB,KAAKoB,qBAAqBD,GAE1B,MAAME,EAAQF,EAAOG,gBAChBC,OAAQC,GAAcA,aAAqB/B,GAC3CgC,IAAI,SAAUD,GACX,OAAOA,EAAUE,cACrB,GACCC,KAAK,KACV,OAAO3B,KAAKH,KAAK+B,wBAAwB,CACrCC,gBAAiBnC,EAA0BoC,KAC3CC,MAAOV,EACPF,OAAQA,GAEhB,EAAEa,KAAKhC,MAEf,CAEAoB,qBAAqBD,GACjB,MAAMc,EAAyB,SAAUC,GACrC,IAAKA,EAAY,CACb,MACJ,CACA,IAAK,IAAIxB,EAAI,EAAGA,EAAIwB,EAAWvB,SAAUD,EAAG,CACxC,MAAMc,EAAYU,EAAWxB,GAC7B,IAAKc,EAAUW,iBAAkB,CAC7BX,EAAUW,iBAAmBX,EAAUE,cAC3C,CACJ,CACJ,EACAO,EAAuBd,EAAOiB,kBAC9BH,EAAuBd,EAAOG,gBAClC,CAEOe,wBACHnC,EACAC,GAEA,MAAMmC,EAEF,GACJ,IAAIC,EACJ,IAAIC,EACJ,MAAMC,EAAoB,GAC1B,IAAIC,EACJ,IAAIC,EAEJ,IAAKxC,EAAKC,EAAEwC,cAAgBzC,EAAKC,EAAEwC,YAAYrC,QAAS,CACpD,MAAO,EACX,CAEA,MAAMA,EAAUJ,EAAKC,EAAEwC,YAAYrC,QACnC,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAK,CACrC6B,EAAa,KACbG,EAAOnC,EAAQG,GAEf,OAAQgC,EAAKG,MACT,IAAK,IACDN,EAAavC,KAAK8C,0BAA0B5C,EAAOwC,GACnD,MACJ,IAAK,IACDH,EAAavC,KAAK+C,uCAAuC7C,EAAOwC,GAGhEH,EAAWG,KAAOA,EAClB,MACJ,IAAK,IACDH,EAAavC,KAAKgD,0BAA0B9C,EAAOwC,GACnD,MAGR,GAAIH,EAAY,CACZ,GAAIA,EAAWU,OAASjD,KAAKH,KAAKqD,eAAeC,wBAAyB,CAEtE,GAAIV,EAAkBF,EAAWa,cAAgBC,UAAW,CACxDV,EAAa3C,KAAKsD,eAAef,EAAWG,MAC5CF,EAAmBxC,KAAK8C,0BAA0B5C,EAAOyC,GACzDF,EAAkBF,EAAWa,YAAcZ,CAC/C,QAEOD,EAAWG,KAElBD,EAAkBF,EAAWa,YAAYG,iBAAiB1C,KAAK0B,EACnE,KAAO,CAEHD,EAAYzB,KAAK0B,EACrB,CACJ,CACJ,CAGAiB,OAAOC,KAAKhB,GAAmBiB,QAAQ,SAAUC,GAC7CrB,EAAYzB,KAAK4B,EAAkBkB,GACvC,GAEA,OAAOrB,CACX,CAEAU,0BAA0B9C,EAAwBwC,GAC9C,MAAMb,EAAkBnC,EAA0BoC,KAClD,MAAM8B,EAAa5D,KAAKH,KAAKgE,cAAcnB,EAAKoB,gBAChD,IAAKF,EAAY,CACb,OAAO,IACX,CACA,MAAMrC,EAASrB,EAAMqB,OAAOwC,QAC5BxC,EAAOyC,cAAcJ,GACrB,OAAO5D,KAAKH,KAAKoE,4BAA4B,CACzCpC,gBAAiBA,EACjB+B,WAAYA,EACZ7B,MAAOW,EAAKwB,wBAEpB,CAEApB,0BAA0B5C,EAAwBwC,GAC9C,MAAMb,EAAkB7B,KAAKmE,qBAAqBzB,EAAKG,MACvD,MAAMtB,EAASrB,EAAMqB,OAAOwC,QAC5BxC,EAAO6C,cAAc1B,EAAK2B,aAC1B,OAAOrE,KAAKH,KAAKyE,4BAA4B,CACzClB,WAAYV,EAAK2B,YACjBxC,gBAAiBA,EACjBN,OAAQA,EACRQ,MAAOW,EAAKwB,wBAEpB,CAEAnB,uCACI7C,EACAwC,GAEA,MAAMb,EAAkB7B,KAAKmE,qBAAqBzB,EAAKG,MACvD,MAAMtB,EAASrB,EAAMqB,OAAOwC,QAC5BxC,EAAO6C,cAAc1B,EAAK2B,aAC1B,MAAMT,EAAa5D,KAAKH,KAAKgE,cAAcnB,EAAKoB,gBAChD,IAAKF,EAAY,CACb,OAAO,IACX,CACArC,EAAOyC,cAAcJ,GACrB,OAAO5D,KAAKH,KAAK0E,yCAAyC,CACtDnB,WAAYV,EAAK2B,YACjBT,WAAYA,EACZ/B,gBAAiBA,EACjBN,OAAQA,EACRQ,MAAOW,EAAKwB,wBAEpB,CAEAC,qBAAqBK,GACjB,OAAQA,GACJ,IAAK,IACD,OAAO9E,EAA0B+E,QACrC,IAAK,IACL,IAAK,IACD,OAAO/E,EAA0BoC,KAE7C,CAEQwB,eAAeZ,GACnB,MAAMC,EAAaD,EACnBC,EAAWmB,eAAiB,QAC5BnB,EAAW+B,wBAA0B,GACrC/B,EAAWE,KAAO,IAClB,OAAOF,CACX,EACH,IAAAgC,EAAA,CAAAC,WAAA,MAAAD,EAAAhF,mBAAA,OAAAgF,CAAA","ignoreList":[]}