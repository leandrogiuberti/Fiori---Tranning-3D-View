{"version":3,"file":"Provider.js","names":["sap","ui","define","___ajax","ajaxTemplates","conditionSerializer","core","dataSourceSerializer","labelCalculation","suggestionTermSplitter","___AbstractProvider","___FacetParser","___ItemParser","___suggestionParser","___MetadataParser","____core_errors","___nlqParser","____sina_SuggestionType","___tools_util","__ui5_require_async","path","Promise","resolve","reject","require","module","__esModule","endsWith","default","Object","defineProperty","value","err","createAjaxClient","AbstractProvider","FacetParser","ItemParser","SuggestionParser","MetadataParser","ESHNotActiveError","NotImplementedError","parseNlqInfo","SuggestionType","handleError","Provider","id","contentProviderId","requestPrefix","ajaxClient","metadataLoadPromises","internalMetadata","labelCalculator","metadataParser","itemParser","facetParser","suggestionParser","sessionId","sorsNavigationTargetGenerator","serviceXML","initAsync","configuration","this","url","sina","createLabelCalculator","generateGuid","_createSorsNavigationTargetGenerator","urlPrefix","getPropertyMetadata","metadata","name","label","semanticObjectType","_private","response","usage","Detail","Title","request","serverInfo","loadServerInfo","d","results","supports","loadBusinessObjectDataSources","capabilities","_createCapabilities","fuzzy","nlq","nlqEnabledInfoOnDataSource","service","capability","annotationsQueryString","length","nodes","querySelectorAll","i","Services","checkService","Id","j","Capabilities","checkCapability","requestUrlServerInfos","buildQueryUrl","requestUrlMetadata","serverInfosProm","getJson","metadataProm","getXML","all","then","async","values","isBrowserEnv","oParser","DOMParser","oDOM","parseFromString","documentElement","nodeName","jsdom","dom","JSDOM","window","document","data","requestUrlTemplate","isCDSAnnotationSupported","isInternalPath","isQueryPropertySupported","requestUrl","dataSourcesData","parseDataSourceData","finishRegistration","bind","elements","assembleOrderBy","query","result","sortOrder","sortKey","order","SortOrder","Descending","push","AttributeId","executeSearchQuery","requestTemplate","searchRequest","clientServiceNamePath","QueryOptions","ClientServiceName","JSON","parse","stringify","rootCondition","filter","clone","serialize","dataSource","SubFilters","Filter","DataSources","SearchTerms","searchTerm","Top","top","Skip","skip","OrderBy","addSessionId","calculateFacets","MaxFacetValues","Facets","Values","ActivateNLQ","ResultList","NLQQueries","NLQConnectorQueries","postJson","parseDynamicMetadata","items","facets","nlqResult","searchResultSet","_createSearchResultSet","ExecutionID","title","totalCount","TotalHits","generateNavigationTargets","executeChartQuery","decideValueHelp","valueHelperRequest","removeClientOptions","ValueHelpAttribute","dimension","ValueFilter","getFilterValueFromConditionTree","chartRequest","FacetRequests","DataSourceAttribute","_createChartResultSet","getAttributeMetadata","facetTotalCount","undefined","executeHierarchyQuery","conditions","_getAttribute","executeSuggestionQuery","executeRegularSuggestionQuery","executeObjectSuggestionQuery","suggestions","_createSuggestionResultSet","isObjectSuggestionQuery","types","indexOf","type","DataSourceType","BusinessObject","objectSuggestionRequest","parseObjectSuggestions","SearchTermAI","suggestionRequest","splittedTerm","split","SuggestionInput","suggestionTerm","includeSuggestionTypes","parseRegularSuggestions","concatenate","sina2OdataConversion","SearchTerm","Data","History","DataSource","suggestionTypes","calculationModes","success","suggestionType","calculationMode","ClientSessionID","timeStamp","Date","getTime","ClientCallTimestamp","ClientLastExecutionID","conditionTree","ConditionAttribute","ConditionValue","getConfigurationAsync","config","personalizedSearch","isPersonalizedSearchEditable","responseData","MainSwitch","IsEnabledForPersonalizedSearch","_createConfiguration","saveConfigurationAsync","mergeJson","resetPersonalizedSearchDataAsync","ClearPersonalizedSearchHistory","queryPrefix","queryPostfix","windowUrl","location","href","systemStringBegin","systemString","systemInRequestUrl","systemStringEnd","substring","systemStringEnd1","systemStringEnd2","getDebugInfo","SystemId","Client","transformPathToJsDomPath","escapeRegExp","string","replace","replaceAll","str","find","RegExp","replacementRules","replacementRule","oldTerm","newTerm","__exports"],"sources":["Provider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { createAjaxClient } from \"./ajax\";\nimport * as ajaxTemplates from \"./ajaxTemplates\";\nimport * as conditionSerializer from \"./conditionSerializer\";\nimport * as core from \"../../core/core\";\nimport * as dataSourceSerializer from \"./dataSourceSerializer\";\nimport * as labelCalculation from \"./labelCalculation\";\nimport * as suggestionTermSplitter from \"./suggestionTermSplitter\";\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport { LabelCalculator } from \"../../core/LabelCalculator\";\nimport { AbstractProviderConfiguration, AbstractProvider } from \"../AbstractProvider\";\nimport { FacetParser } from \"./FacetParser\";\nimport { ItemParser } from \"./ItemParser\";\nimport { ABAPOdataSuggestionResponse, SuggestionParser } from \"./suggestionParser\";\nimport { MetadataParser } from \"./MetadataParser\";\nimport { NavigationTargetGenerator } from \"../tools/sors/NavigationTargetGenerator\";\nimport { Query } from \"../../sina/Query\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport {\n    SerializedSimpleCondition,\n    SerializedComplexCondition,\n    SerializedBetweenCondition,\n} from \"./conditionSerializer\";\nimport { ESHNotActiveError, NotImplementedError } from \"../../core/errors\";\nimport { HierarchyQuery } from \"../../sina/HierarchyQuery\";\nimport { HierarchyResultSet } from \"../../sina/HierarchyResultSet\";\nimport { Capabilities } from \"../../sina/Capabilities\";\nimport { Configuration } from \"../../sina/Configuration\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { SearchResultSet } from \"../../sina/SearchResultSet\";\nimport { parseNlqInfo } from \"./nlqParser\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\nimport { handleError } from \"../tools/util\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\n\nexport type OdataEDMType =\n    | \"Edm.Time\"\n    | \"Edm.DateTime\"\n    | \"Edm.Byte\"\n    | \"Edm.Int16\"\n    | \"Edm.Int32\"\n    | \"Edm.Int64\"\n    | \"Edm.Decimal\"\n    | \"Edm.Single\"\n    | \"Edm.Double\"\n    | \"Edm.String\"\n    | \"Edm.Binary\";\n\nexport interface PersonalizedSearchMainSwitchesResponse {\n    d: { results: Array<{ MainSwitch: number }> };\n}\nexport interface ABAPOdataServerInfoResponse {\n    d: {\n        results: Array<ServerInfo>;\n    };\n}\nexport interface ServerInfo {\n    __metadata: {\n        id: string; // https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/ServerInfos(SystemId='',Client='')\n        uri: string; // https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/ServerInfos(SystemId='',Client='')\n        type: \"ESH_SEARCH_SRV.ServerInfo\";\n    };\n    SystemId: string;\n    Client: string;\n    SystemType: string; // \"CUSTOMER\";\n    DBType: string; // \"HDB\";\n    CurrentUserName: string; // \"TESTER_01\";\n    URL: string;\n    Port: string;\n    Services: {\n        results: [\n            {\n                __metadata: {\n                    id: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Search')\";\n                    uri: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Search')\";\n                    type: \"ESH_SEARCH_SRV.Service\";\n                };\n                Id: \"Search\";\n                Capabilities: {\n                    results: [{ Id: \"NLSSearch\" }];\n                };\n            },\n            {\n                __metadata: {\n                    id: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Suggestions')\";\n                    uri: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Suggestions')\";\n                    type: \"ESH_SEARCH_SRV.Service\";\n                };\n                Id: \"Suggestions\";\n                Capabilities: {\n                    results: [];\n                };\n            },\n            {\n                __metadata: {\n                    id: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('ObjectSuggestions')\";\n                    uri: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('ObjectSuggestions')\";\n                    type: \"ESH_SEARCH_SRV.Service\";\n                };\n                Id: \"ObjectSuggestions\";\n                Capabilities: {\n                    results: [];\n                };\n            },\n            {\n                __metadata: {\n                    id: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Configuration')\";\n                    uri: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Configuration')\";\n                    type: \"ESH_SEARCH_SRV.Service\";\n                };\n                Id: \"Configuration\";\n                Capabilities: {\n                    results: [];\n                };\n            },\n            {\n                __metadata: {\n                    id: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Analysis')\";\n                    uri: string; // \"https://<server>:<port>/sap/opu/odata/sap/ESH_SEARCH_SRV/Services('Analysis')\";\n                    type: \"ESH_SEARCH_SRV.Service\";\n                };\n                Id: \"Analysis\";\n                Capabilities: {\n                    results: [];\n                };\n            },\n        ];\n    };\n}\n\nexport interface ABAPOdataSearchRequest {\n    d: {\n        DataSources: Array<{\n            Id: string;\n            Type: string;\n        }>;\n        Facets?: Array<Record<string, unknown>>;\n        Filter?:\n            | SerializedSimpleCondition\n            | SerializedComplexCondition\n            | SerializedBetweenCondition\n            | Record<string, unknown>;\n        Id: string;\n        MaxFacetValues?: number;\n        OrderBy?: Array<Record<string, unknown>>;\n        QueryOptions?: {\n            ClientCallTimestamp?: string;\n            ClientLastExecutionID?: string;\n            ClientServiceName?: string;\n            ClientSessionID?: string;\n            SearchTerms?: string;\n            SearchType?: string;\n            Skip?: number;\n            Top?: number;\n        };\n        ResultList?: {\n            SearchResults: Array<Record<string, unknown>>;\n        };\n    };\n}\n\nexport interface ABAPOdataSearchResponseDataSourceNlqInfo {\n    Description: string;\n    NLQConnectorQueries: { results: Array<{ ConnectorID: string }> };\n}\n\nexport class Provider extends AbstractProvider {\n    readonly id = \"abap_odata\";\n    declare serverInfo: ServerInfo;\n    contentProviderId: string;\n    requestPrefix: string;\n    ajaxClient: Client;\n    metadataLoadPromises: unknown;\n    internalMetadata: unknown;\n    labelCalculator: LabelCalculator;\n    metadataParser: MetadataParser;\n    itemParser: ItemParser;\n    facetParser: FacetParser;\n    suggestionParser: SuggestionParser;\n    sessionId: string;\n    sorsNavigationTargetGenerator: NavigationTargetGenerator;\n    serviceXML: XMLDocument;\n\n    async initAsync(configuration: AbstractProviderConfiguration): Promise<{\n        capabilities: Capabilities;\n    }> {\n        this.contentProviderId = configuration.contentProviderId;\n        this.requestPrefix = configuration.url || \"/sap/opu/odata/sap/ESH_SEARCH_SRV\";\n        this.sina = configuration.sina;\n        this.ajaxClient = configuration.ajaxClient ?? createAjaxClient();\n        this.metadataLoadPromises = {};\n        this.internalMetadata = {};\n        this.labelCalculator = labelCalculation.createLabelCalculator();\n        this.metadataParser = new MetadataParser(this);\n        this.itemParser = new ItemParser(this);\n        this.facetParser = new FacetParser(this);\n        this.suggestionParser = new SuggestionParser(this, this.itemParser);\n        this.sessionId = core.generateGuid();\n        this.sorsNavigationTargetGenerator = this.sina._createSorsNavigationTargetGenerator({\n            urlPrefix: \"#Action-search&/top=10&filter=\",\n            getPropertyMetadata(metadata) {\n                return {\n                    name: metadata.id,\n                    label: metadata.label,\n                    semanticObjectType: metadata._private.semanticObjectType,\n                    response: !!(metadata.usage && (metadata.usage.Detail || metadata.usage.Title)),\n                    request: true,\n                };\n            },\n        });\n\n        const serverInfo = await this.loadServerInfo();\n        this.serverInfo = serverInfo.d.results[0];\n        if (!this.supports(\"Search\")) {\n            throw new ESHNotActiveError();\n        }\n\n        await this.loadBusinessObjectDataSources();\n\n        return {\n            capabilities: this.sina._createCapabilities({\n                fuzzy: false,\n                nlq: this.supports(\"Search\", \"NLSSearch\"),\n                nlqEnabledInfoOnDataSource: this.supports(\"misc\", \"DataSourceIsNLSEnabled\"),\n            }),\n        };\n    }\n\n    supports(service: string, capability?: string): boolean {\n        // pseudo miscellaneous service\n        // having InteractionEventLists and NavigationEvents capability\n        if (service === \"misc\") {\n            let annotationsQueryString = \"\";\n            if (capability === \"InteractionEventLists\") {\n                annotationsQueryString =\n                    \"Schema[Namespace=ESH_SEARCH_SRV]>EntityContainer[Name=ESH_SEARCH_SRV_Entities]>EntitySet[Name=InteractionEventLists]\";\n            }\n            if (capability === \"NavigationEvents\") {\n                annotationsQueryString =\n                    \"Schema[Namespace=ESH_SEARCH_SRV]>EntityContainer[Name=ESH_SEARCH_SRV_Entities]>EntitySet[Name=NavigationEvents]\";\n            }\n            if (capability === \"DataSourceIsNLSEnabled\") {\n                annotationsQueryString =\n                    \"Schema[Namespace=ESH_SEARCH_SRV]>EntityType[Name=DataSource]>Property[Name=IsNLSEnabled]\";\n            }\n            if (annotationsQueryString.length !== 0) {\n                const nodes = this.querySelectorAll(annotationsQueryString);\n                return nodes.length > 0;\n            }\n        }\n\n        // server defined services\n        for (let i = 0; i < this.serverInfo.Services.results.length; ++i) {\n            const checkService = this.serverInfo.Services.results[i];\n            if (checkService.Id == service) {\n                if (!capability) {\n                    return true;\n                }\n                for (let j = 0; j < checkService.Capabilities.results.length; ++j) {\n                    const checkCapability = checkService.Capabilities.results[j];\n                    if (checkCapability.Id === capability) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private loadServerInfo(): Promise<ABAPOdataServerInfoResponse> {\n        const requestUrlServerInfos = this.buildQueryUrl(\n            this.requestPrefix,\n            \"/ServerInfos?$expand=Services/Capabilities\"\n        );\n        const requestUrlMetadata = this.buildQueryUrl(this.requestPrefix, \"/$metadata\");\n\n        const serverInfosProm = this.ajaxClient.getJson(requestUrlServerInfos);\n        const metadataProm = this.ajaxClient.getXML(requestUrlMetadata);\n\n        return Promise.all([serverInfosProm, metadataProm]).then(async (values) => {\n            const response = values[0];\n            const serviceXML = values[1];\n            if (core.isBrowserEnv()) {\n                const oParser = new DOMParser();\n                const oDOM = oParser.parseFromString(serviceXML, \"text/xml\");\n                if (oDOM.documentElement.nodeName != \"parsererror\") {\n                    this.serviceXML = oDOM;\n                }\n            } else {\n                // Node.js sina tests\n                const jsdom = await import(\"jsdom\");\n                const dom = new jsdom.JSDOM(serviceXML);\n                this.serviceXML = dom.window.document;\n            }\n            return response.data;\n        }) as unknown as Promise<ABAPOdataServerInfoResponse>; // cast from generic response to provider specific response\n    }\n\n    loadBusinessObjectDataSources(): Promise<void> {\n        // complete requestUrlTemplate is \"/DataSources?$expand=Annotations,Attributes/UIAreas,Attributes/Annotations&$filter=Type eq 'View' and IsInternal eq false\";\n        let requestUrlTemplate =\n            \"/DataSources?$expand=Annotations,Attributes/UIAreas,Attributes/Annotations&$filter=Type eq 'View'\";\n        if (this.serviceXML) {\n            if (!this.isCDSAnnotationSupported()) {\n                // Do not query for annotations in data sources request\n                requestUrlTemplate = \"/DataSources?$expand=Attributes/UIAreas&$filter=Type eq 'View'\";\n            }\n\n            const isInternalPath =\n                \"Schema[Namespace=ESH_SEARCH_SRV]>EntityType[Name=DataSource]>Property[Name=IsInternal]\";\n            if (this.isQueryPropertySupported(isInternalPath)) {\n                // add isInternal filter in data sources request\n                requestUrlTemplate = requestUrlTemplate + \" and IsInternal eq false\";\n            }\n        }\n        const requestUrl = this.buildQueryUrl(this.requestPrefix, requestUrlTemplate);\n        return this.ajaxClient.getJson(requestUrl).then(\n            function (response) {\n                const dataSourcesData = response.data.d.results;\n                this.metadataParser.parseDataSourceData(dataSourcesData, this.sorsNavigationTargetGenerator);\n                this.sorsNavigationTargetGenerator.finishRegistration();\n            }.bind(this)\n        );\n    }\n\n    private isCDSAnnotationSupported(): boolean {\n        if (!this.serviceXML) {\n            return false;\n        }\n\n        const annotationsQueryString =\n            \"Schema[Namespace='ESH_SEARCH_SRV']>EntityType[Name='DataSource'][*|content-version='1']>NavigationProperty[Name='Annotations'],\" +\n            \"Schema[Namespace='ESH_SEARCH_SRV']>EntityType[Name='DataSourceAttribute'][*|content-version='1']>NavigationProperty[Name='Annotations']\";\n        const elements = this.querySelectorAll(annotationsQueryString);\n        if (elements.length < 2) {\n            // very old oData service\n            return false;\n        }\n\n        // new oData service\n        // may have more than 2 types of annotation in the futrue\n        return true;\n    }\n\n    assembleOrderBy(query: Query): Array<{\n        AttributeId: string;\n        SortOrder: \"desc\" | \"asc\";\n    }> {\n        const result = [];\n        for (let i = 0; i < query.sortOrder.length; ++i) {\n            const sortKey = query.sortOrder[i];\n            const sortOrder = sortKey.order === this.sina.SortOrder.Descending ? \"desc\" : \"asc\";\n            result.push({\n                AttributeId: sortKey.id,\n                SortOrder: sortOrder,\n            });\n        }\n        return result;\n    }\n\n    async executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        let requestTemplate = ajaxTemplates.searchRequest as any;\n        const clientServiceNamePath =\n            \"Schema[Namespace=ESH_SEARCH_SRV]>EntityType[Name=SearchOptions]>Property[Name=ClientServiceName]\";\n        if (!this.isQueryPropertySupported(clientServiceNamePath)) {\n            // remove ClientServiceName from data sources request\n            delete requestTemplate.d.QueryOptions.ClientServiceName;\n        }\n\n        requestTemplate = JSON.parse(JSON.stringify(requestTemplate));\n\n        const rootCondition = query.filter.rootCondition.clone();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n\n        if (filter.SubFilters.length !== 0) {\n            requestTemplate.d.Filter = filter;\n        } else {\n            delete requestTemplate.d.Filter;\n        }\n        requestTemplate.d.DataSources = dataSourceSerializer.serialize(query.filter.dataSource);\n        requestTemplate.d.QueryOptions.SearchTerms = query.filter.searchTerm;\n        requestTemplate.d.QueryOptions.Top = query.top;\n        requestTemplate.d.QueryOptions.Skip = query.skip;\n        requestTemplate.d.OrderBy = this.assembleOrderBy(query);\n\n        this.addSessionId(requestTemplate);\n        if (!query.calculateFacets) {\n            delete requestTemplate.d.MaxFacetValues;\n            delete requestTemplate.d.Facets;\n        } else {\n            requestTemplate.d.MaxFacetValues = 5;\n            requestTemplate.d.Facets = [\n                {\n                    Values: [],\n                },\n            ];\n        }\n\n        // nlq\n        if (query.nlq) {\n            requestTemplate.d.ActivateNLQ = true;\n            requestTemplate.d.ResultList.NLQQueries = [{ NLQConnectorQueries: [] }];\n        }\n\n        // build request url\n        const requestUrl = this.buildQueryUrl(this.requestPrefix, \"/SearchQueries\");\n\n        // fire request\n        return handleError(\n            async () => {\n                // fetch\n                return (await this.ajaxClient.postJson(requestUrl, requestTemplate)).data as any;\n            },\n            async (data) => {\n                // parse\n                this.metadataParser.parseDynamicMetadata(data.d);\n                const items = await this.itemParser.parse(query, data.d);\n                const facets = await this.facetParser.parse(query, data.d);\n                const nlqResult = parseNlqInfo(this.sina, data.d?.ResultList?.NLQQueries?.results);\n\n                // create search result set\n                const searchResultSet = this.sina._createSearchResultSet({\n                    id: data.d.ResultList.ExecutionID,\n                    title: \"Search Result List\",\n                    query: query,\n                    items: items,\n                    totalCount: data.d.ResultList.TotalHits,\n                    facets: facets,\n                    nlqResult: nlqResult,\n                });\n\n                // generate navigation targets based on foreig keys\n                this.sorsNavigationTargetGenerator.generateNavigationTargets(searchResultSet);\n\n                return searchResultSet;\n            }\n        );\n    }\n\n    executeChartQuery(query: ChartQuery): Promise<ChartResultSet> {\n        let requestUrl = \"\";\n        let requestTemplate;\n        const rootCondition = query.filter.rootCondition.clone();\n        let filter;\n\n        if (this.decideValueHelp(query)) {\n            // value help chart query\n            requestTemplate = JSON.parse(\n                JSON.stringify(ajaxTemplates.valueHelperRequest)\n            ) as typeof ajaxTemplates.valueHelperRequest;\n            this.removeClientOptions(requestTemplate);\n            requestTemplate.d.ValueHelpAttribute = query.dimension;\n            filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n            if (filter.SubFilters.length !== 0) {\n                requestTemplate.d.Filter = filter;\n            } else {\n                delete requestTemplate.d.Filter;\n            }\n            requestTemplate.d.ValueFilter = this.getFilterValueFromConditionTree(query.dimension, filter);\n            requestTemplate.d.QueryOptions.SearchTerms = query.filter.searchTerm;\n            requestTemplate.d.DataSources = dataSourceSerializer.serialize(query.filter.dataSource);\n            requestUrl = this.buildQueryUrl(this.requestPrefix, \"/ValueHelpQueries\");\n            // nlq not supported by backend\n            /*if (query.nlq) {\n                requestTemplate.d.ActivateNLQ = true;\n            }*/\n        } else {\n            // normal chart query\n            requestTemplate = JSON.parse(\n                JSON.stringify(ajaxTemplates.chartRequest)\n            ) as typeof ajaxTemplates.chartRequest;\n            filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n            if (filter.SubFilters.length !== 0) {\n                requestTemplate.d.Filter = filter;\n            } else {\n                delete requestTemplate.d.Filter;\n            }\n            requestTemplate.d.DataSources = dataSourceSerializer.serialize(query.filter.dataSource);\n            requestTemplate.d.QueryOptions.SearchTerms = query.filter.searchTerm;\n            requestTemplate.d.QueryOptions.Skip = 0;\n            this.addSessionId(requestTemplate);\n            requestTemplate.d.FacetRequests = [\n                {\n                    DataSourceAttribute: query.dimension,\n                },\n            ];\n            requestTemplate.d.MaxFacetValues = query.top;\n            requestUrl = this.buildQueryUrl(this.requestPrefix, \"/SearchQueries\");\n            // nlq\n            if (query.nlq) {\n                requestTemplate.d.ActivateNLQ = true;\n            }\n        }\n\n        return this.ajaxClient\n            .postJson(requestUrl, requestTemplate)\n            .then(\n                function (response) {\n                    // DataSourceAttribute is facet attribute\n                    return this.facetParser.parse(query, response.data.d);\n                }.bind(this)\n            )\n            .then(\n                function (facets) {\n                    if (facets.length > 0) {\n                        return facets[0];\n                    }\n                    return this.sina._createChartResultSet({\n                        title: (\n                            query.filter.dataSource.getAttributeMetadata(query.dimension) as AttributeMetadata\n                        ).label,\n                        items: [],\n                        query: query,\n                        facetTotalCount: undefined,\n                    });\n                }.bind(this)\n            );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    executeHierarchyQuery(query: HierarchyQuery): Promise<HierarchyResultSet> {\n        throw new NotImplementedError();\n    }\n\n    decideValueHelp(query): boolean {\n        const conditions = query.filter.rootCondition.conditions;\n        for (let i = 0; i < conditions.length; i++) {\n            if (query.filter._getAttribute(conditions[i]) === query.dimension) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    async executeSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // handle regular suggestions and object suggestion separately because\n        // object suggestions have only searchterms and no suggestionInput\n        return Promise.all([\n            this.executeRegularSuggestionQuery(query),\n            this.executeObjectSuggestionQuery(query),\n        ]).then(\n            function (results) {\n                const suggestions = [];\n                suggestions.push(...results[1]);\n                suggestions.push(...results[0]);\n                return this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: suggestions,\n                });\n            }.bind(this)\n        );\n    }\n\n    isObjectSuggestionQuery(query): boolean {\n        return (\n            query.types.indexOf(\"Object\") >= 0 &&\n            query.filter.dataSource.type === query.sina.DataSourceType.BusinessObject\n        );\n    }\n\n    executeObjectSuggestionQuery(query) {\n        // check query type\n        if (!this.supports(\"ObjectSuggestions\") || !this.isObjectSuggestionQuery(query)) {\n            return Promise.resolve([]);\n        }\n\n        // build request\n        const requestTemplate = JSON.parse(JSON.stringify(ajaxTemplates.objectSuggestionRequest));\n        const rootCondition = query.filter.rootCondition.clone();\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n        if (filter.SubFilters.length !== 0) {\n            requestTemplate.d.Filter = filter;\n        } else {\n            delete requestTemplate.d.Filter;\n        }\n        requestTemplate.d.DataSources = dataSourceSerializer.serialize(query.filter.dataSource);\n        requestTemplate.d.QueryOptions.Top = query.top;\n        requestTemplate.d.QueryOptions.Skip = query.skip;\n        requestTemplate.d.QueryOptions.SearchTerms = query.filter.searchTerm;\n        this.addSessionId(requestTemplate);\n\n        // nlq\n        if (query.nlq) {\n            requestTemplate.d.ActivateNLQ = true;\n        }\n\n        // build request url\n        const requestUrl = this.buildQueryUrl(this.requestPrefix, \"/SuggestionsQueries\");\n\n        // fire request\n        return this.ajaxClient\n            .postJson(requestUrl, requestTemplate)\n            .then((response) => this.suggestionParser.parseObjectSuggestions(query, response.data));\n    }\n\n    private executeRegularSuggestionQuery(query) {\n        // AI suggestions not supported\n        if (query.types.indexOf(SuggestionType.SearchTermAI) >= 0) {\n            return [];\n        }\n\n        const requestTemplate = JSON.parse(JSON.stringify(ajaxTemplates.suggestionRequest));\n\n        // split search term in query into (1) searchTerm (2) suggestionTerm\n        const searchTerm = query.filter.searchTerm;\n        const splittedTerm = suggestionTermSplitter.split(searchTerm);\n\n        // add search term to condition\n        const rootCondition = query.filter.rootCondition.clone();\n\n        // assemble request\n        const filter = conditionSerializer.serialize(query.filter.dataSource, rootCondition);\n        if (filter.SubFilters.length !== 0) {\n            requestTemplate.d.Filter = filter;\n        } else {\n            delete requestTemplate.d.Filter;\n        }\n        requestTemplate.d.DataSources = dataSourceSerializer.serialize(query.filter.dataSource);\n        requestTemplate.d.QueryOptions.Top = query.top;\n        requestTemplate.d.QueryOptions.Skip = query.skip;\n        requestTemplate.d.SuggestionInput = splittedTerm.suggestionTerm;\n        requestTemplate.d.QueryOptions.SearchTerms =\n            splittedTerm.searchTerm === null ? \"\" : splittedTerm.searchTerm;\n        if (!this.includeSuggestionTypes(query, requestTemplate)) {\n            // no regular suggestions requested -> return\n            return [];\n        }\n        this.addSessionId(requestTemplate);\n\n        // nlq\n        if (query.nlq) {\n            requestTemplate.d.ActivateNLQ = true;\n        }\n\n        // build request url\n        const requestUrl = this.buildQueryUrl(this.requestPrefix, \"/SuggestionsQueries\");\n\n        // fire request\n        return this.ajaxClient\n            .postJson(requestUrl, requestTemplate)\n            .then((response) =>\n                this.suggestionParser.parseRegularSuggestions(\n                    query,\n                    response.data as unknown as ABAPOdataSuggestionResponse // cast from generic response to provider specific response\n                )\n            )\n            .then((suggestions) => {\n                suggestionTermSplitter.concatenate(splittedTerm, suggestions);\n                return suggestions;\n            });\n    }\n\n    includeSuggestionTypes(query: SuggestionQuery, suggestionRequest): boolean {\n        const sina2OdataConversion = {\n            SearchTerm: {\n                Data: \"IncludeAttributeSuggestions\",\n                History: \"IncludeHistorySuggestions\",\n            },\n            Object: {},\n            DataSource: {\n                Data: \"IncludeDataSourceSuggestions\",\n            },\n        };\n        const suggestionTypes = query.types;\n        const calculationModes = query.calculationModes;\n        let success = false;\n        for (let i = 0; i < suggestionTypes.length; i++) {\n            const suggestionType = suggestionTypes[i];\n            for (let j = 0; j < calculationModes.length; j++) {\n                const calculationMode = calculationModes[j];\n                const value = sina2OdataConversion[suggestionType][calculationMode];\n                if (typeof value === \"undefined\") {\n                    continue;\n                }\n                suggestionRequest.d[value] = true;\n                success = true;\n            }\n        }\n        return success;\n    }\n\n    private addSessionId(request: ABAPOdataSearchRequest): void {\n        request.d.QueryOptions.ClientSessionID = this.sessionId;\n        const timeStamp = new Date().getTime();\n        request.d.QueryOptions.ClientCallTimestamp = \"\\\\/Date(\" + timeStamp + \")\\\\/\";\n    }\n\n    removeClientOptions(\n        request: typeof ajaxTemplates.valueHelperRequest | typeof ajaxTemplates.chartRequest\n    ): void {\n        delete request.d.QueryOptions.ClientSessionID;\n        delete request.d.QueryOptions.ClientCallTimestamp;\n        delete request.d.QueryOptions.ClientServiceName;\n        delete request.d.QueryOptions.ClientLastExecutionID;\n    }\n\n    private getFilterValueFromConditionTree(dimension, conditionTree): string | null {\n        if (conditionTree.ConditionAttribute && conditionTree.ConditionAttribute === dimension) {\n            return conditionTree.ConditionValue;\n        } else if (conditionTree.SubFilters) {\n            let i;\n            let result = null;\n            for (i = 0; result === null && i < conditionTree.SubFilters.length; i++) {\n                result = this.getFilterValueFromConditionTree(dimension, conditionTree.SubFilters[i]);\n            }\n            return result;\n        }\n        return null;\n    }\n\n    getConfigurationAsync(): Promise<Configuration> {\n        let requestUrl = this.buildQueryUrl(\n            this.requestPrefix,\n            \"/PersonalizedSearchMainSwitches?$filter=Selected eq true\"\n        );\n        return this.ajaxClient.getJson(requestUrl).then((response) => {\n            const config = {\n                personalizedSearch: false,\n                isPersonalizedSearchEditable: false,\n            };\n            const responseData = response.data as unknown as PersonalizedSearchMainSwitchesResponse;\n            switch (responseData.d.results[0].MainSwitch) {\n                case 3:\n                    // Enabled after user‘s approval\n                    config.isPersonalizedSearchEditable = true;\n                    break;\n                case 4:\n                    // Enabled until user‘s rejection\n                    config.isPersonalizedSearchEditable = true;\n                    break;\n                case 2:\n                    // Enabled for all users\n                    config.isPersonalizedSearchEditable = false;\n                    break;\n                case 1:\n                    // Disabled for all users\n                    config.isPersonalizedSearchEditable = false;\n                    break;\n            }\n\n            requestUrl = this.buildQueryUrl(this.requestPrefix, \"/Users('<current>')\");\n            return this.ajaxClient.getJson(requestUrl).then(\n                function (response) {\n                    if (response.data.d.IsEnabledForPersonalizedSearch) {\n                        config.personalizedSearch = true;\n                    }\n                    return this.sina._createConfiguration(config);\n                }.bind(this)\n            );\n        });\n    }\n\n    public saveConfigurationAsync(configuration: Configuration): Promise<unknown> {\n        const data = {\n            IsEnabledForPersonalizedSearch: configuration.personalizedSearch,\n        };\n\n        const requestUrl = this.buildQueryUrl(this.requestPrefix, \"/Users('<current>')\");\n        return this.ajaxClient.mergeJson(requestUrl, data);\n    }\n\n    public resetPersonalizedSearchDataAsync(): Promise<unknown> {\n        const data = {\n            ClearPersonalizedSearchHistory: true,\n        };\n\n        const requestUrl = this.buildQueryUrl(this.requestPrefix, \"/Users('<current>')\");\n        return this.ajaxClient.mergeJson(requestUrl, data);\n    }\n\n    buildQueryUrl(queryPrefix: string, queryPostfix: string): string {\n        if (typeof window === \"undefined\") {\n            // sina mocha tests on node\n            return queryPrefix + queryPostfix;\n        }\n        const windowUrl = window.location.href;\n        let requestUrl = \"\";\n        let systemStringBegin;\n        let systemString = \"\";\n        let systemInRequestUrl = \"\";\n\n        // assign search backend system manuelly\n        // url: esh-system=sid(PH6.002) -> query: ;o=sid(PH6.002)\n        systemStringBegin = windowUrl.indexOf(\"esh-system=sid(\");\n        if (systemStringBegin !== -1) {\n            const systemStringEnd = windowUrl.substring(systemStringBegin).indexOf(\")\");\n            if (systemStringEnd !== -1) {\n                systemString = windowUrl.substring(\n                    systemStringBegin + 15,\n                    systemStringBegin + systemStringEnd\n                );\n                if (systemString.length !== 0) {\n                    systemInRequestUrl = \";o=sid(\" + systemString + \")\";\n                }\n            }\n        }\n\n        // assign search backend system manuelly\n        // url: esh-system=ALIASNAMEXYZCLNT002 -> query: ;o=sid(ALIASNAMEXYZCLNT002)\n        if (systemString.length === 0) {\n            systemStringBegin = windowUrl.indexOf(\"esh-system=\");\n            if (systemStringBegin !== -1) {\n                const systemStringEnd1 = windowUrl.substring(systemStringBegin).indexOf(\"&\");\n                const systemStringEnd2 = windowUrl.substring(systemStringBegin).indexOf(\"#\");\n\n                if (systemStringEnd1 !== -1 && systemStringEnd2 !== -1) {\n                    if (systemStringEnd1 < systemStringEnd2) {\n                        systemString = windowUrl.substring(\n                            systemStringBegin + 11,\n                            systemStringBegin + systemStringEnd1\n                        );\n                    } else {\n                        systemString = windowUrl.substring(\n                            systemStringBegin + 11,\n                            systemStringBegin + systemStringEnd2\n                        );\n                    }\n                }\n\n                if (systemStringEnd1 !== -1 && systemStringEnd2 === -1) {\n                    systemString = windowUrl.substring(\n                        systemStringBegin + 11,\n                        systemStringBegin + systemStringEnd1\n                    );\n                }\n\n                if (systemStringEnd1 === -1 && systemStringEnd2 !== -1) {\n                    systemString = windowUrl.substring(\n                        systemStringBegin + 11,\n                        systemStringBegin + systemStringEnd2\n                    );\n                }\n\n                if (systemStringEnd1 === -1 && systemStringEnd2 === -1) {\n                    systemString = windowUrl.substring(systemStringBegin + 11);\n                }\n            }\n            if (systemString.length !== 0) {\n                systemInRequestUrl = \";o=\" + systemString;\n            }\n        }\n\n        requestUrl = queryPrefix + systemInRequestUrl + queryPostfix;\n        return requestUrl;\n    }\n\n    getDebugInfo(): string {\n        return `Searchsystem: ${this.serverInfo.SystemId} Client: ${this.serverInfo.Client} ESH Search API Provider: ${this.id}`;\n    }\n\n    isQueryPropertySupported(path: string): boolean {\n        if (this.serviceXML === undefined) {\n            return false;\n        }\n\n        const elements = this.querySelectorAll(path);\n        if (elements.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    transformPathToJsDomPath(query: string): string {\n        function escapeRegExp(string) {\n            return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n        }\n\n        function replaceAll(str, find, replace) {\n            return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n        }\n        const replacementRules = [\n            // tags to lowercase\n            [\"Schema\", \"schema\"],\n            [\"EntityType\", \"entitytype\"],\n            [\"EntityContainer\", \"entitycontainer\"],\n            [\"EntitySet\", \"EntitySet\"],\n            [\"NavigationProperty\", \"navigationproperty\"],\n            [\"Property\", \"property\"],\n            // child selector to descendant selector\n            [\">\", \" \"],\n            // prefix by by namespace\n            [\"content-version\", \"sap:\\\\content-version\"],\n        ];\n        for (const replacementRule of replacementRules) {\n            const [oldTerm, newTerm] = replacementRule;\n            query = replaceAll(query, oldTerm, newTerm);\n        }\n        return query;\n    }\n\n    querySelectorAll(path: string): NodeListOf<Element> {\n        if (this.serviceXML === undefined) {\n            return undefined;\n        }\n        if (!core.isBrowserEnv()) {\n            path = this.transformPathToJsDomPath(path);\n        }\n        return this.serviceXML.querySelectorAll(path);\n    }\n}\n"],"mappings":"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","ignoreList":[]}