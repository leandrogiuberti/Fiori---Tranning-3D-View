{"version":3,"file":"conditionSerializerEshObj.js","names":["sap","ui","define","____sina_DataSource","____sina_ComparisonOperator","____sina_LogicalOperator","____sina_ComplexCondition","____sina_AttributeType","typeConverter","___eshObjects_src_index","____core_errors","____sina_NullValue","DataSource","ComparisonOperator","LogicalOperator","ComplexCondition","AttributeType","EshObjSearchQueryComparisonOperator","EshObjComparisonOperator","EshObjNullValue","SearchQueryLogicalOperator","Expression","Comparison","Phrase","StringValue","UnknownComparisonOperatorError","UnknownLogicalOperatorError","NullValue","ConditionSerializer","dataSource","constructor","this","convertSinaToOdataOperator","sinaOperator","Search","Eq","EqualCaseSensitive","Ne","NotEqualCaseSensitive","Lt","LessThanCaseInsensitive","Gt","GreaterThanCaseInsensitive","Le","LessThanOrEqualCaseInsensitive","Ge","GreaterThanOrEqualCaseInsensitive","Co","EqualCaseInsensitive","Bw","Ew","DescendantOf","ChildOf","convertSinaToOdataLogicalOperator","And","AND","Or","OR","Not","NOT","Row","ROW","serializeComplexCondition","condition","result","operator","items","subConditions","conditions","i","length","subCondition","push","serialize","serializeSimpleCondition","value","property","attribute","Is","type","String","metadata","getAttributeMetadata","conditionValue","sina2Odata","conditionOperator","phrase","serializeBetweenCondition","lowCondition","highCondition","lowValue","highValue","isQuoted","serializer","TIGHT_AND","__exports","__esModule"],"sources":["conditionSerializerEshObj.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSource } from \"../../sina/DataSource\";\nimport { Condition } from \"../../sina/Condition\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport * as typeConverter from \"./typeConverter\";\nimport {\n    SearchQueryComparisonOperator as EshObjSearchQueryComparisonOperator,\n    ComparisonOperator as EshObjComparisonOperator,\n    NullValue as EshObjNullValue,\n    SearchQueryLogicalOperator,\n    IToStatement,\n    Expression,\n    Comparison,\n    Phrase,\n    // RangeValues,\n    StringValue,\n} from \"./eshObjects/src/index\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\n// import * as eshObjectsQL from \"./eshObjects/src/index\";\nimport { UnknownComparisonOperatorError, UnknownLogicalOperatorError } from \"../../core/errors\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { NullValue } from \"../../sina/NullValue\";\n\nexport class ConditionSerializer {\n    dataSource: DataSource;\n\n    constructor(dataSource: DataSource) {\n        this.dataSource = dataSource;\n    }\n\n    convertSinaToOdataOperator(sinaOperator: ComparisonOperator): EshObjSearchQueryComparisonOperator {\n        switch (sinaOperator) {\n            case ComparisonOperator.Search:\n                return EshObjSearchQueryComparisonOperator.Search;\n            case ComparisonOperator.Eq:\n                return EshObjSearchQueryComparisonOperator.EqualCaseSensitive;\n            case ComparisonOperator.Ne:\n                return EshObjSearchQueryComparisonOperator.NotEqualCaseSensitive;\n            case ComparisonOperator.Lt:\n                return EshObjSearchQueryComparisonOperator.LessThanCaseInsensitive;\n            case ComparisonOperator.Gt:\n                return EshObjSearchQueryComparisonOperator.GreaterThanCaseInsensitive;\n            case ComparisonOperator.Le:\n                return EshObjSearchQueryComparisonOperator.LessThanOrEqualCaseInsensitive;\n            case ComparisonOperator.Ge:\n                return EshObjSearchQueryComparisonOperator.GreaterThanOrEqualCaseInsensitive;\n            case ComparisonOperator.Co: // Contains only\n                return EshObjSearchQueryComparisonOperator.EqualCaseInsensitive;\n            case ComparisonOperator.Bw: // Begin with\n                return EshObjSearchQueryComparisonOperator.EqualCaseInsensitive;\n            case ComparisonOperator.Ew: // End with\n                return EshObjSearchQueryComparisonOperator.EqualCaseInsensitive;\n            case ComparisonOperator.DescendantOf:\n                return EshObjSearchQueryComparisonOperator.DescendantOf;\n            case ComparisonOperator.ChildOf:\n                return EshObjSearchQueryComparisonOperator.ChildOf;\n            default:\n                throw new UnknownComparisonOperatorError(sinaOperator);\n        }\n    }\n\n    convertSinaToOdataLogicalOperator(sinaOperator: LogicalOperator): SearchQueryLogicalOperator {\n        switch (sinaOperator) {\n            case LogicalOperator.And:\n                return SearchQueryLogicalOperator.AND;\n            case LogicalOperator.Or:\n                return SearchQueryLogicalOperator.OR;\n            case LogicalOperator.Not:\n                return SearchQueryLogicalOperator.NOT;\n            case LogicalOperator.Row:\n                return SearchQueryLogicalOperator.ROW;\n            default:\n                throw new UnknownLogicalOperatorError(sinaOperator);\n        }\n    }\n\n    serializeComplexCondition(condition: ComplexCondition): IToStatement {\n        const result = new Expression({\n            operator: this.convertSinaToOdataLogicalOperator(condition.operator),\n            items: [],\n        });\n        const subConditions = condition.conditions;\n        for (let i = 0; i < subConditions.length; ++i) {\n            const subCondition = subConditions[i] as Condition;\n            result.items.push(this.serialize(subCondition));\n        }\n\n        return result;\n    }\n\n    serializeSimpleCondition(condition: SimpleCondition): Comparison {\n        // special handling for null value\n        if (condition.value instanceof NullValue && condition.operator === ComparisonOperator.Eq) {\n            return new Comparison({\n                property: condition.attribute,\n                operator: EshObjComparisonOperator.Is,\n                value: new EshObjNullValue(),\n            });\n        }\n\n        let type = AttributeType.String;\n        let metadata: AttributeMetadata;\n        if (this.dataSource instanceof DataSource) {\n            metadata = this.dataSource.getAttributeMetadata(condition.attribute) as AttributeMetadata;\n            if (metadata && metadata.type) {\n                type = metadata.type;\n            }\n        }\n        const conditionValue = typeConverter.sina2Odata(type, condition.value, {\n            operator: condition.operator,\n        });\n\n        const conditionOperator = this.convertSinaToOdataOperator(condition.operator);\n\n        return new Comparison({\n            property: condition.attribute,\n            operator: conditionOperator,\n            value: new Phrase({ phrase: conditionValue }),\n        });\n    }\n\n    serializeBetweenCondition(condition: ComplexCondition): Expression {\n        const lowCondition = condition.conditions[0] as SimpleCondition;\n        const highCondition = condition.conditions[1] as SimpleCondition;\n        let type = AttributeType.String;\n        if (this.dataSource instanceof DataSource) {\n            const metadata = this.dataSource.getAttributeMetadata(lowCondition.attribute);\n            type = metadata.type || AttributeType.String;\n        }\n\n        const lowValue = typeConverter.sina2Odata(type, lowCondition.value, {\n            operator: lowCondition.operator,\n        });\n        const highValue = typeConverter.sina2Odata(type, highCondition.value, {\n            operator: highCondition.operator,\n        });\n\n        return new Expression({\n            operator: SearchQueryLogicalOperator.AND,\n            items: [\n                new Comparison({\n                    property: lowCondition.attribute,\n                    operator: EshObjSearchQueryComparisonOperator.GreaterThanOrEqualCaseInsensitive,\n                    value: new StringValue({\n                        value: lowValue,\n                        isQuoted: true,\n                    }),\n                }),\n                new Comparison({\n                    property: lowCondition.attribute,\n                    operator: EshObjSearchQueryComparisonOperator.LessThanOrEqualCaseInsensitive,\n                    value: new StringValue({\n                        value: highValue,\n                        isQuoted: true,\n                    }),\n                }),\n            ],\n        });\n\n        // return new Comparison({\n        //     property: lowCondition.attribute,\n        //     operator: EshObjComparisonOperator.BetweenCaseInsensitive,\n        //     value: new RangeValues({\n        //         start: lowValue, // currently only support simple types of string and number, will be improved\n        //         end: highValue,\n        //     }),\n        // });\n    }\n\n    serialize(condition: Condition): IToStatement {\n        if (condition instanceof ComplexCondition) {\n            if (\n                condition.operator === LogicalOperator.And &&\n                condition.conditions.length > 1 &&\n                // TODO: Enum\n                condition.conditions[0] &&\n                (condition.conditions[0].operator === ComparisonOperator.Ge ||\n                    condition.conditions[0].operator === ComparisonOperator.Gt ||\n                    condition.conditions[0].operator === ComparisonOperator.Le ||\n                    condition.conditions[0].operator === ComparisonOperator.Lt)\n            ) {\n                return this.serializeBetweenCondition(condition as ComplexCondition);\n            }\n            return this.serializeComplexCondition(condition as ComplexCondition);\n        }\n        return this.serializeSimpleCondition(condition as SimpleCondition);\n    }\n}\n\nexport function serialize(dataSource: DataSource, condition: Condition): Expression {\n    const serializer = new ConditionSerializer(dataSource);\n    let result = serializer.serialize(condition);\n    if (result instanceof Comparison) {\n        result = new Expression({\n            operator: SearchQueryLogicalOperator.TIGHT_AND,\n            items: [result],\n        });\n    }\n    return result as Expression;\n}\n"],"mappings":"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","ignoreList":[]}