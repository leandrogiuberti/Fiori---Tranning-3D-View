{"version":3,"file":"conditionSerializer-dbg.js","names":["sap","ui","define","____sina_ComparisonOperator","typeConverter","____sina_ComplexCondition","____sina_SimpleCondition","____core_errors","___ComparisonOperator","____sina_LogicalOperator","ComparisonOperator","ComplexCondition","SimpleCondition","InBetweenConditionInConsistent","UnknownComparisonOperatorError","ABAPODataComparisonOperator","LogicalOperator","ConditionSerializer","dataSource","constructor","convertSinaToOdataOperator","sinaOperator","Eq","Lt","Gt","Le","Ge","Co","Bw","Ew","And","Or","serializeComplexCondition","condition","result","ActAsQueryPart","Id","OperatorType","operator","SubFilters","actAsQueryPartPath","sina","provider","isQueryPropertySupported","subConditions","conditions","i","length","subCondition","push","serialize","serializeSimpleCondition","metadata","getAttributeMetadata","attribute","type","conditionObj","ConditionAttribute","ConditionOperator","ConditionValue","isDynamicValue","value","sina2Odata","serializeBetweenCondition","valueLow","valueHigh","rangeStartCondition","rangeEndCondition","Bt","ConditionValueHigh","serializer","__exports","__esModule"],"sources":["conditionSerializer.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport * as typeConverter from \"./typeConverter\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { Condition } from \"../../sina/Condition\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\nimport { InBetweenConditionInConsistent, UnknownComparisonOperatorError } from \"../../core/errors\";\nimport { ABAPODataComparisonOperator } from \"./ComparisonOperator\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\n\nexport interface SerializedBetweenCondition {\n    ConditionAttribute: string;\n    ConditionOperator: ABAPODataComparisonOperator.Bt;\n    ConditionValue: string | number | boolean;\n    ConditionValueHigh: string | number | boolean;\n    SubFilters: Condition[];\n}\n\nexport interface SerializedSimpleCondition {\n    ConditionAttribute: string;\n    ConditionOperator: string;\n    ConditionValue: string | number | boolean;\n    SubFilters: Condition[];\n}\n\nexport interface SerializedComplexCondition {\n    ActAsQueryPart: boolean;\n    Id: number;\n    OperatorType: string;\n    SubFilters: Condition[];\n}\n\nclass ConditionSerializer {\n    dataSource: DataSource;\n\n    constructor(dataSource: DataSource) {\n        this.dataSource = dataSource;\n    }\n\n    convertSinaToOdataOperator(sinaOperator: ComparisonOperator | LogicalOperator) {\n        switch (sinaOperator) {\n            case ComparisonOperator.Eq:\n                return \"EQ\";\n            case ComparisonOperator.Lt:\n                return \"LT\";\n            case ComparisonOperator.Gt:\n                return \"GT\";\n            case ComparisonOperator.Le:\n                return \"LE\";\n            case ComparisonOperator.Ge:\n                return \"GE\";\n            case ComparisonOperator.Co:\n                return \"EQ\";\n            case ComparisonOperator.Bw:\n                return \"EQ\";\n            case ComparisonOperator.Ew:\n                return \"EQ\";\n            case LogicalOperator.And:\n                return \"AND\";\n            case LogicalOperator.Or:\n                return \"OR\";\n            default:\n                throw new UnknownComparisonOperatorError(sinaOperator);\n        }\n    }\n\n    serializeComplexCondition(condition: ComplexCondition): SerializedComplexCondition {\n        const result = {\n            ActAsQueryPart: false,\n            Id: 1,\n            OperatorType: this.convertSinaToOdataOperator(condition.operator),\n            SubFilters: [],\n        };\n\n        const actAsQueryPartPath =\n            \"Schema[Namespace=ESH_SEARCH_SRV]>EntityType[Name=SearchFilter]>Property[Name=ActAsQueryPart]\";\n        if (condition.sina.provider.isQueryPropertySupported(actAsQueryPartPath)) {\n            result.ActAsQueryPart = true;\n        }\n\n        const subConditions = condition.conditions;\n        for (let i = 0; i < subConditions.length; ++i) {\n            const subCondition = subConditions[i];\n            result.SubFilters.push(this.serialize(subCondition));\n        }\n        return result;\n    }\n\n    serializeSimpleCondition(condition: SimpleCondition): SerializedSimpleCondition {\n        const metadata = this.dataSource.getAttributeMetadata(condition.attribute);\n        const type = metadata.type;\n        const conditionObj = {\n            ConditionAttribute: condition.attribute,\n            ConditionOperator: this.convertSinaToOdataOperator(condition.operator),\n            ConditionValue: condition.isDynamicValue\n                ? condition.value\n                : typeConverter.sina2Odata(type, condition.value, {\n                      operator: condition.operator,\n                  }),\n            SubFilters: [],\n        };\n\n        return conditionObj;\n    }\n\n    serializeBetweenCondition(condition: ComplexCondition): SerializedBetweenCondition {\n        let valueLow;\n        let valueHigh;\n\n        const rangeStartCondition = condition.conditions[0];\n        const rangeEndCondition = condition.conditions[1];\n        if (rangeStartCondition instanceof SimpleCondition && rangeEndCondition instanceof SimpleCondition) {\n            const metadata = this.dataSource.getAttributeMetadata(rangeStartCondition.attribute);\n            const type = metadata.type;\n\n            if (rangeStartCondition.operator === ComparisonOperator.Ge) {\n                valueLow = rangeStartCondition.value;\n                valueHigh = rangeEndCondition.value;\n            } else {\n                valueLow = rangeEndCondition.value;\n                valueHigh = rangeStartCondition.value;\n            }\n            const conditionObj = {\n                ConditionAttribute: rangeStartCondition.attribute,\n                ConditionOperator: ABAPODataComparisonOperator.Bt,\n                ConditionValue: typeConverter.sina2Odata(type, valueLow),\n                ConditionValueHigh: typeConverter.sina2Odata(type, valueHigh),\n                SubFilters: [],\n            };\n\n            return conditionObj;\n        }\n\n        throw new InBetweenConditionInConsistent();\n    }\n\n    serialize(\n        condition: Condition\n    ): SerializedSimpleCondition | SerializedComplexCondition | SerializedBetweenCondition {\n        if (condition instanceof ComplexCondition) {\n            if (\n                condition.operator === LogicalOperator.And &&\n                condition.conditions[0] &&\n                (condition.conditions[0].operator === ComparisonOperator.Ge ||\n                    condition.conditions[0].operator === ComparisonOperator.Gt ||\n                    condition.conditions[0].operator === ComparisonOperator.Le ||\n                    condition.conditions[0].operator === ComparisonOperator.Lt)\n            ) {\n                if (condition.conditions.length === 1) {\n                    // condition example: \"\" ... \"100\"\n                    return this.serializeSimpleCondition(condition.conditions[0] as SimpleCondition);\n                }\n                // condition example: \"10\" ... \"100\"\n                return this.serializeBetweenCondition(condition);\n            }\n            return this.serializeComplexCondition(condition);\n        }\n        // condition example: \"USA\"\n        if (condition instanceof SimpleCondition) {\n            return this.serializeSimpleCondition(condition);\n        }\n    }\n}\n\nexport function serialize(\n    dataSource: DataSource,\n    condition: Condition\n): SerializedSimpleCondition | SerializedComplexCondition | SerializedBetweenCondition {\n    const serializer = new ConditionSerializer(dataSource);\n    return serializer.serialize(condition);\n}\n"],"mappings":"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","ignoreList":[]}