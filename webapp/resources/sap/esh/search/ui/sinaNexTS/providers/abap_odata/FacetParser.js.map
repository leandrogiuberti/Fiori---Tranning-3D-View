{"version":3,"file":"FacetParser.js","names":["sap","ui","define","____sina_ComparisonOperator","____sina_FacetType","____sina_LogicalOperator","____sina_SearchQuery","typeConverter","ComparisonOperator","FacetType","LogicalOperator","SearchQuery","FacetParser","provider","sina","constructor","this","parse","query","data","ValueHelp","prepareValueHelpFacet","facets","Facets","results","i","length","facetData","Type","DataSource","push","parseDataSourceFacet","filter","dataSource","type","DataSourceType","Category","UserCategory","parseChartFacet","undefined","Promise","all","sourceFacetItems","getDataSource","id","attributeId","ValueHelpAttribute","metadata","getAttributeMetadata","targetFacet","Id","Name","label","Values","item","Description","ValueFormatted","NumberOfObjects","NumberOfInstances","ValueLow","Value","ValueLowFormatted","ValueHigh","ValueHighFormatted","dataSourceQuery","createDataSourceQuery","clone","nlq","items","cell","createDataSource","_createDataSourceResultSetItem","dimensionValueFormatted","labelPlural","measureValue","measureValueFormatted","toString","resultSet","_createDataSourceResultSet","title","facetTotalCount","_setResultSet","createAttributeFilterCondition","conditions","isDynamicValueLow","createSimpleCondition","attribute","operator","Ge","value","odata2Sina","isDynamicValue","isDynamicValueHigh","Le","createComplexCondition","attributeLabel","valueLabel","And","chartQuery","setDataSource","setRootCondition","rootCondition","createChartQuery","dimension","_createChartResultSetItem","filterCondition","_createChartResultSet","__exports","__esModule"],"sources":["FacetParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { Condition } from \"../../sina/Condition\";\nimport { DataSourceResultSet } from \"../../sina/DataSourceResultSet\";\nimport { FacetType } from \"../../sina/FacetType\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Provider } from \"./Provider\";\nimport * as typeConverter from \"./typeConverter\";\n\nexport class FacetParser {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider: Provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    parse(query, data) {\n        if (data.ValueHelp) {\n            this.prepareValueHelpFacet(query, data);\n        }\n\n        const facets = [];\n        if (!data.Facets || !data.Facets.results) {\n            return [];\n        }\n        for (let i = 0; i < data.Facets.results.length; i++) {\n            const facetData = data.Facets.results[i];\n            if (facetData.Type === FacetType.DataSource) {\n                facets.push(this.parseDataSourceFacet(query, facetData));\n            } else {\n                if (\n                    query.filter.dataSource.type === query.sina.DataSourceType.Category || // ignore common attributes facets\n                    query.filter.dataSource.type === query.sina.DataSourceType.UserCategory // ignore attributes facets\n                ) {\n                    continue;\n                }\n                facets.push(this.parseChartFacet(query, facetData, undefined)); // ToDo: Chart queries do not request total count (see data.ResultList.TotalHits, ResultList is deferred)\n            }\n        }\n        return Promise.all(facets);\n    }\n\n    prepareValueHelpFacet(query, data) {\n        const sourceFacetItems = data.ValueHelp.results;\n        const dataSource = this.sina.getDataSource(query.filter.dataSource.id);\n        const attributeId = data.ValueHelpAttribute;\n        const metadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n        const targetFacet = {\n            Id: data.ValueHelpAttribute,\n            Name: metadata.label,\n            Type: \"AttributeValue\",\n            Values: {\n                results: [],\n            },\n        };\n        const results = [];\n        for (let i = 0; i < sourceFacetItems.length; i++) {\n            const item = sourceFacetItems[i];\n            results.push({\n                Description: item.ValueFormatted,\n                NumberOfObjects: item.NumberOfInstances,\n                Type: \"AttributeValue\",\n                ValueLow: item.Value,\n                ValueLowFormatted: item.ValueFormatted,\n                ValueHigh: \"\",\n                ValueHighFormatted: \"\",\n            });\n        }\n        targetFacet.Values.results = results;\n\n        data.Facets = {};\n        data.Facets.results = [];\n        data.Facets.results[0] = targetFacet;\n    }\n\n    parseDataSourceFacet(query, facetData): DataSourceResultSet {\n        // for search query with datasource facet: create corresponding datasource query\n        let dataSourceQuery = query;\n        if (query instanceof SearchQuery) {\n            dataSourceQuery = this.sina.createDataSourceQuery({\n                dataSource: query.filter.dataSource,\n                filter: query.filter.clone(),\n                nlq: query.nlq,\n            });\n        }\n\n        // assemble results set items\n        const items = [];\n        for (let i = 0; i < facetData.Values.results.length; i++) {\n            const cell = facetData.Values.results[i];\n\n            // create filter (used when clicking on the item)\n            let dataSource = this.sina.getDataSource(cell.ValueLow);\n            if (!dataSource) {\n                dataSource = this.sina.createDataSource({\n                    type: this.sina.DataSourceType.Category,\n                    id: cell.ValueLow,\n                    label: cell.Description,\n                });\n            }\n\n            // create item\n            items.push(\n                this.sina._createDataSourceResultSetItem({\n                    dataSource: dataSource,\n                    dimensionValueFormatted: dataSource.labelPlural,\n                    measureValue: cell.NumberOfObjects,\n                    measureValueFormatted: cell.NumberOfObjects.toString(),\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createDataSourceResultSet({\n            title: query.filter.dataSource.label,\n            items: items,\n            query: dataSourceQuery,\n            facetTotalCount: undefined,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return dataSourceQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n\n    createAttributeFilterCondition(attributeId: string, metadata, cell): Condition {\n        if (cell.Type === \"AttributeRange\") {\n            // Between Condition\n            const conditions: SimpleCondition[] = [];\n            if (cell.ValueLow && cell.ValueLow.length !== 0) {\n                const isDynamicValueLow = cell.Type === \"AttributeConstant\";\n                conditions.push(\n                    this.sina.createSimpleCondition({\n                        attribute: attributeId,\n                        operator: ComparisonOperator.Ge,\n                        value: isDynamicValueLow\n                            ? cell.ValueLow\n                            : typeConverter.odata2Sina(metadata.type, cell.ValueLow),\n                        isDynamicValue: isDynamicValueLow,\n                    })\n                );\n            }\n            if (cell.ValueHigh && cell.ValueHigh.length !== 0) {\n                const isDynamicValueHigh = cell.Type === \"AttributeConstant\";\n                conditions.push(\n                    this.sina.createSimpleCondition({\n                        attribute: attributeId,\n                        operator: ComparisonOperator.Le,\n                        value: isDynamicValueHigh\n                            ? cell.ValueHigh\n                            : typeConverter.odata2Sina(metadata.type, cell.ValueHigh),\n                        isDynamicValue: isDynamicValueHigh,\n                    })\n                );\n            }\n\n            return this.sina.createComplexCondition({\n                attributeLabel: metadata.label,\n                valueLabel: cell.Description,\n                operator: LogicalOperator.And,\n                conditions: conditions,\n            });\n        }\n        // Single Condition\n        const isDynamicValue = cell.Type === \"AttributeConstant\";\n        return this.sina.createSimpleCondition({\n            attributeLabel: metadata.label,\n            attribute: attributeId,\n            value: isDynamicValue ? cell.ValueLow : typeConverter.odata2Sina(metadata.type, cell.ValueLow),\n            valueLabel: cell.Description,\n            isDynamicValue: isDynamicValue,\n        });\n    }\n\n    parseChartFacet(query, facetData, facetTotalCount: number): ChartResultSet {\n        const dataSource = this.sina.getDataSource(query.filter.dataSource.id);\n        const attributeId = facetData.Id;\n        const metadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n\n        // for search query with attribute facet: create corresponding chart query\n        let filter,\n            chartQuery = query;\n        if (query instanceof SearchQuery) {\n            filter = query.filter.clone();\n            filter.setDataSource(dataSource); // relevant only for common attribute facets\n            filter.setRootCondition(query.filter.rootCondition.clone()); // changing ds removes condition\n            chartQuery = this.sina.createChartQuery({\n                filter: filter,\n                dimension: facetData.Id,\n                nlq: query.nlq,\n            });\n        }\n\n        // create result set items\n        const items = [];\n        for (let i = 0; i < facetData.Values.results.length; i++) {\n            const cell = facetData.Values.results[i];\n            items.push(\n                this.sina._createChartResultSetItem({\n                    filterCondition: this.createAttributeFilterCondition(attributeId, metadata, cell),\n                    dimensionValueFormatted: cell.Description,\n                    measureValue: cell.NumberOfObjects,\n                    measureValueFormatted: cell.ValueLowFormatted,\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createChartResultSet({\n            title: metadata.label,\n            items: items,\n            query: chartQuery,\n            facetTotalCount: facetTotalCount,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return chartQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n}\n"],"mappings":"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","ignoreList":[]}