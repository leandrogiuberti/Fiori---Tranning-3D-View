{"version":3,"file":"definitions-dbg.js","names":["sap","ui","define","reservedCharacters","reservedWords","replaceAll","original","search","replacement","split","join","escapeSingleQuote","value","replace","escapeDoubleQuoteAndBackslash","escapeQuery","query","escapedQuery","trim","specialCharacter","specialWord","startsWith","substring","length","endsWith","RegExp","escapeQueryWithCustomLength","escapeQueryWithDefaultLength","existValueInEnum","type","Object","keys","filter","k","isNaN","Number","NearOrdering","ListValues","clazz","constructor","name","values","item","toStatement","map","NullValue","BooleanValue","toString","NumberValue","String","StringValue","isQuoted","isSingleQuoted","withoutEnclosing","parseFloat","ViewParameter","param","HierarchyFacet","facetColumn","rootIds","levels","id","NearOperator","distance","ordering","InListOperator","InList","operator","SpatialReferenceSystemsOperatorBase","functionName","SpatialReferenceSystemsOperator","WithinOperator","CoveredByOperator","IntersectsOperator","pointCoordinates","x","y","PointValues","point","MultiPointValues","points","LineStringValues","toLineStringArray","CircularStringValues","MultiLineStringValues","lineStrings","lineString","PolygonValues","toPolygonStringArray","polygon","MultiPolygonValues","polygons","GeometryCollectionValues","geometryCollection","geometry","RangeValues","start","end","excludeStart","excludeEnd","Comparison","property","valueAsReservedWord","searchOptions","escapeValueCharStart","escapeValueCharEnd","isODataComparison","ComparisonOperator","propertyValues","valueQuery","comparisonOperator","comparisonStatement","addFuzzySearchOptions","ScopeComparison","Error","Term","term","doEshEscaping","finalTerm","escapePhrase","returnValue","Phrase","phrase","finalPhrase","Near","terms","forEach","push","nearStatement","Property","prefixOperator","LogicalOperator","SearchQueryLogicalOperator","SearchQueryPrefixOperator","returnStatement","fuzzinessThreshold","fuzzySearchOptions","weight","undefined","Expression","items","ROW","AUTH","FILTER","FILTERWF","BOOST","operatorValue","i","NOT","not","itemsScopes","SearchQueryComparisonOperator","ESOrderType","SEARCH_DEFAULTS","scope","PropertyAlias","path","alias","Alias","DynamicView","select","aliases","properties","paths","conditions","listOfAliases","condition","key","CustomFunction","arguments","argumentsValue","singleArgumentValue","FilterFunction","Array","isArray","element","customFunction","oDataFilter","expressionStatement","deserialize","jsonO","deserializedComparison","returnExpression","returnDynamicView","returnCustomFunction","includes","returnFilterFunction","JSON","stringify","__exports","__esModule"],"sources":["definitions.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/* eslint-disable max-classes-per-file */\n/** Copyright 2019 SAP SE or an SAP affiliate company. All rights reserved. */\n\n\nconst reservedCharacters = [\"\\\\\", \"-\", \"(\", \")\", \"~\", \"^\", \"?\", \"\\\"\", \":\", \"'\", \"[\", \"]\"]; //add new elements at the end of the array\nconst reservedWords = [\"AND\", \"OR\", \"NOT\"];\n\nfunction replaceAll(original: string, search: string, replacement: string): string {\n  return original.split(search).join(replacement);\n}\n\nexport const escapeSingleQuote = (value: string): string => {\n  return value.replace(/'/g, \"''\");\n}\n\nexport const escapeDoubleQuoteAndBackslash = (value: string): string => {\n  return value.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\");\n}\n\n\nexport function escapeQuery(query: string): string {\n  let escapedQuery: string = query ? query.trim() : \"\";\n  if (escapedQuery !== \"\") {\n    for (const specialCharacter of reservedCharacters) {\n      if (specialCharacter) {\n        if (specialCharacter === \"'\") {\n          escapedQuery = escapeSingleQuote(escapedQuery);\n        } else {\n          escapedQuery = replaceAll(escapedQuery, specialCharacter, \"\\\\\" + specialCharacter);\n        }\n      }\n    }\n    for (const specialWord of reservedWords) {\n      if (escapedQuery === specialWord) {\n        escapedQuery = \"\\\"\" + specialWord + \"\\\"\";\n      }\n      if (escapedQuery.startsWith(specialWord + \" \")) {\n        escapedQuery = \"\\\"\" + specialWord + \"\\\" \" + escapedQuery.substring(specialWord.length + 1);\n      }\n      if (escapedQuery.endsWith(\" \" + specialWord)) {\n        escapedQuery = escapedQuery.substring(0, escapedQuery.length - (specialWord.length + 1)) + \" \\\"\" + specialWord + \"\\\"\";\n      }\n      //escapedQuery = replaceAll(escapedQuery, \" \" + specialWord + \" \", \" \\\"\" + specialWord + \"\\\" \");\n      escapedQuery = escapedQuery.replace(new RegExp(` ${specialWord} `, 'g'), ` \\\"${specialWord}\\\" `);\n    }\n  }\n\n  //if (escapedQuery === \"\") {\n  //  escapedQuery = \" \";\n  //}\n  return escapedQuery;\n}\n\nexport function escapeQueryWithCustomLength(query: string, length: number): string {\n  return escapeQuery(query).substring(0, length);\n}\n\nexport function escapeQueryWithDefaultLength(query: string): string {\n  return escapeQuery(query).substring(0, 1500);\n}\n\nexport function existValueInEnum(type: any, value: any): boolean {\n  return Object.keys(type).filter(k => isNaN(Number(k))).filter(k => type[k] === value).length > 0;\n}\nexport interface ISearchOptions {\n  fuzzinessThreshold?: number;\n  weight?: number;\n  fuzzySearchOptions?: string;\n}\n\nexport interface IToStatement {\n  readonly clazz: string;\n  toStatement(): string;\n}\n\nexport interface IComparison {\n  property: string | IToStatement;\n  operator: (SearchQueryComparisonOperator | ComparisonOperator | NearOperator);\n  value?: string | IToStatement;\n  valueAsReservedWord?: boolean;\n  searchOptions?: ISearchOptions;\n}\n\nexport interface IScopeComparison {\n  values: string[];\n}\n\nexport interface ITerm {\n  term: string;\n  searchOptions?: ISearchOptions;\n  isQuoted?: boolean;\n  doEshEscaping?: boolean;\n}\n\nexport interface IPhrase {\n  phrase: string;\n  searchOptions?: ISearchOptions;\n  doEshEscaping?: boolean;\n}\n\nexport enum NearOrdering {\n  Ordered = \"O\",\n  Unordered = \"U\"\n}\nexport interface INear {\n  terms: string[] | IToStatement[];\n  distance: number;\n  ordering?: NearOrdering;\n  searchOptions?: ISearchOptions;\n}\n\nexport interface IGroupBy {\n  properties: string[];\n  aggregateCountAlias?: string;\n}\n\nexport interface INearOperator {\n  distance: number;\n  ordering?: NearOrdering;\n}\n\nexport interface IHierarchyFacet {\n  facetColumn: string;\n  rootIds: (string | null)[];\n  levels: number;\n}\n\nexport interface IListValues {\n  values: string[];\n}\n\nexport class ListValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  values: (string | IToStatement) [];\n\n  constructor(item: IListValues) {\n    this.values = item.values;\n  }\n  toStatement(): string {\n    return `[${this.values.map((value) => typeof value === \"string\" ? \"'\" + escapeSingleQuote(value) + \"'\" : value.toStatement()).join(\",\")}]`;\n  }\n}\n\nexport class NullValue implements IToStatement {\n  readonly clazz = this.constructor.name;\n  constructor() {};\n  toStatement(): string {\n    return \"null\";\n  }\n}\n\nexport class BooleanValue implements IToStatement {\n  readonly clazz = this.constructor.name;\n  value: Boolean;\n  constructor(item: {value: Boolean}) {\n    this.value = item.value;\n  };\n  toStatement(): string {\n    return this.value.toString();\n  }\n}\n\nexport class NumberValue implements IToStatement {\n  readonly clazz = this.constructor.name;\n  value: Number | String;\n  constructor(item: {value: Number | String}) {\n    this.value = item.value;\n  };\n  toStatement(): string {\n    return String(this.value);\n  }\n}\n\nexport interface IStringValue {\n  value: string;\n  isQuoted?: boolean;\n  isSingleQuoted?: boolean;\n  withoutEnclosing?: boolean;\n}\nexport class StringValue implements IToStatement {\n  readonly clazz = this.constructor.name;\n  \n  value: string;\n  isQuoted?: boolean;\n  isSingleQuoted?: boolean;\n  withoutEnclosing?: boolean;\n  \n  constructor(item: IStringValue) {\n    this.value = item.value;\n    this.isQuoted = item.isQuoted;\n    this.isSingleQuoted = item.isSingleQuoted;\n    this.withoutEnclosing = item.withoutEnclosing;\n  };\n  \n  toStatement(): string {\n    if (this.withoutEnclosing) {\n      return String(Number.parseFloat(this.value));\n    }\n    if (this.isQuoted) {\n      return `\"${escapeDoubleQuoteAndBackslash(this.value)}\"`;\n    } \n    if (this.isSingleQuoted) {\n      return `'${escapeSingleQuote(this.value)}'`;\n    }\n    return this.value;\n  }\n\n}\n\n\nexport interface IViewParameter {\n  param: string;\n}\nexport class ViewParameter implements IViewParameter {\n  readonly clazz = this.constructor.name;\n  param: string;\n\n  constructor(item: IViewParameter) {\n    this.param = item.param;\n  }\n\n  toStatement(): string {\n    return `param \"${escapeDoubleQuoteAndBackslash(this.param)}\"`;\n  }\n}\n\nexport class HierarchyFacet implements IToStatement {\n  readonly clazz = this.constructor.name;\n  facetColumn: string;\n  rootIds: (string | null)[];\n  levels: number;\n\n  constructor(item: IHierarchyFacet) {\n    this.facetColumn = item.facetColumn;\n    this.rootIds = item.rootIds;\n    this.levels = item.levels;\n  }\n  toStatement(): string {\n    return `(${this.facetColumn},(${this.rootIds.map(id => id ? \"'\" + id + \"'\" : \"null\").join(\",\")}),${this.levels})`;\n  }\n}\nexport class NearOperator implements IToStatement {\n  readonly clazz = this.constructor.name;\n  distance: number;\n  ordering?: NearOrdering;\n\n  constructor(item: INearOperator) {\n    this.distance = item.distance;\n    this.ordering = item.ordering;\n  }\n  toStatement(): string {\n    return `:NEAR(${this.distance}${this.ordering ? \",\" + this.ordering : \"\"}):`;\n  }\n}\n\nexport enum InListOperator {\n  AND = \"AND\",\n  OR = \"OR\"\n}\n\nexport interface IInList {\n  operator: InListOperator;\n  values: string[];\n}\n\nexport class InList implements IToStatement {\n  readonly clazz = this.constructor.name;\n  operator: InListOperator;\n  values: string[];\n\n  constructor(item: IInList) {\n    this.operator = item.operator;\n    this.values = item.values;\n  }\n  toStatement(): string {\n    return `${this.operator}(${this.values.join(\" \")})`;\n  }\n}\n\ninterface ISpatialReferenceSystemsOperator {\n  id?: number;\n}\n\nclass SpatialReferenceSystemsOperatorBase implements IToStatement {\n  readonly clazz = this.constructor.name;\n  protected functionName: string;\n  protected id?: null | number;\n\n  constructor(functionName: string, id?: null | number) {\n    this.functionName = functionName;\n    this.id = id;\n  }\n\n  toStatement(): string {\n    return `:${this.functionName}${this.id ? \"(\" + this.id + \")\" : \"\"}:`;\n  }\n}\nexport class SpatialReferenceSystemsOperator implements IToStatement {\n  readonly clazz = this.constructor.name;\n  id?: number;\n\n  constructor(item: ISpatialReferenceSystemsOperator) {\n    this.id = item.id;\n  }\n\n  toStatement(): string {\n    return `:${this.id ? \"(\" + this.id + \"):\" : \"\"}`;\n  }\n}\n\nexport class WithinOperator extends SpatialReferenceSystemsOperatorBase {\n  constructor(item: ISpatialReferenceSystemsOperator) {\n    super(\"WITHIN\", item.id);\n  }\n}\n\nexport class CoveredByOperator extends SpatialReferenceSystemsOperatorBase {\n  constructor(item: ISpatialReferenceSystemsOperator) {\n    super(\"COVERED_BY\", item.id);\n  }\n}\n\nexport class IntersectsOperator extends SpatialReferenceSystemsOperatorBase {\n  constructor(item: ISpatialReferenceSystemsOperator) {\n    super(\"INTERSECTS\", item.id);\n  }\n}\n\ninterface IPoint {\n  x: number;\n  y: number;\n}\n\nconst pointCoordinates = (item: IPoint): string => `${item.x} ${item.y}`;\n\n\nexport class PointValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  point: IPoint;\n\n  constructor(point: IPoint) {\n    this.point = point;\n  }\n  toStatement(): string {\n    return `POINT(${pointCoordinates(this.point)})`;\n  }\n}\n\nexport class MultiPointValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  points: IPoint[];\n\n  constructor(points: IPoint[]) {\n    this.points = points;\n  }\n  toStatement(): string {\n    return `MULTIPOINT(${this.points.map((point) => \"(\" + pointCoordinates(point) + \")\").join(\",\")})`;\n  }\n}\n\nexport class LineStringValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  protected points: IPoint[];\n\n  constructor(points: IPoint[]) {\n    this.points = points;\n  }\n\n  toStatement(): string {\n    return `LINESTRING${LineStringValues.toLineStringArray(this.points)}`;\n  }\n\n  static toLineStringArray(points: IPoint[]) {\n    return `(${points.map((point) => pointCoordinates(point)).join(\", \")})`;\n  }\n}\n\nexport class CircularStringValues extends LineStringValues {\n\n  constructor(points: IPoint[]) {\n    super(points);\n  }\n\n  toStatement(): string {\n    return `CIRCULARSTRING${LineStringValues.toLineStringArray(this.points)}`;\n  }\n}\n\nexport class MultiLineStringValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  protected lineStrings: IPoint[][];\n\n  constructor(points: IPoint[][]) {\n    this.lineStrings = points;\n  }\n  toStatement(): string {\n    return `MULTILINESTRING(${this.lineStrings.map((lineString) => LineStringValues.toLineStringArray(lineString)).join(\", \")})`;\n  }\n}\n\nexport class PolygonValues extends MultiLineStringValues {\n\n  constructor(points: IPoint[][]) {\n    super(points);\n  }\n\n  toStatement(): string {\n    return `POLYGON${PolygonValues.toPolygonStringArray(this.lineStrings)}`;\n  }\n\n  static toPolygonStringArray(polygon: IPoint[][]) {\n    return `(${polygon.map((lineString) => LineStringValues.toLineStringArray(lineString)).join(\", \")})`;\n  }\n}\n\nexport class MultiPolygonValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  polygons: IPoint[][][];\n\n  constructor(polygons: IPoint[][][]) {\n    this.polygons = polygons;\n  }\n\n  toStatement(): string {\n    return `MULTIPOLYGON(${this.polygons.map((polygon) => PolygonValues.toPolygonStringArray(polygon)).join(\", \")})`;\n  }\n}\n\n\nexport class GeometryCollectionValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  geometryCollection: IToStatement[];\n\n  constructor(geometryCollection: IToStatement[]) {\n    this.geometryCollection = geometryCollection;\n  }\n\n  toStatement(): string {\n    return `GEOMETRYCOLLECTION(${this.geometryCollection.map((geometry) => geometry.toStatement()).join(\", \")})`;\n  }\n}\n\n\nexport interface IRangeValue {\n  start: string | number;\n  end: string | number;\n  excludeStart?: boolean;\n  excludeEnd?: boolean;\n}\n\nexport class RangeValues implements IToStatement {\n  readonly clazz = this.constructor.name;\n  start: string | number;\n  end: string | number;\n  excludeStart?: boolean;\n  excludeEnd?: boolean;\n\n  constructor(item: IRangeValue) {\n    this.start = item.start;\n    this.end = item.end;\n    this.excludeStart = item.excludeStart;\n    this.excludeEnd = item.excludeEnd;\n  }\n  toStatement(): string {\n    return `${this.excludeStart ? \"]\" : \"[\"}${escapeQuery(this.start.toString())} ${escapeQuery(this.end.toString())}${this.excludeEnd ? \"[\" : \"]\"}`;\n  }\n}\n\nexport class Comparison implements IToStatement {\n  readonly clazz = this.constructor.name;\n  property: string | IToStatement;\n  operator: (SearchQueryComparisonOperator | ComparisonOperator | NearOperator | SpatialReferenceSystemsOperator | WithinOperator | CoveredByOperator | IntersectsOperator);\n  value?: string | IToStatement;\n  valueAsReservedWord?: boolean;\n  searchOptions?: ISearchOptions;\n\n  constructor(item: IComparison) {\n    this.property = item.property;\n    this.operator = item.operator;\n    this.value = item.value;\n    this.valueAsReservedWord = item.valueAsReservedWord;\n    this.searchOptions = item.searchOptions;\n  }\n\n  public toStatement(): string {\n    let escapeValueCharStart = \"\";\n    let escapeValueCharEnd = \"\";\n    /* \n    if (existValueInEnum(ComparisonOperator, this.operator)) {\n      if (this.valueAsReservedWord) {\n        escapeValueCharStart = \"\";\n        escapeValueCharEnd = \"\";\n      } else {\n        escapeValueCharStart = \"'\";\n        escapeValueCharEnd = \"'\";\n      }\n    } else if (this.operator === SearchQueryComparisonOperator.Fuzzy) {\n      escapeValueCharStart = \"(\";\n      escapeValueCharEnd = \")\";\n    } */\n    let isODataComparison = false;\n    if (existValueInEnum(ComparisonOperator, this.operator)) {\n      isODataComparison = true;\n      if (this.value && ((this.value instanceof NullValue) || (this.value instanceof BooleanValue) || (this.value instanceof NumberValue) || (this.value instanceof ListValues) || (this.value instanceof ViewParameter))) {\n        this.valueAsReservedWord = true;\n      }\n      if (this.valueAsReservedWord) {\n        escapeValueCharStart = \"\";\n        escapeValueCharEnd = \"\";\n      } else {\n        escapeValueCharStart = \"'\";\n        escapeValueCharEnd = \"'\";\n      }\n    }\n    const propertyValues = typeof (this.property) === \"string\" ? this.property : this.property.toStatement();\n    let valueQuery = \"\";\n    if (this.value) {\n      if (typeof (this.value) === \"string\") {\n        if (isODataComparison) {\n          valueQuery = escapeSingleQuote(this.value);\n        } else {\n          valueQuery = escapeQuery(this.value.toString());\n        }\n      } else {\n        valueQuery = this.value.toStatement();\n      }\n      // valueQuery = typeof (this.value) === \"string\" ? escapeQuery(this.value.toString()) : this.value.toStatement();\n    }\n    const comparisonOperator = typeof (this.operator) === \"string\" ? this.operator : this.operator.toStatement();\n    const comparisonStatement = propertyValues + comparisonOperator + escapeValueCharStart + valueQuery + escapeValueCharEnd;\n    return addFuzzySearchOptions(comparisonStatement, this.searchOptions);\n  }\n}\n\nexport class ScopeComparison implements IToStatement {\n  public readonly clazz = this.constructor.name;\n  values: string[];\n\n  constructor(item: IScopeComparison) {\n    this.values = item.values;\n  }\n\n  public toStatement(): string {\n    if (this.values.length === 0) {\n      throw new Error(\"ScopeComparison values cannot be empty\");\n    }\n    return this.values.length > 1 ? `SCOPE:(${this.values.join(\" OR \")})` : `SCOPE:${this.values[0]}`;\n  }\n}\nexport class Term implements IToStatement {\n  public readonly clazz = this.constructor.name;\n  term: string;\n  searchOptions?: ISearchOptions;\n  isQuoted?: boolean;\n  doEshEscaping?: boolean;\n\n  constructor(item: ITerm) {\n    this.term = item.term;\n    this.searchOptions = item.searchOptions;\n    this.isQuoted = item.isQuoted;\n    if (typeof(item.doEshEscaping) != 'undefined' && item.doEshEscaping != null)\n    {\n      this.doEshEscaping = item.doEshEscaping;\n    } else {\n      this.doEshEscaping = true;\n    }\n  }\n\n  public toStatement(): string {\n    let finalTerm;\n    if (this.doEshEscaping) {\n      finalTerm = this.isQuoted ? '\"' + escapePhrase(this.term) + '\"' : escapeQuery(this.term);\n    } else {\n      finalTerm = this.isQuoted ? '\"' + this.term + '\"' : this.term;\n    }\n    return addFuzzySearchOptions(finalTerm, this.searchOptions);\n  }\n}\n\nexport const escapePhrase = (value: string): string => {\n  let returnValue = value.replace(/\\\\/g, '\\\\\\\\');\n  returnValue = returnValue.replace(/\"/g, '\\\\\"');\n  // returnValue = returnValue.replace(/\\*/g, '\\\\*'); // do not escape *\n  returnValue = returnValue.replace(/\\?/g, '\\\\?');\n  returnValue = returnValue.replace(/\\'/g, \"''\");\n  return returnValue;\n}\n\nexport class Phrase implements IToStatement {\n  readonly clazz = this.constructor.name;\n  phrase: string;\n  searchOptions?: ISearchOptions;\n  doEshEscaping?: boolean;\n\n  constructor(item: IPhrase) {\n    this.phrase = item.phrase;\n    this.searchOptions = item.searchOptions;\n    if (typeof(item.doEshEscaping) != 'undefined' && item.doEshEscaping != null)\n    {\n      this.doEshEscaping = item.doEshEscaping;\n    } else {\n      this.doEshEscaping = true;\n    }\n  }\n\n  public toStatement(): string {\n    let finalPhrase;\n    if (this.doEshEscaping) {\n      finalPhrase = escapePhrase(this.phrase);\n    } else {\n      finalPhrase = this.phrase;\n    }\n    // return addFuzzySearchOptions(\"\\\"\" + replaceAll(this.phrase, '\"', '\\\\\"') + \"\\\"\", this.searchOptions);\n    // return addFuzzySearchOptions(\"\\\"\" + this.phrase.replace(/\"/g, '\\\\\"') + \"\\\"\", this.searchOptions);\n    // return addFuzzySearchOptions(\"\\\"\" + escapePhrase(this.phrase) + \"\\\"\", this.searchOptions);\n    return addFuzzySearchOptions(\"\\\"\" + finalPhrase + \"\\\"\", this.searchOptions);\n  }\n}\n\n\nexport class Near implements IToStatement {\n  readonly clazz = this.constructor.name;\n  terms: string[] | IToStatement[];\n  distance: number;\n  ordering?: NearOrdering;\n  searchOptions?: ISearchOptions;\n\n  constructor(item: INear) {\n    this.terms = item.terms;\n    this.distance = item.distance;\n    this.ordering = item.ordering;\n    this.searchOptions = item.searchOptions;\n  }\n\n  public toStatement(): string {\n    const values: string[] = [];\n    this.terms.forEach((value: string | IToStatement) => {\n      values.push(typeof value === \"string\" ? value : value.toStatement())\n    })\n    const nearStatement = `NEAR(${this.distance}${this.ordering ? \",\" + this.ordering : \"\"}):(${values.join(\" \")})`;\n    return addFuzzySearchOptions(nearStatement, this.searchOptions);\n  }\n}\n\nexport interface IProperty {\n  property: string;\n  prefixOperator?: SearchQueryPrefixOperator;\n}\nexport class Property implements IToStatement {\n  readonly clazz = this.constructor.name;\n  property: string;\n  prefixOperator?: SearchQueryPrefixOperator;\n  // searchOptions: ISearchOptions\n\n  constructor(item: IProperty) {\n    this.property = item.property;\n    this.prefixOperator = item.prefixOperator;\n  }\n\n  public toStatement(): string {\n    if (this.prefixOperator) {\n      return this.prefixOperator + \" \" + this.property;\n    }\n    return this.property;\n  }\n}\n\n\nexport enum LogicalOperator {\n  and = \"and\",\n  or = \"or\",\n  not = \"not\"\n}\n\nexport enum SearchQueryLogicalOperator {\n  AND = \"AND\",\n  TIGHT_AND = \"\",\n  OR = \"OR\",\n  NOT = \"NOT\",\n  ROW = \"ROW\",\n  AUTH = \"AUTH\",\n  FILTER = \"FILTER\",\n  FILTERWF = \"FILTERWF\",\n  BOOST = \"BOOST\",\n}\n\nexport enum SearchQueryPrefixOperator {\n  AND = \"AND\",\n  OR = \"OR\",\n  NOT = \"NOT\",\n  AND_NOT = \"AND NOT\",\n  OR_NOT = \"OR NOT\",\n}\nexport interface IExpression {\n  operator?: (LogicalOperator | SearchQueryLogicalOperator);\n  items: IToStatement[];\n  searchOptions?: ISearchOptions;\n}\n\nfunction addFuzzySearchOptions(item: string, searchOptions?: ISearchOptions): string {\n  let returnStatement = item;\n  if (searchOptions) {\n    if (searchOptions.fuzzinessThreshold) {\n      returnStatement = returnStatement + \"~\" + searchOptions.fuzzinessThreshold.toString();\n    }\n    if (searchOptions.fuzzySearchOptions) {\n      if (!searchOptions.fuzzinessThreshold) {\n        returnStatement = returnStatement + \"~0.8\";//default fuzzinessThreshold\n      }\n      returnStatement = returnStatement + \"[\" + searchOptions.fuzzySearchOptions + \"]\";\n    }\n    if (searchOptions.weight !== undefined) {\n      returnStatement = `${returnStatement}^${searchOptions.weight}`;\n    }\n  }\n  return returnStatement;\n\n}\n\nexport class Expression implements IToStatement {\n  public readonly clazz = this.constructor.name;\n  operator?: (LogicalOperator | SearchQueryLogicalOperator);\n  items: IToStatement[];\n  searchOptions?: ISearchOptions;\n\n  constructor(item: IExpression) {\n    this.operator = item.operator;\n    this.items = item.items;\n    this.searchOptions = item.searchOptions;\n  }\n\n  toStatement(): string {\n    let returnStatement = \"\";\n    switch (this.operator) {\n      case SearchQueryLogicalOperator.ROW:\n      case SearchQueryLogicalOperator.AUTH:\n      case SearchQueryLogicalOperator.FILTER:\n      case SearchQueryLogicalOperator.FILTERWF:\n      case SearchQueryLogicalOperator.BOOST:\n        let operatorValue = this.items.map(i => i.toStatement()).join(\" \" + this.operator + \" \");\n        if (!operatorValue.startsWith(\"(\")) {\n          operatorValue = \"(\" + operatorValue + \")\";\n        }\n        returnStatement = this.operator + \":\" + operatorValue;\n        break;\n      case SearchQueryLogicalOperator.NOT:\n        if (this.items.length > 1) {\n          throw new Error(\"Invalid operator. NOT operator is allowed only on a single item.\");\n        }\n        returnStatement = \"(NOT \" + this.items[0].toStatement() + \")\";\n        break;\n      case LogicalOperator.not:\n        if (this.items.length > 1) {\n          throw new Error(\"Invalid operator. 'not' operator is allowed only on a single item.\");\n        }\n        returnStatement = \"not \" + this.items[0].toStatement();\n        break;\n      default:\n        if (!this.items || this.items.length == 0) {\n          return \"\"; \n        } else if (this.items.length > 1) {\n          const itemsScopes = this.items.filter(i => { return (i instanceof ScopeComparison) });\n          if (itemsScopes.length > 0) {\n            returnStatement = this.items.map(i => i.toStatement()).join(`${this.operator === \"\" ? \" \" : \" \" + this.operator + \" \"}`);\n          } else {\n            returnStatement = \"(\" + this.items.map(i => i.toStatement()).join(`${this.operator === \"\" ? \" \" : \" \" + this.operator + \" \"}`) + \")\";\n          }\n        } else {\n          returnStatement = this.items[0].toStatement();\n        }\n        break;\n    }\n    return addFuzzySearchOptions(returnStatement, this.searchOptions);\n  }\n}\n\nexport enum SearchQueryComparisonOperator {\n  // eslint-disable-next-line no-shadow\n  Search = \":\",\n  EqualCaseInsensitive = \":EQ:\",\n  NotEqualCaseInsensitive = \":NE:\",\n  LessThanCaseInsensitive = \":LT:\",\n  LessThanOrEqualCaseInsensitive = \":LE:\",\n  GreaterThanCaseInsensitive = \":GT:\",\n  GreaterThanOrEqualCaseInsensitive = \":GE:\",\n  EqualCaseSensitive = \":EQ(S):\",\n  NotEqualCaseSensitive = \":NE(S):\",\n  LessThanCaseSensitive = \":LT(S):\",\n  LessThanOrEqualCaseSensitive = \":LE(S):\",\n  GreaterThanCaseSensitive = \":GT(S):\",\n  GreaterThanOrEqualCaseSensitive = \":GE(S):\",\n  IsNull = \":IS:NULL\",\n  BetweenCaseInsensitive = \":BT:\",\n  BetweenCaseSensitive = \":BT(S):\",\n  DescendantOf = \":DESCENDANT_OF:\",\n  ChildOf = \":CHILD_OF:\",\n}\n\nexport enum ComparisonOperator {\n  Equal = \" eq \",\n  NotEqual = \" ne \",\n  GreaterThan = \" gt \",\n  LessThan = \" lt \",\n  GreaterThanOrEqualTo = \" ge \",\n  LessThanOrEqualTo = \" le \",\n  Is = \" is \",\n  In = \" in \",\n  IsNot = \" is not \"\n}\n\nexport enum ESOrderType {\n  Ascending = \"ASC\",\n  Descending = \"DESC\",\n}\n\nexport interface IESOrdering {\n  key: string;\n  order?: ESOrderType;\n}\n\nexport interface IESSearchOptions {\n  $top?: number;\n  $skip?: number;\n  $orderby?: IESOrdering[];\n  query?: string;\n  /**\n   * This filter is used only for special search features like fuzzy,... For basic filtering please use 'oDataFilter' property\n  */\n  searchQueryFilter?: Expression;\n  /**\n   * This filter is used only for basic filtering. Please use 'searchQueryFilter' property for special search features like fuzzy,..\n  */\n  oDataFilter?: Expression;\n  whyfound?: boolean;\n  scope?: string;\n  $select?: string[];\n  $count?: boolean;\n  facets?: string[];\n  groupby?: IGroupBy;\n  estimate?: boolean;\n  facetlimit?: number;\n  wherefound?: boolean;\n  suggestTerm?: string;\n  metadataCall?: boolean;\n  metadataObjects?: IMetadataObjects;\n  resourcePath?: string;\n  $apply?: string | FilterFunction | CustomFunction;\n  filteredgroupby?: boolean;\n  facetroot?: HierarchyFacet[];\n  eshParameters?: {\n    [key: string]: string\n  },\n  dynamicview?: DynamicView[],\n  freeStyleText?: string;\n  valuehierarchy?: string;\n}\n\nexport interface IMetadataObjects{\n  format?: string;\n  collectionReference?: string;\n  entitySets?: string;\n  contextEntitySet?: string;\n  primitiveTyp?: string;\n}\n\nexport const SEARCH_DEFAULTS = {\n  query: \"\",\n  scope: \"\",\n};\n\nexport interface IEsearchRequestInterface {\n  path: string;\n  parameters: any;\n}\n\nexport interface IAlias {\n  type: string,\n  alias: string,\n}\n\nexport interface IPropertyAlias {\n  path: string[],\n  alias: string,\n}\n\nexport class PropertyAlias implements IPropertyAlias, IToStatement {\n  readonly clazz = this.constructor.name;\n  path: string[];\n  alias: string;\n\n  constructor(item: IPropertyAlias) {\n    this.path = item.path;\n    this.alias = item.alias;\n  }\n\n  toStatement(): string {\n    return `${this.path.join(\".\")} ${this.alias}`;\n    // return `${this.path.map((item)=> \"\\\"\" + escapeDoubleQuoteAndBackslash(item) + \"\\\"\").join(\".\")} ${this.alias}`;\n  }\n}\nexport class Alias implements IAlias, IToStatement {\n  readonly clazz = this.constructor.name;\n  type: string;\n  alias: string;\n\n  constructor(item: IAlias) {\n    this.type = item.type;\n    this.alias = item.alias;\n  }\n\n  toStatement(): string {\n    return `${this.type} ${this.alias}`;\n    // return `\"${escapeDoubleQuoteAndBackslash(this.type)}\" ${this.alias}`;\n  }\n}\n\nexport interface IDynamicView {\n  name: string;\n  select: string[];\n  aliases?: Alias[];\n  properties: PropertyAlias[];\n  paths: (string | string[])[][];\n  conditions?: (Comparison | Expression)[];\n}\n\nexport class DynamicView implements IDynamicView, IToStatement {\n  readonly clazz = this.constructor.name;\n  name: string;\n  select: string[];\n  aliases?: Alias[];\n  properties: PropertyAlias[];\n  paths: (string | string[])[][];\n  conditions?: (Comparison | Expression)[];\n\n  constructor(item: IDynamicView) {\n    this.name = item.name;\n    this.select = item.select;\n    this.aliases = item.aliases;\n    this.properties = item.properties;\n    this.paths = item.paths;\n    this.conditions = item.conditions;\n  }\n  \n\n  toStatement(): string {\n    let returnValue: {[key: string]: string} = {\n      name: this.name,\n      select: this.select.join(\", \"),\n    };\n    let listOfAliases: string[] = [];\n    if (this.aliases) {\n      returnValue.aliases = this.aliases.map((alias) => {return alias.toStatement()}).join(\", \");\n      listOfAliases = this.aliases.map((item) => item.alias);\n    }\n    returnValue.properties = this.properties.map((property) => {return property.toStatement()}).join(\", \");\n    returnValue.paths = this.paths.map((paths) => {return paths.map((path) => { return (typeof(path) === 'string') ? path : path.join(\".\")} ).join('/')}).join(\", \")\n    if (this.conditions) {\n      returnValue.conditions = this.conditions.map((condition) => { return condition.toStatement();}).join(\", \")\n    }\n    return Object.keys(returnValue).map(key => {return `${key}: ${returnValue[key]}`}).join(\"; \")+\";\";\n  }\n}\n\nexport interface ICustomFunction {\n  name: string | string[];\n  arguments?: {\n    [key: string]: any\n  }\n}\nexport class CustomFunction implements ICustomFunction, IToStatement {\n  readonly clazz = this.constructor.name;\n  name: string | string[];\n  arguments?: {\n    [key: string]: any\n  }\n\n  constructor(item: ICustomFunction) {\n    this.name = item.name;\n    this.arguments = item.arguments;\n  }\n\n  toStatement(): string {\n    let argumentsValue = '';\n    if (this.arguments) {\n      argumentsValue = Object.keys(this.arguments).map((key) => {\n        let singleArgumentValue = `${key}=`;\n        if (this.arguments && typeof(this.arguments[key]) === 'string') {\n          singleArgumentValue = `'${escapeSingleQuote(this.arguments[key])}'`;\n        } else if (this.arguments && this.arguments[key] && typeof(this.arguments[key]) === 'object') {\n          if (typeof(this.arguments[key].toStatement) === \"function\") { \n            if (this.arguments[key] instanceof CustomFunction || this.arguments[key] instanceof FilterFunction) {\n              singleArgumentValue = this.arguments[key].toStatement();\n            } else {\n              if(this.arguments[key] instanceof NumberValue) {\n                singleArgumentValue =  this.arguments[key].toStatement();\n              } else {\n                singleArgumentValue = `'${this.arguments[key].toStatement()}'`;\n              }\n            }\n          } else if (Array.isArray(this.arguments[key])) {\n            singleArgumentValue = \"[\" + this.arguments[key].map((element: any) => {\n              if(element instanceof NumberValue) {\n                return element.toStatement();\n              } else if(typeof(element) === 'string') {\n                return `'${escapeSingleQuote(element)}'`;\n              } else {\n                return String(element)\n              }\n            }).join(\",\") + \"]\";\n          } else {\n            throw new Error(\"Unexpected object: \" + this.arguments[key])\n          }\n        }\n        else {\n          singleArgumentValue = String(this.arguments ? String(this.arguments[key]) : '');\n        }\n        \n        return `${key}=${singleArgumentValue}`\n      }).join(\",\")\n    }\n    return `${typeof(this.name) === \"string\" ? this.name : this.name.join(\".\")}(${argumentsValue})`;\n  }\n}\n\nexport interface IFilterFunction {\n  customFunction: CustomFunction | Expression;\n  oDataFilter?: Expression | Comparison;\n}\nexport class FilterFunction implements IFilterFunction, IToStatement {\n  readonly clazz = this.constructor.name;\n  customFunction: CustomFunction | Expression;\n  oDataFilter?: Expression | Comparison;\n\n  constructor(item: IFilterFunction) {\n    this.customFunction = item.customFunction;\n    this.oDataFilter = item.oDataFilter;\n  }\n  \n  toStatement(): string {\n    let returnStatement ;\n    if (this.customFunction instanceof Expression) {\n      let expressionStatement = `Search.search(query='${this.customFunction.toStatement()}')`;\n      if (this.oDataFilter) {\n        expressionStatement += ` and ${this.oDataFilter.toStatement()}`\n      }\n      returnStatement = `filter(${expressionStatement})`;\n    } else {\n      returnStatement = `filter(${this.customFunction.toStatement()}`;\n      if (this.oDataFilter) {\n        returnStatement += ` and ${this.oDataFilter.toStatement()}`\n      }\n      returnStatement += \")\";\n    }\n    return returnStatement;\n  }\n}\n\n\n\nexport const deserialize = (jsonO: any): any => {\n  //const jsonO = JSON.parse(jsonStr);\n  if (typeof jsonO === \"object\") {\n    switch (jsonO.clazz) {\n      case \"Property\":\n        return new Property(jsonO);\n      case \"Near\":\n        jsonO.terms = jsonO.terms.map((item: string | IToStatement) => deserialize(item));\n        return new Near(jsonO);\n      case \"Phrase\":\n        return new Phrase(jsonO);\n      case \"RangeValues\":\n        return new RangeValues(jsonO);\n      case \"GeometryCollectionValues\":\n        return new GeometryCollectionValues(jsonO.geometryCollection.map((item: any) => deserialize(item)));\n      case \"MultiPolygonValues\":\n        return new MultiPolygonValues(jsonO.polygons);\n      case \"MultiLineStringValues\":\n        return new MultiLineStringValues(jsonO.lineStrings);\n      case \"CircularStringValues\":\n        return new CircularStringValues(jsonO.points)\n      case \"LineStringValues\":\n        return new LineStringValues(jsonO.points);\n      case \"MultiPointValues\":\n        return new MultiPointValues(jsonO.points);\n      case \"PointValues\":\n        return new PointValues(jsonO.point);\n      case \"SpatialReferenceSystemsOperator\":\n        return new SpatialReferenceSystemsOperator(jsonO);\n      case \"SpatialReferenceSystemsOperatorBase\":\n        return new SpatialReferenceSystemsOperatorBase(jsonO);\n      case \"InList\":\n        return new InList(jsonO);\n      case \"NearOperator\":\n        return new NearOperator(jsonO);\n      case \"Term\":\n        return new Term(jsonO);\n      case \"HierarchyFacet\":\n        return new HierarchyFacet(jsonO);\n      case \"Comparison\":\n        const deserializedComparison = new Comparison(jsonO);\n        if (typeof deserializedComparison.property === \"object\") {\n          deserializedComparison.property = deserialize(deserializedComparison.property);\n        }\n        if (deserializedComparison.operator && typeof deserializedComparison.operator === \"object\") {\n          deserializedComparison.operator = deserialize(deserializedComparison.operator);\n        }\n        if (deserializedComparison.value && typeof deserializedComparison.value === \"object\") {\n          deserializedComparison.value = deserialize(deserializedComparison.value);\n        }\n        return deserializedComparison;\n      case \"ScopeComparison\":\n        return new ScopeComparison(jsonO);\n      case \"WithinOperator\":\n        return new WithinOperator(jsonO);\n      case \"PolygonValues\":\n        return new PolygonValues(jsonO.lineStrings);\n      case \"CoveredByOperator\":\n        return new CoveredByOperator(jsonO);\n      case \"IntersectsOperator\":\n        return new IntersectsOperator(jsonO);\n      case \"Expression\":\n        const returnExpression = new Expression(jsonO);\n        returnExpression.items = returnExpression.items.map((item) => deserialize(item));\n        return returnExpression;\n      case \"DynamicView\":\n        const returnDynamicView = new DynamicView(jsonO);\n        returnDynamicView.properties = returnDynamicView.properties.map((property) => deserialize(property));\n        if (returnDynamicView.aliases) {\n          returnDynamicView.aliases = returnDynamicView.aliases.map((alias) => deserialize(alias));\n        }\n        if (returnDynamicView.conditions) {\n          if (Array.isArray(returnDynamicView.conditions)) {\n            returnDynamicView.conditions = returnDynamicView.conditions.map((condition) => deserialize(condition));\n          } else {\n            returnDynamicView.conditions = deserialize(returnDynamicView.conditions);\n          }\n        }\n        return returnDynamicView;\n      case \"Alias\":\n        return new Alias(jsonO);\n      case \"PropertyAlias\":\n        return new PropertyAlias(jsonO);\n      case \"ListValues\":\n        const returnValue = new ListValues(jsonO)\n        returnValue.values = returnValue.values.map(element => deserialize(element));\n        return returnValue;\n      case \"ViewParameter\":\n        return new ViewParameter(jsonO);\n      case \"NullValue\":\n        return new NullValue();\n      case \"BooleanValue\":\n        return new BooleanValue(jsonO);\n      case \"NumberValue\":\n        return new NumberValue(jsonO);\n      case \"StringValue\":\n        return new StringValue(jsonO);\n      case \"CustomFunction\":\n          const returnCustomFunction: ICustomFunction = new CustomFunction(jsonO);\n          if (returnCustomFunction.arguments) {\n            Object.keys(returnCustomFunction.arguments).map((key) => {\n              if (returnCustomFunction.arguments && typeof(returnCustomFunction.arguments[key]) === 'object' && typeof(returnCustomFunction.arguments[key].clazz) === \"string\") {\n                if([\"CustomFunction\",\"FilterFunction\"].includes(returnCustomFunction.arguments[key].clazz)) {\n                  returnCustomFunction.arguments[key] = deserialize(returnCustomFunction.arguments[key])  \n                } else {\n                  throw new Error(`Invalid statement in: ${key} = ${returnCustomFunction.arguments[key]}`)\n                }\n              }\n            })\n          }\n          return returnCustomFunction;\n        case \"FilterFunction\":\n            const returnFilterFunction: IFilterFunction = new FilterFunction(jsonO);\n            returnFilterFunction.customFunction = deserialize(returnFilterFunction.customFunction);\n            if (returnFilterFunction.oDataFilter) {\n              returnFilterFunction.oDataFilter = deserialize(returnFilterFunction.oDataFilter)\n            }\n            return returnFilterFunction;\n        default:\n          throw new Error(\"not implemented: \" + JSON.stringify(jsonO));\n    }\n  }\n  return jsonO;\n}"],"mappings":"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","ignoreList":[]}