{"version":3,"file":"SearchEngine.js","names":["sap","ui","define","____sina_SearchQuery","___DataSourceService","____sina_FacetType","____sina_SuggestionType","___RecordService","___FacetService","___Util","____sina_ComparisonOperator","____sina_LogicalOperator","SearchQuery","DataSourceService","FacetType","SuggestionType","RecordService","FacetService","getMatchedStringValues","formatHighlightedValue","isValuePairMatched","isStarString","ComparisonOperator","LogicalOperator","SearchEngine","dataSourceService","recordService","facetService","historySearchTerms","sina","dataSourceIds","constructor","this","initAsync","loadData","loadDataSources","loadRecords","search","query","filter","searchTerm","includes","push","response","getResponse","createSinaSearchResultSet","searchResultSetItems","record","resultsToDisplay","createSinaSearchResultSetItem","facets","createSinaFacets","_createSearchResultSet","title","items","totalCount","attributes","titleAttributes","detailAttributes","attributesMetadata","getDataSourceById","dataSourceId","forEach","attributeMetadata","resultSetItemAttribute","createSinaSearchResultSetItemSingleAttribute","undefined","metadata","usage","defaultNavigationTarget","createSinaNavigationTarget","searchResultSetItem","_createSearchResultSetItem","dataSource","getDataSource","navigationTargets","_private","allAttributesMap","reduce","map","attr","id","itemPostParser","_createItemPostParser","postParseResultSetItem","singleAttributeMetadata","sValue","valueMap","stringValue","rValue","rawValue","isHighlighted","Co","attribute","_createSearchResultSetItemAttribute","label","value","valueFormatted","valueHighlighted","groups","ds","template","targetUrl","urlPrefix","urlSuffix","replace","match","attributeId","createNavigationTarget","text","target","facetsSina","createFacetsByDataSourceId","results","i","length","facet","type","DataSource","createSinaDataSourceFacet","DataSourceType","Category","UserCategory","createSinaChartFacet","Promise","all","dataSourceQuery","createDataSourceQuery","clone","item","rawValueLow","createDataSource","description","_createDataSourceResultSetItem","dimensionValueFormatted","labelPlural","measureValue","count","measureValueFormatted","toString","resultSet","_createDataSourceResultSet","facetTotalCount","_setResultSet","resolve","getAttributeMetadata","chartQuery","setDataSource","setRootCondition","rootCondition","createChartQuery","dimension","_createChartResultSet","createSinaChartResultSetItems","chart","facetSet","createAttributeFacetSet","top","rawValueHigh","conditions","createSimpleCondition","operator","Ge","Le","_createChartResultSetItem","filterCondition","createComplexCondition","attributeLabel","valueLabel","And","stringValueLow","Eq","suggestion","suggestions","types","createSinaDataSourceSuggestions","SearchTerm","createSinaSearchTermSuggestions","Object","createSinaObjectSuggestions","_createSuggestionResultSet","_createDataSourceSuggestion","calculationMode","SuggestionCalculationMode","Data","_createSearchTermSuggestion","stringValues","childSuggestions","_createSearchTermAndDataSourceSuggestion","History","_createObjectSuggestion","object","__exports","__esModule"],"sources":["SearchEngine.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { Query } from \"../../sina/Query\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { SearchResultSet } from \"../../sina/SearchResultSet\";\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\nimport { DataSourceService, DataSourceResponse } from \"./DataSourceService\";\nimport { DataSourceResultSet } from \"../../sina/DataSourceResultSet\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { FacetType } from \"../../sina/FacetType\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { SuggestionType } from \"../../sina/SuggestionType\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport { Suggestion } from \"../../sina/Suggestion\";\nimport { RecordService, RecordResponse, Record } from \"./RecordService\";\nimport { Facet, FacetService } from \"./FacetService\";\nimport { getMatchedStringValues, formatHighlightedValue, isValuePairMatched, isStarString } from \"./Util\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { ChartResultSetItem } from \"../../sina/ChartResultSetItem\";\nimport { ResultSet } from \"../../sina/ResultSet\";\nimport { SearchResultSetItemAttribute } from \"../../sina/SearchResultSetItemAttribute\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { AttributeGroupMetadata } from \"../../sina/AttributeGroupMetadata\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { NavigationTarget } from \"../../sina/NavigationTarget\";\n\nexport class SearchEngine {\n    dataSourceService: DataSourceService;\n    recordService: RecordService;\n    facetService: FacetService;\n    historySearchTerms: string[] = [];\n    sina: Sina;\n    readonly dataSourceIds: string[];\n\n    constructor(sina: Sina, dataSourceIds: string[]) {\n        this.sina = sina;\n        this.dataSourceIds = dataSourceIds;\n        // typically in constructor sina is undefined, so initialize it in initAsync\n    }\n\n    async initAsync(sina?: Sina): Promise<void> {\n        this.sina = sina ?? this.sina;\n        this.dataSourceService = new DataSourceService(this.sina, this.dataSourceIds);\n        this.recordService = new RecordService(this.sina, this.dataSourceIds);\n        this.facetService = new FacetService(this.sina, this.dataSourceIds, this);\n\n        await this.loadData();\n    }\n\n    async loadData(): Promise<void> {\n        await this.dataSourceService.loadDataSources();\n        await this.recordService.loadRecords();\n    }\n\n    async search(query: SearchQuery): Promise<SearchResultSet> {\n        await this.recordService.loadRecords();\n\n        // in memory search term history\n        if (\n            !isStarString(query.filter.searchTerm) &&\n            !this.historySearchTerms.includes(query.filter.searchTerm)\n        ) {\n            this.historySearchTerms.push(query.filter.searchTerm);\n        }\n\n        const response = this.recordService.getResponse(query);\n        return await this.createSinaSearchResultSet(query, response);\n    }\n\n    private async createSinaSearchResultSet(\n        query: SearchQuery,\n        response: RecordResponse\n    ): Promise<SearchResultSet> {\n        const searchResultSetItems = [];\n        for (const record of response.resultsToDisplay) {\n            searchResultSetItems.push(await this.createSinaSearchResultSetItem(query, record));\n        }\n\n        const facets = await this.createSinaFacets(query, response);\n\n        return this.sina._createSearchResultSet({\n            query: query,\n            title: \"Search Results\",\n            items: searchResultSetItems,\n            facets: facets,\n            totalCount: response.totalCount,\n        });\n    }\n\n    private async createSinaSearchResultSetItem(\n        query: SearchQuery | SuggestionQuery,\n        record: Record\n    ): Promise<SearchResultSetItem> {\n        const attributes = [];\n        const titleAttributes = [];\n        const detailAttributes = [];\n\n        // single attributes\n        const attributesMetadata = this.dataSourceService.getDataSourceById(\n            record.dataSourceId\n        ).attributesMetadata;\n\n        attributesMetadata.forEach((attributeMetadata) => {\n            const resultSetItemAttribute = this.createSinaSearchResultSetItemSingleAttribute(\n                attributeMetadata as AttributeMetadata,\n                record,\n                query\n            );\n\n            if (resultSetItemAttribute !== undefined) {\n                attributes.push(resultSetItemAttribute);\n\n                if (\"Title\" in resultSetItemAttribute.metadata.usage) {\n                    titleAttributes.push(resultSetItemAttribute);\n                }\n                if (\"Detail\" in resultSetItemAttribute.metadata.usage) {\n                    detailAttributes.push(resultSetItemAttribute);\n                }\n            }\n        });\n\n        // group attributes -> postParseResultSetItem()\n\n        // navigation target\n        const defaultNavigationTarget = this.createSinaNavigationTarget(record);\n\n        const searchResultSetItem = this.sina._createSearchResultSetItem({\n            dataSource: this.sina.getDataSource(record.dataSourceId),\n            attributes: attributes,\n            titleAttributes: titleAttributes,\n            detailAttributes: detailAttributes,\n            defaultNavigationTarget: defaultNavigationTarget,\n            navigationTargets: [],\n        });\n\n        searchResultSetItem._private.allAttributesMap = attributes.reduce((map, attr) => {\n            map[attr.id] = attr;\n            return map;\n        }, {}); // needed for postParseResultSetItem\n\n        const itemPostParser = this.sina._createItemPostParser({\n            searchResultSetItem: searchResultSetItem,\n        });\n\n        return await itemPostParser.postParseResultSetItem();\n    }\n\n    private createSinaSearchResultSetItemSingleAttribute(\n        singleAttributeMetadata: AttributeMetadata,\n        record: Record,\n        query: Query\n    ): SearchResultSetItemAttribute {\n        const sValue = record.valueMap[singleAttributeMetadata.id]?.stringValue;\n        const rValue = record.valueMap[singleAttributeMetadata.id]?.rawValue;\n\n        if (sValue === undefined) {\n            return undefined;\n        }\n\n        const isHighlighted = isValuePairMatched(sValue, query.filter.searchTerm, ComparisonOperator.Co);\n\n        const attribute = this.sina._createSearchResultSetItemAttribute({\n            id: singleAttributeMetadata.id,\n            label: singleAttributeMetadata.label,\n            metadata: singleAttributeMetadata,\n            value: rValue,\n            valueFormatted: sValue,\n            valueHighlighted: isHighlighted\n                ? formatHighlightedValue(sValue, query.filter.searchTerm)\n                : undefined,\n            isHighlighted: isHighlighted,\n            groups: [],\n        });\n\n        return attribute;\n    }\n\n    private createSinaNavigationTarget(record: Record): NavigationTarget {\n        const ds = this.dataSourceService.getDataSourceById(record.dataSourceId);\n        const template = ds.defaultNavigationTarget?.targetUrl || \"\";\n        const urlPrefix = \"https://sap.com?\";\n        const urlSuffix = template.replace(\n            /{([^}]+)}/g,\n            (match, attributeId) => record.valueMap[attributeId]?.stringValue || \"\"\n        ); // replace {AttributeId} by record attribute stringValue\n\n        return this.sina.createNavigationTarget({\n            text: ds.defaultNavigationTarget?.text,\n            targetUrl: urlPrefix + urlSuffix,\n            target: ds.defaultNavigationTarget?.target || \"_self\",\n        });\n    }\n\n    private async createSinaFacets(\n        query: SearchQuery,\n        response: RecordResponse\n    ): Promise<(DataSourceResultSet | ChartResultSet)[]> {\n        const facetsSina = [];\n        const facets = this.facetService.createFacetsByDataSourceId(\n            query.filter.dataSource.id,\n            response.results\n        )?.facets;\n\n        if (!facets) {\n            return [];\n        }\n\n        for (let i = 0; i < facets.length; i++) {\n            const facet = facets[i] as Facet;\n            if (facet.type === FacetType.DataSource) {\n                facetsSina.push(this.createSinaDataSourceFacet(query, facet));\n            } else {\n                if (\n                    query.filter.dataSource.type === query.sina.DataSourceType.Category || // ignore common attributes facets\n                    query.filter.dataSource.type === query.sina.DataSourceType.UserCategory // ignore attributes facets\n                ) {\n                    continue;\n                }\n                facetsSina.push(this.createSinaChartFacet(query, facet));\n            }\n        }\n        return Promise.all(facetsSina);\n    }\n\n    private async createSinaDataSourceFacet(query: SearchQuery, facet: Facet): Promise<DataSourceResultSet> {\n        const dataSourceQuery = this.sina.createDataSourceQuery({\n            dataSource: query.filter.dataSource,\n            filter: query.filter.clone(),\n            // nlq: query.nlq,\n        });\n        const items = [];\n\n        for (let i = 0; i < facet.items.length; i++) {\n            const item = facet.items[i];\n            // create filter (used when clicking on the item)\n            let dataSource = this.sina.getDataSource(item.rawValueLow as string);\n            if (!dataSource) {\n                dataSource = this.sina.createDataSource({\n                    type: this.sina.DataSourceType.Category,\n                    id: item.rawValueLow as string,\n                    label: item.description,\n                });\n            }\n\n            items.push(\n                this.sina._createDataSourceResultSetItem({\n                    dataSource: dataSource,\n                    dimensionValueFormatted: dataSource.labelPlural,\n                    measureValue: item.count,\n                    measureValueFormatted: item.count.toString(),\n                })\n            );\n        }\n\n        const resultSet = this.sina._createDataSourceResultSet({\n            title: query.filter.dataSource.label,\n            items: items,\n            query: dataSourceQuery,\n            facetTotalCount: undefined,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            dataSourceQuery._setResultSet(resultSet);\n        }\n\n        return Promise.resolve(resultSet);\n    }\n\n    private createSinaChartFacet(\n        query: SearchQuery | ChartQuery,\n        facet: Facet\n    ): Promise<ChartResultSet | ResultSet> {\n        const dataSource = this.sina.getDataSource(query.filter.dataSource.id);\n        const attributeId = facet.id;\n        const metadata = dataSource.getAttributeMetadata(attributeId) as\n            | AttributeMetadata\n            | AttributeGroupMetadata;\n\n        let chartQuery = query;\n        if (query instanceof SearchQuery) {\n            const filter = query.filter.clone();\n            filter.setDataSource(dataSource); // relevant only for common attribute facets\n            filter.setRootCondition(query.filter.rootCondition.clone() as ComplexCondition); // changing ds removes condition\n            chartQuery = this.sina.createChartQuery({\n                filter: filter,\n                dimension: facet.id,\n                // nlq: query.nlq,\n            });\n        }\n\n        const resultSet = this.sina._createChartResultSet({\n            title: metadata.label,\n            items: this.createSinaChartResultSetItems(query, facet),\n            query: chartQuery,\n            facetTotalCount: 99999, // ToDo: Fill with total count of all facet items -> see getDataForPieChart of SearchFacetPieChart.ts\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return chartQuery._setResultSet(resultSet);\n        }\n\n        return Promise.resolve(resultSet);\n    }\n\n    async chart(query: ChartQuery): Promise<ChartResultSet> {\n        await this.recordService.loadRecords();\n\n        const dataSource = this.sina.getDataSource(query.filter.dataSource.id);\n        const attributeId = query.dimension;\n        const metadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n        const response = this.recordService.getResponse(query);\n        const facetSet = this.facetService.createAttributeFacetSet(response.results, [metadata], query.top);\n\n        if (facetSet && facetSet.facets.length > 0) {\n            return this.sina._createChartResultSet({\n                title: metadata.label,\n                items: this.createSinaChartResultSetItems(query, facetSet.facets[0] as Facet),\n                query: query,\n                facetTotalCount: 99999, // ToDo: Fill with total count of all facet items -> see getDataForPieChart of SearchFacetPieChart.ts\n            });\n        }\n    }\n\n    private createSinaChartResultSetItems(query: Query, facet: Facet): ChartResultSetItem[] {\n        // TODO:\n        // Search = \"Search\",\n        // Eq = \"Eq\",\n        // Ne = \"Ne\", // not equal\n        // Gt = \"Gt\",\n        // Lt = \"Lt\",\n        // Ge = \"Ge\",\n        // Le = \"Le\",\n        // Co = \"Co\", // Contains only\n        // Bw = \"Bw\",\n        // Ew = \"Ew\", // End with\n        // ChildOf = \"ChildOf\",\n        // DescendantOf = \"DescendantOf\",\n\n        const items = [];\n        for (let i = 0; i < facet.items.length; i++) {\n            const item = facet.items[i];\n            if (typeof item.rawValueHigh !== \"string\" && typeof item.rawValueLow !== \"string\") {\n                // range facet item\n                const conditions: SimpleCondition[] = [];\n                conditions.push(\n                    this.sina.createSimpleCondition({\n                        attribute: facet.id,\n                        operator: ComparisonOperator.Ge,\n                        value: item.rawValueLow,\n                        // isDynamicValue: isDynamicValueLow,\n                    })\n                );\n\n                conditions.push(\n                    this.sina.createSimpleCondition({\n                        attribute: facet.id,\n                        operator: ComparisonOperator.Le,\n                        value: item.rawValueHigh,\n                        // isDynamicValue: isDynamicValueHigh,\n                    })\n                );\n\n                items.push(\n                    this.sina._createChartResultSetItem({\n                        filterCondition: this.sina.createComplexCondition({\n                            attributeLabel: facet.label,\n                            valueLabel: item.description,\n                            operator: LogicalOperator.And,\n                            conditions: conditions,\n                        }),\n                        dimensionValueFormatted: item.description,\n                        measureValue: item.count,\n                        measureValueFormatted: item.stringValueLow,\n                    })\n                );\n            } else {\n                //single value facet item\n                items.push(\n                    this.sina._createChartResultSetItem({\n                        filterCondition: this.sina.createSimpleCondition({\n                            attributeLabel: facet.label,\n                            attribute: facet.id,\n                            operator: ComparisonOperator.Eq,\n                            value: item.rawValueLow,\n                            valueLabel: item.description,\n                            // value: isDynamicValue ? item.rawValueLow : typeConverter.odata2Sina(metadata.type, item.rawValueLow),\n                            // isDynamicValue: isDynamicValue,\n                        }),\n                        dimensionValueFormatted: item.description,\n                        measureValue: item.count,\n                        measureValueFormatted: item.stringValueLow,\n                    })\n                );\n            }\n        }\n\n        return items;\n    }\n\n    async suggestion(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        await this.recordService.loadRecords();\n\n        let response: DataSourceResponse | RecordResponse;\n        let suggestions = [];\n\n        switch (query.types[0]) {\n            case SuggestionType.DataSource:\n                response = this.dataSourceService.getResponse(query) as DataSourceResponse;\n                suggestions = await this.createSinaDataSourceSuggestions(query, response);\n                break;\n            case SuggestionType.SearchTerm:\n                response = this.recordService.getResponse(query) as RecordResponse;\n                suggestions = await this.createSinaSearchTermSuggestions(query, response);\n                break;\n            case SuggestionType.Object:\n                response = this.recordService.getResponse(query) as RecordResponse;\n                suggestions = await this.createSinaObjectSuggestions(query, response);\n                break;\n            default:\n            // SuggestionType.SearchTermAI // not implemented\n            // SearchTermAndDataSource // check back-end supporting\n            // App Suggestions // create app suggestions without searchableContent service\n        }\n        return this.sina._createSuggestionResultSet({\n            title: \"Suggestions\",\n            query: query,\n            items: suggestions,\n        });\n    }\n\n    private async createSinaDataSourceSuggestions(\n        query: SuggestionQuery,\n        response: DataSourceResponse\n    ): Promise<Suggestion[]> {\n        const suggestions = [];\n        response.results.map((dataSource) => {\n            suggestions.push(\n                this.sina._createDataSourceSuggestion({\n                    calculationMode: this.sina.SuggestionCalculationMode.Data,\n                    dataSource: dataSource,\n                    label: formatHighlightedValue(\n                        dataSource.labelPlural || dataSource.label,\n                        query.filter.searchTerm\n                    ),\n                })\n            );\n        });\n        return suggestions;\n    }\n\n    private async createSinaSearchTermSuggestions(\n        query: SuggestionQuery,\n        response: RecordResponse\n    ): Promise<Suggestion[]> {\n        const suggestions = [];\n        response.resultsToDisplay.forEach((record) => {\n            const filter = query.filter.clone();\n            const dataSource = this.sina.getDataSource(record.dataSourceId);\n            filter.setDataSource(dataSource);\n\n            suggestions.push(\n                this.sina._createSearchTermSuggestion({\n                    calculationMode: this.sina.SuggestionCalculationMode.Data,\n                    searchTerm: getMatchedStringValues(record.stringValues, query.filter.searchTerm)[0],\n                    filter: query.filter,\n                    label: formatHighlightedValue(\n                        getMatchedStringValues(record.stringValues, query.filter.searchTerm)[0],\n                        query.filter.searchTerm\n                    ),\n                    childSuggestions: [\n                        this.sina._createSearchTermAndDataSourceSuggestion({\n                            calculationMode: this.sina.SuggestionCalculationMode.Data,\n                            searchTerm: getMatchedStringValues(\n                                record.stringValues,\n                                query.filter.searchTerm\n                            )[0],\n                            filter,\n                            dataSource,\n                            label: formatHighlightedValue(\n                                getMatchedStringValues(record.stringValues, query.filter.searchTerm)[0],\n                                query.filter.searchTerm\n                            ),\n                        }),\n                    ],\n                })\n            );\n        });\n\n        // History Search Term Suggestions\n        if (!isStarString(query.filter.searchTerm)) {\n            getMatchedStringValues(this.historySearchTerms, query.filter.searchTerm).forEach((searchTerm) => {\n                suggestions.push(\n                    this.sina._createSearchTermSuggestion({\n                        calculationMode: this.sina.SuggestionCalculationMode.History,\n                        searchTerm: searchTerm,\n                        filter: query.filter,\n                        label: formatHighlightedValue(searchTerm, query.filter.searchTerm),\n                    })\n                );\n            });\n        }\n        return suggestions;\n    }\n\n    private async createSinaObjectSuggestions(\n        query: SuggestionQuery,\n        response: RecordResponse\n    ): Promise<Suggestion[]> {\n        const suggestions = [];\n        for (const record of response.resultsToDisplay) {\n            suggestions.push(\n                this.sina._createObjectSuggestion({\n                    calculationMode: this.sina.SuggestionCalculationMode.Data,\n                    label: \"\", // ?\n                    // searchTerm: filter.searchTerm,\n                    // filter: filter,\n                    object: await this.createSinaSearchResultSetItem(query, record),\n                })\n            );\n        }\n        return suggestions;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,sNAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAOSC,EAAWT,EAAA,qBAGXU,EAAiBT,EAAA,2BAIjBU,EAAST,EAAA,mBAETU,EAAcT,EAAA,wBAGdU,EAAaT,EAAA,uBACNU,EAAYT,EAAA,sBACnBU,EAAsBT,EAAA,gCAAEU,EAAsBV,EAAA,gCAAEW,EAAkBX,EAAA,4BAAEY,EAAYZ,EAAA,sBAChFa,EAAkBZ,EAAA,4BAOlBa,EAAeZ,EAAA,mBAIjB,MAAMa,EACTC,kBACAC,cACAC,aACAC,mBAA+B,GAC/BC,KACSC,cAETC,YAAYF,EAAYC,GACpBE,KAAKH,KAAOA,EACZG,KAAKF,cAAgBA,CAEzB,CAEA,eAAMG,CAAUJ,GACZG,KAAKH,KAAOA,GAAQG,KAAKH,KACzBG,KAAKP,kBAAoB,IAAIZ,EAAkBmB,KAAKH,KAAMG,KAAKF,eAC/DE,KAAKN,cAAgB,IAAIV,EAAcgB,KAAKH,KAAMG,KAAKF,eACvDE,KAAKL,aAAe,IAAIV,EAAae,KAAKH,KAAMG,KAAKF,cAAeE,YAE9DA,KAAKE,UACf,CAEA,cAAMA,SACIF,KAAKP,kBAAkBU,wBACvBH,KAAKN,cAAcU,aAC7B,CAEA,YAAMC,CAAOC,SACHN,KAAKN,cAAcU,cAGzB,IACKf,EAAaiB,EAAMC,OAAOC,cAC1BR,KAAKJ,mBAAmBa,SAASH,EAAMC,OAAOC,YACjD,CACER,KAAKJ,mBAAmBc,KAAKJ,EAAMC,OAAOC,WAC9C,CAEA,MAAMG,EAAWX,KAAKN,cAAckB,YAAYN,GAChD,aAAaN,KAAKa,0BAA0BP,EAAOK,EACvD,CAEA,+BAAcE,CACVP,EACAK,GAEA,MAAMG,EAAuB,GAC7B,IAAK,MAAMC,KAAUJ,EAASK,iBAAkB,CAC5CF,EAAqBJ,WAAWV,KAAKiB,8BAA8BX,EAAOS,GAC9E,CAEA,MAAMG,QAAelB,KAAKmB,iBAAiBb,EAAOK,GAElD,OAAOX,KAAKH,KAAKuB,uBAAuB,CACpCd,MAAOA,EACPe,MAAO,iBACPC,MAAOR,EACPI,OAAQA,EACRK,WAAYZ,EAASY,YAE7B,CAEA,mCAAcN,CACVX,EACAS,GAEA,MAAMS,EAAa,GACnB,MAAMC,EAAkB,GACxB,MAAMC,EAAmB,GAGzB,MAAMC,EAAqB3B,KAAKP,kBAAkBmC,kBAC9Cb,EAAOc,cACTF,mBAEFA,EAAmBG,QAASC,IACxB,MAAMC,EAAyBhC,KAAKiC,6CAChCF,EACAhB,EACAT,GAGJ,GAAI0B,IAA2BE,UAAW,CACtCV,EAAWd,KAAKsB,GAEhB,GAAI,UAAWA,EAAuBG,SAASC,MAAO,CAClDX,EAAgBf,KAAKsB,EACzB,CACA,GAAI,WAAYA,EAAuBG,SAASC,MAAO,CACnDV,EAAiBhB,KAAKsB,EAC1B,CACJ,IAMJ,MAAMK,EAA0BrC,KAAKsC,2BAA2BvB,GAEhE,MAAMwB,EAAsBvC,KAAKH,KAAK2C,2BAA2B,CAC7DC,WAAYzC,KAAKH,KAAK6C,cAAc3B,EAAOc,cAC3CL,WAAYA,EACZC,gBAAiBA,EACjBC,iBAAkBA,EAClBW,wBAAyBA,EACzBM,kBAAmB,KAGvBJ,EAAoBK,SAASC,iBAAmBrB,EAAWsB,OAAO,CAACC,EAAKC,KACpED,EAAIC,EAAKC,IAAMD,EACf,OAAOD,GACR,CAAC,GAEJ,MAAMG,EAAiBlD,KAAKH,KAAKsD,sBAAsB,CACnDZ,oBAAqBA,IAGzB,aAAaW,EAAeE,wBAChC,CAEQnB,6CACJoB,EACAtC,EACAT,GAEA,MAAMgD,EAASvC,EAAOwC,SAASF,EAAwBJ,KAAKO,YAC5D,MAAMC,EAAS1C,EAAOwC,SAASF,EAAwBJ,KAAKS,SAE5D,GAAIJ,IAAWpB,UAAW,CACtB,OAAOA,SACX,CAEA,MAAMyB,EAAgBvE,EAAmBkE,EAAQhD,EAAMC,OAAOC,WAAYlB,EAAmBsE,IAE7F,MAAMC,EAAY7D,KAAKH,KAAKiE,oCAAoC,CAC5Db,GAAII,EAAwBJ,GAC5Bc,MAAOV,EAAwBU,MAC/B5B,SAAUkB,EACVW,MAAOP,EACPQ,eAAgBX,EAChBY,iBAAkBP,EACZxE,EAAuBmE,EAAQhD,EAAMC,OAAOC,YAC5C0B,UACNyB,cAAeA,EACfQ,OAAQ,KAGZ,OAAON,CACX,CAEQvB,2BAA2BvB,GAC/B,MAAMqD,EAAKpE,KAAKP,kBAAkBmC,kBAAkBb,EAAOc,cAC3D,MAAMwC,EAAWD,EAAG/B,yBAAyBiC,WAAa,GAC1D,MAAMC,EAAY,mBAClB,MAAMC,EAAYH,EAASI,QACvB,aACA,CAACC,EAAOC,IAAgB5D,EAAOwC,SAASoB,IAAcnB,aAAe,IAGzE,OAAOxD,KAAKH,KAAK+E,uBAAuB,CACpCC,KAAMT,EAAG/B,yBAAyBwC,KAClCP,UAAWC,EAAYC,EACvBM,OAAQV,EAAG/B,yBAAyByC,QAAU,SAEtD,CAEA,sBAAc3D,CACVb,EACAK,GAEA,MAAMoE,EAAa,GACnB,MAAM7D,EAASlB,KAAKL,aAAaqF,2BAC7B1E,EAAMC,OAAOkC,WAAWQ,GACxBtC,EAASsE,UACV/D,OAEH,IAAKA,EAAQ,CACT,MAAO,EACX,CAEA,IAAK,IAAIgE,EAAI,EAAGA,EAAIhE,EAAOiE,OAAQD,IAAK,CACpC,MAAME,EAAQlE,EAAOgE,GACrB,GAAIE,EAAMC,OAASvG,EAAUwG,WAAY,CACrCP,EAAWrE,KAAKV,KAAKuF,0BAA0BjF,EAAO8E,GAC1D,KAAO,CACH,GACI9E,EAAMC,OAAOkC,WAAW4C,OAAS/E,EAAMT,KAAK2F,eAAeC,UAC3DnF,EAAMC,OAAOkC,WAAW4C,OAAS/E,EAAMT,KAAK2F,eAAeE,aAC7D,CACE,QACJ,CACAX,EAAWrE,KAAKV,KAAK2F,qBAAqBrF,EAAO8E,GACrD,CACJ,CACA,OAAOQ,QAAQC,IAAId,EACvB,CAEA,+BAAcQ,CAA0BjF,EAAoB8E,GACxD,MAAMU,EAAkB9F,KAAKH,KAAKkG,sBAAsB,CACpDtD,WAAYnC,EAAMC,OAAOkC,WACzBlC,OAAQD,EAAMC,OAAOyF,UAGzB,MAAM1E,EAAQ,GAEd,IAAK,IAAI4D,EAAI,EAAGA,EAAIE,EAAM9D,MAAM6D,OAAQD,IAAK,CACzC,MAAMe,EAAOb,EAAM9D,MAAM4D,GAEzB,IAAIzC,EAAazC,KAAKH,KAAK6C,cAAcuD,EAAKC,aAC9C,IAAKzD,EAAY,CACbA,EAAazC,KAAKH,KAAKsG,iBAAiB,CACpCd,KAAMrF,KAAKH,KAAK2F,eAAeC,SAC/BxC,GAAIgD,EAAKC,YACTnC,MAAOkC,EAAKG,aAEpB,CAEA9E,EAAMZ,KACFV,KAAKH,KAAKwG,+BAA+B,CACrC5D,WAAYA,EACZ6D,wBAAyB7D,EAAW8D,YACpCC,aAAcP,EAAKQ,MACnBC,sBAAuBT,EAAKQ,MAAME,aAG9C,CAEA,MAAMC,EAAY5G,KAAKH,KAAKgH,2BAA2B,CACnDxF,MAAOf,EAAMC,OAAOkC,WAAWsB,MAC/BzC,MAAOA,EACPhB,MAAOwF,EACPgB,gBAAiB5E,YAIrB,GAAI5B,aAAiB1B,EAAa,CAC9BkH,EAAgBiB,cAAcH,EAClC,CAEA,OAAOhB,QAAQoB,QAAQJ,EAC3B,CAEQjB,qBACJrF,EACA8E,GAEA,MAAM3C,EAAazC,KAAKH,KAAK6C,cAAcpC,EAAMC,OAAOkC,WAAWQ,IACnE,MAAM0B,EAAcS,EAAMnC,GAC1B,MAAMd,EAAWM,EAAWwE,qBAAqBtC,GAIjD,IAAIuC,EAAa5G,EACjB,GAAIA,aAAiB1B,EAAa,CAC9B,MAAM2B,EAASD,EAAMC,OAAOyF,QAC5BzF,EAAO4G,cAAc1E,GACrBlC,EAAO6G,iBAAiB9G,EAAMC,OAAO8G,cAAcrB,SACnDkB,EAAalH,KAAKH,KAAKyH,iBAAiB,CACpC/G,OAAQA,EACRgH,UAAWnC,EAAMnC,IAGzB,CAEA,MAAM2D,EAAY5G,KAAKH,KAAK2H,sBAAsB,CAC9CnG,MAAOc,EAAS4B,MAChBzC,MAAOtB,KAAKyH,8BAA8BnH,EAAO8E,GACjD9E,MAAO4G,EACPJ,gBAAiB,QAIrB,GAAIxG,aAAiB1B,EAAa,CAC9B,OAAOsI,EAAWH,cAAcH,EACpC,CAEA,OAAOhB,QAAQoB,QAAQJ,EAC3B,CAEA,WAAMc,CAAMpH,SACFN,KAAKN,cAAcU,cAEzB,MAAMqC,EAAazC,KAAKH,KAAK6C,cAAcpC,EAAMC,OAAOkC,WAAWQ,IACnE,MAAM0B,EAAcrE,EAAMiH,UAC1B,MAAMpF,EAAWM,EAAWwE,qBAAqBtC,GACjD,MAAMhE,EAAWX,KAAKN,cAAckB,YAAYN,GAChD,MAAMqH,EAAW3H,KAAKL,aAAaiI,wBAAwBjH,EAASsE,QAAS,CAAC9C,GAAW7B,EAAMuH,KAE/F,GAAIF,GAAYA,EAASzG,OAAOiE,OAAS,EAAG,CACxC,OAAOnF,KAAKH,KAAK2H,sBAAsB,CACnCnG,MAAOc,EAAS4B,MAChBzC,MAAOtB,KAAKyH,8BAA8BnH,EAAOqH,EAASzG,OAAO,IACjEZ,MAAOA,EACPwG,gBAAiB,OAEzB,CACJ,CAEQW,8BAA8BnH,EAAc8E,GAehD,MAAM9D,EAAQ,GACd,IAAK,IAAI4D,EAAI,EAAGA,EAAIE,EAAM9D,MAAM6D,OAAQD,IAAK,CACzC,MAAMe,EAAOb,EAAM9D,MAAM4D,GACzB,UAAWe,EAAK6B,eAAiB,iBAAmB7B,EAAKC,cAAgB,SAAU,CAE/E,MAAM6B,EAAgC,GACtCA,EAAWrH,KACPV,KAAKH,KAAKmI,sBAAsB,CAC5BnE,UAAWuB,EAAMnC,GACjBgF,SAAU3I,EAAmB4I,GAC7BlE,MAAOiC,EAAKC,eAKpB6B,EAAWrH,KACPV,KAAKH,KAAKmI,sBAAsB,CAC5BnE,UAAWuB,EAAMnC,GACjBgF,SAAU3I,EAAmB6I,GAC7BnE,MAAOiC,EAAK6B,gBAKpBxG,EAAMZ,KACFV,KAAKH,KAAKuI,0BAA0B,CAChCC,gBAAiBrI,KAAKH,KAAKyI,uBAAuB,CAC9CC,eAAgBnD,EAAMrB,MACtByE,WAAYvC,EAAKG,YACjB6B,SAAU1I,EAAgBkJ,IAC1BV,WAAYA,IAEhBzB,wBAAyBL,EAAKG,YAC9BI,aAAcP,EAAKQ,MACnBC,sBAAuBT,EAAKyC,iBAGxC,KAAO,CAEHpH,EAAMZ,KACFV,KAAKH,KAAKuI,0BAA0B,CAChCC,gBAAiBrI,KAAKH,KAAKmI,sBAAsB,CAC7CO,eAAgBnD,EAAMrB,MACtBF,UAAWuB,EAAMnC,GACjBgF,SAAU3I,EAAmBqJ,GAC7B3E,MAAOiC,EAAKC,YACZsC,WAAYvC,EAAKG,cAIrBE,wBAAyBL,EAAKG,YAC9BI,aAAcP,EAAKQ,MACnBC,sBAAuBT,EAAKyC,iBAGxC,CACJ,CAEA,OAAOpH,CACX,CAEA,gBAAMsH,CAAWtI,SACPN,KAAKN,cAAcU,cAEzB,IAAIO,EACJ,IAAIkI,EAAc,GAElB,OAAQvI,EAAMwI,MAAM,IAChB,KAAK/J,EAAeuG,WAChB3E,EAAWX,KAAKP,kBAAkBmB,YAAYN,GAC9CuI,QAAoB7I,KAAK+I,gCAAgCzI,EAAOK,GAChE,MACJ,KAAK5B,EAAeiK,WAChBrI,EAAWX,KAAKN,cAAckB,YAAYN,GAC1CuI,QAAoB7I,KAAKiJ,gCAAgC3I,EAAOK,GAChE,MACJ,KAAK5B,EAAemK,OAChBvI,EAAWX,KAAKN,cAAckB,YAAYN,GAC1CuI,QAAoB7I,KAAKmJ,4BAA4B7I,EAAOK,GAC5D,MACJ,SAKJ,OAAOX,KAAKH,KAAKuJ,2BAA2B,CACxC/H,MAAO,cACPf,MAAOA,EACPgB,MAAOuH,GAEf,CAEA,qCAAcE,CACVzI,EACAK,GAEA,MAAMkI,EAAc,GACpBlI,EAASsE,QAAQlC,IAAKN,IAClBoG,EAAYnI,KACRV,KAAKH,KAAKwJ,4BAA4B,CAClCC,gBAAiBtJ,KAAKH,KAAK0J,0BAA0BC,KACrD/G,WAAYA,EACZsB,MAAO5E,EACHsD,EAAW8D,aAAe9D,EAAWsB,MACrCzD,EAAMC,OAAOC,iBAK7B,OAAOqI,CACX,CAEA,qCAAcI,CACV3I,EACAK,GAEA,MAAMkI,EAAc,GACpBlI,EAASK,iBAAiBc,QAASf,IAC/B,MAAMR,EAASD,EAAMC,OAAOyF,QAC5B,MAAMvD,EAAazC,KAAKH,KAAK6C,cAAc3B,EAAOc,cAClDtB,EAAO4G,cAAc1E,GAErBoG,EAAYnI,KACRV,KAAKH,KAAK4J,4BAA4B,CAClCH,gBAAiBtJ,KAAKH,KAAK0J,0BAA0BC,KACrDhJ,WAAYtB,EAAuB6B,EAAO2I,aAAcpJ,EAAMC,OAAOC,YAAY,GACjFD,OAAQD,EAAMC,OACdwD,MAAO5E,EACHD,EAAuB6B,EAAO2I,aAAcpJ,EAAMC,OAAOC,YAAY,GACrEF,EAAMC,OAAOC,YAEjBmJ,iBAAkB,CACd3J,KAAKH,KAAK+J,yCAAyC,CAC/CN,gBAAiBtJ,KAAKH,KAAK0J,0BAA0BC,KACrDhJ,WAAYtB,EACR6B,EAAO2I,aACPpJ,EAAMC,OAAOC,YACf,GACFD,SACAkC,aACAsB,MAAO5E,EACHD,EAAuB6B,EAAO2I,aAAcpJ,EAAMC,OAAOC,YAAY,GACrEF,EAAMC,OAAOC,oBASrC,IAAKnB,EAAaiB,EAAMC,OAAOC,YAAa,CACxCtB,EAAuBc,KAAKJ,mBAAoBU,EAAMC,OAAOC,YAAYsB,QAAStB,IAC9EqI,EAAYnI,KACRV,KAAKH,KAAK4J,4BAA4B,CAClCH,gBAAiBtJ,KAAKH,KAAK0J,0BAA0BM,QACrDrJ,WAAYA,EACZD,OAAQD,EAAMC,OACdwD,MAAO5E,EAAuBqB,EAAYF,EAAMC,OAAOC,gBAIvE,CACA,OAAOqI,CACX,CAEA,iCAAcM,CACV7I,EACAK,GAEA,MAAMkI,EAAc,GACpB,IAAK,MAAM9H,KAAUJ,EAASK,iBAAkB,CAC5C6H,EAAYnI,KACRV,KAAKH,KAAKiK,wBAAwB,CAC9BR,gBAAiBtJ,KAAKH,KAAK0J,0BAA0BC,KACrDzF,MAAO,GAGPgG,aAAc/J,KAAKiB,8BAA8BX,EAAOS,KAGpE,CACA,OAAO8H,CACX,EACH,IAAAmB,EAAA,CAAAC,WAAA,MAAAD,EAAAxK,eAAA,OAAAwK,CAAA","ignoreList":[]}