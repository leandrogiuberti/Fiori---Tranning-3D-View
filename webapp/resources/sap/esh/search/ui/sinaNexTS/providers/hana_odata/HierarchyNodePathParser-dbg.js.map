{"version":3,"file":"HierarchyNodePathParser-dbg.js","names":["sap","ui","define","____sina_AttributeGroupMetadata","____sina_AttributeMetadata","AttributeGroupMetadata","AttributeMetadata","HierarchyNodePathParser","sina","constructor","parse","response","query","hierarchyNodePaths","staticHierarchyAttributeForDisplay","filter","dataSource","_getStaticHierarchyAttributeForDisplay","parentHierarchy","hierarchyAttributeId","scope","hierarchyAttributeLabel","hierarchyAttributeIcon","hierarchyAttributeMeta","attributeMetadataMap","childAttribute","_private","id","parentAttribute","iconUrlAttributeName","length","hierarchy","hierarchyNodes","forEach","node","index","isFirstPath","isLastPath","icon","label","labelPlural","push","createHierarchyNode","isFirst","isLast","createHierarchyNodePath","name","path","__exports","__esModule"],"sources":["HierarchyNodePathParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeGroupMetadata } from \"../../sina/AttributeGroupMetadata\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { HierarchyNode } from \"../../sina/HierarchyNode\";\nimport { HierarchyNodePath } from \"../../sina/HierarchyNodePath\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { Sina } from \"../../sina/Sina\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { HANAOdataParentHierarchies } from \"./Provider\";\n\nexport class HierarchyNodePathParser {\n    sina: Sina;\n\n    constructor(sina: Sina) {\n        this.sina = sina;\n    }\n\n    public parse(\n        response: Array<HANAOdataParentHierarchies>,\n        query: SearchQuery | SuggestionQuery\n    ): Array<HierarchyNodePath> {\n        const hierarchyNodePaths: Array<HierarchyNodePath> = [];\n        if (!response) {\n            return hierarchyNodePaths;\n        }\n        const staticHierarchyAttributeForDisplay =\n            query.filter.dataSource._getStaticHierarchyAttributeForDisplay();\n        for (const parentHierarchy of response) {\n            const hierarchyAttributeId = parentHierarchy.scope;\n            let hierarchyAttributeLabel = \"\";\n            let hierarchyAttributeIcon = \"\";\n            const hierarchyAttributeMeta = query.filter.dataSource.attributeMetadataMap[hierarchyAttributeId];\n            if (staticHierarchyAttributeForDisplay instanceof AttributeGroupMetadata) {\n                const childAttribute = staticHierarchyAttributeForDisplay._private\n                    ?.childAttribute as AttributeMetadata;\n                if (childAttribute instanceof AttributeMetadata) {\n                    hierarchyAttributeLabel = childAttribute.id;\n                }\n                const parentAttribute = staticHierarchyAttributeForDisplay._private\n                    ?.parentAttribute as AttributeMetadata;\n                if (parentAttribute instanceof AttributeMetadata) {\n                    hierarchyAttributeIcon = parentAttribute.iconUrlAttributeName;\n                }\n            } else if (staticHierarchyAttributeForDisplay instanceof AttributeMetadata) {\n                hierarchyAttributeLabel = hierarchyAttributeMeta.id;\n                hierarchyAttributeIcon = (hierarchyAttributeMeta as AttributeMetadata).iconUrlAttributeName;\n            }\n\n            if (!hierarchyAttributeLabel) {\n                hierarchyAttributeLabel = \"node_value\";\n            }\n            const length = parentHierarchy.hierarchy.length;\n            const hierarchyNodes: Array<HierarchyNode> = [];\n            parentHierarchy.hierarchy.forEach((node, index) => {\n                let isFirstPath = false;\n                let isLastPath = false;\n                let icon = node[hierarchyAttributeIcon] || node[\"icon\"] || \"sap-icon://folder\";\n                let label =\n                    node[hierarchyAttributeLabel] ||\n                    node[\"node_value\"] ||\n                    node[hierarchyAttributeId] ||\n                    node[\"node_id\"];\n                if (index === 0) {\n                    isFirstPath = true;\n                    // Replace first $$ROOT$$ node with datasource node\n                    if (node[hierarchyAttributeId] === \"$$ROOT$$\") {\n                        icon = query.filter.dataSource.icon || \"sap-icon://home\";\n                        label = query.filter.dataSource.labelPlural || query.filter.dataSource.label || label;\n                    }\n                } else if (index === length - 1) {\n                    isLastPath = true;\n                    icon = node[hierarchyAttributeIcon] || node[\"icon\"] || \"sap-icon://open-folder\";\n                }\n                hierarchyNodes.push(\n                    this.sina.createHierarchyNode({\n                        id: node[hierarchyAttributeId] || node[\"node_id\"],\n                        label: label,\n                        isFirst: isFirstPath,\n                        isLast: isLastPath,\n                        icon: icon,\n                    })\n                );\n            });\n            hierarchyNodePaths.push(\n                this.sina.createHierarchyNodePath({\n                    name: parentHierarchy.scope,\n                    path: hierarchyNodes,\n                })\n            );\n        }\n        return hierarchyNodePaths;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,kFAAAC,+BAAA,EAAAC,0BAAA;EAAA;;EAAA,MAKSC,sBAAsB,GAAAF,+BAAA;EAAA,MACtBG,iBAAiB,GAAAF,0BAAA;EAQnB,MAAMG,uBAAuB,CAAC;IACjCC,IAAI;IAEJC,WAAWA,CAACD,IAAU,EAAE;MACpB,IAAI,CAACA,IAAI,GAAGA,IAAI;IACpB;IAEOE,KAAKA,CACRC,QAA2C,EAC3CC,KAAoC,EACZ;MACxB,MAAMC,kBAA4C,GAAG,EAAE;MACvD,IAAI,CAACF,QAAQ,EAAE;QACX,OAAOE,kBAAkB;MAC7B;MACA,MAAMC,kCAAkC,GACpCF,KAAK,CAACG,MAAM,CAACC,UAAU,CAACC,sCAAsC,CAAC,CAAC;MACpE,KAAK,MAAMC,eAAe,IAAIP,QAAQ,EAAE;QACpC,MAAMQ,oBAAoB,GAAGD,eAAe,CAACE,KAAK;QAClD,IAAIC,uBAAuB,GAAG,EAAE;QAChC,IAAIC,sBAAsB,GAAG,EAAE;QAC/B,MAAMC,sBAAsB,GAAGX,KAAK,CAACG,MAAM,CAACC,UAAU,CAACQ,oBAAoB,CAACL,oBAAoB,CAAC;QACjG,IAAIL,kCAAkC,YAAYT,sBAAsB,EAAE;UACtE,MAAMoB,cAAc,GAAGX,kCAAkC,CAACY,QAAQ,EAC5DD,cAAmC;UACzC,IAAIA,cAAc,YAAYnB,iBAAiB,EAAE;YAC7Ce,uBAAuB,GAAGI,cAAc,CAACE,EAAE;UAC/C;UACA,MAAMC,eAAe,GAAGd,kCAAkC,CAACY,QAAQ,EAC7DE,eAAoC;UAC1C,IAAIA,eAAe,YAAYtB,iBAAiB,EAAE;YAC9CgB,sBAAsB,GAAGM,eAAe,CAACC,oBAAoB;UACjE;QACJ,CAAC,MAAM,IAAIf,kCAAkC,YAAYR,iBAAiB,EAAE;UACxEe,uBAAuB,GAAGE,sBAAsB,CAACI,EAAE;UACnDL,sBAAsB,GAAIC,sBAAsB,CAAuBM,oBAAoB;QAC/F;QAEA,IAAI,CAACR,uBAAuB,EAAE;UAC1BA,uBAAuB,GAAG,YAAY;QAC1C;QACA,MAAMS,MAAM,GAAGZ,eAAe,CAACa,SAAS,CAACD,MAAM;QAC/C,MAAME,cAAoC,GAAG,EAAE;QAC/Cd,eAAe,CAACa,SAAS,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UAC/C,IAAIC,WAAW,GAAG,KAAK;UACvB,IAAIC,UAAU,GAAG,KAAK;UACtB,IAAIC,IAAI,GAAGJ,IAAI,CAACZ,sBAAsB,CAAC,IAAIY,IAAI,CAAC,MAAM,CAAC,IAAI,mBAAmB;UAC9E,IAAIK,KAAK,GACLL,IAAI,CAACb,uBAAuB,CAAC,IAC7Ba,IAAI,CAAC,YAAY,CAAC,IAClBA,IAAI,CAACf,oBAAoB,CAAC,IAC1Be,IAAI,CAAC,SAAS,CAAC;UACnB,IAAIC,KAAK,KAAK,CAAC,EAAE;YACbC,WAAW,GAAG,IAAI;YAClB;YACA,IAAIF,IAAI,CAACf,oBAAoB,CAAC,KAAK,UAAU,EAAE;cAC3CmB,IAAI,GAAG1B,KAAK,CAACG,MAAM,CAACC,UAAU,CAACsB,IAAI,IAAI,iBAAiB;cACxDC,KAAK,GAAG3B,KAAK,CAACG,MAAM,CAACC,UAAU,CAACwB,WAAW,IAAI5B,KAAK,CAACG,MAAM,CAACC,UAAU,CAACuB,KAAK,IAAIA,KAAK;YACzF;UACJ,CAAC,MAAM,IAAIJ,KAAK,KAAKL,MAAM,GAAG,CAAC,EAAE;YAC7BO,UAAU,GAAG,IAAI;YACjBC,IAAI,GAAGJ,IAAI,CAACZ,sBAAsB,CAAC,IAAIY,IAAI,CAAC,MAAM,CAAC,IAAI,wBAAwB;UACnF;UACAF,cAAc,CAACS,IAAI,CACf,IAAI,CAACjC,IAAI,CAACkC,mBAAmB,CAAC;YAC1Bf,EAAE,EAAEO,IAAI,CAACf,oBAAoB,CAAC,IAAIe,IAAI,CAAC,SAAS,CAAC;YACjDK,KAAK,EAAEA,KAAK;YACZI,OAAO,EAAEP,WAAW;YACpBQ,MAAM,EAAEP,UAAU;YAClBC,IAAI,EAAEA;UACV,CAAC,CACL,CAAC;QACL,CAAC,CAAC;QACFzB,kBAAkB,CAAC4B,IAAI,CACnB,IAAI,CAACjC,IAAI,CAACqC,uBAAuB,CAAC;UAC9BC,IAAI,EAAE5B,eAAe,CAACE,KAAK;UAC3B2B,IAAI,EAAEf;QACV,CAAC,CACL,CAAC;MACL;MACA,OAAOnB,kBAAkB;IAC7B;EACJ;EAAC,IAAAmC,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAAzC,uBAAA,GAAAA,uBAAA;EAAA,OAAAyC,SAAA;AAAA","ignoreList":[]}