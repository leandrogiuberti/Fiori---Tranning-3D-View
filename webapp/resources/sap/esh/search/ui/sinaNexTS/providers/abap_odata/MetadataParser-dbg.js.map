{"version":3,"file":"MetadataParser-dbg.js","names":["sap","ui","define","___labelCalculation","____sina_SinaObject","____sina_MatchingStrategy","____sina_AttributeType","____sina_AttributeFormatType","____core_errors","____sina_System","____core_Log","createLabelCalculator","SinaObject","MatchingStrategy","AttributeType","AttributeFormatType","UnknownDataTypeError","UnknownPresentationUsageError","System","Log","MetadataParser","_provider","_sina","_labelCalculator","_appSearchDataSource","log","constructor","provider","sina","undefined","getAppSearchDataSource","parseDataSourceData","dataSourcesData","sorsNavigationTargetGenerator","i","length","dataSourceData","label","Name","Id","labelPlural","NamePlural","dataSource","createDataSource","id","type","DataSourceType","BusinessObject","usage","endsWith","appSearch","attributesMetadata","isKey","nlq","IsNLSEnabled","system","SourceSystem","SourceClient","_private","semanticObjectType","SemanticObjectTypeId","annotations","Annotations","results","calculateLabel","_fillMetadataBufferForDataSource","Attributes","registerObjectType","properties","attributes","attributeMetadataMap","titleAttributes","detailAttributesPrio1","detailAttributesPrio2","detailAttributes","attributeMetadata","cdsAnnotations","dataSourceAnnotations","attributeAnnotations","_parseAnnotationsIntoJsonStructure","publicAttributeMetadata","_fillMetadataBufferForAttribute","attributeAnnotationsSrc","toUpperCase","_parseSemanticsAnnotation","temporaryUsage","Title","push","Detail","isSummary","cdsAnnotationsParser","_createCDSAnnotationsParser","parsingResult","parseCDSAnnotationsForDataSource","dataSourceIsCdsBased","_sortAttributesOfNonCDSBasedDataSource","usageName","displayOrderIndex","Displayed","DisplayOrder","typeAndFormat","_parseAttributeTypeAndFormat","_createAttributeMetadata","Key","isSortable","Sortable","format","matchingStrategy","_parseMatchingStrategy","UIAreas","_parseUsage","rawAttributeMetadata","hasSemanticsAnnotation","semanticsPrefix","annotationName","substr","Semantics","semanticsValue","UnitAttribute","sort","_createSortFunction","attributeId","getAttributeMetadata","displayOrder","sortFunction","_arrayIncludesEntry","array","entry","compareFunction","j","parsedAnnotations","annotationArrayRegex","arrayMatch","annotationPointer","annotationNameParts","annotationsWithDummyArrays","dummyEntry","compareDummyEntriesFunction","entry1","entry2","split","exec","substring","index","Value","parentAnnotation","annotationWithDummyArrays","actualArray","dummyArrayName","artificialEntry","dummyArrayKeyRegex","match","Object","keys","e","warn","usagePropery","a1","a2","TextIndexed","Text","Exact","presentationUsage","ImageUrl","String","LongText","EDMType","Double","Integer","Time","TypeLength","Timestamp","Date","GeoJson","usagesInResponse","advancedSearch","AdvancedSearchRelevant","facet","Facet","forEach","elem","AdvancedSearch","parseDynamicMetadata","searchResult","items","ResultList","SearchResults","item","HitAttributes","getDataSource","DataSourceId","hitAttributes","hitAttribute","parseDynamicAtributeMetadata","dynamicAttributeMetadata","metadata","dynamic","__exports","__esModule"],"sources":["MetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { createLabelCalculator } from \"./labelCalculation\";\nimport { SinaObject } from \"../../sina/SinaObject\";\nimport { LabelCalculator } from \"../../core/LabelCalculator\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Provider } from \"./Provider\";\nimport { MatchingStrategy } from \"../../sina/MatchingStrategy\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { AttributeFormatType } from \"../../sina/AttributeFormatType\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { UnknownDataTypeError, UnknownPresentationUsageError } from \"../../core/errors\";\nimport { System } from \"../../sina/System\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { AttributeUsageType } from \"../../sina/AttributeUsageType\";\nimport { HANAOdataMetadataResponse } from \"../hana_odata/Provider\";\nimport { Log } from \"../../core/Log\";\nimport { CDSAnnotations } from \"../tools/cds/CDSAnnotationsParser\";\n\nexport class MetadataParser extends SinaObject {\n    private _provider: Provider;\n    private _sina: Sina;\n    private _labelCalculator: LabelCalculator;\n    private _appSearchDataSource?: DataSource;\n    private log = new Log(\"ABAP MetadataParser\");\n\n    constructor(provider: Provider) {\n        super();\n        this._provider = provider;\n        this._sina = provider.sina;\n        this._labelCalculator = createLabelCalculator();\n        this._appSearchDataSource = undefined;\n    }\n\n    getAppSearchDataSource(): DataSource {\n        return this._appSearchDataSource;\n    }\n\n    parseDataSourceData(dataSourcesData, sorsNavigationTargetGenerator): void {\n        for (let i = 0; i < dataSourcesData.length; ++i) {\n            const dataSourceData = dataSourcesData[i];\n\n            let label = dataSourceData.Name;\n            if (!label) {\n                label = dataSourceData.Id;\n            }\n\n            let labelPlural = dataSourceData.NamePlural;\n            if (!labelPlural) {\n                labelPlural = label;\n            }\n\n            const dataSource = this._sina.createDataSource({\n                id: dataSourceData.Id,\n                label: label,\n                labelPlural: labelPlural,\n                type: this._sina.DataSourceType.BusinessObject,\n                usage: dataSourceData.Id.endsWith(\"TRANSACTIONS~\")\n                    ? {\n                          appSearch: {},\n                      }\n                    : {},\n                attributesMetadata: [\n                    {\n                        id: \"dummy\",\n                        isKey: false,\n                        label: \"\",\n                        type: \"String\",\n                    },\n                ] as Array<AttributeMetadata>, // fill with dummy attribute\n                nlq: dataSourceData.IsNLSEnabled,\n            });\n\n            dataSource.system = new System({\n                id: dataSourceData.SourceSystem + \".\" + dataSourceData.SourceClient,\n                label: dataSourceData.SourceSystem + \" \" + dataSourceData.SourceClient,\n            });\n\n            dataSource._private.semanticObjectType = dataSourceData.SemanticObjectTypeId;\n            dataSource._private.annotations =\n                (dataSourceData.Annotations && dataSourceData.Annotations.results) || [];\n\n            this._labelCalculator.calculateLabel(dataSource);\n\n            this._fillMetadataBufferForDataSource(dataSource, dataSourceData.Attributes.results);\n\n            sorsNavigationTargetGenerator.registerObjectType({\n                type: dataSource.id,\n                label: dataSource.label,\n                properties: dataSource.attributesMetadata,\n            });\n\n            if (dataSource.id.endsWith(\"TRANSACTIONS~\") && this._appSearchDataSource === undefined) {\n                this._appSearchDataSource = dataSource;\n            }\n        }\n    }\n\n    _fillMetadataBufferForDataSource(dataSource: DataSource, attributes): void {\n        if (dataSource.attributesMetadata[0].id !== \"dummy\") {\n            // check if buffer already filled\n            return;\n        }\n        dataSource.attributesMetadata = [];\n        dataSource.attributeMetadataMap = {};\n        let i;\n        const titleAttributes = [];\n        const detailAttributesPrio1 = [];\n        const detailAttributesPrio2 = [];\n        const detailAttributes = [];\n        let attributeMetadata;\n\n        const cdsAnnotations: CDSAnnotations = {\n            dataSourceAnnotations: {}, // Key-Value-Map for CDS annotations\n            attributeAnnotations: {}, // Key-Value-Map (keys: attribute names) of Key-Value-Maps (keys: annotation names) for CDS annotations\n        };\n\n        // Prepare data source annotations for being passed to CDS annotations parser\n        cdsAnnotations.dataSourceAnnotations = this._parseAnnotationsIntoJsonStructure(\n            dataSource._private.annotations\n        );\n\n        for (i = 0; i < attributes.length; i++) {\n            attributeMetadata = attributes[i];\n\n            const publicAttributeMetadata = this._fillMetadataBufferForAttribute(\n                dataSource,\n                attributeMetadata\n            );\n\n            // prepare attribute annotations for being passed over to the CDS annotations parser\n            const attributeAnnotationsSrc =\n                (attributeMetadata.Annotations && attributeMetadata.Annotations.results) || [];\n            const attributeAnnotations = this._parseAnnotationsIntoJsonStructure(attributeAnnotationsSrc);\n            cdsAnnotations.attributeAnnotations[publicAttributeMetadata.id.toUpperCase()] =\n                attributeAnnotations;\n\n            // if this attribute has a Semantics property but no semantics annotation, create a new semantics annotation that corresponds to Semantics property.\n            this._parseSemanticsAnnotation(attributeMetadata, attributeAnnotations);\n\n            if (publicAttributeMetadata._private.temporaryUsage.Title !== undefined) {\n                titleAttributes.push(publicAttributeMetadata);\n            }\n            if (publicAttributeMetadata._private.temporaryUsage.Detail !== undefined) {\n                if (attributeMetadata.isSummary) {\n                    detailAttributesPrio1.push(publicAttributeMetadata);\n                } else {\n                    detailAttributesPrio2.push(publicAttributeMetadata);\n                }\n            }\n        }\n\n        ///////////////////////////////////////////\n        // Parse CDS Annotations for Data Source\n        const cdsAnnotationsParser = this._sina._createCDSAnnotationsParser({\n            dataSource: dataSource,\n            cdsAnnotations: cdsAnnotations,\n        });\n        const parsingResult = cdsAnnotationsParser.parseCDSAnnotationsForDataSource();\n        if (!parsingResult.dataSourceIsCdsBased) {\n            this._sortAttributesOfNonCDSBasedDataSource(\n                dataSource,\n                titleAttributes,\n                detailAttributes,\n                detailAttributesPrio1,\n                detailAttributesPrio2\n            );\n        }\n\n        ///////////////////////////////////////////////////////////////////////\n        // add any usage that is neither Title nor Detail to attribute usage\n        for (i = 0; i < dataSource.attributesMetadata.length; i++) {\n            attributeMetadata = dataSource.attributesMetadata[i];\n            if (attributeMetadata._private.temporaryUsage) {\n                for (const usageName in attributeMetadata._private.temporaryUsage) {\n                    if (usageName != \"Title\" && usageName != \"Detail\") {\n                        attributeMetadata.usage[usageName] =\n                            attributeMetadata._private.temporaryUsage[usageName];\n                    }\n                }\n                // delete attributeMetadata._private.temporaryUsage;\n            }\n        }\n    }\n\n    _fillMetadataBufferForAttribute(dataSource: DataSource, attributeMetadata: HANAOdataMetadataResponse) {\n        const displayOrderIndex =\n            attributeMetadata.Displayed && attributeMetadata.DisplayOrder\n                ? attributeMetadata.DisplayOrder\n                : -1; // oliver\n\n        const typeAndFormat = this._parseAttributeTypeAndFormat(attributeMetadata);\n\n        const publicAttributeMetadata = this._sina._createAttributeMetadata({\n            id: attributeMetadata.Id,\n            label: attributeMetadata.Name !== \"\" ? attributeMetadata.Name : attributeMetadata.Id,\n            isKey: attributeMetadata.Key,\n            isSortable: attributeMetadata.Sortable,\n            usage: {}, //attributeMetadata.UIAreas ? this._parseUsage(attributeMetadata, displayOrderIndex) : {},\n            type: typeAndFormat.type,\n            format: typeAndFormat.format,\n            matchingStrategy: this._parseMatchingStrategy(attributeMetadata),\n        });\n\n        publicAttributeMetadata._private.semanticObjectType = attributeMetadata.SemanticObjectTypeId;\n\n        // temporaly store usage in this property.\n        // we\"ll decide later whether we use this, or whether we use annotations for setting the usage.\n        publicAttributeMetadata._private.temporaryUsage = attributeMetadata.UIAreas\n            ? this._parseUsage(attributeMetadata, displayOrderIndex)\n            : {};\n\n        dataSource.attributesMetadata.push(publicAttributeMetadata);\n        dataSource.attributeMetadataMap[publicAttributeMetadata.id] = publicAttributeMetadata;\n\n        return publicAttributeMetadata;\n    }\n\n    _parseSemanticsAnnotation(rawAttributeMetadata, attributeAnnotations) {\n        let hasSemanticsAnnotation = false;\n        const semanticsPrefix = \"SEMANTICS\";\n        for (const annotationName in attributeAnnotations) {\n            if (annotationName.substr(0, semanticsPrefix.length) == semanticsPrefix) {\n                hasSemanticsAnnotation = true;\n                break;\n            }\n        }\n        if (rawAttributeMetadata.Semantics && !hasSemanticsAnnotation) {\n            let semanticsValue;\n            switch (rawAttributeMetadata.Semantics) {\n                case \"EMAIL.ADDRESS\":\n                case \"TELEPHONE.TYPE\":\n                case \"CURRENCYCODE\":\n                case \"UNITOFMEASURE\":\n                    semanticsValue = \"TRUE\";\n                    break;\n                case \"QUANTITY.UNITOFMEASURE\":\n                case \"AMOUNT.CURRENCYCODE\":\n                    semanticsValue = rawAttributeMetadata.UnitAttribute;\n                    break;\n            }\n            if (semanticsValue) {\n                attributeAnnotations[semanticsPrefix + rawAttributeMetadata.Semantics] = semanticsValue;\n            }\n        }\n    }\n\n    _sortAttributesOfNonCDSBasedDataSource(\n        dataSource,\n        titleAttributes,\n        detailAttributes,\n        detailAttributesPrio1,\n        detailAttributesPrio2\n    ) {\n        let i, attributeMetadata;\n        titleAttributes.sort(this._createSortFunction(\"Title\"));\n        for (i = 0; i < titleAttributes.length; ++i) {\n            const attributeId = titleAttributes[i].id;\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId);\n            attributeMetadata.usage.Title = attributeMetadata._private.temporaryUsage.Title;\n            attributeMetadata.usage.Title.displayOrder = i;\n        }\n\n        // calculate attribute area display order\n        const sortFunction = this._createSortFunction(\"Detail\");\n        detailAttributesPrio1.sort(sortFunction);\n        detailAttributesPrio2.sort(sortFunction);\n        detailAttributes.push(...detailAttributesPrio1);\n        detailAttributes.push(...detailAttributesPrio2);\n        for (i = 0; i < detailAttributes.length; ++i) {\n            detailAttributes[i].usage.Detail = detailAttributes[i]._private.temporaryUsage.Detail;\n            detailAttributes[i].usage.Detail.displayOrder = i;\n        }\n    }\n\n    _arrayIncludesEntry(array, entry, compareFunction) {\n        let i;\n        if (compareFunction) {\n            for (i = 0; i < array.length; i++) {\n                if (compareFunction(array[i], entry)) {\n                    return true;\n                }\n            }\n        } else {\n            for (i = 0; i < array.length; i++) {\n                if (array[i] == entry) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    _parseAnnotationsIntoJsonStructure(annotations) {\n        if (annotations.length == 0) {\n            return {};\n        }\n        let i, j;\n        const parsedAnnotations = {};\n        let annotationArrayRegex, arrayMatch;\n        let annotationName, annotationPointer;\n        let annotationNameParts;\n        const annotationsWithDummyArrays = [];\n        let dummyEntry;\n\n        const compareDummyEntriesFunction = function (entry1, entry2) {\n            return (\n                entry1.annotationPointer == entry2.annotationPointer &&\n                entry1.annotationName == entry2.annotationName\n            );\n        };\n\n        try {\n            // first step: parse flattened annotations into JSON structure (including dummy arrays)\n            for (j = 0; j < annotations.length; j++) {\n                annotationArrayRegex = /\\[\\d+\\]$/g;\n                annotationPointer = parsedAnnotations;\n\n                annotationNameParts = annotations[j].Name.split(\".\");\n                for (i = 0; i < annotationNameParts.length; i++) {\n                    annotationName = annotationNameParts[i].toUpperCase();\n                    arrayMatch = annotationArrayRegex.exec(annotationName);\n                    if (arrayMatch !== null) {\n                        annotationName = annotationName.substring(0, arrayMatch.index);\n                    }\n\n                    annotationPointer[annotationName] = annotationPointer[annotationName] || {};\n\n                    if (arrayMatch !== null && arrayMatch[0].length > 0) {\n                        //if (Object.keys(annotationPointer[annotationName]).length == 0) {\n                        dummyEntry = {\n                            annotationPointer: annotationPointer,\n                            annotationName: annotationName,\n                        };\n                        if (\n                            !this._arrayIncludesEntry(\n                                annotationsWithDummyArrays,\n                                dummyEntry,\n                                compareDummyEntriesFunction\n                            )\n                        ) {\n                            annotationsWithDummyArrays.push(dummyEntry);\n                        }\n                        if (i < annotationNameParts.length - 1) {\n                            annotationPointer[annotationName][arrayMatch[0]] =\n                                annotationPointer[annotationName][arrayMatch[0]] || {};\n                            annotationPointer = annotationPointer[annotationName][arrayMatch[0]];\n                        } else {\n                            annotationPointer[annotationName][arrayMatch[0]] = annotations[j].Value;\n                        }\n                    } else if (i < annotationNameParts.length - 1) {\n                        annotationPointer = annotationPointer[annotationName];\n                    } else {\n                        annotationPointer[annotationName] = annotations[j].Value;\n                    }\n                }\n            }\n\n            let parentAnnotation;\n            let annotationWithDummyArrays;\n            let actualArray, dummyArrayName, artificialEntry;\n            const dummyArrayKeyRegex = /\\[\\d+\\]/g;\n\n            // second step: replace dummy arrays with real arrays\n            for (j = 0; j < annotationsWithDummyArrays.length; j++) {\n                parentAnnotation = annotationsWithDummyArrays[j].annotationPointer;\n                annotationName = annotationsWithDummyArrays[j].annotationName;\n                annotationWithDummyArrays = parentAnnotation[annotationName];\n                actualArray = [];\n                artificialEntry = {};\n                for (dummyArrayName in annotationWithDummyArrays) {\n                    if (dummyArrayName.match(dummyArrayKeyRegex)) {\n                        actualArray.push(annotationWithDummyArrays[dummyArrayName]);\n                    } else {\n                        // seems to be an entry that was defined besides the actual array in CDS, eg like this:\n                        // @UI.identification: [{ position: 4 }]\n                        // @UI.identification.position: 6\n                        // .. so we put it into its own array entry\n                        artificialEntry[dummyArrayName] = annotationWithDummyArrays[dummyArrayName];\n                    }\n                }\n                if (Object.keys(artificialEntry).length > 0) {\n                    actualArray.push(artificialEntry);\n                }\n                parentAnnotation[annotationName] = actualArray;\n            }\n        } catch (e) {\n            this.log.warn(\"Error while parsing annotations: \" + e);\n            return {};\n        }\n        return parsedAnnotations;\n    }\n\n    _createSortFunction(usagePropery) {\n        return function (a1, a2) {\n            if (\n                a1._private.temporaryUsage[usagePropery].displayOrder <\n                a2._private.temporaryUsage[usagePropery].displayOrder\n            ) {\n                return -1;\n            } else if (\n                a1._private.temporaryUsage[usagePropery].displayOrder >\n                a2._private.temporaryUsage[usagePropery].displayOrder\n            ) {\n                return 1;\n            }\n            return 0;\n        };\n    }\n\n    _parseMatchingStrategy(attributeMetadata) {\n        if (attributeMetadata.TextIndexed) {\n            return MatchingStrategy.Text;\n        }\n        return MatchingStrategy.Exact;\n    }\n\n    _parseAttributeTypeAndFormat(attributeMetadata) {\n        for (let i = 0; i < attributeMetadata.UIAreas.results.length; i++) {\n            const presentationUsage = attributeMetadata.UIAreas.results[i];\n            const id = presentationUsage.Id;\n            switch (id) {\n                case \"SUMMARY\":\n                    continue;\n                case \"DETAILS\":\n                    continue;\n                case \"TITLE\":\n                    continue;\n                case \"#HIDDEN\":\n                case \"HIDDEN\":\n                    continue;\n                case \"FACTSHEET\":\n                    continue;\n                case \"DETAILIMAGE\":\n                case \"PREVIEWIMAGE\":\n                    return {\n                        type: AttributeType.ImageUrl,\n                    };\n                case \"LONGTEXT\":\n                    return {\n                        type: AttributeType.String,\n                        format: AttributeFormatType.LongText,\n                    };\n                default:\n                    throw new UnknownPresentationUsageError(presentationUsage);\n            }\n        }\n\n        switch (attributeMetadata.EDMType) {\n            case \"Edm.String\":\n            case \"Edm.Binary\":\n            case \"Edm.Boolean\":\n            case \"Edm.Byte\":\n            case \"Edm.Guid\":\n                return {\n                    type: AttributeType.String,\n                };\n\n            case \"Edm.Double\":\n            case \"Edm.Decimal\":\n            case \"Edm.Float\":\n            case \"Edm.Single\":\n                return {\n                    type: AttributeType.Double,\n                };\n\n            case \"Edm.Int16\":\n            case \"Edm.Int32\":\n            case \"Edm.Int64\":\n                return {\n                    type: AttributeType.Integer,\n                };\n\n            case \"Edm.Time\":\n                return {\n                    type: AttributeType.Time,\n                };\n\n            case \"Edm.DateTime\":\n            case \"Edm.DateTimeOffset\":\n                if (attributeMetadata?.TypeLength > 8) {\n                    return {\n                        type: AttributeType.Timestamp,\n                    };\n                }\n                return {\n                    type: AttributeType.Date,\n                };\n            case \"GeoJson\":\n                return {\n                    type: AttributeType.GeoJson,\n                };\n            default:\n                throw new UnknownDataTypeError(attributeMetadata.EDMType);\n        }\n    }\n\n    _parseUsage(attributeMetadata, displayOrderIndex) {\n        const usagesInResponse = attributeMetadata.UIAreas.results;\n        const advancedSearch = attributeMetadata.AdvancedSearchRelevant;\n        const facet = attributeMetadata.Facet;\n        const usage: AttributeUsageType = {};\n        usagesInResponse.forEach(function (elem) {\n            const id = elem.Id;\n            if (id === \"TITLE\") {\n                usage.Title = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n\n            if (id === \"SUMMARY\" || id === \"DETAILIMAGE\" || id === \"PREVIEWIMAGE\") {\n                attributeMetadata.isSummary = true;\n                usage.Detail = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n\n            if (\n                id === \"DETAILS\" ||\n                id === \"LONGTEXT\"\n                //||id === \"#HIDDEN\"\n            ) {\n                usage.Detail = {\n                    displayOrder: displayOrderIndex,\n                };\n            }\n        });\n\n        if (advancedSearch) {\n            usage.AdvancedSearch = {};\n        }\n\n        if (facet) {\n            usage.Facet = {};\n        }\n\n        return usage;\n    }\n\n    parseDynamicMetadata(searchResult) {\n        // get items from response\n        let items;\n        try {\n            items = searchResult.ResultList.SearchResults.results;\n        } catch (e) {\n            this.log.warn(\"Error while parsing dynamic metadata: \" + e);\n            return;\n        }\n        // process all items\n        for (let i = 0; i < items.length; ++i) {\n            const item = items[i];\n            if (!item.HitAttributes || !item.HitAttributes.results) {\n                continue;\n            }\n            const dataSource = this._sina.getDataSource(item.DataSourceId);\n            const hitAttributes = item.HitAttributes.results;\n            for (let j = 0; j < hitAttributes.length; ++j) {\n                const hitAttribute = hitAttributes[j];\n                this.parseDynamicAtributeMetadata(dataSource, hitAttribute);\n            }\n        }\n    }\n\n    parseDynamicAtributeMetadata(dataSource: DataSource, dynamicAttributeMetadata) {\n        let typeAndFormat;\n        let metadata = dataSource.getAttributeMetadata(dynamicAttributeMetadata.Id) as AttributeMetadata;\n        if (metadata) {\n            // update\n            if (!metadata._private.dynamic) {\n                return; // only update dynamic attributes\n            }\n            dynamicAttributeMetadata.UIAreas = dynamicAttributeMetadata.UIAreas || {\n                results: [],\n            };\n            typeAndFormat = this._parseAttributeTypeAndFormat(dynamicAttributeMetadata);\n            metadata.label = dynamicAttributeMetadata.Name;\n            metadata.type = typeAndFormat.type;\n            metadata.format = typeAndFormat.format;\n        } else {\n            // append\n            dynamicAttributeMetadata.UIAreas = dynamicAttributeMetadata.UIAreas || {\n                results: [],\n            };\n            typeAndFormat = this._parseAttributeTypeAndFormat(dynamicAttributeMetadata);\n            metadata = this._sina._createAttributeMetadata({\n                id: dynamicAttributeMetadata.Id,\n                label: dynamicAttributeMetadata.Name,\n                isKey: false,\n                isSortable: false,\n                usage: {},\n                type: typeAndFormat.type,\n                format: typeAndFormat.format,\n                matchingStrategy: MatchingStrategy.Exact,\n                _private: {\n                    dynamic: true,\n                },\n            });\n            dataSource.attributesMetadata.push(metadata);\n            dataSource.attributeMetadataMap[metadata.id] = metadata;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}