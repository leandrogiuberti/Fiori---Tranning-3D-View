{"version":3,"file":"conditionSerializerEshObj-dbg.js","names":["sap","ui","define","____sina_DataSource","____sina_ComparisonOperator","____sina_LogicalOperator","____sina_ComplexCondition","____sina_AttributeType","typeConverter","___eshObjects_src_index","____core_errors","____sina_NullValue","DataSource","ComparisonOperator","LogicalOperator","ComplexCondition","AttributeType","EshObjSearchQueryComparisonOperator","EshObjComparisonOperator","EshObjNullValue","SearchQueryLogicalOperator","Expression","Comparison","Phrase","StringValue","UnknownComparisonOperatorError","UnknownLogicalOperatorError","NullValue","ConditionSerializer","dataSource","constructor","convertSinaToOdataOperator","sinaOperator","Search","Eq","EqualCaseSensitive","Ne","NotEqualCaseSensitive","Lt","LessThanCaseInsensitive","Gt","GreaterThanCaseInsensitive","Le","LessThanOrEqualCaseInsensitive","Ge","GreaterThanOrEqualCaseInsensitive","Co","EqualCaseInsensitive","Bw","Ew","DescendantOf","ChildOf","convertSinaToOdataLogicalOperator","And","AND","Or","OR","Not","NOT","Row","ROW","serializeComplexCondition","condition","result","operator","items","subConditions","conditions","i","length","subCondition","push","serialize","serializeSimpleCondition","value","property","attribute","Is","type","String","metadata","getAttributeMetadata","conditionValue","sina2Odata","conditionOperator","phrase","serializeBetweenCondition","lowCondition","highCondition","lowValue","highValue","isQuoted","serializer","TIGHT_AND","__exports","__esModule"],"sources":["conditionSerializerEshObj.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSource } from \"../../sina/DataSource\";\nimport { Condition } from \"../../sina/Condition\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport * as typeConverter from \"./typeConverter\";\nimport {\n    SearchQueryComparisonOperator as EshObjSearchQueryComparisonOperator,\n    ComparisonOperator as EshObjComparisonOperator,\n    NullValue as EshObjNullValue,\n    SearchQueryLogicalOperator,\n    IToStatement,\n    Expression,\n    Comparison,\n    Phrase,\n    // RangeValues,\n    StringValue,\n} from \"./eshObjects/src/index\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\n// import * as eshObjectsQL from \"./eshObjects/src/index\";\nimport { UnknownComparisonOperatorError, UnknownLogicalOperatorError } from \"../../core/errors\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { NullValue } from \"../../sina/NullValue\";\n\nexport class ConditionSerializer {\n    dataSource: DataSource;\n\n    constructor(dataSource: DataSource) {\n        this.dataSource = dataSource;\n    }\n\n    convertSinaToOdataOperator(sinaOperator: ComparisonOperator): EshObjSearchQueryComparisonOperator {\n        switch (sinaOperator) {\n            case ComparisonOperator.Search:\n                return EshObjSearchQueryComparisonOperator.Search;\n            case ComparisonOperator.Eq:\n                return EshObjSearchQueryComparisonOperator.EqualCaseSensitive;\n            case ComparisonOperator.Ne:\n                return EshObjSearchQueryComparisonOperator.NotEqualCaseSensitive;\n            case ComparisonOperator.Lt:\n                return EshObjSearchQueryComparisonOperator.LessThanCaseInsensitive;\n            case ComparisonOperator.Gt:\n                return EshObjSearchQueryComparisonOperator.GreaterThanCaseInsensitive;\n            case ComparisonOperator.Le:\n                return EshObjSearchQueryComparisonOperator.LessThanOrEqualCaseInsensitive;\n            case ComparisonOperator.Ge:\n                return EshObjSearchQueryComparisonOperator.GreaterThanOrEqualCaseInsensitive;\n            case ComparisonOperator.Co: // Contains only\n                return EshObjSearchQueryComparisonOperator.EqualCaseInsensitive;\n            case ComparisonOperator.Bw: // Begin with\n                return EshObjSearchQueryComparisonOperator.EqualCaseInsensitive;\n            case ComparisonOperator.Ew: // End with\n                return EshObjSearchQueryComparisonOperator.EqualCaseInsensitive;\n            case ComparisonOperator.DescendantOf:\n                return EshObjSearchQueryComparisonOperator.DescendantOf;\n            case ComparisonOperator.ChildOf:\n                return EshObjSearchQueryComparisonOperator.ChildOf;\n            default:\n                throw new UnknownComparisonOperatorError(sinaOperator);\n        }\n    }\n\n    convertSinaToOdataLogicalOperator(sinaOperator: LogicalOperator): SearchQueryLogicalOperator {\n        switch (sinaOperator) {\n            case LogicalOperator.And:\n                return SearchQueryLogicalOperator.AND;\n            case LogicalOperator.Or:\n                return SearchQueryLogicalOperator.OR;\n            case LogicalOperator.Not:\n                return SearchQueryLogicalOperator.NOT;\n            case LogicalOperator.Row:\n                return SearchQueryLogicalOperator.ROW;\n            default:\n                throw new UnknownLogicalOperatorError(sinaOperator);\n        }\n    }\n\n    serializeComplexCondition(condition: ComplexCondition): IToStatement {\n        const result = new Expression({\n            operator: this.convertSinaToOdataLogicalOperator(condition.operator),\n            items: [],\n        });\n        const subConditions = condition.conditions;\n        for (let i = 0; i < subConditions.length; ++i) {\n            const subCondition = subConditions[i] as Condition;\n            result.items.push(this.serialize(subCondition));\n        }\n\n        return result;\n    }\n\n    serializeSimpleCondition(condition: SimpleCondition): Comparison {\n        // special handling for null value\n        if (condition.value instanceof NullValue && condition.operator === ComparisonOperator.Eq) {\n            return new Comparison({\n                property: condition.attribute,\n                operator: EshObjComparisonOperator.Is,\n                value: new EshObjNullValue(),\n            });\n        }\n\n        let type = AttributeType.String;\n        let metadata: AttributeMetadata;\n        if (this.dataSource instanceof DataSource) {\n            metadata = this.dataSource.getAttributeMetadata(condition.attribute) as AttributeMetadata;\n            if (metadata && metadata.type) {\n                type = metadata.type;\n            }\n        }\n        const conditionValue = typeConverter.sina2Odata(type, condition.value, {\n            operator: condition.operator,\n        });\n\n        const conditionOperator = this.convertSinaToOdataOperator(condition.operator);\n\n        return new Comparison({\n            property: condition.attribute,\n            operator: conditionOperator,\n            value: new Phrase({ phrase: conditionValue }),\n        });\n    }\n\n    serializeBetweenCondition(condition: ComplexCondition): Expression {\n        const lowCondition = condition.conditions[0] as SimpleCondition;\n        const highCondition = condition.conditions[1] as SimpleCondition;\n        let type = AttributeType.String;\n        if (this.dataSource instanceof DataSource) {\n            const metadata = this.dataSource.getAttributeMetadata(lowCondition.attribute);\n            type = metadata.type || AttributeType.String;\n        }\n\n        const lowValue = typeConverter.sina2Odata(type, lowCondition.value, {\n            operator: lowCondition.operator,\n        });\n        const highValue = typeConverter.sina2Odata(type, highCondition.value, {\n            operator: highCondition.operator,\n        });\n\n        return new Expression({\n            operator: SearchQueryLogicalOperator.AND,\n            items: [\n                new Comparison({\n                    property: lowCondition.attribute,\n                    operator: EshObjSearchQueryComparisonOperator.GreaterThanOrEqualCaseInsensitive,\n                    value: new StringValue({\n                        value: lowValue,\n                        isQuoted: true,\n                    }),\n                }),\n                new Comparison({\n                    property: lowCondition.attribute,\n                    operator: EshObjSearchQueryComparisonOperator.LessThanOrEqualCaseInsensitive,\n                    value: new StringValue({\n                        value: highValue,\n                        isQuoted: true,\n                    }),\n                }),\n            ],\n        });\n\n        // return new Comparison({\n        //     property: lowCondition.attribute,\n        //     operator: EshObjComparisonOperator.BetweenCaseInsensitive,\n        //     value: new RangeValues({\n        //         start: lowValue, // currently only support simple types of string and number, will be improved\n        //         end: highValue,\n        //     }),\n        // });\n    }\n\n    serialize(condition: Condition): IToStatement {\n        if (condition instanceof ComplexCondition) {\n            if (\n                condition.operator === LogicalOperator.And &&\n                condition.conditions.length > 1 &&\n                // TODO: Enum\n                condition.conditions[0] &&\n                (condition.conditions[0].operator === ComparisonOperator.Ge ||\n                    condition.conditions[0].operator === ComparisonOperator.Gt ||\n                    condition.conditions[0].operator === ComparisonOperator.Le ||\n                    condition.conditions[0].operator === ComparisonOperator.Lt)\n            ) {\n                return this.serializeBetweenCondition(condition as ComplexCondition);\n            }\n            return this.serializeComplexCondition(condition as ComplexCondition);\n        }\n        return this.serializeSimpleCondition(condition as SimpleCondition);\n    }\n}\n\nexport function serialize(dataSource: DataSource, condition: Condition): Expression {\n    const serializer = new ConditionSerializer(dataSource);\n    let result = serializer.serialize(condition);\n    if (result instanceof Comparison) {\n        result = new Expression({\n            operator: SearchQueryLogicalOperator.TIGHT_AND,\n            items: [result],\n        });\n    }\n    return result as Expression;\n}\n"],"mappings":"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","ignoreList":[]}