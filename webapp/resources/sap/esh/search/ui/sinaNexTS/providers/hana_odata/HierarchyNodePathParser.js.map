{"version":3,"file":"HierarchyNodePathParser.js","names":["sap","ui","define","____sina_AttributeGroupMetadata","____sina_AttributeMetadata","AttributeGroupMetadata","AttributeMetadata","HierarchyNodePathParser","sina","constructor","this","parse","response","query","hierarchyNodePaths","staticHierarchyAttributeForDisplay","filter","dataSource","_getStaticHierarchyAttributeForDisplay","parentHierarchy","hierarchyAttributeId","scope","hierarchyAttributeLabel","hierarchyAttributeIcon","hierarchyAttributeMeta","attributeMetadataMap","childAttribute","_private","id","parentAttribute","iconUrlAttributeName","length","hierarchy","hierarchyNodes","forEach","node","index","isFirstPath","isLastPath","icon","label","labelPlural","push","createHierarchyNode","isFirst","isLast","createHierarchyNodePath","name","path","__exports","__esModule"],"sources":["HierarchyNodePathParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeGroupMetadata } from \"../../sina/AttributeGroupMetadata\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { HierarchyNode } from \"../../sina/HierarchyNode\";\nimport { HierarchyNodePath } from \"../../sina/HierarchyNodePath\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { Sina } from \"../../sina/Sina\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { HANAOdataParentHierarchies } from \"./Provider\";\n\nexport class HierarchyNodePathParser {\n    sina: Sina;\n\n    constructor(sina: Sina) {\n        this.sina = sina;\n    }\n\n    public parse(\n        response: Array<HANAOdataParentHierarchies>,\n        query: SearchQuery | SuggestionQuery\n    ): Array<HierarchyNodePath> {\n        const hierarchyNodePaths: Array<HierarchyNodePath> = [];\n        if (!response) {\n            return hierarchyNodePaths;\n        }\n        const staticHierarchyAttributeForDisplay =\n            query.filter.dataSource._getStaticHierarchyAttributeForDisplay();\n        for (const parentHierarchy of response) {\n            const hierarchyAttributeId = parentHierarchy.scope;\n            let hierarchyAttributeLabel = \"\";\n            let hierarchyAttributeIcon = \"\";\n            const hierarchyAttributeMeta = query.filter.dataSource.attributeMetadataMap[hierarchyAttributeId];\n            if (staticHierarchyAttributeForDisplay instanceof AttributeGroupMetadata) {\n                const childAttribute = staticHierarchyAttributeForDisplay._private\n                    ?.childAttribute as AttributeMetadata;\n                if (childAttribute instanceof AttributeMetadata) {\n                    hierarchyAttributeLabel = childAttribute.id;\n                }\n                const parentAttribute = staticHierarchyAttributeForDisplay._private\n                    ?.parentAttribute as AttributeMetadata;\n                if (parentAttribute instanceof AttributeMetadata) {\n                    hierarchyAttributeIcon = parentAttribute.iconUrlAttributeName;\n                }\n            } else if (staticHierarchyAttributeForDisplay instanceof AttributeMetadata) {\n                hierarchyAttributeLabel = hierarchyAttributeMeta.id;\n                hierarchyAttributeIcon = (hierarchyAttributeMeta as AttributeMetadata).iconUrlAttributeName;\n            }\n\n            if (!hierarchyAttributeLabel) {\n                hierarchyAttributeLabel = \"node_value\";\n            }\n            const length = parentHierarchy.hierarchy.length;\n            const hierarchyNodes: Array<HierarchyNode> = [];\n            parentHierarchy.hierarchy.forEach((node, index) => {\n                let isFirstPath = false;\n                let isLastPath = false;\n                let icon = node[hierarchyAttributeIcon] || node[\"icon\"] || \"sap-icon://folder\";\n                let label =\n                    node[hierarchyAttributeLabel] ||\n                    node[\"node_value\"] ||\n                    node[hierarchyAttributeId] ||\n                    node[\"node_id\"];\n                if (index === 0) {\n                    isFirstPath = true;\n                    // Replace first $$ROOT$$ node with datasource node\n                    if (node[hierarchyAttributeId] === \"$$ROOT$$\") {\n                        icon = query.filter.dataSource.icon || \"sap-icon://home\";\n                        label = query.filter.dataSource.labelPlural || query.filter.dataSource.label || label;\n                    }\n                } else if (index === length - 1) {\n                    isLastPath = true;\n                    icon = node[hierarchyAttributeIcon] || node[\"icon\"] || \"sap-icon://open-folder\";\n                }\n                hierarchyNodes.push(\n                    this.sina.createHierarchyNode({\n                        id: node[hierarchyAttributeId] || node[\"node_id\"],\n                        label: label,\n                        isFirst: isFirstPath,\n                        isLast: isLastPath,\n                        icon: icon,\n                    })\n                );\n            });\n            hierarchyNodePaths.push(\n                this.sina.createHierarchyNodePath({\n                    name: parentHierarchy.scope,\n                    path: hierarchyNodes,\n                })\n            );\n        }\n        return hierarchyNodePaths;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,8EAAAC,EAAAC,GAAA,mBAKSC,EAAsBF,EAAA,gCACtBG,EAAiBF,EAAA,qBAQnB,MAAMG,EACTC,KAEAC,YAAYD,GACRE,KAAKF,KAAOA,CAChB,CAEOG,MACHC,EACAC,GAEA,MAAMC,EAA+C,GACrD,IAAKF,EAAU,CACX,OAAOE,CACX,CACA,MAAMC,EACFF,EAAMG,OAAOC,WAAWC,yCAC5B,IAAK,MAAMC,KAAmBP,EAAU,CACpC,MAAMQ,EAAuBD,EAAgBE,MAC7C,IAAIC,EAA0B,GAC9B,IAAIC,EAAyB,GAC7B,MAAMC,EAAyBX,EAAMG,OAAOC,WAAWQ,qBAAqBL,GAC5E,GAAIL,aAA8CV,EAAwB,CACtE,MAAMqB,EAAiBX,EAAmCY,UACpDD,eACN,GAAIA,aAA0BpB,EAAmB,CAC7CgB,EAA0BI,EAAeE,EAC7C,CACA,MAAMC,EAAkBd,EAAmCY,UACrDE,gBACN,GAAIA,aAA2BvB,EAAmB,CAC9CiB,EAAyBM,EAAgBC,oBAC7C,CACJ,MAAO,GAAIf,aAA8CT,EAAmB,CACxEgB,EAA0BE,EAAuBI,GACjDL,EAA0BC,EAA6CM,oBAC3E,CAEA,IAAKR,EAAyB,CAC1BA,EAA0B,YAC9B,CACA,MAAMS,EAASZ,EAAgBa,UAAUD,OACzC,MAAME,EAAuC,GAC7Cd,EAAgBa,UAAUE,QAAQ,CAACC,EAAMC,KACrC,IAAIC,EAAc,MAClB,IAAIC,EAAa,MACjB,IAAIC,EAAOJ,EAAKZ,IAA2BY,EAAK,SAAW,oBAC3D,IAAIK,EACAL,EAAKb,IACLa,EAAK,eACLA,EAAKf,IACLe,EAAK,WACT,GAAIC,IAAU,EAAG,CACbC,EAAc,KAEd,GAAIF,EAAKf,KAA0B,WAAY,CAC3CmB,EAAO1B,EAAMG,OAAOC,WAAWsB,MAAQ,kBACvCC,EAAQ3B,EAAMG,OAAOC,WAAWwB,aAAe5B,EAAMG,OAAOC,WAAWuB,OAASA,CACpF,CACJ,MAAO,GAAIJ,IAAUL,EAAS,EAAG,CAC7BO,EAAa,KACbC,EAAOJ,EAAKZ,IAA2BY,EAAK,SAAW,wBAC3D,CACAF,EAAeS,KACXhC,KAAKF,KAAKmC,oBAAoB,CAC1Bf,GAAIO,EAAKf,IAAyBe,EAAK,WACvCK,MAAOA,EACPI,QAASP,EACTQ,OAAQP,EACRC,KAAMA,OAIlBzB,EAAmB4B,KACfhC,KAAKF,KAAKsC,wBAAwB,CAC9BC,KAAM5B,EAAgBE,MACtB2B,KAAMf,IAGlB,CACA,OAAOnB,CACX,EACH,IAAAmC,EAAA,CAAAC,WAAA,MAAAD,EAAA1C,0BAAA,OAAA0C,CAAA","ignoreList":[]}