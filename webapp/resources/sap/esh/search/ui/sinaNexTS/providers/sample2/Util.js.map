{"version":3,"file":"Util.js","names":["sap","ui","define","module","____sina_AttributeType","____sina_ComparisonOperator","__ui5_require_async","path","Promise","resolve","reject","require","__esModule","endsWith","default","Object","defineProperty","value","err","AttributeType","ComparisonOperator","async","readFile","window","fs","url","pathLib","__filename","fileURLToPath","__dirname","dirname","elisaPath","join","data","readFileSync","encoding","toString","response","fetch","ok","Error","statusText","text","error","console","isValuePairMatched","value1","value2","operator","caseSensitive","type","Date","Eq","Ne","Ge","Le","Gt","Lt","createRegExp","test","pattern","replace","cs","RegExp","Co","Bw","Ew","getMatchedStringValues","stringValues","searchTerm","isStarString","isEmptyString","filter","sValue","formatRawValue","stringValue","Double","parseFloat","Integer","parseInt","String","ImageUrl","ImageBlob","GeoJson","date","isNaN","getTime","getFullYear","getMonth","getDate","Time","Timestamp","Group","formatHighlightedValue","regex","format10Power","isCeil","digits","Math","trunc","split","map","Number","length","pow","__exports"],"sources":["Util.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { Value as RawValue } from \"../../sina/types\";\n\nexport async function readFile(path: string): Promise<string> {\n    try {\n        if (typeof window === \"undefined\") {\n            // Node.js environment\n            const fs = await import(\"node:fs\");\n            const url = await import(\"node:url\");\n            const pathLib = await import(\"node:path\");\n            const __filename = url.fileURLToPath(import.meta.url);\n            const __dirname = pathLib.dirname(__filename);\n            const elisaPath = pathLib.join(__dirname, \"../../../../../../../..\");\n            //path = path.replace(\"/$elisa$\", elisaPath);\n            path = elisaPath + \"/dist/\" + path;\n            const data = fs.readFileSync(path, { encoding: \"utf-8\" }).toString();\n            return data;\n        } else {\n            // browser environment\n            const response = await fetch(path);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch file: ${response.statusText}`);\n            }\n            return await response.text();\n        }\n    } catch (error) {\n        console.error(`Error reading file at ${path}:`, error);\n        throw error;\n    }\n}\n\nexport function isValuePairMatched(\n    value1: RawValue,\n    value2: RawValue,\n    operator: ComparisonOperator,\n    caseSensitive?: boolean\n): boolean {\n    if (typeof value1 !== typeof value2) {\n        return false;\n    }\n\n    const type = typeof value1;\n\n    if (type === \"number\" || (value1 instanceof Date && value2 instanceof Date)) {\n        switch (operator) {\n            case ComparisonOperator.Eq:\n                return value1 === value2;\n            case ComparisonOperator.Ne:\n                return value1 !== value2;\n            case ComparisonOperator.Ge:\n                return value1 >= value2;\n            case ComparisonOperator.Le:\n                return value1 <= value2;\n            case ComparisonOperator.Gt:\n                return value1 > value2;\n            case ComparisonOperator.Lt:\n                return value1 < value2;\n        }\n    }\n\n    if (type === \"string\") {\n        return createRegExp(value2 as string, operator, caseSensitive).test(value1 as string);\n    }\n}\n\nfunction createRegExp(value: string, operator: ComparisonOperator, caseSensitive?: boolean): RegExp {\n    const pattern = value\n        .replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\") // escape everything except *\n        .replace(/\\*/g, \".*\"); // replace * with .*\n    const cs = caseSensitive !== true ? \"i\" : \"\";\n    switch (operator) {\n        case ComparisonOperator.Eq:\n            return new RegExp(`^${pattern}$`, cs);\n        case ComparisonOperator.Ne:\n            return new RegExp(`^(?!${pattern}$).*`, cs);\n        case ComparisonOperator.Co:\n            return new RegExp(pattern, cs);\n        case ComparisonOperator.Bw:\n            return new RegExp(`^${pattern}`, cs);\n        case ComparisonOperator.Ew:\n            return new RegExp(`${pattern}$`, cs);\n        default:\n            return new RegExp(`^${pattern}`, cs);\n    }\n}\n\nexport function getMatchedStringValues(\n    stringValues: string[],\n    searchTerm: string,\n    caseSensitive?: boolean\n): string[] {\n    if (isStarString(searchTerm)) {\n        return stringValues;\n    }\n\n    if (isEmptyString(searchTerm)) {\n        return stringValues;\n    }\n\n    return stringValues.filter((sValue) =>\n        isValuePairMatched(sValue, searchTerm, ComparisonOperator.Co, caseSensitive)\n    );\n}\n\nexport function formatRawValue(stringValue: string, type: AttributeType): RawValue {\n    switch (type) {\n        case AttributeType.Double:\n            return parseFloat(stringValue) || 0;\n        case AttributeType.Integer:\n            return parseInt(stringValue, 10) || 0;\n        case AttributeType.String:\n            return stringValue;\n        case AttributeType.ImageUrl:\n            return stringValue;\n        case AttributeType.ImageBlob:\n            return stringValue;\n        case AttributeType.GeoJson:\n            return stringValue;\n        case AttributeType.Date: {\n            const date = isNaN(new Date(stringValue).getTime()) ? new Date(0) : new Date(stringValue);\n            return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\n        }\n        case AttributeType.Time:\n            return stringValue;\n        case AttributeType.Timestamp: {\n            const date = isNaN(new Date(stringValue).getTime()) ? new Date(0) : new Date(stringValue);\n            return date;\n        }\n        case AttributeType.Group:\n            return stringValue;\n        default:\n            return stringValue;\n    }\n}\n\nexport function formatHighlightedValue(stringValue: string, searchTerm: string): string {\n    if (isStarString(searchTerm)) {\n        return stringValue;\n    }\n    if (isEmptyString(searchTerm)) {\n        return stringValue;\n    }\n    const regex = new RegExp(`(${searchTerm})`, \"gi\");\n    return stringValue.replace(regex, \"<b>$1</b>\");\n}\n\nexport function format10Power(value: number, isCeil?: boolean): number {\n    // isCeil NOT true: find biggest 10 power number, smaller than value\n    // isCeil true: find smallest 10 power number, bigger than value\n    const digits = isCeil\n        ? Math.trunc(value).toString().split(\"\").map(Number).length\n        : Math.trunc(value).toString().split(\"\").map(Number).length - 1;\n    if (isCeil) {\n        return Math.pow(10, digits);\n    } else {\n        return digits === 0 ? 0 : Math.pow(10, digits);\n    }\n}\n\nexport function isStarString(value: string): boolean {\n    return value === \"*\";\n}\n\nexport function isEmptyString(value: string): boolean {\n    return typeof value === \"string\" && value === \"\";\n}\n"],"mappings":"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","ignoreList":[]}