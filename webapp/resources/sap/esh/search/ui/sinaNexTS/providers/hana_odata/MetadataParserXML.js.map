{"version":3,"file":"MetadataParserXML.js","names":["sap","ui","define","____sina_DataSourceType","___MetadataParser","___HierarchyMetadataParser","____core_errors","____sina_i18n","__ui5_require_async","path","Promise","resolve","reject","require","module","__esModule","endsWith","default","Object","defineProperty","value","err","DataSourceType","MetadataParser","HierarchyMetadataParser","MetadataParserError","getText","MetadataParserXML","jsDOMWindow","constructor","provider","super","_getWindow","window","this","jsdom","fs","jquery","readFileSync","dom","JSDOM","runScripts","$","jQuery","fireRequest","client","url","response","getXML","parseResponse","metaXML","allInOneMap","businessObjectMap","Map","businessObjectList","dataSourceMap","dataSourcesList","xmlDoc","parseXML","schemaNode","find","$schemaNode","helperMap","_parseEntityType","_parseEntityContainer","schema","that","hierarchyMetadataParser","loadResourceBundlePromises","each","entityTypeName","attr","entitySet","keys","attributeMap","resourceBundle","undefined","labelResourceBundle","label","labelPlural","annotations","hierarchyDefinitionsMap","icon","name","dataSource","push","parse","siblings","$element","annotationName","length","toUpperCase","annotationValue","_getValueFromElement","sKey","getTextFromResourceBundle","then","sTranslatedText","catch","e","log","error","toString","_setAnnotationValue","index","attributeName","attribute","labelRaw","type","presentationUsage","isFacet","isSortable","supportsTextSearch","displayOrder","annotationsAttr","unknownAnnotation","hierarchyDefinition","facetPosition","facetIconUrlAttributeName","isKey","isFilteringAttribute","children","arrayEntry","entryAnnoName","entryAnnoValue","startsWith","identification","UI","IDENTIFICATION","POSITION","Array","isArray","i","TYPE","all","element","textValue","text","trim","floatValue","Number","parseFloat","isNaN","intValue","parseInt","schemaXML","entityTypeFullQualified","entityType","slice","lastIndexOf","newDatasource","sina","createDataSource","id","BusinessObject","attributesMetadata","__exports"],"sources":["MetadataParserXML.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/* eslint-disable @typescript-eslint/no-this-alias */\n\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport { DataSourceType } from \"../../sina/DataSourceType\";\nimport { EntitySet, ServerMetadataMap, MetadataParser, Attribute } from \"./MetadataParser\";\nimport { Provider } from \"./Provider\";\nimport { HierarchyMetadataParser } from \"./HierarchyMetadataParser\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { MetadataParserError } from \"../../core/errors\";\nimport { getText } from \"../../sina/i18n\";\nimport { type DOMWindow } from \"jsdom\";\n\ndeclare global {\n    interface Window {\n        $: JQueryStatic; // JQuery needed here, as there is XML to get parsed (see function 'parseXML')\n    }\n}\n\ninterface JSDOMWindowWithJQuery extends DOMWindow {\n    $: JQueryStatic;\n}\n\ninterface HelperMap {\n    [key: string]: EntitySet;\n}\n\n/**\n * MetadataParser for XML odata metadata of HANAs esh_search() procedure\n * See https://pages.github.tools.sap/hana-enterprise-search/hana-search-documentation/2024_QRC1/esh/metadata_call/\n */\nexport class MetadataParserXML extends MetadataParser {\n    private jsDOMWindow: JSDOMWindowWithJQuery;\n\n    constructor(provider: Provider) {\n        super(provider);\n    }\n\n    private async _getWindow(): Promise<Window | JSDOMWindowWithJQuery> {\n        if (typeof window === \"undefined\") {\n            if (typeof this.jsDOMWindow === \"undefined\") {\n                const jsdom = await import(\"jsdom\");\n                const fs = await import(\"node:fs\");\n                const jquery = fs.readFileSync(\"./node_modules/jquery/dist/jquery.js\", \"utf-8\");\n\n                const dom = new jsdom.JSDOM(\"<html><script>\" + jquery + \"</script><body></body></html>\", {\n                    runScripts: \"dangerously\",\n                });\n                this.jsDOMWindow = dom.window;\n                dom.window.$ = dom.window.jQuery;\n            }\n            return this.jsDOMWindow;\n        }\n        return window;\n    }\n\n    public async fireRequest(client: Client, url: string): Promise<string> {\n        const response = await client.getXML(url);\n        return response;\n    }\n\n    public async parseResponse(metaXML: string): Promise<ServerMetadataMap> {\n        if (typeof metaXML === \"string\") {\n            // all in one metadata map\n            const allInOneMap: ServerMetadataMap = {\n                businessObjectMap: new Map(), // entity map with attributes and entityset name as key\n                businessObjectList: [], // list of all entities for convenience\n                dataSourceMap: new Map(), // datasource map with entityset name as key\n                dataSourcesList: [], // list of all datasources for convenience\n            };\n\n            const window = await this._getWindow();\n            const xmlDoc = window.$.parseXML(metaXML);\n            const schemaNode = window.$(xmlDoc).find(\"Schema\");\n            const $schemaNode = window.$(schemaNode);\n            const helperMap = await this._parseEntityType($schemaNode, window);\n            this._parseEntityContainer($schemaNode, helperMap, allInOneMap, window);\n            return allInOneMap;\n        } else {\n            throw new MetadataParserError(getText(\"error.sina.metadataParserNotStringError\"));\n        }\n    }\n\n    // parse entityset and its attributes from EntityType\n    private async _parseEntityType(\n        schema: JQuery<HTMLElement>,\n        window: Window | JSDOMWindowWithJQuery\n    ): Promise<HelperMap> {\n        const that = this;\n        const helperMap: HelperMap = {};\n        schema = window.$(schema);\n        const hierarchyMetadataParser = new HierarchyMetadataParser(window.$);\n        const loadResourceBundlePromises = [];\n\n        schema.find(\"EntityType\").each(function () {\n            const entityTypeName = window.$(this).attr(\"Name\");\n            const entitySet: EntitySet = {\n                schema: schema.attr(\"Namespace\"),\n                keys: [],\n                attributeMap: new Map(),\n                resourceBundle: undefined,\n                labelResourceBundle: undefined,\n                label: \"\",\n                labelPlural: \"\",\n                annotations: {},\n                hierarchyDefinitionsMap: new Map(),\n                icon: \"\",\n                name: \"\",\n                dataSource: undefined,\n            };\n            helperMap[entityTypeName] = entitySet;\n\n            // oData keys for accessing a entity\n            window\n                .$(this)\n                .find(\"Key>PropertyRef\")\n                .each(function () {\n                    entitySet.keys.push(window.$(this).attr(\"Name\"));\n                });\n            window\n                .$(this)\n                .find('>Annotation[Term=\"EnterpriseSearch.hierarchy.parentChild\"]')\n                .each(function () {\n                    entitySet.hierarchyDefinitionsMap = hierarchyMetadataParser.parse(entityTypeName, this);\n                });\n            window\n                .$(this)\n                .find('Annotation[Term=\"Search.searchable\"]')\n                .each(function () {\n                    // get sibling annotation element of attr EnterpriseSearchHana.uiResource.label.key\n                    window\n                        .$(this)\n                        .siblings(\"Annotation\")\n                        .each(function () {\n                            const $element = window.$(this);\n                            let annotationName = $element.attr(\"Term\");\n                            if (annotationName !== undefined && annotationName.length > 0) {\n                                annotationName = annotationName.toUpperCase();\n                                const annotationValue = that._getValueFromElement(this, window);\n                                if (annotationName === \"ENTERPRISESEARCHHANA.UIRESOURCE.LABEL.BUNDLE\") {\n                                    entitySet.resourceBundle = annotationValue;\n                                } else if (annotationName === \"ENTERPRISESEARCHHANA.UIRESOURCE.LABEL.KEY\") {\n                                    const sKey = annotationValue;\n                                    if (typeof sKey === \"string\" && sKey && entitySet.resourceBundle) {\n                                        loadResourceBundlePromises.push(\n                                            that.provider\n                                                .getTextFromResourceBundle(entitySet.resourceBundle, sKey)\n                                                .then((sTranslatedText) => {\n                                                    if (sTranslatedText) {\n                                                        entitySet.labelResourceBundle = sTranslatedText;\n                                                    }\n                                                })\n                                                .catch((e) => {\n                                                    that.log.error(\n                                                        \"Resource bundle of \" +\n                                                            entityTypeName +\n                                                            \" '\" +\n                                                            entitySet.resourceBundle +\n                                                            \"' can't be found:\" +\n                                                            e.toString()\n                                                    );\n                                                })\n                                        );\n                                    }\n                                } else if (annotationName === \"UI.HEADERINFO.TYPENAME\") {\n                                    if (typeof annotationValue === \"string\") {\n                                        entitySet.label = annotationValue;\n                                    }\n                                } else if (annotationName === \"UI.HEADERINFO.TYPENAMEPLURAL\") {\n                                    if (typeof annotationValue === \"string\") {\n                                        entitySet.labelPlural = annotationValue;\n                                    }\n                                } else if (annotationName === \"UI.HEADERINFO.TITLE.TYPE\") {\n                                    that._setAnnotationValue(\n                                        entitySet.annotations,\n                                        annotationName,\n                                        annotationValue\n                                    );\n                                } else if (annotationName === \"UI.HEADERINFO.TITLE.VALUEQUALIFIER\") {\n                                    that._setAnnotationValue(\n                                        entitySet.annotations,\n                                        annotationName,\n                                        annotationValue\n                                    );\n                                } else if (annotationName === \"UI.HEADERINFO.TYPEIMAGEURL\") {\n                                    if (typeof annotationValue === \"string\") {\n                                        entitySet.icon = annotationValue;\n                                    }\n                                } else {\n                                    that._setAnnotationValue(\n                                        entitySet.annotations,\n                                        annotationName,\n                                        annotationValue\n                                    );\n                                }\n                            }\n                        });\n                    //}\n                });\n\n            //Loop attributes\n            window\n                .$(this)\n                .find(\"Property\")\n                .each(function (index) {\n                    const attributeName = window.$(this).attr(\"Name\") || \"\";\n                    // schema of supported annotations is required in order to eliminate this any\n                    const attribute: Attribute = {\n                        labelRaw: attributeName,\n                        label: \"\",\n                        type: window.$(this).attr(\"Type\") || \"\",\n                        presentationUsage: [],\n                        // accessUsage: [],\n                        isFacet: false,\n                        isSortable: false,\n                        supportsTextSearch: false,\n                        displayOrder: index,\n                        annotationsAttr: {},\n                        unknownAnnotation: [],\n                        hierarchyDefinition: entitySet.hierarchyDefinitionsMap[attributeName],\n                        facetPosition: 0,\n                        facetIconUrlAttributeName: \"\",\n                        isKey: false,\n                        isFilteringAttribute: undefined,\n                    };\n\n                    entitySet.attributeMap[attributeName] = attribute;\n\n                    window\n                        .$(this)\n                        .find(\"Annotation\")\n                        .each(function () {\n                            let annotationName = window.$(this).attr(\"Term\");\n                            if (annotationName !== undefined && annotationName.length > 0) {\n                                annotationName = annotationName.toUpperCase();\n                                let annotationValue = that._getValueFromElement(this, window);\n                                if (annotationValue == undefined) {\n                                    window\n                                        .$(this)\n                                        .children(\"Collection\")\n                                        .children(\"Record\")\n                                        .each(function () {\n                                            annotationValue = annotationValue || [];\n                                            const arrayEntry = {};\n                                            annotationValue.push(arrayEntry);\n                                            window\n                                                .$(this)\n                                                .children(\"PropertyValue\")\n                                                .each(function () {\n                                                    let entryAnnoName = window.$(this).attr(\"Property\");\n                                                    if (\n                                                        entryAnnoName !== undefined &&\n                                                        entryAnnoName.length > 0\n                                                    ) {\n                                                        entryAnnoName = entryAnnoName.toUpperCase();\n                                                        const entryAnnoValue = that._getValueFromElement(\n                                                            this,\n                                                            window\n                                                        );\n                                                        if (entryAnnoValue !== undefined) {\n                                                            arrayEntry[entryAnnoName] = entryAnnoValue;\n                                                        }\n                                                    }\n                                                });\n                                        });\n                                }\n\n                                if (annotationValue !== undefined) {\n                                    switch (annotationName) {\n                                        case \"SAP.COMMON.LABEL\":\n                                            if (!attribute.label) {\n                                                attribute.label = annotationValue;\n                                            }\n                                            break;\n                                        case \"ENTERPRISESEARCHHANA.UIRESOURCE.LABEL.KEY\":\n                                            if (annotationValue && entitySet.resourceBundle) {\n                                                loadResourceBundlePromises.push(\n                                                    that.provider\n                                                        .getTextFromResourceBundle(\n                                                            entitySet.resourceBundle,\n                                                            annotationValue\n                                                        )\n                                                        .then((sTranslatedText) => {\n                                                            if (sTranslatedText) {\n                                                                attribute.label = sTranslatedText;\n                                                            }\n                                                        })\n                                                        .catch((e) => {\n                                                            that.log.error(\n                                                                \"Resource bundle of \" +\n                                                                    entityTypeName +\n                                                                    \" '\" +\n                                                                    entitySet.resourceBundle +\n                                                                    \"' can't be found:\" +\n                                                                    e.toString()\n                                                            );\n                                                        })\n                                                );\n                                            }\n                                            break;\n                                        case \"ENTERPRISESEARCH.KEY\":\n                                            attribute.isKey = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.PRESENTATIONMODE\":\n                                            window\n                                                .$(this)\n                                                .find(\"Collection>String\")\n                                                .each(function () {\n                                                    const presentationUsage = that._getValueFromElement(\n                                                        this,\n                                                        window\n                                                    );\n                                                    if (presentationUsage) {\n                                                        attribute.presentationUsage.push(presentationUsage);\n                                                    }\n                                                });\n                                            break;\n                                        case \"ENTERPRISESEARCHHANA.ISSORTABLE\":\n                                            attribute.isSortable = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCHHANA.SUPPORTSTEXTSEARCH\":\n                                            attribute.supportsTextSearch = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.FILTERINGFACET.DEFAULT\":\n                                            attribute.isFacet = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.FILTERINGFACET.DISPLAYPOSITION\":\n                                            attribute.facetPosition = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.FILTERINGFACET.ICONURL\":\n                                            attribute.facetIconUrlAttributeName = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.FILTERINGATTRIBUTE.DEFAULT\":\n                                            attribute.isFilteringAttribute = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.FILTERINGATTRIBUTE.DISPLAYPOSITION\":\n                                            attribute.facetPosition = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.FILTERINGATTRIBUTE.ICONURL\":\n                                            attribute.facetIconUrlAttributeName = annotationValue;\n                                            break;\n                                        case \"ENTERPRISESEARCH.DISPLAYORDER\":\n                                            attribute.displayOrder = annotationValue;\n                                            break;\n                                        default:\n                                            if (\n                                                annotationName.startsWith(\"UI\") ||\n                                                annotationName.startsWith(\"OBJECTMODEL\") ||\n                                                annotationName.startsWith(\"SEMANTICS\")\n                                            ) {\n                                                that._setAnnotationValue(\n                                                    attribute.annotationsAttr,\n                                                    annotationName,\n                                                    annotationValue\n                                                );\n                                            } else {\n                                                attribute.unknownAnnotation.push(window.$(this));\n                                            }\n                                    }\n                                }\n                            }\n                        });\n\n                    const identification =\n                        attribute.annotationsAttr.UI && attribute.annotationsAttr.UI.IDENTIFICATION;\n                    if (identification) {\n                        if (identification.POSITION !== undefined) {\n                            attribute.displayOrder = identification.POSITION;\n                        } else if (Array.isArray(identification)) {\n                            for (let i = 0; i < identification.length; i++) {\n                                if (\n                                    identification[i].TYPE == undefined &&\n                                    identification[i].POSITION !== undefined\n                                ) {\n                                    attribute.displayOrder = identification[i].POSITION;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                });\n        });\n\n        await Promise.all(loadResourceBundlePromises);\n        return helperMap;\n    }\n\n    private _getValueFromElement(element: Element, window: Window | JSDOMWindowWithJQuery): any {\n        // string | number | boolean | undefined {\n        const $element = window.$(element);\n        const textValue = $element.text();\n        if (textValue && textValue.trim().length > 0) {\n            return textValue;\n        }\n        try {\n            if ($element.attr(\"String\") !== undefined) {\n                return $element.attr(\"String\");\n            } else if ($element.attr(\"Decimal\") !== undefined) {\n                const floatValue = Number.parseFloat($element.attr(\"Decimal\") || \"\");\n                if (!isNaN(floatValue)) {\n                    return floatValue;\n                }\n            } else if ($element.attr(\"Int\") !== undefined) {\n                const intValue = Number.parseInt($element.attr(\"Int\") || \"\", 10);\n                if (!isNaN(intValue)) {\n                    return intValue;\n                }\n            } else if ($element.attr(\"Bool\") !== undefined) {\n                return $element.attr(\"Bool\") == \"true\";\n            }\n        } catch (e) {\n            this.log.error(\"Error parsing annotation value: \" + e.toString());\n        }\n    }\n\n    // parse datasources from EntityContainer\n    private _parseEntityContainer(\n        schemaXML: JQuery<HTMLElement>,\n        helperMap: HelperMap,\n        allInOneMap: ServerMetadataMap,\n        window: Window | JSDOMWindowWithJQuery\n    ): void {\n        const that = this;\n        schemaXML.find(\"EntityContainer>EntitySet\").each(function () {\n            if (window.$(this).attr(\"Name\") && window.$(this).attr(\"EntityType\")) {\n                const name = window.$(this).attr(\"Name\") || \"\";\n                const entityTypeFullQualified = window.$(this).attr(\"EntityType\") || \"\";\n\n                const entityType = entityTypeFullQualified.slice(\n                    entityTypeFullQualified.lastIndexOf(\".\") + 1\n                );\n\n                const entitySet = helperMap[entityType];\n                if (entitySet === undefined) {\n                    throw \"EntityType \" + entityType + \" has no corresponding meta data!\";\n                }\n\n                const newDatasource = that.sina.createDataSource({\n                    id: name,\n                    label: entitySet.labelResourceBundle || entitySet.label || name,\n                    labelPlural:\n                        entitySet.labelResourceBundle || entitySet.labelPlural || entitySet.label || name,\n                    icon: entitySet.icon || \"\",\n                    type: DataSourceType.BusinessObject,\n                    attributesMetadata: [\n                        {\n                            id: \"dummy\",\n                        },\n                    ] as Array<AttributeMetadata>, // fill with dummy attribute\n                });\n                newDatasource.annotations = entitySet.annotations;\n                allInOneMap.dataSourceMap[newDatasource.id] = newDatasource;\n                allInOneMap.dataSourcesList.push(newDatasource);\n\n                entitySet.name = name;\n                entitySet.dataSource = newDatasource;\n                allInOneMap.businessObjectMap[name] = entitySet;\n                allInOneMap.businessObjectList.push(entitySet);\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]}