{"version":3,"file":"ItemParser.js","names":["sap","ui","define","util","typeConverter","____core_Log","___tools_WhyfoundProcessor","___HierarchyNodePathParser","Log","WhyfoundProcessor","HierarchyNodePathParser","ItemParser","provider","sina","suvNavTargetResolver","log","hierarchyNodePathParser","constructor","this","_createSuvNavTargetResolver","parse","searchQuery","data","value","Promise","resolve","error","warn","message","itemsData","itemProms","i","length","itemData","itemProm","parseItem","push","e","all","query","attributes","titleAttributes","detailAttributes","titleDescriptionAttributes","allAttributes","semanticObjectTypeAttributes","entitySetName","posOfSeparator","lastIndexOf","slice","dataSource","getDataSource","hierarchyNodePaths","undefined","itemResponse","whyFounds","hasHierarchyNodeChild","hasHierarchyNodeChildAttribute","_createSearchResultSetItemAttribute","id","label","toString","valueFormatted","valueHighlighted","isHighlighted","metadata","groups","semanticObjectType","suvAttributes","suvAttribute","suvAttributeName","suvHighlightTerms","fallbackDefaultNavigationTarget","rankingScore","Number","whyFoundProcessor","itemDataStructured","preParseItem","attributeName","groupBy","aggregateCountAlias","structuredAttribute","getAttributeMetadata","usage","Detail","displayOrder","attrValue","odata2Sina","type","attrWhyFound","processRegularWhyFoundAttributes","attribute","calIsHighlighted","iconUrlAttributeName","iconUrlValue","iconUrl","appendRemovingDuplicates","extractHighlightedTerms","Title","TitleDescription","Navigation","mainNavigation","createNavigationTarget","text","targetUrl","target","attributeMetadataMap","_private","suvTargetUrlAttribute","suvTargetMimeTypeAttribute","sort","a1","a2","resolveSuvNavTargets","searchResultSetItem","_createSearchResultSetItem","defaultNavigationTarget","navigationTargets","score","Array","isArray","allAttributesMap","itemPostParser","_createItemPostParser","postResultSetItem","postParseResultSetItem","processAdditionalWhyfoundAttributes","originalPropertyName","splitted","split","propertyName","substructure","__exports","__esModule"],"sources":["ItemParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as util from \"../../core/util\";\nimport * as typeConverter from \"./typeConverter\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Provider } from \"../hana_odata/Provider\";\nimport { SuvAttribute, SuvNavTargetResolver } from \"../tools/fiori/SuvNavTargetResolver\";\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { Log } from \"../../core/Log\";\nimport { SearchResultSetItemAttribute } from \"../../sina/SearchResultSetItemAttribute\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\nimport { WhyfoundProcessor } from \"../tools/WhyfoundProcessor\";\nimport { HierarchyNodePathParser } from \"./HierarchyNodePathParser\";\nimport { HANAOdataSearchResponseResult, HANAOdataSearchResponseResultItem } from \"./Provider\";\nimport { ODataValue } from \"../../sina/odatatypes\";\n\nexport class ItemParser {\n    provider: Provider;\n    sina: Sina;\n    suvNavTargetResolver: SuvNavTargetResolver;\n    log: Log = new Log(\"hana_odata item parser\");\n    hierarchyNodePathParser: HierarchyNodePathParser;\n\n    constructor(provider: Provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n        this.suvNavTargetResolver = this.sina._createSuvNavTargetResolver({\n            sina: this.sina,\n        });\n        this.hierarchyNodePathParser = new HierarchyNodePathParser(this.sina);\n    }\n\n    public async parse(\n        searchQuery: SearchQuery,\n        data: HANAOdataSearchResponseResult\n    ): Promise<Array<SearchResultSetItem>> {\n        if (!data.value) {\n            return Promise.resolve([]);\n        }\n\n        if (data.error) {\n            this.log.warn(\"Server-side Warning: \" + data.error.message);\n        }\n\n        const itemsData = data.value;\n        const itemProms: Array<Promise<SearchResultSetItem>> = [];\n\n        for (let i = 0; i < itemsData.length; ++i) {\n            const itemData = itemsData[i] as HANAOdataSearchResponseResultItem;\n            let itemProm: Promise<SearchResultSetItem>;\n            try {\n                itemProm = this.parseItem(itemData, searchQuery);\n                itemProms.push(itemProm);\n            } catch (e) {\n                this.log.warn(\"Error occurred by parsing result item number \" + i + \": \" + e.message);\n            }\n        }\n        return Promise.all(itemProms);\n    }\n\n    private async parseItem(\n        itemData: HANAOdataSearchResponseResultItem,\n        query: SearchQuery\n    ): Promise<SearchResultSetItem> {\n        const attributes: Array<SearchResultSetItemAttribute> = [];\n        const titleAttributes: Array<SearchResultSetItemAttribute> = [];\n        const detailAttributes: Array<SearchResultSetItemAttribute> = [];\n        const titleDescriptionAttributes: Array<SearchResultSetItemAttribute> = [];\n        const allAttributes: {\n            [key: string]: SearchResultSetItemAttribute;\n        } = {};\n        const semanticObjectTypeAttributes = {};\n\n        let entitySetName = itemData[\"@odata.context\"] || \"\";\n        const posOfSeparator = entitySetName.lastIndexOf(\"#\");\n        if (posOfSeparator > -1) {\n            entitySetName = entitySetName.slice(posOfSeparator + 1);\n        }\n        const dataSource = this.sina.getDataSource(entitySetName) ?? query.getDataSource();\n\n        let hierarchyNodePaths = undefined;\n        if (itemData[\"@com.sap.vocabularies.Search.v1.ParentHierarchies\"]) {\n            const itemResponse = itemData[\"@com.sap.vocabularies.Search.v1.ParentHierarchies\"];\n\n            // {\n            //     data: {\n            //         \"@com.sap.vocabularies.Search.v1.ParentHierarchies\":\n            //             itemData[\"@com.sap.vocabularies.Search.v1.ParentHierarchies\"],\n            //     },\n            // };\n            hierarchyNodePaths = this.hierarchyNodePathParser.parse(itemResponse, query);\n        }\n\n        const whyFounds = itemData[\"@com.sap.vocabularies.Search.v1.WhyFound\"] || {};\n        const hasHierarchyNodeChild = itemData[\"@com.sap.vocabularies.Search.v1.hasChildren\"] || false;\n        const hasHierarchyNodeChildAttribute = this.sina._createSearchResultSetItemAttribute({\n            id: \"HASHIERARCHYNODECHILD\",\n            label: \"HASHIERARCHYNODECHILD\",\n            value: hasHierarchyNodeChild.toString(),\n            valueFormatted: hasHierarchyNodeChild.toString(),\n            valueHighlighted: hasHierarchyNodeChild.toString(),\n            isHighlighted: false,\n            metadata: undefined, // ToDo, fill 'metadata' or refactor to get rid of 'HASHIERARCHYNODECHILD'\n            groups: [],\n        });\n        allAttributes[hasHierarchyNodeChildAttribute.id] = hasHierarchyNodeChildAttribute;\n        attributes.push(hasHierarchyNodeChildAttribute);\n        let metadata: AttributeMetadata;\n        let semanticObjectType = \"\";\n\n        const suvAttributes: { [key: string]: SuvAttribute } = {};\n        let suvAttribute, suvAttributeName;\n        const suvHighlightTerms = [];\n\n        let fallbackDefaultNavigationTarget;\n        const rankingScore = Number(itemData[\"@com.sap.vocabularies.Search.v1.Ranking\"]);\n\n        const whyFoundProcessor = new WhyfoundProcessor(this.sina);\n\n        // parse attributes\n        const itemDataStructured = this.preParseItem(itemData);\n\n        for (const attributeName in itemDataStructured) {\n            if (\n                query.groupBy &&\n                query.groupBy.aggregateCountAlias &&\n                query.groupBy.aggregateCountAlias === attributeName\n            ) {\n                continue;\n            }\n\n            const structuredAttribute = itemDataStructured[attributeName];\n            metadata = dataSource.getAttributeMetadata(attributeName) as AttributeMetadata;\n\n            if (metadata.id == \"LOC_4326\") {\n                // required to get maps to frontend // TODO: move to metadata parser\n                metadata.usage.Detail.displayOrder = -1;\n            }\n\n            // Input:\n            // value\n            // highlighted\n            // snippets\n\n            // Output:\n            // value            = input.value\n            // valueFormatted   = TypeConverter(input.value)\n            // valueHiglighted  =\n            // multiline: true => input.highlighted | input.snippet | why found\n            // multiline: false => input.snippet | input.highlighted | why found\n\n            const attrValue = typeConverter.odata2Sina(metadata.type, structuredAttribute.value);\n\n            const attrWhyFound = whyFoundProcessor.processRegularWhyFoundAttributes(\n                attributeName,\n                structuredAttribute,\n                whyFounds,\n                metadata\n            );\n\n            const attribute = this.sina._createSearchResultSetItemAttribute({\n                id: metadata.id,\n                label: metadata.label,\n                value: attrValue,\n                valueFormatted: undefined,\n                valueHighlighted: attrWhyFound,\n                isHighlighted: whyFoundProcessor.calIsHighlighted(attrWhyFound),\n                metadata: metadata,\n                groups: [],\n            });\n\n            // Add iconUrl if there is referred iconUrlAttributeName\n            if (metadata.iconUrlAttributeName && itemDataStructured[metadata.iconUrlAttributeName]) {\n                const iconUrlValue = itemDataStructured[metadata.iconUrlAttributeName];\n                if (iconUrlValue) {\n                    if (\n                        typeof iconUrlValue === \"object\" &&\n                        \"value\" in iconUrlValue &&\n                        typeof iconUrlValue.value === \"string\" &&\n                        iconUrlValue.value\n                    ) {\n                        attribute.iconUrl = iconUrlValue.value;\n                    } else if (typeof iconUrlValue === \"string\") {\n                        attribute.iconUrl = iconUrlValue;\n                    }\n                }\n            }\n\n            util.appendRemovingDuplicates(\n                suvHighlightTerms,\n                util.extractHighlightedTerms(attribute.valueHighlighted)\n            );\n\n            // deprecated as of 1.92 since fileviewer is also deprecated\n            // if (metadata.suvUrlAttribute && metadata.suvMimeTypeAttribute) {\n            //     suvUrlAttribute = allAttributes[metadata.suvUrlAttribute] || metadata.suvUrlAttribute.id;\n            //     suvMimeTypeAttribute =\n            //         allAttributes[metadata.suvMimeTypeAttribute] || metadata.suvMimeTypeAttribute.id;\n            //     suvAttributes[metadata.id] = {\n            //         suvThumbnailAttribute: attribute,\n            //         suvTargetUrlAttribute: suvUrlAttribute,\n            //         suvTargetMimeTypeAttribute: suvMimeTypeAttribute,\n            //     };\n            // }\n\n            if (metadata.usage.Title) {\n                titleAttributes.push(attribute);\n            }\n            if (metadata.usage.TitleDescription) {\n                titleDescriptionAttributes.push(attribute);\n            }\n            if (metadata.usage.Detail) {\n                detailAttributes.push(attribute);\n            }\n            attributes.push(attribute);\n            if (metadata.usage.Navigation) {\n                if (metadata.usage.Navigation.mainNavigation) {\n                    fallbackDefaultNavigationTarget = this.sina.createNavigationTarget({\n                        text: attribute.value,\n                        targetUrl: attribute.value,\n                        target: \"_blank\",\n                    });\n                }\n            }\n\n            allAttributes[attribute.id] = attribute;\n\n            semanticObjectType =\n                (dataSource.attributeMetadataMap[metadata.id]._private.semanticObjectType as string) || \"\";\n            if (semanticObjectType.length > 0) {\n                semanticObjectTypeAttributes[semanticObjectType] = attrValue;\n            }\n        }\n        for (suvAttributeName in suvAttributes) {\n            suvAttribute = suvAttributes[suvAttributeName];\n            if (typeof suvAttribute.suvTargetUrlAttribute === \"string\") {\n                suvAttribute.suvTargetUrlAttribute = allAttributes[suvAttribute.suvTargetUrlAttribute];\n            }\n            if (typeof suvAttribute.suvTargetMimeTypeAttribute === \"string\") {\n                suvAttribute.suvTargetMimeTypeAttribute =\n                    allAttributes[suvAttribute.suvTargetMimeTypeAttribute];\n            }\n            if (!(suvAttribute.suvTargetUrlAttribute || suvAttribute.suvTargetMimeTypeAttribute)) {\n                delete suvAttributes[suvAttributeName];\n            }\n        }\n\n        titleAttributes.sort(function (a1, a2) {\n            return a1.metadata.usage.Title.displayOrder - a2.metadata.usage.Title.displayOrder;\n        });\n\n        detailAttributes.sort(function (a1, a2) {\n            return a1.metadata.usage.Detail.displayOrder - a2.metadata.usage.Detail.displayOrder;\n        });\n\n        this.suvNavTargetResolver.resolveSuvNavTargets(dataSource, suvAttributes, suvHighlightTerms);\n\n        const searchResultSetItem = this.sina._createSearchResultSetItem({\n            dataSource: dataSource,\n            attributes: attributes,\n            titleAttributes: titleAttributes,\n            titleDescriptionAttributes: titleDescriptionAttributes,\n            detailAttributes: detailAttributes,\n            defaultNavigationTarget: fallbackDefaultNavigationTarget,\n            navigationTargets: [],\n            score: rankingScore,\n        });\n\n        if (Array.isArray(hierarchyNodePaths) && hierarchyNodePaths.length > 0) {\n            searchResultSetItem.hierarchyNodePaths = hierarchyNodePaths;\n        }\n        searchResultSetItem._private.allAttributesMap = allAttributes;\n        searchResultSetItem._private.semanticObjectTypeAttributes = semanticObjectTypeAttributes;\n\n        const itemPostParser = this.sina._createItemPostParser({\n            searchResultSetItem: searchResultSetItem,\n        });\n        const postResultSetItem = await itemPostParser.postParseResultSetItem();\n\n        return await whyFoundProcessor.processAdditionalWhyfoundAttributes(whyFounds, postResultSetItem);\n    }\n\n    private preParseItem(itemData: HANAOdataSearchResponseResultItem): Record<string, { value: ODataValue }> {\n        const itemDataStructured = {};\n        for (const originalPropertyName in itemData) {\n            if (originalPropertyName[0] === \"@\" || originalPropertyName[0] === \"_\") {\n                continue;\n            }\n            const value = itemData[originalPropertyName];\n            const splitted = originalPropertyName.split(\"@\");\n            const propertyName = splitted[0];\n            let substructure = itemDataStructured[propertyName];\n            if (!substructure) {\n                substructure = {};\n                itemDataStructured[propertyName] = substructure;\n            }\n            if (splitted.length === 1) {\n                substructure.value = value;\n                continue;\n            }\n            if (splitted.length === 2) {\n                substructure[splitted[1]] = value;\n                continue;\n            }\n            throw \"more than two @ in property name\";\n        }\n        return itemDataStructured;\n    }\n}\n"],"mappings":"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","ignoreList":[]}