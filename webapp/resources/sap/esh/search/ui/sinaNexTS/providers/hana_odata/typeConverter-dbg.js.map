{"version":3,"file":"typeConverter-dbg.js","names":["sap","ui","define","sinaUtil","____sina_AttributeType","____core_errors","___tools_TypeConverterUtil","AttributeType","UnknownAttributeTypeError","convertToSinaDouble","convertToSinaInteger","convertToSinaStringImageUrlImageBlob","convertToSinaGeoJson","convertToSinaDate","convertToSinaTime","convertToSinaTimestamp","sina2Odata","attributeType","value","context","Double","toString","Integer","String","sina2OdataString","ImageUrl","ImageBlob","GeoJson","JSON","stringify","Date","sina2OdataDate","Time","sina2OdataTime","Timestamp","sina2OdataTimestamp","convertOperator2Wildcards","operator","odata2Sina","convertValueToString","toLocaleDateString","length","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","result","addLeadingZeros","slice","__exports","__esModule"],"sources":["typeConverter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as sinaUtil from \"../../sina/util\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { UnknownAttributeTypeError } from \"../../core/errors\";\nimport { Value } from \"../../sina/types\";\nimport { ODataValue } from \"../../sina/odatatypes\";\nimport {\n    convertToSinaDouble,\n    convertToSinaInteger,\n    convertToSinaStringImageUrlImageBlob,\n    convertToSinaGeoJson,\n    convertToSinaDate,\n    convertToSinaTime,\n    convertToSinaTimestamp,\n} from \"../tools/TypeConverterUtil\";\n\nexport function sina2Odata(attributeType: AttributeType, value, context) {\n    switch (attributeType) {\n        case AttributeType.Double:\n            return value.toString();\n        case AttributeType.Integer:\n            return value.toString();\n        case AttributeType.String:\n            return sina2OdataString(value, context);\n        case AttributeType.ImageUrl:\n        case AttributeType.ImageBlob:\n            return value;\n        case AttributeType.GeoJson:\n            return JSON.stringify(value);\n        case AttributeType.Date:\n            return sina2OdataDate(value);\n        case AttributeType.Time:\n            return sina2OdataTime(value);\n        case AttributeType.Timestamp:\n            return sina2OdataTimestamp(value);\n        default:\n            throw new UnknownAttributeTypeError(attributeType);\n    }\n}\n\nexport function sina2OdataString(value, context) {\n    return sinaUtil.convertOperator2Wildcards(value, context?.operator);\n}\n\nexport function odata2Sina(attributeType: AttributeType, value: ODataValue): Value {\n    switch (attributeType) {\n        case AttributeType.Double:\n            return convertToSinaDouble(value);\n        case AttributeType.Integer:\n            return convertToSinaInteger(value);\n        case AttributeType.String:\n        case AttributeType.ImageUrl:\n        case AttributeType.ImageBlob:\n            return convertToSinaStringImageUrlImageBlob(attributeType, value);\n        case AttributeType.GeoJson:\n            return convertToSinaGeoJson(attributeType, value);\n        case AttributeType.Date:\n            return convertToSinaDate(value);\n        case AttributeType.Time:\n            return convertToSinaTime(value);\n        case AttributeType.Timestamp:\n            return convertToSinaTimestamp(value);\n        default:\n            throw new UnknownAttributeTypeError(attributeType);\n    }\n}\n\nexport function convertValueToString(value: Value): string {\n    if (!value) {\n        return \"\";\n    } else if (typeof value === \"string\") {\n        return value;\n    } else if (typeof value === \"boolean\" || typeof value === \"number\" || typeof value === \"bigint\") {\n        return value.toString();\n    } else if (value instanceof Date) {\n        return value.toLocaleDateString();\n    } else if (typeof value === \"object\") {\n        return JSON.stringify(value);\n    } else {\n        return \"\";\n    }\n}\n\nexport function sina2OdataTimestamp(value: Date | \"$$now$$\"): string {\n    // odata:2017-12-31T23:59:59.0000000Z\n    // sina: Date object\n\n    if (typeof value === \"string\") {\n        if (value.length === 0) {\n            return \"\";\n        }\n        if (value === \"$$now$$\") {\n            value = new Date();\n        }\n    }\n\n    const year = value.getUTCFullYear();\n    const month = value.getUTCMonth() + 1;\n    const day = value.getUTCDate();\n    const hour = value.getUTCHours();\n    const minute = value.getUTCMinutes();\n    const seconds = value.getUTCSeconds();\n\n    // Why not use Date.toISOString()?\n    const result =\n        addLeadingZeros(year.toString(), 4) +\n        \"-\" +\n        addLeadingZeros(month.toString(), 2) +\n        \"-\" +\n        addLeadingZeros(day.toString(), 2) +\n        \"T\" +\n        addLeadingZeros(hour.toString(), 2) +\n        \":\" +\n        addLeadingZeros(minute.toString(), 2) +\n        \":\" +\n        addLeadingZeros(seconds.toString(), 2) +\n        \"Z\";\n    // this.addLeadingZeros(microseconds.toString(), 7) + 'Z'; // According to oData standard, it should be omitted\n\n    return result;\n}\n\nexport function sina2OdataTime(value: string): string {\n    // odata: hh:mm:ss\n    // sina: hh:mm:ss\n    return value;\n    //            return value.slice(0, 2) + value.slice(3, 5) + value.slice(6, 8);\n}\n\nexport function sina2OdataDate(value: string): string {\n    // odata: YYYY-MM-DD\n    // sina: YYYY/MM/DD\n    if (value.length === 0) {\n        return \"\";\n    }\n    return value.slice(0, 4) + \"-\" + value.slice(5, 7) + \"-\" + value.slice(8, 10);\n    //return value.slice(0, 4) + value.slice(5, 7) + value.slice(8, 10);\n}\n\nexport function addLeadingZeros(value, length) {\n    return \"00000000000000\".slice(0, length - value.length) + value;\n}\n"],"mappings":"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","ignoreList":[]}