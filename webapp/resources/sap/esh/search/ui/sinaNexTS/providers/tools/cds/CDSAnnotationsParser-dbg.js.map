{"version":3,"file":"CDSAnnotationsParser-dbg.js","names":["sap","ui","define","_____sina_SinaObject","_____sina_AttributeGroupTextArrangement","_____sina_AttributeType","_____sina_AttributeFormatType","_____sina_AttributeSemanticsType","_____core_Log","SinaObject","AttributeGroupTextArrangement","AttributeType","AttributeFormatType","AttributeSemanticsType","Log","CDSAnnotationsParser","_datasource","_cdsAnnotations","_parsedAttributes","_knownAttributeGroups","_knownAttributeGroupsArray","_attributeGroupReplacements","_AttributeUsagePrio","_detailUsageStubsMap","_detailUsageStubsPrioHigh","_detailUsageStubsPrioMedium","_detailUsageStubsPrioNone","_defaultTextArrangement","_parsingResult","log","constructor","properties","dataSource","cdsAnnotations","HIGH","MEDIUM","NONE","TextLast","parseCDSAnnotationsForDataSource","dataSourceIsCdsBased","detailAttributesAreSorted","titleAttributesAreSorted","_parseDefaultTextArrangement","_parseAttributeAnnotations","_parseDataSourceAnnotations","_addDetailUsageStub","attribute","displayOrder","prio","attributeId","undefined","id","usageStub","obsolete","push","_getDetailUsageStub","_setParsedAttribute","attributeName","toUpperCase","_getParsedAttribute","_setknownAttributeGroup","qualifier","attributeGroup","_getknownAttributeGroup","defaultTextArrangement","_deriveTextArrangementFromCdsAnnotation","dataSourceAnnotations","UI","TEXTARRANGEMENT","e","warn","Object","keys","length","headerInfo","HEADERINFO","title","TITLE","type","groupQualifier","TYPE","VALUEQUALIFIER","trim","usage","Title","titleAttributeName","VALUE","titleAttribute","urlAttributeName","URL","urlAttribute","Navigation","mainNavigation","description","DESCRIPTION","TitleDescription","titleDescriptionAttributeName","titleDescriptionAttribute","titleIconAttributeName","IMAGEURL","titleIconAttribute","sina","ImageUrl","attributeMetadataMap","_parseSingleAttribute","attributesMetadata","concat","assign","_sortAttributes","parsedAttribute","_getPropertyFromObject","attributeAnnotations","_parseSingleAnnotationOrArray","IDENTIFICATION","_parseIdentification","CONNECTEDFIELDS","_parseConnectedFields","_parseURLsForDocumentResultItemThumbnail","SEMANTICS","MULTILINETEXT","format","MultilineText","_parseSemantics","_parseDescriptionAttribute","OBJECTMODEL","connectedFields","QUALIFIER","attributesMap","NAME","_createAttributeGroup","GROUPLABEL","TEMPLATE","label","template","displayAttributes","_createAttributeGroupMetadata","Group","attributes","attributeGroupsMetadata","attributeGroupMetadataMap","nameOfAttributeInGroup","attributeGroupMembership","_createAttributeGroupMembership","group","nameInGroup","groups","identification","_parseAttributePositions","_parseIconUrlAttributeName","Array","isArray","i","ICONURL","iconUrlAttibuteName","iconUrlAttributeName","importance","IMPORTANCE","position","POSITION","Number","MAX_VALUE","_parsePosition","semantics","urlAttributeAnnotations","mimeTypeAttributeName","MIMETYPE","mimeTypeAttribute","suvUrlAttribute","suvMimeTypeAttribute","DocumentThumbnail","CONTACT","PHOTO","Round","ImageBlob","GIVENNAME","FirstName","FAMILYNAME","LastName","EMAIL","ADDRESS","EmailAddress","TELEPHONE","PhoneNr","HTTPURL","CURRENCYCODE","_private","isCurrency","UNITOFMEASURE","isUnitOfMeasure","unitOfMeasureAttribute","currencyCodeAttribute","unitOfMeasure","QUANTITY","isQuantity","_createAttributeGroupForParentChildAttributes","currencyCode","AMOUNT","objectModel","descriptionAttributeName","TEXT","ELEMENT","descriptionAttribute","textArrangement","useParentheses","parenthesesOpen","parenthesesClose","TextFirst","TextOnly","isDescription","cdsTextArrangement","TextSeparate","parentAttribute","childAttribute","qualifierSuffix","obsoleteUsageStub","_replaceAttributeWithGroup","attributeGroupReplacement","groupMembership","sortFunction","entry1","entry2","allEntries","sort","_allEntries","entry","Detail","annotation","parseFunction","j","apply","parseInt","isNaN","object","propertyName","toLowerCase","key","__exports","__esModule"],"sources":["CDSAnnotationsParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SinaObject, SinaObjectProperties } from \"../../../sina/SinaObject\";\nimport { DataSource } from \"../../../sina/DataSource\";\nimport { AttributeGroupTextArrangement } from \"../../../sina/AttributeGroupTextArrangement\";\nimport { AttributeType } from \"../../../sina/AttributeType\";\nimport { AttributeFormatType } from \"../../../sina/AttributeFormatType\";\nimport { AttributeSemanticsType } from \"../../../sina/AttributeSemanticsType\";\nimport { Log } from \"../../../core/Log\";\nimport { AttributeGroupMetadata } from \"../../../sina/AttributeGroupMetadata\";\n\nexport interface CDSAnnotations {\n    // JSON object representing the structure of CDS annotations\n    dataSourceAnnotations: {\n        UI?: {\n            TEXTARRANGEMENT?: string;\n            HEADERINFO?: {\n                TITLE?: {\n                    TYPE?: string;\n                    VALUE?: string;\n                    VALUEQUALIFIER?: string;\n                    URL?: string;\n                };\n                DESCRIPTION?: {\n                    TYPE?: string;\n                    VALUE?: string;\n                    VALUEQUALIFIER?: string;\n                };\n                IMAGEURL?: string;\n            };\n        };\n    };\n    // Key-Value-Map (keys: attribute names) of JSON objects representing the structure of CDS annotations per attribute\n    attributeAnnotations: Record<\n        string,\n        {\n            UI?: {\n                IDENTIFICATION?: {\n                    TYPE?: string;\n                    POSITION?: number;\n                    ICONURL?: string;\n                };\n                CONNECTEDFIELDS?: {\n                    QUALIFIER?: string;\n                    GROUPLABEL?: string;\n                    TEMPLATE?: string;\n                    NAME?: string;\n                };\n                MULTILINETEXT?: string;\n            };\n            SEMANTICS?: {\n                CONTACT?: {\n                    PHOTO?: string;\n                };\n                IMAGEURL?: string;\n                NAME?: {\n                    GIVENNAME?: string;\n                    FAMILYNAME?: string;\n                };\n                EMAIL?: {\n                    ADDRESS?: string;\n                };\n                TELEPHONE?: {\n                    TYPE?: string;\n                };\n                URL?: string;\n                CURRENCYCODE?: string;\n                UNITOFMEASURE?: string;\n                QUANTITY?: {\n                    UNITOFMEASURE?: string;\n                };\n                AMOUNT?: {\n                    CURRENCYCODE?: string;\n                };\n            };\n            OBJECTMODEL?: {\n                TEXT?: {\n                    ELEMENT?: string;\n                };\n            };\n        }\n    >;\n}\n\nexport interface CDSAnnotationsParserOptions extends SinaObjectProperties {\n    dataSource: DataSource;\n    cdsAnnotations: CDSAnnotations;\n}\n\nexport class CDSAnnotationsParser extends SinaObject {\n    private _datasource: DataSource;\n    private _cdsAnnotations: CDSAnnotations;\n    private _parsedAttributes: object;\n    private _knownAttributeGroups: object;\n    private _knownAttributeGroupsArray: any[];\n    private _attributeGroupReplacements: object;\n    private _AttributeUsagePrio: { HIGH: string; MEDIUM: string; NONE: string };\n    private _detailUsageStubsMap: object;\n    private _detailUsageStubsPrioHigh: any[];\n    private _detailUsageStubsPrioMedium: any[];\n    private _detailUsageStubsPrioNone: any[];\n    private _defaultTextArrangement: any;\n    private _parsingResult: {\n        dataSourceIsCdsBased: boolean;\n        detailAttributesAreSorted: boolean;\n        titleAttributesAreSorted: boolean;\n    };\n    private log: Log = new Log(\"hana odata cds annotations parser\");\n\n    constructor(properties: CDSAnnotationsParserOptions) {\n        super(properties);\n        this._datasource = properties.dataSource;\n        this._cdsAnnotations = properties.cdsAnnotations;\n\n        this._parsedAttributes = {};\n\n        this._knownAttributeGroups = {};\n        this._knownAttributeGroupsArray = [];\n\n        this._attributeGroupReplacements = {};\n\n        this._AttributeUsagePrio = {\n            HIGH: \"HIGH\",\n            MEDIUM: \"MEDIUM\",\n            NONE: \"NONE\",\n        };\n\n        /*\n                Example Usage Stub:\n                var usage = {\n                    attribute: <some attribute or attribute group object>,\n                    displayOrder: <integer vaue>,\n                    prio: <Enumeration this._AttributeUsagePrio>,\n                    obsolete: <boolean>\n                }\n             */\n        this._detailUsageStubsMap = {};\n        this._detailUsageStubsPrioHigh = [];\n        this._detailUsageStubsPrioMedium = [];\n        this._detailUsageStubsPrioNone = [];\n\n        this._defaultTextArrangement = AttributeGroupTextArrangement.TextLast;\n    }\n\n    /////////////////////////////////\n    // Main Parse Function\n    ///\n    parseCDSAnnotationsForDataSource() {\n        this._parsingResult = {\n            dataSourceIsCdsBased: false,\n            detailAttributesAreSorted: false,\n            titleAttributesAreSorted: false,\n        };\n\n        // CDS Annotations Object looks like:\n        // cdsAnnotations = {\n        //     dataSourceAnnotations: {}, // JSON object representing the structure of CDS annotations\n        //     attributeAnnotations: {} // Key-Value-Map (keys: attribute names) of JSON objects representing the structure of CDS annotations per attribute\n        // };\n\n        this._parseDefaultTextArrangement();\n        this._parseAttributeAnnotations();\n        this._parseDataSourceAnnotations();\n\n        return this._parsingResult;\n    }\n\n    //////////////////////////////////////////////////////////\n    // Setters and Getters for internal Variables\n    //////////////////////////////////////////////////////////\n\n    _addDetailUsageStub(attribute, displayOrder, prio) {\n        let attributeId;\n        if (typeof attribute === \"string\") {\n            attributeId = attribute;\n            attribute = undefined;\n        } else {\n            attributeId = attribute.id;\n        }\n        const usageStub = {\n            attribute: attribute,\n            displayOrder: displayOrder,\n            prio: prio,\n            obsolete: false,\n        };\n        this._detailUsageStubsMap[attributeId] = usageStub;\n        if (prio === this._AttributeUsagePrio.HIGH) {\n            this._detailUsageStubsPrioHigh.push(usageStub);\n        } else if (prio === this._AttributeUsagePrio.MEDIUM) {\n            this._detailUsageStubsPrioMedium.push(usageStub);\n        } else {\n            this._detailUsageStubsPrioNone.push(usageStub);\n        }\n    }\n\n    _getDetailUsageStub(attribute) {\n        if (!attribute) {\n            return undefined;\n        }\n        let attributeId;\n        if (typeof attribute === \"string\") {\n            attributeId = attribute;\n        } else {\n            attributeId = attribute.id;\n        }\n        return this._detailUsageStubsMap[attributeId];\n    }\n\n    _setParsedAttribute(attributeName, attribute) {\n        this._parsedAttributes[attributeName.toUpperCase()] = attribute;\n    }\n\n    _getParsedAttribute(attributeName) {\n        return this._parsedAttributes[attributeName.toUpperCase()];\n    }\n\n    _setknownAttributeGroup(qualifier, attributeGroup) {\n        this._knownAttributeGroups[qualifier.toUpperCase()] = attributeGroup;\n    }\n\n    _getknownAttributeGroup(qualifier) {\n        return this._knownAttributeGroups[qualifier.toUpperCase()];\n    }\n\n    ////////////////////////////////////////////////////\n    // Set default Text Arrangement for Descriptions\n    ///\n    _parseDefaultTextArrangement() {\n        try {\n            const defaultTextArrangement = this._deriveTextArrangementFromCdsAnnotation(\n                this._cdsAnnotations.dataSourceAnnotations.UI &&\n                    this._cdsAnnotations.dataSourceAnnotations.UI.TEXTARRANGEMENT\n            );\n            this._defaultTextArrangement = defaultTextArrangement || this._defaultTextArrangement;\n        } catch (e) {\n            this.log.warn(\"Could not parse default text arrangement for datasource: \" + e);\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////\n    // Parse Data Source Annotations\n    //////////////////////////////////////////////////////////////////////\n\n    _parseDataSourceAnnotations() {\n        if (Object.keys(this._cdsAnnotations.dataSourceAnnotations).length > 0) {\n            try {\n                const ui = this._cdsAnnotations.dataSourceAnnotations.UI;\n                const headerInfo = ui && ui.HEADERINFO;\n                const title = headerInfo && headerInfo.TITLE;\n                let type, groupQualifier, attributeGroup;\n\n                if (title) {\n                    type = title.TYPE && title.TYPE.toUpperCase();\n                    if (type === \"AS_CONNECTED_FIELDS\") {\n                        groupQualifier = title.VALUEQUALIFIER;\n                        if (groupQualifier && groupQualifier.trim().length > 0) {\n                            attributeGroup = this._getknownAttributeGroup(groupQualifier);\n                            if (attributeGroup) {\n                                //&& attributeGroup === titleAttribute.group) {\n                                attributeGroup.usage.Title = {\n                                    displayOrder: 1,\n                                };\n                            }\n                        }\n                    } else if (!type) {\n                        const titleAttributeName = title.VALUE;\n                        if (titleAttributeName) {\n                            const titleAttribute = this._getParsedAttribute(titleAttributeName);\n                            if (titleAttribute) {\n                                titleAttribute.usage.Title = {\n                                    displayOrder: 1,\n                                };\n                            }\n                        }\n                    }\n\n                    const urlAttributeName = title.URL;\n                    if (urlAttributeName) {\n                        const urlAttribute = this._getParsedAttribute(urlAttributeName);\n                        if (urlAttribute) {\n                            urlAttribute.usage.Navigation = {\n                                mainNavigation: true,\n                            };\n                        }\n                    }\n                }\n\n                const description = headerInfo && headerInfo.DESCRIPTION;\n                if (description) {\n                    type = description.TYPE;\n                    if (type === \"AS_CONNECTED_FIELDS\") {\n                        groupQualifier = description.VALUEQUALIFIER;\n                        if (groupQualifier && groupQualifier.trim().length > 0) {\n                            attributeGroup = this._getknownAttributeGroup(groupQualifier);\n                            if (attributeGroup) {\n                                //&& attributeGroup === titleAttribute.group) {\n                                attributeGroup.usage.TitleDescription = {\n                                    displayOrder: 1,\n                                };\n                            }\n                        }\n                    } else if (!type) {\n                        const titleDescriptionAttributeName = description.VALUE;\n                        if (titleDescriptionAttributeName) {\n                            const titleDescriptionAttribute = this._getParsedAttribute(\n                                titleDescriptionAttributeName\n                            );\n                            if (titleDescriptionAttribute) {\n                                titleDescriptionAttribute.usage.TitleDescription = {};\n                            }\n                        }\n                    }\n                }\n\n                const titleIconAttributeName = headerInfo && headerInfo.IMAGEURL;\n                if (titleIconAttributeName) {\n                    const titleIconAttribute = this._getParsedAttribute(titleIconAttributeName);\n                    if (titleIconAttribute) {\n                        titleIconAttribute.usage.Title = {};\n                        titleIconAttribute.type = this.sina.AttributeType.ImageUrl;\n                    }\n                }\n            } catch (e) {\n                this.log.warn(\"Could not parse attribute for datasource: \" + e);\n            }\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////\n    // Parse Attribute Annotations\n    //////////////////////////////////////////////////////////////////////\n\n    _parseAttributeAnnotations() {\n        for (const attributeId in this._datasource.attributeMetadataMap) {\n            this._parseSingleAttribute(attributeId);\n        }\n\n        this._datasource.attributesMetadata = this._datasource.attributesMetadata.concat(\n            this._knownAttributeGroupsArray\n        );\n        this._datasource.attributeMetadataMap = Object.assign(\n            this._datasource.attributeMetadataMap,\n            this._knownAttributeGroups\n        );\n\n        this._sortAttributes();\n    }\n\n    _parseSingleAttribute(attributeId) {\n        let parsedAttribute = this._getParsedAttribute(attributeId);\n        if (!parsedAttribute) {\n            parsedAttribute = this._getPropertyFromObject(this._datasource.attributeMetadataMap, attributeId);\n            if (parsedAttribute && parsedAttribute.id) {\n                this._setParsedAttribute(parsedAttribute.id, parsedAttribute);\n                const attributeAnnotations = this._cdsAnnotations.attributeAnnotations[parsedAttribute.id];\n\n                if (\n                    typeof attributeAnnotations === \"object\" &&\n                    Object.keys(attributeAnnotations).length > 0\n                ) {\n                    this._parsingResult.dataSourceIsCdsBased = true;\n\n                    try {\n                        // catch and write any parsing error to browser console\n\n                        if (attributeAnnotations.UI !== undefined) {\n                            /// Identification (Positions, URLs)\n                            this._parseSingleAnnotationOrArray(\n                                parsedAttribute,\n                                attributeAnnotations.UI.IDENTIFICATION,\n                                this._parseIdentification\n                            );\n\n                            /// Groups\n                            this._parseSingleAnnotationOrArray(\n                                parsedAttribute,\n                                attributeAnnotations.UI.CONNECTEDFIELDS,\n                                this._parseConnectedFields\n                            );\n\n                            this._parseURLsForDocumentResultItemThumbnail(\n                                parsedAttribute,\n                                attributeAnnotations.UI.IDENTIFICATION,\n                                attributeAnnotations.SEMANTICS\n                            );\n\n                            if (attributeAnnotations.UI.MULTILINETEXT !== undefined) {\n                                parsedAttribute.format = AttributeFormatType.MultilineText;\n                            }\n                        }\n\n                        this._parseSemantics(parsedAttribute, attributeAnnotations.SEMANTICS);\n                        this._parseDescriptionAttribute(\n                            parsedAttribute,\n                            attributeAnnotations.OBJECTMODEL,\n                            attributeAnnotations.UI\n                        );\n                    } catch (e) {\n                        this.log.warn(\"Could not parse attribute for datasource: \" + e);\n                    }\n                }\n            }\n        }\n        return parsedAttribute;\n    }\n\n    _parseConnectedFields(attribute, connectedFields) {\n        const qualifier = connectedFields.QUALIFIER;\n        if (qualifier) {\n            const attributesMap = {};\n            if (connectedFields.NAME) {\n                attributesMap[connectedFields.NAME] = attribute;\n            }\n            this._createAttributeGroup(\n                qualifier,\n                connectedFields.GROUPLABEL,\n                connectedFields.TEMPLATE,\n                attributesMap\n            );\n        }\n    }\n\n    _createAttributeGroup(\n        qualifier,\n        label,\n        template,\n        attributesMap,\n        displayAttributes?\n    ): AttributeGroupMetadata {\n        let attributeGroup = this._getknownAttributeGroup(qualifier);\n        if (!attributeGroup) {\n            attributeGroup = this.sina._createAttributeGroupMetadata({\n                id: qualifier, // equals original qualifier (not converted to lower case)\n                label: label || \"\",\n                type: AttributeType.Group,\n                template: template || \"\",\n                attributes: [],\n                usage: {},\n                displayAttributes: displayAttributes || [],\n            });\n            this._setknownAttributeGroup(qualifier, attributeGroup);\n            this._knownAttributeGroupsArray.push(attributeGroup);\n            this._datasource.attributeGroupsMetadata.push(attributeGroup);\n            this._datasource.attributeGroupMetadataMap[qualifier] = attributeGroup;\n\n            const usageStub = this._getDetailUsageStub(qualifier);\n            if (usageStub) {\n                usageStub.attribute = attributeGroup;\n            }\n        } else {\n            if (label && !attributeGroup.label) {\n                attributeGroup.label = label;\n            }\n            if (template && !attributeGroup.template) {\n                attributeGroup.template = template;\n            }\n            if (displayAttributes && !attributeGroup.displayAttributes) {\n                attributeGroup.displayAttributes = displayAttributes;\n            }\n        }\n        if (attributesMap) {\n            for (const nameOfAttributeInGroup in attributesMap) {\n                const attribute = attributesMap[nameOfAttributeInGroup];\n                const attributeGroupMembership = this.sina._createAttributeGroupMembership({\n                    group: attributeGroup,\n                    attribute: attribute,\n                    nameInGroup: nameOfAttributeInGroup,\n                });\n                attributeGroup.attributes.push(attributeGroupMembership);\n                attribute.groups.push(attributeGroupMembership);\n            }\n        }\n        return attributeGroup;\n    }\n\n    // display position and potential iconUrlAttribute which referred to attribute\n    _parseIdentification(attribute, identification) {\n        this._parseAttributePositions(attribute, identification);\n        this._parseIconUrlAttributeName(attribute, identification);\n    }\n\n    _parseIconUrlAttributeName(attribute, identification) {\n        if (identification) {\n            if (Array.isArray(identification)) {\n                // in case @UI.identification is an array, we look for the first entry which holds a URL sub-entry\n                for (let i = 0; i < identification.length; i++) {\n                    if (identification[i].ICONURL) {\n                        attribute.iconUrlAttibuteName = identification[i].ICONURL;\n                        break;\n                    }\n                }\n            } else if (identification.ICONURL) {\n                attribute.iconUrlAttributeName = identification.ICONURL;\n            }\n        }\n    }\n\n    _parseAttributePositions(attribute, identification) {\n        // Following also takes care of a fallback:\n        // in case that there is an importance, but no position (like it could have happened in the past), set position to a default (Number.MAX_VALUE)\n\n        const importance = identification.IMPORTANCE && identification.IMPORTANCE.toUpperCase();\n        let position = identification.POSITION;\n        if (importance && !position) {\n            position = Number.MAX_VALUE;\n        }\n        if (position !== undefined) {\n            switch (importance) {\n                case \"HIGH\":\n                case \"MEDIUM\":\n                case undefined: {\n                    position = this._parsePosition(position);\n\n                    const type = identification.TYPE && identification.TYPE.toUpperCase();\n                    switch (type) {\n                        case \"AS_CONNECTED_FIELDS\": {\n                            const qualifier = identification.VALUEQUALIFIER;\n                            if (qualifier) {\n                                const attributeGroup = this._getknownAttributeGroup(qualifier);\n                                if (attributeGroup) {\n                                    // We already know the group\n                                    attribute = attributeGroup;\n                                } else {\n                                    // We don't know the group yet, so we remember the usage for later\n                                    attribute = qualifier;\n                                }\n                            }\n                        }\n                        // fall-through to undefined case..\n                        // eslint-disable-next-line no-fallthrough\n                        case undefined: {\n                            // if type is anything but AS_CONNECTED_FIELDS or undefined, we'll ignore the position\n                            const usageStub = this._getDetailUsageStub(attribute);\n                            if (usageStub) {\n                                if (!usageStub.attribute && typeof attribute !== \"string\") {\n                                    usageStub.attribute = attribute;\n                                }\n                            } else {\n                                let prio;\n                                if (importance === \"HIGH\") {\n                                    prio = this._AttributeUsagePrio.HIGH;\n                                } else if (importance === \"MEDIUM\") {\n                                    prio = this._AttributeUsagePrio.MEDIUM;\n                                } else {\n                                    prio = this._AttributeUsagePrio.NONE;\n                                }\n                                this._addDetailUsageStub(attribute, position, prio);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // @UI.identification.url: 'SUV_URL'\n    // @Semantics.imageUrl\n    // ESH_FL_TASK.THUMBNAIL_URL AS THUMB_URL,\n    //\n    // @Semantics.url.mimeType: ‘SUV_MIME‘\n    // @UI.hidden\n    // ESH_FL_TASK.SUV_URL AS SUV_URL,\n    //\n    // @UI.hidden\n    // ESH_FL_TAS.SUV_MIME AS SUV_MIME,\n    //\n    _parseURLsForDocumentResultItemThumbnail(attribute, identification, semantics) {\n        if (!(semantics && semantics.IMAGEURL)) {\n            return;\n        }\n        let urlAttributeName;\n        if (identification) {\n            if (Array.isArray(identification)) {\n                // in case @UI.identification is an array, we look for the first entry which holds a URL sub-entry\n                for (let i = 0; i < identification.length; i++) {\n                    if (identification[i].URL) {\n                        urlAttributeName = identification[i].URL;\n                        break;\n                    }\n                }\n            } else {\n                urlAttributeName = identification.URL;\n            }\n        }\n        if (urlAttributeName && semantics && semantics.IMAGEURL) {\n            const urlAttributeAnnotations = this._getPropertyFromObject(\n                this._cdsAnnotations.attributeAnnotations,\n                urlAttributeName\n            );\n            if (urlAttributeAnnotations) {\n                const mimeTypeAttributeName =\n                    urlAttributeAnnotations.SEMANTICS &&\n                    urlAttributeAnnotations.SEMANTICS.URL &&\n                    urlAttributeAnnotations.SEMANTICS.URL.MIMETYPE;\n                if (mimeTypeAttributeName) {\n                    const urlAttribute = this._getPropertyFromObject(\n                        this._datasource.attributeMetadataMap,\n                        urlAttributeName\n                    );\n                    const mimeTypeAttribute = this._getPropertyFromObject(\n                        this._datasource.attributeMetadataMap,\n                        mimeTypeAttributeName\n                    );\n\n                    attribute.suvUrlAttribute = urlAttribute;\n                    attribute.suvMimeTypeAttribute = mimeTypeAttribute;\n\n                    attribute.format = AttributeFormatType.DocumentThumbnail;\n                }\n            }\n        }\n    }\n\n    _parseSemantics(attribute, semantics) {\n        if (semantics) {\n            if (semantics.CONTACT && semantics.CONTACT.PHOTO !== undefined) {\n                attribute.format = AttributeFormatType.Round;\n                if (attribute.type !== AttributeType.ImageBlob) {\n                    attribute.type = AttributeType.ImageUrl;\n                }\n            }\n\n            if (semantics.IMAGEURL !== undefined) {\n                if (attribute.type !== AttributeType.ImageBlob) {\n                    attribute.type = AttributeType.ImageUrl;\n                }\n            }\n\n            if (semantics.NAME !== undefined) {\n                if (semantics.NAME.GIVENNAME !== undefined) {\n                    attribute.semantics = AttributeSemanticsType.FirstName;\n                }\n\n                if (semantics.NAME.FAMILYNAME !== undefined) {\n                    attribute.semantics = AttributeSemanticsType.LastName;\n                }\n            }\n\n            if (semantics.EMAIL && semantics.EMAIL.ADDRESS !== undefined) {\n                attribute.semantics = AttributeSemanticsType.EmailAddress;\n            }\n\n            if (semantics.TELEPHONE && semantics.TELEPHONE.TYPE !== undefined) {\n                attribute.semantics = AttributeSemanticsType.PhoneNr;\n            }\n\n            if (semantics && semantics.URL !== undefined) {\n                attribute.semantics = AttributeSemanticsType.HTTPURL;\n            }\n\n            if (semantics && semantics.CURRENCYCODE !== undefined) {\n                attribute._private.isCurrency = true;\n            }\n\n            if (semantics && semantics.UNITOFMEASURE !== undefined) {\n                attribute._private.isUnitOfMeasure = true;\n            }\n\n            let unitOfMeasureAttribute, currencyCodeAttribute, template;\n            let displayAttributes: Array<string>;\n\n            const unitOfMeasure = semantics.QUANTITY && semantics.QUANTITY.UNITOFMEASURE;\n            if (unitOfMeasure) {\n                displayAttributes = [];\n                attribute._private.isQuantity = true;\n                unitOfMeasureAttribute = this._parseSingleAttribute(unitOfMeasure);\n                if (unitOfMeasureAttribute) {\n                    if (unitOfMeasureAttribute._private.isUnitOfMeasure) {\n                        template = \"{\" + attribute.id + \"} {\" + unitOfMeasureAttribute.id + \"}\";\n                        displayAttributes.push(attribute.id);\n                        displayAttributes.push(unitOfMeasureAttribute.id);\n                        this._createAttributeGroupForParentChildAttributes(\n                            attribute,\n                            unitOfMeasureAttribute,\n                            \"____UnitOfMeasureGroup\",\n                            template,\n                            displayAttributes\n                        );\n                    }\n                }\n            }\n\n            const currencyCode = semantics.AMOUNT && semantics.AMOUNT.CURRENCYCODE;\n            if (currencyCode) {\n                displayAttributes = [];\n                currencyCodeAttribute = this._parseSingleAttribute(currencyCode);\n                if (currencyCodeAttribute) {\n                    if (currencyCodeAttribute._private.isCurrency) {\n                        template = \"{\" + attribute.id + \"} {\" + currencyCodeAttribute.id + \"}\";\n                        displayAttributes.push(attribute.id);\n                        displayAttributes.push(currencyCodeAttribute.id);\n                        this._createAttributeGroupForParentChildAttributes(\n                            attribute,\n                            currencyCodeAttribute,\n                            \"____CurrencyGroup\",\n                            template,\n                            displayAttributes\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    _parseDescriptionAttribute(attribute, objectModel, ui) {\n        let descriptionAttributeName = objectModel && objectModel.TEXT && objectModel.TEXT.ELEMENT;\n        if (descriptionAttributeName) {\n            if (Array.isArray(descriptionAttributeName)) {\n                if (descriptionAttributeName.length > 0) {\n                    descriptionAttributeName = descriptionAttributeName[0];\n                } else {\n                    return;\n                }\n            }\n            const descriptionAttribute = this._parseSingleAttribute(descriptionAttributeName);\n            if (descriptionAttribute) {\n                const textArrangement =\n                    this._deriveTextArrangementFromCdsAnnotation(ui && ui.TEXTARRANGEMENT) ||\n                    this._defaultTextArrangement;\n\n                const useParentheses = !(\n                    (attribute.semantics == AttributeSemanticsType.FirstName &&\n                        descriptionAttribute.semantics == AttributeSemanticsType.LastName) ||\n                    (descriptionAttribute.semantics == AttributeSemanticsType.FirstName &&\n                        attribute.semantics == AttributeSemanticsType.LastName)\n                );\n                const parenthesesOpen = useParentheses ? \"(\" : \"\";\n                const parenthesesClose = useParentheses ? \")\" : \"\";\n\n                let template;\n                if (textArrangement === AttributeGroupTextArrangement.TextFirst) {\n                    template =\n                        \"{\" +\n                        descriptionAttribute.id +\n                        \"} \" +\n                        parenthesesOpen +\n                        \"{\" +\n                        attribute.id +\n                        \"}\" +\n                        parenthesesClose;\n                } else if (textArrangement === AttributeGroupTextArrangement.TextLast) {\n                    template =\n                        \"{\" +\n                        attribute.id +\n                        \"} \" +\n                        parenthesesOpen +\n                        \"{\" +\n                        descriptionAttribute.id +\n                        \"}\" +\n                        parenthesesClose;\n                } else if (textArrangement === AttributeGroupTextArrangement.TextOnly) {\n                    template = \"{\" + descriptionAttribute.id + \"}\";\n                } else {\n                    template =\n                        \"{\" +\n                        attribute.id +\n                        \"} \" +\n                        parenthesesOpen +\n                        \"{\" +\n                        descriptionAttribute.id +\n                        \"}\" +\n                        parenthesesClose;\n                }\n\n                // Prepare the list of attributes to be displayed in UI\n                const displayAttributes: Array<string> = [];\n                if (textArrangement === AttributeGroupTextArrangement.TextOnly) {\n                    displayAttributes.push(descriptionAttribute.id);\n                } else {\n                    displayAttributes.push(attribute.id);\n                    displayAttributes.push(descriptionAttribute.id);\n                }\n                const attributeGroup = this._createAttributeGroupForParentChildAttributes(\n                    attribute,\n                    descriptionAttribute,\n                    \"____Description\",\n                    template,\n                    displayAttributes\n                );\n\n                attributeGroup._private.isDescription = true;\n                attributeGroup._private.textArrangement = textArrangement;\n\n                if (attribute._private.isUnitOfMeasure || descriptionAttribute._private.isUnitOfMeasure) {\n                    attributeGroup._private.isUnitOfMeasure = true;\n                }\n\n                if (attribute._private.isCurrency || descriptionAttribute._private.isCurrency) {\n                    attributeGroup._private.isCurrency = true;\n                }\n            }\n        }\n    }\n\n    _deriveTextArrangementFromCdsAnnotation(cdsTextArrangement): AttributeGroupTextArrangement {\n        if (cdsTextArrangement) {\n            switch (cdsTextArrangement.toUpperCase()) {\n                case \"TEXT_FIRST\":\n                    return AttributeGroupTextArrangement.TextFirst;\n                case \"TEXT_LAST\":\n                    return AttributeGroupTextArrangement.TextLast;\n                case \"TEXT_ONLY\":\n                case \"#TEXT_ONLY\":\n                    return AttributeGroupTextArrangement.TextOnly;\n                case \"TEXT_SEPARATE\":\n                    return AttributeGroupTextArrangement.TextSeparate;\n            }\n        }\n        return undefined;\n    }\n\n    _createAttributeGroupForParentChildAttributes(\n        parentAttribute,\n        childAttribute,\n        qualifierSuffix,\n        template,\n        displayAttributes?\n    ) {\n        const qualifier = parentAttribute.id + qualifierSuffix;\n        const attributesMap = {};\n        attributesMap[parentAttribute.id] = parentAttribute;\n        attributesMap[childAttribute.id] = childAttribute;\n\n        const attributeGroup: AttributeGroupMetadata = this._createAttributeGroup(\n            qualifier,\n            parentAttribute.label,\n            template,\n            attributesMap,\n            displayAttributes\n        );\n\n        const obsoleteUsageStub = this._getDetailUsageStub(parentAttribute);\n        if (obsoleteUsageStub) {\n            obsoleteUsageStub.obsolete = true;\n            this._addDetailUsageStub(attributeGroup, obsoleteUsageStub.displayOrder, obsoleteUsageStub.prio);\n        }\n\n        this._replaceAttributeWithGroup(parentAttribute, attributeGroup);\n\n        attributeGroup._private.parentAttribute = parentAttribute;\n        attributeGroup._private.childAttribute = childAttribute;\n\n        if (childAttribute._private && childAttribute._private.isCurrency) {\n            attributeGroup._private.isCurrency = true;\n        }\n        if (childAttribute._private && childAttribute._private.isUnitOfMeasure) {\n            attributeGroup._private.isUnitOfMeasure = true;\n        }\n\n        return attributeGroup;\n    }\n\n    _replaceAttributeWithGroup(attribute, attributeGroupReplacement) {\n        this._setParsedAttribute(attribute.id, attributeGroupReplacement);\n        for (let i = 0; i < attribute.groups.length; i++) {\n            const groupMembership = attribute.groups[i];\n            if (groupMembership.group != attributeGroupReplacement) {\n                groupMembership.attribute = attributeGroupReplacement;\n            }\n        }\n    }\n\n    _sortAttributes() {\n        const sortFunction = function (entry1, entry2) {\n            if (entry1.displayOrder < entry2.displayOrder) {\n                return -1;\n            } else if (entry1.displayOrder > entry2.displayOrder) {\n                return 1;\n            }\n            return 0;\n        };\n\n        let i, allEntries;\n\n        if (this._detailUsageStubsPrioHigh.length > 0 || this._detailUsageStubsPrioMedium.length > 0) {\n            this._detailUsageStubsPrioHigh.sort(sortFunction);\n            this._detailUsageStubsPrioMedium.sort(sortFunction);\n\n            const _allEntries = this._detailUsageStubsPrioHigh.concat(this._detailUsageStubsPrioMedium);\n            for (i = 0; i < _allEntries.length; i++) {\n                if (!_allEntries[i].obsolete) {\n                    allEntries = _allEntries;\n                    break;\n                }\n            }\n        }\n\n        if (!allEntries) {\n            allEntries = this._detailUsageStubsPrioNone.sort(sortFunction);\n        }\n\n        for (i = 0; i < allEntries.length; i++) {\n            const entry = allEntries[i];\n            if (!entry.obsolete && entry.attribute && typeof entry.attribute !== \"string\") {\n                entry.attribute.usage = entry.attribute.usage || {};\n                entry.attribute.usage.Detail = {\n                    displayOrder: i,\n                };\n            }\n        }\n\n        this._parsingResult.detailAttributesAreSorted = true;\n    }\n\n    _parseSingleAnnotationOrArray(attribute, annotation, parseFunction) {\n        if (annotation !== undefined) {\n            if (Array.isArray(annotation)) {\n                for (let j = 0; j < annotation.length; j++) {\n                    parseFunction.apply(this, [attribute, annotation[j]]);\n                }\n            } else {\n                parseFunction.apply(this, [attribute, annotation]);\n            }\n        }\n    }\n\n    _parsePosition(position) {\n        if (typeof position === \"string\") {\n            try {\n                position = parseInt(position, 10);\n            } catch (e) {\n                this.log.warn(\"Could not parse position as integer: \" + position + \" (\" + e + \")\");\n                position = Number.MAX_VALUE;\n            }\n        }\n        if (typeof position !== \"number\" || isNaN(position)) {\n            position = Number.MAX_VALUE; // or use Number.POSITIVE_INFINITY ?\n        }\n\n        return position;\n    }\n\n    // get a property from an object, even if the property names differ regarding case-sensitivity\n    _getPropertyFromObject(object, propertyName) {\n        if (object[propertyName]) {\n            return object[propertyName];\n        }\n        propertyName = propertyName.toLowerCase();\n        for (const key in object) {\n            if (key.toLowerCase() === propertyName) {\n                return object[key];\n            }\n        }\n        return undefined;\n    }\n}\n"],"mappings":"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","ignoreList":[]}