{"version":3,"file":"MetadataParserJson.js","names":["sap","ui","define","____core_errors","____sina_DataSourceType","___MetadataParser","ServerError","ServerErrorCode","DataSourceType","MetadataParser","MetadataParserJson","constructor","provider","super","fireRequest","client","url","response","getJson","error","code","E101","this","sina","addError","dataJSON","parseResponse","metaJson","allInOneMap","businessObjectMap","Map","businessObjectList","dataSourceMap","dataSourcesList","metaData","data","metadata","entityContainer","length","aEntityContainer","split","schemaNameSpace","entityContainerName","schemaObject","entityContainerObject","helperMap","_parseEntityType","_parseEntityContainer","entityTypeName","entityTypeOrigin","substring","entityType","schema","keys","attributeMap","label","labelPlural","annotations","index","annoOrAttrName","annoOrAttr","startsWith","_parseEntityTypeAnnotations","_parseAttribute","annoName","annoValue","toUpperCase","_setAnnotationValue","icon","attributeName","attributeValue","attribute","labelRaw","type","presentationUsage","isFacet","isSortable","supportsTextSearch","displayOrder","annotationsAttr","unknownAnnotation","annoOrProp","annoOrPropValue","_parseAttributeAnnotations","annotationName","annotationValue","undefined","_normalizeAnnotationValueOfArrayOrObject","isKey","facetPosition","facetIconUrlAttributeName","isFilteringAttribute","push","Array","isArray","i","_normalizeAnnotationValueOfObject","keyName","keyNameUpperCase","_getValueFromArrayWithSingleEntry","aArray","entityObject","entitySet","newDatasource","createDataSource","id","BusinessObject","attributesMetadata","name","dataSource","__exports","__esModule"],"sources":["MetadataParserJson.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport { ServerError, ServerErrorCode } from \"../../core/errors\";\nimport { DataSourceType } from \"../../sina/DataSourceType\";\nimport { ServerMetadataMap, MetadataParser } from \"./MetadataParser\";\n\nexport class MetadataParserJson extends MetadataParser {\n    constructor(provider) {\n        super(provider);\n    }\n\n    async fireRequest(client: Client, url: string) {\n        try {\n            const response = await client.getJson(url);\n            return response;\n        } catch (error) {\n            if (error instanceof ServerError && error.code === ServerErrorCode.E101) {\n                this.provider.sina?.addError(error);\n                return (error as ServerError).response.dataJSON;\n            }\n            throw error;\n        }\n    }\n\n    async parseResponse(metaJson): Promise<ServerMetadataMap> {\n        // all in one metadata map\n        const allInOneMap: ServerMetadataMap = {\n            businessObjectMap: new Map(), // entity map with attributes and entityset name as key\n            businessObjectList: [], // list of all entities for convenience\n            dataSourceMap: new Map(), // datasource map with entityset name as key\n            dataSourcesList: [], // list of all datasources for convenience\n        };\n        const metaData = (metaJson.data && metaJson.data.metadata) || metaJson.data || metaJson;\n        const entityContainer = metaData[\"$EntityContainer\"];\n        if (typeof entityContainer !== \"string\" || entityContainer.length < 1) {\n            throw \"Meta data contains invalid EntityContainer!\";\n        }\n        const aEntityContainer = entityContainer.split(\".\");\n        const schemaNameSpace = aEntityContainer[0];\n        const entityContainerName = aEntityContainer[1];\n\n        const schemaObject = metaData[schemaNameSpace];\n        const entityContainerObject = schemaObject[entityContainerName];\n\n        const helperMap = this._parseEntityType(\n            schemaNameSpace,\n            schemaObject,\n            entityContainerName,\n            entityContainerObject\n        );\n        this._parseEntityContainer(entityContainerObject, helperMap, allInOneMap);\n        return allInOneMap;\n    }\n\n    // parse entityset and its attributes from EntityType\n    _parseEntityType(schemaNameSpace: string, schemaObject, entityContainerName, entityContainerObject) {\n        const helperMap = {};\n\n        for (let entityTypeName in schemaObject) {\n            // skip entityContainerObject\n            if (entityTypeName === entityContainerName) {\n                continue;\n            }\n            const entityTypeOrigin = schemaObject[entityTypeName];\n            if (entityTypeOrigin[\"@EnterpriseSearch.enabled\"] !== true) {\n                continue;\n            }\n            entityTypeName = entityTypeName.substring(0, entityTypeName.length - 4);\n            const entityType = {\n                schema: schemaNameSpace,\n                keys: [],\n                attributeMap: {},\n                label: entityContainerObject[entityTypeName][\"@SAP.Common.Label\"] || \"\",\n                labelPlural: entityContainerObject[entityTypeName][\"@SAP.Common.Label\"] || \"\",\n                annotations: {},\n            };\n            helperMap[entityTypeName] = entityType;\n\n            let index = 0;\n            for (const annoOrAttrName in entityTypeOrigin) {\n                const annoOrAttr = entityTypeOrigin[annoOrAttrName];\n                if (annoOrAttrName === \"$Key\") {\n                    entityType.keys = annoOrAttr;\n                    continue;\n                }\n                if (annoOrAttrName.startsWith(\"@\")) {\n                    this._parseEntityTypeAnnotations(annoOrAttrName, annoOrAttr, entityType);\n                    continue;\n                }\n                this._parseAttribute(annoOrAttrName, annoOrAttr, entityType, index);\n                index++;\n            }\n        }\n\n        return helperMap;\n    }\n\n    private _parseEntityTypeAnnotations(annoName, annoValue, entityType) {\n        annoName = annoName.substring(1).toUpperCase();\n        switch (annoName) {\n            case \"UI.HEADERINFO.TYPENAME\":\n                entityType.label = annoValue;\n                break;\n            case \"UI.HEADERINFO.TYPENAMEPLURAL\":\n                entityType.label = annoValue;\n                break;\n            case \"UI.HEADERINFO.TITLE.TYPE\":\n                this._setAnnotationValue(entityType.annotations, annoName, annoValue);\n                break;\n            case \"UI.HEADERINFO.TITLE.VALUEQUALIFIER\":\n                this._setAnnotationValue(entityType.annotations, annoName, annoValue);\n                break;\n            case \"UI.HEADERINFO.TYPEIMAGEURL\":\n                entityType.icon = annoValue;\n                break;\n            default:\n                this._setAnnotationValue(entityType.annotations, annoName, annoValue);\n        }\n    }\n\n    private _parseAttribute(attributeName, attributeValue, entityType, index) {\n        if (typeof attributeValue !== \"object\") {\n            return;\n        }\n        // schema of supported annotations is required in order to eliminate this any\n        const attribute = {\n            labelRaw: attributeName,\n            label: null,\n            type: \"\",\n            presentationUsage: [],\n            isFacet: false,\n            isSortable: false,\n            supportsTextSearch: false,\n            displayOrder: index,\n            annotationsAttr: {},\n            unknownAnnotation: [],\n        } as any;\n\n        entityType.attributeMap[attributeName] = attribute;\n\n        for (const annoOrProp in attributeValue) {\n            const annoOrPropValue = attributeValue[annoOrProp];\n            if (annoOrProp === \"$Type\" || annoOrProp === \"Type\") {\n                attribute[\"type\"] = annoOrPropValue;\n                continue;\n            }\n            if (annoOrProp.startsWith(\"@\")) {\n                this._parseAttributeAnnotations(annoOrProp, annoOrPropValue, attribute);\n            }\n        }\n    }\n\n    private _parseAttributeAnnotations(annotationName, annotationValue, attribute) {\n        annotationName = annotationName.substring(1).toUpperCase();\n\n        if (annotationValue !== undefined) {\n            this._normalizeAnnotationValueOfArrayOrObject(annotationValue);\n            switch (annotationName) {\n                case \"SAP.COMMON.LABEL\":\n                    if (!attribute.label) {\n                        attribute.label = annotationValue;\n                    }\n                    break;\n                case \"ENTERPRISESEARCH.KEY\":\n                    attribute.isKey = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.PRESENTATIONMODE\":\n                    attribute.presentationUsage = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCHHANA.ISSORTABLE\":\n                    attribute.isSortable = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCHHANA.SUPPORTSTEXTSEARCH\":\n                    attribute.supportsTextSearch = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.FILTERINGFACET.DEFAULT\":\n                    attribute.isFacet = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.FILTERINGFACET.DISPLAYPOSITION\":\n                    attribute.facetPosition = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.FILTERINGFACET.ICONURL\":\n                    attribute.facetIconUrlAttributeName = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.FILTERINGATTRIBUTE.DEFAULT\":\n                    attribute.isFilteringAttribute = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.FILTERINGATTRIBUTE.DISPLAYPOSITION\":\n                    attribute.facetPosition = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.FILTERINGATTRIBUTE.ICONURL\":\n                    attribute.facetIconUrlAttributeName = annotationValue;\n                    break;\n                case \"ENTERPRISESEARCH.DISPLAYORDER\":\n                    attribute.displayOrder = annotationValue;\n                    break;\n                default:\n                    if (\n                        annotationName.startsWith(\"UI\") ||\n                        annotationName.startsWith(\"OBJECTMODEL\") ||\n                        annotationName.startsWith(\"SEMANTICS\")\n                    ) {\n                        this._setAnnotationValue(attribute.annotationsAttr, annotationName, annotationValue);\n                    } else {\n                        attribute.unknownAnnotation.push(annotationName);\n                    }\n            }\n        }\n    }\n\n    private _normalizeAnnotationValueOfArrayOrObject(annotationValue) {\n        if (Array.isArray(annotationValue)) {\n            for (let i = 0; i < annotationValue.length; i++) {\n                this._normalizeAnnotationValueOfObject(annotationValue[i]);\n            }\n        } else this._normalizeAnnotationValueOfObject(annotationValue);\n        // system\n        return annotationValue;\n    }\n\n    private _normalizeAnnotationValueOfObject(annotationValue) {\n        if (typeof annotationValue === \"object\") {\n            for (const keyName in annotationValue) {\n                const keyNameUpperCase = keyName.toUpperCase();\n                annotationValue[keyNameUpperCase] = annotationValue[keyName];\n                delete annotationValue[keyName];\n            }\n        }\n        return annotationValue;\n    }\n\n    private _getValueFromArrayWithSingleEntry(aArray) {\n        if (Array.isArray(aArray) && aArray.length === 1) {\n            return aArray[0];\n        }\n        return aArray;\n    }\n\n    // parse datasources from EntityContainer\n    _parseEntityContainer(entityContainerObject, helperMap, allInOneMap) {\n        for (const entityObject in entityContainerObject) {\n            const entitySet = helperMap[entityObject];\n            if (entityObject === \"$Kind\") {\n                continue;\n            }\n            if (entitySet === undefined) {\n                throw \"EntityType \" + entityObject + \" has no corresponding meta data!\";\n            }\n\n            const newDatasource = this.sina.createDataSource({\n                id: entityObject,\n                label: entitySet.label || entityObject,\n                labelPlural: entitySet.labelPlural || entitySet.label || entityObject,\n                icon: entitySet.icon || \"\",\n                type: DataSourceType.BusinessObject,\n                attributesMetadata: [\n                    {\n                        id: \"dummy\",\n                    },\n                ] as any, // fill with dummy attribute\n            });\n            newDatasource.annotations = entitySet.annotations;\n            allInOneMap.dataSourceMap[newDatasource.id] = newDatasource;\n            allInOneMap.dataSourcesList.push(newDatasource);\n\n            entitySet.name = entityObject;\n            entitySet.dataSource = newDatasource;\n            allInOneMap.businessObjectMap[entityObject] = entitySet;\n            allInOneMap.businessObjectList.push(entitySet);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}