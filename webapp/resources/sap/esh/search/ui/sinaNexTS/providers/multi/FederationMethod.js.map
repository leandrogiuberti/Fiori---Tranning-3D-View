{"version":3,"file":"FederationMethod.js","names":["sap","ui","define","Ranking","sort","resultSetItemList","results","j","length","concat","a","b","ret","score","RoundRobin","sortedResults","i","this","mergeMultiResults","firstResults","secondResults","mergeIndex","firstLength","secondLength","k","push","splice","slice","AdvancedRoundRobin","dataSourceId","dataSourceIdMap","dataSource","id","dataSourceScoreArray","index","key","item","dsIndex","r","selectDs","selectRs","shift","__exports","__esModule"],"sources":["FederationMethod.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SearchResultSetItem } from \"../../sina/SearchResultSetItem\";\n\nexport interface IFederationMethod {\n    sort: (resultSetItemList: Array<SearchResultSetItem>) => Array<SearchResultSetItem>;\n}\n\nexport class Ranking implements IFederationMethod {\n    //sorting method according ranking\n    sort(resultSetItemList) {\n        let results = [];\n        for (let j = 0; j < resultSetItemList.length; j++) {\n            results = results.concat(resultSetItemList[j]);\n        }\n        results.sort(function (a, b) {\n            const ret = b.score - a.score; //high score is first\n            return ret;\n        });\n        return results;\n    }\n}\n\nexport class RoundRobin implements IFederationMethod {\n    //simple round robin method\n    sort(resultSetItemList) {\n        let sortedResults = [];\n        for (let i = 0; i < resultSetItemList.length; i++) {\n            sortedResults = this.mergeMultiResults(sortedResults, resultSetItemList[i], i + 1);\n        }\n        return sortedResults;\n    }\n\n    mergeMultiResults(firstResults, secondResults, mergeIndex) {\n        if (mergeIndex < 1) {\n            return [];\n        }\n        if (mergeIndex === 1) {\n            return secondResults;\n        }\n        const firstLength = firstResults.length;\n        const secondLength = secondResults.length;\n        let results = [];\n        for (let k = 0; k < firstLength; k++) {\n            results.push(firstResults[k]);\n        }\n        for (let i = 0; i < firstLength; i++) {\n            if (i >= secondLength) {\n                break;\n            }\n            results.splice(mergeIndex * (i + 1) - 1, 0, secondResults[i]);\n        }\n        if (secondLength > firstLength) {\n            results = results.concat(secondResults.slice(firstLength - secondLength));\n        }\n        return results;\n    }\n}\n\nexport class AdvancedRoundRobin implements IFederationMethod {\n    //advanced round robin method\n    sort(resultSetItemList) {\n        let results = [];\n        for (let j = 0; j < resultSetItemList.length; j++) {\n            results = results.concat(resultSetItemList[j]);\n        }\n\n        let dataSourceId;\n\n        //result list map, key: dataSourceId, value: array list of resultlist\n        const dataSourceIdMap = {};\n        for (let i = 0; i < results.length; i++) {\n            dataSourceId = results[i].dataSource.id;\n            if (!dataSourceIdMap[dataSourceId]) {\n                dataSourceIdMap[dataSourceId] = [];\n            }\n            dataSourceIdMap[dataSourceId].push(results[i]);\n        }\n\n        //array of objects: dataSouceId, high score, original index\n        const dataSourceScoreArray = [];\n        let index = 0;\n        for (const key in dataSourceIdMap) {\n            const item = dataSourceIdMap[key][0];\n            dataSourceId = item.dataSource.id;\n            const score = item.score;\n            dataSourceScoreArray.push({\n                dataSourceId: dataSourceId,\n                score: score,\n                index: index,\n            });\n            index++;\n        }\n\n        //sort dataSourceScoreArray\n        dataSourceScoreArray.sort(function (a, b) {\n            let ret = b.score - a.score; //high score is first\n            if (ret === 0) {\n                ret = a.index - b.index; //low index is first\n            }\n            return ret;\n        });\n\n        //rebuild the results\n        const sortedResults = [];\n        let dsIndex = 0;\n        for (let r = 0; r < results.length; ) {\n            const selectDs = dataSourceScoreArray[dsIndex];\n            const selectRs = dataSourceIdMap[selectDs.dataSourceId];\n            if (selectRs.length > 0) {\n                sortedResults.push(selectRs.shift());\n                r++;\n            }\n            dsIndex = (dsIndex + 1) % dataSourceScoreArray.length;\n        }\n\n        return sortedResults;\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2BAWO,MAAMC,EAETC,KAAKC,GACD,IAAIC,EAAU,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAkBG,OAAQD,IAAK,CAC/CD,EAAUA,EAAQG,OAAOJ,EAAkBE,GAC/C,CACAD,EAAQF,KAAK,SAAUM,EAAGC,GACtB,MAAMC,EAAMD,EAAEE,MAAQH,EAAEG,MACxB,OAAOD,CACX,GACA,OAAON,CACX,EAGG,MAAMQ,EAETV,KAAKC,GACD,IAAIU,EAAgB,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAkBG,OAAQQ,IAAK,CAC/CD,EAAgBE,KAAKC,kBAAkBH,EAAeV,EAAkBW,GAAIA,EAAI,EACpF,CACA,OAAOD,CACX,CAEAG,kBAAkBC,EAAcC,EAAeC,GAC3C,GAAIA,EAAa,EAAG,CAChB,MAAO,EACX,CACA,GAAIA,IAAe,EAAG,CAClB,OAAOD,CACX,CACA,MAAME,EAAcH,EAAaX,OACjC,MAAMe,EAAeH,EAAcZ,OACnC,IAAIF,EAAU,GACd,IAAK,IAAIkB,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CAClClB,EAAQmB,KAAKN,EAAaK,GAC9B,CACA,IAAK,IAAIR,EAAI,EAAGA,EAAIM,EAAaN,IAAK,CAClC,GAAIA,GAAKO,EAAc,CACnB,KACJ,CACAjB,EAAQoB,OAAOL,GAAcL,EAAI,GAAK,EAAG,EAAGI,EAAcJ,GAC9D,CACA,GAAIO,EAAeD,EAAa,CAC5BhB,EAAUA,EAAQG,OAAOW,EAAcO,MAAML,EAAcC,GAC/D,CACA,OAAOjB,CACX,EAGG,MAAMsB,EAETxB,KAAKC,GACD,IAAIC,EAAU,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAkBG,OAAQD,IAAK,CAC/CD,EAAUA,EAAQG,OAAOJ,EAAkBE,GAC/C,CAEA,IAAIsB,EAGJ,MAAMC,EAAkB,CAAC,EACzB,IAAK,IAAId,EAAI,EAAGA,EAAIV,EAAQE,OAAQQ,IAAK,CACrCa,EAAevB,EAAQU,GAAGe,WAAWC,GACrC,IAAKF,EAAgBD,GAAe,CAChCC,EAAgBD,GAAgB,EACpC,CACAC,EAAgBD,GAAcJ,KAAKnB,EAAQU,GAC/C,CAGA,MAAMiB,EAAuB,GAC7B,IAAIC,EAAQ,EACZ,IAAK,MAAMC,KAAOL,EAAiB,CAC/B,MAAMM,EAAON,EAAgBK,GAAK,GAClCN,EAAeO,EAAKL,WAAWC,GAC/B,MAAMnB,EAAQuB,EAAKvB,MACnBoB,EAAqBR,KAAK,CACtBI,aAAcA,EACdhB,MAAOA,EACPqB,MAAOA,IAEXA,GACJ,CAGAD,EAAqB7B,KAAK,SAAUM,EAAGC,GACnC,IAAIC,EAAMD,EAAEE,MAAQH,EAAEG,MACtB,GAAID,IAAQ,EAAG,CACXA,EAAMF,EAAEwB,MAAQvB,EAAEuB,KACtB,CACA,OAAOtB,CACX,GAGA,MAAMG,EAAgB,GACtB,IAAIsB,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIhC,EAAQE,QAAU,CAClC,MAAM+B,EAAWN,EAAqBI,GACtC,MAAMG,EAAWV,EAAgBS,EAASV,cAC1C,GAAIW,EAAShC,OAAS,EAAG,CACrBO,EAAcU,KAAKe,EAASC,SAC5BH,GACJ,CACAD,GAAWA,EAAU,GAAKJ,EAAqBzB,MACnD,CAEA,OAAOO,CACX,EACH,IAAA2B,EAAA,CAAAC,WAAA,MAAAD,EAAAvC,UAAAuC,EAAA5B,aAAA4B,EAAAd,qBAAA,OAAAc,CAAA","ignoreList":[]}