{"version":3,"file":"Provider.js","names":["sap","ui","define","___AbstractProvider","core","conditionSerializer","dataSourceSerializer","util","lang","ajaxTemplates","labelCalculation","pivotTableParser","suggestionParser","suggestionTermSplitter","___MetadataParser","___ItemParser","___FacetParser","____sina_AttributeType","____core_errors","___ajax","AbstractProvider","MetadataParser","ItemParser","FacetParser","AttributeType","ESHNotActiveError","NotImplementedError","createAjaxClient","Provider","id","urlPrefix","getServerInfoUrl","getResponseUrl","ajaxClient","metadataLoadPromises","internalMetadata","labelCalculator","metadataParser","itemParser","facetParser","sessionId","initAsync","configuration","this","url","sina","getLanguage","undefined","createLabelCalculator","executeSearchQuery","addMetadataLoadDecorator","executeChartQuery","executeSuggestionQuery","generateGuid","loadServerInfo","then","serverInfo","supports","Promise","reject","loadBusinessObjectDataSources","capabilities","_createCapabilities","fuzzy","executeQuery","args","query","dataSource","filter","resolve","loadMetadata","bind","apply","type","DataSourceType","Category","loadPromise","loadDataSourceMetadataRequest","DataSource","ObjectName","addLanguagePreferences","postJson","response","parseMetadataRequestMetadata","data","service","capability","i","Services","length","checkService","Service","j","Capabilities","checkCapability","Capability","getJson","that","loadDataSourcesRequest","Search","NamedValues","push","AttributeName","Name","_processDataSourcesResponse","connector","ServerInfo","SystemId","Client","fallbackLoadDataSourcesRequest","isFallback","parse","dataSourcesData","axes","dataSourceData","label","labelPlural","isObject","Description","Value","DescriptionPlural","$$ResultItemAttributes$$","forEach","elem","_createDataSource","BusinessObject","calculateLabel","getInternalMetadataAttributes","attributesMetadata","attributeId","getInternalMetadataAttribute","getInternalMetadataLoadStatus","loadStatus","fillInternalMetadata","loadStatusType","attributeMetadata","bufferAttributeMetadata","name","addTemplateConditions","rootCondition","addCondition","attribute","operator","ComparisonOperator","Eq","value","assembleOrderBy","result","sortOrder","sortKey","order","SortOrder","Descending","parsedItems","clone","searchRequest","Filter","serialize","SearchTerms","searchTerm","Top","top","Skip","skip","Options","assembleRequestOptions","OrderBy","Expand","addSessionId","calculateFacets","InputResponse","InputParsedItems","parsedFacets","_createSearchResultSet","ExecutionID","title","items","totalCount","facets","chartRequest","Facets","Attributes","dimension","MaxNumberOfReturnValues","_createChartResultSet","getAttributeMetadata","facetTotalCount","executeHierarchyQuery","splittedTerm","split","createSimpleCondition","INAV2_SearchTerms","INAV2_SuggestionTerms","suggestionTerm","suggestionRequest","Suggestions2","assembleSuggestionOptions","_createSuggestionResultSet","suggestions","concatenate","request","SessionID","SessionTimestamp","parseInt","generateTimestamp","LanguagePreferences","getLanguagePreferences","sina2InaConversion","SearchTerm","Data","History","Object","options","suggestionTypes","types","calculationModes","suggestionType","calculationMode","decideValueHelp","conditions","_getAttribute","getConfigurationAsync","_createConfiguration","personalizedSearch","isPersonalizedSearchEditable","getConfigurationRequest","config","PersonalizedSearch","SessionUserActive","PersonalizationPolicy","saveConfigurationAsync","saveConfigurationRequest","SearchConfiguration","resetPersonalizedSearchDataAsync","resetPersonalizedSearchDataRequest","getDebugInfo","__exports","__esModule"],"sources":["Provider.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AbstractProvider } from \"../AbstractProvider\";\nimport * as core from \"../../core/core\";\nimport * as conditionSerializer from \"./conditionSerializer\";\nimport * as dataSourceSerializer from \"./dataSourceSerializer\";\nimport * as util from \"../../core/util\";\nimport * as lang from \"../../core/lang\";\nimport { AjaxClient as Client } from \"../../core/AjaxClient\";\nimport * as ajaxTemplates from \"./ajaxTemplates\";\nimport * as labelCalculation from \"./labelCalculation\";\nimport * as pivotTableParser from \"./pivotTableParser\";\nimport * as suggestionParser from \"./suggestionParser\";\nimport * as suggestionTermSplitter from \"./suggestionTermSplitter\";\nimport { MetadataParser } from \"./MetadataParser\";\nimport { ItemParser } from \"./ItemParser\";\nimport { FacetParser } from \"./FacetParser\";\nimport { LabelCalculator } from \"../../core/LabelCalculator\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { SuggestionQuery } from \"../../sina/SuggestionQuery\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { SuggestionResultSet } from \"../../sina/SuggestionResultSet\";\nimport { ESHNotActiveError, NotImplementedError } from \"../../core/errors\";\nimport { HierarchyResultSet } from \"../../sina/HierarchyResultSet\";\nimport { HierarchyQuery } from \"../../sina/HierarchyQuery\";\nimport { Configuration } from \"../../sina/Configuration\";\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport { ChartQuery } from \"../../sina/ChartQuery\";\nimport { Query } from \"../../sina/Query\";\nimport { SearchResultSet } from \"../../sina/SearchResultSet\";\nimport { createAjaxClient } from \"./ajax\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\n\nexport interface ServerInfo {\n    Services: Array<{ Service: unknown; Capabilities: Array<{ Capability: string }> }>;\n    ServerInfo: { SystemId: string; Client: string };\n}\n\n/*interface Request {\n    LanguagePreferences?: Array<lang.LanguagePreference>;\n    SessionID?: string;\n    SessionTimestamp?: number;\n}*/\n\ninterface InternalAttributeMetadata {\n    correspondingSearchAttributeName?: string;\n    Name?: string;\n    presentationUsage?: Array<string>;\n    IsTitle?: boolean;\n}\nexport interface LoadStatus {\n    metadataRequest?: boolean;\n    searchRequest?: boolean;\n}\ninterface InternalDataSourceMetadata {\n    loadStatus: LoadStatus;\n    data: Record<string, InternalAttributeMetadata>;\n}\nexport class Provider extends AbstractProvider {\n    readonly id = \"inav2\";\n    declare serverInfo: ServerInfo;\n    urlPrefix: string;\n    getServerInfoUrl: string;\n    getResponseUrl: string;\n    ajaxClient: Client;\n    metadataLoadPromises: Record<string, Promise<void>>;\n    internalMetadata: Record<string, InternalDataSourceMetadata>;\n    labelCalculator: LabelCalculator;\n    metadataParser: MetadataParser;\n    itemParser: ItemParser;\n    facetParser: FacetParser;\n    sessionId: string;\n\n    initAsync(configuration) {\n        this.urlPrefix = configuration.url || \"/sap/es/ina\";\n        this.getServerInfoUrl = this.urlPrefix + \"/GetServerInfo\";\n        this.getResponseUrl = this.urlPrefix + \"/GetResponse\";\n        this.sina = configuration.sina;\n        this.ajaxClient =\n            configuration.ajaxClient ??\n            createAjaxClient({\n                getLanguage:\n                    typeof configuration.getLanguage === \"function\" ? configuration.getLanguage : undefined,\n            });\n        this.metadataLoadPromises = {};\n        this.internalMetadata = {};\n        this.labelCalculator = labelCalculation.createLabelCalculator();\n        this.metadataParser = new MetadataParser(this);\n        this.itemParser = new ItemParser(this);\n        this.facetParser = new FacetParser(this);\n        this.executeSearchQuery = this.addMetadataLoadDecorator(this.executeSearchQuery);\n        this.executeChartQuery = this.addMetadataLoadDecorator(this.executeChartQuery);\n        this.executeSuggestionQuery = this.addMetadataLoadDecorator(this.executeSuggestionQuery);\n        this.sessionId = core.generateGuid();\n        return this.loadServerInfo()\n            .then((serverInfo) => {\n                this.serverInfo = serverInfo;\n                if (!this.supports(\"Search\")) {\n                    return Promise.reject(new ESHNotActiveError());\n                }\n                return this.loadBusinessObjectDataSources();\n            })\n            .then(() => {\n                return {\n                    capabilities: this.sina._createCapabilities({\n                        fuzzy: this.supports(\"Search\", \"OptionFuzzy\"),\n                    }),\n                };\n            });\n    }\n\n    addMetadataLoadDecorator(executeQuery) {\n        return function (...args) {\n            const query = args[0];\n            const dataSource = query.filter.dataSource;\n            return Promise.resolve()\n                .then(\n                    function () {\n                        // 1) load metadata\n                        return this.loadMetadata(dataSource);\n                    }.bind(this)\n                )\n                .then(\n                    function () {\n                        // 2) execute query\n                        return executeQuery.apply(this, args);\n                    }.bind(this)\n                );\n        }.bind(this);\n    }\n\n    loadMetadata(dataSource): Promise<void> {\n        // categories have no metadata\n        if (dataSource.type === this.sina.DataSourceType.Category) {\n            return Promise.resolve();\n        }\n\n        // check cache\n        let loadPromise = this.metadataLoadPromises[dataSource.id];\n        if (loadPromise) {\n            return loadPromise;\n        }\n\n        // fire request\n        ajaxTemplates.loadDataSourceMetadataRequest.DataSource.ObjectName = dataSource.id;\n        this.addLanguagePreferences(ajaxTemplates.loadDataSourceMetadataRequest);\n        loadPromise = this.ajaxClient\n            .postJson(this.getResponseUrl, ajaxTemplates.loadDataSourceMetadataRequest)\n            .then(\n                function (response) {\n                    this.metadataParser.parseMetadataRequestMetadata(dataSource, response.data);\n                }.bind(this)\n            );\n        this.metadataLoadPromises[dataSource.id] = loadPromise;\n        return loadPromise;\n    }\n\n    supports(service: string, capability?: string): boolean {\n        for (let i = 0; i < this.serverInfo.Services.length; ++i) {\n            const checkService = this.serverInfo.Services[i];\n            if (checkService.Service == service) {\n                if (!capability) {\n                    return true;\n                }\n                for (let j = 0; j < checkService.Capabilities.length; ++j) {\n                    const checkCapability = checkService.Capabilities[j];\n                    if (checkCapability.Capability === capability) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    loadServerInfo(): Promise<ServerInfo> {\n        return this.ajaxClient.getJson(this.getServerInfoUrl).then(function (response) {\n            return response.data;\n        }) as Promise<ServerInfo>;\n    }\n\n    loadBusinessObjectDataSources(): Promise<void> {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        that.addLanguagePreferences(ajaxTemplates.loadDataSourcesRequest);\n\n        // description plural in capability -> add description plural property in request\n        if (that.supports(\"Search\", \"PluralDescriptionForDataSource\")) {\n            ajaxTemplates.loadDataSourcesRequest.Search.NamedValues.push({\n                AttributeName: \"DescriptionPlural\",\n                Name: \"DescriptionPlural\",\n            });\n        }\n\n        return that.ajaxClient.postJson(that.getResponseUrl, ajaxTemplates.loadDataSourcesRequest).then(\n            function (response) {\n                that._processDataSourcesResponse(response, false);\n            },\n            function () {\n                const connector =\n                    that.serverInfo.ServerInfo.SystemId +\n                    that.serverInfo.ServerInfo.Client +\n                    \"~ESH_CONNECTOR~\";\n                ajaxTemplates.fallbackLoadDataSourcesRequest.DataSource.ObjectName = connector;\n                return that.ajaxClient\n                    .postJson(that.getResponseUrl, ajaxTemplates.fallbackLoadDataSourcesRequest)\n                    .then(function (response) {\n                        that._processDataSourcesResponse(response, true);\n                    });\n            }\n        );\n    }\n\n    _processDataSourcesResponse(response, isFallback: boolean) {\n        const data = pivotTableParser.parse(response.data);\n        const dataSourcesData = data.axes[0];\n        for (let i = 0; i < dataSourcesData.length; ++i) {\n            const dataSourceData = dataSourcesData[i];\n            let label = \"\";\n            let labelPlural = \"\";\n            let id = \"\";\n\n            if (!isFallback) {\n                if (core.isObject(dataSourceData.Description)) {\n                    label = dataSourceData.Description.Value;\n                } else {\n                    label = dataSourceData.Description;\n                }\n                if (core.isObject(dataSourceData.DescriptionPlural)) {\n                    labelPlural = dataSourceData.DescriptionPlural.Value;\n                } else {\n                    labelPlural = dataSourceData.DescriptionPlural;\n                }\n                if (core.isObject(dataSourceData.ObjectName)) {\n                    id = dataSourceData.ObjectName.Value;\n                } else {\n                    id = dataSourceData.ObjectName;\n                }\n            } else {\n                // fallback\n                dataSourceData.$$ResultItemAttributes$$.forEach(function (elem) {\n                    if (elem.Name === \"DESCRIPTION\") {\n                        label = elem.Value;\n                    }\n                    if (elem.Name === \"DESCRIPTION_PLURAL\") {\n                        labelPlural = elem.Value;\n                    }\n                    if (elem.Name === \"OBJECT_NAME\") {\n                        id = elem.Value;\n                    }\n                });\n            }\n\n            if (!label) {\n                label = id;\n            }\n            if (!labelPlural) {\n                labelPlural = label;\n            }\n\n            const dataSource = this.sina._createDataSource({\n                id: id,\n                label: label,\n                labelPlural: labelPlural,\n                type: this.sina.DataSourceType.BusinessObject,\n            });\n\n            this.labelCalculator.calculateLabel(dataSource);\n        }\n    }\n\n    getInternalMetadataAttributes(dataSource) {\n        const attributesMetadata = [];\n        const internalMetadata = this.internalMetadata[dataSource.id];\n        if (!internalMetadata) {\n            return attributesMetadata;\n        }\n        for (const attributeId in internalMetadata.data) {\n            attributesMetadata.push(internalMetadata.data[attributeId]);\n        }\n        return attributesMetadata;\n    }\n\n    getInternalMetadataAttribute(dataSource, attributeId: string) {\n        return this.internalMetadata[dataSource.id].data[attributeId];\n    }\n\n    getInternalMetadataLoadStatus(dataSource): LoadStatus {\n        const internalMetadata = this.internalMetadata[dataSource.id];\n        if (!internalMetadata) {\n            return {};\n        }\n        return internalMetadata.loadStatus;\n    }\n\n    fillInternalMetadata(dataSource, loadStatusType, attributesMetadata) {\n        let internalMetadata = this.internalMetadata[dataSource.id];\n        if (!internalMetadata) {\n            internalMetadata = {\n                loadStatus: {},\n                data: {},\n            };\n            this.internalMetadata[dataSource.id] = internalMetadata;\n        }\n        for (let i = 0; i < attributesMetadata.length; ++i) {\n            const attributeMetadata = attributesMetadata[i];\n            let bufferAttributeMetadata = internalMetadata.data[attributeMetadata.Name];\n            if (!bufferAttributeMetadata) {\n                bufferAttributeMetadata = {};\n                internalMetadata.data[attributeMetadata.Name] = bufferAttributeMetadata;\n            }\n            for (const name in attributeMetadata) {\n                bufferAttributeMetadata[name] = attributeMetadata[name];\n            }\n        }\n        internalMetadata.loadStatus[loadStatusType] = true;\n    }\n\n    addTemplateConditions(rootCondition) {\n        // ToDo, both types Complex/ConditionCondition lead to syntax errors\n        rootCondition.addCondition({\n            attribute: \"$$RenderingTemplatePlatform$$\",\n            operator: this.sina.ComparisonOperator.Eq,\n            value: \"html\",\n        });\n        rootCondition.addCondition({\n            attribute: \"$$RenderingTemplateTechnology$$\",\n            operator: this.sina.ComparisonOperator.Eq,\n            value: \"Tempo\",\n        });\n        rootCondition.addCondition({\n            attribute: \"$$RenderingTemplateType$$\",\n            operator: this.sina.ComparisonOperator.Eq,\n            value: \"ResultItem\",\n        });\n        rootCondition.addCondition({\n            attribute: \"$$RenderingTemplateType$$\",\n            operator: this.sina.ComparisonOperator.Eq,\n            value: \"ItemDetails\",\n        });\n    }\n\n    assembleOrderBy(query: SearchQuery): Array<{\n        AttributeName: string;\n        SortOrder: \"DESC\" | \"ASC\";\n    }> {\n        const result = [];\n        for (let i = 0; i < query.sortOrder.length; ++i) {\n            const sortKey = query.sortOrder[i];\n            const sortOrder = sortKey.order === this.sina.SortOrder.Descending ? \"DESC\" : \"ASC\";\n            result.push({\n                AttributeName: sortKey.id,\n                SortOrder: sortOrder,\n            });\n        }\n        return result;\n    }\n\n    executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        let parsedItems, response;\n\n        // assemble json request\n        const rootCondition: ComplexCondition = query.filter.rootCondition.clone() as ComplexCondition;\n        this.addTemplateConditions(rootCondition);\n        ajaxTemplates.searchRequest.Search.Filter = conditionSerializer.serialize(\n            query.filter.dataSource,\n            rootCondition\n        );\n        ajaxTemplates.searchRequest.DataSource = dataSourceSerializer.serialize(query.filter.dataSource);\n        ajaxTemplates.searchRequest.Search.SearchTerms = query.filter.searchTerm;\n        ajaxTemplates.searchRequest.Search.Top = query.top;\n        ajaxTemplates.searchRequest.Search.Skip = query.skip;\n        ajaxTemplates.searchRequest.Options = this.assembleRequestOptions(query);\n        ajaxTemplates.searchRequest.Search.OrderBy = this.assembleOrderBy(query);\n        ajaxTemplates.searchRequest.Search.Expand = [\"Grid\", \"Items\", \"TotalCount\"];\n        this.addLanguagePreferences(ajaxTemplates.searchRequest);\n        this.addSessionId(ajaxTemplates.searchRequest);\n        if (query.calculateFacets) {\n            ajaxTemplates.searchRequest.Search.Expand.push(\"ResultsetFacets\");\n        }\n\n        // fire request\n        return this.ajaxClient\n            .postJson(this.getResponseUrl, ajaxTemplates.searchRequest)\n            .then(\n                function (InputResponse) {\n                    response = InputResponse;\n                    return this.itemParser.parse(query, response.data);\n                }.bind(this)\n            )\n            .then(\n                function (InputParsedItems) {\n                    parsedItems = InputParsedItems;\n                    return this.facetParser.parse(query, response.data);\n                }.bind(this)\n            )\n            .then(\n                function (parsedFacets) {\n                    return this.sina._createSearchResultSet({\n                        id: response.data.ExecutionID,\n                        title: \"Search Result List\",\n                        query: query,\n                        items: parsedItems.items,\n                        totalCount: parsedItems.totalCount,\n                        facets: parsedFacets,\n                    });\n                }.bind(this)\n            );\n    }\n\n    executeChartQuery(query: ChartQuery): Promise<ChartResultSet> {\n        // assemble json request\n        const rootCondition = query.filter.rootCondition.clone();\n        this.addTemplateConditions(rootCondition);\n        ajaxTemplates.chartRequest.Search.Filter = conditionSerializer.serialize(\n            query.filter.dataSource,\n            rootCondition\n        );\n        ajaxTemplates.chartRequest.DataSource = dataSourceSerializer.serialize(query.filter.dataSource);\n        ajaxTemplates.chartRequest.Search.SearchTerms = query.filter.searchTerm;\n        ajaxTemplates.chartRequest.Search.Top = 1;\n        ajaxTemplates.chartRequest.Search.Skip = 0;\n        ajaxTemplates.chartRequest.Facets.Attributes = [query.dimension];\n        ajaxTemplates.chartRequest.Facets.MaxNumberOfReturnValues = query.top;\n        ajaxTemplates.chartRequest.Options = this.assembleRequestOptions(query);\n        this.addLanguagePreferences(ajaxTemplates.chartRequest);\n        this.addSessionId(ajaxTemplates.chartRequest);\n\n        // fire request\n        return this.ajaxClient\n            .postJson(this.getResponseUrl, ajaxTemplates.chartRequest)\n            .then(\n                function (response) {\n                    return this.facetParser.parse(query, response.data);\n                }.bind(this)\n            )\n            .then(\n                function (facets) {\n                    if (facets.length > 0) {\n                        return facets[0];\n                    }\n                    return this.sina._createChartResultSet({\n                        title: (\n                            query.filter.dataSource.getAttributeMetadata(query.dimension) as AttributeMetadata\n                        ).label,\n                        items: [],\n                        query: query,\n                        facetTotalCount: undefined,\n                    });\n                }.bind(this)\n            );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    executeHierarchyQuery(query: HierarchyQuery): Promise<HierarchyResultSet> {\n        throw new NotImplementedError();\n    }\n\n    async executeSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        // split search term in query into (1) searchTerm (2) suggestionTerm\n        const searchTerm = query.filter.searchTerm;\n        const splittedTerm = suggestionTermSplitter.split(this, searchTerm);\n\n        // add search term to condition\n        const rootCondition = query.filter.rootCondition.clone();\n        if (splittedTerm.searchTerm) {\n            (rootCondition as ComplexCondition).addCondition(\n                query.sina.createSimpleCondition({\n                    attribute: AttributeType.INAV2_SearchTerms,\n                    value: splittedTerm.searchTerm,\n                })\n            );\n        }\n\n        // add suggestion term to condition\n        (rootCondition as ComplexCondition).addCondition(\n            query.sina.createSimpleCondition({\n                attribute: AttributeType.INAV2_SuggestionTerms,\n                value: splittedTerm.suggestionTerm,\n            })\n        );\n\n        // assemble request\n        ajaxTemplates.suggestionRequest.Suggestions2.Filter = conditionSerializer.serialize(\n            query.filter.dataSource,\n            rootCondition\n        );\n        ajaxTemplates.suggestionRequest.DataSource = dataSourceSerializer.serialize(query.filter.dataSource);\n        ajaxTemplates.suggestionRequest.Options = this.assembleSuggestionOptions(query);\n        if (ajaxTemplates.suggestionRequest.Options.length === 0) {\n            return this.sina._createSuggestionResultSet({\n                title: \"Suggestions\",\n                query: query,\n                items: [],\n            });\n        }\n        ajaxTemplates.suggestionRequest.Suggestions2.Top = query.top;\n        ajaxTemplates.suggestionRequest.Suggestions2.Skip = query.skip;\n        this.addLanguagePreferences(ajaxTemplates.suggestionRequest);\n        this.addSessionId(ajaxTemplates.suggestionRequest);\n\n        // fire request\n        return this.ajaxClient.postJson(this.getResponseUrl, ajaxTemplates.suggestionRequest).then(\n            function (response) {\n                const suggestions = suggestionParser.parse(this, query, response.data);\n                suggestionTermSplitter.concatenate(this, splittedTerm, suggestions);\n                return this.sina._createSuggestionResultSet({\n                    title: \"Suggestions\",\n                    query: query,\n                    items: suggestions,\n                });\n            }.bind(this)\n        );\n    }\n\n    addSessionId(request): void {\n        if (!this.supports(\"Search\", \"SessionHandling\")) {\n            delete request.SessionID;\n            delete request.SessionTimestamp;\n            return;\n        }\n        request.SessionID = this.sessionId;\n        request.SessionTimestamp = parseInt(util.generateTimestamp(), 10);\n    }\n\n    addLanguagePreferences(request): void {\n        if (!this.supports(\"Search\", \"LanguagePreferences\")) {\n            delete request.LanguagePreferences;\n            return;\n        }\n        request.LanguagePreferences = lang.getLanguagePreferences();\n    }\n\n    assembleSuggestionOptions(query: SuggestionQuery): Array<string> {\n        // conversion table\n        const sina2InaConversion = {\n            SearchTerm: {\n                Data: \"SuggestObjectData\",\n                History: \"SuggestSearchHistory\",\n            },\n            Object: {},\n            DataSource: {\n                Data: \"SuggestDataSources\",\n            },\n        };\n        // based on capabilities -> remove from conversion table\n        if (!this.supports(\"Suggestions2\", \"ScopeTypes\")) {\n            delete sina2InaConversion.SearchTerm.History;\n            delete sina2InaConversion.DataSource.Data;\n        }\n        // apply conversion table\n        const options = [];\n        const suggestionTypes = query.types;\n        const calculationModes = query.calculationModes;\n        for (let i = 0; i < suggestionTypes.length; i++) {\n            const suggestionType = suggestionTypes[i];\n            for (let j = 0; j < calculationModes.length; j++) {\n                const calculationMode = calculationModes[j];\n                const value = sina2InaConversion[suggestionType][calculationMode];\n                if (!value) {\n                    continue;\n                }\n                options.push(value);\n            }\n        }\n        return options; //['SuggestObjectData'];\n    }\n\n    assembleRequestOptions(query: Query): Array<string> {\n        const Options = [\"SynchronousRun\"];\n\n        if (this.decideValueHelp(query)) {\n            Options.push(\"ValueHelpMode\");\n        }\n        return Options;\n    }\n\n    decideValueHelp(query: Query): boolean {\n        const conditions = (query.filter.rootCondition as ComplexCondition).conditions;\n        for (let i = 0; i < conditions.length; i++) {\n            if (query.filter._getAttribute(conditions[i]) === query[\"dimension\"]) {\n                // ToDo\n                return true;\n            }\n        }\n        return false;\n    }\n\n    async getConfigurationAsync(): Promise<Configuration> {\n        if (!this.supports(\"PersonalizedSearch\", \"SetUserStatus\")) {\n            return Promise.resolve(\n                this.sina._createConfiguration({\n                    personalizedSearch: false,\n                    isPersonalizedSearchEditable: false,\n                })\n            );\n        }\n\n        return this.ajaxClient.postJson(this.getResponseUrl, ajaxTemplates.getConfigurationRequest).then(\n            function (response) {\n                const config = {\n                    personalizedSearch: false,\n                    isPersonalizedSearchEditable: false,\n                };\n                config.personalizedSearch = response.data.Data.PersonalizedSearch.SessionUserActive;\n                switch (response.data.Data.PersonalizedSearch.PersonalizationPolicy) {\n                    case \"Opt-In\":\n                        config.isPersonalizedSearchEditable = true;\n                        break;\n                    case \"Opt-Out\":\n                        config.isPersonalizedSearchEditable = true;\n                        break;\n                    case \"Enforced\":\n                        config.isPersonalizedSearchEditable = false;\n                        break;\n                    case \"Disabled\":\n                        config.isPersonalizedSearchEditable = false;\n                        break;\n                }\n                return this.sina._createConfiguration(config);\n            }.bind(this)\n        );\n    }\n\n    async saveConfigurationAsync(configuration: Configuration): Promise<unknown> {\n        if (!this.supports(\"PersonalizedSearch\", \"SetUserStatus\")) {\n            return Promise.resolve();\n        }\n        ajaxTemplates.saveConfigurationRequest.SearchConfiguration.Data.PersonalizedSearch.SessionUserActive =\n            configuration.personalizedSearch;\n        return this.ajaxClient.postJson(this.getResponseUrl, ajaxTemplates.saveConfigurationRequest);\n    }\n\n    async resetPersonalizedSearchDataAsync(): Promise<void> {\n        if (!this.supports(\"PersonalizedSearch\", \"ResetUserData\")) {\n            return;\n        }\n        await this.ajaxClient.postJson(this.getResponseUrl, ajaxTemplates.resetPersonalizedSearchDataRequest);\n    }\n\n    getDebugInfo(): string {\n        return `Searchsystem: ${this.serverInfo.ServerInfo.SystemId} Client: ${this.serverInfo.ServerInfo.Client} ESH API Provider: ${this.id}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]}