{"version":3,"file":"MetadataParser.js","names":["sap","ui","define","____core_errors","____sina_AttributeFormatType","____sina_AttributeType","____sina_MatchingStrategy","UnknownDataTypeError","UnknownPresentationUsageError","AttributeFormatType","AttributeType","MatchingStrategy","MetadataParser","provider","sina","constructor","this","normalizeAttributeMetadata","attributeMetadata","IsKey","isKey","parseRequestAttributes","dataSource","data","dimensions","Cube","Dimensions","filteredAttributes","i","length","dimension","Name","slice","attribute","Attributes","push","fillInternalMetadata","parseResponseAttributes","attributes","parseMetadataRequestMetadata","metadataLoadStatus","getInternalMetadataLoadStatus","metadataRequest","fillPublicMetadataBuffer","parseSearchRequestMetadata","itemData","getDataSource","$$DataSourceMetaData$$","ObjectName","searchRequest","$$AttributeMetadata$$","calculateAttributeDisplayOrder","attributesMetadata","attributeMetadataMap","getInternalMetadataAttributes","attributeTypeAndFormat","_parseAttributeTypeAndFormat","publicAttributeMetadata","_createAttributeMetadata","type","format","id","label","Description","isSortable","_parseIsSortable","matchingStrategy","_parseMatchingStrategy","usage","_parseUsage","_configure","attributeId","titleAttributes","detailAttributesPrio1","detailAttributesPrio2","detailAttributes","j","$$ResultItemAttributes$$","attributeData","attributeInternalMetadata","getInternalMetadataAttribute","presentationUsage","indexOf","IsTitle","getAttributeMetadata","Title","displayOrder","Detail","IsSortable","hasFulltextIndex","Text","Exact","accessUsage","Facet","AdvancedSearch","ImageUrl","String","LongText","DataType","Integer","Double","Date","Time","Timestamp","GeoJson","__exports","__esModule"],"sources":["MetadataParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { UnknownDataTypeError, UnknownPresentationUsageError } from \"../../core/errors\";\nimport { AttributeFormatType } from \"../../sina/AttributeFormatType\";\nimport { AttributeType } from \"../../sina/AttributeType\";\nimport { AttributeUsageType } from \"../../sina/AttributeUsageType\";\nimport { DataSource } from \"../../sina/DataSource\";\nimport { MatchingStrategy } from \"../../sina/MatchingStrategy\";\nimport { Sina } from \"../../sina/Sina\";\nimport { Provider } from \"./Provider\";\n\nexport class MetadataParser {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    normalizeAttributeMetadata(attributeMetadata) {\n        attributeMetadata.IsKey = attributeMetadata.isKey; // normalize, probably a typo in abap ina\n    }\n\n    parseRequestAttributes(dataSource, data) {\n        const dimensions = data.Cube.Dimensions;\n        const filteredAttributes = [];\n        for (let i = 0; i < dimensions.length; ++i) {\n            const dimension = dimensions[i];\n            if (dimension.Name.slice(0, 2) === \"$$\") {\n                continue;\n            }\n            const attribute = dimension.Attributes[0];\n            this.normalizeAttributeMetadata(attribute);\n            filteredAttributes.push(attribute);\n        }\n        this.provider.fillInternalMetadata(dataSource, \"metadataRequest\", filteredAttributes);\n    }\n\n    parseResponseAttributes(dataSource, data) {\n        const filteredAttributes = [];\n        const attributes = data.Cube.Dimensions[0].Attributes;\n        for (let i = 0; i < attributes.length; ++i) {\n            const attribute = attributes[i];\n            if (attribute.Name.slice(0, 2) === \"$$\") {\n                continue;\n            }\n            this.normalizeAttributeMetadata(attribute);\n            filteredAttributes.push(attribute);\n        }\n        this.provider.fillInternalMetadata(dataSource, \"metadataRequest\", filteredAttributes);\n    }\n\n    parseMetadataRequestMetadata(dataSource, data) {\n        // parse metadata loaded via explicitely metadata request\n        // (this metadata includes hasFulltextIndex information but not the display order information)\n\n        // check whether buffer already filled\n        const metadataLoadStatus = this.provider.getInternalMetadataLoadStatus(dataSource);\n        if (metadataLoadStatus.metadataRequest) {\n            return;\n        }\n        // parse attribute metadata\n        this.parseRequestAttributes(dataSource, data);\n        this.parseResponseAttributes(dataSource, data);\n        // fill public metadata from internal metadata\n        this.fillPublicMetadataBuffer(dataSource);\n    }\n\n    parseSearchRequestMetadata(itemData) {\n        // parse metadata loaded implicitly by search request\n        // (this metadata includes the display order information but not the hasFulltextIndex information)\n\n        // get data source from data\n        const dataSource = this.sina.getDataSource(itemData.$$DataSourceMetaData$$[0].ObjectName);\n        // check whether buffer already filled\n        const metadataLoadStatus = this.provider.getInternalMetadataLoadStatus(dataSource);\n        if (metadataLoadStatus.searchRequest) {\n            return;\n        }\n        // fill internal metadata buffer\n        this.provider.fillInternalMetadata(dataSource, \"searchRequest\", itemData.$$AttributeMetadata$$);\n        // fill public metadata from internal metadata\n        this.fillPublicMetadataBuffer(dataSource);\n        // calculate attribute display sequence from sequence in result item\n        this.calculateAttributeDisplayOrder(dataSource, itemData);\n    }\n\n    fillPublicMetadataBuffer(dataSource: DataSource) {\n        // clear old public metadata\n        dataSource.attributesMetadata = [];\n        dataSource.attributeMetadataMap = {};\n        // create new public metadata\n        const attributesMetadata = this.provider.getInternalMetadataAttributes(dataSource);\n        for (let i = 0; i < attributesMetadata.length; ++i) {\n            const attributeMetadata = attributesMetadata[i];\n            const attributeTypeAndFormat = this._parseAttributeTypeAndFormat(attributeMetadata);\n            const publicAttributeMetadata = this.sina._createAttributeMetadata({\n                type: attributeTypeAndFormat.type,\n                format: attributeTypeAndFormat.format,\n                id: attributeMetadata.Name,\n                label: attributeMetadata.Description,\n                isSortable: this._parseIsSortable(attributeMetadata),\n                isKey: attributeMetadata.IsKey,\n                matchingStrategy: this._parseMatchingStrategy(attributeMetadata),\n                usage: this._parseUsage(attributeMetadata),\n            });\n            dataSource.attributesMetadata.push(publicAttributeMetadata);\n            dataSource.attributeMetadataMap[attributeMetadata.Name] = publicAttributeMetadata;\n        }\n        dataSource._configure();\n    }\n\n    calculateAttributeDisplayOrder(dataSource, itemData) {\n        let attributeId, attributeMetadata, i;\n        const titleAttributes = [];\n        const detailAttributesPrio1 = [];\n        const detailAttributesPrio2 = [];\n        const detailAttributes = [];\n\n        // distribute attributes in lists according to presentationUsage\n        for (let j = 0; j < itemData.$$ResultItemAttributes$$.length; ++j) {\n            const attributeData = itemData.$$ResultItemAttributes$$[j];\n            const attributeInternalMetadata = this.provider.getInternalMetadataAttribute(\n                dataSource,\n                attributeData.Name\n            );\n\n            if (\n                attributeInternalMetadata.presentationUsage.indexOf(\"Title\") >= 0 ||\n                attributeInternalMetadata.IsTitle\n            ) {\n                titleAttributes.push(attributeData.Name);\n            }\n            if (\n                attributeInternalMetadata.presentationUsage.indexOf(\"Summary\") >= 0 ||\n                attributeInternalMetadata.presentationUsage.indexOf(\"Image\") >= 0 ||\n                attributeInternalMetadata.presentationUsage.indexOf(\"Thumbnail\") >= 0\n            ) {\n                detailAttributesPrio1.push(attributeData.Name);\n            } else if (attributeInternalMetadata.presentationUsage.indexOf(\"Detail\") >= 0) {\n                detailAttributesPrio2.push(attributeData.Name);\n            }\n        }\n\n        // calculate title display order\n        for (i = 0; i < titleAttributes.length; ++i) {\n            attributeId = titleAttributes[i];\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId);\n            attributeMetadata.usage.Title.displayOrder = i;\n        }\n\n        // calculate attribute area display order\n        detailAttributes.push(...detailAttributesPrio1);\n        detailAttributes.push(...detailAttributesPrio2);\n        for (i = 0; i < detailAttributes.length; ++i) {\n            attributeId = detailAttributes[i];\n            attributeMetadata = dataSource.getAttributeMetadata(attributeId);\n            attributeMetadata.usage.Detail.displayOrder = i;\n        }\n    }\n\n    _parseIsSortable(attributeMetadata) {\n        if (typeof attributeMetadata.IsSortable === \"undefined\") {\n            return false;\n        }\n        return attributeMetadata.IsSortable;\n    }\n\n    _parseMatchingStrategy(attributeMetadata) {\n        if (attributeMetadata.hasFulltextIndex) {\n            return MatchingStrategy.Text;\n        }\n        return MatchingStrategy.Exact;\n    }\n\n    _parseUsage(attributeMetadata) {\n        const usage: AttributeUsageType = {};\n        if (attributeMetadata.presentationUsage.indexOf(\"Title\") >= 0 || attributeMetadata.IsTitle) {\n            usage.Title = {\n                displayOrder: 0,\n            };\n        }\n        if (\n            attributeMetadata.presentationUsage.indexOf(\"Summary\") >= 0 ||\n            attributeMetadata.presentationUsage.indexOf(\"Image\") >= 0 ||\n            attributeMetadata.presentationUsage.indexOf(\"Thumbnail\") >= 0 ||\n            attributeMetadata.presentationUsage.indexOf(\"Detail\") >= 0\n        ) {\n            usage.Detail = {\n                displayOrder: 0,\n            };\n        }\n        if (attributeMetadata.accessUsage.indexOf(\"AutoFacet\") >= 0) {\n            usage.Facet = {\n                displayOrder: 0,\n            };\n        }\n        if (attributeMetadata.accessUsage.indexOf(\"AdvancedSearch\") >= 0) {\n            usage.AdvancedSearch = {\n                displayOrder: 0,\n            };\n        }\n        return usage;\n    }\n\n    _parseAttributeTypeAndFormat(attributeMetadata) {\n        // 1. evaluate presentation usage\n        for (let i = 0; i < attributeMetadata.presentationUsage.length; i++) {\n            const presentationUsage = attributeMetadata.presentationUsage[i];\n            switch (presentationUsage) {\n                case \"Summary\":\n                    continue;\n                case \"Detail\":\n                    continue;\n                case \"Title\":\n                    continue;\n                case \"Hidden\":\n                    continue;\n                case \"FactSheet\":\n                    continue;\n                case \"Thumbnail\":\n                case \"Image\":\n                    return {\n                        type: AttributeType.ImageUrl,\n                    };\n                case \"Text\":\n                    return {\n                        type: AttributeType.String,\n                        format: AttributeFormatType.LongText,\n                    };\n                default:\n                    throw new UnknownPresentationUsageError(presentationUsage);\n            }\n        }\n\n        // 2. evaluate data type\n        switch (attributeMetadata.DataType) {\n            case \"Integer\":\n            case \"Long\":\n                return {\n                    type: AttributeType.Integer,\n                };\n            case \"Double\":\n                return {\n                    type: AttributeType.Double,\n                };\n            case \"String\":\n                return {\n                    type: AttributeType.String,\n                };\n            case \"Date\":\n                return {\n                    type: AttributeType.Date,\n                };\n            case \"Time\":\n                return {\n                    type: AttributeType.Time,\n                };\n            case \"Timestamp\":\n                return {\n                    type: AttributeType.Timestamp,\n                };\n            case \"GeoJson\":\n                return {\n                    type: AttributeType.GeoJson,\n                };\n            default:\n                throw new UnknownDataTypeError(attributeMetadata.DataType);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}