{"version":3,"file":"pivotTableParser.js","names":["sap","ui","define","core","ResultSetParser","resultSet","constructor","options","this","parseNamedValue","namedValue","value","name","complexValue","prop","Value","formatItem","item","list","NamedValues","obj","i","length","parsedNamedValue","formatItems","items","result","formattedItem","extend","parse","Grids","Axes","cells","axes","enhance","grid","Cells","parseWithCells","parseWithoutCells","cell","j","Index","index","axis","axisItems","resolve","push","measureValue","axisElements","Tuples","tuples","itemIndex","Dimensions","ItemList","Items","itemListByName","ItemLists","itemList","Name","h","k","dimension","ItemListName","parser","__exports","__esModule"],"sources":["pivotTableParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../../core/core\";\n\ntype AxisServerData = object;\ninterface GridServerData {\n    Axes: Array<AxisServerData>;\n    Cells: Array<unknown>;\n}\ninterface PivotTableServerData {\n    Grids: Array<GridServerData>;\n}\nexport class ResultSetParser {\n    resultSet: PivotTableServerData;\n\n    constructor(options) {\n        this.resultSet = options.resultSet;\n    }\n\n    parseNamedValue(namedValue) {\n        let value;\n        let name;\n        let complexValue;\n        for (const prop in namedValue) {\n            switch (prop) {\n                case \"Name\":\n                    name = namedValue[prop];\n                    break;\n                case \"Value\":\n                    value = namedValue[prop];\n                    break;\n                default:\n                    if (!complexValue) {\n                        complexValue = {};\n                    }\n                    complexValue[prop] = namedValue[prop];\n            }\n        }\n        if (complexValue) {\n            complexValue.Value = value;\n            return {\n                name: name,\n                value: complexValue,\n            };\n        }\n        return {\n            name: name,\n            value: value,\n        };\n    }\n\n    formatItem(item) {\n        let list;\n        if (item.NamedValues) {\n            list = item.NamedValues;\n        }\n        if (!list) {\n            return item;\n        }\n\n        const obj = {};\n        for (let i = 0; i < list.length; ++i) {\n            const namedValue = list[i];\n            const parsedNamedValue = this.parseNamedValue(namedValue);\n            obj[parsedNamedValue.name] = this.formatItem(parsedNamedValue.value);\n        }\n        return obj;\n    }\n\n    formatItems(items) {\n        const result = {};\n        for (let i = 0; i < items.length; ++i) {\n            const item = items[i];\n            const formattedItem = this.formatItem(item);\n            core.extend(result, formattedItem);\n        }\n        return result;\n    }\n\n    parse() {\n        // check for data\n        if (!this.resultSet.Grids || !this.resultSet.Grids[0] || !this.resultSet.Grids[0].Axes) {\n            return {\n                cells: [],\n                axes: [],\n            };\n        }\n\n        // enhance result set:\n        // -> create link to item lists in dimensions of axes\n        this.enhance(this.resultSet);\n\n        // get reference to grid,row axis,col axis\n        const grid = this.resultSet.Grids[0];\n\n        // parse\n        if (grid.Cells.length > 0) {\n            return this.parseWithCells(grid);\n        }\n        return this.parseWithoutCells(grid);\n    }\n\n    parseWithCells(grid) {\n        const result = {\n            axes: [],\n            cells: [],\n        };\n\n        for (let i = 0; i < grid.Cells.length; i++) {\n            const cell = grid.Cells[i];\n\n            const items = [];\n            for (let j = 0; j < cell.Index.length; j++) {\n                const index = cell.Index[j];\n                const axis = grid.Axes[j];\n                const axisItems = this.resolve(axis, index);\n                items.push(...axisItems);\n            }\n\n            const measureValue = core.extend({}, cell);\n            delete measureValue.Index;\n            items.push(measureValue);\n\n            result.cells.push(this.formatItems(items));\n        }\n\n        return result;\n    }\n\n    parseWithoutCells(grid) {\n        const result = {\n            axes: [],\n            cells: [],\n        };\n\n        for (let i = 0; i < grid.Axes.length; ++i) {\n            const axis = grid.Axes[i];\n            const axisElements = [];\n            result.axes.push(axisElements);\n            for (let j = 0; j < axis.Tuples.length; ++j) {\n                const items = this.resolve(axis, j);\n                axisElements.push(this.formatItems(items));\n            }\n        }\n\n        return result;\n    }\n\n    resolve(axis, index) {\n        const items = [];\n        if (axis.Tuples.length === 0) {\n            return items;\n        }\n        const tuples = axis.Tuples[index];\n        for (let i = 0; i < tuples.length; ++i) {\n            const itemIndex = tuples[i];\n            const item = axis.Dimensions[i].ItemList.Items[itemIndex];\n            items.push(item);\n        }\n        return items;\n    }\n\n    enhance(resultSet) {\n        // create dictionary with item lists\n        const itemListByName = {};\n        for (let i = 0; i < resultSet.ItemLists.length; ++i) {\n            const itemList = resultSet.ItemLists[i];\n            itemListByName[itemList.Name] = itemList;\n        }\n\n        // loop at all dimensions and set link to item list\n        for (let h = 0; h < resultSet.Grids.length; ++h) {\n            const grid = resultSet.Grids[h];\n            for (let j = 0; j < grid.Axes.length; ++j) {\n                const axis = grid.Axes[j];\n                for (let k = 0; k < axis.Dimensions.length; ++k) {\n                    const dimension = axis.Dimensions[k];\n                    dimension.ItemList = itemListByName[dimension.ItemListName];\n                }\n            }\n        }\n    }\n}\n\nexport function parse(resultSet) {\n    const parser = new ResultSetParser({\n        resultSet: resultSet,\n    });\n    return parser.parse();\n}\n"],"mappings":"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","ignoreList":[]}