{"version":3,"file":"FacetParser.js","names":["sap","ui","define","pivotTableParser","typeConverter","____sina_ComparisonOperator","____sina_SearchQuery","____sina_LogicalOperator","____core_errors","ComparisonOperator","SearchQuery","LogicalOperator","FacetsParseError","FacetParser","provider","sina","constructor","this","parse","query","data","facets","ResultsetFacets","Elements","i","length","facetData","dimension","Metadata","Cube","ObjectName","push","parseDataSourceFacet","filter","dataSource","type","DataSourceType","Category","parseChartFacet","undefined","Promise","all","dataSourceQuery","createDataSourceQuery","clone","nlq","facet","ResultSet","items","cells","cell","getDataSource","$$DataSource$$","Value","_createDataSource","id","label","ValueFormatted","_createDataSourceResultSetItem","dimensionValueFormatted","measureValue","measureValueFormatted","resultSet","_createDataSourceResultSet","title","facetTotalCount","_setResultSet","createAttributeFilterCondition","attributeId","metadata","$$AttributeValue$$","createSimpleCondition","attribute","value","ina2Sina","attributeLabel","valueLabel","complexCondition","createComplexCondition","operator","And","conditions","Ge","Le","DataSource","getAttributeMetadata","chartQuery","setDataSource","setRootCondition","rootCondition","createChartQuery","_createChartResultSetItem","filterCondition","_createChartResultSet","__exports","__esModule"],"sources":["FacetParser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { ChartResultSet } from \"../../sina/ChartResultSet\";\nimport * as pivotTableParser from \"./pivotTableParser\";\nimport * as typeConverter from \"./typeConverter\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { SearchQuery } from \"../../sina/SearchQuery\";\nimport { Sina } from \"../../sina/Sina\";\nimport { LogicalOperator } from \"../../sina/LogicalOperator\";\nimport { Provider } from \"./Provider\";\nimport { FacetsParseError } from \"../../core/errors\";\nimport { AttributeMetadata } from \"../../sina/AttributeMetadata\";\n\nexport class FacetParser {\n    provider: Provider;\n    sina: Sina;\n\n    constructor(provider: Provider) {\n        this.provider = provider;\n        this.sina = provider.sina;\n    }\n\n    parse(query, data) {\n        const facets = [];\n        if (!data.ResultsetFacets || !data.ResultsetFacets.Elements) {\n            return [];\n        }\n        for (let i = 0; i < data.ResultsetFacets.Elements.length; i++) {\n            const facetData = data.ResultsetFacets.Elements[i];\n            const dimension = facetData.Metadata.Cube.ObjectName;\n            if (dimension === \"$$DataSources$$\") {\n                facets.push(this.parseDataSourceFacet(query, facetData));\n            } else {\n                if (query.filter.dataSource.type === query.sina.DataSourceType.Category) {\n                    continue; // ignore common attributes facets\n                }\n                facets.push(this.parseChartFacet(query, facetData, undefined)); // ToDo: Fill with total count of all facet items -> see getDataForPieChart of SearchFacetPieChart.ts\n            }\n        }\n        return Promise.all(facets);\n    }\n\n    parseDataSourceFacet(query, facetData) {\n        // for search query with datasource facet: create corresponding datasource query\n        let dataSourceQuery = query;\n        if (query instanceof SearchQuery) {\n            dataSourceQuery = this.sina.createDataSourceQuery({\n                dataSource: query.filter.dataSource,\n                filter: query.filter.clone(),\n                nlq: query.nlq,\n            });\n        }\n\n        // assemble results set items\n        const facet = pivotTableParser.parse(facetData.ResultSet);\n        const items = [];\n        for (let i = 0; i < facet.cells.length; i++) {\n            const cell = facet.cells[i];\n\n            // create filter (used when clicking on the item)\n            let dataSource = this.sina.getDataSource(cell.$$DataSource$$[0].Value);\n            if (!dataSource) {\n                dataSource = this.sina._createDataSource({\n                    type: this.sina.DataSourceType.Category,\n                    id: cell.$$DataSource$$[0].Value,\n                    label: cell.$$DataSource$$[0].ValueFormatted,\n                });\n            }\n\n            // create item\n            items.push(\n                this.sina._createDataSourceResultSetItem({\n                    dataSource: dataSource,\n                    dimensionValueFormatted: cell.$$DataSource$$[0].ValueFormatted,\n                    measureValue: cell.Value,\n                    measureValueFormatted: cell.ValueFormatted,\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createDataSourceResultSet({\n            title: query.filter.dataSource.label,\n            items: items,\n            query: dataSourceQuery,\n            facetTotalCount: undefined,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return dataSourceQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n\n    createAttributeFilterCondition(attributeId, metadata, cell) {\n        switch (cell.$$AttributeValue$$.length) {\n            case 2:\n                return this.sina.createSimpleCondition({\n                    attribute: attributeId,\n                    value: typeConverter.ina2Sina(metadata.type, cell.$$AttributeValue$$[0].Value),\n                    attributeLabel: metadata.label,\n                    valueLabel: cell.$$AttributeValue$$[0].ValueFormatted,\n                });\n            case 3: {\n                const complexCondition = this.sina.createComplexCondition({\n                    attributeLabel: metadata.label,\n                    valueLabel: cell.$$AttributeValue$$[0].ValueFormatted,\n                    operator: LogicalOperator.And,\n                });\n                const conditions = [];\n                if (cell.$$AttributeValue$$[1].Value) {\n                    conditions.push(\n                        this.sina.createSimpleCondition({\n                            attribute: attributeId,\n                            operator: ComparisonOperator.Ge,\n                            value: typeConverter.ina2Sina(metadata.type, cell.$$AttributeValue$$[1].Value),\n                        })\n                    );\n                }\n                if (cell.$$AttributeValue$$[2].Value) {\n                    conditions.push(\n                        this.sina.createSimpleCondition({\n                            attribute: attributeId,\n                            operator: ComparisonOperator.Le,\n                            value: typeConverter.ina2Sina(metadata.type, cell.$$AttributeValue$$[2].Value),\n                        })\n                    );\n                }\n                complexCondition.conditions = conditions;\n                return complexCondition;\n            }\n            default:\n                throw new FacetsParseError();\n        }\n    }\n\n    parseChartFacet(query, facetData, facetTotalCount: number): ChartResultSet {\n        const dataSource = this.sina.getDataSource(facetData.Metadata.Cube.DataSource.ObjectName);\n        const attributeId = facetData.Metadata.Cube.ObjectName;\n        const metadata = dataSource.getAttributeMetadata(attributeId) as AttributeMetadata;\n\n        // for search query with attribute facet: create corresponding chart query\n        let chartQuery = query;\n        if (query instanceof SearchQuery) {\n            const filter = query.filter.clone();\n            filter.setDataSource(dataSource); // relevant only for common attribute facets\n            filter.setRootCondition(query.filter.rootCondition.clone()); // changing ds removes condition\n            chartQuery = this.sina.createChartQuery({\n                filter: filter,\n                dimension: facetData.Metadata.Cube.ObjectName,\n                nlq: query.nlq,\n            });\n        }\n\n        // create result set items\n        const facet = pivotTableParser.parse(facetData.ResultSet);\n        const items = [];\n        for (let i = 0; i < facet.cells.length; i++) {\n            const cell = facet.cells[i];\n            items.push(\n                this.sina._createChartResultSetItem({\n                    filterCondition: this.createAttributeFilterCondition(attributeId, metadata, cell),\n                    dimensionValueFormatted:\n                        cell.$$AttributeValue$$[0].ValueFormatted || cell.$$AttributeValue$$[0].Value,\n                    measureValue: cell.Value,\n                    measureValueFormatted: cell.ValueFormatted,\n                })\n            );\n        }\n\n        // create result set\n        const resultSet = this.sina._createChartResultSet({\n            title: metadata.label,\n            items: items,\n            query: chartQuery,\n            facetTotalCount: facetTotalCount,\n        });\n\n        // init query with result set\n        if (query instanceof SearchQuery) {\n            return chartQuery._setResultSet(resultSet);\n        }\n\n        return resultSet;\n    }\n}\n"],"mappings":"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","ignoreList":[]}