{"version":3,"file":"RecordService-dbg.js","names":["sap","ui","define","___Util","____sina_ComplexCondition","____sina_SimpleCondition","formatRawValue","getMatchedStringValues","isValuePairMatched","readFile","ComplexCondition","SimpleCondition","RecordService","sina","dataSourceIds","records","constructor","loadRecords","length","dataSourceId","csv","push","parseCsv2RecordSet","parsedCsv","parseCsv2ArraySet","attributeIds","index","values","valueMap","createAttributeValueMap","record","id","rawValues","Object","map","value","rawValue","stringValues","stringValue","rows","split","filter","l","trim","row","cells","cell","inQuotes","char","i","attributeId","sValue","type","getDataSource","getAttributeMetadata","e","attributesMetadata","attributeMetadata","undefined","getRecordsByDataSourceId","recordSet","getResponse","query","results","matchedRecords","searchTerm","searchedDataSourceIds","dataSource","includes","rootCondition","conditions","getRecordsByConditions","getRecordsBySimpleCondition","attribute","operator","resultsToDisplay","getDisplayedRecords","totalCount","condition","recordsCondition0","recordsCondition1","intersectRecords","uniteRecords","attributeRawValue","records1","records2","r1","some","r2","record1Ids","Set","concat","has","recordsDisplayed","sortAttributeId","sortOrder","order","sortRecords","top","slice","skip","sort","v1","v2","localeCompare","toString","Date","getTime","__exports","__esModule"],"sources":["RecordService.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Sina } from \"../../sina/Sina\";\nimport { Value as RawValue } from \"../../sina/types\";\nimport { formatRawValue, getMatchedStringValues, isValuePairMatched, readFile } from \"./Util\";\nimport { Query } from \"../../sina/Query\";\nimport { ComparisonOperator } from \"../../sina/ComparisonOperator\";\nimport { ComplexCondition } from \"../../sina/ComplexCondition\";\nimport { SimpleCondition } from \"../../sina/SimpleCondition\";\n\ninterface SimpleConditionData {\n    attributeId: string;\n    // stringValue: string;\n    rawValue: RawValue; // may need for filtering\n    operator: string;\n}\nexport interface RecordResponse {\n    results: Record[]; // total results\n    resultsToDisplay: Record[]; // results with top, skip, sort\n    totalCount: number;\n}\n\nexport interface StringRawValuePair {\n    stringValue: string;\n    rawValue: RawValue;\n}\n\nexport interface AttributeValueMap {\n    [key: string]: StringRawValuePair;\n}\n\nexport interface Record {\n    id: string; // example 'purchaseOrders_1', used for intersect/unite records\n    dataSourceId: string;\n    valueMap: AttributeValueMap;\n    rawValues: RawValue[];\n    stringValues: string[];\n}\n\nexport class RecordService {\n    sina: Sina;\n    dataSourceIds = [] as string[];\n    records = [] as Record[];\n\n    constructor(sina: Sina, dataSourceIds: string[]) {\n        this.sina = sina;\n        this.dataSourceIds = dataSourceIds;\n    }\n\n    async loadRecords(): Promise<void> {\n        if (this.records.length > 0) {\n            return;\n        }\n\n        for (const dataSourceId of this.dataSourceIds) {\n            const csv = await readFile(\n                `/resources/sap/esh/search/ui/sinaNexTS/providers/sample2/data/${dataSourceId}.csv`\n            );\n            this.records.push(...this.parseCsv2RecordSet(dataSourceId, csv));\n        }\n    }\n\n    private parseCsv2RecordSet(dataSourceId: string, csv: string): Record[] {\n        const parsedCsv = this.parseCsv2ArraySet(csv);\n        const attributeIds = parsedCsv[0]; // header\n        const records: Record[] = [];\n\n        for (let index = 1; index < parsedCsv.length; index++) {\n            const values = parsedCsv[index];\n            const valueMap = this.createAttributeValueMap(dataSourceId, attributeIds, values);\n\n            const record = {\n                id: `${dataSourceId}_${index}`,\n                dataSourceId: dataSourceId,\n                valueMap: valueMap,\n                rawValues: Object.values(valueMap).map((value) => value.rawValue),\n                stringValues: Object.values(valueMap).map((value) => value.stringValue),\n            } as Record;\n\n            records.push(record);\n        }\n        return records;\n    }\n\n    private parseCsv2ArraySet(csv: string): string[][] {\n        /* \n        input: '\"FIRST_NAME\",\"LAST_NAME\", ...\\n\"Sally\",\"Spring\", ...\\n\"John\",\"Doe\", ...'\n        output: [[\"FIRST_NAME\", \"LAST_NAME\", ...], [\"Sally\", \"Spring\", ...], [\"John\", \"Doe\", ...]]\n         */\n        const rows = csv\n            .split(\"\\n\")\n            .filter((l) => l.trim() !== \"\")\n            .map((row) => {\n                const cells = [];\n                let cell = \"\";\n                let inQuotes = false;\n\n                for (const char of row) {\n                    if (char === '\"') {\n                        inQuotes = !inQuotes;\n                    } else if (char === \",\" && !inQuotes) {\n                        cells.push(cell);\n                        cell = \"\";\n                    } else {\n                        cell += char;\n                    }\n                }\n\n                cells.push(cell);\n                return cells;\n            });\n        return rows;\n    }\n\n    private createAttributeValueMap(\n        dataSourceId: string,\n        attributeIds: string[],\n        stringValues: string[]\n    ): AttributeValueMap {\n        const valueMap = {};\n\n        for (let i = 0; i < attributeIds.length; i++) {\n            const attributeId = attributeIds[i];\n            const sValue = stringValues[i];\n            try {\n                const type = this.sina.getDataSource(dataSourceId).getAttributeMetadata(attributeId).type;\n                valueMap[attributeId] = {\n                    stringValue: sValue,\n                    rawValue: formatRawValue(sValue, type),\n                };\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (e) {\n                valueMap[attributeId] = {\n                    stringValue: sValue,\n                    rawValue: sValue,\n                };\n            }\n        }\n\n        // insert default values for single attributes not present in CSV\n        const attributesMetadata = this.sina.getDataSource(dataSourceId).attributesMetadata;\n        for (const attributeMetadata of attributesMetadata) {\n            if (valueMap[attributeMetadata.id] === undefined && attributeMetadata.type !== \"Group\") {\n                valueMap[attributeMetadata.id] = {\n                    stringValue: \"default attribute value\",\n                    rawValue: formatRawValue(\"default attribute value\", attributeMetadata.type), // formatRawValue is able to create default value of different types\n                };\n            }\n        }\n\n        return valueMap;\n    }\n\n    getRecordsByDataSourceId(dataSourceId: string, records?: Record[]): Record[] {\n        let recordSet = [];\n        if (records) {\n            recordSet = records;\n        } else {\n            recordSet = this.records;\n        }\n        return recordSet.filter((record) => record.dataSourceId === dataSourceId);\n    }\n\n    getResponse(query: Query): RecordResponse {\n        let results = [];\n        const matchedRecords = [];\n        const searchTerm = query.filter.searchTerm;\n        const searchedDataSourceIds =\n            query.filter.dataSource.id !== \"All\" ? [query.filter.dataSource.id] : this.dataSourceIds;\n\n        for (const record of this.records) {\n            if (\n                searchedDataSourceIds.includes(record.dataSourceId) &&\n                getMatchedStringValues(record.stringValues, searchTerm).length > 0\n            ) {\n                matchedRecords.push(record);\n            }\n        }\n\n        if (\n            query.filter.rootCondition instanceof ComplexCondition &&\n            query.filter.rootCondition.conditions.length > 0\n        ) {\n            // Query has ComplexCondition\n            results = this.getRecordsByConditions(matchedRecords, query.filter.rootCondition);\n        } else if (query.filter.rootCondition instanceof SimpleCondition) {\n            // Query has SimpleCondition\n            results = this.getRecordsBySimpleCondition(matchedRecords, {\n                attributeId: query.filter.rootCondition.attribute,\n                rawValue: query.filter.rootCondition.value,\n                operator: query.filter.rootCondition.operator,\n            });\n        } else {\n            // Query has no Condition\n            results = matchedRecords;\n        }\n\n        return {\n            results: results,\n            resultsToDisplay: this.getDisplayedRecords(results, query),\n            totalCount: results.length,\n        };\n    }\n\n    getRecordsByConditions(records: Record[], condition: SimpleCondition | ComplexCondition): Record[] {\n        // recursive filter records by condition object\n        // complex condition object has properties: type = \"Complex\", conditions (array of child conditions), and operator = \"And\" or \"Or\"\n        // simple condition object has properties: type = \"Simple\", attribute (string), value (string), and operator = \"Eq\", \"Gt\", \"Lt\", etc.\n        // if complex condition has operator \"And\", intersectRecords of getRecordsByConditions its child conditions\n        // if complex condition has operator \"Or\", uniteRecords of getRecordsByConditions child conditions\n        // if simple condition, getRecordsBySimpleCondition condition\n\n        if (condition instanceof ComplexCondition) {\n            let recordsCondition0 = this.getRecordsByConditions(records, condition.conditions[0]);\n\n            for (let i = 1; i < condition.conditions.length; i++) {\n                const recordsCondition1 = this.getRecordsByConditions(records, condition.conditions[i]);\n                if (condition.operator === \"And\") {\n                    recordsCondition0 = this.intersectRecords(recordsCondition0, recordsCondition1);\n                } else if (condition.operator === \"Or\") {\n                    recordsCondition0 = this.uniteRecords(recordsCondition0, recordsCondition1);\n                }\n            }\n\n            return recordsCondition0;\n        } else {\n            return this.getRecordsBySimpleCondition(records, {\n                attributeId: condition.attribute,\n                rawValue: condition.value,\n                operator: condition.operator,\n            } as SimpleConditionData);\n        }\n    }\n\n    private getRecordsBySimpleCondition(records: Record[], condition: SimpleConditionData): Record[] {\n        try {\n            return records.filter((record) => {\n                const attributeRawValue = record.valueMap[condition.attributeId].rawValue;\n                return isValuePairMatched(\n                    attributeRawValue,\n                    condition.rawValue,\n                    condition.operator as ComparisonOperator\n                );\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (e) {\n            return [];\n        }\n    }\n\n    private intersectRecords(records1: Record[], records2: Record[]): Record[] {\n        return records1.filter((r1) => records2.some((r2) => r1.id === r2.id));\n    }\n\n    private uniteRecords(records1: Record[], records2: Record[]): Record[] {\n        const record1Ids = new Set(records1.map((r1) => r1.id)); // Set of IDs for faster lookups\n        return records1.concat(records2.filter((r2) => !record1Ids.has(r2.id)));\n    }\n\n    private getDisplayedRecords(records: Record[], query: Query): Record[] {\n        let recordsDisplayed = records;\n\n        // order records\n        const sortAttributeId = query?.sortOrder[0]?.id;\n        const order = query?.sortOrder[0]?.order;\n        if (sortAttributeId && order) {\n            recordsDisplayed = this.sortRecords(recordsDisplayed, sortAttributeId, order);\n        }\n\n        // set top records\n        if (query.top) {\n            recordsDisplayed = recordsDisplayed.slice(0, query.top);\n        }\n\n        // set skip records\n        if (query.skip) {\n            recordsDisplayed = recordsDisplayed.slice(query.skip);\n        }\n        return recordsDisplayed;\n    }\n\n    sortRecords(records: Record[], attributeId: string, sort?: \"Ascending\" | \"Descending\"): Record[] {\n        return records.sort((r1, r2) => {\n            const v1 = r1.valueMap[attributeId].rawValue;\n            const v2 = r2.valueMap[attributeId].rawValue;\n\n            if (sort === \"Descending\") {\n                if (typeof v1 === \"string\" && typeof v2 === \"string\") {\n                    return (v2 as string).localeCompare(v1 as string);\n                }\n                if (typeof v1 === \"number\" && typeof v2 === \"number\") {\n                    return (v2 as number) - (v1 as number);\n                }\n                if (typeof v1 === \"boolean\" && typeof v2 === \"boolean\") {\n                    return (v2.toString() as string).localeCompare(v1.toString() as string);\n                }\n                if (v1 instanceof Date && v2 instanceof Date) {\n                    return (v2 as Date).getTime() / 1000 - (v1 as Date).getTime() / 1000;\n                }\n                return 1;\n            } else {\n                if (typeof v1 === \"string\" && typeof v2 === \"string\") {\n                    return (v1 as string).localeCompare(v2 as string);\n                }\n                if (typeof v1 === \"number\" && typeof v2 === \"number\") {\n                    return (v1 as number) - (v2 as number);\n                }\n                if (typeof v1 === \"boolean\" && typeof v2 === \"boolean\") {\n                    return (v1.toString() as string).localeCompare(v2.toString() as string);\n                }\n                if (v1 instanceof Date && v2 instanceof Date) {\n                    return (v1 as Date).getTime() / 1000 - (v2 as Date).getTime() / 1000;\n                }\n                return 1;\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]}