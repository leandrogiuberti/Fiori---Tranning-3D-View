{"version":3,"file":"ajaxUtil.js","names":["sap","ui","define","encodeUrlParameters","parameters","result","name","value","push","encodeURIComponent","join","addEncodedUrlParameters","url","encodedParameters","length","index","indexOf","slice","parseHeaders","header","headers","lines","split","i","line","toLowerCase","trim","isNumberStringBooleanRecord","data","entry","__exports","__esModule"],"sources":["ajaxUtil.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nexport function encodeUrlParameters(parameters: Record<string, unknown>): string {\n    const result = [];\n    for (const name in parameters) {\n        const value = parameters[name];\n        result.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(value + \"\"));\n    }\n    return result.join(\"&\");\n}\n\nexport function addEncodedUrlParameters(url: string, parameters: Record<string, unknown>): string {\n    if (!parameters) {\n        return url;\n    }\n    const encodedParameters = encodeUrlParameters(parameters);\n    if (encodedParameters.length > 0) {\n        const index = url.indexOf(\"?\");\n        if (index >= 0) {\n            url = url.slice(0, index) + \"?\" + encodedParameters + \"&\" + url.slice(index + 1);\n        } else {\n            url += \"?\" + encodedParameters;\n        }\n    }\n    return url;\n}\n\nexport function parseHeaders(header: string): Record<string, string> {\n    const headers = {};\n    const lines = header.split(\"\\n\");\n    for (let i = 0; i < lines.length; ++i) {\n        const line = lines[i];\n        const index = line.indexOf(\":\");\n        if (index >= 0) {\n            const name = line.slice(0, index).toLowerCase(); // headers are case insensitive -> normalize to lower case\n            const value = line.slice(index + 1);\n            headers[name] = value.trim();\n        }\n    }\n    return headers;\n}\n\ntype EncodableData = Record<string | number | symbol, string | number | boolean>;\nexport function isNumberStringBooleanRecord(\n    data: Record<string | number | symbol, unknown>\n): data is EncodableData {\n    for (const entry in data) {\n        if (\n            typeof data[entry] !== \"boolean\" &&\n            typeof data[entry] !== \"string\" &&\n            typeof data[entry] !== \"number\"\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,2BAKO,SAASC,EAAoBC,GAChC,MAAMC,EAAS,GACf,IAAK,MAAMC,KAAQF,EAAY,CAC3B,MAAMG,EAAQH,EAAWE,GACzBD,EAAOG,KAAKC,mBAAmBH,GAAQ,IAAMG,mBAAmBF,EAAQ,IAC5E,CACA,OAAOF,EAAOK,KAAK,IACvB,CAEO,SAASC,EAAwBC,EAAaR,GACjD,IAAKA,EAAY,CACb,OAAOQ,CACX,CACA,MAAMC,EAAoBV,EAAoBC,GAC9C,GAAIS,EAAkBC,OAAS,EAAG,CAC9B,MAAMC,EAAQH,EAAII,QAAQ,KAC1B,GAAID,GAAS,EAAG,CACZH,EAAMA,EAAIK,MAAM,EAAGF,GAAS,IAAMF,EAAoB,IAAMD,EAAIK,MAAMF,EAAQ,EAClF,KAAO,CACHH,GAAO,IAAMC,CACjB,CACJ,CACA,OAAOD,CACX,CAEO,SAASM,EAAaC,GACzB,MAAMC,EAAU,CAAC,EACjB,MAAMC,EAAQF,EAAOG,MAAM,MAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMP,SAAUS,EAAG,CACnC,MAAMC,EAAOH,EAAME,GACnB,MAAMR,EAAQS,EAAKR,QAAQ,KAC3B,GAAID,GAAS,EAAG,CACZ,MAAMT,EAAOkB,EAAKP,MAAM,EAAGF,GAAOU,cAClC,MAAMlB,EAAQiB,EAAKP,MAAMF,EAAQ,GACjCK,EAAQd,GAAQC,EAAMmB,MAC1B,CACJ,CACA,OAAON,CACX,CAGO,SAASO,EACZC,GAEA,IAAK,MAAMC,KAASD,EAAM,CACtB,UACWA,EAAKC,KAAW,kBAChBD,EAAKC,KAAW,iBAChBD,EAAKC,KAAW,SACzB,CACE,OAAO,KACX,CACJ,CACA,OAAO,IACX,CAAC,IAAAC,EAAA,CAAAC,WAAA,MAAAD,EAAA3B,sBAAA2B,EAAAnB,0BAAAmB,EAAAZ,eAAAY,EAAAH,8BAAA,OAAAG,CAAA","ignoreList":[]}