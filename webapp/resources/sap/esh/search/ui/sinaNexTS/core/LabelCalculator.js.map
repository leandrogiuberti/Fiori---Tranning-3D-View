{"version":3,"file":"LabelCalculator.js","names":["sap","ui","define","___errors","SinaError","DuplicateException","node","constructor","properties","message","super","name","this","Node","data","obj","parent","nodeId","labelCalculator","childMap","children","insert","keyPath","length","options","calculateLabel","key","subNode","push","recalculateLabels","slice","leafs","collectLeafs","i","isLeaf","hasSibling","isChildOfRoot","collectPath","force","reverse","setLabel","LabelCalculator","rootNode","e","setFallbackLabel","__exports","__esModule"],"sources":["LabelCalculator.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SinaError } from \"./errors\";\n\nclass DuplicateException extends SinaError {\n    node: Node;\n\n    constructor(properties: { message?: string; node: Node }) {\n        properties.message = properties.message ?? \"Duplicate node\";\n        super({\n            message: properties.message,\n            name: \"DuplicateException\",\n        });\n        this.node = properties.node;\n    }\n}\n\n/**\n * Creates unique labels for system data sources.\n * \n * examples:\n * datasource     system client    --> calculated label\n * Purchase Order CER    002           Purchase Order\n * Sales Order    CER    002           Sales Order\n\n * datasource     system client    --> calculated label         include system to make label unique\n * Purchase Order CER    002           Purchase Order CER\n * Purchase Order CES    003           Purchase Order CES\n\n * datasource     system client    --> calculated label        include system and client to make label unique\n * Purchase Order CES    002           Purchase Order CES 002\n * Purchase Order CES    003           Purchase Order CES 003\n\n * datasource     system client    --> calculated label\n * Purchase Order CER    002           Purchase Order duplicate ...\n * Purchase Order CER    002           Purchase Order duplicate ...\n */\nclass Node {\n    data: { label: string; labelPlural: string };\n    obj: unknown;\n    parent: Node;\n    nodeId: string;\n    labelCalculator: LabelCalculator;\n    childMap: { [key: string]: Node };\n    children: Array<Node>;\n\n    constructor(parent: Node, nodeId: string, labelCalculator: LabelCalculator) {\n        this.parent = parent;\n        this.nodeId = nodeId;\n        this.labelCalculator = labelCalculator;\n        this.childMap = {};\n        this.children = [];\n    }\n\n    insert(keyPath: Array<string>, obj: unknown) {\n        // check for end of recursion\n        if (keyPath.length === 0) {\n            this.data = this.labelCalculator.options.data(obj);\n            this.obj = obj;\n            this.calculateLabel();\n            return;\n        }\n\n        // insert recursively into tree\n        const key = keyPath[0];\n        let subNode = this.childMap[key];\n        if (keyPath.length === 1 && subNode) {\n            throw new DuplicateException({\n                node: subNode,\n            });\n        }\n        if (!subNode) {\n            subNode = new Node(this, key, this.labelCalculator);\n            this.childMap[key] = subNode;\n            this.children.push(subNode);\n            if (this.children.length === 2) {\n                this.children[0].recalculateLabels();\n                // whenever a node gets a sibling -> recalculate labels of node because due to\n                // the sibling we need to add more keys to the label to make the label unique\n            }\n        }\n        subNode.insert(keyPath.slice(1), obj);\n    }\n\n    recalculateLabels() {\n        const leafs = [];\n        this.collectLeafs(leafs);\n        for (let i = 0; i < leafs.length; ++i) {\n            leafs[i].calculateLabel();\n        }\n    }\n\n    collectLeafs(leafs) {\n        if (this.isLeaf()) {\n            leafs.push(this);\n            return;\n        }\n        for (let i = 0; i < this.children.length; ++i) {\n            this.children[i].collectLeafs(leafs);\n        }\n    }\n\n    isLeaf() {\n        return this.children.length === 0;\n    }\n\n    hasSibling() {\n        return this.parent && this.parent.children.length >= 2;\n    }\n\n    isChildOfRoot() {\n        return this.parent && this.parent.nodeId === \"__ROOT\";\n    }\n\n    collectPath(keyPath: Array<string>, force?: boolean) {\n        if (!this.parent) {\n            return;\n        }\n        if (force || this.hasSibling() || this.isChildOfRoot()) {\n            keyPath.push(this.nodeId);\n            force = true;\n        }\n        if (this.parent) {\n            this.parent.collectPath(keyPath, force);\n        }\n    }\n\n    calculateLabel() {\n        // collect keys = labels\n        const keyPath = [];\n        this.collectPath(keyPath);\n        keyPath.reverse();\n\n        // calculate label\n        this.labelCalculator.options.setLabel(this.obj, keyPath, this.data);\n    }\n}\n\nexport class LabelCalculator {\n    options: {\n        data: (objToBeLabeled: unknown) => {\n            label: string;\n            labelPlural: string;\n        };\n        key: (objToBeLabeled: unknown) => Array<string>;\n        setFallbackLabel: (objToBeLabeled, data) => void;\n        setLabel: (objToBeLabeled, keyPath, data) => void;\n    };\n    rootNode: Node;\n\n    constructor(options) {\n        this.options = options;\n        this.rootNode = new Node(null, \"__ROOT\", this);\n    }\n\n    calculateLabel(obj: unknown): void {\n        const key = this.options.key(obj);\n        try {\n            // insert datasource into datasource tree\n            // for the inserted datasource a unique label is calculated\n            // for datasource in sibling tree branches the label is recalculated\n            this.rootNode.insert(key, obj);\n        } catch (e) {\n            if (e.name === \"DuplicateException\") {\n                this.options.setFallbackLabel(e.node.obj, e.node.data); // set fallback label for already existing node\n                this.options.setFallbackLabel(obj, this.options.data(obj)); // and for duplicate node\n                return;\n            }\n            throw e;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}