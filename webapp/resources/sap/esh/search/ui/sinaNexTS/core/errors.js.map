{"version":3,"file":"errors.js","names":["sap","ui","define","___sina_i18n","getText","SinaError","Error","message","details","solution","context","name","previous","constructor","properties","super","this","toString","InternalSinaError","props","ServerErrorCode","ServerError","code","dataSourceErrors","request","response","resultSet","NoConnectionError","url","LanguageHeaderError","NoJSONDateError","TimeOutError","NotImplementedError","ForcedBySearchTermTestError","static","forcedBySearchTerm","UnknownAttributeTypeError","attributeType","JSONParseError","MetadataParserError","UnknownComparisonOperatorError","operator","UnknownLogicalOperatorError","UnknownPresentationUsageError","presentationUsage","UnknownDataTypeError","dataType","UnknownConditionTypeError","conditionType","OnlyComplexConditionAllowedError","ResponseFormatError","expectedResponseDataFormat","responseData","detectedformat","startsWith","substring","ESHNotActiveError","ESHNoBusinessObjectDatasourceError","FacetsParseError","WhyFoundAttributeMetadataMissingError","attributeId","TimeConversionError","value","DateConversionError","CanOnlyAutoInsertComplexConditionError","CanNotCreateAlreadyExistingDataSourceError","dataSourceId","DataSourceInURLDoesNotExistError","DataSourceAttributeMetadataNotFoundError","NoValidEnterpriseSearchAPIConfigurationFoundError","providersTried","err","originalMessage","SinaConfigurationError","functionName","QueryIsReadOnlyError","InBetweenConditionInConsistent","__exports","__esModule"],"sources":["errors.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { ResultSet } from \"../sina/ResultSet\";\nimport { getText } from \"../sina/i18n\";\nimport { RequestProperties, ResponseProperties } from \"./ajax\";\n\n// =========================================================================\n// Base Exception Class\n// =========================================================================\nexport interface SinaErrorProperties {\n    message: string;\n    details?: string;\n    solution?: string;\n    context?: Record<string, unknown>;\n    name: string;\n    previous?: Error;\n}\n\nexport abstract class SinaError extends Error {\n    message: string;\n    details?: string;\n    solution?: string;\n    context?: Record<string, unknown>;\n    //stack: string; // remove stack here because it is base class defined\n    name: string;\n    previous: Error;\n\n    constructor(properties: SinaErrorProperties) {\n        super(properties.message);\n        this.message = properties.message;\n        this.details = properties?.details;\n        this.solution = properties.solution;\n        this.context = properties?.context;\n        this.name = properties.name ?? \"SinaError\";\n        this.previous = properties.previous;\n    }\n\n    toString(): string {\n        return this.name + \": \" + this.message;\n    }\n}\n\n// =========================================================================\n// List of all Sina Exceptions\n// =========================================================================\n\nexport class InternalSinaError extends SinaError {\n    constructor(props: { message?: string; details?: string; previous?: Error }) {\n        const properties: SinaErrorProperties = {\n            name: \"InternalSinaError\",\n            message: props.message ?? getText(\"error.sina.InternalSinaError\"),\n            details: props.details,\n            previous: props.previous,\n        };\n        super(properties);\n    }\n}\n\n// provider independent error codes\nexport enum ServerErrorCode {\n    E001 = \"E001\", // error\n    E100 = \"E100\", // The search result is incomplete because some search connectors are temporary not available.\n    E101 = \"E101\", // The metadata response is incomplete because some search connectors are temporary not available.\n    E102 = \"E102\", // All search connectors are temporarily not available\n    E200 = \"E200\", // The search term is too long in order to be processed.\n    E201 = \"E201\", // The search term contains too many tokens in order to be processed.\n    E202 = \"E202\", // Regular expression is too complex (input query is too complex and should be simplified).\n    E203 = \"E203\", // Search query contains only characters that are defined as separators. Please adjust the search query.\n    E300 = \"E300\", // The search request is invalid because the request does match to the metadata of the search connector.\n    E400 = \"E400\", // Duplicate search result list items\n    E500 = \"E500\", // AI/nlq service is not available\n}\n\nexport interface DataSourceError {\n    dataSource: string;\n    code: ServerErrorCode;\n    message: string;\n    details?: string;\n}\n\ninterface ServerErrorProperties {\n    request: RequestProperties;\n    response: ResponseProperties;\n    code: ServerErrorCode;\n    message: string;\n    details?: string;\n    dataSourceErrors?: Array<DataSourceError>;\n    previous?: Error;\n}\n\nexport class ServerError extends SinaError {\n    code: ServerErrorCode;\n    dataSourceErrors: Array<DataSourceError>;\n    request: RequestProperties;\n    response: ResponseProperties;\n    resultSet?: ResultSet;\n    constructor(properties: ServerErrorProperties) {\n        super({\n            name: \"ServerError\",\n            message: properties.message,\n            details: properties.details,\n            previous: properties.previous,\n        });\n        this.code = properties.code;\n        this.dataSourceErrors = properties.dataSourceErrors;\n        this.request = properties.request;\n        this.response = properties.response;\n    }\n}\n\nexport class NoConnectionError extends SinaError {\n    constructor(url: string) {\n        super({\n            name: \"NoConnectionError\",\n            message: getText(\"error.sina.NoConnectionError\", [url]),\n        });\n    }\n}\n\nexport class LanguageHeaderError extends SinaError {\n    constructor(props: { message?: string; details?: string; previous?: Error }) {\n        super({\n            name: \"LanguageHeaderError\",\n            message: props.message || getText(\"errr.sina.LanguageHeaderError\"),\n            details: props.details,\n            previous: props.previous,\n        });\n    }\n}\n\nexport class NoJSONDateError extends SinaError {\n    constructor(message?: string) {\n        const properties: SinaErrorProperties = {\n            name: \"NoJSONDateError\",\n            message: message ?? getText(\"error.sina.NoJSONDateError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class TimeOutError extends SinaError {\n    constructor(message?: string) {\n        const properties: SinaErrorProperties = {\n            name: \"TimeOutError\",\n            message: message ?? getText(\"error.sina.TimeOutError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class NotImplementedError extends SinaError {\n    constructor() {\n        super({ message: \"Not implemented\", name: \"ESHNotImplementedError\" });\n    }\n}\n\nexport class ForcedBySearchTermTestError extends SinaError {\n    public static readonly forcedBySearchTerm = \"EshForceErrorSearchterm\";\n    constructor() {\n        const properties: SinaErrorProperties = {\n            name: \"ForcedBySearchTermTestError\",\n            message: `Forced error, triggered by search term '${ForcedBySearchTermTestError.forcedBySearchTerm}'.`,\n        };\n        super(properties);\n    }\n}\n\nexport class UnknownAttributeTypeError extends SinaError {\n    constructor(attributeType: string, previous?: Error) {\n        const properties: SinaErrorProperties = {\n            name: \"UnknownAttributeTypeError\",\n            message: getText(\"error.sina.UnknownAttributeTypeError\", [attributeType]),\n            previous,\n        };\n        super(properties);\n    }\n}\n\nexport class JSONParseError extends SinaError {\n    constructor(message?: string, previous?: Error) {\n        const properties: SinaErrorProperties = {\n            name: \"JSONParseError\",\n            message: message ?? getText(\"error.sina.JSONParseError\"),\n            previous,\n        };\n        super(properties);\n    }\n}\n\nexport class MetadataParserError extends SinaError {\n    constructor(message?: string, previous?: Error) {\n        const properties: SinaErrorProperties = {\n            name: \"MetadataParserError\",\n            message: message ?? getText(\"error.sina.MetadataParserError\"),\n            previous,\n        };\n        super(properties);\n    }\n}\n\nexport class UnknownComparisonOperatorError extends SinaError {\n    constructor(operator: string) {\n        const properties: SinaErrorProperties = {\n            name: \"UnknownComparisonOperatorError\",\n            message: getText(\"error.sina.UnknownComparisonOperatorError\", [operator]),\n        };\n        super(properties);\n    }\n}\n\nexport class UnknownLogicalOperatorError extends SinaError {\n    constructor(operator: string) {\n        const properties: SinaErrorProperties = {\n            name: \"UnknownLogicalOperatorError\",\n            message: getText(\"error.sina.UnknownLogicalOperatorError\", [operator]),\n        };\n        super(properties);\n    }\n}\n\nexport class UnknownPresentationUsageError extends SinaError {\n    constructor(presentationUsage: string) {\n        const properties: SinaErrorProperties = {\n            name: \"UnknownPresentationUsageError\",\n            message: getText(\"error.sina.UnknownPresentationUsageError\", [presentationUsage]),\n        };\n        super(properties);\n    }\n}\n\nexport class UnknownDataTypeError extends SinaError {\n    constructor(dataType: string) {\n        const properties: SinaErrorProperties = {\n            name: \"UnknownDataTypeError\",\n            message: getText(\"error.sina.UnknownDataTypeError\", [dataType]),\n        };\n        super(properties);\n    }\n}\n\nexport class UnknownConditionTypeError extends SinaError {\n    constructor(conditionType: string) {\n        const properties: SinaErrorProperties = {\n            name: \"UnknownConditionTypeError\",\n            message: getText(\"error.sina.UnknownConditionTypeError\", [conditionType]),\n        };\n        super(properties);\n    }\n}\n\nexport class OnlyComplexConditionAllowedError extends SinaError {\n    constructor() {\n        const properties: SinaErrorProperties = {\n            name: \"OnlyComplexConditionAllowedError\",\n            message: getText(\"error.sina.OnlyComplexConditionAllowedError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class ResponseFormatError extends SinaError {\n    constructor(previous: Error, expectedResponseDataFormat: \"JSON\" | \"XML\", responseData: string) {\n        let detectedformat = \"undetected\";\n        if (responseData?.startsWith(\"<html\") || responseData?.startsWith(\"<HTML\")) {\n            detectedformat = \"HTML\";\n        } else if (responseData?.startsWith(\"<?xml\") || responseData?.startsWith(\"<?XML\")) {\n            detectedformat = \"XML\";\n        }\n        const properties: SinaErrorProperties = {\n            name: \"ResponseFormatError\",\n            message: getText(\"error.sina.ResponseFormatError\", [\n                expectedResponseDataFormat,\n                detectedformat,\n                responseData.substring(0, 25),\n            ]),\n            previous: previous,\n        };\n        super(properties);\n    }\n}\n\nexport class ESHNotActiveError extends SinaError {\n    constructor(message?: string) {\n        const properties: SinaErrorProperties = {\n            name: \"ESHNotActiveError\",\n            message: message ?? getText(\"error.sina.ESHNotActiveError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class ESHNoBusinessObjectDatasourceError extends SinaError {\n    constructor(message?: string) {\n        const properties: SinaErrorProperties = {\n            name: \"ESHNoBusinessObjectDatasourceError\",\n            message: message ?? getText(\"error.sina.ESHNoBusinessObjectDatasourceError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class FacetsParseError extends SinaError {\n    constructor(message?: string) {\n        const properties: SinaErrorProperties = {\n            name: \"FacetsParseError\",\n            message: message ?? getText(\"error.sina.FacetsParseError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class WhyFoundAttributeMetadataMissingError extends SinaError {\n    constructor(attributeId: string) {\n        const properties: SinaErrorProperties = {\n            name: \"WhyFoundAttributeMetadataMissingError\",\n            message: getText(\"error.sina.WhyFoundAttributeMetadataMissingError\", [attributeId]),\n        };\n        super(properties);\n    }\n}\n\nexport class TimeConversionError extends SinaError {\n    constructor(value: string) {\n        const properties: SinaErrorProperties = {\n            name: \"TimeConversionError\",\n            message: getText(\"error.sina.TimeConversionError\", [value]),\n        };\n        super(properties);\n    }\n}\n\nexport class DateConversionError extends SinaError {\n    constructor(value: string) {\n        const properties: SinaErrorProperties = {\n            name: \"DateConversionError\",\n            message: getText(\"error.sina.DateConversionError\", [value]),\n        };\n        super(properties);\n    }\n}\n\nexport class CanOnlyAutoInsertComplexConditionError extends SinaError {\n    constructor() {\n        const properties: SinaErrorProperties = {\n            name: \"CanOnlyAutoInsertComplexConditionError\",\n            message: getText(\"error.sina.CanOnlyAutoInsertComplexConditionError\"),\n        };\n        super(properties);\n    }\n}\nexport class CanNotCreateAlreadyExistingDataSourceError extends SinaError {\n    constructor(dataSourceId: string) {\n        const properties: SinaErrorProperties = {\n            name: \"CanNotCreateAlreadyExistingDataSourceError\",\n            message: getText(\"error.sina.CanNotCreateAlreadyExistingDataSourceError\", [dataSourceId]),\n        };\n        super(properties);\n    }\n}\n\nexport class DataSourceInURLDoesNotExistError extends SinaError {\n    constructor(dataSourceId: string) {\n        const properties: SinaErrorProperties = {\n            name: \"DataSourceInURLDoesNotExistError\",\n            message: getText(\"error.sina.DataSourceInURLDoesNotExistError\", [dataSourceId]),\n        };\n        super(properties);\n    }\n}\n\nexport class DataSourceAttributeMetadataNotFoundError extends SinaError {\n    constructor(attributeId: string, dataSourceId: string) {\n        const properties: SinaErrorProperties = {\n            name: \"DataSourceAttributeMetadataNotFoundError\",\n            message: getText(\"error.sina.DataSourceAttributeMetadataNotFoundError.message\", [\n                attributeId,\n                dataSourceId,\n            ]),\n            solution: getText(\"error.sina.DataSourceAttributeMetadataNotFoundError.solution\"),\n        };\n        super(properties);\n    }\n}\n\nexport class NoValidEnterpriseSearchAPIConfigurationFoundError extends SinaError {\n    constructor(providersTried: string, err?: Error) {\n        const originalMessage = err?.message ?? \"\";\n        const properties: SinaErrorProperties = {\n            name: \"NoValidEnterpriseSearchAPIConfigurationFoundError\",\n            message: getText(\"error.sina.NoValidEnterpriseSearchAPIConfigurationFoundError.error\", [\n                providersTried,\n                originalMessage,\n            ]),\n            solution: getText(\"error.sina.NoValidEnterpriseSearchAPIConfigurationFoundError.solution\"),\n        };\n        if (err) {\n            properties.previous = err;\n        }\n        super(properties);\n    }\n}\n\nexport class SinaConfigurationError extends SinaError {\n    constructor(functionName: string, err: Error) {\n        const properties: SinaErrorProperties = {\n            name: \"SinaConfigurationError\",\n            message: getText(\"error.sina.SinaConfigurationError\", [functionName]),\n            previous: err,\n        };\n        super(properties);\n    }\n}\n\nexport class QueryIsReadOnlyError extends SinaError {\n    constructor() {\n        const properties: SinaErrorProperties = {\n            name: \"QueryIsReadOnlyError\",\n            message: getText(\"error.sina.QueryIsReadOnlyError\"),\n        };\n        super(properties);\n    }\n}\n\nexport class InBetweenConditionInConsistent extends SinaError {\n    constructor(message?: string) {\n        const properties: SinaErrorProperties = {\n            name: \"InBetweenConditionInConsistent\",\n            message: message ?? getText(\"error.sina.InBetweenConditionInConsistent.message\"),\n            solution: getText(\"error.sina.InBetweenConditionInConsistent.solution\"),\n        };\n        super(properties);\n    }\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,0BAAAC,GAAA,mBAMSC,EAAOD,EAAA,WAeT,MAAeE,UAAkBC,MACpCC,QACAC,QACAC,SACAC,QAEAC,KACAC,SAEAC,YAAYC,GACRC,MAAMD,EAAWP,SACjBS,KAAKT,QAAUO,EAAWP,QAC1BS,KAAKR,QAAUM,GAAYN,QAC3BQ,KAAKP,SAAWK,EAAWL,SAC3BO,KAAKN,QAAUI,GAAYJ,QAC3BM,KAAKL,KAAOG,EAAWH,MAAQ,YAC/BK,KAAKJ,SAAWE,EAAWF,QAC/B,CAEAK,WACI,OAAOD,KAAKL,KAAO,KAAOK,KAAKT,OACnC,EAOG,MAAMW,UAA0Bb,EACnCQ,YAAYM,GACR,MAAML,EAAkC,CACpCH,KAAM,oBACNJ,QAASY,EAAMZ,SAAWH,EAAQ,gCAClCI,QAASW,EAAMX,QACfI,SAAUO,EAAMP,UAEpBG,MAAMD,EACV,EAGJ,IACYM,EAAe,SAAfA,KAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAAfA,EAAe,eAWR,OAXPA,CAAe,EAAfA,GAAe,IA+BpB,MAAMC,UAAoBhB,EAC7BiB,KACAC,iBACAC,QACAC,SACAC,UACAb,YAAYC,GACRC,MAAM,CACFJ,KAAM,cACNJ,QAASO,EAAWP,QACpBC,QAASM,EAAWN,QACpBI,SAAUE,EAAWF,WAEzBI,KAAKM,KAAOR,EAAWQ,KACvBN,KAAKO,iBAAmBT,EAAWS,iBACnCP,KAAKQ,QAAUV,EAAWU,QAC1BR,KAAKS,SAAWX,EAAWW,QAC/B,EAGG,MAAME,UAA0BtB,EACnCQ,YAAYe,GACRb,MAAM,CACFJ,KAAM,oBACNJ,QAASH,EAAQ,+BAAgC,CAACwB,KAE1D,EAGG,MAAMC,UAA4BxB,EACrCQ,YAAYM,GACRJ,MAAM,CACFJ,KAAM,sBACNJ,QAASY,EAAMZ,SAAWH,EAAQ,iCAClCI,QAASW,EAAMX,QACfI,SAAUO,EAAMP,UAExB,EAGG,MAAMkB,UAAwBzB,EACjCQ,YAAYN,GACR,MAAMO,EAAkC,CACpCH,KAAM,kBACNJ,QAASA,GAAWH,EAAQ,+BAEhCW,MAAMD,EACV,EAGG,MAAMiB,UAAqB1B,EAC9BQ,YAAYN,GACR,MAAMO,EAAkC,CACpCH,KAAM,eACNJ,QAASA,GAAWH,EAAQ,4BAEhCW,MAAMD,EACV,EAGG,MAAMkB,UAA4B3B,EACrCQ,cACIE,MAAM,CAAER,QAAS,kBAAmBI,KAAM,0BAC9C,EAGG,MAAMsB,UAAoC5B,EAC7C6B,0BAA4C,0BAC5CrB,cACI,MAAMC,EAAkC,CACpCH,KAAM,8BACNJ,QAAS,2CAA2C0B,EAA4BE,wBAEpFpB,MAAMD,EACV,EAGG,MAAMsB,UAAkC/B,EAC3CQ,YAAYwB,EAAuBzB,GAC/B,MAAME,EAAkC,CACpCH,KAAM,4BACNJ,QAASH,EAAQ,uCAAwC,CAACiC,IAC1DzB,YAEJG,MAAMD,EACV,EAGG,MAAMwB,UAAuBjC,EAChCQ,YAAYN,EAAkBK,GAC1B,MAAME,EAAkC,CACpCH,KAAM,iBACNJ,QAASA,GAAWH,EAAQ,6BAC5BQ,YAEJG,MAAMD,EACV,EAGG,MAAMyB,UAA4BlC,EACrCQ,YAAYN,EAAkBK,GAC1B,MAAME,EAAkC,CACpCH,KAAM,sBACNJ,QAASA,GAAWH,EAAQ,kCAC5BQ,YAEJG,MAAMD,EACV,EAGG,MAAM0B,UAAuCnC,EAChDQ,YAAY4B,GACR,MAAM3B,EAAkC,CACpCH,KAAM,iCACNJ,QAASH,EAAQ,4CAA6C,CAACqC,KAEnE1B,MAAMD,EACV,EAGG,MAAM4B,UAAoCrC,EAC7CQ,YAAY4B,GACR,MAAM3B,EAAkC,CACpCH,KAAM,8BACNJ,QAASH,EAAQ,yCAA0C,CAACqC,KAEhE1B,MAAMD,EACV,EAGG,MAAM6B,UAAsCtC,EAC/CQ,YAAY+B,GACR,MAAM9B,EAAkC,CACpCH,KAAM,gCACNJ,QAASH,EAAQ,2CAA4C,CAACwC,KAElE7B,MAAMD,EACV,EAGG,MAAM+B,UAA6BxC,EACtCQ,YAAYiC,GACR,MAAMhC,EAAkC,CACpCH,KAAM,uBACNJ,QAASH,EAAQ,kCAAmC,CAAC0C,KAEzD/B,MAAMD,EACV,EAGG,MAAMiC,UAAkC1C,EAC3CQ,YAAYmC,GACR,MAAMlC,EAAkC,CACpCH,KAAM,4BACNJ,QAASH,EAAQ,uCAAwC,CAAC4C,KAE9DjC,MAAMD,EACV,EAGG,MAAMmC,UAAyC5C,EAClDQ,cACI,MAAMC,EAAkC,CACpCH,KAAM,mCACNJ,QAASH,EAAQ,gDAErBW,MAAMD,EACV,EAGG,MAAMoC,UAA4B7C,EACrCQ,YAAYD,EAAiBuC,EAA4CC,GACrE,IAAIC,EAAiB,aACrB,GAAID,GAAcE,WAAW,UAAYF,GAAcE,WAAW,SAAU,CACxED,EAAiB,MACrB,MAAO,GAAID,GAAcE,WAAW,UAAYF,GAAcE,WAAW,SAAU,CAC/ED,EAAiB,KACrB,CACA,MAAMvC,EAAkC,CACpCH,KAAM,sBACNJ,QAASH,EAAQ,iCAAkC,CAC/C+C,EACAE,EACAD,EAAaG,UAAU,EAAG,MAE9B3C,SAAUA,GAEdG,MAAMD,EACV,EAGG,MAAM0C,UAA0BnD,EACnCQ,YAAYN,GACR,MAAMO,EAAkC,CACpCH,KAAM,oBACNJ,QAASA,GAAWH,EAAQ,iCAEhCW,MAAMD,EACV,EAGG,MAAM2C,UAA2CpD,EACpDQ,YAAYN,GACR,MAAMO,EAAkC,CACpCH,KAAM,qCACNJ,QAASA,GAAWH,EAAQ,kDAEhCW,MAAMD,EACV,EAGG,MAAM4C,UAAyBrD,EAClCQ,YAAYN,GACR,MAAMO,EAAkC,CACpCH,KAAM,mBACNJ,QAASA,GAAWH,EAAQ,gCAEhCW,MAAMD,EACV,EAGG,MAAM6C,UAA8CtD,EACvDQ,YAAY+C,GACR,MAAM9C,EAAkC,CACpCH,KAAM,wCACNJ,QAASH,EAAQ,mDAAoD,CAACwD,KAE1E7C,MAAMD,EACV,EAGG,MAAM+C,UAA4BxD,EACrCQ,YAAYiD,GACR,MAAMhD,EAAkC,CACpCH,KAAM,sBACNJ,QAASH,EAAQ,iCAAkC,CAAC0D,KAExD/C,MAAMD,EACV,EAGG,MAAMiD,UAA4B1D,EACrCQ,YAAYiD,GACR,MAAMhD,EAAkC,CACpCH,KAAM,sBACNJ,QAASH,EAAQ,iCAAkC,CAAC0D,KAExD/C,MAAMD,EACV,EAGG,MAAMkD,UAA+C3D,EACxDQ,cACI,MAAMC,EAAkC,CACpCH,KAAM,yCACNJ,QAASH,EAAQ,sDAErBW,MAAMD,EACV,EAEG,MAAMmD,UAAmD5D,EAC5DQ,YAAYqD,GACR,MAAMpD,EAAkC,CACpCH,KAAM,6CACNJ,QAASH,EAAQ,wDAAyD,CAAC8D,KAE/EnD,MAAMD,EACV,EAGG,MAAMqD,UAAyC9D,EAClDQ,YAAYqD,GACR,MAAMpD,EAAkC,CACpCH,KAAM,mCACNJ,QAASH,EAAQ,8CAA+C,CAAC8D,KAErEnD,MAAMD,EACV,EAGG,MAAMsD,UAAiD/D,EAC1DQ,YAAY+C,EAAqBM,GAC7B,MAAMpD,EAAkC,CACpCH,KAAM,2CACNJ,QAASH,EAAQ,8DAA+D,CAC5EwD,EACAM,IAEJzD,SAAUL,EAAQ,iEAEtBW,MAAMD,EACV,EAGG,MAAMuD,UAA0DhE,EACnEQ,YAAYyD,EAAwBC,GAChC,MAAMC,EAAkBD,GAAKhE,SAAW,GACxC,MAAMO,EAAkC,CACpCH,KAAM,oDACNJ,QAASH,EAAQ,qEAAsE,CACnFkE,EACAE,IAEJ/D,SAAUL,EAAQ,0EAEtB,GAAImE,EAAK,CACLzD,EAAWF,SAAW2D,CAC1B,CACAxD,MAAMD,EACV,EAGG,MAAM2D,UAA+BpE,EACxCQ,YAAY6D,EAAsBH,GAC9B,MAAMzD,EAAkC,CACpCH,KAAM,yBACNJ,QAASH,EAAQ,oCAAqC,CAACsE,IACvD9D,SAAU2D,GAEdxD,MAAMD,EACV,EAGG,MAAM6D,UAA6BtE,EACtCQ,cACI,MAAMC,EAAkC,CACpCH,KAAM,uBACNJ,QAASH,EAAQ,oCAErBW,MAAMD,EACV,EAGG,MAAM8D,UAAuCvE,EAChDQ,YAAYN,GACR,MAAMO,EAAkC,CACpCH,KAAM,iCACNJ,QAASA,GAAWH,EAAQ,qDAC5BK,SAAUL,EAAQ,uDAEtBW,MAAMD,EACV,EACH,IAAA+D,EAAA,CAAAC,WAAA,MAAAD,EAAAxE,YAAAwE,EAAA3D,oBAAA2D,EAAAzD,kBAAAyD,EAAAxD,cAAAwD,EAAAlD,oBAAAkD,EAAAhD,sBAAAgD,EAAA/C,kBAAA+C,EAAA9C,eAAA8C,EAAA7C,sBAAA6C,EAAA5C,8BAAA4C,EAAAzC,4BAAAyC,EAAAvC,iBAAAuC,EAAAtC,sBAAAsC,EAAArC,iCAAAqC,EAAAnC,8BAAAmC,EAAAlC,gCAAAkC,EAAAhC,uBAAAgC,EAAA9B,4BAAA8B,EAAA5B,mCAAA4B,EAAA3B,sBAAA2B,EAAArB,oBAAAqB,EAAApB,qCAAAoB,EAAAnB,mBAAAmB,EAAAlB,wCAAAkB,EAAAhB,sBAAAgB,EAAAd,sBAAAc,EAAAb,yCAAAa,EAAAZ,6CAAAY,EAAAV,mCAAAU,EAAAT,2CAAAS,EAAAR,oDAAAQ,EAAAJ,yBAAAI,EAAAF,uBAAAE,EAAAD,iCAAA,OAAAC,CAAA","ignoreList":[]}