{"version":3,"file":"clone.js","names":["sap","ui","define","Type","CloneBuffer","cloneBuffer","constructor","this","put","object","clonedObject","push","get","cloneBufferEntry","find","bufferEntry","undefined","CloneService","config","classConfigCache","buffer","classes","getType","obj","Primitive","Array","isArray","List","Object","clone","internalClone","cloneList","cloneObject","clonePrimitive","clonedList","element","isCloneableObject","clonedObj","classConfig","getClassConfig","cloneFunction","useOriginalObject","property","isCloneableProperty","class","properties","indexOf","__exports","__esModule"],"sources":["clone.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\ntype ConstructorFunction = new (...args: unknown[]) => unknown;\n\nexport interface CloneClassConfig {\n    class: ConstructorFunction;\n    properties?: Array<string>;\n    useOriginalObject?: boolean; // use original instance (do not clone)\n    cloneFunction?: (obj: unknown) => unknown; // custom function to implement cloning an object (needed to clone functions which internally need non-cloned properties)\n}\nexport interface CloneConfig {\n    classes: Array<CloneClassConfig>;\n}\n\nenum Type {\n    Primitive = \"Primitive\",\n    List = \"List\",\n    Object = \"Object\",\n}\n\ninterface CloneBufferEntry {\n    object: unknown;\n    clonedObject: unknown;\n}\n\nclass CloneBuffer {\n    cloneBuffer: Array<CloneBufferEntry>;\n    constructor() {\n        this.cloneBuffer = [];\n    }\n    put(object: unknown, clonedObject: unknown) {\n        this.cloneBuffer.push({ object: object, clonedObject: clonedObject });\n    }\n    get(object: unknown) {\n        const cloneBufferEntry = this.cloneBuffer.find((bufferEntry) => bufferEntry.object === object);\n        if (!cloneBufferEntry) {\n            return undefined;\n        }\n        return cloneBufferEntry.clonedObject;\n    }\n}\n\nexport class CloneService {\n    config: CloneConfig;\n    classConfigCache: CloneClassConfig;\n    buffer: CloneBuffer;\n    constructor(config?: CloneConfig) {\n        this.config = config ?? { classes: [] };\n    }\n    getType(obj: unknown): Type {\n        if (\n            typeof obj === \"string\" ||\n            typeof obj === \"number\" ||\n            typeof obj === \"boolean\" ||\n            typeof obj === \"function\" ||\n            typeof obj === \"undefined\"\n        ) {\n            return Type.Primitive;\n        }\n        if (typeof obj == \"object\") {\n            if (Array.isArray(obj)) {\n                return Type.List;\n            } else {\n                return Type.Object;\n            }\n        }\n        throw `Program error: Clone utitliy does not support type ${typeof obj}`;\n    }\n    clone(obj: unknown) {\n        this.buffer = new CloneBuffer();\n        return this.internalClone(obj);\n    }\n    internalClone(obj: unknown) {\n        switch (this.getType(obj)) {\n            case Type.List:\n                return this.cloneList(obj as Array<unknown>);\n            case Type.Object:\n                return this.cloneObject(obj as { [key: string]: unknown });\n            case Type.Primitive:\n                return this.clonePrimitive(obj);\n        }\n    }\n    cloneList(obj: Array<unknown>): Array<unknown> {\n        // check buffer for list\n        let clonedList = this.buffer.get(obj) as Array<unknown>;\n        if (clonedList) {\n            return clonedList;\n        }\n        // create new list\n        clonedList = [];\n        this.buffer.put(obj, clonedList);\n        // clone list entries\n        for (const element of obj) {\n            if (!this.isCloneableObject(element)) {\n                continue;\n            }\n            clonedList.push(this.internalClone(element));\n        }\n        return clonedList;\n    }\n    cloneObject(obj: { [key: string]: unknown }): unknown {\n        // check buffer for object\n        let clonedObj = this.buffer.get(obj);\n        if (clonedObj) {\n            return clonedObj;\n        }\n        const classConfig = this.getClassConfig(obj);\n        // use custome clone function\n        if (classConfig?.cloneFunction) {\n            return classConfig.cloneFunction(obj);\n        }\n        // use original object (do not clone, use object as it is)\n        if (classConfig?.useOriginalObject) {\n            return obj;\n        }\n\n        // create new object\n        clonedObj = {};\n        this.buffer.put(obj, clonedObj);\n        // clone object properties\n        for (const property in obj) {\n            if (!this.isCloneableProperty(obj, property)) {\n                continue;\n            }\n            clonedObj[property] = this.internalClone(obj[property]);\n        }\n        return clonedObj;\n    }\n    clonePrimitive(obj: unknown): unknown {\n        return obj;\n    }\n    getClassConfig(obj: unknown): CloneClassConfig {\n        if (this.classConfigCache && obj instanceof this.classConfigCache.class) {\n            return this.classConfigCache;\n        }\n        this.classConfigCache = this.config.classes.find((classConfig) => obj instanceof classConfig.class);\n        return this.classConfigCache;\n    }\n    isCloneableObject(obj: unknown): boolean {\n        if (obj?.constructor === Object) {\n            return true; // plain objects\n        }\n        const classConfig = this.getClassConfig(obj);\n        if (!classConfig) {\n            return false;\n        }\n        return true;\n    }\n    isCloneableProperty(obj: unknown, property: string): boolean {\n        if (obj?.constructor === Object) {\n            return true; // plain objects\n        }\n        const classConfig = this.getClassConfig(obj);\n        if (!classConfig) {\n            return false;\n        }\n        return classConfig.properties.indexOf(property) >= 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]}