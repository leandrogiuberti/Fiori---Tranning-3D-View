{"version":3,"file":"ajax.js","names":["sap","ui","define","___requestNodePlain","___requestBrowser","___core","___Log","requestNodePlain","requestBrowser","isBrowserEnv","Log","async","request","properties","result","dataJSON","JSON","parse","data","e","log","warn","applyResponseFormattersAndUpdateJSON","response","formatters","formatter","__exports","__esModule"],"sources":["ajax.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { requestNodePlain } from \"./requestNodePlain\";\nimport { requestBrowser } from \"./requestBrowser\";\nimport { isBrowserEnv } from \"./core\";\nimport { SinaError } from \"./errors\";\nimport { Log } from \"./Log\";\n\nexport interface RequestProperties {\n    data?: string;\n    headers?: Record<string, string>;\n    url: string;\n    parameters?: Record<string, unknown>;\n    method: string;\n    cookies?: string; // only for node-fetch\n}\n\nexport type RequestFormatter = (request: RequestProperties) => RequestProperties;\n\nexport interface ResponseProperties {\n    data: string;\n    dataJSON?: JSONValue;\n    headers: Record<string, string | string[]>;\n    status: number;\n    statusText: string;\n}\n\nexport interface JSONResponseProperties {\n    data: JSONValue;\n    headers: Record<string, string | string[]>;\n    status: number;\n    statusText: string;\n}\n\nexport type JSONValue = string | number | boolean | { [x: string]: JSONValue } | Array<JSONValue>;\n\nexport type ResponseFormatter = (\n    request: RequestProperties,\n    response: ResponseProperties\n) => ResponseProperties;\n\nexport type AjaxErrorFormatter = (\n    request: RequestProperties,\n    response: ResponseProperties,\n    error: SinaError\n) => SinaError;\n\nexport async function request(properties: RequestProperties): Promise<ResponseProperties> {\n    let result;\n    if (isBrowserEnv()) {\n        result = await requestBrowser(properties);\n    } else {\n        result = await requestNodePlain(properties);\n    }\n    try {\n        delete result.dataJSON;\n        result.dataJSON = JSON.parse(result.data);\n    } catch (e) {\n        const log = new Log(\"ajax\");\n        log.warn(\"Could not parse response data as JSON: \" + result?.data + \" (\" + e + \")\");\n    }\n    return result;\n}\n\nexport type AjaxErrorFactory = (request: RequestProperties, response: ResponseProperties) => SinaError;\n\nexport function applyResponseFormattersAndUpdateJSON(\n    request: RequestProperties,\n    response: ResponseProperties,\n    formatters: Array<ResponseFormatter>\n): ResponseProperties {\n    const data = response.data;\n    for (const formatter of formatters) {\n        response = formatter(request, response);\n    }\n    if (response.data !== data) {\n        // in case data changed also update dataJSON\n        try {\n            delete response.dataJSON;\n            response.dataJSON = JSON.parse(response.data);\n        } catch (e) {\n            const log = new Log(\"ajax\");\n            log.warn(\"Could not parse response data as JSON: \" + response?.data + \" (\" + e + \")\");\n        }\n    }\n    return response;\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,oEAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAKSC,EAAgBJ,EAAA,0BAChBK,EAAcJ,EAAA,wBACdK,EAAYJ,EAAA,sBAEZK,EAAGJ,EAAA,OAyCLK,eAAeC,EAAQC,GAC1B,IAAIC,EACJ,GAAIL,IAAgB,CAChBK,QAAeN,EAAeK,EAClC,KAAO,CACHC,QAAeP,EAAiBM,EACpC,CACA,WACWC,EAAOC,SACdD,EAAOC,SAAWC,KAAKC,MAAMH,EAAOI,KACxC,CAAE,MAAOC,GACL,MAAMC,EAAM,IAAIV,EAAI,QACpBU,EAAIC,KAAK,0CAA4CP,GAAQI,KAAO,KAAOC,EAAI,IACnF,CACA,OAAOL,CACX,CAIO,SAASQ,EACZV,EACAW,EACAC,GAEA,MAAMN,EAAOK,EAASL,KACtB,IAAK,MAAMO,KAAaD,EAAY,CAChCD,EAAWE,EAAUb,EAASW,EAClC,CACA,GAAIA,EAASL,OAASA,EAAM,CAExB,WACWK,EAASR,SAChBQ,EAASR,SAAWC,KAAKC,MAAMM,EAASL,KAC5C,CAAE,MAAOC,GACL,MAAMC,EAAM,IAAIV,EAAI,QACpBU,EAAIC,KAAK,0CAA4CE,GAAUL,KAAO,KAAOC,EAAI,IACrF,CACJ,CACA,OAAOI,CACX,CAAC,IAAAG,EAAA,CAAAC,WAAA,MAAAD,EAAAd,UAAAc,EAAAJ,uCAAA,OAAAI,CAAA","ignoreList":[]}