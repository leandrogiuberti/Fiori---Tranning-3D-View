{"version":3,"file":"AjaxBaseClient.js","names":["sap","ui","define","___Log","___ajax","___ajaxUtil","___core","___defaultAjaxErrorFactory","___errors","Log","applyResponseFormattersAndUpdateJSON","request","addEncodedUrlParameters","isBrowserEnv","createDefaultAjaxErrorFactory","ResponseFormatError","LanguageHeaderError","AjaxBaseClient","handleCookies","cookieStore","csrf","csrfByPassCache","csrfToken","csrfFetchRequest","csrfFetchRequestPromise","getLanguage","authorization","requestFormatters","responseFormatters","defaultParameters","errorFactories","errorFormatters","log","constructor","properties","this","undefined","user","password","getJsonHeaders","header","Accept","addLanguageToHeader","addDefaultHeaders","getXmlHeaders","error","previous","getJson","url","responseProperties","headers","method","data","JSON","parse","name","postJson","stringify","length","mergeJson","getXML","fetchCsrf","parameters","_","Date","now","requestPlain","then","response","bind","requestWithCsrf","renewCsrf","csrfHeader","toLowerCase","createUrlMatchingResponseFormatter","formatter","responseFormatter","indexOf","addResponseFormatter","delete","removeResponseFormatter","push","index","splice","removeAllResponseFormatters","applyRequestFormatters","requestFormatter","applyResponseFormatters","setBasicAuth","Object","assign","Buffer","Authorization","from","toString","window","btoa","requestProperties","requestInternal","checkForErrors","saveCookies","setCookieHeaders","setCookieHeader","parts","split","setPart","assignmentOperatorIndex","slice","trim","value","pasteCookies","cookieEntries","entries","map","join","addDefaultParameters","applyErrorFormatters","errorFormatter","errorFactory","e","__exports","__esModule"],"sources":["AjaxBaseClient.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/* global Buffer */\nimport { Log } from \"./Log\";\nimport {\n    AjaxErrorFactory,\n    AjaxErrorFormatter,\n    JSONResponseProperties,\n    JSONValue,\n    RequestFormatter,\n    RequestProperties,\n    ResponseFormatter,\n    ResponseProperties,\n    applyResponseFormattersAndUpdateJSON,\n    request,\n} from \"./ajax\";\nimport { addEncodedUrlParameters } from \"./ajaxUtil\";\nimport { isBrowserEnv } from \"./core\";\nimport { createDefaultAjaxErrorFactory } from \"./defaultAjaxErrorFactory\";\nimport { SinaError, ResponseFormatError, LanguageHeaderError } from \"./errors\";\n\nexport interface AjaxBaseClientProperties {\n    csrf?: boolean;\n    csrfByPassCache?: boolean;\n    csrfFetchRequest?: RequestProperties;\n    getLanguage?: () => string;\n    authorization?: { user: string; password: string };\n    requestFormatters?: Array<RequestFormatter>;\n    responseFormatters?: Array<ResponseFormatter>;\n    defaultParameters?: Record<string, string>;\n    errorFactories?: Array<AjaxErrorFactory>;\n    errorFormatters?: Array<AjaxErrorFormatter>;\n}\n\nexport class AjaxBaseClient {\n    handleCookies: boolean;\n    cookieStore: Record<string, string> = {};\n    csrf: boolean;\n    csrfByPassCache: boolean;\n    csrfToken: string;\n    csrfFetchRequest: RequestProperties;\n    csrfFetchRequestPromise: Promise<ResponseProperties>;\n    getLanguage?: () => string;\n    authorization?: { user: string; password: string };\n    requestFormatters: Array<RequestFormatter> = [];\n    responseFormatters: Array<ResponseFormatter> = [];\n    defaultParameters: Record<string, string> = {};\n    errorFactories: Array<AjaxErrorFactory> = [];\n    errorFormatters: Array<AjaxErrorFormatter> = [];\n\n    log: Log;\n\n    constructor(properties: AjaxBaseClientProperties) {\n        this.csrf = properties.csrf;\n        this.csrfByPassCache = properties.csrfByPassCache || false;\n        this.csrfToken = null;\n        this.csrfFetchRequest = properties.csrfFetchRequest || null;\n        this.getLanguage = properties?.getLanguage;\n        this.authorization = undefined;\n        if (properties.authorization) {\n            this.authorization = {\n                user: properties.authorization.user,\n                password: properties.authorization.password,\n            };\n        }\n        this.requestFormatters = properties.requestFormatters ?? [];\n        this.responseFormatters = properties.responseFormatters ?? [];\n        this.defaultParameters = properties.defaultParameters ?? {};\n        this.errorFactories = properties.errorFactories ?? [createDefaultAjaxErrorFactory()];\n        this.errorFormatters = properties.errorFormatters || [];\n        // for node env   : cookies are handled by ajax base client\n        // for browser env: cookies are handled by browser\n        this.handleCookies = !isBrowserEnv();\n        this.log = new Log(\"ajax base client\");\n    }\n\n    private getJsonHeaders(): Record<string, string> {\n        const header = {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        };\n        this.addLanguageToHeader(header);\n        this.addDefaultHeaders(header);\n        return header;\n    }\n\n    private getXmlHeaders(): Record<string, string> {\n        const header = {\n            \"Content-Type\": \"application/xml\",\n            Accept: \"application/xml\",\n        };\n        this.addLanguageToHeader(header);\n        this.addDefaultHeaders(header);\n        return header;\n    }\n\n    private addDefaultHeaders(header: Record<string, string>): void {\n        header[\"Cache-Control\"] = \"no-cache\";\n    }\n\n    private addLanguageToHeader(header: Record<string, string>): void {\n        if (typeof this.getLanguage === \"function\") {\n            try {\n                header[\"Accept-Language\"] = this.getLanguage();\n            } catch (error) {\n                throw new LanguageHeaderError({\n                    previous: error,\n                });\n            }\n        }\n    }\n\n    public async getJson(url: string): Promise<JSONResponseProperties> {\n        const responseProperties = await this.request({\n            headers: this.getJsonHeaders(),\n            method: \"GET\",\n            url: url,\n        });\n        try {\n            responseProperties.data = JSON.parse(responseProperties.data);\n        } catch (error) {\n            if (error.name === \"SyntaxError\") {\n                throw new ResponseFormatError(error, \"JSON\", responseProperties.data);\n            } else {\n                throw error;\n            }\n        }\n        return responseProperties;\n    }\n\n    public async postJson(url: string, data: JSONValue): Promise<JSONResponseProperties> {\n        const responseProperties = await this.request({\n            headers: this.getJsonHeaders(),\n            method: \"POST\",\n            url: url,\n            data: JSON.stringify(data),\n        });\n        try {\n            if (responseProperties.data?.length > 0) {\n                responseProperties.data = JSON.parse(responseProperties.data);\n            }\n        } catch (error) {\n            if (error.name === \"SyntaxError\") {\n                throw new ResponseFormatError(error, \"JSON\", responseProperties.data);\n            } else {\n                throw error;\n            }\n        }\n        return responseProperties;\n    }\n\n    public async mergeJson(url: string, data: JSONValue): Promise<JSONResponseProperties> {\n        const responseProperties = await this.request({\n            headers: this.getJsonHeaders(),\n            method: \"MERGE\",\n            url: url,\n            data: JSON.stringify(data),\n        });\n        try {\n            if (responseProperties.data?.length > 0) {\n                responseProperties.data = JSON.parse(responseProperties.data);\n            }\n        } catch (error) {\n            if (error.name === \"SyntaxError\") {\n                throw new ResponseFormatError(error, \"JSON\", responseProperties.data);\n            } else {\n                throw error;\n            }\n        }\n        return responseProperties;\n    }\n\n    public async getXML(url): Promise<string> {\n        const responseProperties = await this.request({\n            headers: this.getXmlHeaders(),\n            method: \"GET\",\n            url: url,\n        });\n        return responseProperties.data;\n    }\n\n    private fetchCsrf(): Promise<ResponseProperties> {\n        if (this.csrfFetchRequestPromise) {\n            return this.csrfFetchRequestPromise;\n        }\n        this.csrfFetchRequest.headers = this.csrfFetchRequest.headers || {};\n        this.csrfFetchRequest.headers[\"x-csrf-token\"] = \"fetch\";\n        this.csrfFetchRequest.parameters = this.csrfFetchRequest.parameters || {};\n        if (this.csrfByPassCache) {\n            this.csrfFetchRequest.parameters._ = Date.now(); // bypass cache;\n        }\n        this.csrfFetchRequestPromise = this.requestPlain(this.csrfFetchRequest).then(\n            function (this: AjaxBaseClient, response) {\n                this.csrfFetchRequestPromise = null;\n                this.csrfToken = response.headers[\"x-csrf-token\"];\n                return response;\n            }.bind(this)\n        );\n        return this.csrfFetchRequestPromise;\n    }\n\n    private async requestWithCsrf(\n        properties: RequestProperties,\n        renewCsrf: boolean\n    ): Promise<ResponseProperties> {\n        // if request is identical to csrf fetch request -> always fetch a new csrf token\n        if (\n            addEncodedUrlParameters(this.csrfFetchRequest.url, this.csrfFetchRequest.parameters) ===\n            addEncodedUrlParameters(properties.url, properties.parameters)\n        ) {\n            return await this.fetchCsrf();\n        }\n\n        // no csrf -> fetch csrf\n        if (renewCsrf && !this.csrfToken) {\n            await this.fetchCsrf();\n        }\n\n        // do request with csrf token\n        properties.headers = properties.headers || {};\n        properties.headers[\"x-csrf-token\"] = this.csrfToken;\n        const response = await this.requestPlain(properties);\n\n        // check response, csrf token maybe outdated: fetch csrf, repeat request\n        const csrfHeader = response?.headers[\"x-csrf-token\"];\n        if (renewCsrf && typeof csrfHeader === \"string\" && csrfHeader.toLowerCase() === \"required\") {\n            await this.fetchCsrf();\n            return await this.requestWithCsrf(properties, false);\n        }\n\n        return response;\n    }\n\n    createUrlMatchingResponseFormatter(url: string, formatter: ResponseFormatter): { delete: () => void } {\n        const responseFormatter = (request: RequestProperties, response: ResponseProperties) => {\n            if (request.url.indexOf(url) !== 0) {\n                return response;\n            }\n            return formatter(request, response);\n        };\n        this.addResponseFormatter(responseFormatter);\n        return {\n            delete: () => this.removeResponseFormatter(responseFormatter),\n        };\n    }\n\n    addResponseFormatter(formatter: ResponseFormatter) {\n        this.responseFormatters.push(formatter);\n    }\n\n    removeResponseFormatter(formatter: ResponseFormatter) {\n        const index = this.responseFormatters.indexOf(formatter);\n        if (index >= 0) {\n            this.responseFormatters.splice(index);\n        }\n    }\n\n    removeAllResponseFormatters() {\n        this.responseFormatters = [];\n    }\n\n    private applyRequestFormatters(request: RequestProperties) {\n        for (const requestFormatter of this.requestFormatters) {\n            request = requestFormatter(request);\n        }\n        return request;\n    }\n\n    private applyResponseFormatters(request: RequestProperties, response: ResponseProperties) {\n        return applyResponseFormattersAndUpdateJSON(request, response, this.responseFormatters);\n    }\n\n    private setBasicAuth(properties: RequestProperties) {\n        properties.headers = Object.assign({}, properties.headers);\n        if (this.authorization !== undefined) {\n            if (typeof Buffer === \"function\") {\n                // node.js encode\n                properties.headers.Authorization =\n                    \"Basic \" +\n                    Buffer.from(this.authorization.user + \":\" + this.authorization.password).toString(\n                        \"base64\"\n                    );\n            } else if (window && typeof window.btoa === \"function\") {\n                // javascript encode\n                properties.headers.Authorization =\n                    \"Basic \" + window.btoa(this.authorization.user + \":\" + this.authorization.password);\n            }\n        }\n    }\n\n    public async request(requestProperties: RequestProperties): Promise<ResponseProperties> {\n        const responseProperties = await this.requestInternal(requestProperties);\n        this.checkForErrors(requestProperties, responseProperties);\n        return responseProperties;\n    }\n\n    async requestInternal(properties: RequestProperties): Promise<ResponseProperties> {\n        // set authorization header\n        this.setBasicAuth(properties);\n\n        // no csrf -> fire plain request\n        if (!this.csrf) {\n            return await this.requestPlain(properties);\n        }\n\n        // if csrf fetch request is not set -> treat first request as csrf fetch request\n        if (!this.csrfFetchRequest) {\n            this.csrfFetchRequest = properties;\n        }\n\n        // main request with csrf renew if neccessary\n        return await this.requestWithCsrf(properties, true);\n    }\n\n    private saveCookies(properties: ResponseProperties) {\n        const setCookieHeaders = properties?.headers[\"set-cookie\"];\n        if (!setCookieHeaders) {\n            return;\n        }\n        for (const setCookieHeader of setCookieHeaders) {\n            const parts = setCookieHeader.split(\";\");\n            if (parts.length === 0) {\n                continue;\n            }\n            const setPart = parts[0];\n            const assignmentOperatorIndex = setPart.indexOf(\"=\");\n            if (assignmentOperatorIndex < 0) {\n                continue;\n            }\n            const name = setPart.slice(0, assignmentOperatorIndex).trim();\n            if (name.length === 0) {\n                continue;\n            }\n            const value = setPart.slice(assignmentOperatorIndex + 1).trim();\n            if (value.length === 0) {\n                continue;\n            }\n            this.cookieStore[name] = value;\n        }\n    }\n\n    private pasteCookies(properties: RequestProperties) {\n        const cookieEntries = Object.entries(this.cookieStore);\n        if (cookieEntries.length === 0) {\n            return;\n        }\n        properties.headers = properties.headers || {};\n        properties.headers[\"Cookie\"] = cookieEntries.map(([name, value]) => `${name}=${value}`).join(\";\");\n    }\n\n    private addDefaultParameters(properties: RequestProperties) {\n        for (const [name, value] of Object.entries(this.defaultParameters)) {\n            properties.parameters = properties.parameters || {};\n            if (typeof properties.parameters[name] !== \"undefined\") {\n                continue; // do not overwrite\n            }\n            properties.parameters[name] = value;\n        }\n    }\n\n    private applyErrorFormatters(\n        requestProperties: RequestProperties,\n        responseProperties: ResponseProperties,\n        error: SinaError\n    ): SinaError {\n        for (const errorFormatter of this.errorFormatters) {\n            error = errorFormatter(requestProperties, responseProperties, error);\n        }\n        return error;\n    }\n\n    private checkForErrors(requestProperties: RequestProperties, responseProperties: ResponseProperties) {\n        for (const errorFactory of this.errorFactories) {\n            let error;\n            try {\n                error = errorFactory(requestProperties, responseProperties);\n            } catch (e) {\n                this.log.error(`ajax error factory raised exception ${e}`); // log and continue with next factory\n            }\n            if (error) {\n                error = this.applyErrorFormatters(requestProperties, responseProperties, error);\n                throw error;\n            }\n        }\n    }\n\n    private async requestPlain(requestProperties: RequestProperties): Promise<ResponseProperties> {\n        this.addDefaultParameters(requestProperties);\n        if (this.handleCookies) {\n            this.pasteCookies(requestProperties);\n        }\n        requestProperties = this.applyRequestFormatters(requestProperties);\n        let responseProperties = await request(requestProperties);\n        responseProperties = this.applyResponseFormatters(requestProperties, responseProperties);\n        if (this.handleCookies) {\n            this.saveCookies(responseProperties);\n        }\n        return responseProperties;\n    }\n}\n"],"mappings":"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","ignoreList":[]}