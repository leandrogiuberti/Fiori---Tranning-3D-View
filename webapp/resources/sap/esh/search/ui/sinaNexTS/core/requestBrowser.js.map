{"version":3,"file":"requestBrowser.js","names":["sap","ui","define","___ajaxUtil","addEncodedUrlParameters","parseHeaders","async","requestBrowser","properties","Promise","resolve","xhttp","XMLHttpRequest","onreadystatechange","readyState","data","responseText","headers","getAllResponseHeaders","status","statusText","url","parameters","open","method","headerName","headerValue","setRequestHeader","send","__exports","__esModule"],"sources":["requestBrowser.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { RequestProperties, ResponseProperties } from \"./ajax\";\nimport { addEncodedUrlParameters, parseHeaders } from \"./ajaxUtil\";\n\nexport async function requestBrowser(properties: RequestProperties): Promise<ResponseProperties> {\n    return new Promise(function (resolve) {\n        // Browser\n        // new http request\n        const xhttp = new XMLHttpRequest();\n\n        // todo\n        // document github\n        // pull request\n        // manual test\n        // - search request\n        // - chart request\n        // - suggestion request\n        // - hierarchy request\n        // - error without result set\n        // - test csrf renewal\n        // - s/4\n        // - repoexplorer\n        // - initial duplicate error siutation\n        // - fallback abap_odata, dummy\n\n        // callback handler\n        xhttp.onreadystatechange = function () {\n            if (xhttp.readyState == 4) {\n                resolve({\n                    data: xhttp.responseText,\n                    headers: parseHeaders(xhttp.getAllResponseHeaders()),\n                    status: xhttp.status,\n                    statusText: xhttp.statusText,\n                });\n                return;\n            }\n        };\n\n        // add url parameters to url\n        const url = addEncodedUrlParameters(properties.url, properties.parameters);\n\n        // write headers to http request\n        xhttp.open(properties.method, url, true);\n        for (const headerName in properties.headers) {\n            const headerValue = properties.headers[headerName];\n            xhttp.setRequestHeader(headerName, headerValue);\n        }\n\n        // send\n        xhttp.send(properties.data);\n    });\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,wBAAAC,GAAA,mBAMSC,EAAuBD,EAAA,iCAAEE,EAAYF,EAAA,gBAEvCG,eAAeC,EAAeC,GACjC,OAAO,IAAIC,QAAQ,SAAUC,GAGzB,MAAMC,EAAQ,IAAIC,eAkBlBD,EAAME,mBAAqB,WACvB,GAAIF,EAAMG,YAAc,EAAG,CACvBJ,EAAQ,CACJK,KAAMJ,EAAMK,aACZC,QAASZ,EAAaM,EAAMO,yBAC5BC,OAAQR,EAAMQ,OACdC,WAAYT,EAAMS,aAEtB,MACJ,CACJ,EAGA,MAAMC,EAAMjB,EAAwBI,EAAWa,IAAKb,EAAWc,YAG/DX,EAAMY,KAAKf,EAAWgB,OAAQH,EAAK,MACnC,IAAK,MAAMI,KAAcjB,EAAWS,QAAS,CACzC,MAAMS,EAAclB,EAAWS,QAAQQ,GACvCd,EAAMgB,iBAAiBF,EAAYC,EACvC,CAGAf,EAAMiB,KAAKpB,EAAWO,KAC1B,EACJ,CAAC,IAAAc,EAAA,CAAAC,WAAA,MAAAD,EAAAtB,iBAAA,OAAAsB,CAAA","ignoreList":[]}