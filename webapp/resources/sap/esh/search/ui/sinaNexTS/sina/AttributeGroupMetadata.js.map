{"version":3,"file":"AttributeGroupMetadata.js","names":["sap","ui","define","___AttributeType","___AttributeMetadataBase","___AttributeMetadata","AttributeType","AttributeMetadataBase","AttributeMetadata","AttributeGroupMetadata","type","Group","label","isSortable","template","attributes","displayAttributes","constructor","properties","super","this","id","usage","toJson","json","displayOrder","groups","attributeMembers","length","member","push","attribute","group","nameInGroup","groupMembers","fromJson","groupAttributeJson","attributeJsonArray","attributeMetadataMap","sina","groupAttributeMetadata","_createAttributeGroupMetadata","childAttribute","childAttributeMetadata","childAttributeJson","getAttributeJsonById","pushMembership","attributeJson","find","undefined","childAttributeGroupMembership","_createAttributeGroupMembership","__exports","__esModule"],"sources":["AttributeGroupMetadata.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeType } from \"./AttributeType\";\nimport {\n    AttributeMetadataBase,\n    AttributeMetadataBaseJSON,\n    AttributeMetadataBaseOptions,\n} from \"./AttributeMetadataBase\";\nimport { AttributeGroupMembership } from \"./AttributeGroupMembership\";\nimport { Sina } from \"./Sina\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\nimport type { AttributeMetadataJSON } from \"./AttributeMetadata\";\n\nexport interface GroupAttributeMetadataJSON extends AttributeMetadataBaseJSON {\n    groups: unknown[];\n    template: string;\n    attributes: Array<{\n        attribute: {\n            id: string;\n        };\n        group: {\n            id: string;\n        };\n        nameInGroup: string;\n    }>;\n    displayAttributes: string[];\n}\nexport interface AttributeGroupMetadataOptions extends AttributeMetadataBaseOptions {\n    label?: string;\n    isSortable?: boolean;\n    template?: string;\n    attributes: Array<AttributeGroupMembership>;\n    type: AttributeType.Group;\n    displayAttributes?: Array<string>;\n}\nexport class AttributeGroupMetadata extends AttributeMetadataBase {\n    // _meta: {\n    //     properties: {\n    //         type: { // overwrite\n    //             required: false,\n    //             default: AttributeType.Group\n    //         },\n    //         label: { // overwrite\n    //             required: false\n    //         },\n    //         isSortable: { // overwrite\n    //             required: false,\n    //             default: false\n    //         },\n    //         template: {\n    //             required: false\n    //         },\n    //         attributes: { // array of AttributeGroupMembership instances\n    //             required: true,\n    //             default: function () {\n    //                 return [];\n    //             }\n    //         }\n    //         displayAttributes{ // array of attibutes to be displayed\n    //             required: false,\n    //             default: function () {\n    //                 return [];\n    //             }\n    //         }\n    //     }\n    // }\n\n    type: AttributeType = AttributeType.Group;\n    label: string;\n    isSortable = false;\n    template: string;\n    attributes: Array<AttributeGroupMembership> = [];\n    displayAttributes: Array<string> = [];\n\n    constructor(properties: AttributeGroupMetadataOptions) {\n        super(properties);\n        this.id = properties.id ?? this.id;\n        this.usage = properties.usage ?? this.usage;\n        this.label = properties.label ?? this.label;\n        this.isSortable = properties.isSortable ?? this.isSortable;\n        this.template = properties.template ?? this.template;\n        this.attributes = properties.attributes ?? this.attributes;\n        this.displayAttributes = properties.displayAttributes ?? this.displayAttributes;\n    }\n\n    toJson(): GroupAttributeMetadataJSON {\n        const json = {\n            id: this.id,\n            label: this.label,\n            type: this.type,\n            displayOrder: this?.displayOrder,\n            isSortable: this?.isSortable,\n            usage: this?.usage,\n            groups: [],\n            template: this?.template || \"\",\n            attributes: [],\n            displayAttributes: this?.displayAttributes || [],\n        };\n\n        // push attributes\n        const attributeMembers = this.attributes || [];\n\n        if (attributeMembers.length === 0) {\n            return json;\n        }\n\n        for (const member of attributeMembers) {\n            json.attributes.push({\n                attribute: {\n                    id: member.attribute.id,\n                },\n                group: {\n                    id: member.group.id,\n                },\n                nameInGroup: member.nameInGroup,\n            });\n        }\n\n        // push groups\n        const groupMembers = this.groups || [];\n\n        if (groupMembers.length === 0) {\n            return json;\n        }\n\n        for (const member of groupMembers) {\n            json.groups.push({\n                attribute: {\n                    id: member.attribute.id,\n                },\n                group: {\n                    id: member.group.id,\n                },\n                nameInGroup: member.nameInGroup,\n            });\n        }\n\n        return json;\n    }\n\n    static fromJson(\n        groupAttributeJson: GroupAttributeMetadataJSON,\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>,\n        attributeMetadataMap: Record<string, AttributeMetadataBase>, // attribute metadata map buffer, may not be compete\n        sina: Sina\n    ): AttributeGroupMetadata {\n        // group attribute metadata\n        const groupAttributeMetadata = sina._createAttributeGroupMetadata({\n            id: groupAttributeJson.id,\n            label: groupAttributeJson.label,\n            type: AttributeType.Group,\n            template: groupAttributeJson.template,\n            attributes: [],\n            displayAttributes: groupAttributeJson.displayAttributes || [],\n            usage: groupAttributeJson.usage,\n        });\n\n        // child attribute loop\n        for (const childAttribute of groupAttributeJson.attributes) {\n            let childAttributeMetadata = attributeMetadataMap[childAttribute.attribute.id];\n\n            if (childAttributeMetadata) {\n                // 1. child attribute is dejsonified\n                // do nothing\n            } else {\n                // 2. child attribute is NOT dejsonified\n                // get full json data by child attribute\n                const childAttributeJson = groupAttributeMetadata.getAttributeJsonById(\n                    attributeJsonArray,\n                    childAttribute.attribute.id\n                );\n\n                if (childAttributeJson.type !== AttributeType.Group) {\n                    // 2.1 child attribute is single attribute\n                    // create single attribute metadata\n                    childAttributeMetadata = AttributeMetadata.fromJson(\n                        childAttributeJson as AttributeMetadataJSON,\n                        sina\n                    );\n                } else {\n                    // 2.2 child attribute is group attribute\n                    // create group attribute metadata\n                    childAttributeMetadata = AttributeGroupMetadata.fromJson(\n                        childAttributeJson as AttributeGroupMetadata,\n                        attributeJsonArray,\n                        attributeMetadataMap,\n                        sina\n                    );\n                }\n                // set attribute metadata map buffer\n                attributeMetadataMap[childAttributeMetadata.id] = childAttributeMetadata;\n            }\n\n            // push membership\n            groupAttributeMetadata.pushMembership(\n                groupAttributeMetadata,\n                childAttributeMetadata,\n                childAttribute.nameInGroup\n            );\n        }\n\n        return groupAttributeMetadata;\n    }\n\n    private getAttributeJsonById(\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>,\n        id: string\n    ): AttributeMetadataBaseJSON {\n        const attributeJson = attributeJsonArray.find((attribute) => attribute.id === id);\n        return attributeJson || undefined;\n    }\n\n    private pushMembership(\n        groupAttributeMetadata: AttributeGroupMetadata,\n        childAttributeMetadata: AttributeMetadataBase,\n        nameInGroup: string\n    ): void {\n        // create membership\n        const childAttributeGroupMembership = this.sina._createAttributeGroupMembership({\n            group: groupAttributeMetadata,\n            attribute: childAttributeMetadata,\n            nameInGroup: nameInGroup,\n        });\n        // push membership to group attribute metadata\n        groupAttributeMetadata.attributes.push(childAttributeGroupMembership);\n\n        // push membership to child attribute metadata\n        if (childAttributeMetadata.type === AttributeType.Group) {\n            childAttributeMetadata.groups.push(childAttributeGroupMembership);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}