{"version":3,"file":"Sina.js","names":["sap","ui","define","core","errors","util","___AttributeType","___AttributeFormatType","___AttributeGroupTextArrangement","___DataSourceType","___MatchingStrategy","___LogicalOperator","___ComparisonOperator","___FacetType","___SuggestionCalculationMode","___SuggestionType","___SortOrder","___ConditionType","___providers_tools_cds_CDSAnnotationsParser","___providers_tools_sors_NavigationTargetGenerator","___SearchResultSet","___SearchResultSetItem","___SearchResultSetItemAttribute","___ObjectSuggestion","___SearchQuery","___ChartQuery","___SuggestionQuery","___DataSourceQuery","___Filter","___ComplexCondition","___SimpleCondition","___AttributeMetadata","___AttributeGroupMetadata","___AttributeGroupMembership","___SearchResultSetItemAttributeGroup","___SearchResultSetItemAttributeGroupMembership","___SearchTermSuggestion","___SearchTermAndDataSourceSuggestion","___DataSourceSuggestion","___SuggestionResultSet","___ChartResultSet","___DataSourceResultSet","___ChartResultSetItem","___DataSourceResultSetItem","___Capabilities","___Configuration","___NavigationTarget","___DataSource","___UserCategoryDataSource","___providers_tools_ItemPostParser","___providers_tools_fiori_SuvNavTargetResolver","___providers_tools_fiori_FioriIntentsResolver","___formatters_ResultValueFormatter","___formatters_NavtargetsInResultSetFormatter","___formatters_HierarchyResultSetFormatter","___FilteredDataSource","___providers_inav2_Provider","___providers_abap_odata_Provider","___HierarchyQuery","___HierarchyNode","___HierarchyResultSet","inav2TypeConverter","___HierarchyNodePath","___HierarchyDisplayType","___formatters_SuggestionResultValueFormatter","___SearchTermAISuggestion","___PublicSina","AttributeType","AttributeFormatType","AttributeGroupTextArrangement","DataSourceSubType","DataSourceType","MatchingStrategy","LogicalOperator","ComparisonOperator","FacetType","SuggestionCalculationMode","SuggestionType","SortOrder","ConditionType","CDSAnnotationsParser","SorsNavigationTargetGenerator","SearchResultSet","SearchResultSetItem","SearchResultSetItemAttribute","ObjectSuggestion","SearchQuery","ChartQuery","SuggestionQuery","DataSourceQuery","Filter","ComplexCondition","SimpleCondition","AttributeMetadata","AttributeGroupMetadata","AttributeGroupMembership","SearchResultSetItemAttributeGroup","SearchResultSetItemAttributeGroupMembership","SearchTermSuggestion","SearchTermAndDataSourceSuggestion","DataSourceSuggestion","SuggestionResultSet","ChartResultSet","DataSourceResultSet","ChartResultSetItem","DataSourceResultSetItem","Capabilities","Configuration","NavigationTarget","DataSource","UserCategoryDataSource","ItemPostParser","SuvNavTargetResolver","FioriIntentsResolver","ResultValueFormatter","NavtargetsInResultSetFormatter","HierarchyResultSetFormatter","FilteredDataSource","InAV2Provider","ABAPODataProvider","HierarchyQuery","HierarchyNode","HierarchyResultSet","HierarchyNodePath","HierarchyDisplayType","SuggestionResultValueFormatter","ESHNoBusinessObjectDatasourceError","SearchTermAISuggestion","PublicSina","Sina","errorList","provider","createSearchNavigationTarget","createSearchQuery","createChartQuery","createHierarchyQuery","createSuggestionQuery","createDataSourceQuery","createFilter","createComplexCondition","createSimpleCondition","createHierarchyNode","createHierarchyNodePath","_createAttributeMetadata","_createAttributeGroupMetadata","_createAttributeGroupMembership","_createSearchResultSetItemAttribute","_createSearchResultSetItemAttributeGroup","_createSearchResultSetItemAttributeGroupMembership","_createSearchResultSetItem","_createSearchResultSet","_createSearchTermSuggestion","_createSearchTermAISuggestion","_createSearchTermAndDataSourceSuggestion","_createDataSourceSuggestion","_createObjectSuggestion","_createSuggestionResultSet","_createChartResultSet","_createHierarchyResultSet","_createChartResultSetItem","_createDataSourceResultSetItem","_createCapabilities","_createConfiguration","_createNavigationTarget","createNavigationTarget","_createSorsNavigationTargetGenerator","_createFioriIntentsResolver","_createCDSAnnotationsParser","_createItemPostParser","_createSuvNavTargetResolver","searchResultSetFormatters","suggestionResultSetFormatters","chartResultSetFormatters","metadataFormatters","dataSources","dataSourceMap","allDataSource","isDummyProvider","configurationPromise","capabilities","configuration","publicSina","constructor","this","createSinaObjectFactory","createDataSource","id","label","type","Category","getPublicSina","hasErrors","length","getErrors","addError","error","push","addErrors","initInternalSearchResultSetFormatters","ui5NumberFormat","NumberFormat","ui5DateFormat","DateFormat","initInternalSuggestionResultValueFormatter","initAsync","indexOf","initCustomFormattersAsync","err","SinaConfigurationError","sina","initializationResult","_formatMetadataAsync","getBusinessObjectDataSources","executeSequentialAsync","formatter","formatAsync","bind","promises","i","searchResultSetFormatter","suggestionResultSetFormatter","chartResultSetFormatter","j","metadataFormatter","Promise","all","loadMetadata","dataSource","resolve","createDataSourceMap","map","Clazz","properties","_createDataSourceResultSet","filteredItems","removeHierarchyDataSources","items","item","dataSourceResultSet","isNeededCache","list","getDataSource","isNeeded","dataSourceToBeChecked","cache","attributeMetaData","attributesMetadata","hierarchyName","hierarchyDisplayType","HierarchyResultView","element","isHierarchyDataSource","splice","BusinessObject","subType","Filtered","UserCategory","CanNotCreateAlreadyExistingDataSourceError","_addDataSource","_createDataSource","insertIndex","checkDataSource","getAllDataSource","result","hidden","getConfigurationAsync","forceReload","personalizedSearch","isPersonalizedSearchEditable","logUserEvent","event","getDebugInfo","dataSourceFromJson","json","fromJson","parseSimpleConditionFromJson","value","isObject","dateFromJson","userDefined","isDynamicValue","dynamic","operator","attribute","attributeLabel","valueLabel","parseComplexConditionFromJson","conditions","conditionJson","parseConditionFromJson","Simple","Complex","UnknownConditionTypeError","parseFilterFromJson","rootCondition","searchTerm","OnlyComplexConditionAllowedError","parseNavigationTargetFromJson","createStaticHierarchySearchNavigationTarget","hierarchyNodeId","hierarchyNodeLabel","navigationTargetLabel","hierarchyNodeAttributeName","hierarchyAttribute","helperHierarchyDataource","getHierarchyDataSource","filter","childrenCondition","DescendantOf","autoInsertCondition","__exports","__esModule"],"sources":["Sina.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../core/core\";\nimport * as errors from \"../core/errors\";\nimport * as util from \"../core/util\";\nimport { AttributeType } from \"./AttributeType\";\nimport { AttributeFormatType } from \"./AttributeFormatType\";\nimport { AttributeGroupTextArrangement } from \"./AttributeGroupTextArrangement\";\nimport { DataSourceSubType, DataSourceType } from \"./DataSourceType\";\nimport { MatchingStrategy } from \"./MatchingStrategy\";\nimport { LogicalOperator } from \"./LogicalOperator\";\nimport { ComparisonOperator } from \"./ComparisonOperator\";\nimport { FacetType } from \"./FacetType\";\nimport { SuggestionCalculationMode } from \"./SuggestionCalculationMode\";\nimport { SuggestionType } from \"./SuggestionType\";\nimport { SortOrder } from \"./SortOrder\";\nimport { ConditionType } from \"./ConditionType\";\nimport {\n    CDSAnnotationsParser,\n    CDSAnnotationsParserOptions,\n} from \"../providers/tools/cds/CDSAnnotationsParser\";\nimport {\n    NavigationTargetGenerator as SorsNavigationTargetGenerator,\n    NavigationTargetGeneratorOptions,\n} from \"../providers/tools/sors/NavigationTargetGenerator\";\nimport { SearchResultSet, SearchResultSetOptions } from \"./SearchResultSet\";\nimport { SearchResultSetItem, SearchResultSetItemOptions } from \"./SearchResultSetItem\";\nimport {\n    SearchResultSetItemAttribute,\n    SearchResultSetItemAttributeOptions,\n} from \"./SearchResultSetItemAttribute\";\nimport { ObjectSuggestion, ObjectSuggestionOptions } from \"./ObjectSuggestion\";\nimport { SearchQuery, SearchQueryOptions } from \"./SearchQuery\";\nimport { ChartQuery, ChartQueryOptions } from \"./ChartQuery\";\nimport { SuggestionQuery, SuggestionQueryOptions } from \"./SuggestionQuery\";\nimport { DataSourceQuery, DataSourceQueryOptions } from \"./DataSourceQuery\";\nimport { Filter, FilterOptions } from \"./Filter\";\nimport { ComplexCondition, ComplexConditionJSON, ComplexConditionProperties } from \"./ComplexCondition\";\nimport { SimpleCondition, SimpleConditionJSON, SimpleConditionProperties } from \"./SimpleCondition\";\nimport { AttributeMetadata, AttributeMetadataOptions } from \"./AttributeMetadata\";\nimport { AttributeGroupMetadata, AttributeGroupMetadataOptions } from \"./AttributeGroupMetadata\";\nimport { AttributeGroupMembership, AttributeGroupMembershipOptions } from \"./AttributeGroupMembership\";\nimport {\n    SearchResultSetItemAttributeGroup,\n    SearchResultSetItemAttributeGroupOptions,\n} from \"./SearchResultSetItemAttributeGroup\";\nimport {\n    SearchResultSetItemAttributeGroupMembership,\n    SearchResultSetItemAttributeGroupMembershipOptions,\n} from \"./SearchResultSetItemAttributeGroupMembership\";\nimport { SearchTermSuggestion, SearchTermSuggestionOptions } from \"./SearchTermSuggestion\";\nimport {\n    SearchTermAndDataSourceSuggestion,\n    SearchTermAndDataSourceSuggestionOptions,\n} from \"./SearchTermAndDataSourceSuggestion\";\nimport { DataSourceSuggestion, DataSourceSuggestionOptions } from \"./DataSourceSuggestion\";\nimport { SuggestionResultSet, SuggestionResultSetOptions } from \"./SuggestionResultSet\";\nimport { ChartResultSet, ChartResultSetOptions } from \"./ChartResultSet\";\nimport { DataSourceResultSet, DataSourceResultSetOptions } from \"./DataSourceResultSet\";\nimport { ChartResultSetItem, ChartResultSetItemOptions } from \"./ChartResultSetItem\";\nimport { DataSourceResultSetItem, DataSourceResultSetItemOptions } from \"./DataSourceResultSetItem\";\nimport { Capabilities, CapabilitiesOptions } from \"./Capabilities\";\nimport { Configuration, ConfigurationOptions } from \"./Configuration\";\nimport { NavigationTarget, NavigationTargetJson, NavigationTargetOptions } from \"./NavigationTarget\";\nimport { ChartResultSetFormatter, Formatter } from \"./formatters/Formatter\";\nimport { DataSource, DataSourceJSON, DataSourceAndAttributesJSON, DataSourceProperties } from \"./DataSource\";\nimport { UserCategoryDataSource } from \"./UserCategoryDataSource\";\nimport { ItemPostParser, ItemPostParserOptions } from \"../providers/tools/ItemPostParser\";\nimport {\n    SuvNavTargetResolver,\n    SuvNavTargetResolverOptions,\n} from \"../providers/tools/fiori/SuvNavTargetResolver\";\nimport {\n    FioriIntentsResolver,\n    FioriIntentsResolverOptions,\n} from \"../providers/tools/fiori/FioriIntentsResolver\";\nimport { ResultValueFormatter } from \"./formatters/ResultValueFormatter\";\nimport { NavtargetsInResultSetFormatter } from \"./formatters/NavtargetsInResultSetFormatter\";\nimport { HierarchyResultSetFormatter } from \"./formatters/HierarchyResultSetFormatter\";\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { AbstractProvider, AbstractProviderConfiguration } from \"../providers/AbstractProvider\";\nimport { FilteredDataSource, FilteredDataSourceProperties } from \"./FilteredDataSource\";\nimport { Provider as InAV2Provider } from \"../providers/inav2/Provider\";\nimport { Provider as ABAPODataProvider } from \"../providers/abap_odata/Provider\";\nimport { SinaConfiguration } from \"./SinaConfiguration\";\nimport { Condition } from \"./Condition\";\nimport { HierarchyQuery, HierarchyQueryOptions } from \"./HierarchyQuery\";\nimport { HierarchyNode, HierarchyNodeProperties } from \"./HierarchyNode\";\nimport { HierarchyResultSet, HierarchyResultSetOptions } from \"./HierarchyResultSet\";\nimport * as inav2TypeConverter from \"../providers/inav2/typeConverter\";\nimport { HierarchyNodePath, HierarchyNodePathProperties } from \"./HierarchyNodePath\";\nimport { HierarchyDisplayType } from \"./HierarchyDisplayType\";\nimport { Value } from \"./types\";\nimport { SuggestionResultValueFormatter } from \"./formatters/SuggestionResultValueFormatter\";\nimport { ESHNoBusinessObjectDatasourceError } from \"../core/errors\";\nimport { SearchTermAISuggestion } from \"./SearchTermAISuggestion\";\nimport { PublicSina } from \"./PublicSina\";\n\n/**\n * The Enterprise Search Client API.\n */\nexport class Sina {\n    errorList: Array<Error> = [];\n    inav2TypeConverter: typeof inav2TypeConverter;\n    provider: AbstractProvider;\n    createSearchNavigationTarget: (filter: Filter, label: string) => NavigationTarget;\n    createSearchQuery: (properties?: SearchQueryOptions) => SearchQuery;\n    createChartQuery: (properties: ChartQueryOptions) => ChartQuery;\n    createHierarchyQuery: (properties: HierarchyQueryOptions) => HierarchyQuery;\n    createSuggestionQuery: (properties?: SuggestionQueryOptions) => SuggestionQuery;\n    createDataSourceQuery: (properties: DataSourceQueryOptions) => DataSourceQuery;\n    createFilter: (properties?: FilterOptions) => Filter;\n    createComplexCondition: (properties?: ComplexConditionProperties) => ComplexCondition;\n    createSimpleCondition: (properties: SimpleConditionProperties) => SimpleCondition;\n    createHierarchyNode: (properties: HierarchyNodeProperties) => HierarchyNode;\n    createHierarchyNodePath: (properties: HierarchyNodePathProperties) => HierarchyNodePath;\n    _createAttributeMetadata: (properties: AttributeMetadataOptions) => AttributeMetadata;\n    _createAttributeGroupMetadata: (properties: AttributeGroupMetadataOptions) => AttributeGroupMetadata;\n    _createAttributeGroupMembership: (\n        properties: AttributeGroupMembershipOptions\n    ) => AttributeGroupMembership;\n    _createSearchResultSetItemAttribute: (\n        properties: SearchResultSetItemAttributeOptions\n    ) => SearchResultSetItemAttribute;\n    _createSearchResultSetItemAttributeGroup: (\n        properties: SearchResultSetItemAttributeGroupOptions\n    ) => SearchResultSetItemAttributeGroup;\n    _createSearchResultSetItemAttributeGroupMembership: (\n        properties: SearchResultSetItemAttributeGroupMembershipOptions\n    ) => SearchResultSetItemAttributeGroupMembership;\n    _createSearchResultSetItem: (properties: SearchResultSetItemOptions) => SearchResultSetItem;\n    _createSearchResultSet: (properties: SearchResultSetOptions) => SearchResultSet;\n    _createSearchTermSuggestion: (properties: SearchTermSuggestionOptions) => SearchTermSuggestion;\n    _createSearchTermAISuggestion: (properties: SearchTermSuggestionOptions) => SearchTermAISuggestion;\n    _createSearchTermAndDataSourceSuggestion: (\n        properties: SearchTermAndDataSourceSuggestionOptions\n    ) => SearchTermAndDataSourceSuggestion;\n    _createDataSourceSuggestion: (properties: DataSourceSuggestionOptions) => DataSourceSuggestion;\n    _createObjectSuggestion: (properties: ObjectSuggestionOptions) => ObjectSuggestion;\n    _createSuggestionResultSet: (properties: SuggestionResultSetOptions) => SuggestionResultSet;\n    _createChartResultSet: (properties: ChartResultSetOptions) => ChartResultSet;\n    _createHierarchyResultSet: (properties: HierarchyResultSetOptions) => HierarchyResultSet;\n    _createChartResultSetItem: (properties: ChartResultSetItemOptions) => ChartResultSetItem;\n    _createDataSourceResultSetItem: (properties: DataSourceResultSetItemOptions) => DataSourceResultSetItem;\n    _createCapabilities: (properties?: CapabilitiesOptions) => Capabilities;\n    _createConfiguration: (properties: ConfigurationOptions) => Configuration;\n    _createNavigationTarget: (properties: NavigationTargetOptions) => NavigationTarget;\n    createNavigationTarget: (properties: NavigationTargetOptions) => NavigationTarget;\n    _createSorsNavigationTargetGenerator: (\n        properties: NavigationTargetGeneratorOptions\n    ) => SorsNavigationTargetGenerator;\n    _createFioriIntentsResolver: (properties?: FioriIntentsResolverOptions) => FioriIntentsResolver;\n    _createCDSAnnotationsParser: (properties: CDSAnnotationsParserOptions) => CDSAnnotationsParser;\n    _createItemPostParser: (properties: ItemPostParserOptions) => ItemPostParser;\n    _createSuvNavTargetResolver: (properties?: SuvNavTargetResolverOptions) => SuvNavTargetResolver;\n    searchResultSetFormatters: Formatter[];\n    suggestionResultSetFormatters: Formatter[];\n    chartResultSetFormatters: ChartResultSetFormatter[];\n    metadataFormatters: Formatter[];\n    dataSources: DataSource[];\n    dataSourceMap: { [key: string]: DataSource };\n    allDataSource: DataSource;\n    DataSourceType: typeof DataSourceType;\n    HierarchyDisplayType: typeof HierarchyDisplayType;\n    DataSourceSubType: typeof DataSourceSubType;\n    isDummyProvider: boolean;\n    configurationPromise: Promise<Configuration>;\n    capabilities: Capabilities;\n    core: typeof core;\n    errors: typeof errors;\n    util: typeof util;\n    SortOrder: typeof SortOrder;\n    ComparisonOperator: typeof ComparisonOperator;\n    LogicalOperator: typeof LogicalOperator;\n    AttributeGroupTextArrangement: typeof AttributeGroupTextArrangement;\n    AttributeType: typeof AttributeType;\n    AttributeFormatType: typeof AttributeFormatType;\n    FacetType: typeof FacetType;\n    SuggestionType: typeof SuggestionType;\n    ConditionType: typeof ConditionType;\n    SuggestionCalculationMode: typeof SuggestionCalculationMode;\n    MatchingStrategy: typeof MatchingStrategy;\n    configuration: SinaConfiguration;\n    publicSina: PublicSina;\n\n    constructor(provider: AbstractProvider) {\n        this.core = core; // convenience: expose core lib\n        this.errors = errors; // convenience: expose core lib\n        this.util = util; // convenience: expose util lib\n        this.inav2TypeConverter = inav2TypeConverter; // do not use except for inav2 compatability\n        this.provider = provider;\n        this.createSearchQuery = this.createSinaObjectFactory(SearchQuery);\n        this.createChartQuery = this.createSinaObjectFactory(ChartQuery);\n        this.createHierarchyQuery = this.createSinaObjectFactory(HierarchyQuery);\n        this.createSuggestionQuery = this.createSinaObjectFactory(SuggestionQuery);\n        this.createDataSourceQuery = this.createSinaObjectFactory(DataSourceQuery);\n        this.createFilter = this.createSinaObjectFactory(Filter);\n        this.createComplexCondition = this.createSinaObjectFactory(ComplexCondition);\n        this.createSimpleCondition = this.createSinaObjectFactory(SimpleCondition);\n        this.createHierarchyNode = this.createSinaObjectFactory(HierarchyNode);\n        this.createHierarchyNodePath = this.createSinaObjectFactory(HierarchyNodePath);\n        this._createAttributeMetadata = this.createSinaObjectFactory(AttributeMetadata);\n        this._createAttributeGroupMetadata = this.createSinaObjectFactory(AttributeGroupMetadata);\n        this._createAttributeGroupMembership = this.createSinaObjectFactory(AttributeGroupMembership);\n        this._createSearchResultSetItemAttribute = this.createSinaObjectFactory(SearchResultSetItemAttribute);\n        this._createSearchResultSetItemAttributeGroup = this.createSinaObjectFactory(\n            SearchResultSetItemAttributeGroup\n        );\n        this._createSearchResultSetItemAttributeGroupMembership = this.createSinaObjectFactory(\n            SearchResultSetItemAttributeGroupMembership\n        );\n        this._createSearchResultSetItem = this.createSinaObjectFactory(SearchResultSetItem);\n        this._createSearchResultSet = this.createSinaObjectFactory(SearchResultSet);\n        this._createSearchTermSuggestion = this.createSinaObjectFactory(SearchTermSuggestion);\n        this._createSearchTermAISuggestion = this.createSinaObjectFactory(SearchTermAISuggestion);\n        this._createSearchTermAndDataSourceSuggestion = this.createSinaObjectFactory(\n            SearchTermAndDataSourceSuggestion\n        );\n        this._createDataSourceSuggestion = this.createSinaObjectFactory(DataSourceSuggestion);\n        this._createObjectSuggestion = this.createSinaObjectFactory(ObjectSuggestion);\n        this._createSuggestionResultSet = this.createSinaObjectFactory(SuggestionResultSet);\n        this._createChartResultSet = this.createSinaObjectFactory(ChartResultSet);\n        this._createHierarchyResultSet = this.createSinaObjectFactory(HierarchyResultSet);\n        this._createChartResultSetItem = this.createSinaObjectFactory(ChartResultSetItem);\n        this._createDataSourceResultSetItem = this.createSinaObjectFactory(DataSourceResultSetItem);\n        this._createCapabilities = this.createSinaObjectFactory(Capabilities);\n        this._createConfiguration = this.createSinaObjectFactory(Configuration);\n        this._createNavigationTarget = this.createSinaObjectFactory(NavigationTarget); // deprecated\n        this.createNavigationTarget = this.createSinaObjectFactory(NavigationTarget);\n        this._createSorsNavigationTargetGenerator = this.createSinaObjectFactory(\n            SorsNavigationTargetGenerator\n        );\n        this._createFioriIntentsResolver = this.createSinaObjectFactory(FioriIntentsResolver);\n        this._createCDSAnnotationsParser = this.createSinaObjectFactory(CDSAnnotationsParser);\n        this._createItemPostParser = this.createSinaObjectFactory(ItemPostParser);\n        this._createSuvNavTargetResolver = this.createSinaObjectFactory(SuvNavTargetResolver);\n        this.searchResultSetFormatters = [];\n        this.suggestionResultSetFormatters = [];\n        this.chartResultSetFormatters = [];\n        this.metadataFormatters = [];\n        this.dataSources = [];\n        this.dataSourceMap = {};\n        this.allDataSource = this.createDataSource({\n            id: \"All\",\n            label: \"All\",\n            type: DataSourceType.Category,\n        });\n        this.DataSourceType = DataSourceType;\n        this.DataSourceSubType = DataSourceSubType;\n        this.HierarchyDisplayType = HierarchyDisplayType;\n        this.AttributeGroupTextArrangement = AttributeGroupTextArrangement;\n        this.AttributeType = AttributeType;\n        this.AttributeFormatType = AttributeFormatType;\n        this.FacetType = FacetType;\n        this.SuggestionType = SuggestionType;\n        this.ConditionType = ConditionType;\n        this.SuggestionCalculationMode = SuggestionCalculationMode;\n        this.SortOrder = SortOrder;\n        this.MatchingStrategy = MatchingStrategy;\n        this.ComparisonOperator = ComparisonOperator;\n        this.LogicalOperator = LogicalOperator;\n    }\n\n    public getPublicSina(): PublicSina {\n        if (this.publicSina) {\n            return this.publicSina;\n        }\n        this.publicSina = new PublicSina(this);\n        return this.publicSina;\n    }\n\n    public hasErrors(): boolean {\n        return this.errorList.length > 0;\n    }\n\n    public getErrors(): Array<Error> {\n        return this.errorList;\n    }\n\n    public addError(error: Error) {\n        this.errorList.push(error);\n    }\n\n    public addErrors(errors: Array<Error>) {\n        this.errorList.push(...errors);\n    }\n\n    private initInternalSearchResultSetFormatters(configuration: SinaConfiguration): void {\n        this.searchResultSetFormatters.push(new NavtargetsInResultSetFormatter());\n        // this.searchResultSetFormatters.push(new RemovePureAdvancedSearchFacetsFormatter());\n        this.searchResultSetFormatters.push(\n            new ResultValueFormatter({\n                ui5NumberFormat: configuration.NumberFormat,\n                ui5DateFormat: configuration.DateFormat,\n            })\n        );\n        this.searchResultSetFormatters.push(new HierarchyResultSetFormatter());\n    }\n    private initInternalSuggestionResultValueFormatter(configuration: SinaConfiguration): void {\n        this.suggestionResultSetFormatters.push(\n            new SuggestionResultValueFormatter({\n                ui5NumberFormat: configuration.NumberFormat,\n                ui5DateFormat: configuration.DateFormat,\n            })\n        );\n    }\n\n    async initAsync(configuration: SinaConfiguration): Promise<void> {\n        this.configuration = configuration;\n        this.isDummyProvider = configuration.provider.indexOf(\"dummy\") > -1;\n        this.provider.label = configuration.label;\n\n        this.initInternalSearchResultSetFormatters(configuration);\n        this.initInternalSuggestionResultValueFormatter(configuration);\n\n        // init custom formatters shall after the registration of the internal formatters\n        try {\n            await this.initCustomFormattersAsync(configuration);\n        } catch (err) {\n            throw new errors.SinaConfigurationError(\"_evaluateConfigurationAsync\", err);\n        }\n\n        configuration.sina = this;\n        let initializationResult = await this.provider.initAsync(\n            configuration as AbstractProviderConfiguration\n        );\n        initializationResult = initializationResult || {\n            capabilities: null,\n        };\n        this.capabilities = initializationResult.capabilities || this._createCapabilities({ sina: this });\n\n        // run meta data formatters\n        // shall after the registration of the custom meta data formatter(initCustomFormattersAsync)\n        try {\n            await this._formatMetadataAsync();\n        } catch (err) {\n            throw new errors.SinaConfigurationError(\"metadataformatter(s)->formatAsync\", err);\n        }\n        // initialization\n        if (configuration.initAsync) {\n            try {\n                await configuration.initAsync(this);\n            } catch (err) {\n                throw new errors.SinaConfigurationError(\"configuration->initAsync\", err);\n            }\n        }\n        if (this.getBusinessObjectDataSources().length === 0 && !this.isDummyProvider) {\n            throw new ESHNoBusinessObjectDatasourceError();\n        }\n    }\n\n    private _formatMetadataAsync(): Promise<void> {\n        return core.executeSequentialAsync(\n            this.metadataFormatters,\n            function (this: Sina, formatter: Formatter) {\n                return formatter.formatAsync({\n                    dataSources: this.dataSources,\n                });\n            }.bind(this)\n        );\n    }\n\n    private async initCustomFormattersAsync(configuration: SinaConfiguration): Promise<void[]> {\n        const promises = [];\n\n        // search result set formatters\n        if (configuration.searchResultSetFormatters) {\n            for (let i = 0; i < configuration.searchResultSetFormatters.length; ++i) {\n                const searchResultSetFormatter = configuration.searchResultSetFormatters[i];\n                this.searchResultSetFormatters.push(searchResultSetFormatter);\n                if (searchResultSetFormatter.initAsync) {\n                    promises.push(searchResultSetFormatter.initAsync());\n                }\n            }\n        }\n\n        // suggestion result set formatters\n        if (configuration.suggestionResultSetFormatters) {\n            for (let i = 0; i < configuration.suggestionResultSetFormatters.length; ++i) {\n                const suggestionResultSetFormatter = configuration.suggestionResultSetFormatters[i];\n                this.suggestionResultSetFormatters.push(suggestionResultSetFormatter);\n                if (suggestionResultSetFormatter.initAsync) {\n                    promises.push(suggestionResultSetFormatter.initAsync());\n                }\n            }\n        }\n\n        // chart result set formatters\n        if (configuration.chartResultSetFormatters) {\n            for (let i = 0; i < configuration.chartResultSetFormatters.length; ++i) {\n                const chartResultSetFormatter = configuration.chartResultSetFormatters[i];\n                this.chartResultSetFormatters.push(chartResultSetFormatter);\n                if (chartResultSetFormatter.initAsync) {\n                    promises.push(chartResultSetFormatter.initAsync());\n                }\n            }\n        }\n\n        // metadata formatters\n        if (configuration.metadataFormatters) {\n            for (let j = 0; j < configuration.metadataFormatters.length; ++j) {\n                const metadataFormatter = configuration.metadataFormatters[j];\n                this.metadataFormatters.push(metadataFormatter);\n                if (metadataFormatter.initAsync) {\n                    promises.push(metadataFormatter.initAsync());\n                }\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    async loadMetadata(dataSource: DataSource): Promise<void> {\n        // do not use\n        // only for compatability inav2\n        if (this.provider instanceof InAV2Provider) {\n            if (this.provider.loadMetadata) {\n                return this.provider.loadMetadata(dataSource);\n            }\n        }\n        return Promise.resolve();\n    }\n\n    createDataSourceMap(dataSources: Array<DataSource>): { [id: string]: DataSource } {\n        const map = {};\n        for (let i = 0; i < dataSources.length; ++i) {\n            const dataSource = dataSources[i];\n            map[dataSource.id] = dataSource;\n        }\n        return map;\n    }\n\n    private createSinaObjectFactory<T extends SinaObject>(\n        Clazz: new (properties: SinaObjectProperties) => T\n    ): (properties?: SinaObjectProperties) => T {\n        return function (properties) {\n            properties = properties ?? { sina: this };\n            properties.sina = this;\n            try {\n                return new Clazz(properties);\n            } finally {\n                delete properties.sina;\n            }\n        };\n    }\n\n    _createDataSourceResultSet(properties: DataSourceResultSetOptions): DataSourceResultSet {\n        const filteredItems = this.removeHierarchyDataSources(\n            properties.items as Array<DataSourceResultSetItem>,\n            (item: DataSourceResultSetItem) => item.dataSource\n        );\n        properties.items = filteredItems;\n        const dataSourceResultSet = new DataSourceResultSet(properties);\n        dataSourceResultSet.sina = this;\n        return dataSourceResultSet;\n    }\n\n    isNeededCache: Record<string, boolean> = {};\n    removeHierarchyDataSources<T>(list: Array<T>, getDataSource: (T) => DataSource): Array<T> {\n        const isNeeded = (dataSourceToBeChecked: DataSource): boolean => {\n            const cache = this.isNeededCache[dataSourceToBeChecked.id];\n            if (typeof cache !== \"undefined\") {\n                return cache;\n            }\n            for (const dataSource of this.dataSources) {\n                for (const attributeMetaData of dataSource.attributesMetadata) {\n                    if (\n                        (attributeMetaData as AttributeMetadata).hierarchyName ===\n                            dataSourceToBeChecked.hierarchyName &&\n                        (attributeMetaData as AttributeMetadata).hierarchyDisplayType ===\n                            HierarchyDisplayType.HierarchyResultView\n                    ) {\n                        this.isNeededCache[dataSourceToBeChecked.id] = true;\n                        return true;\n                    }\n                }\n            }\n            this.isNeededCache[dataSourceToBeChecked.id] = false;\n            return false;\n        };\n        for (let i = 0; i < list.length; i++) {\n            const element = list[i];\n            const dataSource = getDataSource(element);\n            if (!dataSource.isHierarchyDataSource) {\n                continue;\n            }\n            if (!isNeeded(dataSource)) {\n                list.splice(i, 1);\n                i--;\n            }\n        }\n        return list;\n    }\n\n    createDataSource(properties: DataSourceProperties | FilteredDataSourceProperties): DataSource {\n        properties.sina = this;\n        let dataSource;\n        switch (properties.type) {\n            case DataSourceType.BusinessObject:\n                switch (properties.subType) {\n                    case DataSourceSubType.Filtered:\n                        dataSource = new FilteredDataSource(properties as FilteredDataSourceProperties);\n                        break;\n                    default:\n                        dataSource = new DataSource(properties);\n                }\n                break;\n            case DataSourceType.UserCategory:\n                dataSource = new UserCategoryDataSource(properties);\n                break;\n            default:\n                dataSource = new DataSource(properties);\n        }\n        if (this.dataSourceMap[dataSource.id]) {\n            throw new errors.CanNotCreateAlreadyExistingDataSourceError(dataSource.id);\n        }\n        this._addDataSource(dataSource);\n        return dataSource;\n    }\n\n    /**\n     *\n     * @deprecated Use sina.createDataSource() instead\n     */\n    _createDataSource(properties: DataSourceProperties): DataSource {\n        return this.createDataSource(properties);\n    }\n\n    private _addDataSource(dataSource: DataSource): void {\n        if (\n            dataSource.type === DataSourceType.BusinessObject &&\n            dataSource.subType === DataSourceSubType.Filtered\n        ) {\n            // 1 filtered datasources\n            let insertIndex = -1;\n            for (let i = this.dataSources.length - 1; i >= 1; --i) {\n                const checkDataSource = this.dataSources[i];\n                if (\n                    checkDataSource.type === DataSourceType.BusinessObject &&\n                    checkDataSource.subType === DataSourceSubType.Filtered\n                ) {\n                    insertIndex = i;\n                    break;\n                }\n            }\n            if (insertIndex >= 0) {\n                this.dataSources.splice(insertIndex + 1, 0, dataSource);\n            } else {\n                this.dataSources.push(dataSource);\n            }\n        } else {\n            // 2 other datasources\n            this.dataSources.push(dataSource);\n        }\n        this.dataSourceMap[dataSource.id] = dataSource;\n    }\n\n    getAllDataSource(): DataSource {\n        return this.allDataSource;\n    }\n\n    getBusinessObjectDataSources(): DataSource[] {\n        const result = [];\n        for (let i = 0; i < this.dataSources.length; ++i) {\n            const dataSource = this.dataSources[i];\n            if (\n                !dataSource.hidden &&\n                dataSource.type === DataSourceType.BusinessObject &&\n                dataSource.subType !== DataSourceSubType.Filtered\n            ) {\n                result.push(dataSource);\n            }\n        }\n        return this.removeHierarchyDataSources(result, (dataSource: DataSource) => dataSource);\n    }\n\n    getDataSource(id: string): DataSource {\n        return this.dataSourceMap[id];\n    }\n\n    async getConfigurationAsync(properties: { forceReload?: boolean } = {}): Promise<Configuration> {\n        if (this.provider instanceof InAV2Provider || this.provider instanceof ABAPODataProvider) {\n            if (this.configurationPromise && !properties.forceReload) {\n                return this.configurationPromise;\n            }\n            this.configurationPromise = this.provider.getConfigurationAsync();\n            return this.configurationPromise;\n        }\n        return Promise.resolve(\n            this._createConfiguration({\n                personalizedSearch: false,\n                isPersonalizedSearchEditable: false,\n            })\n        );\n    }\n\n    logUserEvent(event: unknown): void {\n        this.provider.logUserEvent(event);\n    }\n\n    getDebugInfo(): string {\n        return this.provider.getDebugInfo();\n    }\n\n    dataSourceFromJson(json: DataSourceJSON | DataSourceAndAttributesJSON): DataSource {\n        return DataSource.fromJson(json, this);\n    }\n\n    parseSimpleConditionFromJson(json: SimpleConditionJSON): SimpleCondition {\n        let value;\n        if (core.isObject(json.value)) {\n            value = util.dateFromJson(json.value);\n        } else {\n            value = json.value;\n        }\n        // Following should satisfy no-unneeded-ternary eslint rule:\n        let userDefined;\n        if (json.userDefined) {\n            userDefined = true;\n        } else {\n            userDefined = false;\n        }\n        let isDynamicValue;\n        if (json.dynamic) {\n            isDynamicValue = true;\n        } else {\n            isDynamicValue = false;\n        }\n        return this.createSimpleCondition({\n            operator: json.operator,\n            attribute: json.attribute,\n            value: value,\n            attributeLabel: json.attributeLabel,\n            valueLabel: json.valueLabel,\n            userDefined: userDefined,\n            isDynamicValue: isDynamicValue,\n        });\n    }\n\n    parseComplexConditionFromJson(json: ComplexConditionJSON): ComplexCondition {\n        const conditions = [];\n        for (let i = 0; i < json.conditions.length; ++i) {\n            const conditionJson = json.conditions[i];\n            conditions.push(this.parseConditionFromJson(conditionJson));\n        }\n        // Following should satisfy no-unneeded-ternary eslint rule:\n        let userDefined;\n        if (json.userDefined) {\n            userDefined = true;\n        } else {\n            userDefined = false;\n        }\n        return this.createComplexCondition({\n            operator: json.operator,\n            conditions: conditions,\n            attributeLabel: json.attributeLabel,\n            valueLabel: json.valueLabel,\n            userDefined: userDefined,\n        });\n    }\n\n    parseConditionFromJson(json: SimpleConditionJSON | ComplexConditionJSON): Condition {\n        switch (json.type) {\n            case ConditionType.Simple:\n                return this.parseSimpleConditionFromJson(json as SimpleConditionJSON);\n            case ConditionType.Complex:\n                return this.parseComplexConditionFromJson(json as ComplexConditionJSON);\n            default:\n                throw new errors.UnknownConditionTypeError(json.type);\n        }\n    }\n\n    parseFilterFromJson(json: {\n        searchTerm: string;\n        rootCondition: ComplexConditionJSON;\n        dataSource: DataSource;\n    }): Filter {\n        const rootCondition = this.parseConditionFromJson(json.rootCondition);\n        if (rootCondition instanceof ComplexCondition) {\n            return this.createFilter({\n                searchTerm: json?.searchTerm,\n                rootCondition,\n                dataSource: this.dataSourceFromJson(json.dataSource),\n            });\n        } else {\n            throw new errors.OnlyComplexConditionAllowedError();\n        }\n    }\n\n    parseNavigationTargetFromJson(json: NavigationTargetJson) {\n        return this.createNavigationTarget(json);\n    }\n\n    // Assemble hiearchy down navigation link as title navigation\n    createStaticHierarchySearchNavigationTarget(\n        hierarchyNodeId: Value,\n        hierarchyNodeLabel: string,\n        dataSource: DataSource,\n        navigationTargetLabel: string,\n        hierarchyNodeAttributeName?: string\n    ): NavigationTarget {\n        if (!hierarchyNodeAttributeName) {\n            hierarchyNodeAttributeName = dataSource.hierarchyAttribute;\n            if (!hierarchyNodeAttributeName) {\n                const helperHierarchyDataource = dataSource.getHierarchyDataSource();\n                if (helperHierarchyDataource && helperHierarchyDataource.hierarchyAttribute) {\n                    hierarchyNodeAttributeName = helperHierarchyDataource.hierarchyAttribute;\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        const filter = new Filter({\n            dataSource: dataSource,\n            searchTerm: \"\", //navigation mode, ignore content in search input box\n            sina: this,\n        });\n\n        // DescendantOf $$ROOT$$ === search for all without any filter condition\n        if (hierarchyNodeId !== \"$$ROOT$$\") {\n            // Set operator as DescendantOf and let Sina SearchQuery _executeSearchQuery decide the final operator/operators\n            const childrenCondition = new SimpleCondition({\n                attribute: hierarchyNodeAttributeName,\n                operator: ComparisonOperator.DescendantOf,\n                value: hierarchyNodeId,\n                valueLabel: hierarchyNodeLabel,\n            });\n            filter.autoInsertCondition(childrenCondition);\n        }\n\n        return this.createSearchNavigationTarget(filter, navigationTargetLabel || \"Children Folders\");\n    }\n\n    getHierarchyDataSource(hierarchyName: string): DataSource {\n        const dataSources = this.dataSources;\n        for (let i = 0; i < dataSources.length; ++i) {\n            const dataSource = dataSources[i];\n            if (dataSource.type !== this.DataSourceType.BusinessObject) {\n                continue;\n            }\n            if (!dataSource.isHierarchyDataSource) {\n                continue;\n            }\n            if (hierarchyName === dataSource.hierarchyName) {\n                return dataSource;\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}