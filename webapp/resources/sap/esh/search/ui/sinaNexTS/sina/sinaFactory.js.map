{"version":3,"file":"sinaFactory.js","names":["sap","ui","define","sinaLog","___core_errors","util","___providers_abap_odata_Provider","___providers_dummy_Provider","___providers_hana_odata_Provider","___providers_inav2_Provider","___providers_multi_Provider","___providers_sample_Provider","___providers_sample2_Provider","___Sina","___SinaConfiguration","___i18n","__ui5_require_async","path","Promise","resolve","reject","require","module","__esModule","endsWith","default","Object","defineProperty","value","err","NoValidEnterpriseSearchAPIConfigurationFoundError","ABAPODataProvider","DummyProvider","HANAODataProvider","INAV2Provider","MultiProvider","SampleProvider","Sample2Provider","Sina","AvailableProviders","_normalizeConfiguration","injectGetText","process","env","NODE_ENV","logTest","Log","level","Severity","DEBUG","debug","async","createAsync","configuration","normalizedConfiguration","getText","logTarget","persistency","logLevel","log","provider","providerInstance","HANA_ODATA","ABAP_ODATA","INAV2","MULTI","SAMPLE","SAMPLE2","MOCK_NLQRESULTS","MockNlqResultsProvider","MOCK_SUGGESTIONTYPES","MockSuggestionTypesProvider","MOCK_DELETEANDREORDER","MockDeleteAndReorderProvider","DUMMY","Error","sina","initAsync","createByTrialAsync","inputConfigurations","checkSuccessCallback","configurations","all","map","bind","this","then","normalizedConfigurations","_mixinUrlConfiguration","_createSinaRecursively","_readConfigurationFromUrl","sinaConfiguration","getUrlParameter","sinaProvider","errors","providersTried","doCreate","index","length","finalError","join","error","push","info","configurationFromUrl","_mergeConfiguration","found","i","splice","configuration1","configuration2","property","__exports"],"sources":["sinaFactory.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as sinaLog from \"../core/Log\";\nimport { NoValidEnterpriseSearchAPIConfigurationFoundError } from \"../core/errors\";\nimport * as util from \"../core/util\";\nimport { AbstractProvider } from \"../providers/AbstractProvider\";\nimport { Provider as ABAPODataProvider } from \"../providers/abap_odata/Provider\";\nimport { Provider as DummyProvider } from \"../providers/dummy/Provider\";\nimport { Provider as HANAODataProvider } from \"../providers/hana_odata/Provider\";\nimport { Provider as INAV2Provider } from \"../providers/inav2/Provider\";\nimport { MultiProvider } from \"../providers/multi/Provider\";\nimport { Provider as SampleProvider } from \"../providers/sample/Provider\";\nimport { Provider as Sample2Provider } from \"../providers/sample2/Provider\";\nimport { Sina } from \"./Sina\";\nimport { AvailableProviders, SinaConfiguration, _normalizeConfiguration } from \"./SinaConfiguration\";\nimport { injectGetText } from \"./i18n\";\n\nif (\n    typeof process !== \"undefined\" &&\n    // eslint-disable-next-line no-undef\n    process.env &&\n    // eslint-disable-next-line no-undef\n    process.env.NODE_ENV &&\n    // eslint-disable-next-line no-undef\n    process.env.NODE_ENV === \"debug\"\n) {\n    const logTest = new sinaLog.Log();\n    sinaLog.Log.level = sinaLog.Severity.DEBUG;\n    logTest.debug(\"SINA log level set to debug!\");\n}\n\nexport async function createAsync(configuration: SinaConfiguration | string): Promise<Sina> {\n    const normalizedConfiguration = await _normalizeConfiguration(configuration);\n    if (normalizedConfiguration.getText) {\n        injectGetText(normalizedConfiguration.getText);\n    }\n    if (normalizedConfiguration.logTarget) {\n        sinaLog.Log.persistency = normalizedConfiguration.logTarget;\n    }\n    if (typeof normalizedConfiguration.logLevel !== \"undefined\") {\n        sinaLog.Log.level = normalizedConfiguration.logLevel;\n    }\n    const log = new sinaLog.Log(\"sinaFactory\");\n    log.debug(\"Creating new sina (esh client) instance using provider \" + normalizedConfiguration.provider);\n    let providerInstance: AbstractProvider;\n    switch (normalizedConfiguration.provider) {\n        case AvailableProviders.HANA_ODATA: {\n            providerInstance = new HANAODataProvider();\n            break;\n        }\n        case AvailableProviders.ABAP_ODATA: {\n            providerInstance = new ABAPODataProvider();\n            break;\n        }\n        case AvailableProviders.INAV2: {\n            providerInstance = new INAV2Provider();\n            break;\n        }\n        case AvailableProviders.MULTI: {\n            providerInstance = new MultiProvider();\n            break;\n        }\n        case AvailableProviders.SAMPLE: {\n            providerInstance = new SampleProvider();\n            break;\n        }\n        case AvailableProviders.SAMPLE2: {\n            providerInstance = new Sample2Provider();\n            break;\n        }\n        case AvailableProviders.MOCK_NLQRESULTS: {\n            // eslint-disable-next-line\n            // @ts-ignore\n            const module = await import(\"/sap/esh/search/ui/sinaNexTS/providers/mock/MockNlqResultsProvider\");\n            providerInstance = new module.MockNlqResultsProvider();\n            break;\n        }\n        case AvailableProviders.MOCK_SUGGESTIONTYPES: {\n            const module = await import(\n                // eslint-disable-next-line\n                // @ts-ignore\n                \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockSuggestionTypesProvider\"\n            );\n            providerInstance = new module.MockSuggestionTypesProvider();\n            break;\n        }\n        case AvailableProviders.MOCK_DELETEANDREORDER: {\n            const module = await import(\n                // eslint-disable-next-line\n                // @ts-ignore\n                \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockDeleteAndReorderProvider\"\n            );\n            providerInstance = new module.MockDeleteAndReorderProvider();\n            break;\n        }\n        case AvailableProviders.DUMMY: {\n            providerInstance = new DummyProvider();\n            break;\n        }\n        default: {\n            // Do not print mock providers in error message\n            throw new Error(\n                \"Unknown Provider: '\" +\n                    normalizedConfiguration.provider +\n                    \"' - Available Providers: \" +\n                    AvailableProviders.HANA_ODATA +\n                    \", \" +\n                    AvailableProviders.ABAP_ODATA +\n                    \", \" +\n                    AvailableProviders.INAV2 +\n                    \", \" +\n                    AvailableProviders.MULTI +\n                    \", \" +\n                    AvailableProviders.SAMPLE +\n                    \", \" +\n                    AvailableProviders.SAMPLE2 +\n                    \", \" +\n                    AvailableProviders.DUMMY\n            );\n        }\n    }\n\n    const sina = new Sina(providerInstance);\n    await sina.initAsync(normalizedConfiguration);\n    return sina;\n}\n\nexport function createByTrialAsync(\n    inputConfigurations: Array<SinaConfiguration | string | AvailableProviders>,\n    checkSuccessCallback?: (sina: Sina) => boolean\n): Promise<Sina> {\n    let configurations;\n\n    // normalize configurations\n    return Promise.all(inputConfigurations.map(_normalizeConfiguration.bind(this)))\n        .then(\n            function (normalizedConfigurations) {\n                // mixin url configuration into configurations\n                configurations = normalizedConfigurations;\n                return _mixinUrlConfiguration(configurations);\n            }.bind(this)\n        )\n        .then(\n            function () {\n                // recursive creation of sina by loop at configurations\n                // (first configuration which successfully creates sina wins)\n                return _createSinaRecursively(configurations, checkSuccessCallback);\n            }.bind(this)\n        );\n}\n\nasync function _readConfigurationFromUrl(): Promise<SinaConfiguration | void> {\n    const sinaConfiguration = util.getUrlParameter(\"sinaConfiguration\");\n    if (sinaConfiguration) {\n        return _normalizeConfiguration(sinaConfiguration);\n    }\n    const sinaProvider = util.getUrlParameter(\"sinaProvider\");\n    if (sinaProvider) {\n        return _normalizeConfiguration(sinaProvider);\n    }\n    return Promise.resolve();\n}\n\nasync function _createSinaRecursively(\n    configurations: SinaConfiguration[],\n    checkSuccessCallback?: (sina: Sina) => boolean\n): Promise<Sina> {\n    const log = new sinaLog.Log(\"sinaFactory\");\n    const errors = [];\n    // set default for checkSuccesCallback\n    checkSuccessCallback =\n        checkSuccessCallback ||\n        function () {\n            return true;\n        };\n\n    const providersTried = [];\n    // helper for recursion\n    const doCreate = function (index): Promise<Sina> {\n        if (index >= configurations.length) {\n            let finalError;\n            if (errors.length >= 1) {\n                // display error of last sina config (this is what at least shall work)\n                // - FLP:     ABAP OData and INA are failing -> at least app-search shall work\n                // - DSP/SAC: Only one config -> shalll work\n                finalError = new NoValidEnterpriseSearchAPIConfigurationFoundError(\n                    providersTried.join(\", \"),\n                    errors[errors.length - 1].error\n                );\n            } else {\n                // no error details/previous (fallback, not expected)\n                finalError = new NoValidEnterpriseSearchAPIConfigurationFoundError(providersTried.join(\", \"));\n            }\n            return Promise.reject(finalError);\n        }\n        const configuration = configurations[index];\n        providersTried.push(configuration.provider);\n        return createAsync(configuration).then(\n            function (sina) {\n                if (checkSuccessCallback(sina)) {\n                    return sina;\n                }\n                return doCreate(index + 1);\n            },\n            function (error: Error) {\n                log.info(error);\n                errors.push({ index: index, error: error });\n                return doCreate(index + 1);\n            }\n        );\n    }.bind(this);\n\n    // start recursion\n    return doCreate(0);\n}\n\nasync function _mixinUrlConfiguration(configurations: SinaConfiguration[]): Promise<void> {\n    const configurationFromUrl = await _readConfigurationFromUrl();\n\n    if (!configurationFromUrl) {\n        return;\n    }\n\n    if (configurations.length === 1) {\n        // 1) just merge url configuration into configuration\n        _mergeConfiguration(configurations[0], configurationFromUrl);\n        return;\n    } else {\n        // 2) use url configuration also for filtering (legacy: useful for forcing flp to use inav2 for a abap system which offers abap_odata and inav2)\n        let found = false;\n        for (let i = 0; i < configurations.length; ++i) {\n            const configuration = configurations[i];\n\n            // ignore dummy provider\n            if (configuration.provider === AvailableProviders.DUMMY) {\n                continue;\n            }\n\n            // remove not matching providers\n            if (configuration.provider !== configurationFromUrl.provider) {\n                configurations.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            // merge ulr configuration into configuration\n            found = true;\n            _mergeConfiguration(configuration, configurationFromUrl);\n        }\n        if (!found) {\n            configurations.splice(0, 0, configurationFromUrl);\n        }\n    }\n}\n\nfunction _mergeConfiguration(configuration1, configuration2) {\n    // TODO: deep merge\n    for (const property in configuration2) {\n        configuration1[property] = configuration2[property];\n    }\n}\n"],"mappings":"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","ignoreList":[]}