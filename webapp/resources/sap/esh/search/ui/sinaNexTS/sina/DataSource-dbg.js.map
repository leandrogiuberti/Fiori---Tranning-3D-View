{"version":3,"file":"DataSource-dbg.js","names":["sap","ui","define","errors","___SinaObject","___DataSourceType","___AttributeMetadata","___AttributeGroupMetadata","___HierarchyDisplayType","___MatchingStrategy","___AttributeType","___AttributeMetadataBase","SinaObject","DataSourceType","AttributeMetadata","AttributeGroupMetadata","DataSourceAttributeMetadataNotFoundError","HierarchyDisplayType","MatchingStrategy","AttributeType","AttributeMetadataBase","DataSourceJSONType","DataSource","annotations","type","subType","id","label","labelPlural","icon","hidden","usage","attributesMetadata","attributeMetadataMap","attributeGroupsMetadata","attributeGroupMetadataMap","isHierarchyDataSource","hierarchyName","hierarchyDisplayType","hierarchyAttribute","nlq","_hierarchyDataSource","system","_hierarchyAttributeGroupMetadata","_staticHierarchyAttributeMetadata","defaultNavigationTarget","navigationTargets","getAllDataSource","Category","constructor","properties","sina","createAttributeMetadataMap","length","undefined","BusinessObject","_configure","metadataFormatters","i","metadataFormatter","format","dataSources","map","attributeMetadata","getAttributeMetadata","attributeId","getCommonAttributeMetadata","isSortable","isKey","matchingStrategy","Text","Title","displayOrder","String","getAttributeGroupMetadata","attributeGroupMetadata","toUpperCase","dataSource","getHierarchyDataSource","isHierarchy","StaticHierarchyFacet","HierarchyResultView","getStaticHierarchyAttributeMetadata","_getStaticHierarchyAttributeForDisplay","hierarchyAttributeId","attributeGroupMeta","parentAttribute","_private","isDescription","toString","toJson","JsonType","json","DataSourceJSON","console","log","attributes","push","JSON","stringify","info","fromJson","getDataSource","DataSourceInURLDoesNotExistError","createDataSource","attributeMetadataArray","dejsonifyAttributes","forEach","attribute","attributeJsonArray","attributeJson","dejsonifyAttribute","Object","values","Group","__exports","__esModule"],"sources":["DataSource.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as errors from \"../core/errors\";\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { DataSourceSubType, DataSourceType } from \"./DataSourceType\";\nimport { AttributeMetadata, AttributeMetadataJSON } from \"./AttributeMetadata\";\nimport { AttributeGroupMetadata, GroupAttributeMetadataJSON } from \"./AttributeGroupMetadata\";\nimport { DataSourceAttributeMetadataNotFoundError } from \"../core/errors\";\nimport { HierarchyDisplayType } from \"./HierarchyDisplayType\";\nimport { MatchingStrategy } from \"./MatchingStrategy\";\nimport { AttributeType } from \"./AttributeType\";\nimport { System } from \"./System\";\nimport { AttributeMetadataBase, AttributeMetadataBaseJSON } from \"./AttributeMetadataBase\";\nimport { Sina } from \"./Sina\";\nimport { NavigationTarget } from \"./NavigationTarget\";\n\nexport enum DataSourceJSONType {\n    DataSourceJSON = \"DataSourceJSON\", // URL json\n    DataSourceAndAttributesJSON = \"DataSourceAndAttributesJSON\", // sample2/data/...json\n}\n\nexport interface DataSourceJSON extends SinaObjectProperties {\n    type: DataSourceType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n}\nexport interface DataSourceAndAttributesJSON extends DataSourceJSON {\n    type: DataSourceType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n    attributes: Array<AttributeMetadataJSON | GroupAttributeMetadataJSON>;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n}\nexport interface DataSourceProperties extends SinaObjectProperties {\n    type: DataSourceType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n\n    annotations?: Record<string, object>;\n    subType?: DataSourceSubType;\n    icon?: string;\n    hidden?: boolean;\n    usage?: { appSearch: boolean | Record<string, never> } | Record<string, never>;\n    attributesMetadata?: Array<AttributeMetadataBase>;\n    attributeMetadataMap?: Record<string, AttributeMetadataBase>;\n    attributeGroupsMetadata?: Array<AttributeGroupMetadata>;\n    attributeGroupMetadataMap?: Record<string, AttributeGroupMetadata>;\n    isHierarchyDataSource?: boolean;\n    hierarchyName?: string;\n    hierarchyDisplayType?: HierarchyDisplayType;\n    hierarchyAttribute?: string;\n    nlq?: boolean;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n}\n\nexport class DataSource extends SinaObject {\n    annotations?: Record<string, object>;\n    type: DataSourceType;\n    subType: DataSourceSubType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n    icon: string;\n    hidden? = false;\n    usage?: { appSearch: boolean | Record<string, never> } | Record<string, never> = {};\n    attributesMetadata?: Array<AttributeMetadataBase> = [];\n    attributeMetadataMap?: Record<string, AttributeMetadataBase> = {};\n    attributeGroupsMetadata?: Array<AttributeGroupMetadata> = [];\n    attributeGroupMetadataMap?: Record<string, AttributeGroupMetadata> = {};\n    isHierarchyDataSource?: boolean;\n    hierarchyName?: string;\n    hierarchyDisplayType?: HierarchyDisplayType; // TODO to be removed (consider DI use case)\n    hierarchyAttribute?: string;\n    nlq?: boolean = false;\n    _hierarchyDataSource?: DataSource;\n    system?: System;\n    _hierarchyAttributeGroupMetadata: AttributeGroupMetadata | AttributeMetadata;\n    _staticHierarchyAttributeMetadata: AttributeMetadata;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n\n    static getAllDataSource(): DataSource {\n        return new DataSource({\n            id: \"All\",\n            label: \"All\",\n            type: DataSourceType.Category,\n        });\n    }\n\n    constructor(properties: DataSourceProperties) {\n        super({ sina: properties.sina });\n        this.annotations = properties.annotations ?? this.annotations;\n        this.type = properties.type ?? this.type;\n        this.subType = properties.subType;\n        this.id = properties.id ?? this.id;\n        this.label = properties.label ?? this.label;\n        this.labelPlural = properties.labelPlural ?? this.labelPlural;\n        this.icon = properties.icon;\n        this.hidden = properties.hidden ?? this.hidden;\n        this.usage = properties.usage ?? this.usage;\n        this.attributesMetadata = properties.attributesMetadata ?? this.attributesMetadata;\n        this.attributeMetadataMap =\n            properties.attributeMetadataMap ?? this.createAttributeMetadataMap(this.attributesMetadata);\n        this.attributeGroupsMetadata = properties.attributeGroupsMetadata ?? this.attributeGroupsMetadata;\n        this.attributeGroupMetadataMap =\n            properties.attributeGroupMetadataMap ?? this.attributeGroupMetadataMap;\n        this.isHierarchyDataSource = properties.isHierarchyDataSource;\n        this.hierarchyName = properties.hierarchyName;\n        this.hierarchyDisplayType = properties.hierarchyDisplayType;\n        this.hierarchyAttribute = properties.hierarchyAttribute;\n        this.nlq = properties.nlq ?? this.nlq;\n        if (!this.labelPlural || this.labelPlural.length === 0) {\n            this.labelPlural = this.label;\n        }\n        this.defaultNavigationTarget = properties.defaultNavigationTarget ?? undefined;\n        this.navigationTargets = properties.navigationTargets ?? [];\n        if (this.type === DataSourceType.BusinessObject && this.attributesMetadata.length === 0) {\n            /*      throw new DataSourceAttributeMetadataNotFoundError(\n                \"Could not find metadata for attributes in data source \" + this.id + \". \"\n            );*/\n        }\n\n        // filtered datasources reuse the metadata of the referred datasource\n        // (instances of attributeMetadataMap identical)\n        // therefore the following line is deactivated\n        // this.attributeMetadataMap = this.createAttributeMetadataMap(this.attributesMetadata);\n    }\n\n    // equals(): boolean {\n    //     throw new Error(\n    //         \"use === operator for comparison of datasources\"\n    //     );\n    // }\n\n    _configure(): void {\n        // do not use\n        // legacy: only called from inav2 provider\n        const metadataFormatters = this.sina.metadataFormatters;\n        if (!metadataFormatters) {\n            return;\n        }\n        for (let i = 0; i < metadataFormatters.length; ++i) {\n            const metadataFormatter = metadataFormatters[i];\n            metadataFormatter.format({\n                dataSources: [this],\n            });\n        }\n    }\n\n    createAttributeMetadataMap(\n        attributesMetadata: Array<AttributeMetadataBase> = []\n    ): Record<string, AttributeMetadataBase> {\n        const map = {};\n        for (let i = 0; i < attributesMetadata.length; ++i) {\n            const attributeMetadata = attributesMetadata[i];\n            map[attributeMetadata.id] = attributeMetadata;\n        }\n        return map;\n    }\n\n    getAttributeMetadata(attributeId: string): AttributeMetadataBase {\n        if (this.id === \"All\") {\n            return this.getCommonAttributeMetadata(attributeId); // for all we have only common attributes\n        }\n        // Fake metadata for transaction suggestions because transaction connector is not part\n        // of the connector dropdown and as such is not part of the connector metadata response:\n        if (\n            this.id === \"CD$ALL~ESH_TRANSACTION~\" &&\n            (attributeId === \"TCDTEXT\" || attributeId === \"TCODE\") &&\n            !this.attributeMetadataMap[attributeId]\n        ) {\n            this.attributeMetadataMap[attributeId] = new AttributeMetadata({\n                label: \"label\",\n                isSortable: false,\n                isKey: false,\n                matchingStrategy: MatchingStrategy.Text,\n                id: attributeId,\n                usage: { Title: { displayOrder: 1 } },\n                type: AttributeType.String,\n            });\n        }\n        const attributeMetadata = this.attributeMetadataMap[attributeId];\n        if (attributeMetadata) {\n            return attributeMetadata;\n        }\n        throw new DataSourceAttributeMetadataNotFoundError(attributeId, this.id);\n    }\n\n    getAttributeGroupMetadata(attributeId: string): AttributeGroupMetadata {\n        if (this.attributeGroupMetadataMap) {\n            const attributeGroupMetadata = this.attributeMetadataMap[attributeId.toUpperCase()];\n            if (attributeGroupMetadata && attributeGroupMetadata instanceof AttributeGroupMetadata) {\n                return attributeGroupMetadata;\n            }\n        }\n        throw new DataSourceAttributeMetadataNotFoundError(attributeId, this.id);\n    }\n\n    getCommonAttributeMetadata(attributeId: string): AttributeMetadataBase {\n        for (const dataSource of this.sina.dataSources) {\n            if (dataSource.type !== DataSourceType.BusinessObject) {\n                continue;\n            }\n            const attributeMetadata = dataSource.attributeMetadataMap[attributeId];\n            if (attributeMetadata) {\n                return attributeMetadata;\n            }\n        }\n        throw new DataSourceAttributeMetadataNotFoundError(attributeId, this.id);\n    }\n\n    getHierarchyDataSource(): DataSource {\n        if (this._hierarchyDataSource instanceof DataSource) {\n            return this._hierarchyDataSource;\n        }\n\n        for (let i = 0; i < this.attributesMetadata.length; ++i) {\n            const attributeMetadata = this.attributesMetadata[i];\n            if (!(attributeMetadata as AttributeMetadata).isHierarchy) {\n                continue;\n            }\n            if (\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.StaticHierarchyFacet ||\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.HierarchyResultView\n            ) {\n                this._hierarchyDataSource = this.sina.getHierarchyDataSource(\n                    (attributeMetadata as AttributeMetadata).hierarchyName\n                );\n                return this._hierarchyDataSource;\n            }\n        }\n        return undefined;\n    }\n\n    getStaticHierarchyAttributeMetadata(): AttributeMetadata {\n        if (this._staticHierarchyAttributeMetadata) {\n            return this._staticHierarchyAttributeMetadata;\n        }\n\n        for (let i = 0; i < this.attributesMetadata.length; ++i) {\n            const attributeMetadata = this.attributesMetadata[i];\n            if (!(attributeMetadata as AttributeMetadata).isHierarchy) {\n                continue;\n            }\n            if (\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                HierarchyDisplayType.StaticHierarchyFacet\n            ) {\n                this._staticHierarchyAttributeMetadata = attributeMetadata as AttributeMetadata;\n                return this._staticHierarchyAttributeMetadata;\n            }\n        }\n        return undefined;\n    }\n\n    _getStaticHierarchyAttributeForDisplay(): AttributeMetadataBase {\n        if (\n            this._hierarchyAttributeGroupMetadata instanceof AttributeGroupMetadata ||\n            this._hierarchyAttributeGroupMetadata instanceof AttributeMetadataBase\n        ) {\n            return this._hierarchyAttributeGroupMetadata;\n        }\n\n        // own hierarchy attribute or the one of its helper hierarchy datasource\n        const hierarchyAttributeId =\n            this.hierarchyAttribute || this.getHierarchyDataSource()?.hierarchyAttribute;\n        if (!hierarchyAttributeId) {\n            return undefined;\n        }\n        // Check attributeGroup led by hierarchy attribute and semantic type textelement. One level is enough, unnecessary to consider recursive case.\n        for (let i = 0; i < this.attributeGroupsMetadata.length; i++) {\n            const attributeGroupMeta: AttributeGroupMetadata = this.attributeGroupsMetadata[i];\n            const parentAttribute = attributeGroupMeta._private?.parentAttribute as AttributeMetadata;\n            if (\n                parentAttribute instanceof AttributeMetadata &&\n                parentAttribute.id === hierarchyAttributeId &&\n                attributeGroupMeta._private?.isDescription === true\n            ) {\n                this._hierarchyAttributeGroupMetadata = attributeGroupMeta;\n                return this._hierarchyAttributeGroupMetadata;\n            }\n        }\n\n        // return single hierarchy attributeMetadata\n        this._hierarchyAttributeGroupMetadata = this.attributeMetadataMap[this.hierarchyAttribute] as\n            | AttributeGroupMetadata\n            | AttributeMetadata;\n        return this._hierarchyAttributeGroupMetadata;\n    }\n\n    toString(): string {\n        return this.label;\n    }\n\n    // parse: sina data source -> json\n    toJson(JsonType?: DataSourceJSONType): DataSourceJSON | DataSourceAndAttributesJSON {\n        // 1. parse DataSourceJSON\n        const json = {\n            type: this.type,\n            id: this.id,\n            label: this.label,\n            labelPlural: this.labelPlural || this.label,\n        };\n\n        if (JsonType === undefined || JsonType === DataSourceJSONType.DataSourceJSON) {\n            return json as DataSourceJSON;\n        }\n\n        // 2. parse DataSourceAndAttributesJSON\n        // example: sina data source -> sample2/data/...json\n        console.log(\"===== Parse Json From DataSource: =====\\n\");\n\n        (json as DataSourceAndAttributesJSON).attributes = [];\n\n        for (const attributeMetadata of this.attributesMetadata as Array<\n            AttributeMetadata | AttributeGroupMetadata\n        >) {\n            if (\n                attributeMetadata instanceof AttributeGroupMetadata ||\n                attributeMetadata instanceof AttributeMetadata\n            ) {\n                (json as DataSourceAndAttributesJSON).attributes.push(attributeMetadata.toJson());\n            }\n        }\n        console.log(JSON.stringify(json));\n        console.info(\"===== Info: make sure the same naming of {dataSource}.json and id:{dataSource}! =====\");\n        return json;\n    }\n\n    // parse: json -> sina data source\n    static fromJson(json: DataSourceJSON | DataSourceAndAttributesJSON, sina: Sina): DataSource {\n        // 1. parse DataSourceJSON\n        if (!(\"attributes\" in json)) {\n            let dataSource = sina.getDataSource(json.id);\n            if (dataSource) {\n                return dataSource;\n            }\n            if (json.type !== DataSourceType.Category) {\n                throw new errors.DataSourceInURLDoesNotExistError(json.id);\n            }\n            // TODO: code is not used in UI reload. remove this code\n            // if dataSource is not found, should not create a new one without attributes\n            dataSource = sina.createDataSource(json as DataSourceJSON);\n            return dataSource;\n        }\n\n        // 2. parse DataSourceAndAttributesJSON\n        const dataSource = sina.createDataSource({\n            id: json.id,\n            type: json.type,\n            label: json.label,\n            labelPlural: json.labelPlural || json.label,\n            defaultNavigationTarget: json.defaultNavigationTarget || undefined,\n            navigationTargets: json.navigationTargets || [],\n        });\n\n        // 3. set data source attribute metadata\n        const attributeMetadataArray = dataSource.dejsonifyAttributes(json.attributes);\n\n        attributeMetadataArray.forEach((attribute) => {\n            dataSource.attributesMetadata.push(attribute);\n            dataSource.attributeMetadataMap[attribute.id.toUpperCase()] = attribute;\n\n            if (attribute instanceof AttributeGroupMetadata) {\n                dataSource.attributeGroupsMetadata.push(attribute);\n                dataSource.attributeGroupMetadataMap[attribute.id] = attribute;\n            }\n        });\n\n        return dataSource;\n    }\n\n    private dejsonifyAttributes(\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>\n    ): Array<AttributeMetadataBase> {\n        const attributeMetadataMap = {} as Record<string, AttributeMetadataBase>;\n\n        for (const attributeJson of attributeJsonArray) {\n            // 1. parsed, single or group attribute\n            if (attributeMetadataMap[attributeJson.id]) {\n                // do nothing\n                continue;\n            }\n\n            // 2. not parsed, single or group attribute\n            const attributeMetadata = this.dejsonifyAttribute(\n                // const attributeMetadata = AttributeMetadataBase.fromJson(\n                attributeJson,\n                attributeJsonArray,\n                attributeMetadataMap,\n                this.sina\n            );\n            attributeMetadataMap[attributeMetadata.id] = attributeMetadata;\n        }\n\n        return Object.values(attributeMetadataMap);\n    }\n\n    private dejsonifyAttribute(\n        attributeJson: AttributeMetadataBaseJSON,\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>,\n        attributeMetadataMap: Record<string, AttributeMetadataBase>,\n        sina: Sina\n    ): AttributeMetadataBase {\n        // 1. single attribute\n        if (attributeJson.type !== AttributeType.Group) {\n            return AttributeMetadata.fromJson(attributeJson as AttributeMetadataJSON, sina);\n        }\n\n        // 2. group attribute\n        return AttributeGroupMetadata.fromJson(\n            attributeJson as GroupAttributeMetadataJSON,\n            attributeJsonArray,\n            attributeMetadataMap,\n            sina\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}