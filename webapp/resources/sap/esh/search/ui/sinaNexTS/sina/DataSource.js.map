{"version":3,"file":"DataSource.js","names":["sap","ui","define","errors","___SinaObject","___DataSourceType","___AttributeMetadata","___AttributeGroupMetadata","___HierarchyDisplayType","___MatchingStrategy","___AttributeType","___AttributeMetadataBase","SinaObject","DataSourceType","AttributeMetadata","AttributeGroupMetadata","DataSourceAttributeMetadataNotFoundError","HierarchyDisplayType","MatchingStrategy","AttributeType","AttributeMetadataBase","DataSourceJSONType","DataSource","annotations","type","subType","id","label","labelPlural","icon","hidden","usage","attributesMetadata","attributeMetadataMap","attributeGroupsMetadata","attributeGroupMetadataMap","isHierarchyDataSource","hierarchyName","hierarchyDisplayType","hierarchyAttribute","nlq","_hierarchyDataSource","system","_hierarchyAttributeGroupMetadata","_staticHierarchyAttributeMetadata","defaultNavigationTarget","navigationTargets","getAllDataSource","Category","constructor","properties","super","sina","this","createAttributeMetadataMap","length","undefined","BusinessObject","_configure","metadataFormatters","i","metadataFormatter","format","dataSources","map","attributeMetadata","getAttributeMetadata","attributeId","getCommonAttributeMetadata","isSortable","isKey","matchingStrategy","Text","Title","displayOrder","String","getAttributeGroupMetadata","attributeGroupMetadata","toUpperCase","dataSource","getHierarchyDataSource","isHierarchy","StaticHierarchyFacet","HierarchyResultView","getStaticHierarchyAttributeMetadata","_getStaticHierarchyAttributeForDisplay","hierarchyAttributeId","attributeGroupMeta","parentAttribute","_private","isDescription","toString","toJson","JsonType","json","DataSourceJSON","console","log","attributes","push","JSON","stringify","info","fromJson","getDataSource","DataSourceInURLDoesNotExistError","createDataSource","attributeMetadataArray","dejsonifyAttributes","forEach","attribute","attributeJsonArray","attributeJson","dejsonifyAttribute","Object","values","Group","__exports","__esModule"],"sources":["DataSource.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as errors from \"../core/errors\";\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { DataSourceSubType, DataSourceType } from \"./DataSourceType\";\nimport { AttributeMetadata, AttributeMetadataJSON } from \"./AttributeMetadata\";\nimport { AttributeGroupMetadata, GroupAttributeMetadataJSON } from \"./AttributeGroupMetadata\";\nimport { DataSourceAttributeMetadataNotFoundError } from \"../core/errors\";\nimport { HierarchyDisplayType } from \"./HierarchyDisplayType\";\nimport { MatchingStrategy } from \"./MatchingStrategy\";\nimport { AttributeType } from \"./AttributeType\";\nimport { System } from \"./System\";\nimport { AttributeMetadataBase, AttributeMetadataBaseJSON } from \"./AttributeMetadataBase\";\nimport { Sina } from \"./Sina\";\nimport { NavigationTarget } from \"./NavigationTarget\";\n\nexport enum DataSourceJSONType {\n    DataSourceJSON = \"DataSourceJSON\", // URL json\n    DataSourceAndAttributesJSON = \"DataSourceAndAttributesJSON\", // sample2/data/...json\n}\n\nexport interface DataSourceJSON extends SinaObjectProperties {\n    type: DataSourceType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n}\nexport interface DataSourceAndAttributesJSON extends DataSourceJSON {\n    type: DataSourceType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n    attributes: Array<AttributeMetadataJSON | GroupAttributeMetadataJSON>;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n}\nexport interface DataSourceProperties extends SinaObjectProperties {\n    type: DataSourceType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n\n    annotations?: Record<string, object>;\n    subType?: DataSourceSubType;\n    icon?: string;\n    hidden?: boolean;\n    usage?: { appSearch: boolean | Record<string, never> } | Record<string, never>;\n    attributesMetadata?: Array<AttributeMetadataBase>;\n    attributeMetadataMap?: Record<string, AttributeMetadataBase>;\n    attributeGroupsMetadata?: Array<AttributeGroupMetadata>;\n    attributeGroupMetadataMap?: Record<string, AttributeGroupMetadata>;\n    isHierarchyDataSource?: boolean;\n    hierarchyName?: string;\n    hierarchyDisplayType?: HierarchyDisplayType;\n    hierarchyAttribute?: string;\n    nlq?: boolean;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n}\n\nexport class DataSource extends SinaObject {\n    annotations?: Record<string, object>;\n    type: DataSourceType;\n    subType: DataSourceSubType;\n    id: string;\n    label: string;\n    labelPlural?: string;\n    icon: string;\n    hidden? = false;\n    usage?: { appSearch: boolean | Record<string, never> } | Record<string, never> = {};\n    attributesMetadata?: Array<AttributeMetadataBase> = [];\n    attributeMetadataMap?: Record<string, AttributeMetadataBase> = {};\n    attributeGroupsMetadata?: Array<AttributeGroupMetadata> = [];\n    attributeGroupMetadataMap?: Record<string, AttributeGroupMetadata> = {};\n    isHierarchyDataSource?: boolean;\n    hierarchyName?: string;\n    hierarchyDisplayType?: HierarchyDisplayType; // TODO to be removed (consider DI use case)\n    hierarchyAttribute?: string;\n    nlq?: boolean = false;\n    _hierarchyDataSource?: DataSource;\n    system?: System;\n    _hierarchyAttributeGroupMetadata: AttributeGroupMetadata | AttributeMetadata;\n    _staticHierarchyAttributeMetadata: AttributeMetadata;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n\n    static getAllDataSource(): DataSource {\n        return new DataSource({\n            id: \"All\",\n            label: \"All\",\n            type: DataSourceType.Category,\n        });\n    }\n\n    constructor(properties: DataSourceProperties) {\n        super({ sina: properties.sina });\n        this.annotations = properties.annotations ?? this.annotations;\n        this.type = properties.type ?? this.type;\n        this.subType = properties.subType;\n        this.id = properties.id ?? this.id;\n        this.label = properties.label ?? this.label;\n        this.labelPlural = properties.labelPlural ?? this.labelPlural;\n        this.icon = properties.icon;\n        this.hidden = properties.hidden ?? this.hidden;\n        this.usage = properties.usage ?? this.usage;\n        this.attributesMetadata = properties.attributesMetadata ?? this.attributesMetadata;\n        this.attributeMetadataMap =\n            properties.attributeMetadataMap ?? this.createAttributeMetadataMap(this.attributesMetadata);\n        this.attributeGroupsMetadata = properties.attributeGroupsMetadata ?? this.attributeGroupsMetadata;\n        this.attributeGroupMetadataMap =\n            properties.attributeGroupMetadataMap ?? this.attributeGroupMetadataMap;\n        this.isHierarchyDataSource = properties.isHierarchyDataSource;\n        this.hierarchyName = properties.hierarchyName;\n        this.hierarchyDisplayType = properties.hierarchyDisplayType;\n        this.hierarchyAttribute = properties.hierarchyAttribute;\n        this.nlq = properties.nlq ?? this.nlq;\n        if (!this.labelPlural || this.labelPlural.length === 0) {\n            this.labelPlural = this.label;\n        }\n        this.defaultNavigationTarget = properties.defaultNavigationTarget ?? undefined;\n        this.navigationTargets = properties.navigationTargets ?? [];\n        if (this.type === DataSourceType.BusinessObject && this.attributesMetadata.length === 0) {\n            /*      throw new DataSourceAttributeMetadataNotFoundError(\n                \"Could not find metadata for attributes in data source \" + this.id + \". \"\n            );*/\n        }\n\n        // filtered datasources reuse the metadata of the referred datasource\n        // (instances of attributeMetadataMap identical)\n        // therefore the following line is deactivated\n        // this.attributeMetadataMap = this.createAttributeMetadataMap(this.attributesMetadata);\n    }\n\n    // equals(): boolean {\n    //     throw new Error(\n    //         \"use === operator for comparison of datasources\"\n    //     );\n    // }\n\n    _configure(): void {\n        // do not use\n        // legacy: only called from inav2 provider\n        const metadataFormatters = this.sina.metadataFormatters;\n        if (!metadataFormatters) {\n            return;\n        }\n        for (let i = 0; i < metadataFormatters.length; ++i) {\n            const metadataFormatter = metadataFormatters[i];\n            metadataFormatter.format({\n                dataSources: [this],\n            });\n        }\n    }\n\n    createAttributeMetadataMap(\n        attributesMetadata: Array<AttributeMetadataBase> = []\n    ): Record<string, AttributeMetadataBase> {\n        const map = {};\n        for (let i = 0; i < attributesMetadata.length; ++i) {\n            const attributeMetadata = attributesMetadata[i];\n            map[attributeMetadata.id] = attributeMetadata;\n        }\n        return map;\n    }\n\n    getAttributeMetadata(attributeId: string): AttributeMetadataBase {\n        if (this.id === \"All\") {\n            return this.getCommonAttributeMetadata(attributeId); // for all we have only common attributes\n        }\n        // Fake metadata for transaction suggestions because transaction connector is not part\n        // of the connector dropdown and as such is not part of the connector metadata response:\n        if (\n            this.id === \"CD$ALL~ESH_TRANSACTION~\" &&\n            (attributeId === \"TCDTEXT\" || attributeId === \"TCODE\") &&\n            !this.attributeMetadataMap[attributeId]\n        ) {\n            this.attributeMetadataMap[attributeId] = new AttributeMetadata({\n                label: \"label\",\n                isSortable: false,\n                isKey: false,\n                matchingStrategy: MatchingStrategy.Text,\n                id: attributeId,\n                usage: { Title: { displayOrder: 1 } },\n                type: AttributeType.String,\n            });\n        }\n        const attributeMetadata = this.attributeMetadataMap[attributeId];\n        if (attributeMetadata) {\n            return attributeMetadata;\n        }\n        throw new DataSourceAttributeMetadataNotFoundError(attributeId, this.id);\n    }\n\n    getAttributeGroupMetadata(attributeId: string): AttributeGroupMetadata {\n        if (this.attributeGroupMetadataMap) {\n            const attributeGroupMetadata = this.attributeMetadataMap[attributeId.toUpperCase()];\n            if (attributeGroupMetadata && attributeGroupMetadata instanceof AttributeGroupMetadata) {\n                return attributeGroupMetadata;\n            }\n        }\n        throw new DataSourceAttributeMetadataNotFoundError(attributeId, this.id);\n    }\n\n    getCommonAttributeMetadata(attributeId: string): AttributeMetadataBase {\n        for (const dataSource of this.sina.dataSources) {\n            if (dataSource.type !== DataSourceType.BusinessObject) {\n                continue;\n            }\n            const attributeMetadata = dataSource.attributeMetadataMap[attributeId];\n            if (attributeMetadata) {\n                return attributeMetadata;\n            }\n        }\n        throw new DataSourceAttributeMetadataNotFoundError(attributeId, this.id);\n    }\n\n    getHierarchyDataSource(): DataSource {\n        if (this._hierarchyDataSource instanceof DataSource) {\n            return this._hierarchyDataSource;\n        }\n\n        for (let i = 0; i < this.attributesMetadata.length; ++i) {\n            const attributeMetadata = this.attributesMetadata[i];\n            if (!(attributeMetadata as AttributeMetadata).isHierarchy) {\n                continue;\n            }\n            if (\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.StaticHierarchyFacet ||\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.HierarchyResultView\n            ) {\n                this._hierarchyDataSource = this.sina.getHierarchyDataSource(\n                    (attributeMetadata as AttributeMetadata).hierarchyName\n                );\n                return this._hierarchyDataSource;\n            }\n        }\n        return undefined;\n    }\n\n    getStaticHierarchyAttributeMetadata(): AttributeMetadata {\n        if (this._staticHierarchyAttributeMetadata) {\n            return this._staticHierarchyAttributeMetadata;\n        }\n\n        for (let i = 0; i < this.attributesMetadata.length; ++i) {\n            const attributeMetadata = this.attributesMetadata[i];\n            if (!(attributeMetadata as AttributeMetadata).isHierarchy) {\n                continue;\n            }\n            if (\n                (attributeMetadata as AttributeMetadata).hierarchyDisplayType ===\n                HierarchyDisplayType.StaticHierarchyFacet\n            ) {\n                this._staticHierarchyAttributeMetadata = attributeMetadata as AttributeMetadata;\n                return this._staticHierarchyAttributeMetadata;\n            }\n        }\n        return undefined;\n    }\n\n    _getStaticHierarchyAttributeForDisplay(): AttributeMetadataBase {\n        if (\n            this._hierarchyAttributeGroupMetadata instanceof AttributeGroupMetadata ||\n            this._hierarchyAttributeGroupMetadata instanceof AttributeMetadataBase\n        ) {\n            return this._hierarchyAttributeGroupMetadata;\n        }\n\n        // own hierarchy attribute or the one of its helper hierarchy datasource\n        const hierarchyAttributeId =\n            this.hierarchyAttribute || this.getHierarchyDataSource()?.hierarchyAttribute;\n        if (!hierarchyAttributeId) {\n            return undefined;\n        }\n        // Check attributeGroup led by hierarchy attribute and semantic type textelement. One level is enough, unnecessary to consider recursive case.\n        for (let i = 0; i < this.attributeGroupsMetadata.length; i++) {\n            const attributeGroupMeta: AttributeGroupMetadata = this.attributeGroupsMetadata[i];\n            const parentAttribute = attributeGroupMeta._private?.parentAttribute as AttributeMetadata;\n            if (\n                parentAttribute instanceof AttributeMetadata &&\n                parentAttribute.id === hierarchyAttributeId &&\n                attributeGroupMeta._private?.isDescription === true\n            ) {\n                this._hierarchyAttributeGroupMetadata = attributeGroupMeta;\n                return this._hierarchyAttributeGroupMetadata;\n            }\n        }\n\n        // return single hierarchy attributeMetadata\n        this._hierarchyAttributeGroupMetadata = this.attributeMetadataMap[this.hierarchyAttribute] as\n            | AttributeGroupMetadata\n            | AttributeMetadata;\n        return this._hierarchyAttributeGroupMetadata;\n    }\n\n    toString(): string {\n        return this.label;\n    }\n\n    // parse: sina data source -> json\n    toJson(JsonType?: DataSourceJSONType): DataSourceJSON | DataSourceAndAttributesJSON {\n        // 1. parse DataSourceJSON\n        const json = {\n            type: this.type,\n            id: this.id,\n            label: this.label,\n            labelPlural: this.labelPlural || this.label,\n        };\n\n        if (JsonType === undefined || JsonType === DataSourceJSONType.DataSourceJSON) {\n            return json as DataSourceJSON;\n        }\n\n        // 2. parse DataSourceAndAttributesJSON\n        // example: sina data source -> sample2/data/...json\n        console.log(\"===== Parse Json From DataSource: =====\\n\");\n\n        (json as DataSourceAndAttributesJSON).attributes = [];\n\n        for (const attributeMetadata of this.attributesMetadata as Array<\n            AttributeMetadata | AttributeGroupMetadata\n        >) {\n            if (\n                attributeMetadata instanceof AttributeGroupMetadata ||\n                attributeMetadata instanceof AttributeMetadata\n            ) {\n                (json as DataSourceAndAttributesJSON).attributes.push(attributeMetadata.toJson());\n            }\n        }\n        console.log(JSON.stringify(json));\n        console.info(\"===== Info: make sure the same naming of {dataSource}.json and id:{dataSource}! =====\");\n        return json;\n    }\n\n    // parse: json -> sina data source\n    static fromJson(json: DataSourceJSON | DataSourceAndAttributesJSON, sina: Sina): DataSource {\n        // 1. parse DataSourceJSON\n        if (!(\"attributes\" in json)) {\n            let dataSource = sina.getDataSource(json.id);\n            if (dataSource) {\n                return dataSource;\n            }\n            if (json.type !== DataSourceType.Category) {\n                throw new errors.DataSourceInURLDoesNotExistError(json.id);\n            }\n            // TODO: code is not used in UI reload. remove this code\n            // if dataSource is not found, should not create a new one without attributes\n            dataSource = sina.createDataSource(json as DataSourceJSON);\n            return dataSource;\n        }\n\n        // 2. parse DataSourceAndAttributesJSON\n        const dataSource = sina.createDataSource({\n            id: json.id,\n            type: json.type,\n            label: json.label,\n            labelPlural: json.labelPlural || json.label,\n            defaultNavigationTarget: json.defaultNavigationTarget || undefined,\n            navigationTargets: json.navigationTargets || [],\n        });\n\n        // 3. set data source attribute metadata\n        const attributeMetadataArray = dataSource.dejsonifyAttributes(json.attributes);\n\n        attributeMetadataArray.forEach((attribute) => {\n            dataSource.attributesMetadata.push(attribute);\n            dataSource.attributeMetadataMap[attribute.id.toUpperCase()] = attribute;\n\n            if (attribute instanceof AttributeGroupMetadata) {\n                dataSource.attributeGroupsMetadata.push(attribute);\n                dataSource.attributeGroupMetadataMap[attribute.id] = attribute;\n            }\n        });\n\n        return dataSource;\n    }\n\n    private dejsonifyAttributes(\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>\n    ): Array<AttributeMetadataBase> {\n        const attributeMetadataMap = {} as Record<string, AttributeMetadataBase>;\n\n        for (const attributeJson of attributeJsonArray) {\n            // 1. parsed, single or group attribute\n            if (attributeMetadataMap[attributeJson.id]) {\n                // do nothing\n                continue;\n            }\n\n            // 2. not parsed, single or group attribute\n            const attributeMetadata = this.dejsonifyAttribute(\n                // const attributeMetadata = AttributeMetadataBase.fromJson(\n                attributeJson,\n                attributeJsonArray,\n                attributeMetadataMap,\n                this.sina\n            );\n            attributeMetadataMap[attributeMetadata.id] = attributeMetadata;\n        }\n\n        return Object.values(attributeMetadataMap);\n    }\n\n    private dejsonifyAttribute(\n        attributeJson: AttributeMetadataBaseJSON,\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>,\n        attributeMetadataMap: Record<string, AttributeMetadataBase>,\n        sina: Sina\n    ): AttributeMetadataBase {\n        // 1. single attribute\n        if (attributeJson.type !== AttributeType.Group) {\n            return AttributeMetadata.fromJson(attributeJson as AttributeMetadataJSON, sina);\n        }\n\n        // 2. group attribute\n        return AttributeGroupMetadata.fromJson(\n            attributeJson as GroupAttributeMetadataJSON,\n            attributeJsonArray,\n            attributeMetadataMap,\n            sina\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}