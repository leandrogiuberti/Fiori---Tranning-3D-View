{"version":3,"file":"Filter.js","names":["sap","ui","define","___SinaObject","___SimpleCondition","___ComplexCondition","___core_errors","___HierarchyDisplayType","___DataSourceType","___i18n","SinaObject","SimpleCondition","ComplexCondition","InternalSinaError","HierarchyDisplayType","DataSourceSubType","getText","Filter","dataSource","searchTerm","rootCondition","constructor","properties","super","this","sina","getAllDataSource","setSearchTerm","setRootCondition","setSina","clone","equals","other","_getAttribute","condition","attribute","i","conditions","length","setDataSource","resetConditions","Error","autoInsertCondition","autoRemoveCondition","isFolderMode","configuration","folderMode","hierarchyAttributes","attributesMetadata","filter","isHierarchy","hierarchyDisplayType","StaticHierarchyFacet","hierarchyAttributeExists","isHierarchyDataSource","HierarchyResultView","subType","Filtered","folderAttribute","getFolderAttribute","filterAttributes","getAttributes","folderFilterAttributes","noneFolderFilterAttributes","folderModeForInitialSearch","trim","hierarchyAttribute","message","id","toJson","__exports","__esModule"],"sources":["Filter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSource, DataSourceJSON } from \"./DataSource\";\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { SimpleCondition, SimpleConditionJSON } from \"./SimpleCondition\";\nimport { ComplexCondition, ComplexConditionJSON } from \"./ComplexCondition\";\nimport { InternalSinaError } from \"../core/errors\";\nimport { Condition } from \"./Condition\";\nimport { HierarchyDisplayType } from \"./HierarchyDisplayType\";\nimport { DataSourceSubType } from \"./DataSourceType\";\nimport { getText } from \"./i18n\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\nexport interface FilterJSON {\n    dataSource: DataSourceJSON;\n    searchTerm: string;\n    rootCondition: ComplexConditionJSON | SimpleConditionJSON;\n}\nexport interface FilterOptions extends SinaObjectProperties {\n    dataSource?: DataSource;\n    searchTerm?: string;\n    rootCondition?: Condition;\n}\n\nexport class Filter extends SinaObject {\n    // _meta: {\n    //     properties: {\n    //         dataSource: {\n    //             required: false,\n    //             default: function () {\n    //                 return this.sina.getAllDataSource();\n    //             }\n    //         },\n    //         searchTerm: {\n    //             required: false,\n    //             default: '',\n    //             setter: true\n    //         },\n    //         rootCondition: {\n    //             required: false,\n    //             default: function () {\n    //                 return this.sina.createComplexCondition();\n    //             },\n    //             setter: true\n    //         }\n    //     }\n    // },\n\n    dataSource: DataSource;\n    searchTerm = \"\";\n    rootCondition: Condition;\n\n    constructor(properties: FilterOptions) {\n        super(properties);\n        this.dataSource = properties.dataSource ?? this.sina.getAllDataSource();\n        this.searchTerm = properties.searchTerm ?? this.searchTerm;\n        this.rootCondition = properties.rootCondition ?? new ComplexCondition({ sina: this.sina });\n    }\n\n    setSearchTerm(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n    }\n\n    setRootCondition(rootCondition: Condition): void {\n        this.rootCondition = rootCondition;\n        if (this.sina && !this.rootCondition.sina) {\n            // pass sina recursively to condition tree\n            // (rootCondition may have no sina because it was assembled by PublicSearchUtil before sina was created)\n            this.rootCondition.setSina(this.sina);\n        }\n    }\n\n    clone(): Filter {\n        return new Filter({\n            sina: this.sina,\n            dataSource: this.dataSource,\n            searchTerm: this.searchTerm,\n            rootCondition: this.rootCondition.clone(),\n        });\n    }\n\n    equals(other: Filter): boolean {\n        return (\n            other instanceof Filter &&\n            this.dataSource === other.dataSource &&\n            this.searchTerm === other.searchTerm &&\n            this.rootCondition.equals(other.rootCondition)\n        );\n    }\n\n    _getAttribute(condition: Condition): string {\n        if (condition instanceof SimpleCondition) {\n            return condition.attribute;\n        }\n\n        for (let i = 0; i < (condition as ComplexCondition).conditions.length; ++i) {\n            const attribute = this._getAttribute((condition as ComplexCondition).conditions[i]);\n            if (attribute) {\n                return attribute;\n            }\n        }\n    }\n\n    setDataSource(dataSource: DataSource): void {\n        if (this.dataSource === dataSource) {\n            return;\n        }\n        this.dataSource = dataSource;\n        this.resetConditions();\n    }\n\n    resetConditions(): void {\n        if (this.rootCondition instanceof ComplexCondition) {\n            this.rootCondition.resetConditions();\n        } else {\n            throw new Error(\"Method is not applicable for SimpleCondition\");\n        }\n    }\n\n    autoInsertCondition(condition: Condition): void {\n        if (this.rootCondition instanceof ComplexCondition) {\n            this.rootCondition.autoInsertCondition(condition);\n        } else {\n            throw new Error(\"Method is not applicable for SimpleCondition\");\n        }\n    }\n\n    autoRemoveCondition(condition: Condition): void {\n        if (this.rootCondition instanceof ComplexCondition) {\n            this.rootCondition.autoRemoveCondition(condition);\n        } else {\n            throw new Error(\"Method is not applicable for SimpleCondition\");\n        }\n    }\n\n    isFolderMode(): boolean {\n        // 1. check feature flag\n        if (!this.sina.configuration?.folderMode) {\n            return false;\n        }\n        // 2. check metadata\n        // 2.1 check for hierarchy attribute in datsource\n        const hierarchyAttributes = this.dataSource.attributesMetadata.filter(\n            (attribute) =>\n                (attribute as AttributeMetadata).isHierarchy &&\n                (attribute as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.StaticHierarchyFacet\n        );\n        const hierarchyAttributeExists = hierarchyAttributes.length > 0;\n        // 2.2 check whether datasource itself is a hierarchy datasource\n        const isHierarchyDataSource =\n            this.dataSource.isHierarchyDataSource &&\n            this.dataSource.hierarchyDisplayType === HierarchyDisplayType.HierarchyResultView;\n        if (!hierarchyAttributeExists && !isHierarchyDataSource) {\n            return false;\n        }\n        // 3. check datasource type\n        if (this.dataSource.subType === DataSourceSubType.Filtered) {\n            return false; // search mode\n        }\n        // 4. check query\n        // 4.1 check folder filter conditions\n        const folderAttribute = this.getFolderAttribute();\n        const filterAttributes = this.rootCondition.getAttributes();\n        const folderFilterAttributes = filterAttributes.filter((attribute) => attribute === folderAttribute);\n        const noneFolderFilterAttributes = filterAttributes.filter(\n            (attribute) => attribute != folderAttribute\n        );\n        if (!this.sina.configuration.folderModeForInitialSearch) {\n            if (folderFilterAttributes.length === 0) {\n                return false;\n            }\n        }\n        // 4.2 check search term\n        if (\n            (this.searchTerm.length === 0 || this.searchTerm.trim() === \"*\") &&\n            noneFolderFilterAttributes.length === 0\n        ) {\n            return true; // folder mode\n        } else {\n            return false; // search mode\n        }\n    }\n\n    getFolderAttribute(): string {\n        // use case 1: we are displaying an hierarchy (helper) datasource\n        if (\n            this.dataSource.isHierarchyDataSource &&\n            this.dataSource.hierarchyDisplayType === HierarchyDisplayType.HierarchyResultView\n        ) {\n            return this.dataSource.hierarchyAttribute;\n        }\n        // use case 2: we display a \"regular\" datasource with associatea hierarchy helper datasource\n        const hierarchyAttributes = this.dataSource.attributesMetadata.filter(\n            (attribute) =>\n                (attribute as AttributeMetadata).isHierarchy &&\n                (attribute as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.StaticHierarchyFacet\n        );\n        if (hierarchyAttributes.length === 0) {\n            throw new InternalSinaError({ message: getText(\"error.sina.hierarchyAttributesMissing\") });\n        }\n        return hierarchyAttributes[0].id;\n    }\n\n    toJson(): FilterJSON {\n        return {\n            dataSource: this.dataSource.toJson(),\n            searchTerm: this.searchTerm,\n            rootCondition: this.rootCondition.toJson(),\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]}