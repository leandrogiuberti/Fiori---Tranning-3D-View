{"version":3,"file":"AttributeGroupMetadata-dbg.js","names":["sap","ui","define","___AttributeType","___AttributeMetadataBase","___AttributeMetadata","AttributeType","AttributeMetadataBase","AttributeMetadata","AttributeGroupMetadata","type","Group","label","isSortable","template","attributes","displayAttributes","constructor","properties","id","usage","toJson","json","displayOrder","groups","attributeMembers","length","member","push","attribute","group","nameInGroup","groupMembers","fromJson","groupAttributeJson","attributeJsonArray","attributeMetadataMap","sina","groupAttributeMetadata","_createAttributeGroupMetadata","childAttribute","childAttributeMetadata","childAttributeJson","getAttributeJsonById","pushMembership","attributeJson","find","undefined","childAttributeGroupMembership","_createAttributeGroupMembership","__exports","__esModule"],"sources":["AttributeGroupMetadata.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { AttributeType } from \"./AttributeType\";\nimport {\n    AttributeMetadataBase,\n    AttributeMetadataBaseJSON,\n    AttributeMetadataBaseOptions,\n} from \"./AttributeMetadataBase\";\nimport { AttributeGroupMembership } from \"./AttributeGroupMembership\";\nimport { Sina } from \"./Sina\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\nimport type { AttributeMetadataJSON } from \"./AttributeMetadata\";\n\nexport interface GroupAttributeMetadataJSON extends AttributeMetadataBaseJSON {\n    groups: unknown[];\n    template: string;\n    attributes: Array<{\n        attribute: {\n            id: string;\n        };\n        group: {\n            id: string;\n        };\n        nameInGroup: string;\n    }>;\n    displayAttributes: string[];\n}\nexport interface AttributeGroupMetadataOptions extends AttributeMetadataBaseOptions {\n    label?: string;\n    isSortable?: boolean;\n    template?: string;\n    attributes: Array<AttributeGroupMembership>;\n    type: AttributeType.Group;\n    displayAttributes?: Array<string>;\n}\nexport class AttributeGroupMetadata extends AttributeMetadataBase {\n    // _meta: {\n    //     properties: {\n    //         type: { // overwrite\n    //             required: false,\n    //             default: AttributeType.Group\n    //         },\n    //         label: { // overwrite\n    //             required: false\n    //         },\n    //         isSortable: { // overwrite\n    //             required: false,\n    //             default: false\n    //         },\n    //         template: {\n    //             required: false\n    //         },\n    //         attributes: { // array of AttributeGroupMembership instances\n    //             required: true,\n    //             default: function () {\n    //                 return [];\n    //             }\n    //         }\n    //         displayAttributes{ // array of attibutes to be displayed\n    //             required: false,\n    //             default: function () {\n    //                 return [];\n    //             }\n    //         }\n    //     }\n    // }\n\n    type: AttributeType = AttributeType.Group;\n    label: string;\n    isSortable = false;\n    template: string;\n    attributes: Array<AttributeGroupMembership> = [];\n    displayAttributes: Array<string> = [];\n\n    constructor(properties: AttributeGroupMetadataOptions) {\n        super(properties);\n        this.id = properties.id ?? this.id;\n        this.usage = properties.usage ?? this.usage;\n        this.label = properties.label ?? this.label;\n        this.isSortable = properties.isSortable ?? this.isSortable;\n        this.template = properties.template ?? this.template;\n        this.attributes = properties.attributes ?? this.attributes;\n        this.displayAttributes = properties.displayAttributes ?? this.displayAttributes;\n    }\n\n    toJson(): GroupAttributeMetadataJSON {\n        const json = {\n            id: this.id,\n            label: this.label,\n            type: this.type,\n            displayOrder: this?.displayOrder,\n            isSortable: this?.isSortable,\n            usage: this?.usage,\n            groups: [],\n            template: this?.template || \"\",\n            attributes: [],\n            displayAttributes: this?.displayAttributes || [],\n        };\n\n        // push attributes\n        const attributeMembers = this.attributes || [];\n\n        if (attributeMembers.length === 0) {\n            return json;\n        }\n\n        for (const member of attributeMembers) {\n            json.attributes.push({\n                attribute: {\n                    id: member.attribute.id,\n                },\n                group: {\n                    id: member.group.id,\n                },\n                nameInGroup: member.nameInGroup,\n            });\n        }\n\n        // push groups\n        const groupMembers = this.groups || [];\n\n        if (groupMembers.length === 0) {\n            return json;\n        }\n\n        for (const member of groupMembers) {\n            json.groups.push({\n                attribute: {\n                    id: member.attribute.id,\n                },\n                group: {\n                    id: member.group.id,\n                },\n                nameInGroup: member.nameInGroup,\n            });\n        }\n\n        return json;\n    }\n\n    static fromJson(\n        groupAttributeJson: GroupAttributeMetadataJSON,\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>,\n        attributeMetadataMap: Record<string, AttributeMetadataBase>, // attribute metadata map buffer, may not be compete\n        sina: Sina\n    ): AttributeGroupMetadata {\n        // group attribute metadata\n        const groupAttributeMetadata = sina._createAttributeGroupMetadata({\n            id: groupAttributeJson.id,\n            label: groupAttributeJson.label,\n            type: AttributeType.Group,\n            template: groupAttributeJson.template,\n            attributes: [],\n            displayAttributes: groupAttributeJson.displayAttributes || [],\n            usage: groupAttributeJson.usage,\n        });\n\n        // child attribute loop\n        for (const childAttribute of groupAttributeJson.attributes) {\n            let childAttributeMetadata = attributeMetadataMap[childAttribute.attribute.id];\n\n            if (childAttributeMetadata) {\n                // 1. child attribute is dejsonified\n                // do nothing\n            } else {\n                // 2. child attribute is NOT dejsonified\n                // get full json data by child attribute\n                const childAttributeJson = groupAttributeMetadata.getAttributeJsonById(\n                    attributeJsonArray,\n                    childAttribute.attribute.id\n                );\n\n                if (childAttributeJson.type !== AttributeType.Group) {\n                    // 2.1 child attribute is single attribute\n                    // create single attribute metadata\n                    childAttributeMetadata = AttributeMetadata.fromJson(\n                        childAttributeJson as AttributeMetadataJSON,\n                        sina\n                    );\n                } else {\n                    // 2.2 child attribute is group attribute\n                    // create group attribute metadata\n                    childAttributeMetadata = AttributeGroupMetadata.fromJson(\n                        childAttributeJson as AttributeGroupMetadata,\n                        attributeJsonArray,\n                        attributeMetadataMap,\n                        sina\n                    );\n                }\n                // set attribute metadata map buffer\n                attributeMetadataMap[childAttributeMetadata.id] = childAttributeMetadata;\n            }\n\n            // push membership\n            groupAttributeMetadata.pushMembership(\n                groupAttributeMetadata,\n                childAttributeMetadata,\n                childAttribute.nameInGroup\n            );\n        }\n\n        return groupAttributeMetadata;\n    }\n\n    private getAttributeJsonById(\n        attributeJsonArray: Array<AttributeMetadataBaseJSON>,\n        id: string\n    ): AttributeMetadataBaseJSON {\n        const attributeJson = attributeJsonArray.find((attribute) => attribute.id === id);\n        return attributeJson || undefined;\n    }\n\n    private pushMembership(\n        groupAttributeMetadata: AttributeGroupMetadata,\n        childAttributeMetadata: AttributeMetadataBase,\n        nameInGroup: string\n    ): void {\n        // create membership\n        const childAttributeGroupMembership = this.sina._createAttributeGroupMembership({\n            group: groupAttributeMetadata,\n            attribute: childAttributeMetadata,\n            nameInGroup: nameInGroup,\n        });\n        // push membership to group attribute metadata\n        groupAttributeMetadata.attributes.push(childAttributeGroupMembership);\n\n        // push membership to child attribute metadata\n        if (childAttributeMetadata.type === AttributeType.Group) {\n            childAttributeMetadata.groups.push(childAttributeGroupMembership);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}