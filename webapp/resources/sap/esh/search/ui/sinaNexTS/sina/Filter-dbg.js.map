{"version":3,"file":"Filter-dbg.js","names":["sap","ui","define","___SinaObject","___SimpleCondition","___ComplexCondition","___core_errors","___HierarchyDisplayType","___DataSourceType","___i18n","SinaObject","SimpleCondition","ComplexCondition","InternalSinaError","HierarchyDisplayType","DataSourceSubType","getText","Filter","dataSource","searchTerm","rootCondition","constructor","properties","sina","getAllDataSource","setSearchTerm","setRootCondition","setSina","clone","equals","other","_getAttribute","condition","attribute","i","conditions","length","setDataSource","resetConditions","Error","autoInsertCondition","autoRemoveCondition","isFolderMode","configuration","folderMode","hierarchyAttributes","attributesMetadata","filter","isHierarchy","hierarchyDisplayType","StaticHierarchyFacet","hierarchyAttributeExists","isHierarchyDataSource","HierarchyResultView","subType","Filtered","folderAttribute","getFolderAttribute","filterAttributes","getAttributes","folderFilterAttributes","noneFolderFilterAttributes","folderModeForInitialSearch","trim","hierarchyAttribute","message","id","toJson","__exports","__esModule"],"sources":["Filter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { DataSource, DataSourceJSON } from \"./DataSource\";\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { SimpleCondition, SimpleConditionJSON } from \"./SimpleCondition\";\nimport { ComplexCondition, ComplexConditionJSON } from \"./ComplexCondition\";\nimport { InternalSinaError } from \"../core/errors\";\nimport { Condition } from \"./Condition\";\nimport { HierarchyDisplayType } from \"./HierarchyDisplayType\";\nimport { DataSourceSubType } from \"./DataSourceType\";\nimport { getText } from \"./i18n\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\nexport interface FilterJSON {\n    dataSource: DataSourceJSON;\n    searchTerm: string;\n    rootCondition: ComplexConditionJSON | SimpleConditionJSON;\n}\nexport interface FilterOptions extends SinaObjectProperties {\n    dataSource?: DataSource;\n    searchTerm?: string;\n    rootCondition?: Condition;\n}\n\nexport class Filter extends SinaObject {\n    // _meta: {\n    //     properties: {\n    //         dataSource: {\n    //             required: false,\n    //             default: function () {\n    //                 return this.sina.getAllDataSource();\n    //             }\n    //         },\n    //         searchTerm: {\n    //             required: false,\n    //             default: '',\n    //             setter: true\n    //         },\n    //         rootCondition: {\n    //             required: false,\n    //             default: function () {\n    //                 return this.sina.createComplexCondition();\n    //             },\n    //             setter: true\n    //         }\n    //     }\n    // },\n\n    dataSource: DataSource;\n    searchTerm = \"\";\n    rootCondition: Condition;\n\n    constructor(properties: FilterOptions) {\n        super(properties);\n        this.dataSource = properties.dataSource ?? this.sina.getAllDataSource();\n        this.searchTerm = properties.searchTerm ?? this.searchTerm;\n        this.rootCondition = properties.rootCondition ?? new ComplexCondition({ sina: this.sina });\n    }\n\n    setSearchTerm(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n    }\n\n    setRootCondition(rootCondition: Condition): void {\n        this.rootCondition = rootCondition;\n        if (this.sina && !this.rootCondition.sina) {\n            // pass sina recursively to condition tree\n            // (rootCondition may have no sina because it was assembled by PublicSearchUtil before sina was created)\n            this.rootCondition.setSina(this.sina);\n        }\n    }\n\n    clone(): Filter {\n        return new Filter({\n            sina: this.sina,\n            dataSource: this.dataSource,\n            searchTerm: this.searchTerm,\n            rootCondition: this.rootCondition.clone(),\n        });\n    }\n\n    equals(other: Filter): boolean {\n        return (\n            other instanceof Filter &&\n            this.dataSource === other.dataSource &&\n            this.searchTerm === other.searchTerm &&\n            this.rootCondition.equals(other.rootCondition)\n        );\n    }\n\n    _getAttribute(condition: Condition): string {\n        if (condition instanceof SimpleCondition) {\n            return condition.attribute;\n        }\n\n        for (let i = 0; i < (condition as ComplexCondition).conditions.length; ++i) {\n            const attribute = this._getAttribute((condition as ComplexCondition).conditions[i]);\n            if (attribute) {\n                return attribute;\n            }\n        }\n    }\n\n    setDataSource(dataSource: DataSource): void {\n        if (this.dataSource === dataSource) {\n            return;\n        }\n        this.dataSource = dataSource;\n        this.resetConditions();\n    }\n\n    resetConditions(): void {\n        if (this.rootCondition instanceof ComplexCondition) {\n            this.rootCondition.resetConditions();\n        } else {\n            throw new Error(\"Method is not applicable for SimpleCondition\");\n        }\n    }\n\n    autoInsertCondition(condition: Condition): void {\n        if (this.rootCondition instanceof ComplexCondition) {\n            this.rootCondition.autoInsertCondition(condition);\n        } else {\n            throw new Error(\"Method is not applicable for SimpleCondition\");\n        }\n    }\n\n    autoRemoveCondition(condition: Condition): void {\n        if (this.rootCondition instanceof ComplexCondition) {\n            this.rootCondition.autoRemoveCondition(condition);\n        } else {\n            throw new Error(\"Method is not applicable for SimpleCondition\");\n        }\n    }\n\n    isFolderMode(): boolean {\n        // 1. check feature flag\n        if (!this.sina.configuration?.folderMode) {\n            return false;\n        }\n        // 2. check metadata\n        // 2.1 check for hierarchy attribute in datsource\n        const hierarchyAttributes = this.dataSource.attributesMetadata.filter(\n            (attribute) =>\n                (attribute as AttributeMetadata).isHierarchy &&\n                (attribute as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.StaticHierarchyFacet\n        );\n        const hierarchyAttributeExists = hierarchyAttributes.length > 0;\n        // 2.2 check whether datasource itself is a hierarchy datasource\n        const isHierarchyDataSource =\n            this.dataSource.isHierarchyDataSource &&\n            this.dataSource.hierarchyDisplayType === HierarchyDisplayType.HierarchyResultView;\n        if (!hierarchyAttributeExists && !isHierarchyDataSource) {\n            return false;\n        }\n        // 3. check datasource type\n        if (this.dataSource.subType === DataSourceSubType.Filtered) {\n            return false; // search mode\n        }\n        // 4. check query\n        // 4.1 check folder filter conditions\n        const folderAttribute = this.getFolderAttribute();\n        const filterAttributes = this.rootCondition.getAttributes();\n        const folderFilterAttributes = filterAttributes.filter((attribute) => attribute === folderAttribute);\n        const noneFolderFilterAttributes = filterAttributes.filter(\n            (attribute) => attribute != folderAttribute\n        );\n        if (!this.sina.configuration.folderModeForInitialSearch) {\n            if (folderFilterAttributes.length === 0) {\n                return false;\n            }\n        }\n        // 4.2 check search term\n        if (\n            (this.searchTerm.length === 0 || this.searchTerm.trim() === \"*\") &&\n            noneFolderFilterAttributes.length === 0\n        ) {\n            return true; // folder mode\n        } else {\n            return false; // search mode\n        }\n    }\n\n    getFolderAttribute(): string {\n        // use case 1: we are displaying an hierarchy (helper) datasource\n        if (\n            this.dataSource.isHierarchyDataSource &&\n            this.dataSource.hierarchyDisplayType === HierarchyDisplayType.HierarchyResultView\n        ) {\n            return this.dataSource.hierarchyAttribute;\n        }\n        // use case 2: we display a \"regular\" datasource with associatea hierarchy helper datasource\n        const hierarchyAttributes = this.dataSource.attributesMetadata.filter(\n            (attribute) =>\n                (attribute as AttributeMetadata).isHierarchy &&\n                (attribute as AttributeMetadata).hierarchyDisplayType ===\n                    HierarchyDisplayType.StaticHierarchyFacet\n        );\n        if (hierarchyAttributes.length === 0) {\n            throw new InternalSinaError({ message: getText(\"error.sina.hierarchyAttributesMissing\") });\n        }\n        return hierarchyAttributes[0].id;\n    }\n\n    toJson(): FilterJSON {\n        return {\n            dataSource: this.dataSource.toJson(),\n            searchTerm: this.searchTerm,\n            rootCondition: this.rootCondition.toJson(),\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]}