{"version":3,"file":"ResultValueFormatter.js","names":["sap","ui","define","___Formatter","___AttributeType","____sina_util","____core_Log","Formatter","AttributeType","stringifyValue","Log","ResultValueFormatter","sina","ui5NumberFormat","ui5DateFormat","log","constructor","properties","super","this","undefined","initAsync","Promise","resolve","format","resultSet","_formatItemsInUI5Form","formatAsync","that","items","forEach","item","_formatItemInUI5Form","getDataSource","dataSource","id","attributeMetadataMap","Object","keys","length","titleAttributes","attribute","formatAttribute","titleDescriptionAttributes","detailAttributes","attributes","metadata","type","Group","i","formatSingleAttribute","valueFormatted","formatValue","valueHighlighted","isHighlighted","formatValueByUI5","formattedValue","date","Integer","getIntegerInstance","value","Double","getFloatInstance","Timestamp","Date","isNaN","getTime","getDateTimeInstance","replace","getDateInstance","UTC","Time","getTimeInstance","error","warn","formatValueByPlainJS","__exports","__esModule"],"sources":["ResultValueFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\n/* eslint-disable @typescript-eslint/no-this-alias */\n\nimport { Formatter } from \"./Formatter\";\nimport { AttributeType } from \"../AttributeType\";\nimport { Sina } from \"../Sina\";\nimport { stringifyValue } from \"../../sina/util\";\nimport { ResultSet } from \"../ResultSet\";\nimport { SearchResultSet } from \"../SearchResultSet\";\nimport { SearchResultSetItemAttributeGroup } from \"../SearchResultSetItemAttributeGroup\";\nimport { SearchResultSetItemAttributeBase } from \"../SearchResultSetItemAttributeBase\";\nimport { SearchResultSetItemAttribute } from \"../SearchResultSetItemAttribute\";\nimport { SearchResultSetItem } from \"../SearchResultSetItem\";\nimport { Log } from \"../../core/Log\";\n\nexport interface NumberFormat {\n    getIntegerInstance(): IntergerInstance;\n    getFloatInstance(): FloatInstance;\n}\n\ninterface IntergerInstance {\n    format(number): string;\n}\n\ninterface FloatInstance {\n    format(number): string;\n}\n\nexport interface DateFormat {\n    getDateTimeInstance(): DateTimeInstance;\n    getDateInstance(object): DateInstance;\n    getTimeInstance(object): TimeInstance;\n}\n\ninterface DateTimeInstance {\n    format(Date): string;\n}\n\ninterface DateInstance {\n    format(Date): string;\n}\n\ninterface TimeInstance {\n    format(Date): string;\n}\n\nexport class ResultValueFormatter extends Formatter {\n    sina: Sina;\n    ui5NumberFormat?: NumberFormat;\n    ui5DateFormat?: DateFormat;\n    private log = new Log(\"ResultvalueFormatter\");\n\n    constructor(properties?: { ui5NumberFormat?: NumberFormat; ui5DateFormat?: DateFormat }) {\n        super();\n        this.ui5NumberFormat = properties?.ui5NumberFormat || undefined;\n        this.ui5DateFormat = properties?.ui5DateFormat || undefined;\n    }\n\n    initAsync(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    format(resultSet: SearchResultSet): SearchResultSet {\n        return this._formatItemsInUI5Form(resultSet);\n    }\n\n    formatAsync(resultSet: SearchResultSet): Promise<ResultSet> {\n        resultSet = this._formatItemsInUI5Form(resultSet);\n        return Promise.resolve(resultSet);\n    }\n\n    private _formatItemsInUI5Form(resultSet: SearchResultSet): SearchResultSet {\n        const that = this;\n        that.sina = resultSet.sina;\n        resultSet.items.forEach(function (item) {\n            that._formatItemInUI5Form(item);\n        });\n        return resultSet;\n    }\n\n    public _formatItemInUI5Form(item: SearchResultSetItem) {\n        const that = this;\n        that.sina = item.sina;\n        if (\n            that.sina.getDataSource(item.dataSource.id) === undefined ||\n            that.sina.getDataSource(item.dataSource.id).attributeMetadataMap === undefined ||\n            Object.keys(that.sina.getDataSource(item.dataSource.id).attributeMetadataMap).length === 0\n        ) {\n            return;\n        }\n\n        item.titleAttributes.forEach(function (attribute) {\n            that.formatAttribute(attribute);\n        });\n\n        item.titleDescriptionAttributes.forEach(function (attribute) {\n            that.formatAttribute(attribute);\n        });\n\n        item.detailAttributes.forEach(function (attribute) {\n            that.formatAttribute(attribute);\n        });\n\n        // attributes are stored in following lists:\n        // - item.titleAttributes (sub-set)\n        // - item.titleDescriptionAttributes (sub-set)\n        // - item.detailAttributes (sub-set)\n        // - item.attributes (mother-set)\n        // - item.attributesMap (mother-set)\n        // Bug: some attributes are not pass-by-reference, format in one list, not effects others.\n        // Example: additional whyfound attributes created by whyfoundprocessor\n        // Workaround: format every list.\n\n        item.attributes.forEach(function (attribute) {\n            that.formatAttribute(attribute);\n        });\n    }\n\n    // attribute could be single attribute or group attribute\n    private formatAttribute(attribute: SearchResultSetItemAttributeBase): void {\n        const that = this;\n\n        // attribute \"HASHIERARCHYNODECHILD\" has undefined metadata\n        if (attribute?.metadata?.type === undefined) {\n            return;\n        }\n\n        if (attribute.metadata.type && attribute.metadata.type === AttributeType.Group) {\n            // group attributes\n            for (let i = 0; i < (attribute as SearchResultSetItemAttributeGroup).attributes.length; i++) {\n                that.formatAttribute(\n                    (attribute as SearchResultSetItemAttributeGroup).attributes[i].attribute\n                );\n            }\n        } else {\n            // single attribute\n            that.formatSingleAttribute(attribute as SearchResultSetItemAttribute);\n        }\n    }\n\n    private formatSingleAttribute(attribute: SearchResultSetItemAttribute): void {\n        attribute.valueFormatted = this.formatValue(attribute);\n\n        if (attribute.valueHighlighted === undefined || attribute.valueHighlighted?.length === 0) {\n            attribute.valueHighlighted = attribute.valueFormatted;\n            if (attribute.isHighlighted) {\n                // add client-side highlighted value\n                attribute.valueHighlighted = \"<b>\" + attribute.valueHighlighted + \"</b>\";\n            }\n        }\n    }\n\n    private formatValue(attribute: SearchResultSetItemAttribute): string {\n        if (typeof attribute?.valueFormatted === \"string\") {\n            return attribute.valueFormatted;\n        }\n\n        return this.formatValueByUI5(attribute);\n    }\n\n    private formatValueByUI5(attribute: SearchResultSetItemAttribute): string {\n        try {\n            let formattedValue = \"\";\n            let date = undefined;\n            switch (attribute.metadata.type) {\n                case AttributeType.Integer:\n                    formattedValue = this.ui5NumberFormat.getIntegerInstance().format(attribute.value);\n                    break;\n\n                case AttributeType.Double:\n                    formattedValue = this.ui5NumberFormat.getFloatInstance().format(attribute.value);\n                    break;\n\n                case AttributeType.Timestamp:\n                    // format: UTC date object -> time stamp string in time zone\n                    formattedValue = \"\";\n\n                    date = attribute.value;\n                    if (date instanceof Date && !isNaN(date.getTime())) {\n                        formattedValue = this.ui5DateFormat.getDateTimeInstance().format(date);\n                    }\n\n                    // attribute.value:                         formattedValue:\n                    // null                                     -> \"\"\n                    // undefined                                -> \"\"\n                    // \"\"                                       -> \"\"\n                    // new Date(\"2018-12-33T23:00:00.0000000Z\") -> \"\"\n                    // new Date(\"2018-03-22T23:00:00.0000000Z\") -> \"2018.03.23, 00:00:00\"\n                    // new Date(\"2018-03-22T23:00:00.000000Z\")) -> \"2018.03.23, 00:00:00\"\n                    // new Date(\"2018-03-22,23:00:00.000\"))     -> \"2018.03.22, 23:00:00\"\n                    // new Date(\"2018-03-2223:00:00.000000Z\"))  -> \"\"\n                    break;\n\n                case AttributeType.Date:\n                    // format: \"YYYY/MM/DD\" -> \"DD.MM.YYYY\" in UTC\n                    formattedValue = \"\";\n\n                    if (typeof attribute.value === \"string\") {\n                        date = new Date(attribute.value.replace(/\\//g, \"-\")); // \"YYYY-MM-DD\" is ISO 8601 format standard, \"YYYY/MM/DD\" NOT\n                        // new Date(\"2018-12-31\") = new Date(\"2018-12-31T00:00:00.0000000Z\")\n                        if (date instanceof Date && !isNaN(date.getTime())) {\n                            formattedValue = this.ui5DateFormat.getDateInstance({ UTC: true }).format(date);\n                        }\n                    }\n\n                    // attribute.value:                         formattedValue:\n                    // null                                     -> \"\"\n                    // undefined                                -> \"\"\n                    // \"\"                                       -> \"\"\n                    // \"2018-02-22\"                             -> \"2018.02.22\"\n                    // \"2018-02-2\"                              -> \"2018.02.01\"\n                    // \"2018-02-42\"                             -> \"\"\n                    // \"18-02-42\"                               -> \"\"\n                    break;\n\n                case AttributeType.Time:\n                    // format: \"hh:mm:ss\" -> \"hh.mm.ss AM\" in UTC\n                    formattedValue = \"\";\n\n                    if (typeof attribute.value === \"string\") {\n                        date = new Date(\"1970-01-01T\" + attribute.value + \".0000000Z\");\n                        if (date instanceof Date && !isNaN(date.getTime())) {\n                            formattedValue = this.ui5DateFormat.getTimeInstance({ UTC: true }).format(date);\n                        }\n                    }\n\n                    // attribute.value:                         formattedValue:\n                    // null                                     -> \"\"\n                    // undefined                                -> \"\"\n                    // \"\"                                       -> \"\"\n                    // \"13:42:59\"                               -> \"13:42:59\"\n                    // \"33:42:59\"                               -> \"\"\n                    break;\n\n                default:\n                    formattedValue = stringifyValue(attribute?.value);\n            }\n            return formattedValue;\n        } catch (error) {\n            this.log.warn(\"Error in formatting value: \" + error);\n            return stringifyValue(attribute?.value);\n        }\n    }\n\n    private formatValueByPlainJS(attribute: SearchResultSetItemAttribute): string {\n        return stringifyValue(attribute.value);\n        // stringifyValue convert value to string by checking typeof, NOT metadata type\n        // value could have different type from metadata type due to server mistake\n    }\n}\n"],"mappings":"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","ignoreList":[]}