{"version":3,"file":"sinaFactory-dbg.js","names":["sap","ui","define","sinaLog","___core_errors","util","___providers_abap_odata_Provider","___providers_dummy_Provider","___providers_hana_odata_Provider","___providers_inav2_Provider","___providers_multi_Provider","___providers_sample_Provider","___providers_sample2_Provider","___Sina","___SinaConfiguration","___i18n","__ui5_require_async","path","Promise","resolve","reject","require","module","__esModule","endsWith","default","Object","defineProperty","value","err","NoValidEnterpriseSearchAPIConfigurationFoundError","ABAPODataProvider","DummyProvider","HANAODataProvider","INAV2Provider","MultiProvider","SampleProvider","Sample2Provider","Sina","AvailableProviders","_normalizeConfiguration","injectGetText","process","env","NODE_ENV","logTest","Log","level","Severity","DEBUG","debug","createAsync","configuration","normalizedConfiguration","getText","logTarget","persistency","logLevel","log","provider","providerInstance","HANA_ODATA","ABAP_ODATA","INAV2","MULTI","SAMPLE","SAMPLE2","MOCK_NLQRESULTS","MockNlqResultsProvider","MOCK_SUGGESTIONTYPES","MockSuggestionTypesProvider","MOCK_DELETEANDREORDER","MockDeleteAndReorderProvider","DUMMY","Error","sina","initAsync","createByTrialAsync","inputConfigurations","checkSuccessCallback","configurations","all","map","bind","then","normalizedConfigurations","_mixinUrlConfiguration","_createSinaRecursively","_readConfigurationFromUrl","sinaConfiguration","getUrlParameter","sinaProvider","errors","providersTried","doCreate","index","length","finalError","join","error","push","info","configurationFromUrl","_mergeConfiguration","found","i","splice","configuration1","configuration2","property","__exports"],"sources":["sinaFactory.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as sinaLog from \"../core/Log\";\nimport { NoValidEnterpriseSearchAPIConfigurationFoundError } from \"../core/errors\";\nimport * as util from \"../core/util\";\nimport { AbstractProvider } from \"../providers/AbstractProvider\";\nimport { Provider as ABAPODataProvider } from \"../providers/abap_odata/Provider\";\nimport { Provider as DummyProvider } from \"../providers/dummy/Provider\";\nimport { Provider as HANAODataProvider } from \"../providers/hana_odata/Provider\";\nimport { Provider as INAV2Provider } from \"../providers/inav2/Provider\";\nimport { MultiProvider } from \"../providers/multi/Provider\";\nimport { Provider as SampleProvider } from \"../providers/sample/Provider\";\nimport { Provider as Sample2Provider } from \"../providers/sample2/Provider\";\nimport { Sina } from \"./Sina\";\nimport { AvailableProviders, SinaConfiguration, _normalizeConfiguration } from \"./SinaConfiguration\";\nimport { injectGetText } from \"./i18n\";\n\nif (\n    typeof process !== \"undefined\" &&\n    // eslint-disable-next-line no-undef\n    process.env &&\n    // eslint-disable-next-line no-undef\n    process.env.NODE_ENV &&\n    // eslint-disable-next-line no-undef\n    process.env.NODE_ENV === \"debug\"\n) {\n    const logTest = new sinaLog.Log();\n    sinaLog.Log.level = sinaLog.Severity.DEBUG;\n    logTest.debug(\"SINA log level set to debug!\");\n}\n\nexport async function createAsync(configuration: SinaConfiguration | string): Promise<Sina> {\n    const normalizedConfiguration = await _normalizeConfiguration(configuration);\n    if (normalizedConfiguration.getText) {\n        injectGetText(normalizedConfiguration.getText);\n    }\n    if (normalizedConfiguration.logTarget) {\n        sinaLog.Log.persistency = normalizedConfiguration.logTarget;\n    }\n    if (typeof normalizedConfiguration.logLevel !== \"undefined\") {\n        sinaLog.Log.level = normalizedConfiguration.logLevel;\n    }\n    const log = new sinaLog.Log(\"sinaFactory\");\n    log.debug(\"Creating new sina (esh client) instance using provider \" + normalizedConfiguration.provider);\n    let providerInstance: AbstractProvider;\n    switch (normalizedConfiguration.provider) {\n        case AvailableProviders.HANA_ODATA: {\n            providerInstance = new HANAODataProvider();\n            break;\n        }\n        case AvailableProviders.ABAP_ODATA: {\n            providerInstance = new ABAPODataProvider();\n            break;\n        }\n        case AvailableProviders.INAV2: {\n            providerInstance = new INAV2Provider();\n            break;\n        }\n        case AvailableProviders.MULTI: {\n            providerInstance = new MultiProvider();\n            break;\n        }\n        case AvailableProviders.SAMPLE: {\n            providerInstance = new SampleProvider();\n            break;\n        }\n        case AvailableProviders.SAMPLE2: {\n            providerInstance = new Sample2Provider();\n            break;\n        }\n        case AvailableProviders.MOCK_NLQRESULTS: {\n            // eslint-disable-next-line\n            // @ts-ignore\n            const module = await import(\"/sap/esh/search/ui/sinaNexTS/providers/mock/MockNlqResultsProvider\");\n            providerInstance = new module.MockNlqResultsProvider();\n            break;\n        }\n        case AvailableProviders.MOCK_SUGGESTIONTYPES: {\n            const module = await import(\n                // eslint-disable-next-line\n                // @ts-ignore\n                \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockSuggestionTypesProvider\"\n            );\n            providerInstance = new module.MockSuggestionTypesProvider();\n            break;\n        }\n        case AvailableProviders.MOCK_DELETEANDREORDER: {\n            const module = await import(\n                // eslint-disable-next-line\n                // @ts-ignore\n                \"/sap/esh/search/ui/sinaNexTS/providers/mock/MockDeleteAndReorderProvider\"\n            );\n            providerInstance = new module.MockDeleteAndReorderProvider();\n            break;\n        }\n        case AvailableProviders.DUMMY: {\n            providerInstance = new DummyProvider();\n            break;\n        }\n        default: {\n            // Do not print mock providers in error message\n            throw new Error(\n                \"Unknown Provider: '\" +\n                    normalizedConfiguration.provider +\n                    \"' - Available Providers: \" +\n                    AvailableProviders.HANA_ODATA +\n                    \", \" +\n                    AvailableProviders.ABAP_ODATA +\n                    \", \" +\n                    AvailableProviders.INAV2 +\n                    \", \" +\n                    AvailableProviders.MULTI +\n                    \", \" +\n                    AvailableProviders.SAMPLE +\n                    \", \" +\n                    AvailableProviders.SAMPLE2 +\n                    \", \" +\n                    AvailableProviders.DUMMY\n            );\n        }\n    }\n\n    const sina = new Sina(providerInstance);\n    await sina.initAsync(normalizedConfiguration);\n    return sina;\n}\n\nexport function createByTrialAsync(\n    inputConfigurations: Array<SinaConfiguration | string | AvailableProviders>,\n    checkSuccessCallback?: (sina: Sina) => boolean\n): Promise<Sina> {\n    let configurations;\n\n    // normalize configurations\n    return Promise.all(inputConfigurations.map(_normalizeConfiguration.bind(this)))\n        .then(\n            function (normalizedConfigurations) {\n                // mixin url configuration into configurations\n                configurations = normalizedConfigurations;\n                return _mixinUrlConfiguration(configurations);\n            }.bind(this)\n        )\n        .then(\n            function () {\n                // recursive creation of sina by loop at configurations\n                // (first configuration which successfully creates sina wins)\n                return _createSinaRecursively(configurations, checkSuccessCallback);\n            }.bind(this)\n        );\n}\n\nasync function _readConfigurationFromUrl(): Promise<SinaConfiguration | void> {\n    const sinaConfiguration = util.getUrlParameter(\"sinaConfiguration\");\n    if (sinaConfiguration) {\n        return _normalizeConfiguration(sinaConfiguration);\n    }\n    const sinaProvider = util.getUrlParameter(\"sinaProvider\");\n    if (sinaProvider) {\n        return _normalizeConfiguration(sinaProvider);\n    }\n    return Promise.resolve();\n}\n\nasync function _createSinaRecursively(\n    configurations: SinaConfiguration[],\n    checkSuccessCallback?: (sina: Sina) => boolean\n): Promise<Sina> {\n    const log = new sinaLog.Log(\"sinaFactory\");\n    const errors = [];\n    // set default for checkSuccesCallback\n    checkSuccessCallback =\n        checkSuccessCallback ||\n        function () {\n            return true;\n        };\n\n    const providersTried = [];\n    // helper for recursion\n    const doCreate = function (index): Promise<Sina> {\n        if (index >= configurations.length) {\n            let finalError;\n            if (errors.length >= 1) {\n                // display error of last sina config (this is what at least shall work)\n                // - FLP:     ABAP OData and INA are failing -> at least app-search shall work\n                // - DSP/SAC: Only one config -> shalll work\n                finalError = new NoValidEnterpriseSearchAPIConfigurationFoundError(\n                    providersTried.join(\", \"),\n                    errors[errors.length - 1].error\n                );\n            } else {\n                // no error details/previous (fallback, not expected)\n                finalError = new NoValidEnterpriseSearchAPIConfigurationFoundError(providersTried.join(\", \"));\n            }\n            return Promise.reject(finalError);\n        }\n        const configuration = configurations[index];\n        providersTried.push(configuration.provider);\n        return createAsync(configuration).then(\n            function (sina) {\n                if (checkSuccessCallback(sina)) {\n                    return sina;\n                }\n                return doCreate(index + 1);\n            },\n            function (error: Error) {\n                log.info(error);\n                errors.push({ index: index, error: error });\n                return doCreate(index + 1);\n            }\n        );\n    }.bind(this);\n\n    // start recursion\n    return doCreate(0);\n}\n\nasync function _mixinUrlConfiguration(configurations: SinaConfiguration[]): Promise<void> {\n    const configurationFromUrl = await _readConfigurationFromUrl();\n\n    if (!configurationFromUrl) {\n        return;\n    }\n\n    if (configurations.length === 1) {\n        // 1) just merge url configuration into configuration\n        _mergeConfiguration(configurations[0], configurationFromUrl);\n        return;\n    } else {\n        // 2) use url configuration also for filtering (legacy: useful for forcing flp to use inav2 for a abap system which offers abap_odata and inav2)\n        let found = false;\n        for (let i = 0; i < configurations.length; ++i) {\n            const configuration = configurations[i];\n\n            // ignore dummy provider\n            if (configuration.provider === AvailableProviders.DUMMY) {\n                continue;\n            }\n\n            // remove not matching providers\n            if (configuration.provider !== configurationFromUrl.provider) {\n                configurations.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            // merge ulr configuration into configuration\n            found = true;\n            _mergeConfiguration(configuration, configurationFromUrl);\n        }\n        if (!found) {\n            configurations.splice(0, 0, configurationFromUrl);\n        }\n    }\n}\n\nfunction _mergeConfiguration(configuration1, configuration2) {\n    // TODO: deep merge\n    for (const property in configuration2) {\n        configuration1[property] = configuration2[property];\n    }\n}\n"],"mappings":"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","ignoreList":[]}