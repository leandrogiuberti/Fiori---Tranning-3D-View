{"version":3,"file":"SearchQuery-dbg.js","names":["sap","ui","define","core","___Query","___EqualsMode","___ConditionType","___DataSourceType","___core_errors","___ComparisonOperator","____timecontroller_timecontrolledexecutor","Query","EqualsMode","ConditionType","DataSourceSubType","DataSourceType","QueryIsReadOnlyError","ComparisonOperator","TimeControlledExecutor","SearchRequest","query","constructor","execute","result","_executeImpl","equals","other","clone","SearchQuery","calculateFacets","multiSelectFacets","facetTop","timeControlledExecutor","groupBy","limitAjaxRequests","properties","suppressRefuseOutdatedResponsesDecorator","outdatedTimeLimit","setCalculateFacets","setMultiSelectFacets","setFacetTop","_createReadOnlyClone","getResultSetAsync","skip","top","nlq","filter","sortOrder","sina","mode","CheckFireQuery","_execute","filterAttributes","chartQueries","_collectAttributesWithFilter","_createChartQueries","requests","delayedCharQueries","push","_executeSearchQuery","i","length","chartQuery","dataSourceMetadata","dataSource","getAttributeMetadata","dimension","usage","Facet","results","Promise","all","delayedChartQueryRequests","j","delayedCharQuery","delayedCharQueryResults","concat","searchResult","chartResultSets","slice","_mergeFacetsToSearchResultSet","isFolderMode","_executeSearchQueryInFolderMode","_executeSearchQueryInSearchMode","_doExecuteSearchQuery","queryForFacets","queryForItems","_assembleQueryForItems","resultSetForFacets","resultSetForItems","mergedResultSet","_mergeResultSetsInNavigationFolderMode","items","item","parent","totalCount","addErrors","getErrors","folderAttribute","getFolderAttribute","isAdditionalRootNodeFilterNeeded","autoInsertCondition","createSimpleCondition","attribute","operator","DescendantOf","value","folderAttributeConditions","rootCondition","getConditionsByAttribute","condition","ChildOf","descendantFilterConditions","transformedQuery","_filteredQueryTransform","resultSet","provider","executeSearchQuery","_filteredQueryBackTransform","_genericFilteredQueryTransform","type","BusinessObject","subType","Filtered","chartResultSet","facets","_formatResultSetAsync","executeSequentialAsync","searchResultSetFormatters","formatter","formatAsync","attributeMap","_doCollectAttributes","attributedIds","Object","keys","attributeId","attributeMetadata","isHierarchy","Simple","Complex","conditions","subCondition","_createChartQuery","filterAttribute","createChartQuery","setFilter","removeAttributeConditions","searchResultSet","_addSelectedFiltersToSearchResultSet","_addChartResultSetToSearchResultSet","_calculateFacetTitle","getFirstAttribute","label","conditionAttributeLabel","conditionAttribute","matchFacetIndex","_findMatchFacet","matchFacet","chartquery","_createChartResultSet","title","facetTotalCount","undefined","splice","countValue","selectedFacetItemList","k","matchFacetItemIndex","_findFilterConditionInFacetItemList","_createChartResultSetItem","filterCondition","dimensionValueFormatted","valueLabel","measureValue","measureValueFormatted","facetItemSelectionOutsideRange","appendFacetItemList","m","matchIndex","_isRangeFacet","sort","a","b","facet","facetItems","index","chartFacetitem","AttributeType","Double","__exports","__esModule"],"sources":["SearchQuery.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../core/core\";\nimport { Query, QueryOptions } from \"./Query\";\nimport { EqualsMode } from \"./EqualsMode\";\nimport { ConditionType } from \"./ConditionType\";\nimport { DataSourceSubType, DataSourceType } from \"./DataSourceType\";\nimport { SearchResultSet } from \"./SearchResultSet\";\nimport { Formatter } from \"./formatters/Formatter\";\nimport { Condition } from \"./Condition\";\nimport { SimpleCondition } from \"./SimpleCondition\";\nimport { ComplexCondition } from \"./ComplexCondition\";\nimport { ChartQuery } from \"./ChartQuery\";\nimport { DataSource } from \"./DataSource\";\nimport { ChartResultSet } from \"./ChartResultSet\";\nimport { QueryIsReadOnlyError } from \"../core/errors\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\nimport { ChartResultSetItem } from \"./ChartResultSetItem\";\nimport { ComparisonOperator } from \"./ComparisonOperator\";\nimport { Request } from \"../../timecontroller/request\";\nimport { TimeControlledExecutor } from \"../../timecontroller/timecontrolledexecutor\";\n\n/*function wait(delay: number): Promise<boolean> {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, delay);\n    });\n}*/\n\nclass SearchRequest implements Request<SearchResultSet> {\n    query: SearchQuery;\n    constructor(query: SearchQuery) {\n        this.query = query;\n    }\n    async execute(): Promise<SearchResultSet> {\n        const result = this.query._executeImpl(this.query);\n        return result;\n    }\n    equals(other: Request<SearchResultSet>): boolean {\n        return this.query.equals((other as SearchRequest).query);\n    }\n    clone(): SearchRequest {\n        return new SearchRequest(this.query.clone());\n    }\n}\n\nexport interface SearchQueryOptions extends QueryOptions {\n    calculateFacets?: boolean;\n    multiSelectFacets?: boolean;\n    facetTop?: number;\n    groupBy?: {\n        attributeName: string[];\n        aggregateCountAlias?: string;\n    };\n    limitAjaxRequests?: boolean;\n}\n\nexport class SearchQuery extends Query {\n    calculateFacets = false;\n    multiSelectFacets = false;\n    facetTop = 5;\n    timeControlledExecutor;\n    groupBy?: {\n        attributeName: string[];\n        aggregateCountAlias?: string;\n    };\n    limitAjaxRequests?: boolean = false;\n\n    constructor(properties: SearchQueryOptions) {\n        if (properties.limitAjaxRequests) {\n            properties.suppressRefuseOutdatedResponsesDecorator = true;\n        }\n        super(properties);\n        this.calculateFacets = properties.calculateFacets ?? this.calculateFacets;\n        this.multiSelectFacets = properties.multiSelectFacets ?? this.multiSelectFacets;\n        this.facetTop = properties.facetTop ?? this.facetTop;\n        this.groupBy = properties.groupBy ?? this.groupBy;\n        this.limitAjaxRequests = properties.limitAjaxRequests ?? this.limitAjaxRequests;\n        if (this.limitAjaxRequests) {\n            this.timeControlledExecutor = new TimeControlledExecutor({ outdatedTimeLimit: 3000 });\n        }\n    }\n\n    setCalculateFacets(calculateFacets = false): void {\n        this.calculateFacets = calculateFacets;\n    }\n\n    setMultiSelectFacets(multiSelectFacets = false): void {\n        this.multiSelectFacets = multiSelectFacets;\n    }\n\n    setFacetTop(facetTop = 5): void {\n        this.facetTop = facetTop;\n    }\n\n    _createReadOnlyClone(): SearchQuery {\n        const query = this.clone();\n        query.getResultSetAsync = function () {\n            throw new QueryIsReadOnlyError();\n        };\n        return query;\n    }\n\n    clone(): SearchQuery {\n        const clone = new SearchQuery({\n            skip: this.skip,\n            top: this.top,\n            nlq: this.nlq,\n            filter: this.filter.clone(),\n            sortOrder: this.sortOrder,\n            sina: this.sina,\n            groupBy: this.groupBy,\n            calculateFacets: this.calculateFacets,\n            multiSelectFacets: this.multiSelectFacets,\n            facetTop: this.facetTop,\n            limitAjaxRequests: this.limitAjaxRequests,\n        });\n        return clone;\n    }\n\n    equals(other: SearchQuery, mode: EqualsMode = EqualsMode.CheckFireQuery): boolean {\n        if (!(other instanceof SearchQuery)) {\n            return false;\n        }\n\n        if (!other) {\n            return false;\n        }\n\n        if (!super.equals(other)) {\n            return false;\n        }\n\n        if (this.groupBy !== other.groupBy) {\n            return false;\n        }\n\n        // check multiSelectFacets\n        if (this.multiSelectFacets !== other.multiSelectFacets) {\n            return false;\n        }\n        // check facetTop\n        if (this.facetTop !== other.facetTop) {\n            return false;\n        }\n\n        if (this.limitAjaxRequests !== other.limitAjaxRequests) {\n            return false;\n        }\n\n        // special check for calculate Facets\n        switch (mode) {\n            case EqualsMode.CheckFireQuery:\n                if (other.calculateFacets && !this.calculateFacets) {\n                    // if old query (other) was with facets and new is without\n                    // -> we do not need to fire new query -> return true\n                    return true;\n                }\n                return this.calculateFacets === other.calculateFacets;\n            default:\n                return this.calculateFacets === other.calculateFacets;\n        }\n    }\n\n    _execute(query: SearchQuery): Promise<SearchResultSet> {\n        if (this.timeControlledExecutor) {\n            // timeControlledExecutor adds logic for\n            // prevention of too many calls in a short time\n            // (timeControlledExecutor finally calls _executeImpl)\n            return this.timeControlledExecutor.execute(new SearchRequest(query));\n        } else {\n            return this._executeImpl(query);\n        }\n    }\n\n    async _executeImpl(query: SearchQuery): Promise<SearchResultSet> {\n        let filterAttributes;\n        let chartQueries = [];\n\n        // multi select facets: assemble chart queries for all facets with set filters\n        // (The main search request typically does not inlcude facets if a filter is set for a facet,\n        //  because the facet then is trivial. For multi select we need to display also facets with set\n        // filters therefore a special chart query is assembled)\n        if (this.multiSelectFacets && this.calculateFacets) {\n            // collect attribute for which filters are set\n            filterAttributes = this._collectAttributesWithFilter(query);\n            // create chart queries for filterAttribute\n            chartQueries = this._createChartQueries(query, filterAttributes);\n        }\n\n        // fire all requests\n        const requests = [];\n        const delayedCharQueries = [];\n        requests.push(this._executeSearchQuery(query));\n        for (let i = 0; i < chartQueries.length; ++i) {\n            const chartQuery = chartQueries[i];\n            const dataSourceMetadata = query.filter.dataSource.getAttributeMetadata(chartQuery.dimension);\n            if (!dataSourceMetadata) {\n                // in case of inav2 the metadata ist loaded by the main search call\n                // ->\n                // collect chartQueries for which we have no metadata\n                // in order to execute them after the main search call returned\n                delayedCharQueries.push(chartQuery);\n            } else {\n                if (dataSourceMetadata.usage.Facet) {\n                    requests.push(chartQuery.getResultSetAsync());\n                }\n            }\n        }\n\n        // wait for search query and for not delayed chart querues\n        let results = await Promise.all(requests);\n\n        // fire delayed chart queries (not tested because we have no inav2 in typescript sina)\n        const delayedChartQueryRequests = [];\n        for (let j = 0; j < delayedCharQueries.length; ++j) {\n            const delayedCharQuery = delayedCharQueries[j];\n            const dataSourceMetadata = query.filter.dataSource.getAttributeMetadata(\n                delayedCharQuery.dimension\n            );\n            if (dataSourceMetadata.usage.Facet) {\n                delayedChartQueryRequests.push(delayedCharQuery.getResultSetAsync());\n            }\n        }\n\n        // wait for delayed chart queries and append to total results\n        const delayedCharQueryResults = await Promise.all(delayedChartQueryRequests);\n        results = results.concat(delayedCharQueryResults);\n\n        const searchResult = results[0];\n        const chartResultSets = results.slice(1);\n        this._mergeFacetsToSearchResultSet(searchResult, chartResultSets);\n        return searchResult;\n    }\n\n    async _executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        if (query.filter.isFolderMode()) {\n            return await this._executeSearchQueryInFolderMode(query);\n        } else {\n            return await this._executeSearchQueryInSearchMode(query);\n        }\n    }\n\n    async _executeSearchQueryInSearchMode(query: SearchQuery): Promise<SearchResultSet> {\n        return await this._doExecuteSearchQuery(query);\n    }\n\n    async _executeSearchQueryInFolderMode(query: SearchQuery): Promise<SearchResultSet> {\n        if (query.calculateFacets) {\n            // facet calculation enabled -> two search alls: (1) descendnant-of (2) child-of\n            const queryForFacets = query; // query with descendant-of filter for getting the facets\n            const queryForItems = this._assembleQueryForItems(query); // query with child-of filter for getting the result set items\n            const [resultSetForFacets, resultSetForItems] = await Promise.all([\n                this._doExecuteSearchQuery(queryForFacets),\n                this._doExecuteSearchQuery(queryForItems),\n            ]);\n            const mergedResultSet = this._mergeResultSetsInNavigationFolderMode(\n                resultSetForFacets,\n                resultSetForItems\n            );\n            return mergedResultSet;\n        } else {\n            // facet calculation disabled -> one search call: (1) child-of\n            const queryForItems = this._assembleQueryForItems(query); // query with child-of filter for getting the result set items\n            const resultSetForItems = await this._doExecuteSearchQuery(queryForItems);\n            resultSetForItems.query = query;\n            return resultSetForItems;\n        }\n    }\n\n    _mergeResultSetsInNavigationFolderMode(\n        resultSetForFacets: SearchResultSet,\n        resultSetForItems: SearchResultSet\n    ): SearchResultSet {\n        // move items from resultSetForItems to resultSetForFacets\n        resultSetForFacets.items = [];\n        for (const item of resultSetForItems.items) {\n            item.parent = resultSetForFacets;\n            resultSetForFacets.items.push(item);\n        }\n        // move total count from resultSetForItems to resultSetForFacets\n        resultSetForFacets.totalCount = resultSetForItems.totalCount;\n        resultSetForFacets.addErrors(resultSetForItems.getErrors());\n        return resultSetForFacets;\n    }\n\n    _assembleQueryForItems(query: SearchQuery): SearchQuery {\n        // clone query\n        const queryForItems = query.clone();\n        queryForItems.calculateFacets = false;\n        const folderAttribute = queryForItems.filter.getFolderAttribute();\n        // if there is no descendant-of filter then add an artifical descendant-of filter for root node\n        if (this.isAdditionalRootNodeFilterNeeded(queryForItems)) {\n            queryForItems.filter.autoInsertCondition(\n                this.sina.createSimpleCondition({\n                    attribute: folderAttribute,\n                    operator: ComparisonOperator.DescendantOf,\n                    value: \"$$ROOT$$\",\n                })\n            );\n        }\n        // switch operator from descendant-of to child-of\n        const folderAttributeConditions =\n            queryForItems.filter.rootCondition.getConditionsByAttribute(folderAttribute);\n        for (const condition of folderAttributeConditions) {\n            if (condition.operator === ComparisonOperator.DescendantOf) {\n                condition.operator = ComparisonOperator.ChildOf;\n            }\n        }\n        return queryForItems;\n    }\n\n    isAdditionalRootNodeFilterNeeded(query: SearchQuery): boolean {\n        const folderAttribute = query.filter.getFolderAttribute();\n        const folderAttributeConditions =\n            query.filter.rootCondition.getConditionsByAttribute(folderAttribute);\n        const descendantFilterConditions = folderAttributeConditions.filter(\n            (condition) => condition.operator === ComparisonOperator.DescendantOf\n        );\n        return descendantFilterConditions.length === 0;\n    }\n\n    async _doExecuteSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        const transformedQuery = this._filteredQueryTransform(query) as SearchQuery;\n        const resultSet = await this.sina.provider.executeSearchQuery(transformedQuery);\n        return this._filteredQueryBackTransform(query, resultSet);\n    }\n\n    _filteredQueryTransform(query: SearchQuery): Query {\n        return this._genericFilteredQueryTransform(query);\n    }\n\n    _filteredQueryBackTransform(query: SearchQuery, resultSet: SearchResultSet): SearchResultSet {\n        if (\n            query.filter.dataSource.type !== DataSourceType.BusinessObject ||\n            query.filter.dataSource.subType !== DataSourceSubType.Filtered\n        ) {\n            return resultSet;\n        }\n        resultSet.query = query;\n        for (const chartResultSet of resultSet.facets) {\n            chartResultSet.query.filter = query.filter.clone();\n        }\n        return resultSet;\n    }\n\n    async _formatResultSetAsync(resultSet: SearchResultSet): Promise<void> {\n        return core.executeSequentialAsync(\n            this.sina.searchResultSetFormatters,\n            function (formatter: Formatter) {\n                return formatter.formatAsync(resultSet);\n            }\n        );\n    }\n\n    _collectAttributesWithFilter(query: SearchQuery): string[] {\n        // recursively collect attributes\n        const attributeMap = {};\n        this._doCollectAttributes(attributeMap, query.filter.rootCondition);\n        const attributedIds = Object.keys(attributeMap);\n        // filter out hierarchy attributes\n        // (for hierarchy attributes no chart queries are created per attribute\n        // instead in SearchHierarchyFacetsFormatter HierarchyQueries are created)\n        return attributedIds.filter((attributeId) => {\n            const attributeMetadata = query.filter.dataSource.getAttributeMetadata(\n                attributeId\n            ) as AttributeMetadata;\n            if (!attributeMetadata) {\n                return true; // inav2: metadata may not be loaded, but inav2 does not support hierarchy\n            }\n            return !attributeMetadata.isHierarchy;\n        });\n    }\n\n    _doCollectAttributes(attributeMap: Record<string, boolean>, condition: Condition): void {\n        switch (condition.type) {\n            case ConditionType.Simple:\n                attributeMap[(condition as SimpleCondition).attribute] = true;\n                break;\n            case ConditionType.Complex:\n                for (let i = 0; i < (condition as ComplexCondition).conditions.length; ++i) {\n                    const subCondition = (condition as ComplexCondition).conditions[i];\n                    this._doCollectAttributes(attributeMap, subCondition);\n                }\n                break;\n        }\n    }\n\n    _createChartQuery(query: Query, filterAttribute: string): ChartQuery {\n        const chartQuery = this.sina.createChartQuery({\n            dimension: filterAttribute,\n            top: this.facetTop,\n            nlq: this.nlq,\n        });\n        chartQuery.setFilter(query.filter.clone());\n        (chartQuery.filter.rootCondition as ComplexCondition).removeAttributeConditions(filterAttribute);\n        return chartQuery;\n    }\n\n    _createChartQueries(query: SearchQuery, filterAttributes: string): Array<ChartQuery> {\n        const chartQueries = [];\n        for (let i = 0; i < filterAttributes.length; ++i) {\n            const filterAttribute = filterAttributes[i];\n            const chartQuery = this._createChartQuery(query, filterAttribute);\n            chartQueries.push(chartQuery);\n        }\n        return chartQueries;\n    }\n\n    _mergeFacetsToSearchResultSet(\n        searchResultSet: SearchResultSet,\n        chartResultSets: Array<ChartResultSet>\n    ): void {\n        //////////////////////////////////////////////////////////////////////////////////\n        // selected filters\n        // main request\n        // chart request\n        // total count\n\n        // 1. selected filters -> facets (no count info)\n        // 2. facets (no count info) + total count -> facets (facets with one facet item, count info)\n        // 3. facets (facets with one facet item, count info) + main request (count info) -> facets (partial count info)\n        // 4. facets (partial count info) + chart request -> facets\n        //////////////////////////////////////////////////////////////////////////////////\n\n        this._addSelectedFiltersToSearchResultSet(searchResultSet);\n        for (let i = 0; i < chartResultSets.length; ++i) {\n            const chartResultSet = chartResultSets[i];\n            this._addChartResultSetToSearchResultSet(searchResultSet, chartResultSet);\n        }\n    }\n\n    _calculateFacetTitle(condition: SimpleCondition, dataSource: DataSource): string {\n        // if (condition.attributeLabel) {\n        //     return condition.attributeLabel;\n        // }\n        const attribute = condition.getFirstAttribute();\n        const attributeMetadata = dataSource.getAttributeMetadata(attribute) as AttributeMetadata;\n        return attributeMetadata.label;\n    }\n\n    _addSelectedFiltersToSearchResultSet(searchResultSet): void {\n        // ToDo: add type SearchResultSet, but currently leading to syntax error for 'rootCondition.conditions[j].conditions'\n        const dataSource = searchResultSet.query.filter.dataSource;\n        const rootCondition = searchResultSet.query.filter.rootCondition;\n        for (let j = 0; j < rootCondition.conditions.length; j++) {\n            const conditions = rootCondition.conditions[j].conditions;\n            const conditionAttributeLabel = this._calculateFacetTitle(\n                conditions[0],\n                searchResultSet.query.filter.dataSource\n            );\n            let conditionAttribute: string;\n            switch (conditions[0].type) {\n                case ConditionType.Simple:\n                    conditionAttribute = conditions[0].attribute;\n                    break;\n                case ConditionType.Complex:\n                    conditionAttribute = conditions[0].conditions[0].attribute;\n                    break;\n            }\n            const attributeMetadata: AttributeMetadata = dataSource.getAttributeMetadata(conditionAttribute);\n            if (attributeMetadata.isHierarchy) {\n                continue;\n            }\n            const matchFacetIndex = this._findMatchFacet(conditionAttribute, searchResultSet.facets);\n            let matchFacet = searchResultSet.facets[matchFacetIndex];\n            if (!matchFacet) {\n                const chartquery = this._createChartQuery(searchResultSet.query, conditionAttribute);\n                matchFacet = this.sina._createChartResultSet({\n                    title: conditionAttributeLabel,\n                    items: [],\n                    query: chartquery,\n                    facetTotalCount: undefined,\n                });\n                searchResultSet.facets.splice(matchFacetIndex, 1, matchFacet);\n            }\n            let countValue = null;\n            if (conditions.length === 1) {\n                countValue = searchResultSet.totalCount;\n            }\n            const selectedFacetItemList = [];\n            for (let k = 0; k < conditions.length; k++) {\n                let matchFacetItemIndex;\n                // check in searchResultSet facets\n                if (this._findFilterConditionInFacetItemList(conditions[k], matchFacet.items) >= 0) {\n                    matchFacetItemIndex = this._findFilterConditionInFacetItemList(\n                        conditions[k],\n                        matchFacet.items\n                    );\n                    selectedFacetItemList.push(matchFacet.items[matchFacetItemIndex]);\n                } else {\n                    selectedFacetItemList.push(\n                        this.sina._createChartResultSetItem({\n                            filterCondition: conditions[k],\n                            dimensionValueFormatted: conditions[k].valueLabel || conditions[k].value,\n                            measureValue: countValue,\n                            measureValueFormatted: conditions[k].valueLabel || conditions[k].value,\n                        })\n                    );\n                }\n            }\n            matchFacet.items = selectedFacetItemList;\n        }\n    }\n\n    _addChartResultSetToSearchResultSet(\n        searchResultSet: SearchResultSet,\n        chartResultSet: ChartResultSet\n    ): void {\n        searchResultSet.addErrors(chartResultSet.getErrors());\n        if (chartResultSet.items.length === 0) {\n            return;\n        }\n\n        // check for matching facet in searchResultSet\n        const dimension = chartResultSet.query.dimension;\n        const matchFacetIndex = this._findMatchFacet(dimension, searchResultSet.facets);\n        const matchFacet = searchResultSet.facets[matchFacetIndex];\n\n        // selected facet items for this dimension\n        const selectedFacetItemList = matchFacet.items;\n\n        // merge selected facet items to chartResultSet\n        let facetItemSelectionOutsideRange = false;\n        const appendFacetItemList = [];\n        for (let m = 0; m < selectedFacetItemList.length; m++) {\n            const matchIndex = this._findFilterConditionInFacetItemList(\n                (selectedFacetItemList[m] as ChartResultSetItem).filterCondition,\n                chartResultSet.items\n            );\n            if (matchIndex >= 0) {\n                // if find, insert matching facet item to append list for range facet, because it has count info\n                if (this._isRangeFacet(chartResultSet.query)) {\n                    appendFacetItemList.push(chartResultSet.items[matchIndex]);\n                }\n            } else {\n                // not find, insert selected facet item to append list\n                // for range facet, set boolean as true\n                if (this._isRangeFacet(chartResultSet.query)) {\n                    facetItemSelectionOutsideRange = true;\n                }\n                appendFacetItemList.push(selectedFacetItemList[m]);\n            }\n        }\n        appendFacetItemList.sort(function (a, b) {\n            return b.measureValue - a.measureValue;\n        });\n        if (this._isRangeFacet(chartResultSet.query)) {\n            if (facetItemSelectionOutsideRange) {\n                chartResultSet.items = appendFacetItemList;\n            }\n        } else {\n            chartResultSet.items = chartResultSet.items.concat(appendFacetItemList);\n        }\n\n        // merged list as search result facet\n        searchResultSet.facets.splice(matchFacetIndex, 1, chartResultSet);\n    }\n\n    _findMatchFacet(dimension: string, facets): number {\n        let i = 0;\n        for (; i < facets.length; i++) {\n            const facet = facets[i];\n            if (facet.query.dimension === dimension) {\n                break;\n            }\n        }\n        return i;\n    }\n\n    _findFilterConditionInFacetItemList(filterCondition: Condition, facetItems): number {\n        let index = -1;\n        for (let i = 0; i < facetItems.length; i++) {\n            const chartFacetitem = facetItems[i];\n            if (filterCondition.equals(chartFacetitem.filterCondition)) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    _isRangeFacet(query: ChartQuery): boolean {\n        const dataSourceMetadata = query.filter.dataSource.getAttributeMetadata(query.dimension);\n        if (dataSourceMetadata.type === query.sina.AttributeType.Double) {\n            return true;\n        }\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]}