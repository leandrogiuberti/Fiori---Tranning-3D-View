{"version":3,"file":"SimpleCondition.js","names":["sap","ui","define","util","___ComparisonOperator","___Condition","___ConditionType","ComparisonOperator","Condition","ConditionType","isSimpleCondition","condition","SimpleCondition","type","Simple","operator","Eq","attribute","isDynamicValue","value","constructor","properties","super","this","userDefined","setSina","sina","clone","attributeLabel","valueLabel","equals","other","Date","getTime","containsAttribute","_collectAttributes","attributeMap","getFirstAttribute","_collectFilterConditions","filterConditions","push","removeAttributeConditions","deleted","toJson","jsonValue","dateToJson","result","dynamic","fromString","simpleConditionString","parts","split","shift","Error","join","replace","startsWith","endsWith","slice","toString","escapedValue","__exports","__esModule"],"sources":["SimpleCondition.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as util from \"../core/util\";\nimport { ComparisonOperator } from \"./ComparisonOperator\";\nimport { Condition, ConditionProperties } from \"./Condition\";\nimport { ConditionType } from \"./ConditionType\";\nimport type { Sina } from \"./Sina\";\nimport { Value } from \"./types\";\n\nexport interface SimpleConditionJSON {\n    type: ConditionType;\n    operator: ComparisonOperator;\n    value:\n        | unknown\n        | Date\n        | number\n        | {\n              type: string;\n              value: string;\n          };\n    valueLabel: string;\n    attribute: string;\n    attributeLabel: string;\n    userDefined?: boolean;\n    dynamic?: boolean;\n}\n\nexport function isSimpleCondition(condition: unknown): condition is SimpleCondition {\n    return condition instanceof SimpleCondition;\n}\n\n// _meta: {\n//     properties: {\n//         operator: {\n//             required: false,\n//             default: function () {\n//                 return this.sina.ComparisonOperator.Eq;\n//             }\n//         },\n//         attribute: {\n//             required: true\n//         },\n//         value: {\n//             required: true\n//         }\n//     }\n// },\nexport interface SimpleConditionProperties extends ConditionProperties {\n    operator?: ComparisonOperator;\n    attribute: string;\n    userDefined?: boolean | null;\n    isDynamicValue?: boolean;\n    value: Value;\n}\nexport class SimpleCondition extends Condition {\n    type: ConditionType = ConditionType.Simple;\n    operator: ComparisonOperator = ComparisonOperator.Eq;\n    attribute: string;\n    isDynamicValue: boolean;\n    value: Value;\n\n    constructor(properties: SimpleConditionProperties) {\n        super(properties);\n        this.operator = properties.operator ?? this.operator;\n        this.attribute = properties.attribute ?? this.attribute;\n        this.userDefined = properties.userDefined ?? this.userDefined;\n        this.isDynamicValue = properties.isDynamicValue ?? false;\n        this.value = properties.value ?? this.value;\n    }\n\n    setSina(sina: Sina) {\n        this.sina = sina;\n    }\n\n    clone(): SimpleCondition {\n        return new SimpleCondition({\n            operator: this.operator,\n            attribute: this.attribute,\n            attributeLabel: this.attributeLabel,\n            value: this.value,\n            valueLabel: this.valueLabel,\n            userDefined: this.userDefined,\n            isDynamicValue: this.isDynamicValue,\n        });\n    }\n\n    equals(other: SimpleCondition): boolean {\n        if (!(other instanceof SimpleCondition)) {\n            return false;\n        }\n        if (this.attribute !== other.attribute || this.operator !== other.operator) {\n            return false;\n        }\n        if (this.isDynamicValue !== other.isDynamicValue) {\n            return false;\n        }\n        if (this.value instanceof Date && other.value instanceof Date) {\n            return this.value.getTime() === other.value.getTime();\n        }\n        return this.value === other.value;\n    }\n\n    containsAttribute(attribute: string): boolean {\n        return this.attribute === attribute;\n    }\n\n    _collectAttributes(attributeMap: { [attributeId: string]: boolean }): void {\n        attributeMap[this.attribute] = true;\n    }\n\n    getFirstAttribute(): string {\n        return this.attribute;\n    }\n\n    _collectFilterConditions(attribute: string, filterConditions: SimpleCondition[]) {\n        if (this.attribute === attribute) {\n            filterConditions.push(this);\n        }\n    }\n\n    removeAttributeConditions(attribute: string): {\n        deleted: false;\n        attribute: \"\";\n        value: \"\";\n    } {\n        if (this.attribute === attribute) {\n            throw \"program error\";\n        }\n        return {\n            deleted: false,\n            attribute: \"\",\n            value: \"\",\n        };\n    }\n\n    toJson(): SimpleConditionJSON {\n        let jsonValue;\n        if (this.value instanceof Date) {\n            jsonValue = util.dateToJson(this.value);\n        } else {\n            jsonValue = this.value;\n        }\n        const result: SimpleConditionJSON = {\n            type: ConditionType.Simple,\n            operator: this.operator,\n            attribute: this.attribute,\n            value: jsonValue,\n            valueLabel: this.valueLabel,\n            attributeLabel: this.attributeLabel,\n        };\n        if (this.userDefined) {\n            result.userDefined = true;\n        }\n        if (this.isDynamicValue) {\n            result.dynamic = this.isDynamicValue;\n        }\n        return result;\n    }\n\n    static fromString(simpleConditionString: string): SimpleCondition {\n        const parts = simpleConditionString.split(\" \");\n        const attribute = parts.shift();\n        const operator = ComparisonOperator[parts.shift() as keyof typeof ComparisonOperator];\n        if (!operator) {\n            throw new Error(\n                `Invalid operator ${operator} in simple condition string: ${simpleConditionString}`\n            );\n        }\n        let value = parts.join(\" \").replace(/''/g, \"'\"); // Add escaped single quotes\n        if (value.startsWith(\"'\") && value.endsWith(\"'\")) {\n            // Remove surrounding single quotes\n            value = value.slice(1, -1);\n        }\n        return new SimpleCondition({\n            attribute,\n            operator,\n            value,\n        });\n    }\n\n    toString(): string {\n        const escapedValue = this.value.toString().replace(/'/g, \"''\");\n        return `${this.attribute} ${this.operator} '${escapedValue}'`;\n    }\n}\n"],"mappings":"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","ignoreList":[]}