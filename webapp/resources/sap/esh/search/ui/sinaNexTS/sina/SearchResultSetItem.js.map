{"version":3,"file":"SearchResultSetItem.js","names":["sap","ui","define","___ResultSetItem","___core_core","___AttributeMetadata","ResultSetItem","generateGuid","AttributeMetadata","SearchResultSetItem","dataSource","attributes","attributesMap","titleAttributes","titleDescriptionAttributes","detailAttributes","defaultNavigationTarget","navigationTargets","score","hierarchyNodePaths","constructor","properties","super","this","setAttributes","setTitleAttributes","setTitleDescriptionAttributes","setDetailAttributes","setDefaultNavigationTarget","setNavigationTargets","navigationTarget","undefined","parent","addNavigationTarget","push","attribute","id","Array","isArray","length","i","item","key","parts","keyAttributeValues","filter","metadata","isKey","map","value","join","titleAttributeValues","titleAttribute","subTitleAttributes","getSubAttributes","subTitleAttribute","detailAttributeValues","maxDetailAttributes","Math","min","detailAttribute","subDetailAttributes","subDetailAttribute","toString","result","title","__exports","__esModule"],"sources":["SearchResultSetItem.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { ResultSetItem } from \"./ResultSetItem\";\nimport { DataSource } from \"./DataSource\";\nimport { SearchResultSetItemAttribute } from \"./SearchResultSetItemAttribute\";\nimport { NavigationTarget } from \"./NavigationTarget\";\nimport { SinaObjectProperties } from \"./SinaObject\";\nimport { generateGuid } from \"../core/core\";\nimport { SearchResultSetItemAttributeBase } from \"./SearchResultSetItemAttributeBase\";\nimport { HierarchyNodePath } from \"./HierarchyNodePath\";\nimport { SearchResultSetItemAttributeGroup } from \"./SearchResultSetItemAttributeGroup\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\n\nexport interface SearchResultSetItemOptions extends SinaObjectProperties {\n    dataSource: DataSource;\n    attributes: Array<SearchResultSetItemAttribute>;\n    titleAttributes: Array<SearchResultSetItemAttributeBase>;\n    titleDescriptionAttributes?: Array<SearchResultSetItemAttribute>;\n    detailAttributes: Array<SearchResultSetItemAttributeBase>;\n    defaultNavigationTarget?: NavigationTarget;\n    navigationTargets?: Array<NavigationTarget>;\n    score?: number;\n    hierarchyNodePaths?: Array<HierarchyNodePath>;\n}\nexport class SearchResultSetItem extends ResultSetItem {\n    // _meta: {\n    //     properties: {\n    //         dataSource: {\n    //             required: true\n    //         },\n    //         titleAttributes: {\n    //             required: true,\n    //             aggregation: true\n    //         },\n    //         titleDescriptionAttributes: {\n    //             required: false,\n    //             aggregation: true\n    //         },\n    //         detailAttributes: {\n    //             required: true,\n    //             aggregation: true\n    //         },\n    //         defaultNavigationTarget: {\n    //             required: false,\n    //             aggregation: true\n    //         },\n    //         navigationTargets: {\n    //             required: false,\n    //             aggregation: true\n    //         },\n    //         score: {\n    //             required: false,\n    //             default: 0\n    //         }\n    //     }\n    // },\n\n    dataSource: DataSource;\n    attributes: Array<SearchResultSetItemAttribute>;\n    attributesMap: Record<string, SearchResultSetItemAttribute>;\n    titleAttributes: Array<SearchResultSetItemAttributeBase>;\n    titleDescriptionAttributes: Array<SearchResultSetItemAttribute | SearchResultSetItemAttributeGroup>;\n    detailAttributes: Array<SearchResultSetItemAttributeBase>;\n    defaultNavigationTarget: NavigationTarget;\n    navigationTargets: Array<NavigationTarget>;\n    score = 0;\n    hierarchyNodePaths?: Array<HierarchyNodePath>;\n\n    constructor(properties: SearchResultSetItemOptions) {\n        super(properties);\n        this.dataSource = properties.dataSource ?? this.dataSource;\n        this.setAttributes(properties.attributes || []);\n        this.setTitleAttributes(properties.titleAttributes);\n        this.setTitleDescriptionAttributes(properties.titleDescriptionAttributes);\n        this.setDetailAttributes(properties.detailAttributes);\n        this.setDefaultNavigationTarget(properties.defaultNavigationTarget);\n        this.setNavigationTargets(properties.navigationTargets || []);\n        this.score = properties.score ?? this.score;\n        this.hierarchyNodePaths = properties.hierarchyNodePaths ?? this.hierarchyNodePaths;\n    }\n\n    setDefaultNavigationTarget(navigationTarget: NavigationTarget) {\n        if (!navigationTarget) {\n            this.defaultNavigationTarget = undefined;\n            return;\n        }\n        this.defaultNavigationTarget = navigationTarget;\n        navigationTarget.parent = this;\n    }\n\n    setNavigationTargets(navigationTargets: Array<NavigationTarget>) {\n        this.navigationTargets = [];\n        if (!navigationTargets) {\n            return;\n        }\n        for (const navigationTarget of navigationTargets) {\n            this.addNavigationTarget(navigationTarget);\n        }\n    }\n\n    addNavigationTarget(navigationTarget: NavigationTarget) {\n        this.navigationTargets.push(navigationTarget);\n        navigationTarget.parent = this;\n    }\n\n    setAttributes(attributes: Array<SearchResultSetItemAttribute>) {\n        this.attributes = [];\n        this.attributesMap = {};\n        for (const attribute of attributes) {\n            this.attributes.push(attribute);\n            this.attributesMap[attribute.id] = attribute;\n            attribute.parent = this;\n        }\n    }\n\n    setTitleAttributes(titleAttributes: Array<SearchResultSetItemAttributeBase>): SearchResultSetItem {\n        this.titleAttributes = [];\n        if (!Array.isArray(titleAttributes) || titleAttributes.length < 1) {\n            return this;\n        }\n        for (let i = 0; i < titleAttributes.length; i++) {\n            const item = titleAttributes[i] as SearchResultSetItemAttributeBase;\n            item.parent = this;\n            this.titleAttributes.push(item);\n        }\n        return this;\n    }\n\n    setTitleDescriptionAttributes(\n        titleDescriptionAttributes: Array<SearchResultSetItemAttribute>\n    ): SearchResultSetItem {\n        this.titleDescriptionAttributes = [];\n        if (!Array.isArray(titleDescriptionAttributes) || titleDescriptionAttributes.length < 1) {\n            return this;\n        }\n        for (let i = 0; i < titleDescriptionAttributes.length; i++) {\n            const item = titleDescriptionAttributes[i] as SearchResultSetItemAttribute;\n            item.parent = this;\n            this.titleDescriptionAttributes.push(item);\n        }\n        return this;\n    }\n\n    setDetailAttributes(detailAttributes: Array<SearchResultSetItemAttributeBase>): SearchResultSetItem {\n        this.detailAttributes = [];\n        if (!Array.isArray(detailAttributes) || detailAttributes.length < 1) {\n            return this;\n        }\n        for (let i = 0; i < detailAttributes.length; i++) {\n            const item = detailAttributes[i] as SearchResultSetItemAttributeBase;\n            item.parent = this;\n            this.detailAttributes.push(item);\n        }\n        return this;\n    }\n\n    get key(): string {\n        const parts = [];\n        parts.push(this.dataSource.id);\n        // Filter key single attributes and return their metadata.id\n        const keyAttributeValues = this.attributes\n            .filter(\n                (attribute) =>\n                    attribute.metadata instanceof AttributeMetadata && attribute.metadata.isKey === true\n            )\n            .map((attribute) => attribute.value);\n\n        if (keyAttributeValues.length > 0 && keyAttributeValues.join(\"\").length > 0) {\n            parts.push(...keyAttributeValues);\n        }\n\n        // If no key attributes are defined, use the title attributes' values\n        if (parts.length === 1) {\n            const titleAttributeValues = [];\n            for (const titleAttribute of this.titleAttributes) {\n                const subTitleAttributes = titleAttribute.getSubAttributes();\n                for (const subTitleAttribute of subTitleAttributes) {\n                    titleAttributeValues.push(subTitleAttribute.value);\n                }\n            }\n            if (titleAttributeValues.length > 0 && titleAttributeValues.join(\"\").length > 0) {\n                parts.push(...titleAttributeValues);\n            }\n        }\n\n        // If no key, no title attributes are defined,\n        // use the first 3 details attributes' values, if available\n        if (parts.length === 1) {\n            const detailAttributeValues = [];\n            const maxDetailAttributes = Math.min(3, this.detailAttributes.length);\n            for (let i = 0; i < maxDetailAttributes; i++) {\n                const detailAttribute = this.detailAttributes[i];\n                const subDetailAttributes = detailAttribute.getSubAttributes();\n                for (const subDetailAttribute of subDetailAttributes) {\n                    detailAttributeValues.push(subDetailAttribute.value);\n                }\n            }\n            if (detailAttributeValues.length > 0 && detailAttributeValues.join(\"\").length > 0) {\n                parts.push(...detailAttributeValues);\n            }\n        }\n\n        // no key, no title attributes, no first 3 details attributes -> use guid\n        // this bottom of the barrel workaround works only inside same search session.\n        // in cross search sessions scenario the key for same item will be different\n        // the potential comparison of same item will fail without any hint for end users\n        if (parts.length === 1) {\n            parts.push(generateGuid());\n        }\n        return parts.join(\"-\");\n    }\n\n    toString(): string {\n        let i;\n        const result = [];\n        const title = [];\n        for (i = 0; i < this.titleAttributes.length; ++i) {\n            const titleAttribute = this.titleAttributes[i];\n            title.push(titleAttribute.toString());\n        }\n        result.push(title.join(\" \"));\n        for (i = 0; i < this.detailAttributes.length; ++i) {\n            const detailAttribute = this.detailAttributes[i];\n            result.push(\"  - \" + detailAttribute.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n"],"mappings":"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","ignoreList":[]}