{"version":3,"file":"ComplexCondition.js","names":["sap","ui","define","___Condition","___ConditionType","___LogicalOperator","___SimpleCondition","Condition","ConditionType","LogicalOperator","isSimpleCondition","SimpleCondition","isComplexCondition","condition","ComplexCondition","type","Complex","operator","And","conditions","constructor","properties","super","this","setSina","sina","clone","clonedConditions","i","length","push","valueLabel","attributeLabel","equals","other","matchedOtherConditions","match","j","otherCondition","containsAttribute","attribute","_collectAttributes","attributeMap","addCondition","createSimpleCondition","removeConditionAt","index","splice","hasFilters","removeAttributeConditions","result","deleted","value","subCondition","Simple","cleanup","getAttributeConditions","results","doGetAttributeConditions","attributeName","removed","doCleanup","resetConditions","getFirstAttribute","Error","_collectFilterConditions","filterConditions","getAttribute","autoInsertCondition","matchCondition","currentCondition","currentAttribute","createComplexCondition","Or","autoRemoveCondition","removeCondition","complexCondition","toJson","userDefined","toString","fromString","input","operatorMatch","conditionsString","slice","split","parsedConditions","trimmedCondition","trim","parseCondition","conditionString","__exports","__esModule"],"sources":["ComplexCondition.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Condition, ConditionProperties } from \"./Condition\";\nimport { ConditionType } from \"./ConditionType\";\nimport { LogicalOperator } from \"./LogicalOperator\";\nimport { isSimpleCondition, SimpleCondition, SimpleConditionJSON } from \"./SimpleCondition\";\nimport type { Sina } from \"./Sina\";\nimport { Value } from \"./types\";\n\nexport interface RemoveConditionResult {\n    deleted: boolean;\n    attribute: string;\n    value: Value;\n}\nexport interface ComplexConditionJSON {\n    type: ConditionType;\n    operator: LogicalOperator;\n    conditions: Array<ComplexConditionJSON | SimpleConditionJSON>;\n    valueLabel: string;\n    attributeLabel: string;\n    userDefined?: boolean;\n}\n\nexport interface ComplexConditionProperties extends ConditionProperties {\n    operator?: LogicalOperator;\n    conditions?: Array<SimpleCondition | ComplexCondition>;\n}\n\nexport function isComplexCondition(condition: unknown): condition is ComplexCondition {\n    return condition instanceof ComplexCondition;\n}\n\nexport class ComplexCondition extends Condition {\n    // _meta: {\n    //     properties: {\n    //         operator: {\n    //             required: false,\n    //             default: function () {\n    //                 return this.sina.LogicalOperator.And;\n    //             }\n    //         },\n    //         conditions: {\n    //             required: false,\n    //             default: function () {\n    //                 return [];\n    //             }\n    //         }\n    //     }\n    // },\n\n    type: ConditionType = ConditionType.Complex;\n    operator: LogicalOperator = LogicalOperator.And;\n    conditions: Array<SimpleCondition | ComplexCondition> = [];\n\n    constructor(properties: ComplexConditionProperties) {\n        super(properties);\n        this.operator = properties.operator ?? this.operator;\n        this.conditions = properties.conditions ?? this.conditions;\n    }\n\n    setSina(sina: Sina) {\n        this.sina = sina;\n        for (const condition of this.conditions) {\n            condition.setSina(sina);\n        }\n    }\n\n    clone(): ComplexCondition {\n        const clonedConditions: Array<SimpleCondition | ComplexCondition> = [];\n        for (let i = 0; i < this.conditions.length; ++i) {\n            clonedConditions.push(this.conditions[i].clone());\n        }\n        return new ComplexCondition({\n            sina: this.sina,\n            operator: this.operator,\n            conditions: clonedConditions,\n            valueLabel: this.valueLabel,\n            attributeLabel: this.attributeLabel,\n        });\n    }\n\n    equals(other: ComplexCondition): boolean {\n        if (!(other instanceof ComplexCondition)) {\n            return false;\n        }\n        if (this.operator !== other.operator) {\n            return false;\n        }\n        if (this.conditions.length !== other.conditions.length) {\n            return false;\n        }\n        const matchedOtherConditions = {};\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const condition = this.conditions[i];\n            let match = false;\n            for (let j = 0; j < other.conditions.length; ++j) {\n                if (matchedOtherConditions[j]) {\n                    continue;\n                }\n                const otherCondition = other.conditions[j];\n                if (isComplexCondition(condition) && isComplexCondition(otherCondition)) {\n                    if (condition.equals(otherCondition)) {\n                        match = true;\n                        matchedOtherConditions[j] = true;\n                        break;\n                    }\n                } else if (isSimpleCondition(condition) && isSimpleCondition(otherCondition)) {\n                    if (condition.equals(otherCondition)) {\n                        match = true;\n                        matchedOtherConditions[j] = true;\n                        break;\n                    }\n                }\n            }\n            if (!match) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    containsAttribute(attribute: string): boolean {\n        for (const condition of this.conditions) {\n            if (condition.containsAttribute(attribute)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _collectAttributes(attributeMap: { [attributeId: string]: boolean }): void {\n        for (const condition of this.conditions) {\n            condition._collectAttributes(attributeMap);\n        }\n    }\n    addCondition(condition: SimpleCondition | ComplexCondition): void {\n        if (!(condition instanceof Condition)) {\n            condition = this.sina.createSimpleCondition(condition);\n        }\n        this.conditions.push(condition);\n    }\n\n    removeConditionAt(index: number): void {\n        this.conditions.splice(index, 1);\n    }\n\n    hasFilters(): boolean {\n        return this.conditions.length >= 1;\n    }\n\n    removeAttributeConditions(attribute: string): RemoveConditionResult {\n        let result: RemoveConditionResult = {\n            deleted: false,\n            attribute: \"\",\n            value: \"\",\n        };\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const subCondition = this.conditions[i];\n            switch (subCondition.type) {\n                case ConditionType.Complex:\n                    result = (subCondition as ComplexCondition).removeAttributeConditions(attribute);\n                    break;\n                case ConditionType.Simple:\n                    if ((subCondition as SimpleCondition).attribute === attribute) {\n                        result = {\n                            deleted: true,\n                            attribute: (subCondition as SimpleCondition).attribute,\n                            value: (subCondition as SimpleCondition).value,\n                        };\n                        this.removeConditionAt(i);\n                        i--;\n                    }\n                    break;\n            }\n        }\n        this.cleanup();\n        return result;\n    }\n\n    getAttributeConditions(attribute: string): Condition[] {\n        const results = [];\n\n        const doGetAttributeConditions = function (condition, attributeName) {\n            switch (condition.type) {\n                case ConditionType.Complex:\n                    for (let i = 0; i < condition.conditions.length; i++) {\n                        doGetAttributeConditions(condition.conditions[i], attributeName);\n                    }\n                    break;\n                case ConditionType.Simple:\n                    if (condition.attribute === attributeName) {\n                        results.push(condition);\n                    }\n                    break;\n            }\n        };\n\n        doGetAttributeConditions(this, attribute);\n        return results;\n    }\n\n    cleanup(): void {\n        let removed = false;\n        const doCleanup = function (condition) {\n            for (let i = 0; i < condition.conditions.length; ++i) {\n                const subCondition = condition.conditions[i];\n                switch (subCondition.type) {\n                    case ConditionType.Complex:\n                        doCleanup(subCondition);\n                        if (subCondition.conditions.length === 0) {\n                            removed = true;\n                            condition.removeConditionAt(i);\n                            i--;\n                        }\n                        break;\n                    case ConditionType.Simple:\n                        break;\n                }\n            }\n        };\n        do {\n            removed = false;\n            doCleanup(this);\n        } while (removed);\n    }\n\n    resetConditions(): void {\n        this.conditions.splice(0, this.conditions.length);\n    }\n\n    getFirstAttribute(): string {\n        if (this.conditions.length === 0) {\n            return null;\n        }\n        // just use first condition\n        if (this.conditions[0] instanceof ComplexCondition) {\n            return (this.conditions[0] as ComplexCondition).getFirstAttribute();\n        }\n        if (this.conditions[0] instanceof SimpleCondition) {\n            return (this.conditions[0] as SimpleCondition).getFirstAttribute();\n        }\n        throw new Error(\"Condition is neither simple nor complex\");\n    }\n\n    _collectFilterConditions(attribute: string, filterConditions: SimpleCondition[]) {\n        for (const condition of this.conditions) {\n            condition._collectFilterConditions(attribute, filterConditions);\n        }\n    }\n\n    private getAttribute(condition: Condition): string {\n        if (condition instanceof SimpleCondition) {\n            return condition.attribute;\n        }\n\n        for (let i = 0; i < (condition as ComplexCondition).conditions.length; ++i) {\n            const attribute = this.getAttribute((condition as ComplexCondition).conditions[i]);\n            if (attribute) {\n                return attribute;\n            }\n        }\n    }\n\n    autoInsertCondition(condition: Condition): void {\n        // identify complex condition which is responsible for the attribute -> matchCondition\n        const attribute = this.getAttribute(condition);\n        let matchCondition, currentCondition;\n        for (let i = 0; i < this.conditions.length; ++i) {\n            currentCondition = this.conditions[i];\n            const currentAttribute = this.getAttribute(currentCondition);\n            if (currentAttribute === attribute) {\n                matchCondition = currentCondition;\n                break;\n            }\n        }\n\n        // if there is no matchCondition -> create\n        if (!matchCondition) {\n            if (this.sina) {\n                matchCondition = this.sina.createComplexCondition({\n                    operator: LogicalOperator.Or,\n                });\n            } else {\n                matchCondition = new ComplexCondition({\n                    operator: LogicalOperator.Or,\n                });\n            }\n            this.addCondition(matchCondition);\n        }\n\n        // prevent duplicate conditions\n        for (let j = 0; j < matchCondition.conditions.length; ++j) {\n            currentCondition = matchCondition.conditions[j];\n            if (currentCondition.equals(condition)) {\n                return;\n            }\n        }\n\n        // add condition\n        matchCondition.addCondition(condition);\n    }\n\n    autoRemoveCondition(condition: Condition): void {\n        // helper\n        const removeCondition = function (complexCondition, condition) {\n            for (let i = 0; i < complexCondition.conditions.length; ++i) {\n                const subCondition = complexCondition.conditions[i];\n\n                if (subCondition.equals(condition)) {\n                    complexCondition.removeConditionAt(i);\n                    i--;\n                    continue;\n                }\n\n                if (subCondition instanceof ComplexCondition) {\n                    removeCondition(subCondition, condition);\n                    if (subCondition.conditions.length === 0) {\n                        complexCondition.removeConditionAt(i);\n                        i--;\n                        continue;\n                    }\n                }\n            }\n        };\n\n        // remove\n        removeCondition(this, condition);\n    }\n\n    toJson(): ComplexConditionJSON {\n        const result: ComplexConditionJSON = {\n            type: ConditionType.Complex,\n            operator: this.operator,\n            conditions: [],\n            valueLabel: this.valueLabel,\n            attributeLabel: this.attributeLabel,\n        };\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const condition = this.conditions[i];\n            if (condition instanceof ComplexCondition) {\n                result.conditions.push((condition as ComplexCondition).toJson());\n            }\n            if (condition instanceof SimpleCondition) {\n                result.conditions.push((condition as SimpleCondition).toJson());\n            }\n        }\n        if (this.userDefined) {\n            result.userDefined = true;\n        }\n        return result;\n    }\n\n    toString(): string {\n        let result = this.operator + \" (\";\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const condition = this.conditions[i];\n            if (condition instanceof ComplexCondition) {\n                result += (condition as ComplexCondition).toString();\n            }\n            if (condition instanceof SimpleCondition) {\n                result += (condition as SimpleCondition).toString();\n            }\n            if (i < this.conditions.length - 1) {\n                result += \", \";\n            }\n        }\n        return result + \")\";\n    }\n\n    static fromString(input: string): ComplexCondition {\n        const operatorMatch = input.match(/^(\\w+) \\(/);\n        if (!operatorMatch) {\n            throw new Error(\"Invalid input string format\");\n        }\n\n        const operator = operatorMatch[1] as LogicalOperator;\n        const conditionsString = input.slice(operatorMatch[0].length, -1); // Remove operator and surrounding parentheses\n\n        const conditions = conditionsString.split(/,\\s*(?=(?:[^()]*\\([^()]*\\))*[^()]*$)/); // Split by commas not inside parentheses\n        const parsedConditions: Array<SimpleCondition | ComplexCondition> = [];\n        for (const condition of conditions) {\n            const trimmedCondition = condition.trim();\n            if (trimmedCondition) {\n                parsedConditions.push(ComplexCondition.parseCondition(trimmedCondition));\n            }\n        }\n\n        return new ComplexCondition({\n            operator,\n            conditions: parsedConditions,\n        });\n    }\n\n    private static parseCondition(conditionString: string): SimpleCondition | ComplexCondition {\n        const operatorMatch = conditionString.match(/^(\\w+) \\(/);\n        if (operatorMatch) {\n            return ComplexCondition.fromString(conditionString);\n        } else {\n            return SimpleCondition.fromString(conditionString);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}