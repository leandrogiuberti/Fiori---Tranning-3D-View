{"version":3,"file":"ComplexCondition-dbg.js","names":["sap","ui","define","___Condition","___ConditionType","___LogicalOperator","___SimpleCondition","Condition","ConditionType","LogicalOperator","isSimpleCondition","SimpleCondition","isComplexCondition","condition","ComplexCondition","type","Complex","operator","And","conditions","constructor","properties","setSina","sina","clone","clonedConditions","i","length","push","valueLabel","attributeLabel","equals","other","matchedOtherConditions","match","j","otherCondition","containsAttribute","attribute","_collectAttributes","attributeMap","addCondition","createSimpleCondition","removeConditionAt","index","splice","hasFilters","removeAttributeConditions","result","deleted","value","subCondition","Simple","cleanup","getAttributeConditions","results","doGetAttributeConditions","attributeName","removed","doCleanup","resetConditions","getFirstAttribute","Error","_collectFilterConditions","filterConditions","getAttribute","autoInsertCondition","matchCondition","currentCondition","currentAttribute","createComplexCondition","Or","autoRemoveCondition","removeCondition","complexCondition","toJson","userDefined","toString","fromString","input","operatorMatch","conditionsString","slice","split","parsedConditions","trimmedCondition","trim","parseCondition","conditionString","__exports","__esModule"],"sources":["ComplexCondition.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { Condition, ConditionProperties } from \"./Condition\";\nimport { ConditionType } from \"./ConditionType\";\nimport { LogicalOperator } from \"./LogicalOperator\";\nimport { isSimpleCondition, SimpleCondition, SimpleConditionJSON } from \"./SimpleCondition\";\nimport type { Sina } from \"./Sina\";\nimport { Value } from \"./types\";\n\nexport interface RemoveConditionResult {\n    deleted: boolean;\n    attribute: string;\n    value: Value;\n}\nexport interface ComplexConditionJSON {\n    type: ConditionType;\n    operator: LogicalOperator;\n    conditions: Array<ComplexConditionJSON | SimpleConditionJSON>;\n    valueLabel: string;\n    attributeLabel: string;\n    userDefined?: boolean;\n}\n\nexport interface ComplexConditionProperties extends ConditionProperties {\n    operator?: LogicalOperator;\n    conditions?: Array<SimpleCondition | ComplexCondition>;\n}\n\nexport function isComplexCondition(condition: unknown): condition is ComplexCondition {\n    return condition instanceof ComplexCondition;\n}\n\nexport class ComplexCondition extends Condition {\n    // _meta: {\n    //     properties: {\n    //         operator: {\n    //             required: false,\n    //             default: function () {\n    //                 return this.sina.LogicalOperator.And;\n    //             }\n    //         },\n    //         conditions: {\n    //             required: false,\n    //             default: function () {\n    //                 return [];\n    //             }\n    //         }\n    //     }\n    // },\n\n    type: ConditionType = ConditionType.Complex;\n    operator: LogicalOperator = LogicalOperator.And;\n    conditions: Array<SimpleCondition | ComplexCondition> = [];\n\n    constructor(properties: ComplexConditionProperties) {\n        super(properties);\n        this.operator = properties.operator ?? this.operator;\n        this.conditions = properties.conditions ?? this.conditions;\n    }\n\n    setSina(sina: Sina) {\n        this.sina = sina;\n        for (const condition of this.conditions) {\n            condition.setSina(sina);\n        }\n    }\n\n    clone(): ComplexCondition {\n        const clonedConditions: Array<SimpleCondition | ComplexCondition> = [];\n        for (let i = 0; i < this.conditions.length; ++i) {\n            clonedConditions.push(this.conditions[i].clone());\n        }\n        return new ComplexCondition({\n            sina: this.sina,\n            operator: this.operator,\n            conditions: clonedConditions,\n            valueLabel: this.valueLabel,\n            attributeLabel: this.attributeLabel,\n        });\n    }\n\n    equals(other: ComplexCondition): boolean {\n        if (!(other instanceof ComplexCondition)) {\n            return false;\n        }\n        if (this.operator !== other.operator) {\n            return false;\n        }\n        if (this.conditions.length !== other.conditions.length) {\n            return false;\n        }\n        const matchedOtherConditions = {};\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const condition = this.conditions[i];\n            let match = false;\n            for (let j = 0; j < other.conditions.length; ++j) {\n                if (matchedOtherConditions[j]) {\n                    continue;\n                }\n                const otherCondition = other.conditions[j];\n                if (isComplexCondition(condition) && isComplexCondition(otherCondition)) {\n                    if (condition.equals(otherCondition)) {\n                        match = true;\n                        matchedOtherConditions[j] = true;\n                        break;\n                    }\n                } else if (isSimpleCondition(condition) && isSimpleCondition(otherCondition)) {\n                    if (condition.equals(otherCondition)) {\n                        match = true;\n                        matchedOtherConditions[j] = true;\n                        break;\n                    }\n                }\n            }\n            if (!match) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    containsAttribute(attribute: string): boolean {\n        for (const condition of this.conditions) {\n            if (condition.containsAttribute(attribute)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _collectAttributes(attributeMap: { [attributeId: string]: boolean }): void {\n        for (const condition of this.conditions) {\n            condition._collectAttributes(attributeMap);\n        }\n    }\n    addCondition(condition: SimpleCondition | ComplexCondition): void {\n        if (!(condition instanceof Condition)) {\n            condition = this.sina.createSimpleCondition(condition);\n        }\n        this.conditions.push(condition);\n    }\n\n    removeConditionAt(index: number): void {\n        this.conditions.splice(index, 1);\n    }\n\n    hasFilters(): boolean {\n        return this.conditions.length >= 1;\n    }\n\n    removeAttributeConditions(attribute: string): RemoveConditionResult {\n        let result: RemoveConditionResult = {\n            deleted: false,\n            attribute: \"\",\n            value: \"\",\n        };\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const subCondition = this.conditions[i];\n            switch (subCondition.type) {\n                case ConditionType.Complex:\n                    result = (subCondition as ComplexCondition).removeAttributeConditions(attribute);\n                    break;\n                case ConditionType.Simple:\n                    if ((subCondition as SimpleCondition).attribute === attribute) {\n                        result = {\n                            deleted: true,\n                            attribute: (subCondition as SimpleCondition).attribute,\n                            value: (subCondition as SimpleCondition).value,\n                        };\n                        this.removeConditionAt(i);\n                        i--;\n                    }\n                    break;\n            }\n        }\n        this.cleanup();\n        return result;\n    }\n\n    getAttributeConditions(attribute: string): Condition[] {\n        const results = [];\n\n        const doGetAttributeConditions = function (condition, attributeName) {\n            switch (condition.type) {\n                case ConditionType.Complex:\n                    for (let i = 0; i < condition.conditions.length; i++) {\n                        doGetAttributeConditions(condition.conditions[i], attributeName);\n                    }\n                    break;\n                case ConditionType.Simple:\n                    if (condition.attribute === attributeName) {\n                        results.push(condition);\n                    }\n                    break;\n            }\n        };\n\n        doGetAttributeConditions(this, attribute);\n        return results;\n    }\n\n    cleanup(): void {\n        let removed = false;\n        const doCleanup = function (condition) {\n            for (let i = 0; i < condition.conditions.length; ++i) {\n                const subCondition = condition.conditions[i];\n                switch (subCondition.type) {\n                    case ConditionType.Complex:\n                        doCleanup(subCondition);\n                        if (subCondition.conditions.length === 0) {\n                            removed = true;\n                            condition.removeConditionAt(i);\n                            i--;\n                        }\n                        break;\n                    case ConditionType.Simple:\n                        break;\n                }\n            }\n        };\n        do {\n            removed = false;\n            doCleanup(this);\n        } while (removed);\n    }\n\n    resetConditions(): void {\n        this.conditions.splice(0, this.conditions.length);\n    }\n\n    getFirstAttribute(): string {\n        if (this.conditions.length === 0) {\n            return null;\n        }\n        // just use first condition\n        if (this.conditions[0] instanceof ComplexCondition) {\n            return (this.conditions[0] as ComplexCondition).getFirstAttribute();\n        }\n        if (this.conditions[0] instanceof SimpleCondition) {\n            return (this.conditions[0] as SimpleCondition).getFirstAttribute();\n        }\n        throw new Error(\"Condition is neither simple nor complex\");\n    }\n\n    _collectFilterConditions(attribute: string, filterConditions: SimpleCondition[]) {\n        for (const condition of this.conditions) {\n            condition._collectFilterConditions(attribute, filterConditions);\n        }\n    }\n\n    private getAttribute(condition: Condition): string {\n        if (condition instanceof SimpleCondition) {\n            return condition.attribute;\n        }\n\n        for (let i = 0; i < (condition as ComplexCondition).conditions.length; ++i) {\n            const attribute = this.getAttribute((condition as ComplexCondition).conditions[i]);\n            if (attribute) {\n                return attribute;\n            }\n        }\n    }\n\n    autoInsertCondition(condition: Condition): void {\n        // identify complex condition which is responsible for the attribute -> matchCondition\n        const attribute = this.getAttribute(condition);\n        let matchCondition, currentCondition;\n        for (let i = 0; i < this.conditions.length; ++i) {\n            currentCondition = this.conditions[i];\n            const currentAttribute = this.getAttribute(currentCondition);\n            if (currentAttribute === attribute) {\n                matchCondition = currentCondition;\n                break;\n            }\n        }\n\n        // if there is no matchCondition -> create\n        if (!matchCondition) {\n            if (this.sina) {\n                matchCondition = this.sina.createComplexCondition({\n                    operator: LogicalOperator.Or,\n                });\n            } else {\n                matchCondition = new ComplexCondition({\n                    operator: LogicalOperator.Or,\n                });\n            }\n            this.addCondition(matchCondition);\n        }\n\n        // prevent duplicate conditions\n        for (let j = 0; j < matchCondition.conditions.length; ++j) {\n            currentCondition = matchCondition.conditions[j];\n            if (currentCondition.equals(condition)) {\n                return;\n            }\n        }\n\n        // add condition\n        matchCondition.addCondition(condition);\n    }\n\n    autoRemoveCondition(condition: Condition): void {\n        // helper\n        const removeCondition = function (complexCondition, condition) {\n            for (let i = 0; i < complexCondition.conditions.length; ++i) {\n                const subCondition = complexCondition.conditions[i];\n\n                if (subCondition.equals(condition)) {\n                    complexCondition.removeConditionAt(i);\n                    i--;\n                    continue;\n                }\n\n                if (subCondition instanceof ComplexCondition) {\n                    removeCondition(subCondition, condition);\n                    if (subCondition.conditions.length === 0) {\n                        complexCondition.removeConditionAt(i);\n                        i--;\n                        continue;\n                    }\n                }\n            }\n        };\n\n        // remove\n        removeCondition(this, condition);\n    }\n\n    toJson(): ComplexConditionJSON {\n        const result: ComplexConditionJSON = {\n            type: ConditionType.Complex,\n            operator: this.operator,\n            conditions: [],\n            valueLabel: this.valueLabel,\n            attributeLabel: this.attributeLabel,\n        };\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const condition = this.conditions[i];\n            if (condition instanceof ComplexCondition) {\n                result.conditions.push((condition as ComplexCondition).toJson());\n            }\n            if (condition instanceof SimpleCondition) {\n                result.conditions.push((condition as SimpleCondition).toJson());\n            }\n        }\n        if (this.userDefined) {\n            result.userDefined = true;\n        }\n        return result;\n    }\n\n    toString(): string {\n        let result = this.operator + \" (\";\n        for (let i = 0; i < this.conditions.length; ++i) {\n            const condition = this.conditions[i];\n            if (condition instanceof ComplexCondition) {\n                result += (condition as ComplexCondition).toString();\n            }\n            if (condition instanceof SimpleCondition) {\n                result += (condition as SimpleCondition).toString();\n            }\n            if (i < this.conditions.length - 1) {\n                result += \", \";\n            }\n        }\n        return result + \")\";\n    }\n\n    static fromString(input: string): ComplexCondition {\n        const operatorMatch = input.match(/^(\\w+) \\(/);\n        if (!operatorMatch) {\n            throw new Error(\"Invalid input string format\");\n        }\n\n        const operator = operatorMatch[1] as LogicalOperator;\n        const conditionsString = input.slice(operatorMatch[0].length, -1); // Remove operator and surrounding parentheses\n\n        const conditions = conditionsString.split(/,\\s*(?=(?:[^()]*\\([^()]*\\))*[^()]*$)/); // Split by commas not inside parentheses\n        const parsedConditions: Array<SimpleCondition | ComplexCondition> = [];\n        for (const condition of conditions) {\n            const trimmedCondition = condition.trim();\n            if (trimmedCondition) {\n                parsedConditions.push(ComplexCondition.parseCondition(trimmedCondition));\n            }\n        }\n\n        return new ComplexCondition({\n            operator,\n            conditions: parsedConditions,\n        });\n    }\n\n    private static parseCondition(conditionString: string): SimpleCondition | ComplexCondition {\n        const operatorMatch = conditionString.match(/^(\\w+) \\(/);\n        if (operatorMatch) {\n            return ComplexCondition.fromString(conditionString);\n        } else {\n            return SimpleCondition.fromString(conditionString);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}