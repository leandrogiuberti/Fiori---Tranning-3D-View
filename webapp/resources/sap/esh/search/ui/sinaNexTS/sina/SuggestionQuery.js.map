{"version":3,"file":"SuggestionQuery.js","names":["sap","ui","define","core","___Query","___SuggestionType","___SuggestionCalculationMode","___DataSourceType","___core_errors","Query","SuggestionType","SuggestionCalculationMode","DataSourceSubType","DataSourceType","QueryIsReadOnlyError","SuggestionQuery","calculationModes","Data","History","types","DataSource","Object","SearchTerm","constructor","properties","super","this","_formatResultSetAsync","resultSet","query","indexOf","filter","dataSource","type","sina","BusinessObject","executeSequentialAsync","suggestionResultSetFormatters","formatter","formatAsync","setTypes","setCalculationModes","_createReadOnlyClone","clone","getResultSetAsync","label","icon","skip","top","nlq","sortOrder","slice","equals","other","_execute","_doExecuteSuggestionQuery","transformedQuery","_filteredQueryTransform","provider","executeSuggestionQuery","_filteredQueryBackTransform","_genericFilteredQueryTransform","subType","Filtered","suggestion","items","SearchTermAI","searchTerm","__exports","__esModule"],"sources":["SuggestionQuery.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../core/core\";\nimport { Query, QueryOptions } from \"./Query\";\nimport { SuggestionType } from \"./SuggestionType\";\nimport { SuggestionCalculationMode } from \"./SuggestionCalculationMode\";\nimport { DataSourceSubType, DataSourceType } from \"./DataSourceType\";\nimport { QueryIsReadOnlyError } from \"../core/errors\";\nimport { SuggestionResultSet } from \"./SuggestionResultSet\";\nimport { SearchTermSuggestion } from \"./SearchTermSuggestion\";\n\nexport interface SuggestionQueryOptions extends QueryOptions {\n    types?: Array<SuggestionType>;\n    calculationModes?: Array<SuggestionCalculationMode>;\n}\nexport class SuggestionQuery extends Query {\n    // _meta: {\n    //     properties: {\n    //         types: {\n    //             default: function () {\n    //                 return [SuggestionType.DataSource, SuggestionType.Object, SuggestionType.SearchTerm];\n    //             },\n    //             setter: true\n    //         },\n    //         calculationModes: {\n    //             default: function () {\n    //                 return [SuggestionCalculationMode.Data, SuggestionCalculationMode.History];\n    //             },\n    //             setter: true\n    //         }\n    //     }\n    // },\n\n    calculationModes: Array<SuggestionCalculationMode> = [\n        SuggestionCalculationMode.Data,\n        SuggestionCalculationMode.History,\n    ];\n    types: Array<SuggestionType> = [\n        SuggestionType.DataSource,\n        SuggestionType.Object,\n        SuggestionType.SearchTerm,\n    ];\n\n    constructor(properties?: SuggestionQueryOptions) {\n        super(properties);\n        this.types = properties.types ?? this.types;\n        this.calculationModes = properties.calculationModes ?? this.calculationModes;\n    }\n\n    async _formatResultSetAsync(resultSet: SuggestionResultSet): Promise<void> {\n        const query = resultSet.query;\n        if (\n            query.types.indexOf(SuggestionType.Object) >= 0 &&\n            query.filter.dataSource.type === query.sina.DataSourceType.BusinessObject\n        ) {\n            return core.executeSequentialAsync(this.sina.suggestionResultSetFormatters, function (formatter) {\n                return formatter.formatAsync(resultSet);\n            });\n        }\n    }\n\n    setTypes(types: Array<SuggestionType>): void {\n        this.types = types;\n    }\n\n    setCalculationModes(calculationModes: Array<SuggestionCalculationMode>): void {\n        this.calculationModes = calculationModes;\n    }\n\n    _createReadOnlyClone(): SuggestionQuery {\n        const query = this.clone();\n        query.getResultSetAsync = function () {\n            throw new QueryIsReadOnlyError();\n        };\n        return query;\n    }\n\n    clone(): SuggestionQuery {\n        const clone = new SuggestionQuery({\n            label: this.label,\n            icon: this.icon,\n            skip: this.skip,\n            top: this.top,\n            nlq: this.nlq,\n            filter: this.filter.clone(),\n            sortOrder: this.sortOrder,\n            sina: this.sina,\n            types: this.types,\n            calculationModes: this.calculationModes,\n        });\n        clone.types = this.types.slice();\n        clone.calculationModes = this.calculationModes.slice();\n        return clone;\n    }\n\n    equals(other: SuggestionQuery): boolean {\n        if (!(other instanceof SuggestionQuery)) {\n            return false;\n        }\n\n        if (!super.equals(other)) {\n            return false;\n        }\n\n        if (!other) {\n            return false;\n        }\n        return (\n            core.equals(this.types, other.types, false) &&\n            core.equals(this.calculationModes, other.calculationModes, false)\n        );\n    }\n\n    async _execute(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        return this._doExecuteSuggestionQuery(query);\n    }\n\n    async _doExecuteSuggestionQuery(query: SuggestionQuery): Promise<SuggestionResultSet> {\n        const transformedQuery = this._filteredQueryTransform(query);\n        const resultSet = await this.sina.provider.executeSuggestionQuery(transformedQuery);\n        return this._filteredQueryBackTransform(query, resultSet);\n    }\n\n    _filteredQueryTransform(query: SuggestionQuery): SuggestionQuery {\n        return this._genericFilteredQueryTransform(query) as SuggestionQuery;\n    }\n\n    _filteredQueryBackTransform(query: SuggestionQuery, resultSet: SuggestionResultSet): SuggestionResultSet {\n        if (\n            query.filter.dataSource.type !== DataSourceType.BusinessObject ||\n            query.filter.dataSource.subType !== DataSourceSubType.Filtered\n        ) {\n            return resultSet;\n        }\n        resultSet.query = query;\n        let filter;\n        for (const suggestion of resultSet.items) {\n            switch (suggestion.type) {\n                case SuggestionType.SearchTerm:\n                case SuggestionType.SearchTermAI:\n                    filter = query.filter.clone();\n                    filter.searchTerm = (suggestion as SearchTermSuggestion).filter.searchTerm;\n                    (suggestion as SearchTermSuggestion).filter = filter;\n                    break;\n                case SuggestionType.Object:\n                    // do not backtransform datasource in object\n                    break;\n                default:\n                    throw \"program error, not supported suggestion type \" + suggestion.type;\n            }\n        }\n        return resultSet;\n    }\n}\n"],"mappings":"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","ignoreList":[]}