/*!
 * SAPUI5
 * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.
 * 
 */
sap.ui.define(["../core/core","./Query","./EqualsMode","./ConditionType","./DataSourceType","../core/errors","./ComparisonOperator","../../timecontroller/timecontrolledexecutor"],function(e,t,s,r,i,a,c,o){"use strict";const n=t["Query"];const l=s["EqualsMode"];const u=r["ConditionType"];const h=i["DataSourceSubType"];const f=i["DataSourceType"];const d=a["QueryIsReadOnlyError"];const m=c["ComparisonOperator"];const y=o["TimeControlledExecutor"];class F{query;constructor(e){this.query=e}async execute(){const e=this.query._executeImpl(this.query);return e}equals(e){return this.query.equals(e.query)}clone(){return new F(this.query.clone())}}class p extends n{calculateFacets=false;multiSelectFacets=false;facetTop=5;timeControlledExecutor;groupBy;limitAjaxRequests=false;constructor(e){if(e.limitAjaxRequests){e.suppressRefuseOutdatedResponsesDecorator=true}super(e);this.calculateFacets=e.calculateFacets??this.calculateFacets;this.multiSelectFacets=e.multiSelectFacets??this.multiSelectFacets;this.facetTop=e.facetTop??this.facetTop;this.groupBy=e.groupBy??this.groupBy;this.limitAjaxRequests=e.limitAjaxRequests??this.limitAjaxRequests;if(this.limitAjaxRequests){this.timeControlledExecutor=new y({outdatedTimeLimit:3e3})}}setCalculateFacets(e=false){this.calculateFacets=e}setMultiSelectFacets(e=false){this.multiSelectFacets=e}setFacetTop(e=5){this.facetTop=e}_createReadOnlyClone(){const e=this.clone();e.getResultSetAsync=function(){throw new d};return e}clone(){const e=new p({skip:this.skip,top:this.top,nlq:this.nlq,filter:this.filter.clone(),sortOrder:this.sortOrder,sina:this.sina,groupBy:this.groupBy,calculateFacets:this.calculateFacets,multiSelectFacets:this.multiSelectFacets,facetTop:this.facetTop,limitAjaxRequests:this.limitAjaxRequests});return e}equals(e,t=l.CheckFireQuery){if(!(e instanceof p)){return false}if(!e){return false}if(!super.equals(e)){return false}if(this.groupBy!==e.groupBy){return false}if(this.multiSelectFacets!==e.multiSelectFacets){return false}if(this.facetTop!==e.facetTop){return false}if(this.limitAjaxRequests!==e.limitAjaxRequests){return false}switch(t){case l.CheckFireQuery:if(e.calculateFacets&&!this.calculateFacets){return true}return this.calculateFacets===e.calculateFacets;default:return this.calculateFacets===e.calculateFacets}}_execute(e){if(this.timeControlledExecutor){return this.timeControlledExecutor.execute(new F(e))}else{return this._executeImpl(e)}}async _executeImpl(e){let t;let s=[];if(this.multiSelectFacets&&this.calculateFacets){t=this._collectAttributesWithFilter(e);s=this._createChartQueries(e,t)}const r=[];const i=[];r.push(this._executeSearchQuery(e));for(let t=0;t<s.length;++t){const a=s[t];const c=e.filter.dataSource.getAttributeMetadata(a.dimension);if(!c){i.push(a)}else{if(c.usage.Facet){r.push(a.getResultSetAsync())}}}let a=await Promise.all(r);const c=[];for(let t=0;t<i.length;++t){const s=i[t];const r=e.filter.dataSource.getAttributeMetadata(s.dimension);if(r.usage.Facet){c.push(s.getResultSetAsync())}}const o=await Promise.all(c);a=a.concat(o);const n=a[0];const l=a.slice(1);this._mergeFacetsToSearchResultSet(n,l);return n}async _executeSearchQuery(e){if(e.filter.isFolderMode()){return await this._executeSearchQueryInFolderMode(e)}else{return await this._executeSearchQueryInSearchMode(e)}}async _executeSearchQueryInSearchMode(e){return await this._doExecuteSearchQuery(e)}async _executeSearchQueryInFolderMode(e){if(e.calculateFacets){const t=e;const s=this._assembleQueryForItems(e);const[r,i]=await Promise.all([this._doExecuteSearchQuery(t),this._doExecuteSearchQuery(s)]);const a=this._mergeResultSetsInNavigationFolderMode(r,i);return a}else{const t=this._assembleQueryForItems(e);const s=await this._doExecuteSearchQuery(t);s.query=e;return s}}_mergeResultSetsInNavigationFolderMode(e,t){e.items=[];for(const s of t.items){s.parent=e;e.items.push(s)}e.totalCount=t.totalCount;e.addErrors(t.getErrors());return e}_assembleQueryForItems(e){const t=e.clone();t.calculateFacets=false;const s=t.filter.getFolderAttribute();if(this.isAdditionalRootNodeFilterNeeded(t)){t.filter.autoInsertCondition(this.sina.createSimpleCondition({attribute:s,operator:m.DescendantOf,value:"$$ROOT$$"}))}const r=t.filter.rootCondition.getConditionsByAttribute(s);for(const e of r){if(e.operator===m.DescendantOf){e.operator=m.ChildOf}}return t}isAdditionalRootNodeFilterNeeded(e){const t=e.filter.getFolderAttribute();const s=e.filter.rootCondition.getConditionsByAttribute(t);const r=s.filter(e=>e.operator===m.DescendantOf);return r.length===0}async _doExecuteSearchQuery(e){const t=this._filteredQueryTransform(e);const s=await this.sina.provider.executeSearchQuery(t);return this._filteredQueryBackTransform(e,s)}_filteredQueryTransform(e){return this._genericFilteredQueryTransform(e)}_filteredQueryBackTransform(e,t){if(e.filter.dataSource.type!==f.BusinessObject||e.filter.dataSource.subType!==h.Filtered){return t}t.query=e;for(const s of t.facets){s.query.filter=e.filter.clone()}return t}async _formatResultSetAsync(t){return e.executeSequentialAsync(this.sina.searchResultSetFormatters,function(e){return e.formatAsync(t)})}_collectAttributesWithFilter(e){const t={};this._doCollectAttributes(t,e.filter.rootCondition);const s=Object.keys(t);return s.filter(t=>{const s=e.filter.dataSource.getAttributeMetadata(t);if(!s){return true}return!s.isHierarchy})}_doCollectAttributes(e,t){switch(t.type){case u.Simple:e[t.attribute]=true;break;case u.Complex:for(let s=0;s<t.conditions.length;++s){const r=t.conditions[s];this._doCollectAttributes(e,r)}break}}_createChartQuery(e,t){const s=this.sina.createChartQuery({dimension:t,top:this.facetTop,nlq:this.nlq});s.setFilter(e.filter.clone());s.filter.rootCondition.removeAttributeConditions(t);return s}_createChartQueries(e,t){const s=[];for(let r=0;r<t.length;++r){const i=t[r];const a=this._createChartQuery(e,i);s.push(a)}return s}_mergeFacetsToSearchResultSet(e,t){this._addSelectedFiltersToSearchResultSet(e);for(let s=0;s<t.length;++s){const r=t[s];this._addChartResultSetToSearchResultSet(e,r)}}_calculateFacetTitle(e,t){const s=e.getFirstAttribute();const r=t.getAttributeMetadata(s);return r.label}_addSelectedFiltersToSearchResultSet(e){const t=e.query.filter.dataSource;const s=e.query.filter.rootCondition;for(let r=0;r<s.conditions.length;r++){const i=s.conditions[r].conditions;const a=this._calculateFacetTitle(i[0],e.query.filter.dataSource);let c;switch(i[0].type){case u.Simple:c=i[0].attribute;break;case u.Complex:c=i[0].conditions[0].attribute;break}const o=t.getAttributeMetadata(c);if(o.isHierarchy){continue}const n=this._findMatchFacet(c,e.facets);let l=e.facets[n];if(!l){const t=this._createChartQuery(e.query,c);l=this.sina._createChartResultSet({title:a,items:[],query:t,facetTotalCount:undefined});e.facets.splice(n,1,l)}let h=null;if(i.length===1){h=e.totalCount}const f=[];for(let e=0;e<i.length;e++){let t;if(this._findFilterConditionInFacetItemList(i[e],l.items)>=0){t=this._findFilterConditionInFacetItemList(i[e],l.items);f.push(l.items[t])}else{f.push(this.sina._createChartResultSetItem({filterCondition:i[e],dimensionValueFormatted:i[e].valueLabel||i[e].value,measureValue:h,measureValueFormatted:i[e].valueLabel||i[e].value}))}}l.items=f}}_addChartResultSetToSearchResultSet(e,t){e.addErrors(t.getErrors());if(t.items.length===0){return}const s=t.query.dimension;const r=this._findMatchFacet(s,e.facets);const i=e.facets[r];const a=i.items;let c=false;const o=[];for(let e=0;e<a.length;e++){const s=this._findFilterConditionInFacetItemList(a[e].filterCondition,t.items);if(s>=0){if(this._isRangeFacet(t.query)){o.push(t.items[s])}}else{if(this._isRangeFacet(t.query)){c=true}o.push(a[e])}}o.sort(function(e,t){return t.measureValue-e.measureValue});if(this._isRangeFacet(t.query)){if(c){t.items=o}}else{t.items=t.items.concat(o)}e.facets.splice(r,1,t)}_findMatchFacet(e,t){let s=0;for(;s<t.length;s++){const r=t[s];if(r.query.dimension===e){break}}return s}_findFilterConditionInFacetItemList(e,t){let s=-1;for(let r=0;r<t.length;r++){const i=t[r];if(e.equals(i.filterCondition)){s=r;break}}return s}_isRangeFacet(e){const t=e.filter.dataSource.getAttributeMetadata(e.dimension);if(t.type===e.sina.AttributeType.Double){return true}return false}}var S={__esModule:true};S.SearchQuery=p;return S});
//# sourceMappingURL=SearchQuery.js.map