{"version":3,"file":"SearchQuery.js","names":["sap","ui","define","core","___Query","___EqualsMode","___ConditionType","___DataSourceType","___core_errors","___ComparisonOperator","____timecontroller_timecontrolledexecutor","Query","EqualsMode","ConditionType","DataSourceSubType","DataSourceType","QueryIsReadOnlyError","ComparisonOperator","TimeControlledExecutor","SearchRequest","query","constructor","this","execute","result","_executeImpl","equals","other","clone","SearchQuery","calculateFacets","multiSelectFacets","facetTop","timeControlledExecutor","groupBy","limitAjaxRequests","properties","suppressRefuseOutdatedResponsesDecorator","super","outdatedTimeLimit","setCalculateFacets","setMultiSelectFacets","setFacetTop","_createReadOnlyClone","getResultSetAsync","skip","top","nlq","filter","sortOrder","sina","mode","CheckFireQuery","_execute","filterAttributes","chartQueries","_collectAttributesWithFilter","_createChartQueries","requests","delayedCharQueries","push","_executeSearchQuery","i","length","chartQuery","dataSourceMetadata","dataSource","getAttributeMetadata","dimension","usage","Facet","results","Promise","all","delayedChartQueryRequests","j","delayedCharQuery","delayedCharQueryResults","concat","searchResult","chartResultSets","slice","_mergeFacetsToSearchResultSet","isFolderMode","_executeSearchQueryInFolderMode","_executeSearchQueryInSearchMode","_doExecuteSearchQuery","queryForFacets","queryForItems","_assembleQueryForItems","resultSetForFacets","resultSetForItems","mergedResultSet","_mergeResultSetsInNavigationFolderMode","items","item","parent","totalCount","addErrors","getErrors","folderAttribute","getFolderAttribute","isAdditionalRootNodeFilterNeeded","autoInsertCondition","createSimpleCondition","attribute","operator","DescendantOf","value","folderAttributeConditions","rootCondition","getConditionsByAttribute","condition","ChildOf","descendantFilterConditions","transformedQuery","_filteredQueryTransform","resultSet","provider","executeSearchQuery","_filteredQueryBackTransform","_genericFilteredQueryTransform","type","BusinessObject","subType","Filtered","chartResultSet","facets","_formatResultSetAsync","executeSequentialAsync","searchResultSetFormatters","formatter","formatAsync","attributeMap","_doCollectAttributes","attributedIds","Object","keys","attributeId","attributeMetadata","isHierarchy","Simple","Complex","conditions","subCondition","_createChartQuery","filterAttribute","createChartQuery","setFilter","removeAttributeConditions","searchResultSet","_addSelectedFiltersToSearchResultSet","_addChartResultSetToSearchResultSet","_calculateFacetTitle","getFirstAttribute","label","conditionAttributeLabel","conditionAttribute","matchFacetIndex","_findMatchFacet","matchFacet","chartquery","_createChartResultSet","title","facetTotalCount","undefined","splice","countValue","selectedFacetItemList","k","matchFacetItemIndex","_findFilterConditionInFacetItemList","_createChartResultSetItem","filterCondition","dimensionValueFormatted","valueLabel","measureValue","measureValueFormatted","facetItemSelectionOutsideRange","appendFacetItemList","m","matchIndex","_isRangeFacet","sort","a","b","facet","facetItems","index","chartFacetitem","AttributeType","Double","__exports","__esModule"],"sources":["SearchQuery.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport * as core from \"../core/core\";\nimport { Query, QueryOptions } from \"./Query\";\nimport { EqualsMode } from \"./EqualsMode\";\nimport { ConditionType } from \"./ConditionType\";\nimport { DataSourceSubType, DataSourceType } from \"./DataSourceType\";\nimport { SearchResultSet } from \"./SearchResultSet\";\nimport { Formatter } from \"./formatters/Formatter\";\nimport { Condition } from \"./Condition\";\nimport { SimpleCondition } from \"./SimpleCondition\";\nimport { ComplexCondition } from \"./ComplexCondition\";\nimport { ChartQuery } from \"./ChartQuery\";\nimport { DataSource } from \"./DataSource\";\nimport { ChartResultSet } from \"./ChartResultSet\";\nimport { QueryIsReadOnlyError } from \"../core/errors\";\nimport { AttributeMetadata } from \"./AttributeMetadata\";\nimport { ChartResultSetItem } from \"./ChartResultSetItem\";\nimport { ComparisonOperator } from \"./ComparisonOperator\";\nimport { Request } from \"../../timecontroller/request\";\nimport { TimeControlledExecutor } from \"../../timecontroller/timecontrolledexecutor\";\n\n/*function wait(delay: number): Promise<boolean> {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, delay);\n    });\n}*/\n\nclass SearchRequest implements Request<SearchResultSet> {\n    query: SearchQuery;\n    constructor(query: SearchQuery) {\n        this.query = query;\n    }\n    async execute(): Promise<SearchResultSet> {\n        const result = this.query._executeImpl(this.query);\n        return result;\n    }\n    equals(other: Request<SearchResultSet>): boolean {\n        return this.query.equals((other as SearchRequest).query);\n    }\n    clone(): SearchRequest {\n        return new SearchRequest(this.query.clone());\n    }\n}\n\nexport interface SearchQueryOptions extends QueryOptions {\n    calculateFacets?: boolean;\n    multiSelectFacets?: boolean;\n    facetTop?: number;\n    groupBy?: {\n        attributeName: string[];\n        aggregateCountAlias?: string;\n    };\n    limitAjaxRequests?: boolean;\n}\n\nexport class SearchQuery extends Query {\n    calculateFacets = false;\n    multiSelectFacets = false;\n    facetTop = 5;\n    timeControlledExecutor;\n    groupBy?: {\n        attributeName: string[];\n        aggregateCountAlias?: string;\n    };\n    limitAjaxRequests?: boolean = false;\n\n    constructor(properties: SearchQueryOptions) {\n        if (properties.limitAjaxRequests) {\n            properties.suppressRefuseOutdatedResponsesDecorator = true;\n        }\n        super(properties);\n        this.calculateFacets = properties.calculateFacets ?? this.calculateFacets;\n        this.multiSelectFacets = properties.multiSelectFacets ?? this.multiSelectFacets;\n        this.facetTop = properties.facetTop ?? this.facetTop;\n        this.groupBy = properties.groupBy ?? this.groupBy;\n        this.limitAjaxRequests = properties.limitAjaxRequests ?? this.limitAjaxRequests;\n        if (this.limitAjaxRequests) {\n            this.timeControlledExecutor = new TimeControlledExecutor({ outdatedTimeLimit: 3000 });\n        }\n    }\n\n    setCalculateFacets(calculateFacets = false): void {\n        this.calculateFacets = calculateFacets;\n    }\n\n    setMultiSelectFacets(multiSelectFacets = false): void {\n        this.multiSelectFacets = multiSelectFacets;\n    }\n\n    setFacetTop(facetTop = 5): void {\n        this.facetTop = facetTop;\n    }\n\n    _createReadOnlyClone(): SearchQuery {\n        const query = this.clone();\n        query.getResultSetAsync = function () {\n            throw new QueryIsReadOnlyError();\n        };\n        return query;\n    }\n\n    clone(): SearchQuery {\n        const clone = new SearchQuery({\n            skip: this.skip,\n            top: this.top,\n            nlq: this.nlq,\n            filter: this.filter.clone(),\n            sortOrder: this.sortOrder,\n            sina: this.sina,\n            groupBy: this.groupBy,\n            calculateFacets: this.calculateFacets,\n            multiSelectFacets: this.multiSelectFacets,\n            facetTop: this.facetTop,\n            limitAjaxRequests: this.limitAjaxRequests,\n        });\n        return clone;\n    }\n\n    equals(other: SearchQuery, mode: EqualsMode = EqualsMode.CheckFireQuery): boolean {\n        if (!(other instanceof SearchQuery)) {\n            return false;\n        }\n\n        if (!other) {\n            return false;\n        }\n\n        if (!super.equals(other)) {\n            return false;\n        }\n\n        if (this.groupBy !== other.groupBy) {\n            return false;\n        }\n\n        // check multiSelectFacets\n        if (this.multiSelectFacets !== other.multiSelectFacets) {\n            return false;\n        }\n        // check facetTop\n        if (this.facetTop !== other.facetTop) {\n            return false;\n        }\n\n        if (this.limitAjaxRequests !== other.limitAjaxRequests) {\n            return false;\n        }\n\n        // special check for calculate Facets\n        switch (mode) {\n            case EqualsMode.CheckFireQuery:\n                if (other.calculateFacets && !this.calculateFacets) {\n                    // if old query (other) was with facets and new is without\n                    // -> we do not need to fire new query -> return true\n                    return true;\n                }\n                return this.calculateFacets === other.calculateFacets;\n            default:\n                return this.calculateFacets === other.calculateFacets;\n        }\n    }\n\n    _execute(query: SearchQuery): Promise<SearchResultSet> {\n        if (this.timeControlledExecutor) {\n            // timeControlledExecutor adds logic for\n            // prevention of too many calls in a short time\n            // (timeControlledExecutor finally calls _executeImpl)\n            return this.timeControlledExecutor.execute(new SearchRequest(query));\n        } else {\n            return this._executeImpl(query);\n        }\n    }\n\n    async _executeImpl(query: SearchQuery): Promise<SearchResultSet> {\n        let filterAttributes;\n        let chartQueries = [];\n\n        // multi select facets: assemble chart queries for all facets with set filters\n        // (The main search request typically does not inlcude facets if a filter is set for a facet,\n        //  because the facet then is trivial. For multi select we need to display also facets with set\n        // filters therefore a special chart query is assembled)\n        if (this.multiSelectFacets && this.calculateFacets) {\n            // collect attribute for which filters are set\n            filterAttributes = this._collectAttributesWithFilter(query);\n            // create chart queries for filterAttribute\n            chartQueries = this._createChartQueries(query, filterAttributes);\n        }\n\n        // fire all requests\n        const requests = [];\n        const delayedCharQueries = [];\n        requests.push(this._executeSearchQuery(query));\n        for (let i = 0; i < chartQueries.length; ++i) {\n            const chartQuery = chartQueries[i];\n            const dataSourceMetadata = query.filter.dataSource.getAttributeMetadata(chartQuery.dimension);\n            if (!dataSourceMetadata) {\n                // in case of inav2 the metadata ist loaded by the main search call\n                // ->\n                // collect chartQueries for which we have no metadata\n                // in order to execute them after the main search call returned\n                delayedCharQueries.push(chartQuery);\n            } else {\n                if (dataSourceMetadata.usage.Facet) {\n                    requests.push(chartQuery.getResultSetAsync());\n                }\n            }\n        }\n\n        // wait for search query and for not delayed chart querues\n        let results = await Promise.all(requests);\n\n        // fire delayed chart queries (not tested because we have no inav2 in typescript sina)\n        const delayedChartQueryRequests = [];\n        for (let j = 0; j < delayedCharQueries.length; ++j) {\n            const delayedCharQuery = delayedCharQueries[j];\n            const dataSourceMetadata = query.filter.dataSource.getAttributeMetadata(\n                delayedCharQuery.dimension\n            );\n            if (dataSourceMetadata.usage.Facet) {\n                delayedChartQueryRequests.push(delayedCharQuery.getResultSetAsync());\n            }\n        }\n\n        // wait for delayed chart queries and append to total results\n        const delayedCharQueryResults = await Promise.all(delayedChartQueryRequests);\n        results = results.concat(delayedCharQueryResults);\n\n        const searchResult = results[0];\n        const chartResultSets = results.slice(1);\n        this._mergeFacetsToSearchResultSet(searchResult, chartResultSets);\n        return searchResult;\n    }\n\n    async _executeSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        if (query.filter.isFolderMode()) {\n            return await this._executeSearchQueryInFolderMode(query);\n        } else {\n            return await this._executeSearchQueryInSearchMode(query);\n        }\n    }\n\n    async _executeSearchQueryInSearchMode(query: SearchQuery): Promise<SearchResultSet> {\n        return await this._doExecuteSearchQuery(query);\n    }\n\n    async _executeSearchQueryInFolderMode(query: SearchQuery): Promise<SearchResultSet> {\n        if (query.calculateFacets) {\n            // facet calculation enabled -> two search alls: (1) descendnant-of (2) child-of\n            const queryForFacets = query; // query with descendant-of filter for getting the facets\n            const queryForItems = this._assembleQueryForItems(query); // query with child-of filter for getting the result set items\n            const [resultSetForFacets, resultSetForItems] = await Promise.all([\n                this._doExecuteSearchQuery(queryForFacets),\n                this._doExecuteSearchQuery(queryForItems),\n            ]);\n            const mergedResultSet = this._mergeResultSetsInNavigationFolderMode(\n                resultSetForFacets,\n                resultSetForItems\n            );\n            return mergedResultSet;\n        } else {\n            // facet calculation disabled -> one search call: (1) child-of\n            const queryForItems = this._assembleQueryForItems(query); // query with child-of filter for getting the result set items\n            const resultSetForItems = await this._doExecuteSearchQuery(queryForItems);\n            resultSetForItems.query = query;\n            return resultSetForItems;\n        }\n    }\n\n    _mergeResultSetsInNavigationFolderMode(\n        resultSetForFacets: SearchResultSet,\n        resultSetForItems: SearchResultSet\n    ): SearchResultSet {\n        // move items from resultSetForItems to resultSetForFacets\n        resultSetForFacets.items = [];\n        for (const item of resultSetForItems.items) {\n            item.parent = resultSetForFacets;\n            resultSetForFacets.items.push(item);\n        }\n        // move total count from resultSetForItems to resultSetForFacets\n        resultSetForFacets.totalCount = resultSetForItems.totalCount;\n        resultSetForFacets.addErrors(resultSetForItems.getErrors());\n        return resultSetForFacets;\n    }\n\n    _assembleQueryForItems(query: SearchQuery): SearchQuery {\n        // clone query\n        const queryForItems = query.clone();\n        queryForItems.calculateFacets = false;\n        const folderAttribute = queryForItems.filter.getFolderAttribute();\n        // if there is no descendant-of filter then add an artifical descendant-of filter for root node\n        if (this.isAdditionalRootNodeFilterNeeded(queryForItems)) {\n            queryForItems.filter.autoInsertCondition(\n                this.sina.createSimpleCondition({\n                    attribute: folderAttribute,\n                    operator: ComparisonOperator.DescendantOf,\n                    value: \"$$ROOT$$\",\n                })\n            );\n        }\n        // switch operator from descendant-of to child-of\n        const folderAttributeConditions =\n            queryForItems.filter.rootCondition.getConditionsByAttribute(folderAttribute);\n        for (const condition of folderAttributeConditions) {\n            if (condition.operator === ComparisonOperator.DescendantOf) {\n                condition.operator = ComparisonOperator.ChildOf;\n            }\n        }\n        return queryForItems;\n    }\n\n    isAdditionalRootNodeFilterNeeded(query: SearchQuery): boolean {\n        const folderAttribute = query.filter.getFolderAttribute();\n        const folderAttributeConditions =\n            query.filter.rootCondition.getConditionsByAttribute(folderAttribute);\n        const descendantFilterConditions = folderAttributeConditions.filter(\n            (condition) => condition.operator === ComparisonOperator.DescendantOf\n        );\n        return descendantFilterConditions.length === 0;\n    }\n\n    async _doExecuteSearchQuery(query: SearchQuery): Promise<SearchResultSet> {\n        const transformedQuery = this._filteredQueryTransform(query) as SearchQuery;\n        const resultSet = await this.sina.provider.executeSearchQuery(transformedQuery);\n        return this._filteredQueryBackTransform(query, resultSet);\n    }\n\n    _filteredQueryTransform(query: SearchQuery): Query {\n        return this._genericFilteredQueryTransform(query);\n    }\n\n    _filteredQueryBackTransform(query: SearchQuery, resultSet: SearchResultSet): SearchResultSet {\n        if (\n            query.filter.dataSource.type !== DataSourceType.BusinessObject ||\n            query.filter.dataSource.subType !== DataSourceSubType.Filtered\n        ) {\n            return resultSet;\n        }\n        resultSet.query = query;\n        for (const chartResultSet of resultSet.facets) {\n            chartResultSet.query.filter = query.filter.clone();\n        }\n        return resultSet;\n    }\n\n    async _formatResultSetAsync(resultSet: SearchResultSet): Promise<void> {\n        return core.executeSequentialAsync(\n            this.sina.searchResultSetFormatters,\n            function (formatter: Formatter) {\n                return formatter.formatAsync(resultSet);\n            }\n        );\n    }\n\n    _collectAttributesWithFilter(query: SearchQuery): string[] {\n        // recursively collect attributes\n        const attributeMap = {};\n        this._doCollectAttributes(attributeMap, query.filter.rootCondition);\n        const attributedIds = Object.keys(attributeMap);\n        // filter out hierarchy attributes\n        // (for hierarchy attributes no chart queries are created per attribute\n        // instead in SearchHierarchyFacetsFormatter HierarchyQueries are created)\n        return attributedIds.filter((attributeId) => {\n            const attributeMetadata = query.filter.dataSource.getAttributeMetadata(\n                attributeId\n            ) as AttributeMetadata;\n            if (!attributeMetadata) {\n                return true; // inav2: metadata may not be loaded, but inav2 does not support hierarchy\n            }\n            return !attributeMetadata.isHierarchy;\n        });\n    }\n\n    _doCollectAttributes(attributeMap: Record<string, boolean>, condition: Condition): void {\n        switch (condition.type) {\n            case ConditionType.Simple:\n                attributeMap[(condition as SimpleCondition).attribute] = true;\n                break;\n            case ConditionType.Complex:\n                for (let i = 0; i < (condition as ComplexCondition).conditions.length; ++i) {\n                    const subCondition = (condition as ComplexCondition).conditions[i];\n                    this._doCollectAttributes(attributeMap, subCondition);\n                }\n                break;\n        }\n    }\n\n    _createChartQuery(query: Query, filterAttribute: string): ChartQuery {\n        const chartQuery = this.sina.createChartQuery({\n            dimension: filterAttribute,\n            top: this.facetTop,\n            nlq: this.nlq,\n        });\n        chartQuery.setFilter(query.filter.clone());\n        (chartQuery.filter.rootCondition as ComplexCondition).removeAttributeConditions(filterAttribute);\n        return chartQuery;\n    }\n\n    _createChartQueries(query: SearchQuery, filterAttributes: string): Array<ChartQuery> {\n        const chartQueries = [];\n        for (let i = 0; i < filterAttributes.length; ++i) {\n            const filterAttribute = filterAttributes[i];\n            const chartQuery = this._createChartQuery(query, filterAttribute);\n            chartQueries.push(chartQuery);\n        }\n        return chartQueries;\n    }\n\n    _mergeFacetsToSearchResultSet(\n        searchResultSet: SearchResultSet,\n        chartResultSets: Array<ChartResultSet>\n    ): void {\n        //////////////////////////////////////////////////////////////////////////////////\n        // selected filters\n        // main request\n        // chart request\n        // total count\n\n        // 1. selected filters -> facets (no count info)\n        // 2. facets (no count info) + total count -> facets (facets with one facet item, count info)\n        // 3. facets (facets with one facet item, count info) + main request (count info) -> facets (partial count info)\n        // 4. facets (partial count info) + chart request -> facets\n        //////////////////////////////////////////////////////////////////////////////////\n\n        this._addSelectedFiltersToSearchResultSet(searchResultSet);\n        for (let i = 0; i < chartResultSets.length; ++i) {\n            const chartResultSet = chartResultSets[i];\n            this._addChartResultSetToSearchResultSet(searchResultSet, chartResultSet);\n        }\n    }\n\n    _calculateFacetTitle(condition: SimpleCondition, dataSource: DataSource): string {\n        // if (condition.attributeLabel) {\n        //     return condition.attributeLabel;\n        // }\n        const attribute = condition.getFirstAttribute();\n        const attributeMetadata = dataSource.getAttributeMetadata(attribute) as AttributeMetadata;\n        return attributeMetadata.label;\n    }\n\n    _addSelectedFiltersToSearchResultSet(searchResultSet): void {\n        // ToDo: add type SearchResultSet, but currently leading to syntax error for 'rootCondition.conditions[j].conditions'\n        const dataSource = searchResultSet.query.filter.dataSource;\n        const rootCondition = searchResultSet.query.filter.rootCondition;\n        for (let j = 0; j < rootCondition.conditions.length; j++) {\n            const conditions = rootCondition.conditions[j].conditions;\n            const conditionAttributeLabel = this._calculateFacetTitle(\n                conditions[0],\n                searchResultSet.query.filter.dataSource\n            );\n            let conditionAttribute: string;\n            switch (conditions[0].type) {\n                case ConditionType.Simple:\n                    conditionAttribute = conditions[0].attribute;\n                    break;\n                case ConditionType.Complex:\n                    conditionAttribute = conditions[0].conditions[0].attribute;\n                    break;\n            }\n            const attributeMetadata: AttributeMetadata = dataSource.getAttributeMetadata(conditionAttribute);\n            if (attributeMetadata.isHierarchy) {\n                continue;\n            }\n            const matchFacetIndex = this._findMatchFacet(conditionAttribute, searchResultSet.facets);\n            let matchFacet = searchResultSet.facets[matchFacetIndex];\n            if (!matchFacet) {\n                const chartquery = this._createChartQuery(searchResultSet.query, conditionAttribute);\n                matchFacet = this.sina._createChartResultSet({\n                    title: conditionAttributeLabel,\n                    items: [],\n                    query: chartquery,\n                    facetTotalCount: undefined,\n                });\n                searchResultSet.facets.splice(matchFacetIndex, 1, matchFacet);\n            }\n            let countValue = null;\n            if (conditions.length === 1) {\n                countValue = searchResultSet.totalCount;\n            }\n            const selectedFacetItemList = [];\n            for (let k = 0; k < conditions.length; k++) {\n                let matchFacetItemIndex;\n                // check in searchResultSet facets\n                if (this._findFilterConditionInFacetItemList(conditions[k], matchFacet.items) >= 0) {\n                    matchFacetItemIndex = this._findFilterConditionInFacetItemList(\n                        conditions[k],\n                        matchFacet.items\n                    );\n                    selectedFacetItemList.push(matchFacet.items[matchFacetItemIndex]);\n                } else {\n                    selectedFacetItemList.push(\n                        this.sina._createChartResultSetItem({\n                            filterCondition: conditions[k],\n                            dimensionValueFormatted: conditions[k].valueLabel || conditions[k].value,\n                            measureValue: countValue,\n                            measureValueFormatted: conditions[k].valueLabel || conditions[k].value,\n                        })\n                    );\n                }\n            }\n            matchFacet.items = selectedFacetItemList;\n        }\n    }\n\n    _addChartResultSetToSearchResultSet(\n        searchResultSet: SearchResultSet,\n        chartResultSet: ChartResultSet\n    ): void {\n        searchResultSet.addErrors(chartResultSet.getErrors());\n        if (chartResultSet.items.length === 0) {\n            return;\n        }\n\n        // check for matching facet in searchResultSet\n        const dimension = chartResultSet.query.dimension;\n        const matchFacetIndex = this._findMatchFacet(dimension, searchResultSet.facets);\n        const matchFacet = searchResultSet.facets[matchFacetIndex];\n\n        // selected facet items for this dimension\n        const selectedFacetItemList = matchFacet.items;\n\n        // merge selected facet items to chartResultSet\n        let facetItemSelectionOutsideRange = false;\n        const appendFacetItemList = [];\n        for (let m = 0; m < selectedFacetItemList.length; m++) {\n            const matchIndex = this._findFilterConditionInFacetItemList(\n                (selectedFacetItemList[m] as ChartResultSetItem).filterCondition,\n                chartResultSet.items\n            );\n            if (matchIndex >= 0) {\n                // if find, insert matching facet item to append list for range facet, because it has count info\n                if (this._isRangeFacet(chartResultSet.query)) {\n                    appendFacetItemList.push(chartResultSet.items[matchIndex]);\n                }\n            } else {\n                // not find, insert selected facet item to append list\n                // for range facet, set boolean as true\n                if (this._isRangeFacet(chartResultSet.query)) {\n                    facetItemSelectionOutsideRange = true;\n                }\n                appendFacetItemList.push(selectedFacetItemList[m]);\n            }\n        }\n        appendFacetItemList.sort(function (a, b) {\n            return b.measureValue - a.measureValue;\n        });\n        if (this._isRangeFacet(chartResultSet.query)) {\n            if (facetItemSelectionOutsideRange) {\n                chartResultSet.items = appendFacetItemList;\n            }\n        } else {\n            chartResultSet.items = chartResultSet.items.concat(appendFacetItemList);\n        }\n\n        // merged list as search result facet\n        searchResultSet.facets.splice(matchFacetIndex, 1, chartResultSet);\n    }\n\n    _findMatchFacet(dimension: string, facets): number {\n        let i = 0;\n        for (; i < facets.length; i++) {\n            const facet = facets[i];\n            if (facet.query.dimension === dimension) {\n                break;\n            }\n        }\n        return i;\n    }\n\n    _findFilterConditionInFacetItemList(filterCondition: Condition, facetItems): number {\n        let index = -1;\n        for (let i = 0; i < facetItems.length; i++) {\n            const chartFacetitem = facetItems[i];\n            if (filterCondition.equals(chartFacetitem.filterCondition)) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    _isRangeFacet(query: ChartQuery): boolean {\n        const dataSourceMetadata = query.filter.dataSource.getAttributeMetadata(query.dimension);\n        if (dataSourceMetadata.type === query.sina.AttributeType.Double) {\n            return true;\n        }\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]}