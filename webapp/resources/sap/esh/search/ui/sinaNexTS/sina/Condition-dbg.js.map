{"version":3,"file":"Condition-dbg.js","names":["sap","ui","define","___SinaObject","SinaObject","Condition","type","attributeLabel","valueLabel","userDefined","operator","constructor","properties","sina","getAttributes","attributeMap","_collectAttributes","Object","keys","getConditionsByAttribute","attribute","filterConditions","_collectFilterConditions","__exports","__esModule"],"sources":["Condition.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { ConditionType } from \"./ConditionType\";\nimport { ComparisonOperator } from \"./ComparisonOperator\";\nimport { LogicalOperator } from \"./LogicalOperator\";\nimport { SimpleCondition, SimpleConditionJSON } from \"./SimpleCondition\";\nimport type { Sina } from \"./Sina\";\nimport { ComplexConditionJSON } from \"./ComplexCondition\";\n\n// _meta: {\n//     properties: {\n//         attributeLabel: {\n//             required: false\n//         },\n//         valueLabel: {\n//             required: false\n//         },\n//         userDefined: {\n//             required: false\n//         }\n//     }\n// }\nexport interface ConditionProperties extends SinaObjectProperties {\n    attributeLabel?: string;\n    valueLabel?: string;\n    userDefined?: boolean | null;\n}\n\nexport abstract class Condition extends SinaObject {\n    type: ConditionType;\n    attributeLabel?: string;\n    valueLabel?: string;\n    userDefined?: boolean | null;\n    operator: ComparisonOperator | LogicalOperator;\n\n    constructor(properties: ConditionProperties) {\n        super({ sina: properties.sina });\n        this.attributeLabel = properties.attributeLabel;\n        this.valueLabel = properties.valueLabel;\n        this.userDefined = properties.userDefined;\n    }\n\n    abstract setSina(sina: Sina);\n\n    abstract clone(): Condition;\n\n    abstract equals(other: Condition): boolean;\n\n    abstract containsAttribute(attribute: string): boolean;\n\n    abstract getFirstAttribute(): string;\n\n    abstract _collectAttributes(attributeMap: { [attributeId: string]: boolean }): void;\n\n    getAttributes(): string[] {\n        const attributeMap = {};\n        this._collectAttributes(attributeMap);\n        return Object.keys(attributeMap);\n    }\n\n    abstract _collectFilterConditions(attribute: string, filterConditions: Array<SimpleCondition>);\n\n    getConditionsByAttribute(attribute: string): Array<SimpleCondition> {\n        const filterConditions = [];\n        this._collectFilterConditions(attribute, filterConditions);\n        return filterConditions;\n    }\n\n    abstract toJson(): ComplexConditionJSON | SimpleConditionJSON;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAJAA,GAAA,CAAAC,EAAA,CAAAC,MAAA,6BAAAC,aAAA;EAAA;;EAAA,MAKSC,UAAU,GAAAD,aAAA,gBAQnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAOO,MAAeE,SAAS,SAASD,UAAU,CAAC;IAC/CE,IAAI;IACJC,cAAc;IACdC,UAAU;IACVC,WAAW;IACXC,QAAQ;IAERC,WAAWA,CAACC,UAA+B,EAAE;MACzC,KAAK,CAAC;QAAEC,IAAI,EAAED,UAAU,CAACC;MAAK,CAAC,CAAC;MAChC,IAAI,CAACN,cAAc,GAAGK,UAAU,CAACL,cAAc;MAC/C,IAAI,CAACC,UAAU,GAAGI,UAAU,CAACJ,UAAU;MACvC,IAAI,CAACC,WAAW,GAAGG,UAAU,CAACH,WAAW;IAC7C;IAcAK,aAAaA,CAAA,EAAa;MACtB,MAAMC,YAAY,GAAG,CAAC,CAAC;MACvB,IAAI,CAACC,kBAAkB,CAACD,YAAY,CAAC;MACrC,OAAOE,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC;IACpC;IAIAI,wBAAwBA,CAACC,SAAiB,EAA0B;MAChE,MAAMC,gBAAgB,GAAG,EAAE;MAC3B,IAAI,CAACC,wBAAwB,CAACF,SAAS,EAAEC,gBAAgB,CAAC;MAC1D,OAAOA,gBAAgB;IAC3B;EAGJ;EAAC,IAAAE,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAAlB,SAAA,GAAAA,SAAA;EAAA,OAAAkB,SAAA;AAAA","ignoreList":[]}