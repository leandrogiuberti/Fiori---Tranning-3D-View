{"version":3,"file":"Condition.js","names":["sap","ui","define","___SinaObject","SinaObject","Condition","type","attributeLabel","valueLabel","userDefined","operator","constructor","properties","super","sina","this","getAttributes","attributeMap","_collectAttributes","Object","keys","getConditionsByAttribute","attribute","filterConditions","_collectFilterConditions","__exports","__esModule"],"sources":["Condition.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport { SinaObject, SinaObjectProperties } from \"./SinaObject\";\nimport { ConditionType } from \"./ConditionType\";\nimport { ComparisonOperator } from \"./ComparisonOperator\";\nimport { LogicalOperator } from \"./LogicalOperator\";\nimport { SimpleCondition, SimpleConditionJSON } from \"./SimpleCondition\";\nimport type { Sina } from \"./Sina\";\nimport { ComplexConditionJSON } from \"./ComplexCondition\";\n\n// _meta: {\n//     properties: {\n//         attributeLabel: {\n//             required: false\n//         },\n//         valueLabel: {\n//             required: false\n//         },\n//         userDefined: {\n//             required: false\n//         }\n//     }\n// }\nexport interface ConditionProperties extends SinaObjectProperties {\n    attributeLabel?: string;\n    valueLabel?: string;\n    userDefined?: boolean | null;\n}\n\nexport abstract class Condition extends SinaObject {\n    type: ConditionType;\n    attributeLabel?: string;\n    valueLabel?: string;\n    userDefined?: boolean | null;\n    operator: ComparisonOperator | LogicalOperator;\n\n    constructor(properties: ConditionProperties) {\n        super({ sina: properties.sina });\n        this.attributeLabel = properties.attributeLabel;\n        this.valueLabel = properties.valueLabel;\n        this.userDefined = properties.userDefined;\n    }\n\n    abstract setSina(sina: Sina);\n\n    abstract clone(): Condition;\n\n    abstract equals(other: Condition): boolean;\n\n    abstract containsAttribute(attribute: string): boolean;\n\n    abstract getFirstAttribute(): string;\n\n    abstract _collectAttributes(attributeMap: { [attributeId: string]: boolean }): void;\n\n    getAttributes(): string[] {\n        const attributeMap = {};\n        this._collectAttributes(attributeMap);\n        return Object.keys(attributeMap);\n    }\n\n    abstract _collectFilterConditions(attribute: string, filterConditions: Array<SimpleCondition>);\n\n    getConditionsByAttribute(attribute: string): Array<SimpleCondition> {\n        const filterConditions = [];\n        this._collectFilterConditions(attribute, filterConditions);\n        return filterConditions;\n    }\n\n    abstract toJson(): ComplexConditionJSON | SimpleConditionJSON;\n}\n"],"mappings":";;;;;AAAAA,IAAAC,GAAAC,OAAA,0BAAAC,GAAA,mBAKSC,EAAUD,EAAA,cA2BZ,MAAeE,UAAkBD,EACpCE,KACAC,eACAC,WACAC,YACAC,SAEAC,YAAYC,GACRC,MAAM,CAAEC,KAAMF,EAAWE,OACzBC,KAAKR,eAAiBK,EAAWL,eACjCQ,KAAKP,WAAaI,EAAWJ,WAC7BO,KAAKN,YAAcG,EAAWH,WAClC,CAcAO,gBACI,MAAMC,EAAe,CAAC,EACtBF,KAAKG,mBAAmBD,GACxB,OAAOE,OAAOC,KAAKH,EACvB,CAIAI,yBAAyBC,GACrB,MAAMC,EAAmB,GACzBR,KAAKS,yBAAyBF,EAAWC,GACzC,OAAOA,CACX,EAGH,IAAAE,EAAA,CAAAC,WAAA,MAAAD,EAAApB,YAAA,OAAAoB,CAAA","ignoreList":[]}