{"version":3,"file":"SearchConfiguration.js","names":["sap","ui","define","__SearchResultListSelectionHandler","__SearchResultListItemNote","__SearchConfigurationSettings","Log","assert","___SelectionMode","_interopRequireDefault","obj","__esModule","default","SearchResultListSelectionHandler","SearchResultListItemNote","SearchConfigurationSettings","defaultSearchConfigurationSettings","deprecatedParameters","urlForbiddenParameters","SelectionMode","SearchConfiguration","log","getLogger","dataSourceConfigurations","dataSourceConfigurations_Regexes","defaultDataSourceConfig","searchResultListItem","undefined","searchResultListItemControl","searchResultListItemContent","searchResultListItemContentControl","searchResultListSelectionHandler","getName","searchResultListSelectionHandlerControl","documentDataSourceConfiguration","_dataSourceLoadingProms","_loadCustomModulesProm","constructor","configuration","super","extendSearchConfiguration","this","aiNlqExplainBar","isUshell","aiNlq","enableCharts","reloadOnUrlChange","readUshellConfiguration","readOutdatedUshellConfiguration","updateConfigFromUrlParameters","initDataSourceConfig","checkForDeprecatedParameters","parameter","Object","prototype","hasOwnProperty","call","msg","replacement","replacedBy","resultviewSelectionMode","MultipleItems","None","replacementInfo","config","window","renderers","fiori2","componentData","esearch","e","debug","target","sources","assign","searchBusinessObjects","dataSources","i","length","dataSourceConfig","id","regex","flags","regexFlags","regexObject","RegExp","push","message","JSON","stringify","warning","dataSourceConfiguration","noteprocessorurl","getParameterType","parameterName","parseBoolean","value","toLowerCase","parseEsDevConfig","parse","urlParameters","parseUrlParameters","parameterValue","includes","startsWith","resultViewTypes","split","filter","resultViewType","parameterType","parseInt","URLSearchParams","urlSearchParams","location","search","fromEntries","entries","loadCustomModulesAsync","dataSourceConfigurationProm","dataSourceConfigurationsProms","dataSourceId","loadCustomModulesForDataSourceIdAsync","Promise","all","loadCustomModulesForDataSourcesAsync","dataSourcesHints","dataSourcesLoadingProms","dataSourceHints","Array","isArray","dataSourceLoadingProm","loadCustomModulesForDataSourceAsync","dataSource","resolve","customControlAttrNames","moduleAttrName","controlAttrName","_prepareDataSourceConfigurationForDataSource","customControlProm","customControlProms","_doLoadCustomModulesAsync","_resolvedOrFailed","then","defaultModuleName","defaultControl","that","require","replace","customControl","getDataSourceConfig","test","isDocumentConnector","isWebCompSearchFieldGroupEnabled","FF_useWebComponentsSearchInput","document","querySelector"],"sources":["SearchConfiguration.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport SearchResultListSelectionHandler from \"./controls/resultview/SearchResultListSelectionHandler\";\nimport { DataSource } from \"./sinaNexTS/sina/DataSource\";\nimport SearchResultListItemNote from \"./controls/resultview/SearchResultListItemNote\";\nimport SearchConfigurationSettings, {\n    defaultSearchConfigurationSettings,\n    deprecatedParameters,\n    urlForbiddenParameters,\n} from \"./SearchConfigurationSettings\";\nimport Log from \"sap/base/Log\";\nimport assert from \"sap/base/assert\";\nimport { DataSourceConfiguration } from \"./SearchConfigurationTypes\";\nimport { SelectionMode } from \"./SelectionMode\";\n\nexport default class SearchConfiguration extends SearchConfigurationSettings {\n    private log = Log.getLogger(\"sap.esh.search.ui.SearchConfiguration\");\n    private dataSourceConfigurations: Record<string, DataSourceConfiguration>;\n    private dataSourceConfigurations_Regexes: Array<DataSourceConfiguration> = [];\n    private defaultDataSourceConfig: DataSourceConfiguration = {\n        searchResultListItem: undefined,\n        searchResultListItemControl: undefined,\n\n        searchResultListItemContent: undefined,\n        searchResultListItemContentControl: undefined,\n\n        searchResultListSelectionHandler: SearchResultListSelectionHandler[\"getMetadata\"]().getName(), // ToDo\n        searchResultListSelectionHandlerControl: SearchResultListSelectionHandler,\n    };\n    private documentDataSourceConfiguration: DataSourceConfiguration;\n\n    _dataSourceLoadingProms: Record<string, any>;\n    _loadCustomModulesProm: Promise<any>;\n\n    /**\n     * @this SearchConfiguration\n     * @constructor\n     */\n    constructor(configuration?: Partial<SearchConfigurationSettings> | SearchConfiguration) {\n        super();\n        SearchConfiguration.extendSearchConfiguration(this, configuration);\n        this.aiNlqExplainBar ??= false;\n        if (this.isUshell) {\n            this.aiNlq = true;\n            this.enableCharts = true;\n            this.reloadOnUrlChange = false;\n            this.readUshellConfiguration();\n            this.readOutdatedUshellConfiguration();\n        }\n        this.updateConfigFromUrlParameters();\n        this.initDataSourceConfig();\n        this.checkForDeprecatedParameters(configuration);\n    }\n\n    private checkForDeprecatedParameters(\n        configuration?: Partial<SearchConfigurationSettings> | SearchConfiguration\n    ): void {\n        for (const parameter in deprecatedParameters) {\n            if (configuration && Object.prototype.hasOwnProperty.call(configuration, parameter)) {\n                // if the provided value is the same as the default, skip the assertion\n                if (configuration[parameter] === defaultSearchConfigurationSettings[parameter]) {\n                    continue;\n                }\n                // stakeholder explicitly set this property\n                let msg = `You are using a deprecated configuration property for SearchCompositeControl which will be removed in a future release: '${parameter}'.`;\n                const replacement = deprecatedParameters[parameter];\n                if (replacement.replacedBy) {\n                    // do auto-assignment old => new\n                    if (replacement.replacedBy === \"enableMultiSelectionResultItems\") {\n                        if (this[parameter] === true) {\n                            this.resultviewSelectionMode = SelectionMode.MultipleItems;\n                        } else {\n                            this.resultviewSelectionMode = SelectionMode.None;\n                        }\n                    } else {\n                        this[replacement.replacedBy] = this[parameter];\n                    }\n                    msg += `\\nPlease use '${replacement.replacedBy}' instead.`;\n                }\n                if (replacement.replacementInfo) {\n                    msg += `\\n${replacement.replacementInfo}`;\n                }\n                assert(false, msg);\n            }\n        }\n    }\n\n    private readUshellConfiguration(): void {\n        // read global config\n        try {\n            const config = window[\"sap-ushell-config\"].renderers.fiori2.componentData.config.esearch;\n            SearchConfiguration.extendSearchConfiguration(this, config);\n        } catch (e) {\n            this.log.debug(\"Could not read ushell configuration\", e);\n        }\n    }\n\n    private static extendSearchConfiguration<T extends object>(target: T, ...sources: any[]): T {\n        // we calso take over properties having value null/undefined.\n        //   - it is currently possible to wipe out properties like 'performanceLogger' (ELISA default)\n        //   - we might want to use more sophisticated merging logic in the future\n        return Object.assign(target, ...sources);\n    }\n\n    readOutdatedUshellConfiguration(): void {\n        try {\n            // get config\n            const config = window[\"sap-ushell-config\"].renderers.fiori2.componentData.config;\n\n            // due to historical reasons the config parameter searchBusinessObjects is not in esearch but in parent object\n            // copy this parameter to config object\n            if (typeof config.searchBusinessObjects !== \"undefined\") {\n                if (config.searchBusinessObjects === \"hidden\" || config.searchBusinessObjects === false) {\n                    this.searchBusinessObjects = false;\n                } else {\n                    this.searchBusinessObjects = true;\n                }\n            }\n        } catch (e) {\n            this.log.debug(\"Could not read ushell configuration\", e);\n        }\n    }\n\n    initDataSourceConfig(): void {\n        // Prepare caching map for custom datasource configurations\n        this.dataSourceConfigurations = {};\n        this.dataSourceConfigurations_Regexes = [];\n\n        if (this.dataSources) {\n            for (let i = 0; i < this.dataSources.length; i++) {\n                const dataSourceConfig = this.dataSources[i];\n                if (dataSourceConfig.id) {\n                    this.dataSourceConfigurations[dataSourceConfig.id] = dataSourceConfig;\n                } else if (dataSourceConfig.regex) {\n                    const flags = dataSourceConfig.regexFlags || undefined;\n                    const regexObject = new RegExp(dataSourceConfig.regex, flags);\n                    if (regexObject) {\n                        dataSourceConfig.regexObject = regexObject;\n                        this.dataSourceConfigurations_Regexes.push(dataSourceConfig);\n                    }\n                } else {\n                    const message =\n                        \"Following datasource configuration does neither include a valid id nor a regular expression, therefore it is ignored:\\n\" +\n                        JSON.stringify(dataSourceConfig);\n                    this.log.warning(message);\n                }\n            }\n        }\n        this.dataSources = undefined;\n\n        // Special logic for Document Result List Item\n        this.documentDataSourceConfiguration = {\n            searchResultListItem: \"sap.esh.search.ui.controls.SearchResultListItemDocument\",\n        };\n\n        // Special logic for Note Result List Item\n        const dataSourceConfiguration: DataSourceConfiguration =\n            this.dataSourceConfigurations.noteprocessorurl || {};\n        this.dataSourceConfigurations.noteprocessorurl = dataSourceConfiguration;\n\n        this.dataSourceConfigurations.noteprocessorurl.searchResultListItemControl =\n            this.dataSourceConfigurations.noteprocessorurl.searchResultListItemControl ||\n            new SearchResultListItemNote();\n        this.dataSourceConfigurations.noteprocessorurl.searchResultListSelectionHandler =\n            this.dataSourceConfigurations.noteprocessorurl.searchResultListSelectionHandler ||\n            \"sap.esh.search.ui.controls.resultview.SearchResultListSelectionHandlerNote\";\n    }\n\n    getParameterType(parameterName): string {\n        if (parameterName in deprecatedParameters) {\n            if (deprecatedParameters[parameterName]) {\n                // if there a replacement use type from replacement\n                parameterName = deprecatedParameters[parameterName].replacedBy;\n            } else {\n                return \"string\"; // just return something so that following logic for printing outdated message works.\n            }\n        }\n\n        // eslint-disable-next-line no-prototype-builtins\n        if (!defaultSearchConfigurationSettings.hasOwnProperty(parameterName)) {\n            return \"\";\n        }\n        return typeof defaultSearchConfigurationSettings[parameterName];\n    }\n\n    parseBoolean(value: string): boolean {\n        if (value.toLowerCase() === \"true\") {\n            return true;\n        }\n        return false;\n    }\n\n    parseEsDevConfig(value: string) {\n        const config = JSON.parse(value);\n        for (const parameterName of urlForbiddenParameters) {\n            delete config[parameterName];\n        }\n        SearchConfiguration.extendSearchConfiguration(this, config);\n    }\n\n    updateConfigFromUrlParameters(): void {\n        const urlParameters = this.parseUrlParameters();\n        for (const parameterName in urlParameters) {\n            const parameterValue = urlParameters[parameterName];\n\n            // ignore forbidden parameters\n            if (urlForbiddenParameters.includes(parameterName)) {\n                continue;\n            }\n\n            // ignore sina url parameters (these parameters are handled by sina itself, see sinaFactory)\n            if (parameterName.startsWith(\"sina\")) {\n                continue;\n            }\n\n            // special handling for parameter demoMode\n            if (parameterName === \"demoMode\") {\n                this.searchBusinessObjects = true;\n                continue;\n            }\n\n            // special handling for parameter resultViewTypes\n            if (parameterName === \"resultViewTypes\") {\n                let resultViewTypes = parameterValue.split(\",\"); // convert to array\n                resultViewTypes = resultViewTypes.filter((resultViewType) => resultViewType.length > 0); // remove empty element\n                this.resultViewTypes = resultViewTypes;\n                continue;\n            }\n\n            // special handling for parameter esDevConfig\n            if (parameterName === \"esDevConfig\") {\n                this.parseEsDevConfig(parameterValue);\n                continue;\n            }\n\n            // default parameter handling\n            const parameterType = this.getParameterType(parameterName);\n            switch (parameterType) {\n                case \"string\":\n                    this[parameterName] = parameterValue;\n                    break;\n                case \"number\":\n                    this[parameterName] = parseInt(parameterValue);\n                    break;\n                case \"boolean\":\n                    this[parameterName] = this.parseBoolean(parameterValue);\n                    break;\n                default:\n                // ignore parameters not defined in SearchConfigurationSettings\n            }\n        }\n    }\n\n    parseUrlParameters(): { [name: string]: string } {\n        if (!URLSearchParams) {\n            return {};\n        }\n        const urlSearchParams = new URLSearchParams(window.location.search);\n        return Object.fromEntries(urlSearchParams.entries());\n    }\n\n    // use this as an early initialization routine\n    loadCustomModulesAsync(): Promise<any> {\n        if (this._loadCustomModulesProm) {\n            return this._loadCustomModulesProm;\n        }\n\n        let dataSourceConfigurationProm;\n        const dataSourceConfigurationsProms = [];\n\n        for (const dataSourceId in this.dataSourceConfigurations) {\n            dataSourceConfigurationProm = this.loadCustomModulesForDataSourceIdAsync(dataSourceId);\n            dataSourceConfigurationsProms.push(dataSourceConfigurationProm);\n        }\n\n        this._loadCustomModulesProm = Promise.all(dataSourceConfigurationsProms);\n        return this._loadCustomModulesProm;\n    }\n\n    async loadCustomModulesForDataSourcesAsync(dataSources, dataSourcesHints): Promise<any> {\n        const dataSourcesLoadingProms = [];\n        for (let i = 0; i < dataSources.length; i++) {\n            const dataSourceHints =\n                (Array.isArray(dataSourcesHints) && dataSourcesHints.length > i && dataSourcesHints[i]) || {};\n            const dataSourceLoadingProm = this.loadCustomModulesForDataSourceAsync(\n                dataSources[i],\n                dataSourceHints\n            );\n            dataSourcesLoadingProms.push(dataSourceLoadingProm);\n        }\n        return Promise.all(dataSourcesLoadingProms);\n    }\n\n    loadCustomModulesForDataSourceAsync(dataSource: DataSource, dataSourceHints = {}): Promise<any> {\n        dataSourceHints = dataSourceHints || {};\n        return this.loadCustomModulesForDataSourceIdAsync(dataSource.id, dataSourceHints);\n    }\n\n    loadCustomModulesForDataSourceIdAsync(\n        dataSourceId?: string,\n        dataSourceHints?: Record<string, any>\n    ): Promise<any> {\n        if (!dataSourceId) {\n            return Promise.resolve();\n        }\n\n        this._dataSourceLoadingProms = this._dataSourceLoadingProms || {};\n\n        let dataSourceLoadingProm = this._dataSourceLoadingProms[dataSourceId];\n        if (!dataSourceLoadingProm) {\n            const customControlAttrNames = [\n                {\n                    moduleAttrName: \"searchResultListItem\",\n                    controlAttrName: \"searchResultListItemControl\",\n                },\n                {\n                    moduleAttrName: \"searchResultListItemContent\",\n                    controlAttrName: \"searchResultListItemContentControl\",\n                },\n                {\n                    moduleAttrName: \"searchResultListSelectionHandler\",\n                    controlAttrName: \"searchResultListSelectionHandlerControl\",\n                },\n            ];\n\n            const dataSourceConfiguration = this._prepareDataSourceConfigurationForDataSource(\n                dataSourceId,\n                dataSourceHints\n            );\n\n            let customControlProm;\n            const customControlProms = [];\n\n            for (let i = 0; i < customControlAttrNames.length; i++) {\n                customControlProm = this._doLoadCustomModulesAsync(\n                    dataSourceId,\n                    dataSourceConfiguration,\n                    customControlAttrNames[i].moduleAttrName,\n                    customControlAttrNames[i].controlAttrName\n                );\n                customControlProms.push(customControlProm);\n            }\n\n            dataSourceLoadingProm = Promise.all(customControlProms);\n            dataSourceLoadingProm._resolvedOrFailed = false;\n            dataSourceLoadingProm.then(function () {\n                dataSourceLoadingProm._resolvedOrFailed = true;\n            });\n            this._dataSourceLoadingProms[dataSourceId] = dataSourceLoadingProm;\n        }\n        return dataSourceLoadingProm;\n    }\n\n    // Helper function to keep 'dataSourceConfiguration' instance unchanged within\n    // its scope while the main function loops over all instances\n    _doLoadCustomModulesAsync(\n        dataSourceId: string,\n        dataSourceConfiguration,\n        moduleAttrName: string,\n        controlAttrName: string,\n        defaultModuleName?: string,\n        defaultControl?\n    ): Promise<void> {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        return new Promise(function (resolve) {\n            if (\n                dataSourceConfiguration[moduleAttrName] &&\n                (!dataSourceConfiguration[controlAttrName] ||\n                    dataSourceConfiguration[controlAttrName] == that.defaultDataSourceConfig[controlAttrName])\n            ) {\n                try {\n                    sap.ui.require(\n                        [dataSourceConfiguration[moduleAttrName].replace(/[.]/g, \"/\")],\n                        function (customControl) {\n                            dataSourceConfiguration[controlAttrName] = customControl;\n                            resolve();\n                        }\n                    );\n                } catch (e) {\n                    let message =\n                        \"Could not load custom module '\" +\n                        dataSourceConfiguration[moduleAttrName] +\n                        \"' for data source with id '\" +\n                        dataSourceId +\n                        \"'. \";\n                    message += \"Falling back to default data source configuration.\";\n                    that.log.warning(message, e);\n                    dataSourceConfiguration[moduleAttrName] =\n                        defaultModuleName || that.defaultDataSourceConfig[moduleAttrName];\n                    dataSourceConfiguration[controlAttrName] =\n                        defaultControl || that.defaultDataSourceConfig[controlAttrName];\n                    resolve();\n                }\n            } else {\n                if (!dataSourceConfiguration[controlAttrName]) {\n                    dataSourceConfiguration[moduleAttrName] =\n                        defaultModuleName || that.defaultDataSourceConfig[moduleAttrName];\n                    dataSourceConfiguration[controlAttrName] =\n                        defaultControl || that.defaultDataSourceConfig[controlAttrName];\n                }\n                resolve();\n            }\n        });\n    }\n\n    getDataSourceConfig(dataSource: DataSource): any {\n        if (\n            this._dataSourceLoadingProms &&\n            this._dataSourceLoadingProms[dataSource.id] &&\n            !this._dataSourceLoadingProms[dataSource.id]._resolvedOrFailed\n        ) {\n            // Return the default data source if the custom modules\n            // for this particular data source aren't loaded yet.\n            return this.defaultDataSourceConfig;\n        }\n\n        let config = this.dataSourceConfigurations[dataSource.id];\n        if (!config) {\n            config = this.defaultDataSourceConfig;\n            this.dataSourceConfigurations[dataSource.id] = config;\n        }\n\n        return config;\n    }\n\n    _prepareDataSourceConfigurationForDataSource(dataSourceId: string, dataSourcesHints): any {\n        let dataSourceConfiguration: any = {};\n        if (this.dataSourceConfigurations[dataSourceId]) {\n            dataSourceConfiguration = this.dataSourceConfigurations[dataSourceId];\n        } else {\n            for (let i = 0; i < this.dataSourceConfigurations_Regexes.length; i++) {\n                if (this.dataSourceConfigurations_Regexes[i].regexObject.test(dataSourceId)) {\n                    dataSourceConfiguration = this.dataSourceConfigurations_Regexes[i];\n                    break;\n                }\n            }\n        }\n\n        // Use SearchResultListItemDocument control for document-like objects.\n        // Can be overriden by another control in ushell configuration.\n        if (dataSourcesHints && dataSourcesHints.isDocumentConnector) {\n            if (!dataSourceConfiguration.searchResultListItem) {\n                dataSourceConfiguration.searchResultListItem =\n                    this.documentDataSourceConfiguration.searchResultListItem;\n            } else {\n                const message =\n                    \"Will attempt to load '\" +\n                    dataSourceConfiguration.searchResultListItem +\n                    \"' instead of '\" +\n                    this.documentDataSourceConfiguration.searchResultListItem +\n                    \"' for data source '\" +\n                    dataSourceId +\n                    \"'\";\n                this.log.warning(message);\n            }\n        }\n\n        this.dataSourceConfigurations[dataSourceId] = dataSourceConfiguration;\n        return dataSourceConfiguration;\n    }\n\n    isWebCompSearchFieldGroupEnabled(): boolean {\n        // check feature flag\n        if (!this.FF_useWebComponentsSearchInput) {\n            return false;\n        }\n        // in case of ushell, check if the web component is enabled in ushell header\n        if (this.isUshell) {\n            if (!document.querySelector(\"#shell-header .sapUshellShellBar\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]}