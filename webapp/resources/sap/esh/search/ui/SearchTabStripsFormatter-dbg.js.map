{"version":3,"file":"SearchTabStripsFormatter-dbg.js","names":["sap","ui","define","__ErrorHandler","___sinaNexTS_sina_DataSourceResultSet","___sinaNexTS_sina_UserCategoryDataSource","errors","_interopRequireDefault","obj","__esModule","default","ErrorHandler","DataSourceResultSet","UserCategoryDataSource","Node","children","parent","unsureWhetherNodeisBelowRoot","tree","constructor","dataSource","count","equals","other","setCount","getAncestors","ancestors","currentNode","push","getChildren","i","length","child","getChildrenSortedByCount","sort","c1","c2","clearChildren","appendNode","node","appendNodeAtIndex","index","splice","insertNode","model","appDataSource","favDataSource","nodeWrk","labelPlural","removeChildNode","indexOf","hasChild","hasSibling","_findNode","result","Tree","rootNode","rootDataSource","reset","invalidate","findNode","childNode","ds1","ds2","node1","node2","removeObsoleteTreeNodes","resultDataSources","map","x","updateFromSearchResultSet","searchResultSet","currentCount","totalCount","collectDataSourcesFromResult","isIncludedInMyFavorites","myFavNode","allDataSource","isUserCategory","getProperty","updateTreeFromResultDataSources","updateCountMyFavorites","updateMyFavTreeNode","userCategoryManager","isFavActive","filter","isFavDataSource","reduce","sum","cur","measureValue","getFacets","isDataSourceResultSetItem","item","treeFacets","facets","items","sinaNext","_createDataSourceResultSetItem","subDataSources","dimensionValueFormatted","measureValueFormatted","toString","resultSet","_createDataSourceResultSet","title","query","label","facetTotalCount","undefined","type","FacetType","DataSource","includeApps","resultDataSource","isAppDataSource","DataSourceType","BusinessObject","forEach","resultNode","Category","UserCategory","Formatter","errorHandler","getInstance","format","tabStrips","generateTabStrips","doGenerateTabStrips","formattedStrips","config","tabStripsFormatter","strips","selected","err","oError","ConfigurationExitError","applicationComponent","onError","tabStripLimit","includesNode","__exports"],"sources":["SearchTabStripsFormatter.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport ErrorHandler from \"./error/ErrorHandler\";\nimport SearchModel from \"sap/esh/search/ui/SearchModel\";\nimport { DataSource } from \"./sinaNexTS/sina/DataSource\";\nimport { DataSourceResultSet } from \"./sinaNexTS/sina/DataSourceResultSet\";\nimport { FacetResultSet } from \"./sinaNexTS/sina/FacetResultSet\";\nimport { SearchResultSet } from \"./sinaNexTS/sina/SearchResultSet\";\nimport { UserCategoryDataSource } from \"./sinaNexTS/sina/UserCategoryDataSource\";\nimport errors from \"sap/esh/search/ui/error/errors\";\n\ninterface IDataSource {\n    dataSource: DataSource;\n    isFavDataSource: boolean;\n    isAppDataSource: boolean;\n    dimensionValueFormatted: string;\n    measureValue: number;\n    measureValueFormatted: string;\n}\n// =======================================================================\n// tree node\n// =======================================================================\n\nclass Node {\n    children: Array<Node>;\n    parent: Node;\n    unsureWhetherNodeisBelowRoot?: boolean;\n    tree: Tree;\n\n    constructor(\n        public dataSource: DataSource,\n        public count: number,\n        tree: Tree\n    ) {\n        this.children = [];\n        this.parent = null;\n        this.tree = tree;\n    }\n\n    equals(other: Node): boolean {\n        return this === other;\n    }\n\n    setCount(count: number): void {\n        this.count = count;\n    }\n\n    getAncestors(): Array<Node> {\n        /* eslint consistent-this: 0 */\n        const ancestors = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let currentNode: Node = this;\n        while (currentNode.parent) {\n            ancestors.push(currentNode.parent);\n            currentNode = currentNode.parent;\n        }\n        return ancestors;\n    }\n\n    getChildren(): Array<Node> {\n        // collect children, ignore children with unsure path information\n        const children = [];\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            if (child.unsureWhetherNodeisBelowRoot) {\n                continue;\n            }\n            children.push(child);\n        }\n        return children;\n    }\n\n    getChildrenSortedByCount(): Array<Node> {\n        // collect children, ignore children with unsure path information\n        const children = this.getChildren();\n        // sort by count\n        children.sort(function (c1, c2) {\n            return c2.count - c1.count;\n        });\n        return children;\n    }\n\n    clearChildren(): void {\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            child.parent = null;\n        }\n        this.children = [];\n    }\n\n    appendNode(node: Node): void {\n        node.parent = this;\n        this.children.push(node);\n    }\n\n    appendNodeAtIndex(node: Node, index: number): void {\n        node.parent = this;\n        this.children.splice(index, 0, node);\n    }\n\n    insertNode(node: Node): void {\n        // no siblings exist -> append the only one child node\n        if (this.children.length === 0) {\n            this.appendNode(node);\n            return;\n        }\n\n        // insert Apps node as the first child node\n        if (node.dataSource === this.tree.model.appDataSource) {\n            this.appendNodeAtIndex(node, 0);\n            return;\n        }\n\n        // insert My Favorites node as the first child node but not before the Apps node\n        if (node.dataSource === this.tree.model.favDataSource) {\n            if (this.children[0].dataSource === this.tree.model.appDataSource) {\n                this.appendNodeAtIndex(node, 1);\n            } else {\n                this.appendNodeAtIndex(node, 0);\n            }\n            return;\n        }\n\n        let index = -1;\n        let appendNode = true;\n        for (const nodeWrk of this.children) {\n            index++;\n            if (\n                nodeWrk.dataSource === this.tree.model.appDataSource ||\n                nodeWrk.dataSource === this.tree.model.favDataSource ||\n                nodeWrk.children.length > 0\n            ) {\n                // Do not compare with Apps node or MyFavorites node or folders\n                continue;\n            }\n\n            // node's position will be before existing node\n            if (\n                nodeWrk.dataSource.labelPlural &&\n                node.dataSource.labelPlural &&\n                nodeWrk.dataSource.labelPlural > node.dataSource.labelPlural\n            ) {\n                appendNode = false;\n                break;\n            }\n        }\n\n        if (appendNode) {\n            this.appendNode(node);\n        } else {\n            this.appendNodeAtIndex(node, index);\n        }\n    }\n\n    removeChildNode(node: Node): void {\n        // remove from children\n        const index = this.children.indexOf(node);\n        if (index < 0) {\n            return;\n        }\n        this.children.splice(index, 1);\n\n        // node now has no parent\n        node.parent = null;\n    }\n\n    hasChild(node: Node): boolean {\n        return this.children.indexOf(node) > -1;\n    }\n\n    hasSibling(node: Node): boolean {\n        if (this.equals(node)) {\n            return false;\n        }\n        const parent = this.parent;\n        if (!parent) {\n            return false;\n        }\n        if (parent.hasChild(node)) {\n            return true;\n        }\n        return false;\n    }\n\n    _findNode(dataSource: DataSource, result: Array<Node>): void {\n        if (this.dataSource === dataSource) {\n            result.push(this);\n            return;\n        }\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            child._findNode(dataSource, result);\n            if (result.length > 0) {\n                return;\n            }\n        }\n    }\n}\n\n// =======================================================================\n// tree\n// =======================================================================\n\nexport class Tree {\n    rootNode: Node;\n    model: SearchModel;\n\n    constructor(rootDataSource: DataSource, model: SearchModel) {\n        this.model = model;\n        this.rootNode = new Node(rootDataSource, null, this);\n    }\n\n    reset(): void {\n        this.rootNode = null;\n    }\n\n    invalidate(dataSource: DataSource): void {\n        let node = this.findNode(dataSource);\n        if (!node) {\n            this.rootNode.children = [];\n            this.rootNode.count = 0;\n            return;\n        }\n        let childNode = null;\n        while (node) {\n            node.children = childNode ? [childNode] : [];\n            node.count = null;\n            if (childNode) {\n                childNode.count = null;\n            }\n            childNode = node;\n            node = node.parent;\n        }\n    }\n\n    findNode(dataSource: DataSource): Node {\n        if (!this.rootNode) {\n            return null;\n        }\n        const result = [];\n        this.rootNode._findNode(dataSource, result);\n        return result.length > 0 ? result[0] : null;\n    }\n\n    hasChild(ds1: DataSource, ds2: DataSource): boolean {\n        if (ds2 === this.rootNode.dataSource) {\n            return false;\n        }\n        const node1 = this.findNode(ds1);\n        if (!node1) {\n            //throw 'No node for datasource ' + ds1.toString();\n            return false;\n        }\n        const node2 = this.findNode(ds2);\n        if (!node2) {\n            //throw 'No node for datasource ' + ds2.toString();\n            return false;\n        }\n        return node1.hasChild(node2);\n    }\n\n    hasSibling(ds1: DataSource, ds2: DataSource): boolean {\n        if (ds2 === this.rootNode.dataSource) {\n            return false;\n        }\n        const node1 = this.findNode(ds1);\n        if (!node1) {\n            //throw 'No node for datasource ' + ds1.toString();\n            return false;\n        }\n        const node2 = this.findNode(ds2);\n        if (!node2) {\n            //throw 'No node for datasource ' + ds2.toString();\n            return false;\n        }\n        return node1.hasSibling(node2);\n    }\n\n    removeObsoleteTreeNodes(node: Node, resultDataSources: Array<IDataSource>): void {\n        // Loop from the end because of deletion of nodes\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const childNode = node.children[i];\n            if (childNode.children.length > 0) {\n                // current node has children\n                this.removeObsoleteTreeNodes(childNode, resultDataSources);\n            }\n            // if dataSource of childNode is not included in resultDataSources -> remove it from node\n            if (resultDataSources.map((x) => x.dataSource).indexOf(childNode.dataSource) === -1) {\n                node.removeChildNode(childNode);\n            }\n        }\n    }\n\n    updateFromSearchResultSet(dataSource: DataSource, searchResultSet: SearchResultSet): void {\n        // update current tree node\n        let currentCount = 0;\n        let resultDataSources: Array<IDataSource>;\n\n        // get count from search results (from ESH search without App search result count)\n        if (searchResultSet) {\n            currentCount = searchResultSet.totalCount;\n        }\n\n        let currentNode = this.findNode(dataSource);\n        // node for dataSource already exists\n        if (currentNode) {\n            resultDataSources = this.collectDataSourcesFromResult(currentNode, searchResultSet);\n            // remove nodes if not needed for current tree\n            this.removeObsoleteTreeNodes(currentNode, resultDataSources);\n        } else {\n            // node for dataSource not found -> create new node and append temporary below root node\n            // we do not really now that this node is directly below root -> set flag unsureWhetherNodeisBelowRoot\n            // flag is evaluated later in order to correct location of node\n            currentNode = new Node(dataSource, currentCount, this);\n            resultDataSources = this.collectDataSourcesFromResult(currentNode, searchResultSet);\n            // remove nodes if not needed for current tree\n            this.removeObsoleteTreeNodes(this.rootNode, resultDataSources);\n\n            // dataSource is \"My Favorites\", node is always below \"All\"\n            if (currentNode.dataSource === this.model.favDataSource) {\n                currentNode.unsureWhetherNodeisBelowRoot = false;\n            } else {\n                currentNode.unsureWhetherNodeisBelowRoot = true;\n            }\n            if (this.isIncludedInMyFavorites(dataSource)) {\n                // dataSource is included in \"My Favorites\" -> create new node for \"My Favorites\" if not exists\n                let myFavNode = this.findNode(this.model.favDataSource);\n                if (!myFavNode) {\n                    myFavNode = new Node(this.model.favDataSource, 0, this);\n                    myFavNode.unsureWhetherNodeisBelowRoot = false;\n                    this.rootNode.insertNode(myFavNode);\n                }\n                myFavNode.insertNode(currentNode);\n            } else {\n                this.rootNode.insertNode(currentNode);\n            }\n        }\n\n        currentNode.setCount(currentCount);\n\n        // for root node: add apps count to count\n        if (dataSource === this.model.allDataSource || this.model.isUserCategory()) {\n            currentNode.setCount(currentNode.count + this.model.getProperty(\"/appCount\"));\n        } else if (dataSource === this.model.appDataSource) {\n            currentNode.setCount(this.model.getProperty(\"/appCount\"));\n        }\n\n        // update child nodes\n        this.updateTreeFromResultDataSources(currentNode, resultDataSources);\n\n        // update count for \"My Favorites\" node\n        this.updateCountMyFavorites(currentNode, resultDataSources);\n    }\n\n    updateMyFavTreeNode(currentNode: Node, resultDataSources: Array<IDataSource>): void {\n        // add node MyFavorites if dataSource = All and\n        // \"Use Personalized Search Scope\" is switched on/ My Favorites is visible\n        if (this.model.userCategoryManager && this.model.userCategoryManager.isFavActive()) {\n            if (currentNode.dataSource === this.model.allDataSource) {\n                let myFavNode = this.findNode(this.model.favDataSource);\n                if (!myFavNode) {\n                    myFavNode = new Node(\n                        this.model.favDataSource,\n                        resultDataSources\n                            .filter((x) => x.isFavDataSource)\n                            .reduce((sum, cur) => sum + cur.measureValue, 0),\n                        this\n                    );\n                    // filter all isFavDataSources from resultDataSources, from the result array sum all measureValues\n                    // 0 is start value for sum variable\n                    currentNode.unsureWhetherNodeisBelowRoot = false;\n                    currentNode.insertNode(myFavNode);\n                }\n            }\n        }\n    }\n\n    updateCountMyFavorites(currentNode: Node, resultDataSources: Array<IDataSource>): void {\n        const myFavNode = this.findNode(this.model.favDataSource);\n\n        if (myFavNode && currentNode.dataSource === this.model.allDataSource) {\n            // calculate count for All search (works only properly if no other categories exist\n            // resultDataSources must contain all dataSources for business objects (not possible with deep hierarchies)\n            myFavNode.setCount(\n                resultDataSources\n                    .filter((x) => x.isFavDataSource)\n                    .reduce((sum, cur) => sum + cur.measureValue, 0)\n            );\n            // Apps are included in \"My Favorites\" and not included in resultDataSources\n            // use case: All search with Apps in \"My Favorites\"\n            if (\n                this.isIncludedInMyFavorites(this.model.appDataSource) &&\n                resultDataSources.map((x) => x.dataSource).indexOf(this.model.appDataSource) === -1\n            ) {\n                myFavNode.setCount(myFavNode.count + this.model.getProperty(\"/appCount\"));\n            }\n        }\n    }\n\n    getFacets(currentNode: Node, searchResultSet: SearchResultSet): Array<FacetResultSet> {\n        // use facets from searchResultSet if exits\n        // else use My Favorites information from subDataSources and searchResultSet (count)\n        // for construction the needed dataSource structure for facets,\n        // only occurs if search result is from My Favorites and contains 1 business object only (facets are empty)\n        function isDataSourceResultSetItem(item: FacetResultSet): item is DataSourceResultSet {\n            return item instanceof DataSourceResultSet;\n        }\n        const treeFacets: Array<FacetResultSet> = [];\n\n        // no search results or dataSource is Apps\n        if (!searchResultSet || currentNode.dataSource === this.model.appDataSource) {\n            return treeFacets;\n        }\n\n        // special case for \"My Favorites\" with one business object with results\n        if (\n            searchResultSet.facets.length === 0 &&\n            searchResultSet.items.length > 0 &&\n            currentNode.dataSource instanceof UserCategoryDataSource\n        ) {\n            const items = [];\n            items.push(\n                this.model.sinaNext._createDataSourceResultSetItem({\n                    dataSource: currentNode.dataSource.subDataSources[0],\n                    dimensionValueFormatted: currentNode.dataSource.subDataSources[0].labelPlural,\n                    measureValue: searchResultSet.totalCount,\n                    measureValueFormatted: searchResultSet.totalCount.toString(),\n                })\n            );\n\n            const resultSet = this.model.sinaNext._createDataSourceResultSet({\n                title: this.model.query.filter.dataSource.label,\n                items: items,\n                query: this.model.query,\n                facetTotalCount: undefined,\n            });\n            treeFacets.push(resultSet);\n            return treeFacets;\n        } else if (searchResultSet.facets.length === 0) {\n            return treeFacets;\n        }\n\n        if (!isDataSourceResultSetItem(searchResultSet.facets[0])) {\n            return treeFacets;\n        }\n\n        if (searchResultSet.facets[0].type !== this.model.sinaNext.FacetType.DataSource) {\n            return treeFacets;\n        }\n        // general case\n        return searchResultSet.facets;\n    }\n\n    isIncludedInMyFavorites(dataSource: DataSource): boolean {\n        // dataSource is included in My Favorites\n        if (\n            this.model.userCategoryManager &&\n            this.model.userCategoryManager.isFavActive() &&\n            (this.model.favDataSource.subDataSources.indexOf(dataSource) > -1 ||\n                (dataSource === this.model.appDataSource && this.model.favDataSource.includeApps))\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    collectDataSourcesFromResult(currentNode: Node, searchResultSet: SearchResultSet): Array<IDataSource> {\n        function isDataSourceResultSetItem(item: FacetResultSet): item is DataSourceResultSet {\n            return item instanceof DataSourceResultSet;\n        }\n        const resultDataSources: Array<IDataSource> = [];\n\n        const resultDataSource: IDataSource = {} as IDataSource;\n\n        // Apps can only exists in All or \"My Favorites\"\n        // Apps must have results\n        if (\n            (currentNode.dataSource === this.model.allDataSource ||\n                currentNode.dataSource === this.model.favDataSource) &&\n            this.model.getProperty(\"/appCount\") > 0\n        ) {\n            resultDataSource.dataSource = this.model.appDataSource;\n            resultDataSource.isAppDataSource = true;\n\n            resultDataSource.isFavDataSource = this.model.userCategoryManager\n                ? this.model.userCategoryManager.isFavActive()\n                    ? this.model.favDataSource.includeApps\n                    : false\n                : false;\n\n            resultDataSource.measureValue = this.model.getProperty(\"/appCount\");\n            resultDataSource.measureValueFormatted = resultDataSource.measureValue.toString();\n            resultDataSource.dimensionValueFormatted = this.model.appDataSource.labelPlural;\n            // current dataSource is \"My Favorites\" and Apps is included in \"My Favorites\" or (Apps in MyFav)\n            // current dataSource is All and Apps is not included in \"My Favorites\" (Apps in All)\n            // -> add Apps to resultDataSources (not added for dataSource is All and Apps are included in MyFav)\n            if (\n                (currentNode.dataSource === this.model.favDataSource && resultDataSource.isFavDataSource) ||\n                (currentNode.dataSource === this.model.allDataSource && !resultDataSource.isFavDataSource)\n            ) {\n                resultDataSources.push(resultDataSource);\n            }\n        }\n        // Business Object\n        if (currentNode.dataSource.type === this.model.sinaNext.DataSourceType.BusinessObject) {\n            resultDataSource.dataSource = currentNode.dataSource;\n            resultDataSource.isAppDataSource = false;\n            resultDataSource.isFavDataSource = this.isIncludedInMyFavorites(currentNode.dataSource);\n            resultDataSource.measureValue = currentNode.count ? currentNode.count : 0;\n            resultDataSource.measureValueFormatted = resultDataSource.measureValue.toString();\n            resultDataSource.dimensionValueFormatted = currentNode.dataSource.labelPlural\n                ? currentNode.dataSource.labelPlural\n                : currentNode.dataSource.label;\n            resultDataSources.push(resultDataSource);\n            return resultDataSources;\n        }\n\n        // get facets from searchResultSet or from My Favorites subDataSource information\n        const facets: Array<FacetResultSet> = this.getFacets(currentNode, searchResultSet);\n\n        if (!facets || facets.length === 0 || !isDataSourceResultSetItem(facets[0])) {\n            return resultDataSources;\n        }\n\n        facets[0].items.forEach((item) =>\n            resultDataSources.push({\n                dataSource: item.dataSource,\n                isAppDataSource: false,\n                isFavDataSource: this.isIncludedInMyFavorites(item.dataSource),\n                measureValue: item.measureValue,\n                measureValueFormatted: item.measureValueFormatted,\n                dimensionValueFormatted: item.dimensionValueFormatted,\n            })\n        );\n\n        return resultDataSources;\n    }\n\n    private updateTreeFromResultDataSources(currentNode: Node, resultDataSources: Array<IDataSource>): void {\n        // dataSource is Apps or no resultDataSources\n        if (currentNode.dataSource === this.model.appDataSource || !resultDataSources) {\n            return;\n        }\n\n        // add My Favorites tree node if needed\n        this.updateMyFavTreeNode(currentNode, resultDataSources);\n        const myFavNode = this.findNode(this.model.favDataSource);\n\n        for (const resultDataSource of resultDataSources) {\n            const resultNode = this.findNode(resultDataSource.dataSource);\n            if (resultNode) {\n                if (resultNode.unsureWhetherNodeisBelowRoot) {\n                    resultNode.unsureWhetherNodeisBelowRoot = false;\n                }\n                // re-locate existing node for dataSource if neccessary\n                // currentNode is UserCategory (My Favorites) or Category and not the correct parent for the child (resultNode)\n                // -> delete the child from the wrong parent and insert to the correct node)\n                if (\n                    currentNode !== resultNode.parent &&\n                    (currentNode.dataSource.type === this.model.sinaNext.DataSourceType.Category ||\n                        currentNode.dataSource.type === this.model.sinaNext.DataSourceType.UserCategory)\n                ) {\n                    resultNode.parent.removeChildNode(resultNode);\n                    currentNode.insertNode(resultNode);\n                }\n            } else {\n                // create node for dataSource\n                const childNode = new Node(resultDataSource.dataSource, resultDataSource.measureValue, this);\n                childNode.unsureWhetherNodeisBelowRoot = false;\n                // resultDataSource is included in \"My Favorites\" and must be inserted in the \"My Favorites\" node\n                if (myFavNode && resultDataSource.isFavDataSource) {\n                    myFavNode.insertNode(childNode);\n                } else {\n                    currentNode.insertNode(childNode);\n                }\n            }\n        }\n    }\n}\n\n// =======================================================================\n// formatter\n// =======================================================================\n\nexport interface TabStrips {\n    selected: DataSource;\n    strips: Array<DataSource>;\n}\n\nexport class Formatter {\n    errorHandler: ErrorHandler;\n    tree: Tree;\n\n    constructor(rootDataSource: DataSource, model: SearchModel) {\n        this.errorHandler = ErrorHandler.getInstance();\n        this.tree = new Tree(rootDataSource, model);\n    }\n\n    format(dataSource: DataSource, searchResultSet: SearchResultSet, model: SearchModel): TabStrips {\n        this.tree.updateFromSearchResultSet(dataSource, searchResultSet);\n        const tabStrips = this.generateTabStrips(dataSource, model);\n        return tabStrips;\n    }\n\n    invalidate(dataSource: DataSource): void {\n        if (this.tree) {\n            this.tree.invalidate(dataSource);\n        }\n    }\n\n    generateTabStrips(dataSource: DataSource, model: SearchModel): TabStrips {\n        // call default tab strip generation\n        let tabStrips = this.doGenerateTabStrips(dataSource, model);\n        // modify tabstips by exit but always ensure that selected datsasource is included in the tabstrips\n        let formattedStrips;\n        try {\n            formattedStrips = model.config.tabStripsFormatter(tabStrips.strips);\n            if (formattedStrips.indexOf(tabStrips.selected) < 0) {\n                formattedStrips.splice(0, 0, tabStrips.selected); // add selected datasource\n            }\n            tabStrips.strips = formattedStrips;\n        } catch (err) {\n            const oError = new errors.ConfigurationExitError(\n                \"tabStripsFormatter\",\n                model.config.applicationComponent,\n                err\n            );\n            this.errorHandler.onError(oError);\n            // do not throw oError, use standard DS tabstrips\n            tabStrips = this.doGenerateTabStrips(dataSource, model);\n        }\n        return tabStrips;\n    }\n\n    doGenerateTabStrips(dataSource: DataSource, model: SearchModel): TabStrips {\n        /* eslint no-lonely-if:0 */\n\n        // init\n        const tabStripLimit = 9999;\n        let i: number, child: Node, children: Array<Node>;\n        const tabStrips: TabStrips = {\n            strips: [],\n            selected: null,\n        };\n        const node = this.tree.findNode(dataSource);\n\n        // 1) no node in tree -> show ALL+ current datasource (should never happen)\n        if (!node) {\n            if (dataSource !== model.allDataSource) {\n                tabStrips.strips.push(model.allDataSource);\n            }\n            tabStrips.strips.push(dataSource);\n            tabStrips.selected = dataSource;\n            return tabStrips;\n        }\n\n        // 2) node is $$ALL$$ -> show $$ALL$$ + children of $$ALL$$\n        if (node.dataSource === model.allDataSource) {\n            tabStrips.strips.push(model.allDataSource);\n            children = node.getChildrenSortedByCount();\n            for (i = 0; i < children.length && tabStrips.strips.length < tabStripLimit; ++i) {\n                child = children[i];\n                tabStrips.strips.push(child.dataSource);\n            }\n            tabStrips.selected = model.allDataSource;\n            return tabStrips;\n        }\n\n        // 3) node is direct child of $$ALL$$ -> show $$ALL$$ + children of $$ALL$$\n        if (node.parent === this.tree.rootNode && !node.unsureWhetherNodeisBelowRoot) {\n            tabStrips.strips.push(model.allDataSource);\n\n            // limit number of tabstrips but ensure that selected\n            // node is included\n            let includesNode = false;\n            children = this.tree.rootNode.getChildrenSortedByCount();\n            for (i = 0; i < children.length; ++i) {\n                child = children[i];\n                if (includesNode) {\n                    if (tabStrips.strips.length >= tabStripLimit) {\n                        break;\n                    }\n                    tabStrips.strips.push(child.dataSource);\n                } else {\n                    if (tabStrips.strips.length < tabStripLimit - 1 || node === child) {\n                        tabStrips.strips.push(child.dataSource);\n                        if (node === child) {\n                            includesNode = true;\n                        }\n                    }\n                }\n            }\n            if (children.length === 0) {\n                tabStrips.strips.push(node.dataSource);\n            }\n\n            // To be verified: move current datasource to second position\n            //                var indexOfMyDatasource = tabStrips.strips.indexOf(node.dataSource);\n            //                tabStrips.strips.splice(indexOfMyDatasource, 1);\n            //                tabStrips.strips.splice(1, 0, node.dataSource);\n\n            tabStrips.selected = node.dataSource;\n            return tabStrips;\n        }\n\n        // 4) node not direct child of $$ALL$$ or unknown whether node is direct child of $$ALL$$\n        // -> show $$ALL$$ + node\n        tabStrips.strips.push(model.allDataSource);\n        tabStrips.strips.push(node.dataSource);\n        tabStrips.selected = node.dataSource;\n        return tabStrips;\n    }\n}\n"],"mappings":"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","ignoreList":[]}