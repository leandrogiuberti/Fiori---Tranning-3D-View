{"version":3,"file":"SearchModel.js","names":["sap","ui","define","__i18n","Log","__ErrorHandler","SearchHelper","JSONModel","SearchResultFormatter","sap_esh_search_ui_SearchTabStripsFormatter","SearchResultTableFormatter","SearchFacetsFormatter","BreadcrumbsFormatter","SuggestionHandler","SearchConfiguration","PersonalizationStorage","keyValueStoreFactory","EventLogger","SearchUrlParser","cFLPUtil","UserCategoryManager","errors","RecentlyUsedStorage","___sinaNexTS_sina_SinaConfiguration","sinaFactory","__SearchResultSetItemMemory","___FolderModeUtils","MessageType","___sinaNexTS_sina_HierarchyDisplayType","__UIEvents","__SearchShellHelperHorizonTheme","merge","assert","Device","EventBus","core","___BusyIndicator","___sinaNexTS_sina_Filter","___SinaConfigurator","___UrlUtils","___suggestions_SearchSuggestionFactory","__PublicSearchModel","___personalization_PersonalizationKeys","___eventlogging_TechnicalEvents","___SelectionMode","_interopRequireDefault","obj","__esModule","default","__ui5_require_async","path","Promise","resolve","reject","require","module","endsWith","Object","defineProperty","value","err","i18n","ErrorHandler","SearchTabStripsFormatter","SearchTermExceedsLimitsError","UrlParseError","AvailableProviders","SearchResultSetItemMemory","FolderModeResultViewTypeCalculator","HierarchyDisplayType","UIEvents","SearchShellHelperHorizonTheme","BusyIndicator","Filter","SinaConfigurator","renderUrlFromParameters","createSearchSuggestionForCurrentSearch","PublicSearchModel","PersonalizationKeys","TechnicalEventType","SelectionMode","SearchModel","extend","selectKey","_selectKey","key","this","_selectedKeys","deselectKey","_deselectKey","isKeySelected","_isKeySelected","resetKeyStore","_resetKeyStore","forgetMissingSelections","_forgetMissingSelections","items","keysInResults","Set","map","i","keys","forEach","has","constructor","_constructor","settings","JSONModel.prototype.constructor.call","searchTermHandlers","logger","getLogger","JSONModel.prototype.setProperty.call","oSettings","isShowMoreDialogModel","searchModel","errorHandler","getInstance","setSearchModel","config","configuration","setExternalOnErrorHandler","onErrorHandler","publicSearchModel","modelName","defaultModelName","internalSearchModel","searchResultSetItemMemory","setSizeLimit","_suggestionHandler","model","folderModeResultViewTypeCalculator","_performanceLoggerSearchMethods","_searchApplicationsRefuseOutdatedReq","refuseOutdatedRequests","searchApplications","bind","pageSize","appTopDefault","boTopDefault","filterChanged","busyIndicator","setProperty","resetTableData","allDataSource","appDataSource","success","filterDescription","_subscribers","searchUrlParser","_userCategoryManagerPromise","_tempDataSources","tableFormatter","undefined","initAsyncPromise","oFacetFormatter","initializationStatus","initAsync","catch","getInitializationStatus","async","_getInitializationStatus","e","error","_initAsync","setBusy","dummyDataSourceForLoadingPhase","label","getText","labelPlural","enabled","id","keyValueStore","create","personalizationStorage","isUshell","setPersonalizationStorageInstance","bRecentSearches","recentlyUsedStorage","_personalizationStorage","initFacetVisibility","sinaNext","createSina","createSearchNavigationTarget","createAllAndAppDataSource","calculateIsNlqActive","isMyFavoritesAvailable","userCategoryManager","sina","loggerProperties","eventConsumers","eventLogger","calculateDefaultDataSource","provider","searchBusinessObjects","setFacetVisibility","SystemConstructionFunction","ushell","addRemoteSystem","alias","platform","baseUrl","createFilter","loadDataSources","resetDataSource","resetAllFilterConditions","query","createSearchQuery","limitAjaxRequests","setMultiSelectFacets","_tabStripFormatter","_breadcrumbsFormatter","Formatter","dataSourceTree","tree","setSearchBoxTerm","searchTerm","exclusiveDataSource","setDataSourceById","dataSource","filterRootCondition","setFilterRootCondition","onError","Container","uShellVisualizationInstantiationService","getServiceAsync","FF_enableTCodes","TransactionsHandler","push","userEventSessionStart","type","SESSION_START","getSearchBoxTerm","dataSourceKey","getDataSource","top","getTop","filter","getFilterRootCondition","logTechnicalEvent","_createSina","createAsync","trials","window","location","href","indexOf","SAMPLE","ABAP_ODATA","INAV2","DUMMY","readCFlpConfiguration","sinaConfiguration","sinaConfigurator","configure","createByTrialAsync","hasErrors","getErrors","initBusinessObjSearch","_initBusinessObjSearch","_calculateDefaultDataSource","defaultDataSource","defaultSearchScopeApps","isFavActive","getCategory","_initFacetVisibility","facets","optimizeForValueHelp","facetsVisible","getItem","searchFacetPanelButtonState","facetVisibility","warning","isBusinessObjSearchConfigured","_isBusinessObjSearchConfigured","renderers","fiori2","componentData","debug","isBusinessObjSearchEnabled","_isBusinessObjSearchEnabled","getProperty","_setProperty","sPath","oValue","oContext","bAsyncUpdate","setPropertyInternal","_setPropertyInternal","bUpdatePublicModel","notifySubscribers","ESHResultViewTypeChanged","publish","shortenSearchTermByConfigLimit","None","showSelectionToggleButton","calculateResultList","_calculateCountText","getPath","startsWith","object","getObject","searchResultSetItem","setExpanded","setPropertyFromInternalModel","_shortenSearchTermByConfigLimit","searchTermLengthLimit","length","slice","count","countAsStr","formatInteger","text","getSearchCompositeControlInstanceByChildControl","_getSearchCompositeControlInstanceByChildControl","childControlInstance","hasStyleClass","getParent","getPersonalizationStorageInstance","_getPersonalizationStorageInstance","_setPersonalizationStorageInstance","_getSearchBoxTerm","_setSearchBoxTerm","fireQuery","searchTermTrimLeft","replace","calculateSearchButtonStatus","fireSearchQuery","getLastSearchTerm","_getLastSearchTerm","getSearchTerm","_setFacetVisibility","visibility","system","phone","setItem","getFacetVisibility","_getFacetVisibility","setResultviewSelectionVisibility","_setResultviewSelectionVisibility","getResultviewSelectionVisibility","_getResultviewSelectionVisibility","_getTop","setTop","_setTop","resetTop","Error","_resetTop","isAppCategory","isUserCategory","subDataSources","getOrderBy","_getOrderBy","setOrderBy","_setOrderBy","orderBy","updateSortableAttributesSelection","resetOrderBy","_resetOrderBy","_updateSortableAttributesSelection","sortableAttributes","selected","orderById","attributeId","isEqualOrderBy","_isEqualOrderBy","modelOrderBy","queryOrderBy","queryOrderByElement","sortOrder","order","SortOrder","Ascending","Descending","_isMyFavoritesAvailable","isAvailable","userDefinedDatasourcesMulti","_calculateIsNlqActive","nlqActiveInUserSettings","nlqActive","isNlqActive","aiNlq","capabilities","nlq","_isNlqActive","getDocumentTitle","_getDocumentTitle","dataSourceLabel","title","resetQuery","_resetQuery","hasher","reset","resetConditions","setSearchTerm","resetSearchResultItemMemory","_resetSearchResultItemMemory","_createAllAndAppDataSource","getAllDataSource","_createDataSource","DataSourceType","Category","getUserCategoryManager","_getUserCategoryManager","then","_loadDataSources","dataSources","getBusinessObjectDataSources","displayedDataSources","usage","appSearch","splice","favDataSource","searchScopeWithoutAll","filterDataSources","calculatePlaceholder","_resetDataSource","setDataSource","getDefaultDataSource","isAllCategory","_isAllCategory","ds","isOtherCategory","_isOtherCategory","UserCategory","_isAppCategory","_isUserCategory","isBusinessObject","_isBusinessObject","BusinessObject","isUserCategoryAppSearchOnlyWithoutBOs","_isUserCategoryAppSearchOnlyWithoutBOs","_getDataSource","_getDefaultDataSource","_setDataSourceById","dataSourceId","_setDataSource","userEventDatasourceChange","DATASOURCE_CHANGE","dataSourceKeyOld","updateDataSourceList","notifyFilterChanged","_notifyFilterChanged","binding","checkUpdate","_getFilterRootCondition","rootCondition","_setFilterRootCondition","index","conditions","complexChildCondition","simpleGrandChildCondition","setRootCondition","addFilterCondition","_addFilterCondition","filterCondition","uiFilter","adjustFilters","attribute","autoInsertCondition","removeFilterCondition","_removeFilterCondition","autoRemoveCondition","_resetAllFilterConditions","resetFilterByFilterConditions","_resetFilterByFilterConditions","staticHierarchyFilterConditions","getStaticHierarchyFilterConditions","nonFilterByCondition","setFilter","_setFilter","hasStaticHierarchyFacetFilterConditionOnly","_hasStaticHierarchyFacetFilterConditionOnly","_getStaticHierarchyFilterConditions","getAttributes","attributeMetadata","attributeMetadataMap","isHierarchy","hierarchyDisplayType","StaticHierarchyFacet","getAttributeConditions","doSuggestion","_doSuggestion","clone","abortSuggestions","_abortSuggestions","_fireSearchQuery","deserializationIn","doFireSearchQuery","_doFireSearchQuery","deserialization","equals","getCalculateFacetsFlag","calculateFacets","setNlq","oldFilter","newFilter","handleDataSourceChanged","invalidate","reloadOnUrlChange","resetResultSet","setSortOrder","assembleSortOrder","setCalculateFacets","ESHSearchStarted","updateSearchURLSilently","logSearchRequestAdvanced","method","performanceLogger","getUniqueId","enterMethod","name","isSearch","comments","all","normalSearch","calculateResultViewSwitchVisibility","format","resultSet","formatNodePaths","formatHierarchyAttribute","hierarchyNodePaths","isFolderMode","searchSuggestion","addItem","getFacets","leaveMethod","onErrorAsync","change","Date","now","facet","handleModelUpdate","finally","overwriteBrowserTitle","document","ESHSearchFinished","updateMultiSelectionSelected","ensureOneTimeDisplayForErrorMessages","_ensureOneTimeDisplayForErrorMessages","shownToUser","_assembleSortOrder","_getCalculateFacetsFlag","_appSearch","includeApps","oResult","totalResults","getElements","_searchApplications","skip","service","queryApplications","_normalSearch","getResultSetAsync","showMinorErrorsAsWarnings","dataSourceOfPreviousSearch","nlqResult","_afterSearchPrepareResultList","searchResultSet","formatter","newResults","formatSortAttributes","setTableData","restoreResultSetItemExpansion","newResult","dataSourcesHints","isDocumentConnector","loadCustomModulesProm","loadCustomModulesForDataSourcesAsync","thisPromise","params","setSearchInLabelIconBindings","oError","ConfigurationExitError","applicationComponent","item","totalCount","enableOrDisableMultiSelection","_restoreResultSetItemExpansion","expanded","getExpanded","_enableOrDisableMultiSelection","MultipleItems","includes","resultviewSelectionMode","enableMultiSelectionResultItems","dataSourceConfig","getDataSourceConfig","selectionHandler","searchResultListSelectionHandlerControl","isMultiSelectionAvailable","_updateMultiSelectionSelected","results","getResultViewType","multiSelectionObjects","ESHSelectionChanged","_calculatePlaceholder","bPlaceHolderFixedValue","getSearchInputPlaceholderLabel","_updateDataSourceList","newDataSource","removeTempDataSources","unshift","_removeTempDataSources","tempDataSource","tempDataSources","internalError","ProgramError","invalidateQuery","_invalidateQuery","_logSearchRequestAdvanced","event","SEARCH_REQUEST","SEARCH_WITH_SEARCHTERM_FILTERS","SEARCH_WITH_FILTERS","SEARCH_WITHOUT_SEARCHTERM_FILTERS","SEARCH_WITH_SEARCHTERM","autoStartApp","_autoStartApp","aApps","url","tooltip","toLowerCase","trim","open","isHomogenousResult","_isHomogenousResult","getResultViewTypes","_getResultViewTypes","setResultViewTypes","_setResultViewTypes","types","_getResultViewType","setResultViewType","_setResultViewType","resultViewTypeForAllAndCategorySearch","resultViewTypeForBusinessObjectSearch","_calculateResultViewSwitchVisibility","validateResultViewSettings","resultViewTypes","resultViewType","activeTypes","activeType","fallbackResultViewType","calculate","_validateResultViewSettings","validateConfig","typeSuperset","errorBegin","errorEnding","Array","isArray","uniqueList","elem","toString","isSubsetOf","_calculateSearchButtonStatus","isSearchFieldExpandedByDefault","_calculateResultList","boResults","tiles","tilesItem","pushUIMessage","_pushUIMessage","finalErrors","removeAdjacentDuplicateMessages","_removeAdjacentDuplicateMessages","previousError","description","_updateSearchURLSilently","updateUrl","sHash","createSearchNavigationTargetCurrentState","targetUrl","setHash","parseURL","_parseURL","parse","subscribe","_subscribe","eventId","callback","listener","assertInternalEvents","unsubscribe","_unsubscribe","subscriber","_assertInternalEvents","callStack","stack","_notifySubscribers","apply","_createSearchNavigationTarget","parameter","searchNavigationTargetParameters","encodeFilter","createNavigationTarget","target","targetFunction","targetFunctionCustomData","_createSearchNavigationTargetCurrentState","options","parseSearchNavigationTarget","_parseSearchNavigationTarget","searchNavigationTarget","searchQueryParameters","urlParameters","parseUrlParameters","isEmptyObject","parseSearchUrlParameters","parseInt","orderby","sortorder","filterJson","JSON","parseFilterFromJson","getTableColumns","_getTableColumns","isStorage","fetchTableColumns","_fetchTableColumns","storageId","searchResultTableState","persoState","isTablePersoStateValid","aColumns","_isTablePersoStateValid","_persoSchemaVersion","column","p13NColumnName","setTableColumns","_setTableColumns","columns","saveTableColumns","_saveTableColumns","getTableInitialColumns","_getTableInitialColumns","formatInitialColumns","_setTableData","formattedResults","formatColumns","rows","formatRows","cells","_resetTableData","_searchModels","getModelSingleton","modelId"],"sources":["SearchModel.ts"],"sourcesContent":["/*!\n * SAPUI5\n * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.\n * \n */\nimport i18n from \"./i18n\";\nimport Log from \"sap/base/Log\";\nimport ErrorHandler, { IUIMessage } from \"./error/ErrorHandler\";\nimport * as SearchHelper from \"sap/esh/search/ui/SearchHelper\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport SearchResultFormatter, { FormattedResultItem } from \"sap/esh/search/ui/SearchResultFormatter\";\nimport {\n    Formatter as SearchTabStripsFormatter,\n    Tree as SearchTabStripsTree,\n} from \"sap/esh/search/ui/SearchTabStripsFormatter\";\nimport { SortAttribute } from \"sap/esh/search/ui/SearchResultBaseFormatter\";\nimport SearchResultTableFormatter, { Column } from \"sap/esh/search/ui/SearchResultTableFormatter\";\nimport SearchFacetsFormatter from \"sap/esh/search/ui/SearchFacetsFormatter\";\nimport * as BreadcrumbsFormatter from \"sap/esh/search/ui/BreadcrumbsFormatter\";\nimport SuggestionHandler from \"sap/esh/search/ui/suggestions/SuggestionHandler\";\nimport SearchConfiguration from \"sap/esh/search/ui/SearchConfiguration\";\nimport PersonalizationStorage from \"sap/esh/search/ui/personalization/PersonalizationStorage\";\nimport keyValueStoreFactory from \"sap/esh/search/ui/personalization/keyValueStoreFactory\";\nimport EventLogger from \"sap/esh/search/ui/eventlogging/EventLogger\";\nimport SearchUrlParser from \"sap/esh/search/ui/SearchUrlParser\";\nimport * as cFLPUtil from \"sap/esh/search/ui/cFLPUtil\";\nimport UserCategoryManager from \"sap/esh/search/ui/usercategories/UserCategoryManager\";\nimport errors, { SearchTermExceedsLimitsError, UrlParseError } from \"sap/esh/search/ui/error/errors\";\nimport RecentlyUsedStorage from \"sap/esh/search/ui/RecentlyUsedStorage\";\nimport { DataSource } from \"./sinaNexTS/sina/DataSource\";\nimport { SearchResultSet } from \"./sinaNexTS/sina/SearchResultSet\";\nimport { Sina } from \"./sinaNexTS/sina/Sina\";\nimport { SearchQuery } from \"./sinaNexTS/sina/SearchQuery\";\nimport { ComplexCondition } from \"./sinaNexTS/sina/ComplexCondition\";\nimport { QuerySortOrder } from \"./sinaNexTS/sina/Query\";\nimport { SearchFocusHandler } from \"sap/esh/search/ui/SearchHelper\";\nimport { ISearchTermHandler } from \"./searchtermhandler/ISearchTermHandler\";\nimport Context from \"sap/ui/model/Context\";\nimport { AvailableProviders, SinaConfiguration } from \"./sinaNexTS/sina/SinaConfiguration\";\nimport * as sinaFactory from \"./sinaNexTS/sina/sinaFactory\";\nimport SearchResultSetItemMemory from \"./SearchResultItemMemory\";\nimport { FolderModeResultViewTypeCalculator } from \"./FolderModeUtils\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport { HierarchyDisplayType } from \"./sinaNexTS/sina/HierarchyDisplayType\";\nimport { Condition } from \"./sinaNexTS/sina/Condition\";\nimport UIEvents from \"./UIEvents\";\nimport SearchShellHelperHorizonTheme from \"./SearchShellHelperHorizonTheme\";\nimport SearchConfigurationSettings from \"./SearchConfigurationSettings\";\nimport { PersoState } from \"./SearchResultTableP13NPersonalizer\";\nimport merge from \"sap/base/util/merge\";\nimport assert from \"sap/base/assert\";\nimport Device from \"sap/ui/Device\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport * as core from \"./sinaNexTS/core/core\";\n\ninterface EventSubscriber {\n    eventId: string;\n    callback: (eventId: string) => void;\n    listener: unknown;\n}\nimport { UserCategoryDataSource } from \"./sinaNexTS/sina/UserCategoryDataSource\";\nimport { OrderBy, SearchNavigationTargetParameters, SearchQueryParameters } from \"./SearchModelTypes\";\nimport SearchCompositeControl from \"./SearchCompositeControl\";\nimport Control from \"sap/ui/core/Control\";\nimport { BusyIndicator } from \"./BusyIndicator\";\nimport { Filter } from \"./sinaNexTS/sina/Filter\";\nimport type Container from \"sap/ushell/Container\";\nimport System from \"sap/ushell/System\";\nimport { NavigationTarget } from \"./sinaNexTS/sina/NavigationTarget\";\nimport { SinaConfigurator } from \"./SinaConfigurator\";\nimport { renderUrlFromParameters } from \"./UrlUtils\";\nimport { createSearchSuggestionForCurrentSearch } from \"./suggestions/SearchSuggestionFactory\";\nimport PublicSearchModel from \"./PublicSearchModel\";\nimport { PersonalizationKeys } from \"./personalization/PersonalizationKeys\";\nimport { SortOrder } from \"./sinaNexTS/sina/SortOrder\";\nimport { FLPAppSuggestion } from \"./suggestions/AppSuggestionProvider\";\nimport {\n    DataSourceChangeEvent,\n    SearchRequestEvent,\n    SessionStartEvent,\n    TechnicalEventType,\n} from \"./eventlogging/TechnicalEvents\";\nimport { SelectionMode } from \"./SelectionMode\";\n\nexport interface $SearchModelSettings {\n    configuration: Partial<SearchConfigurationSettings> | SearchConfiguration;\n    searchModel: SearchModel;\n}\n\n/**\n * @namespace sap.esh.search.ui\n */\nexport default class SearchModel extends JSONModel {\n    config: SearchConfiguration;\n    sinaNext?: Sina;\n    publicSearchModel: PublicSearchModel;\n    pageSize: number;\n    boTopDefault: number;\n    appTopDefault: number;\n    allDataSource: DataSource;\n    appDataSource: DataSource;\n    favDataSource: UserCategoryDataSource;\n    oFacetFormatter: SearchFacetsFormatter;\n    searchUrlParser: SearchUrlParser;\n    uShellVisualizationInstantiationService: any;\n    dataSourceTree: SearchTabStripsTree;\n    query: SearchQuery;\n    focusHandler: SearchFocusHandler;\n    recentlyUsedStorage: RecentlyUsedStorage;\n    eventLogger: EventLogger;\n    filterChanged: boolean;\n    userCategoryManager: UserCategoryManager;\n\n    public searchTermHandlers: Array<ISearchTermHandler> = [];\n    public errorHandler: ErrorHandler;\n    private _suggestionHandler: SuggestionHandler;\n    private _performanceLoggerSearchMethods: Array<string>;\n    private _subscribers: Array<EventSubscriber>;\n    private _initBusinessObjSearchProm: Promise<void>;\n    private _personalizationStorage: PersonalizationStorage;\n    private _userCategoryManagerPromise: Promise<UserCategoryManager>;\n    private _tabStripFormatter: SearchTabStripsFormatter;\n    private _breadcrumbsFormatter: BreadcrumbsFormatter.Formatter;\n    private resultSet: SearchResultSet;\n    private _tempDataSources: Array<DataSource>;\n    public tableFormatter: SearchResultTableFormatter;\n    private _searchApplicationsRefuseOutdatedReq: typeof this.searchApplications;\n    private static _searchModels: { [key: string]: SearchModel } = {};\n    private initAsyncPromise: Promise<void>;\n    private logger = Log.getLogger(\"sap.esh.search.ui.SearchModel\");\n    private searchResultSetItemMemory: SearchResultSetItemMemory;\n    private folderModeResultViewTypeCalculator: FolderModeResultViewTypeCalculator;\n    public busyIndicator: BusyIndicator;\n    public dataSourceOfPreviousSearch: DataSource;\n    private initializationStatus: Promise<void>;\n    private _selectedKeys: { [key: string]: boolean } = {};\n\n    private selectKey(key: string): void {\n        this._selectedKeys[key] = true;\n    }\n\n    private deselectKey(key: string): void {\n        delete this._selectedKeys[key];\n    }\n\n    private isKeySelected(key: string): boolean {\n        return !!this._selectedKeys[key];\n    }\n\n    public resetKeyStore(): void {\n        this._selectedKeys = {};\n    }\n\n    private forgetMissingSelections(items: Array<FormattedResultItem>): void {\n        const keysInResults = new Set(items.map((i) => i.key));\n        // Remove any remembered selection whose key is not in the current results\n        Object.keys(this._selectedKeys).forEach((key) => {\n            if (!keysInResults.has(key)) {\n                delete this._selectedKeys[key];\n            }\n        });\n    }\n\n    public static getModelSingleton(configuration: Partial<SearchConfigurationSettings>, id: string) {\n        const modelId = id || \"default\";\n        if (!SearchModel._searchModels[modelId]) {\n            configuration.isUshell = modelId === \"flp\" ? true : false;\n            SearchModel._searchModels[modelId] = new SearchModel({\n                configuration: configuration,\n            });\n        }\n        return SearchModel._searchModels[modelId];\n    }\n\n    constructor(settings: Partial<$SearchModelSettings>) {\n        super([]);\n\n        super.setProperty(\"/errors\", []);\n        const oSettings = settings || {};\n        const isShowMoreDialogModel = !!oSettings.searchModel; // show more dialog creates own search model instance\n\n        // pass searchmodel to error handler\n        this.errorHandler = ErrorHandler.getInstance();\n        if (!isShowMoreDialogModel) {\n            this.errorHandler.setSearchModel(this);\n        }\n\n        // get search configuration\n        this.config = new SearchConfiguration(oSettings?.configuration);\n\n        // pass custom error handler to error handler\n        if (!isShowMoreDialogModel) {\n            this.errorHandler.setExternalOnErrorHandler(this.config.onErrorHandler);\n        }\n\n        // public search model\n        this.publicSearchModel = new PublicSearchModel({\n            modelName: PublicSearchModel.defaultModelName,\n            internalSearchModel: this,\n        });\n        // memory for result set items storing for instance expansion state of item\n        this.searchResultSetItemMemory = new SearchResultSetItemMemory();\n\n        // set size limit in order to allow drop down list boxes with more than 100 entries\n        this.setSizeLimit(1000);\n\n        // create suggestions handler\n        this._suggestionHandler = new SuggestionHandler({\n            model: this,\n        });\n\n        // result view type calculator for folder mode\n        this.folderModeResultViewTypeCalculator = new FolderModeResultViewTypeCalculator(this);\n\n        this._performanceLoggerSearchMethods = []; // performance logging: Remember all method names of (open) search calls (only needed if search calls are running in parallel)\n\n        // decorate search methods (decorator prevents request overtaking)\n        this._searchApplicationsRefuseOutdatedReq = SearchHelper.refuseOutdatedRequests(\n            this.searchApplications.bind(this),\n            \"search\"\n        ); // app search\n\n        // initial values for boTop and appTop\n        this.pageSize = this.config.pageSize || 10;\n        this.appTopDefault = 20;\n        this.boTopDefault = this.pageSize;\n\n        this.filterChanged = false;\n\n        // init busy indicator\n        this.busyIndicator = new BusyIndicator(this);\n\n        // init the properties\n        // TODO: always use main result list (also for pure app results)\n\n        this.setProperty(\"/isQueryInvalidated\", true); // force request if query did not change\n        this.setProperty(\"/busyDelay\", 0); // delay before showing busy indicator, initalize with 0 for intial app loading\n        this.setProperty(\"/sortableAttributes\", []); // sort items of result\n        this.setProperty(\"/results\", []); // combined result list: apps + BOs\n        this.setProperty(\"/appResults\", []); // applications result list\n        this.setProperty(\"/boResults\", []); // business object result list\n        this.resetTableData();\n        this.setProperty(\"/breadcrumbsHierarchyNodePaths\", []);\n        this.setProperty(\"/breadcrumbsHierarchyAttribute\", \"\");\n        this.setProperty(\"/hierarchyNodePaths\", []);\n        this.setProperty(\"/isFolderMode\", false);\n        this.setProperty(\"/origBoResults\", []); // business object result list\n        this.setProperty(\"/count\", 0);\n        this.setProperty(\"/countText\", \"\");\n        this.setProperty(\"/boCount\", 0);\n        this.setProperty(\"/appCount\", 0);\n        this.setProperty(\"/facets\", []);\n        this.setProperty(\"/dataSources\", [this.allDataSource, this.appDataSource]);\n        this.setProperty(\"/appSearchDataSource\", null);\n        this.setProperty(\"/currentPersoServiceProvider\", null); // current persoServiceProvider of table\n        this.setProperty(\"/businessObjSearchEnabled\", true);\n        this.setProperty(\"/initializingObjSearch\", false);\n        this.setProperty(\"/suggestions\", []);\n        this.setProperty(\"/resultViewTypes\", []); // selectable result view types\n        this.setProperty(\"/resultViewType\", \"\"); // active result view type, default value set in calculateResultViewSwitchVisibility() in initBusinessObjSearch\n        this.setProperty(\"/resultViewSwitchVisibility\", false); // visibility of display switch tap strip\n        this.setProperty(\"/resultviewSelectionVisibility\", false); // visibility of selection (checkboxes)\n        this.setProperty(\"/documentTitle\", \"Search\");\n        this.setProperty(\"/top\", this.boTopDefault);\n        this.setProperty(\"/orderBy\", {});\n        this.setProperty(\"/facetVisibility\", false); // visibility of facet panel\n        this.setProperty(\"/focusIndex\", 0);\n        this.setProperty(\"/isErrorPopovered\", false);\n        this.setProperty(\"/nlqExplanation\", {});\n        this.setProperty(\"/nlqResult\", { success: false, filterDescription: \"\" });\n        this.setProperty(\"/firstSearchWasExecuted\", false);\n\n        this.setProperty(\"/multiSelectionAvailable\", false); //\n        this.setProperty(\"/multiSelectionEnabled\", false); //\n        this.setProperty(\"/multiSelection/actions\", []); //\n        this.setProperty(\"/multiSelectionSelected\", false);\n        this.setProperty(\"/multiSelectionObjects\", []);\n        this.setProperty(\"/singleSelectionSelected\", false);\n\n        this.setProperty(\"/inputHelpSelectedItems\", null);\n        this.setProperty(\"/inputHelp\", null);\n        this.setProperty(\"/config\", this.config);\n\n        this.setProperty(\"/searchInLabel\", \"\");\n        this.setProperty(\"/searchInIcon\", \"sap-icon://none\"); // prevent assert: Property 'src' (value: '') should be a valid Icon ...'\n\n        this.setProperty(\"/searchButtonStatus\", \"Search\");\n        this.setProperty(\"/isNlqActive\", false);\n\n        this._subscribers = [];\n\n        this.searchUrlParser = new SearchUrlParser({\n            model: this,\n        });\n        this._userCategoryManagerPromise = null;\n\n        this._tempDataSources = [];\n\n        this.tableFormatter = undefined;\n\n        // used for SearchFacetDialogModel: SearchFacetDialogModel is constructed with reference to original searchModel\n        // the _initBusinessObjSearchProm is reused from original searchModel in order to avoid double initialization\n        // in initBusinessObjSearch\n        if (oSettings?.searchModel?.initAsyncPromise) {\n            this.initAsyncPromise = oSettings.searchModel.initAsyncPromise;\n            this.oFacetFormatter = new SearchFacetsFormatter(this);\n        }\n\n        // Rest of the initialization is done asynchronously:\n        this.initializationStatus = this.initAsync();\n        this.initAsyncPromise = this.initializationStatus.catch(() => {\n            // ignore the error, it has already been written to browser console\n            // and staged in this.initializationStatus which can be queried by this.getInitializationStatus()\n            // we cannot use \"return Promise.reject(error) here, as we are in a constructor\"\n        });\n    }\n\n    // Get the status of initialization. In unsuccessful case, the corresponding error instance is returned either for error handling.\n    // published further in SearchCompositeControl as a public API\n    public async getInitializationStatus(): Promise<{\n        success: boolean;\n        error?: Error;\n    }> {\n        try {\n            await this.initializationStatus;\n            return { success: true };\n        } catch (e) {\n            return { success: false, error: e };\n        }\n    }\n    // ################################################################################\n    // Initialization:\n    // ################################################################################\n\n    async initAsync(): Promise<void> {\n        // check cached promise\n        if (this.initAsyncPromise) {\n            return this.initAsyncPromise;\n        }\n\n        // set dummy datasource indicating the loading phase\n        this.setProperty(\"/initializingObjSearch\", true);\n        this.busyIndicator.setBusy(true);\n        const dummyDataSourceForLoadingPhase = {\n            label: i18n.getText(\"genericLoading\"),\n            labelPlural: i18n.getText(\"genericLoading\"),\n            enabled: false,\n            id: \"$$Loading$$\",\n        };\n        this.setProperty(\"/dataSource\", dummyDataSourceForLoadingPhase);\n        this.setProperty(\"/dataSources\", [dummyDataSourceForLoadingPhase]);\n\n        try {\n            const keyValueStore = await keyValueStoreFactory.create(\n                this.config.personalizationStorage,\n                this.config.isUshell,\n                this.config.id\n            );\n            this.setPersonalizationStorageInstance(new PersonalizationStorage(keyValueStore, this));\n            if (this.config.bRecentSearches) {\n                this.recentlyUsedStorage = new RecentlyUsedStorage({\n                    personalizationStorage: this._personalizationStorage,\n                    searchModel: this,\n                });\n            }\n            this.initFacetVisibility();\n\n            // sina and datasources:\n            this.sinaNext = await this.createSina();\n\n            this.sinaNext.createSearchNavigationTarget = this.createSearchNavigationTarget.bind(this);\n            this.createAllAndAppDataSource();\n            this.calculateIsNlqActive();\n            // my favorites:\n            if (this.isMyFavoritesAvailable()) {\n                this.userCategoryManager = await UserCategoryManager.create({\n                    sina: this.sinaNext,\n                    personalizationStorage: this._personalizationStorage,\n                });\n            }\n\n            // usage tracking:\n            const loggerProperties = {\n                sinaNext: this.sinaNext,\n                searchModel: this,\n                eventConsumers: this.config.eventConsumers,\n            };\n            this.eventLogger = new EventLogger(loggerProperties);\n            await this.eventLogger.initAsync();\n\n            // set default DataSource\n            this.setProperty(\"/defaultDataSource\", this.calculateDefaultDataSource());\n\n            if (this.sinaNext.provider.id === \"dummy\") {\n                this.setProperty(\"/defaultDataSource\", this.appDataSource);\n                this.setProperty(\"/businessObjSearchEnabled\", false);\n                this.config.searchBusinessObjects = false;\n                this.setFacetVisibility(false, false);\n            }\n            if (this.sinaNext.provider.id === \"inav2\" && this.config.isUshell) {\n                // register enterprise search system\n                // this triggers a logoff request to the enteprise search backend in case of logoff from flp\n                // (this is not necessary for abap_odata because frontendserver system is registered by flp)\n                // load ushell deps lazy only in case of FLP\n                sap.ui.require([\"sap/ushell/System\"], (SystemConstructionFunction: typeof System) => {\n                    (sap.ushell[\"Container\"] as Container).addRemoteSystem(\n                        new SystemConstructionFunction({\n                            alias: \"ENTERPRISE_SEARCH\",\n                            platform: \"abap\",\n                            baseUrl: \"/ENTERPRISE_SEARCH\",\n                        })\n                    );\n                });\n            }\n            this.setProperty(\"/uiFilter\", this.sinaNext.createFilter());\n            this.loadDataSources();\n            this.resetDataSource(false);\n            this.resetAllFilterConditions(false);\n            this.query = this.sinaNext.createSearchQuery({\n                limitAjaxRequests: this.config.limitAjaxRequests,\n            });\n            this.query.setMultiSelectFacets(true);\n            this.oFacetFormatter = new SearchFacetsFormatter(this);\n            this._tabStripFormatter = new SearchTabStripsFormatter(this.allDataSource, this);\n            this._breadcrumbsFormatter = new BreadcrumbsFormatter.Formatter(this);\n            this.dataSourceTree = this._tabStripFormatter.tree;\n            // set by the API of SearchCompositeControl\n            this.setSearchBoxTerm(this.config.searchTerm, false);\n            if (this.config.exclusiveDataSource) {\n                this.setDataSourceById(this.config.exclusiveDataSource, false, false);\n            } else if (this.config.dataSource) {\n                this.setDataSourceById(this.config.dataSource, false, false);\n            }\n            if (this.config.filterRootCondition) {\n                this.setFilterRootCondition(this.config.filterRootCondition, false);\n            }\n\n            this.setProperty(\"/initializingObjSearch\", false);\n            this.busyIndicator.setBusy(false);\n\n            try {\n                await this.config.initAsync(this);\n            } catch (e) {\n                this.errorHandler.onError(e);\n            }\n\n            if (this.config.isUshell) {\n                const { default: Container } = await import(\"sap/ushell/Container\");\n                this.uShellVisualizationInstantiationService = await Container.getServiceAsync(\n                    \"VisualizationInstantiation\"\n                );\n            }\n            if (this.config.isUshell && this.config.FF_enableTCodes) {\n                // handle tcodes in search input only in ushell and if FF_enableTCodes is true:\n                const { default: TransactionsHandler } = await import(\n                    \"sap/esh/search/ui/searchtermhandler/TransactionsHandler\"\n                );\n                this.searchTermHandlers.push(new TransactionsHandler(this));\n            }\n        } catch (error: unknown) {\n            this.errorHandler.onError(<Error>error);\n            return Promise.reject(error);\n        } finally {\n            this.busyIndicator.setBusy(false);\n        }\n        const userEventSessionStart: SessionStartEvent = {\n            type: TechnicalEventType.SESSION_START,\n            searchTerm: this.getSearchBoxTerm(),\n            dataSourceKey: this.getDataSource().id,\n            top: this.getTop(),\n            filter: this.getFilterRootCondition() + \"\",\n        };\n        this.eventLogger.logTechnicalEvent(userEventSessionStart);\n        return Promise.resolve();\n    }\n\n    private async createSina(): Promise<Sina> {\n        // no enterprise search configured -> return dummy sina\n        if (!this.config.searchBusinessObjects) {\n            return sinaFactory.createAsync(\"dummy\");\n        }\n        // use url parameter\n        // sinaConfiguration={\"provider\":\"multi\",\"subProviders\":[\"abap_odata\",\"inav2\",\"sample\"],\"federationType\":\"round_robin\"}\n        // to active the multi provider\n        let trials: Array<SinaConfiguration | AvailableProviders> = [];\n        if (window.location.href.indexOf(\"demo/FioriLaunchpad.\") !== -1) {\n            trials = [AvailableProviders.SAMPLE];\n        } else {\n            trials = [\n                // {provider: 'multi', subProviders: ['abap_odata', 'inav2', 'sample'], federationType: 'round_robin'},\n                // {provider: \"multi\", subProviders: [{ provider: \"abap_odata\", label: \"a1\", url: \"/unvalid\" }, { provider: \"abap_odata\", label: \"a2\", url: \"/unvalid\" }]},\n                AvailableProviders.ABAP_ODATA,\n                AvailableProviders.INAV2,\n                AvailableProviders.DUMMY,\n            ];\n        }\n\n        // cFlp\n        trials = await cFLPUtil.readCFlpConfiguration(trials);\n\n        // sina configuration from flp overwrites\n        if (this.config.sinaConfiguration) {\n            trials = [this.config.sinaConfiguration];\n        }\n\n        // enhance sina configuration by logging, tracking, ...\n        const sinaConfigurator = new SinaConfigurator(this);\n        trials = sinaConfigurator.configure(trials);\n\n        // try to create a sina by trying providers, first succesful provider wins\n        const sina = await sinaFactory.createByTrialAsync(trials);\n        if (sina.hasErrors()) {\n            sina.getErrors().forEach((error) => this.errorHandler.onError(error));\n        }\n        return sina;\n    }\n\n    /**\n     *\n     * @deprecated use initAsync() instead\n     */\n    async initBusinessObjSearch(): Promise<void> {\n        return this.initAsync();\n    }\n\n    calculateDefaultDataSource(): DataSource {\n        let defaultDataSource = this.allDataSource;\n\n        if (this.config.defaultSearchScopeApps) {\n            // according config parameter, Apps as default\n            defaultDataSource = this.appDataSource;\n        }\n        if (this.config.defaultDataSource) {\n            // according config parameter, default dataSource id\n            defaultDataSource = this.sinaNext.getDataSource(this.config.defaultDataSource);\n        }\n        if (this.config.exclusiveDataSource) {\n            // according config parameter, exclusive dataSource id (the one and only DS used for this Search.Comp. control instance)\n            defaultDataSource = this.sinaNext.getDataSource(this.config.exclusiveDataSource);\n        }\n        if (this.userCategoryManager && this.userCategoryManager.isFavActive()) {\n            // set user definded dataSource as default\n            defaultDataSource = this.userCategoryManager.getCategory(\"MyFavorites\");\n        }\n        return defaultDataSource;\n    }\n\n    initFacetVisibility(): void {\n        // If facet functionality is turned off or \"optimizeForValueHelp\" is enabled, hide immediately.\n        if (!this.config.facets || this.config.optimizeForValueHelp) {\n            this.setFacetVisibility(false, false);\n            return;\n        }\n\n        // Otherwise, fall back to personalization\n        let facetsVisible: boolean;\n        try {\n            facetsVisible =\n                (this._personalizationStorage.getItem(\n                    PersonalizationKeys.searchFacetPanelButtonState\n                ) as boolean) ??\n                this.config.facetVisibility ??\n                false;\n        } catch (e) {\n            this.logger.warning(\"Error reading facet visibility from personalization storage\", e);\n        }\n        this.setFacetVisibility(facetsVisible, false);\n    }\n\n    // ################################################################################\n    // Get the state of things:\n    // ################################################################################\n    isBusinessObjSearchConfigured(): boolean {\n        try {\n            const config = window[\"sap-ushell-config\"].renderers.fiori2.componentData.config;\n            return config.searchBusinessObjects !== \"hidden\";\n        } catch (e) {\n            this.logger.debug(\"Error reading searchBusinessObjects from ushell config\", e);\n            return true;\n        }\n    }\n\n    isBusinessObjSearchEnabled(): boolean {\n        // TODO: how does this differ from isBusinessObjSearchConfigured() above?\n        return this.getProperty(\"/businessObjSearchEnabled\");\n    }\n\n    // ################################################################################\n    // Getter/Setter:\n    // ################################################################################\n    setProperty(sPath: string, oValue: unknown, oContext?: Context, bAsyncUpdate?: boolean): boolean {\n        return this.setPropertyInternal(sPath, oValue, oContext, bAsyncUpdate, true);\n    }\n\n    setPropertyInternal(\n        sPath: string,\n        oValue: unknown,\n        oContext?: Context,\n        bAsyncUpdate?: boolean,\n        bUpdatePublicModel = true\n    ): boolean {\n        try {\n            if (sPath === \"/resultViewType\") {\n                // run before updating '/resultViewType'\n                if (\n                    this.getProperty(\"/resultViewType\") !== \"\" &&\n                    oValue !== \"\" &&\n                    this.getProperty(\"/resultViewType\") !== oValue\n                ) {\n                    // notify subscribers\n                    this.notifySubscribers(UIEvents.ESHResultViewTypeChanged);\n                    EventBus.getInstance().publish(UIEvents.ESHResultViewTypeChanged);\n                }\n            }\n\n            if (sPath === \"/uiFilter/searchTerm\") {\n                oValue = this.shortenSearchTermByConfigLimit(oValue as string);\n            }\n\n            if (sPath === \"/resultviewSelectionVisibility\") {\n                if (\n                    oValue === false &&\n                    this.getProperty(\"/config/resultviewSelectionMode\") !== SelectionMode.None &&\n                    this.config.showSelectionToggleButton === false\n                ) {\n                    oValue = true;\n                }\n            }\n\n            let success = super.setProperty(sPath, oValue, oContext, bAsyncUpdate);\n            switch (sPath) {\n                case \"/boResults\":\n                case \"/appResults\":\n                    this.calculateResultList();\n                    break;\n                case \"/appCount\":\n                case \"/boCount\":\n                    success = this.setProperty(\n                        \"/count\",\n                        this.getProperty(\"/appCount\") + this.getProperty(\"/boCount\")\n                    );\n                    break;\n                case \"/count\":\n                    success = this.setProperty(\"/countText\", this._calculateCountText());\n                    break;\n                case \"expanded\":\n                    if (oContext && oContext.getPath().startsWith(\"/results/\")) {\n                        const object = oContext.getObject();\n                        if (\"key\" in object && object.key && typeof oValue === \"boolean\") {\n                            const searchResultSetItem = object as FormattedResultItem;\n                            this.searchResultSetItemMemory.setExpanded(searchResultSetItem.key, oValue);\n                        }\n                    }\n                    break;\n            }\n            if (bUpdatePublicModel) {\n                // update public search model (see PublicSearchModel), non public properties are skipped (w/o error/warning)\n                this.publicSearchModel?.setPropertyFromInternalModel(\n                    this,\n                    sPath,\n                    oValue,\n                    oContext,\n                    bAsyncUpdate\n                );\n            }\n            return success;\n        } catch (error) {\n            this.errorHandler.onError(error);\n        }\n    }\n\n    private shortenSearchTermByConfigLimit(searchTerm: string): string {\n        const searchTermLengthLimit = this.config.searchTermLengthLimit;\n        if (searchTermLengthLimit < 0) {\n            return searchTerm;\n        }\n        if (searchTerm.length > searchTermLengthLimit) {\n            this.errorHandler.onError(new SearchTermExceedsLimitsError(searchTermLengthLimit));\n            searchTerm = searchTerm.slice(0, searchTermLengthLimit);\n        }\n        return searchTerm;\n    }\n\n    private _calculateCountText() {\n        const count = this.getProperty(\"/count\");\n\n        if (typeof count !== \"number\") {\n            return \"\"; // robustness\n        }\n\n        const countAsStr = SearchHelper.formatInteger(count);\n\n        // DSP exit\n        if (this.getProperty(\"/searchInLabel\")) {\n            return (this.getProperty(\"/searchInLabel\") || i18n.getText(\"results\")) + \" (\" + countAsStr + \")\";\n        }\n\n        const text = i18n.getText(\"results\") + \" (\" + countAsStr + \")\"; // ToDo: RTL\n        return text;\n    }\n\n    public getSearchCompositeControlInstanceByChildControl(\n        childControlInstance: Control\n    ): SearchCompositeControl {\n        if (\n            typeof childControlInstance?.hasStyleClass === \"function\" &&\n            childControlInstance.hasStyleClass(\"sapUshellSearchInputHelpPage\")\n        ) {\n            return childControlInstance as SearchCompositeControl;\n        } else if (typeof childControlInstance?.getParent === \"function\") {\n            return this.getSearchCompositeControlInstanceByChildControl(\n                childControlInstance.getParent() as Control\n            );\n        }\n        return undefined;\n    }\n\n    getPersonalizationStorageInstance() {\n        return this._personalizationStorage;\n    }\n\n    setPersonalizationStorageInstance(personalizationStorage: PersonalizationStorage) {\n        this._personalizationStorage = personalizationStorage;\n    }\n\n    // TODO: move to datasource\n    getSearchBoxTerm(): string {\n        return this.getProperty(\"/uiFilter/searchTerm\") || \"\";\n    }\n\n    setSearchBoxTerm(searchTerm: string, fireQuery?: boolean): void {\n        searchTerm = searchTerm || \"\";\n        const searchTermTrimLeft = searchTerm.replace(/^\\s+/, \"\"); // TODO: rtl\n        this.setProperty(\"/uiFilter/searchTerm\", searchTermTrimLeft);\n        this.calculateSearchButtonStatus();\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n    }\n\n    getLastSearchTerm(): string {\n        return this.query.getSearchTerm();\n    }\n\n    setFacetVisibility(visibility: boolean, fireQuery?: boolean): void {\n        if (Device.system.phone) {\n            visibility = false;\n        }\n\n        // set new value\n        this.setProperty(\"/facetVisibility\", visibility);\n\n        // set button status in sap storage\n        try {\n            this._personalizationStorage.setItem(PersonalizationKeys.searchFacetPanelButtonState, visibility);\n        } catch (e) {\n            this.logger.warning(\"Error writing facet visibility to personalization storage\", e);\n        }\n\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n    }\n\n    getFacetVisibility(): boolean {\n        return this.getProperty(\"/facetVisibility\");\n    }\n\n    setResultviewSelectionVisibility(visibility: boolean): void {\n        this.setProperty(\"/resultviewSelectionVisibility\", visibility);\n    }\n\n    getResultviewSelectionVisibility(): boolean {\n        return this.getProperty(\"/resultviewSelectionVisibility\");\n    }\n\n    getTop(): number {\n        return this.getProperty(\"/top\");\n    }\n\n    setTop(top: number, fireQuery?: boolean): void {\n        if (top < 0) {\n            this.resetTop();\n            this.errorHandler.onError(\n                new Error(\n                    `Could not set 'top' with value '${top}'.\\nWe will use default value '${this.getProperty(\n                        \"/top\"\n                    )}' instead.`\n                )\n            );\n        } else {\n            this.setProperty(\"/top\", top);\n        }\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n    }\n\n    resetTop(): void {\n        this.setProperty(\"/focusIndex\", 0);\n        if (\n            this.isAppCategory() ||\n            (this.isUserCategory() &&\n                this.userCategoryManager &&\n                this.userCategoryManager.getCategory(\"MyFavorites\").subDataSources.length === 0)\n        ) {\n            this.setTop(this.appTopDefault, false);\n        } else {\n            this.setTop(this.boTopDefault, false);\n        }\n    }\n\n    getOrderBy(): OrderBy {\n        return this.getProperty(\"/orderBy\");\n    }\n\n    setOrderBy(orderBy: OrderBy, fireQuery?: boolean): void {\n        this.setProperty(\"/orderBy\", orderBy);\n        this.updateSortableAttributesSelection(orderBy.orderBy);\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n    }\n\n    resetOrderBy(fireQuery?: boolean): void {\n        this.setProperty(\"/orderBy\", {});\n        this.updateSortableAttributesSelection();\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n    }\n\n    updateSortableAttributesSelection(orderBy?: string): void {\n        const sortableAttributes = this.getProperty(\"/sortableAttributes\");\n        if (sortableAttributes.length === 0) {\n            return;\n        }\n        // unselect all attributes\n        for (let i = 0; i < sortableAttributes.length; i++) {\n            sortableAttributes[i].selected = false;\n        }\n        // select one attribute\n        const orderById = orderBy === undefined ? \"DEFAULT_SORT_ATTRIBUTE\" : orderBy;\n        for (let i = 0; i < sortableAttributes.length; i++) {\n            if (sortableAttributes[i].attributeId === orderById) {\n                sortableAttributes[i].selected = true;\n            }\n        }\n        this.setProperty(\"/sortableAttributes\", sortableAttributes);\n    }\n\n    isEqualOrderBy(\n        modelOrderBy: { orderBy: string; sortOrder: \"DESC\" | \"ASC\" },\n        queryOrderBy: Array<QuerySortOrder>\n    ): boolean {\n        // 1) no sort order given\n        if (!modelOrderBy.orderBy) {\n            return queryOrderBy.length === 0;\n        }\n        // 2) sort order given\n        if (queryOrderBy.length !== 1) {\n            return false;\n        }\n        const queryOrderByElement = queryOrderBy[0];\n        if (queryOrderByElement.id !== modelOrderBy.orderBy) {\n            return false;\n        }\n        if (modelOrderBy.sortOrder === \"ASC\") {\n            return queryOrderByElement.order === this.sinaNext.SortOrder.Ascending;\n        }\n        return queryOrderByElement.order === this.sinaNext.SortOrder.Descending;\n    }\n\n    isMyFavoritesAvailable(): boolean {\n        let isAvailable = false;\n\n        if (this.sinaNext.provider.id === \"abap_odata\") {\n            isAvailable = true;\n        }\n        if (this.sinaNext.provider.id === \"multi\" && this.config.userDefinedDatasourcesMulti) {\n            isAvailable = true;\n        }\n        return isAvailable;\n    }\n\n    calculateIsNlqActive() {\n        const nlqActiveInUserSettings =\n            !this.config.isUshell ||\n            (this.getPersonalizationStorageInstance().getItem(PersonalizationKeys.nlqActive) as boolean); // only ushell has user settings\n        const isNlqActive =\n            this.config.aiNlq && // config setting\n            this.sinaNext.capabilities.nlq && // server capability\n            nlqActiveInUserSettings; // user setting\n        this.setProperty(\"/isNlqActive\", isNlqActive);\n    }\n\n    isNlqActive(): boolean {\n        return this.getProperty(\"/isNlqActive\");\n    }\n\n    getDocumentTitle(): string {\n        const searchTerm = this.getSearchBoxTerm();\n        const dataSourceLabel = this.getDataSource().labelPlural || this.getDataSource().label;\n        let title;\n        if (this.getDataSource() === this.allDataSource) {\n            title = i18n.getText(\"searchTileTitleProposalAll\", [searchTerm]);\n        } else {\n            title = i18n.getText(\"searchTileTitleProposal\", [searchTerm, dataSourceLabel]);\n        }\n        return title;\n    }\n\n    resetQuery(): void {\n        // This resets the UI search model but not sina.\n        // Deserializing a URL may NOT trigger a real ajax search request because also sina buffers the search results.\n        // This is used for for back navigation from an object page to the search UI without triggering a new search request.\n        if (this.getProperty(\"/initializingObjSearch\")) {\n            return;\n        }\n        SearchHelper.hasher.reset();\n        this.resetTop();\n        this.setSearchBoxTerm(\"\", false);\n        this.resetDataSource(false);\n        this.resetAllFilterConditions(false);\n        this.query.resetConditions();\n        this.query.setSearchTerm(\"random-jgfhfdskjghrtekjhg\");\n        this.setProperty(\"/facets\", []);\n        this.setProperty(\"/results\", []); // also resets public search model\n        this.setProperty(\"/appResults\", []);\n        this.setProperty(\"/boResults\", []);\n        this.setProperty(\"/breadcrumbsHierarchyNodePaths\", []);\n        this.setProperty(\"/breadcrumbsHierarchyAttribute\", \"\");\n        this.setProperty(\"/hierarchyNodePaths\", []);\n        this.setProperty(\"/isFolderMode\", false);\n        this.setProperty(\"/origBoResults\", []);\n        this.setProperty(\"/count\", 0);\n        this.setProperty(\"/boCount\", 0);\n        this.setProperty(\"/appCount\", 0);\n        this.setProperty(\"/nlqResult\", { success: false, filterDescription: \"\" });\n    }\n\n    resetSearchResultItemMemory() {\n        this.searchResultSetItemMemory.reset();\n    }\n\n    // ################################################################################\n    // Everything Datasource:\n    // ################################################################################\n\n    createAllAndAppDataSource(): void {\n        // all data source\n        this.allDataSource = this.sinaNext.getAllDataSource();\n        this.allDataSource.label = i18n.getText(\"label_all\");\n        this.allDataSource.labelPlural = i18n.getText(\"label_all\");\n\n        // app datasource\n        this.appDataSource = this.sinaNext._createDataSource({\n            id: \"$$APPS$$\",\n            label: i18n.getText(\"label_apps\"),\n            labelPlural: i18n.getText(\"label_apps\"),\n            type: this.sinaNext.DataSourceType.Category,\n        });\n        this.setProperty(\"/appSearchDataSource\", this.appDataSource);\n    }\n\n    async getUserCategoryManager(): Promise<UserCategoryManager> {\n        // caching\n        if (this._userCategoryManagerPromise) {\n            return this._userCategoryManagerPromise;\n        }\n        // create\n        this._userCategoryManagerPromise = this.initAsync().then(() => {\n            return this.userCategoryManager;\n        });\n        return this._userCategoryManagerPromise;\n    }\n\n    loadDataSources(): void {\n        // get all datasources from sina\n        let dataSources = this.sinaNext.getBusinessObjectDataSources();\n        dataSources = dataSources.slice();\n\n        // exclude app search datasource (here: app search datasource = connector with transactions)\n        let displayedDataSources = [];\n        dataSources.forEach(function (dataSource) {\n            if (!dataSource.usage.appSearch) {\n                displayedDataSources.push(dataSource);\n            }\n        });\n        // check \"Use Personalized Search Scope\" is active\n        if (this.userCategoryManager && this.userCategoryManager.isFavActive()) {\n            displayedDataSources.splice(0, 0, this.userCategoryManager.getCategory(\"MyFavorites\"));\n            this.favDataSource = this.userCategoryManager.getCategory(\"MyFavorites\");\n        }\n        // add app and all datasource\n        if (this.config.isUshell) {\n            displayedDataSources.splice(0, 0, this.appDataSource);\n        }\n        if (!this.config.searchScopeWithoutAll) {\n            displayedDataSources.splice(0, 0, this.allDataSource);\n        } else {\n            if (\n                !this.config.defaultDataSource &&\n                (!this.userCategoryManager ||\n                    (this.userCategoryManager && !this.userCategoryManager.isFavActive()))\n            ) {\n                // without all dataSource and no default dataSource, set the first item as default\n                this.setProperty(\"/defaultDataSource\", displayedDataSources[0]);\n            }\n        }\n        // exit for filtering datasources\n        try {\n            displayedDataSources = this.config.filterDataSources(displayedDataSources);\n        } catch (e) {\n            this.errorHandler.onError(e);\n        }\n        // set property\n        this.setProperty(\"/dataSources\", displayedDataSources);\n        this.setProperty(\"/searchTermPlaceholder\", this.calculatePlaceholder());\n    }\n\n    resetDataSource(fireQuery?: boolean): void {\n        this.setDataSource(this.getDefaultDataSource(), fireQuery);\n    }\n\n    isAllCategory(): boolean {\n        const ds = this.getProperty(\"/uiFilter/dataSource\");\n        return ds === this.allDataSource;\n    }\n\n    isOtherCategory(): boolean {\n        const ds = this.getProperty(\"/uiFilter/dataSource\");\n        return (\n            (ds.type === this.sinaNext.DataSourceType.Category ||\n                ds.type === this.sinaNext.DataSourceType.UserCategory) &&\n            !this.isAllCategory()\n        );\n    }\n\n    isAppCategory(): boolean {\n        const ds = this.getProperty(\"/uiFilter/dataSource\");\n        return ds === this.appDataSource;\n    }\n\n    isUserCategory(): boolean {\n        const ds = this.getProperty(\"/uiFilter/dataSource\");\n        return ds.type === this.sinaNext.DataSourceType.UserCategory;\n    }\n\n    isBusinessObject(): boolean {\n        return this.getProperty(\"/uiFilter/dataSource\").type === this.sinaNext.DataSourceType.BusinessObject;\n    }\n\n    isUserCategoryAppSearchOnlyWithoutBOs(): boolean {\n        return (\n            this.isUserCategory() &&\n            this.userCategoryManager &&\n            this.userCategoryManager.getCategory(\"MyFavorites\").subDataSources.length === 0\n        );\n    }\n\n    getDataSource(): DataSource {\n        return this.getProperty(\"/uiFilter/dataSource\");\n    }\n\n    getDefaultDataSource(): DataSource {\n        return this.getProperty(\"/defaultDataSource\");\n    }\n\n    /**\n     * @this sap.esh.search.ui.SearchModel\n     * @param {string} dataSourceId\n     * @param {boolean} [fireQuery]\n     * @param {boolean} [resetTop]\n     */\n    setDataSourceById(dataSourceId: string, fireQuery?: boolean, resetTop?: boolean): void {\n        const ds = this.sinaNext.getDataSource(dataSourceId);\n        if (ds && ds.id && ds.id === dataSourceId) {\n            this.setDataSource(ds, fireQuery, resetTop);\n            return;\n        }\n        throw new Error(\n            `Could not set data source with id ${dataSourceId} because it was not in the list of loaded data sources.`\n        );\n    }\n\n    setDataSource(dataSource: DataSource, fireQuery?: boolean, resetTop?: boolean): void {\n        if (this.getDataSource() !== dataSource) {\n            const userEventDatasourceChange: DataSourceChangeEvent = {\n                type: TechnicalEventType.DATASOURCE_CHANGE,\n                dataSourceKey: dataSource.id,\n                dataSourceKeyOld: this.getDataSource().id,\n            };\n            this.eventLogger.logTechnicalEvent(userEventDatasourceChange);\n        }\n\n        this.updateDataSourceList(dataSource);\n        this.getProperty(\"/uiFilter\").setDataSource(dataSource);\n\n        if (resetTop || resetTop === undefined) {\n            this.resetTop();\n        }\n\n        this.setProperty(\"/searchTermPlaceholder\", this.calculatePlaceholder());\n        this.calculateSearchButtonStatus();\n\n        if (fireQuery || fireQuery === undefined) {\n            this.fireSearchQuery();\n        }\n    }\n\n    // ################################################################################\n    // Filter conditions:\n    // ################################################################################\n    notifyFilterChanged(): void {\n        // notify ui about changed filter, data binding does not react on changes below\n        // conditions, so this is done manually\n        for (const binding of this[\"aBindings\"]) {\n            // ToDo\n            if (binding.sPath === \"/uiFilter/rootCondition\") {\n                binding.checkUpdate(true);\n            }\n        }\n    }\n\n    getFilterRootCondition(): ComplexCondition {\n        let rootCondition;\n        if (this.getProperty(\"/uiFilter\")) {\n            rootCondition = this.getProperty(\"/uiFilter\").rootCondition;\n        }\n        return rootCondition;\n    }\n\n    setFilterRootCondition(rootCondition: ComplexCondition, fireQuery?: boolean): void {\n        if (rootCondition.type !== \"Complex\") {\n            throw new Error(\"filter root condition must be of type ComplexCondition\");\n        }\n        for (let index = 0; index < rootCondition.conditions.length; index++) {\n            const complexChildCondition = rootCondition.conditions[index] as ComplexCondition;\n            if (complexChildCondition.type !== \"Complex\") {\n                throw new Error(\"filters of root condition must be of type ComplexCondition\");\n            }\n            for (let index = 0; index < complexChildCondition.conditions.length; index++) {\n                const simpleGrandChildCondition = complexChildCondition.conditions[index];\n                if (simpleGrandChildCondition.type !== \"Simple\") {\n                    throw new Error(\"filters of the lowest level must be of type SimpleCondition\");\n                }\n            }\n        }\n        this.getProperty(\"/uiFilter\").setRootCondition(rootCondition);\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n\n        this.notifyFilterChanged();\n    }\n\n    addFilterCondition(filterCondition, fireQuery?: boolean): void {\n        try {\n            const uiFilter = this.getProperty(\"/uiFilter\");\n            // when filter conditions are changed, give a callback to adjust the conditions\n            if (typeof this.config.adjustFilters === \"function\") {\n                this.config.adjustFilters(this, filterCondition);\n            }\n\n            if (filterCondition.attribute || filterCondition.conditions) {\n                uiFilter.autoInsertCondition(filterCondition);\n            } else {\n                // or a datasource?\n                this.setDataSource(filterCondition, false);\n            }\n\n            if (fireQuery || typeof fireQuery === \"undefined\") {\n                this.fireSearchQuery();\n            }\n\n            this.notifyFilterChanged();\n        } catch (error) {\n            this.errorHandler.onError(error);\n        }\n    }\n\n    removeFilterCondition(filterCondition, fireQuery?: boolean): void {\n        if (filterCondition.attribute || filterCondition.conditions) {\n            this.getProperty(\"/uiFilter\").autoRemoveCondition(filterCondition);\n        } else {\n            this.setDataSource(filterCondition, false);\n        }\n\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n\n        this.notifyFilterChanged();\n    }\n\n    resetAllFilterConditions(fireQuery?: boolean): void {\n        this.getProperty(\"/uiFilter\").resetConditions();\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n        this.notifyFilterChanged();\n    }\n\n    resetFilterByFilterConditions(fireQuery?: boolean): void {\n        // 1. collect static hierarchy facet filter conditions\n        const staticHierarchyFilterConditions = this.getStaticHierarchyFilterConditions();\n\n        // 2. reset all filter conditions\n        this.getProperty(\"/uiFilter\").resetConditions();\n\n        // 3. add static hierarchy facet filter conditions\n        if (staticHierarchyFilterConditions.length > 0) {\n            for (const nonFilterByCondition of staticHierarchyFilterConditions) {\n                this.getProperty(\"/uiFilter\").autoInsertCondition(nonFilterByCondition);\n            }\n        }\n\n        // 4. notify filter changed\n        if (fireQuery || typeof fireQuery === \"undefined\") {\n            this.fireSearchQuery();\n        }\n        this.notifyFilterChanged();\n    }\n\n    setFilter(filter): void {\n        this.setDataSource(filter.dataSource, false);\n        this.setSearchBoxTerm(filter.searchTerm, false);\n        const uiFilter = this.getProperty(\"/uiFilter\");\n        uiFilter.setRootCondition(filter.rootCondition);\n        this.fireSearchQuery();\n    }\n\n    hasStaticHierarchyFacetFilterConditionOnly(): boolean {\n        const staticHierarchyFilterConditions = this.getStaticHierarchyFilterConditions();\n        return (\n            staticHierarchyFilterConditions.length > 0 &&\n            staticHierarchyFilterConditions.length ===\n                this.getProperty(\"/uiFilter\").rootCondition.conditions.length\n        );\n    }\n\n    getStaticHierarchyFilterConditions(): Condition[] {\n        const staticHierarchyFilterConditions = [];\n        for (const attribute of this.getProperty(\"/uiFilter\").rootCondition.getAttributes()) {\n            const attributeMetadata =\n                this.getProperty(\"/uiFilter\").dataSource.attributeMetadataMap[attribute];\n            if (\n                attributeMetadata &&\n                attributeMetadata.isHierarchy === true &&\n                attributeMetadata.hierarchyDisplayType === HierarchyDisplayType.StaticHierarchyFacet\n            ) {\n                for (const nonFilterByCondition of this.getProperty(\n                    \"/uiFilter\"\n                ).rootCondition.getAttributeConditions(attribute)) {\n                    staticHierarchyFilterConditions.push(nonFilterByCondition);\n                }\n            }\n        }\n        return staticHierarchyFilterConditions;\n    }\n\n    // ################################################################################\n    // Suggestions:\n    // ################################################################################\n\n    doSuggestion(): void {\n        this._suggestionHandler.doSuggestion(this.getProperty(\"/uiFilter\").clone());\n    }\n\n    abortSuggestions(): void {\n        this._suggestionHandler.abortSuggestions();\n    }\n\n    // ################################################################################\n    // Standard- and App-Search:\n    // ################################################################################\n\n    public async fireSearchQuery(deserializationIn?: { deserialization?: boolean }): Promise<true | void> {\n        try {\n            await this.initAsync();\n        } catch (error) {\n            return Promise.reject(error);\n        }\n        return this.doFireSearchQuery(deserializationIn);\n    }\n\n    private async doFireSearchQuery(\n        deserializationIn?: { deserialization?: boolean } | boolean\n    ): Promise<true | void> {\n        let deserialization: boolean;\n        if (typeof deserializationIn === \"object\" && \"deserialization\" in deserializationIn) {\n            deserialization = deserializationIn.deserialization;\n        } else {\n            deserialization = (deserializationIn as boolean) || undefined;\n        }\n\n        // decide whether to fire the query\n        const uiFilter = this.getProperty(\"/uiFilter\");\n        if (!uiFilter) {\n            // async search model creation might have failed (see browser console)\n            return;\n        }\n        if (\n            uiFilter.equals(this.query.filter) &&\n            this.getTop() === this.query.top &&\n            this.isEqualOrderBy(this.getOrderBy(), this.query.sortOrder) &&\n            this.getCalculateFacetsFlag() === this.query.calculateFacets &&\n            !this.getProperty(\"/isQueryInvalidated\")\n        ) {\n            return Promise.resolve();\n        }\n\n        // set natural language query flag\n        this.query.setNlq(this.isNlqActive());\n\n        // For re-set selection logic check\n        const oldFilter = this.query.filter;\n        const newFilter = uiFilter;\n        // Only reset selection if data source/Search term or any filter is changed,\n        if (!oldFilter.equals(newFilter)) {\n            this.resetKeyStore();\n        }\n\n        // If the user changed dataSource or searchTerm, reset orderBy\n        if (\n            !deserialization &&\n            ((this.query.filter.dataSource && uiFilter.dataSource !== this.query.filter.dataSource) ||\n                (this.query.filter.searchTerm && uiFilter.searchTerm !== this.query.filter.searchTerm))\n        ) {\n            this.resetOrderBy(false);\n        }\n\n        // notify facets formatter about datasource change\n        if (this.query.filter.dataSource && uiFilter.dataSource !== this.query.filter.dataSource) {\n            this.oFacetFormatter.handleDataSourceChanged();\n        }\n\n        // reset top if search term changes or filter condition or datasource\n        if (!deserialization) {\n            if (!uiFilter.equals(this.query.filter)) {\n                this.resetTop();\n            }\n        }\n\n        // reset tabstrip formatter if search term changes or filter condition\n        // UserCategory (My Favorites) is used and search for one connector\n        if (\n            uiFilter.searchTerm !== this.query.filter.searchTerm ||\n            !uiFilter.rootCondition.equals(this.query.filter.rootCondition)\n        ) {\n            this._tabStripFormatter.invalidate(this.getDataSource());\n        }\n\n        // (1) query invalidated or (2) deserialization of URL -> reset result set in order to force query to be executed\n        if (\n            this.getProperty(\"/isQueryInvalidated\") === true ||\n            (deserialization && this.config.reloadOnUrlChange)\n        ) {\n            this.query.resetResultSet();\n            this.setProperty(\"/isQueryInvalidated\", false);\n        }\n\n        // update query (app search also uses this.query despite search regest is not controlled by sina)\n        this.query.setFilter(uiFilter.clone());\n        this.query.setTop(this.getTop());\n        this.query.setSortOrder(this.assembleSortOrder());\n        this.query.setCalculateFacets(this.getCalculateFacetsFlag());\n\n        this.setProperty(\"/queryFilter\", this.query.filter);\n\n        // notify subscribers\n        this.notifySubscribers(UIEvents.ESHSearchStarted);\n        EventBus.getInstance().publish(UIEvents.ESHSearchStarted);\n\n        // enable busy indicator\n        if (deserialization || !this.config.isUshell) {\n            // - no delay: avoid flickering when starting seach ui from shell header\n            // - no delay in all none ushell use cases: in ushell we have no dynamic/static hierarchy facets\n            //   dynamic/static hierarchy facets needs fast blocking in order to avoid parallel ajax requests triggered by fast clicking user\n            this.setProperty(\"/busyDelay\", 0);\n        } else {\n            this.setProperty(\"/busyDelay\", 600);\n        }\n        this.busyIndicator.setBusy(true);\n\n        this.abortSuggestions();\n\n        // update url silently\n        this.updateSearchURLSilently(deserialization);\n\n        // for each new search the memory is reseted except in case of deserilization:\n        // when navigating back from factsheet (object page) / other applications\n        // the expand status of search result set items shall be restored -> do not clear memory\n        if (!deserialization) {\n            this.resetSearchResultItemMemory();\n        }\n\n        // log search request\n        this.logSearchRequestAdvanced();\n\n        const method = `Search for '${this.getSearchBoxTerm()}' (logId:${this.config.performanceLogger?.getUniqueId()})`;\n        this._performanceLoggerSearchMethods.push(method);\n        this.config.performanceLogger?.enterMethod(\n            { name: method },\n            {\n                isSearch: true,\n                comments: `Top: ${this.getTop()}, searchbox term: ${this.getSearchBoxTerm()}`,\n            }\n        );\n\n        // wait for all subsearch queries\n        return Promise.all([this.normalSearch(), this.appSearch()])\n            .then(() => {\n                this.calculateResultViewSwitchVisibility();\n                this.setProperty(\n                    \"/tabStrips\",\n                    this._tabStripFormatter.format(this.getDataSource(), this.resultSet, this)\n                );\n                this.setProperty(\n                    \"/breadcrumbsHierarchyNodePaths\",\n                    this._breadcrumbsFormatter.formatNodePaths(this.resultSet)\n                );\n                this.setProperty(\n                    \"/breadcrumbsHierarchyAttribute\",\n                    this._breadcrumbsFormatter.formatHierarchyAttribute(this.resultSet)\n                );\n                this.setProperty(\"/hierarchyNodePaths\", this.resultSet?.hierarchyNodePaths);\n                this.setProperty(\"/isFolderMode\", uiFilter.isFolderMode());\n                if (this.config.bRecentSearches && this.recentlyUsedStorage) {\n                    const searchSuggestion = createSearchSuggestionForCurrentSearch(this);\n                    if (searchSuggestion) {\n                        this.recentlyUsedStorage.addItem(searchSuggestion);\n                    }\n                }\n                return this.oFacetFormatter\n                    .getFacets(this.getDataSource(), this.resultSet, this)\n                    .catch((error) => {\n                        for (const method of this._performanceLoggerSearchMethods) {\n                            this.config.performanceLogger?.leaveMethod({ name: method });\n                        }\n                        this._performanceLoggerSearchMethods = [];\n                        return this.errorHandler.onErrorAsync(error);\n                    })\n                    .then((facets) => {\n                        if (facets?.length > 0) {\n                            facets[0].change = Date.now(); // workaround to prevent earlier force update facet tree\n                            this.setProperty(\"/facets\", facets);\n                            facets.forEach((facet) => facet.handleModelUpdate && facet.handleModelUpdate());\n                        }\n                    });\n            })\n            .catch((error) => {\n                for (const method of this._performanceLoggerSearchMethods) {\n                    this.config.performanceLogger?.leaveMethod({ name: method });\n                }\n                this._performanceLoggerSearchMethods = [];\n                return this.errorHandler.onErrorAsync(error);\n            })\n            .finally(() => {\n                try {\n                    if (this.config && this.config.overwriteBrowserTitle === true) {\n                        document.title = this.getDocumentTitle();\n                    }\n                    for (const method of this._performanceLoggerSearchMethods) {\n                        this.config.performanceLogger?.leaveMethod({ name: method });\n                    }\n                    this._performanceLoggerSearchMethods = [];\n                    this.notifySubscribers(UIEvents.ESHSearchFinished);\n                    EventBus.getInstance().publish(UIEvents.ESHSearchFinished);\n                    this.busyIndicator.setBusy(false);\n                    this.setProperty(\"/firstSearchWasExecuted\", true);\n                    this.notifyFilterChanged();\n                    // console.log(\"SELECTION: search model, doFireSearchQuery -> update selection\");\n                    this.updateMultiSelectionSelected();\n                } catch (error) {\n                    this.errorHandler.onError(error);\n                }\n                this.ensureOneTimeDisplayForErrorMessages();\n            });\n    }\n\n    ensureOneTimeDisplayForErrorMessages() {\n        // get errors\n        const errors = this.getProperty(\"/errors\") as Array<IUIMessage>;\n        // remove already shown errors / mark new errors as shown\n        for (let i = 0; i < errors.length; ++i) {\n            const error = errors[i];\n            if (error.shownToUser) {\n                // old and shown error -> remove\n                errors.splice(i, 1);\n                i--;\n                continue;\n            }\n            // new error displayed in this roundtrip -> remove next time method is called\n            error.shownToUser = true;\n        }\n        // update errors\n        this.setProperty(\"/errors\", errors);\n    }\n\n    assembleSortOrder(): Array<{ id: string; order: SortOrder }> {\n        const orderBy = this.getOrderBy();\n        if (!orderBy.orderBy) {\n            return [];\n        }\n        let order = this.sinaNext.SortOrder.Ascending;\n        if (orderBy.sortOrder === \"DESC\") {\n            order = this.sinaNext.SortOrder.Descending;\n        }\n        return [\n            {\n                id: orderBy.orderBy,\n                order: order,\n            },\n        ];\n    }\n\n    getCalculateFacetsFlag(): boolean {\n        if (\n            this.getDataSource().type === this.sinaNext.DataSourceType.Category ||\n            this.getFacetVisibility()\n        ) {\n            // tab strip needs data from data source facet if a category is selected because\n            // then the tab strips show also siblings. If connector is selected, the tab strip\n            // only shows All and the connector.\n            return true;\n        }\n        return false;\n    }\n\n    appSearch(): Promise<true | void> {\n        // only ushell should do app search\n        if (!this.config.isUshell) {\n            return Promise.resolve(true);\n        }\n\n        this.setProperty(\"/appResults\", []);\n        this.setProperty(\"/appCount\", 0);\n\n        if (\n            this.isBusinessObject() ||\n            (this.isOtherCategory() && !this.isAppCategory() && !this.isUserCategory()) ||\n            (this.isUserCategory() &&\n                this.userCategoryManager &&\n                !this.userCategoryManager.getCategory(\"MyFavorites\").includeApps)\n        ) {\n            // 1. do not search\n            return Promise.resolve(true);\n        }\n\n        // calculate top\n        const top = this.query.filter.dataSource === this.allDataSource ? this.appTopDefault : this.query.top;\n\n        // 2. search\n        return this._searchApplicationsRefuseOutdatedReq(this.query.filter.searchTerm, top, 0).then(\n            (oResult) => {\n                // 1.1 search call succeeded\n                this.setProperty(\"/appCount\", oResult.totalResults);\n                this.setProperty(\"/appResults\", oResult.getElements());\n            },\n            (error) => {\n                // 1.2 search call failed\n                return this.errorHandler.onErrorAsync(error);\n            }\n        );\n    }\n\n    async searchApplications(\n        searchTerm: string,\n        top: number,\n        skip: number\n    ): Promise<{\n        getElements: () => Array<FLPAppSuggestion>;\n        totalResults: number;\n        searchTerm: string;\n    }> {\n        if (this.config.isUshell) {\n            const { default: Container } = await import(\"sap/ushell/Container\");\n            const service: {\n                queryApplications: (arg0: { searchTerm: string; top: number; skip: number }) => Promise<{\n                    getElements: () => Array<FLPAppSuggestion>;\n                    totalResults: number;\n                    searchTerm: string;\n                }>;\n            } = await Container.getServiceAsync(\"Search\");\n            return service.queryApplications({\n                searchTerm: searchTerm,\n                top: top,\n                skip: skip,\n            });\n        } else {\n            return Promise.resolve({\n                totalResults: 0,\n                searchTerm: searchTerm,\n                getElements: () => {\n                    return [];\n                },\n            });\n        }\n    }\n\n    private async normalSearch(): Promise<void> {\n        // return in case :\n        // 1) enterprise search disabled\n        // 2) dataSource=apps\n        // 3) dataSource=MyFavorites and MyFavorites has not datasources\n        if (\n            !this.isBusinessObjSearchEnabled() ||\n            this.isAppCategory() ||\n            (this.isUserCategory() &&\n                this.userCategoryManager &&\n                this.userCategoryManager.getCategory(\"MyFavorites\").subDataSources.length === 0)\n        ) {\n            this.setProperty(\"/boResults\", []);\n            this.setProperty(\"/breadcrumbsHierarchyNodePaths\", []);\n            this.setProperty(\"/breadcrumbsHierarchyAttribute\", \"\");\n            this.setProperty(\"/hierarchyNodePaths\", []);\n            this.setProperty(\"/isFolderMode\", false);\n            this.setProperty(\"/origBoResults\", []);\n            this.setProperty(\"/boCount\", 0);\n            this.setProperty(\"/nlqExplanation\", {});\n            this.setProperty(\"/nlqResult\", { success: false, filterDescription: \"\" });\n            this.resultSet = null;\n            return;\n        }\n\n        // set datasource\n        this.setDataSource(this.getDataSource(), false, false); // why?? update of dropdown??\n\n        // set flag whether to calculcate the facets\n        this.query.setCalculateFacets(this.getCalculateFacetsFlag());\n\n        // search request\n        try {\n            const resultSet = (await this.query.getResultSetAsync()) as SearchResultSet;\n            if (resultSet.hasErrors()) {\n                resultSet.getErrors().forEach((error) => {\n                    this.errorHandler.onError(error, {\n                        showMinorErrorsAsWarnings: resultSet?.items?.length > 0,\n                    });\n                });\n            }\n            this.dataSourceOfPreviousSearch = this?.resultSet?.query?.filter?.dataSource;\n            this.resultSet = resultSet;\n            this.setProperty(\"/nlqResult\", resultSet.nlqResult);\n            await this._afterSearchPrepareResultList(resultSet);\n        } catch (error) {\n            this.dataSourceOfPreviousSearch = this?.resultSet?.query?.filter?.dataSource;\n            this.setProperty(\"/nlqResult\", { success: false, filterDescription: \"\" });\n            this.errorHandler.onError(error);\n        }\n    }\n\n    private _afterSearchPrepareResultList(searchResultSet: SearchResultSet): Promise<void> {\n        this.setProperty(\"/boResults\", []);\n        this.setProperty(\"/breadcrumbsHierarchyNodePaths\", []);\n        this.setProperty(\"/breadcrumbsHierarchyAttribute\", \"\");\n        this.setProperty(\"/hierarchyNodePaths\", []);\n        this.setProperty(\"/isFolderMode\", false);\n        this.setProperty(\"/origBoResults\", searchResultSet.items);\n        this.setProperty(\"/boCount\", 0);\n\n        const formatter = new SearchResultFormatter(this);\n        const newResults = formatter.format(searchResultSet, this.query.filter.searchTerm);\n        this.setProperty(\"/sortableAttributes\", formatter.formatSortAttributes() as Array<SortAttribute>); // move this.isHomogenousResult() && searchResultSet.totalCount > 0 to formatter\n\n        this.forgetMissingSelections(newResults);\n\n        this.setTableData(newResults); // format table even if table view is configured, used in getTableInitialColumns() for result export.\n\n        this.restoreResultSetItemExpansion(newResults);\n        let newResult;\n        const dataSources = [];\n        const dataSourcesHints = [];\n\n        for (let i = 0; i < newResults.length; i++) {\n            newResult = newResults[i];\n            // collect data sources to initiate loading of custom modules\n            dataSources.push(newResult.dataSource);\n            dataSourcesHints.push({\n                isDocumentConnector: newResult.isDocumentConnector,\n            });\n        }\n\n        const loadCustomModulesProm = this.config.loadCustomModulesForDataSourcesAsync(\n            dataSources,\n            dataSourcesHints\n        );\n\n        const thisPromise = Promise.all([Promise.resolve(searchResultSet), loadCustomModulesProm]).then(\n            (params) => {\n                // TODO: error handling\n\n                const searchResultSet = params[0];\n\n                // DSP exit\n                if (this.config && typeof this.config.setSearchInLabelIconBindings === \"function\") {\n                    try {\n                        this.config.setSearchInLabelIconBindings(this, searchResultSet.facets);\n                    } catch (err) {\n                        const oError = new errors.ConfigurationExitError(\n                            \"setSearchInLabelIconBindings\",\n                            this.config.applicationComponent,\n                            err\n                        );\n                        throw oError;\n                    }\n                }\n\n                for (const item of newResults) {\n                    if (this.isKeySelected(item.key)) {\n                        item.selected = true;\n                    }\n                }\n                this.setProperty(\"/boCount\", searchResultSet.totalCount);\n                this.setProperty(\"/boResults\", newResults);\n                this.enableOrDisableMultiSelection();\n\n                return Promise.resolve();\n            }\n        );\n\n        return thisPromise;\n    }\n\n    restoreResultSetItemExpansion(items: Array<FormattedResultItem>) {\n        for (const item of items) {\n            const expanded = this.searchResultSetItemMemory.getExpanded(item.key);\n            if (typeof expanded !== \"undefined\") {\n                item.expanded = expanded;\n            }\n        }\n    }\n\n    // ################################################################################\n    // Helper functions:\n    // ################################################################################\n\n    // handle multi-selection availability\n    // ===================================================================\n    enableOrDisableMultiSelection(): void {\n        if (\n            [SelectionMode.MultipleItems].includes(this.config.resultviewSelectionMode) ||\n            this.config.enableMultiSelectionResultItems // deprecated\n        ) {\n            this.setProperty(\"/multiSelectionAvailable\", true);\n            this.setProperty(\"/multiSelectionEnabled\", true);\n            return;\n        }\n\n        const dataSource = this.getDataSource();\n        const dataSourceConfig = this.config.getDataSourceConfig(dataSource);\n        const selectionHandler = new dataSourceConfig.searchResultListSelectionHandlerControl();\n        if (selectionHandler) {\n            this.setProperty(\"/multiSelectionAvailable\", selectionHandler.isMultiSelectionAvailable());\n        } else {\n            this.setProperty(\"/multiSelectionAvailable\", false);\n        }\n    }\n\n    updateMultiSelectionSelected(): void {\n        // console.log(\"SELECTION: SearchModel.updateMultiSelectionSelected\");\n        let results;\n        if (this.getResultViewType() === \"searchResultTable\") {\n            // UI in table view\n            results = this.getProperty(\"/tableRows\");\n        } else {\n            // UI in list or grid view\n            results = this.getProperty(\"/results\");\n        }\n        let count = 0;\n        const multiSelectionObjects = [];\n        for (let i = 0; i < results.length; i++) {\n            if (results[i].selected) {\n                this.selectKey(results[i].key);\n                count++;\n                multiSelectionObjects.push(results[i]);\n            } else {\n                this.deselectKey(results[i].key);\n            }\n        }\n        if (count > 0) {\n            this.setProperty(\"/multiSelectionSelected\", true);\n            this.setProperty(\"/multiSelectionObjects\", multiSelectionObjects);\n        } else {\n            this.setProperty(\"/multiSelectionSelected\", false);\n            this.setProperty(\"/multiSelectionObjects\", []);\n        }\n        if (count === 1) {\n            this.setProperty(\"/singleSelectionSelected\", true);\n        } else {\n            this.setProperty(\"/singleSelectionSelected\", false);\n        }\n        // notify subscribers\n        this.notifySubscribers(UIEvents.ESHSelectionChanged);\n        EventBus.getInstance().publish(UIEvents.ESHSelectionChanged, this);\n    }\n\n    calculatePlaceholder(): string {\n        let dataSourceLabel = this.getDataSource().labelPlural; // default label\n        if (this.isAllCategory() || this.config?.bPlaceHolderFixedValue === true) {\n            return i18n.getText(\"search\");\n        } else if (typeof this.config?.getSearchInputPlaceholderLabel === \"function\") {\n            try {\n                dataSourceLabel = this.config?.getSearchInputPlaceholderLabel(this.getProperty(\"/uiFilter\"));\n            } catch (err) {\n                const oError = new errors.ConfigurationExitError(\n                    \"getSearchInputPlaceholderLabel\",\n                    this.config.applicationComponent,\n                    err\n                );\n                // not significant, unnecessary to throw exception, display fallback placeholder text\n                this.errorHandler.onError(oError);\n            }\n        }\n        // robustness\n        if (typeof dataSourceLabel === \"undefined\" || dataSourceLabel === null || dataSourceLabel === \"\") {\n            dataSourceLabel = this.getDataSource().labelPlural;\n        }\n        return i18n.getText(\"searchInPlaceholder\", [dataSourceLabel]);\n    }\n\n    updateDataSourceList(newDataSource: DataSource): void {\n        const dataSources = this.getProperty(\"/dataSources\");\n        // delete old categories, until all data source\n        this.removeTempDataSources();\n        // check if newDataSource exists in existing list -> return\n        if (dataSources.indexOf(newDataSource) >= 0) {\n            return;\n        }\n        // add datasource\n        dataSources.unshift(newDataSource);\n        this._tempDataSources.push(newDataSource);\n        this.setProperty(\"/dataSources\", dataSources);\n    }\n\n    removeTempDataSources(): void {\n        const dataSources = this.getProperty(\"/dataSources\");\n        this._tempDataSources.forEach((tempDataSource, i, tempDataSources) => {\n            const index = dataSources.indexOf(tempDataSource);\n            if (index < 0) {\n                const internalError = new Error(\"could not find temp DataSource in DataSources\");\n                throw new errors.ProgramError(internalError);\n            }\n            dataSources.splice(index, 1);\n            tempDataSources.splice(i, 1);\n        });\n    }\n\n    invalidateQuery(): void {\n        this.setProperty(\"/isQueryInvalidated\", true);\n    }\n\n    private logSearchRequestAdvanced(): void {\n        const event: SearchRequestEvent = {\n            type: TechnicalEventType.SEARCH_REQUEST,\n            searchTerm: this.getSearchBoxTerm(),\n            filter: this.getFilterRootCondition() + \"\",\n            dataSourceKey: this.getDataSource().id,\n            top: this.getTop(),\n        };\n        if (this.getFilterRootCondition().conditions?.length > 0) {\n            if (this.getSearchBoxTerm()) {\n                event.type = TechnicalEventType.SEARCH_WITH_SEARCHTERM_FILTERS;\n            } else {\n                event.type = TechnicalEventType.SEARCH_WITH_FILTERS;\n            }\n        } else {\n            if (!this.getSearchBoxTerm()) {\n                event.type = TechnicalEventType.SEARCH_WITHOUT_SEARCHTERM_FILTERS;\n            } else {\n                event.type = TechnicalEventType.SEARCH_WITH_SEARCHTERM;\n            }\n        }\n        this.eventLogger.logTechnicalEvent(event);\n    }\n\n    autoStartApp(): void {\n        const searchTerm = this.getProperty(\"/uiFilter/searchTerm\");\n        if (this.getProperty(\"/appCount\") === 1 && this.getProperty(\"/count\") === 1) {\n            const aApps = this.getProperty(\"/appResults\");\n            if (\n                aApps &&\n                aApps.length > 0 &&\n                aApps[0] &&\n                aApps[0].url &&\n                searchTerm &&\n                aApps[0].tooltip &&\n                searchTerm.toLowerCase().trim() === aApps[0].tooltip.toLowerCase().trim()\n            ) {\n                if (aApps[0].url[0] === \"#\") {\n                    window.location.href = aApps[0].url;\n                } else {\n                    window.open(aApps[0].url, \"_blank\", \"noopener,noreferrer\");\n                }\n                return;\n            }\n        }\n    }\n\n    isHomogenousResult(): boolean {\n        if (this.isAllCategory()) {\n            return false;\n        }\n        if (this.isOtherCategory()) {\n            return false;\n        }\n        if (this.isAppCategory()) {\n            return false;\n        }\n        return true;\n    }\n\n    getResultViewTypes(): Array<string> {\n        return this.getProperty(\"/resultViewTypes\");\n    }\n\n    setResultViewTypes(types: string[]): void {\n        this.setProperty(\"/resultViewTypes\", types);\n    }\n\n    getResultViewType(): string {\n        return this.getProperty(\"/resultViewType\");\n    }\n\n    setResultViewType(type: string): void {\n        this.setProperty(\"/resultViewType\", type);\n        if (this.isAppCategory()) {\n            return;\n        } else if (this.isAllCategory() || this.isOtherCategory()) {\n            try {\n                this._personalizationStorage.setItem(\n                    PersonalizationKeys.resultViewTypeForAllAndCategorySearch,\n                    type\n                );\n            } catch (e) {\n                this.logger.warning(\n                    \"Could not store resultViewTypeForAllAndCategorySearch in personalization storage\",\n                    e\n                );\n            }\n        } else {\n            try {\n                this._personalizationStorage.setItem(\n                    PersonalizationKeys.resultViewTypeForBusinessObjectSearch,\n                    type\n                );\n            } catch (e) {\n                this.logger.warning(\n                    \"Could not store resultViewTypeForBusinessObjectSearch in personalization storage\",\n                    e\n                );\n            }\n        }\n    }\n\n    calculateResultViewSwitchVisibility(settings?: {\n        resultViewTypes: Array<string>;\n        resultViewType: string;\n    }): void {\n        /* view type by search scope\n         * search in Datasource    All     Category    Apps    BusinessObject\n         * -------------------------------------------------------------------\n         * \"appSearchResult\"                           x\n         * \"searchResultList\"      x        x                  x\n         * \"searchResultTable\"                                 x\n         * \"searchResultGrid\"      x        x                  x\n         */\n\n        this.validateResultViewSettings(settings);\n\n        // ==============================================================================================================\n        // click view switch buttons or use SearchComposite API (after SearchFinished) ->\n        // call calculateResultViewSwitchVisibility(), settings is SearchComposite's parameters ->\n        // calculate with settings:\n        // ==============================================================================================================\n        if (settings !== undefined) {\n            this.setResultViewTypes(settings.resultViewTypes);\n            this.setResultViewType(settings.resultViewType);\n            this.setProperty(\"/resultViewSwitchVisibility\", settings.resultViewTypes.length > 1);\n            return;\n        }\n\n        // ==============================================================================================================\n        // initialize Search UI with/without URL parameter or trigger new search (NormalSearch Resolve) ->\n        // call calculateResultViewSwitchVisibility(), settings is undefined ->\n        // calculate with hard code, storage and/or SearchConfiguration's parameters:\n        // ==============================================================================================================\n        let activeTypes;\n        let activeType;\n\n        // 1. Search in Apps\n        if (\n            this.isAppCategory() ||\n            (this.isUserCategory() &&\n                this.userCategoryManager &&\n                this.userCategoryManager.getCategory(\"MyFavorites\").subDataSources.length === 0)\n        ) {\n            activeTypes = [\"appSearchResult\"]; // ToDo: hard code\n            activeType = \"appSearchResult\"; // ToDo: hard code\n            this.setResultViewTypes(activeTypes);\n            this.setResultViewType(activeType);\n            this.setProperty(\"/resultViewSwitchVisibility\", activeTypes.length > 1);\n            return;\n        }\n\n        // 2. Search in All or other Category\n        if (this.isAllCategory() || this.isOtherCategory()) {\n            // 2.1.\n            if (this.config.isUshell) {\n                activeTypes = [\"searchResultList\"]; // ToDo: hard code\n                activeType = \"searchResultList\"; // ToDo: hard code\n            }\n            // 2.2\n            else {\n                activeTypes = [\"searchResultList\", \"searchResultGrid\"]; // ToDo: hard code\n                try {\n                    activeType = this._personalizationStorage.getItem(\n                        PersonalizationKeys.resultViewTypeForAllAndCategorySearch\n                    ); //storage\n                } catch (e) {\n                    this.logger.warning(\n                        \"Could not read resultViewTypeForAllAndCategorySearch from personalization storage\",\n                        e\n                    );\n                }\n\n                if (\n                    activeType === undefined ||\n                    activeType === null ||\n                    activeType.length === 0 ||\n                    !activeTypes.includes(activeType)\n                ) {\n                    activeType = \"searchResultList\"; //hard code\n                }\n            }\n            this.setResultViewTypes(activeTypes);\n            this.setResultViewType(activeType);\n            this.setProperty(\"/resultViewSwitchVisibility\", activeTypes.length > 1);\n            return;\n        }\n\n        // 3. Search in Business Object\n        activeTypes = this.config.resultViewTypes; // SearchConfiguration\n\n        try {\n            if (this._personalizationStorage instanceof PersonalizationStorage)\n                activeType = this._personalizationStorage.getItem(\n                    PersonalizationKeys.resultViewTypeForBusinessObjectSearch\n                ); //storage\n        } catch (e) {\n            this.logger.warning(\n                \"Could not read resultViewTypeForBusinessObjectSearch from personalization storage\",\n                e\n            );\n        }\n\n        if (\n            activeType === undefined ||\n            activeType === null ||\n            activeType.length === 0 ||\n            !activeTypes.includes(activeType)\n        ) {\n            activeType = this.config.fallbackResultViewType; //SearchConfiguration\n        }\n\n        // result view type calculation for navigation mode (folder or search mode)\n        activeType = this.folderModeResultViewTypeCalculator.calculate(\n            activeTypes,\n            activeType,\n            this.getProperty(\"/uiFilter\")\n        );\n\n        this.setResultViewTypes(activeTypes);\n        this.setResultViewType(activeType);\n        this.setProperty(\"/resultViewSwitchVisibility\", activeTypes.length > 1);\n    }\n\n    validateResultViewSettings(settings: { resultViewTypes: Array<string>; resultViewType: string }): void {\n        let validateConfig;\n        let typeSuperset; // superset of possible resultViewTypes\n        let types; // active result view types\n        let type; // active result view type\n        let errorBegin;\n        let errorEnding;\n\n        if (typeof settings === \"undefined\") {\n            // ==============================================================================================================\n            // initialize Search UI with/without URL parameter or trigger new search (NormalSearch Resolve) ->\n            // call validateResultViewSettings(), settings is undefined ->\n            // validate SearchConfiguration parameters: config.resultViewTypes, config.fallbackResultViewType\n            // ==============================================================================================================\n            validateConfig = true;\n        } else {\n            // ==============================================================================================================\n            // click view switch buttons or use SearchComposite API (after SearchFinished) ->\n            // call validateResultViewSettings(), settings is SearchComposite's parameters ->\n            // validate SearchCompositeControl parameters: settings.resultViewTypes, settings.resultViewType\n            // ==============================================================================================================\n            validateConfig = false;\n        }\n\n        if (validateConfig) {\n            typeSuperset = [\"searchResultList\", \"searchResultTable\", \"searchResultGrid\"];\n            types = this.config.resultViewTypes;\n            type = this.config.fallbackResultViewType;\n            errorBegin = \"\\nERROR: Search Result View Settings of SearchConfiguration:\\n\\n\";\n            errorEnding =\n                \". \\n Please check the validation and compatibility of resultViewTypes of SearchConfiguration!\";\n        } else {\n            if (this.isAppCategory()) {\n                typeSuperset = [\"appSearchResult\"];\n            } else if (this.isAllCategory() || this.isOtherCategory()) {\n                typeSuperset = [\"searchResultList\", \"searchResultGrid\"];\n            } else {\n                typeSuperset = [\"searchResultList\", \"searchResultTable\", \"searchResultGrid\"];\n            }\n            types = settings.resultViewTypes;\n            type = settings.resultViewType;\n            errorBegin = \"\\nERROR: Search Result View Settings of SearchCompositeControl\\n\\n\";\n            errorEnding =\n                \". \\n Please check the validation and compatibility of resultViewTypes and resultViewType of SearchCompositeControl!\" +\n                \"\\n When adding a new resultViewType and making it active at the same time, make use of function 'setResultViewSettings' to apply both changes together.\";\n        }\n\n        // check starts\n        // result view types not empty\n        if (!Array.isArray(types) || types.length === 0) {\n            throw Error(errorBegin + \"resultViewTypes should be non-empty array\" + errorEnding);\n        }\n\n        // result view types no duplicates\n        let uniqueList = types;\n        uniqueList = uniqueList.filter((elem, index) => {\n            return uniqueList.indexOf(elem) === index;\n        });\n        if (uniqueList.length !== types.length) {\n            throw Error(\n                errorBegin +\n                    \"resultViewTypes (\" +\n                    types.toString() +\n                    \") should not have duplicated value\" +\n                    errorEnding\n            );\n        }\n\n        // result view types is subset of possible superset\n        if (!SearchHelper.isSubsetOf(types, typeSuperset)) {\n            throw Error(\n                errorBegin +\n                    \"resultViewTypes (\" +\n                    types.toString() +\n                    \") contains invalid value. Possible values are (\" +\n                    typeSuperset.toString() +\n                    \")\" +\n                    errorEnding\n            );\n        }\n\n        // set default value to undefined fallbackResultViewType, after validating resultViewTypes\n        // move from setDefaults() of SearchConfiguration\n        if (typeof type === \"undefined\" && validateConfig) {\n            type = types[0];\n            this.config.fallbackResultViewType = types[0]; // assign resultViewTypes' first element to fallbackResultViewType\n        }\n\n        // result view type of string type\n        if (typeof type !== \"string\") {\n            throw Error(errorBegin + \"resultViewType should be of string\" + errorEnding);\n        }\n\n        // result view types contains active result view type\n        if (!types.includes(type)) {\n            throw Error(\n                errorBegin +\n                    \"resultViewTypes (\" +\n                    types.toString() +\n                    \") doesn't contain resultViewType (\" +\n                    type +\n                    \")\" +\n                    errorEnding\n            );\n        }\n    }\n\n    calculateSearchButtonStatus(): void {\n        // only used for: ushell with classic search field (no webcomponents)\n        if (!this.config.isUshell) {\n            this.setProperty(\"/searchButtonStatus\", \"Search\");\n            return;\n        }\n        if (\n            this.getDataSource() === this.getProperty(\"/defaultDataSource\") &&\n            this.getSearchBoxTerm().length === 0\n        ) {\n            if (SearchShellHelperHorizonTheme.isSearchFieldExpandedByDefault()) {\n                this.setProperty(\"/searchButtonStatus\", \"Focus\");\n            } else {\n                this.setProperty(\"/searchButtonStatus\", \"Close\");\n            }\n        } else {\n            this.setProperty(\"/searchButtonStatus\", \"Search\");\n        }\n    }\n\n    calculateResultList(): void {\n        // init\n        let results = [];\n\n        // add bo results\n        const boResults = this.getProperty(\"/boResults\");\n        if (boResults && boResults.length) {\n            results.push(...boResults);\n        }\n\n        // add app results (tiles)\n        const tiles = this.getProperty(\"/appResults\");\n        if (tiles && tiles.length > 0) {\n            const tilesItem = {\n                type: \"appcontainer\",\n                tiles: tiles,\n            };\n            if (results.length > 0) {\n                if (results.length > 3) {\n                    results.splice(3, 0, tilesItem);\n                } else {\n                    //results.splice(0, 0, tilesItem);\n                    results.push(tilesItem);\n                }\n            } else {\n                results = [tilesItem];\n            }\n        }\n        this.setProperty(\"/results\", results);\n    }\n\n    // ################################################################################\n    // UI message handling:\n    // ################################################################################\n\n    /**\n     * push an error object to error array\n     * @this sap.esh.search.ui.SearchModel\n     * @param { type: MessageType; title: string; description: string } error Error object\n     */\n    pushUIMessage(error: { type: MessageType; title: string; description: string }): void {\n        error.title = error.title === \"[object Object]\" ? i18n.getText(\"searchError\") : error.title;\n        error.type = error.type !== undefined ? error.type : MessageType.Error;\n        const errors = this.getProperty(\"/errors\");\n        errors.push(error);\n        const finalErrors = this.removeAdjacentDuplicateMessages(errors);\n        this.setProperty(\"/errors\", finalErrors);\n    }\n\n    /**\n     * remove all adjacent duplicate messages (message and 'next' message are the same -> keep first message only)\n     * @this sap.esh.search.ui.SearchModel\n     * @param {any[]} error\n     */\n    removeAdjacentDuplicateMessages(errors: Array<IUIMessage>) {\n        const finalErrors = [];\n        let previousError;\n        for (const error of errors) {\n            if (typeof previousError === \"undefined\") {\n                finalErrors.push(error);\n            } else if (\n                previousError.title !== error.title ||\n                previousError.description !== error.description ||\n                previousError.type !== error.type ||\n                previousError.shownToUser !== error.shownToUser\n            ) {\n                finalErrors.push(error);\n            }\n            previousError = error;\n        }\n        return finalErrors;\n    }\n\n    // ################################################################################\n    // Functions related to the URL:\n    // ################################################################################\n    updateSearchURLSilently(deserialization: boolean): void {\n        if (!deserialization && this.config.updateUrl) {\n            const sHash = this.createSearchNavigationTargetCurrentState().targetUrl;\n            SearchHelper.hasher.setHash(sHash);\n        }\n    }\n\n    parseURL(): void {\n        this.searchUrlParser.parse();\n    }\n\n    public subscribe(eventId: string, callback: (eventId: string) => void, listener: unknown): void {\n        // Subscription to internal events of search library is only allowed for internal components\n        // Subscribe to events of SearchCompositeControl:\n        //   - \"searchStarted\" is triggered when a search is started and the UI is waiting for results\n        //   - \"searchFinished\" is triggered as soon as the results are in and the UI finished its updates\n        //   - \"selectionChanged\" is triggered after selection changed (checkboxes of result items), will be deprecated as of 1.142\n        //   - \"resultViewTypeChanged\" is triggered after result view type got changed (list, table or grid), as of 1.141\n        //   - \"resultViewSelectionChanged\" is triggered after result view selection changed (checkboxes/item-selection of result items), as of 1.142\n\n        // subscribe\n        this._subscribers.push({\n            eventId: eventId || \"\",\n            callback: callback,\n            listener: listener || this,\n        });\n\n        // assert\n        this.assertInternalEvents(eventId);\n    }\n\n    public unsubscribe(eventId: string, callback: (eventId: string) => void, listener: unknown): void {\n        // unsubscribe\n        eventId = eventId || \"\";\n        listener = listener || this;\n        for (let index = 0; index < this._subscribers.length; index++) {\n            const subscriber = this._subscribers[index];\n            if (\n                subscriber.eventId === eventId &&\n                subscriber.callback === callback &&\n                subscriber.listener === listener\n            ) {\n                this._subscribers.splice(index, 1);\n            }\n        }\n\n        // assert\n        this.assertInternalEvents(eventId);\n    }\n\n    private assertInternalEvents(eventId: string): void {\n        const callStack = new Error().stack;\n        if (\n            callStack.includes(\"sap/esh/search/ui/SearchCompositeControl\") ||\n            callStack.includes(\"sap/esh/search/ui/library-preload\") ||\n            callStack.includes(\"sap/esh/search/ui/SearchShellHelper\")\n        ) {\n            // OK, called by ELISA component\n        } else {\n            assert(\n                false,\n                `Subscription to internal events ('${eventId}') of search library is only allowed for internal components.\\nSubscribe to events of SearchCompositeControl:\\n  - \"searchStarted\"        : Triggered when a search is started and the UI is waiting for results\\n  - \"searchFinished\"       : Triggered as soon as the results are in and the UI finished its updates\\n  - \"selectionChanged\"     : Triggered after selection changed (checkboxes of result items) \\n  - \"resultViewTypeChanged\": Triggered after result view type got changed (list, table or grid)`\n            );\n        }\n    }\n\n    notifySubscribers(eventId: string): void {\n        for (const subscriber of this._subscribers) {\n            if (subscriber.eventId === eventId) {\n                subscriber.callback.apply(subscriber.listener, [eventId]);\n            }\n        }\n    }\n\n    /**\n     * Create a NavigationTarget instance.\n     * Use this method for the creation a NavigationTarget instance by filter and label for it.\n     */\n    public createSearchNavigationTarget(\n        parameter: Filter | SearchNavigationTargetParameters,\n        label?: string\n    ): NavigationTarget {\n        // normalize input parameters\n        let searchNavigationTargetParameters: SearchNavigationTargetParameters;\n        if (parameter instanceof Filter) {\n            searchNavigationTargetParameters = { filter: parameter, label: label };\n        } else {\n            searchNavigationTargetParameters = parameter;\n        }\n\n        // fill defaults\n        searchNavigationTargetParameters.updateUrl =\n            searchNavigationTargetParameters.updateUrl ?? this.config.updateUrl;\n        searchNavigationTargetParameters.top =\n            searchNavigationTargetParameters.top ?? this.config.pageSize ?? 10;\n        searchNavigationTargetParameters.label = searchNavigationTargetParameters.label ?? \"Search\";\n        searchNavigationTargetParameters.encodeFilter = searchNavigationTargetParameters.encodeFilter ?? true;\n\n        // create navigation target\n        if (searchNavigationTargetParameters.updateUrl) {\n            // 1) navigation target using url\n            const url = renderUrlFromParameters(\n                this,\n                searchNavigationTargetParameters.top,\n                searchNavigationTargetParameters.filter,\n                searchNavigationTargetParameters.encodeFilter,\n                searchNavigationTargetParameters.orderBy\n            );\n            return this.sinaNext.createNavigationTarget({\n                targetUrl: url,\n                text: searchNavigationTargetParameters.label,\n                target: \"_self\",\n            });\n        } else {\n            // 2) navigation target using target function\n            return this.sinaNext.createNavigationTarget({\n                targetFunction: () => {\n                    this.setTop(searchNavigationTargetParameters.top, false);\n                    if (searchNavigationTargetParameters.orderBy) {\n                        this.setOrderBy(searchNavigationTargetParameters.orderBy, false);\n                    }\n                    this.setFilter(searchNavigationTargetParameters.filter);\n                },\n                targetFunctionCustomData: {\n                    top: searchNavigationTargetParameters.top,\n                    filter: searchNavigationTargetParameters.filter,\n                    orderBy: searchNavigationTargetParameters.orderBy,\n                } as SearchQueryParameters,\n                text: searchNavigationTargetParameters.label,\n            });\n        }\n    }\n\n    public createSearchNavigationTargetCurrentState(options?: { updateUrl?: boolean }): NavigationTarget {\n        return this.createSearchNavigationTarget({\n            top: this.getTop(),\n            filter: this.getProperty(\"/uiFilter\"),\n            encodeFilter: true,\n            orderBy: this.getOrderBy(),\n            updateUrl: options?.updateUrl,\n        });\n    }\n\n    public parseSearchNavigationTarget(searchNavigationTarget: NavigationTarget): SearchQueryParameters {\n        const searchQueryParameters: SearchQueryParameters = { filter: null };\n\n        // in case the search navigation target is targetFunction based the original query parameters\n        // are stored in the targetFunctionCustomData, see createSearchNavigationTarget\n        if (searchNavigationTarget.targetFunctionCustomData) {\n            return searchNavigationTarget.targetFunctionCustomData as SearchQueryParameters;\n        }\n\n        // parse url parameters\n        let urlParameters = SearchHelper.parseUrlParameters(searchNavigationTarget.targetUrl);\n        if (core.isEmptyObject(urlParameters)) {\n            return undefined;\n        }\n\n        // parameter modification exit\n        try {\n            urlParameters = this.config.parseSearchUrlParameters(urlParameters);\n        } catch (e) {\n            this.errorHandler.onError(e);\n        }\n\n        // top\n        if (urlParameters.top) {\n            searchQueryParameters.top = parseInt(urlParameters.top, 10);\n        }\n\n        // order by\n        if (urlParameters.orderby && urlParameters.sortorder) {\n            searchQueryParameters.orderBy = {\n                orderBy: urlParameters.orderby,\n                sortOrder: urlParameters.sortorder,\n            };\n        }\n\n        // filter conditions\n        if (urlParameters.filter) {\n            try {\n                const filterJson = JSON.parse(urlParameters.filter);\n                searchQueryParameters.filter = this.sinaNext.parseFilterFromJson(filterJson);\n            } catch (e) {\n                throw new UrlParseError(e);\n            }\n        }\n\n        return searchQueryParameters;\n    }\n\n    public getTableColumns(isStorage: boolean): Array<Column> {\n        if (!isStorage) {\n            return merge([], this.getProperty(\"/tableColumns\")) as Array<Column>; // pass-by-value, not pass-by-reference\n        } else {\n            return this.fetchTableColumns();\n        }\n    }\n\n    private fetchTableColumns(): Array<Column> {\n        try {\n            if (this.getProperty(\"/tableDataSource\").length > 0) {\n                const storageId =\n                    PersonalizationKeys.searchResultTableState + this.getProperty(\"/tableDataSource\");\n                const persoState = this.getPersonalizationStorageInstance()?.getItem(storageId) as PersoState;\n                if (this.isTablePersoStateValid(persoState)) {\n                    return merge([], persoState.aColumns) as Array<Column>; // pass-by-value, not pass-by-reference\n                }\n                return undefined;\n            }\n        } catch (error) {\n            this.logger.warning(\"Could not fetch table columns from personalization storage\", error);\n            return undefined;\n        }\n    }\n\n    private isTablePersoStateValid(persoState: PersoState): boolean {\n        if (!persoState || persoState._persoSchemaVersion !== \"p13n\" || !Array.isArray(persoState.aColumns)) {\n            return false;\n        }\n        for (const column of persoState.aColumns) {\n            if (column.p13NColumnName === undefined) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public setTableColumns(columns: Array<Column>, isStorage: boolean): void {\n        this.setProperty(\"/tableColumns\", columns);\n        if (isStorage) {\n            this.saveTableColumns(columns);\n        }\n    }\n\n    public saveTableColumns(columns: Array<Column>): void {\n        try {\n            if (this.getProperty(\"/tableDataSource\").length > 0) {\n                const storageId =\n                    PersonalizationKeys.searchResultTableState + this.getProperty(\"/tableDataSource\");\n                this.getPersonalizationStorageInstance().setItem(storageId, {\n                    aColumns: columns,\n                    _persoSchemaVersion: \"p13n\",\n                });\n            }\n        } catch (error) {\n            this.logger.warning(\"Could not save table columns to personalization storage\", error);\n        }\n    }\n\n    public getTableInitialColumns(): Array<Column> {\n        if (!this.tableFormatter) {\n            this.tableFormatter = new SearchResultTableFormatter(this);\n        }\n\n        const columns = this.getTableColumns(false);\n        if (columns?.length > 0) {\n            return this.tableFormatter.formatInitialColumns(columns);\n        } else {\n            return [];\n        }\n    }\n\n    private setTableData(formattedResults: Array<FormattedResultItem>): void {\n        try {\n            if (this.isHomogenousResult()) {\n                /* \n                Principle: \n                    keep table data in search model as lang as datasource is not changed, otherwise 100%-width-columns in same-datasource-search will be modifed\n\n                Example 1:\n                1. Search \"*\" in Products -> has results -> set columns, set initial columns, set rows\n                    /tableDataSource        = Products\n                    /tableColumns           = [Product Id, Product Name, Product Price]\n                    /tableInitialColumns    = [Product Id, Product Name, Product Price]\n                    /tableRows              = [Product1, Product2, Product3]\n\n                2. Search \"$\" in Employees -> has empty result -> reset table data\n                    /tableDataSource        = undefined\n                    /tableColumns           = []\n                    /tableInitialColumns    = []\n                    /tableRows              = []\n\n                3. Search \"*\" in Employees -> has results -> set columns, set initial columns, set rows\n                    /tableDataSource        = Employees\n                    /tableColumns           = [Employee Id, Employee Name, Employee Address]\n                    /tableInitialColumns    = [Employee Id, Employee Name, Employee Address]\n                    /tableRows              = [Employee1, Employee2, Employee3]\n\n                Example 2:\n                1. Search \"*\" in Employees -> has results -> set columns, set initial columns, set rows\n                    /tableDataSource        = Employees\n                    /tableColumns           = [Employee Id, Employee Name, Employee Address]\n                    /tableInitialColumns    = [Employee Id, Employee Name, Employee Address]\n                    /tableRows              = [Employee1, Employee2, Employee3]\n\n                2. Search \"$\" in Employees -> has empty result -> reset table data\n                    /tableDataSource        = Employees\n                    /tableColumns           = [Employee Id, Employee Name, Employee Address]\n                    /tableInitialColumns    = [Employee Id, Employee Name, Employee Address]\n                    /tableRows              = []\n\n                3. Search \"*\" in Employees -> has results -> set columns, set initial columns, set rows\n                    /tableDataSource        = Employees\n                    /tableColumns           = [Employee Id, Employee Name, Employee Address]\n                    /tableInitialColumns    = [Employee Id, Employee Name, Employee Address]\n                    /tableRows              = [Employee1, Employee2, Employee3]\n                */\n\n                if (!this.tableFormatter) {\n                    this.tableFormatter = new SearchResultTableFormatter(this);\n                }\n\n                if (formattedResults.length > 0) {\n                    // set data source of table\n                    this.setProperty(\"/tableDataSource\", this.getDataSource().id);\n\n                    // set columns\n                    this.setTableColumns(this.tableFormatter.formatColumns(formattedResults), true);\n\n                    // set initial columns\n                    // prevent pass-by-reference between /tableColumns and /tableInitialColumns\n                    // use getTableInitialColumns() in run time, instead of setProperty(\"/tableInitialColumns\", ...)\n\n                    // set rows\n                    const rows = this.tableFormatter.formatRows(\n                        formattedResults,\n                        this.getTableColumns(false)\n                    );\n                    for (let i = 0; i < rows.length; i++) {\n                        formattedResults[i].cells = rows[i].cells;\n                    }\n                    this.setProperty(\"/tableRows\", formattedResults);\n                } else {\n                    this.resetTableData();\n                }\n            } else {\n                this.resetTableData();\n            }\n        } catch (error) {\n            this.logger.warning(\"Could not set table data\", error);\n            this.resetTableData();\n        }\n    }\n\n    private resetTableData(): void {\n        this.setProperty(\"/tableDataSource\", undefined);\n        this.setProperty(\"/tableColumns\", []);\n        // prevent pass-by-reference between /tableColumns and /tableInitialColumns\n        // use getTableInitialColumns() in run time, instead of setProperty(\"/tableInitialColumns\", ...)\n        // this.setProperty(\"/tableInitialColumns\", []);\n        this.setProperty(\"/tableRows\", []);\n    }\n}\n"],"mappings":"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","ignoreList":[]}